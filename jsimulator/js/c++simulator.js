// The Module object: Our interface to the outside world. We import
// and export values on it, and do the work to get that through
// closure compiler if necessary. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to do an eval in order to handle the closure compiler
// case, where this code here is minified but Module was defined
// elsewhere (e.g. case 4 above). We also need to check if Module
// already exists (e.g. case 3 above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module;
if (!Module) Module = (typeof Module !== 'undefined' ? Module : null) || {};

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
for (var key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function';
var ENVIRONMENT_IS_WEB = typeof window === 'object';
var ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  if (!Module['print']) Module['print'] = function print(x) {
    process['stdout'].write(x + '\n');
  };
  if (!Module['printErr']) Module['printErr'] = function printErr(x) {
    process['stderr'].write(x + '\n');
  };

  var nodeFS = require('fs');
  var nodePath = require('path');

  Module['read'] = function read(filename, binary) {
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename);
    // The path is absolute if the normalized version is the same as the resolved.
    if (!ret && filename != nodePath['resolve'](filename)) {
      filename = path.join(__dirname, '..', 'src', filename);
      ret = nodeFS['readFileSync'](filename);
    }
    if (ret && !binary) ret = ret.toString();
    return ret;
  };

  Module['readBinary'] = function readBinary(filename) { return Module['read'](filename, true) };

  Module['load'] = function load(f) {
    globalEval(read(f));
  };

  Module['arguments'] = process['argv'].slice(2);

  module['exports'] = Module;
}
else if (ENVIRONMENT_IS_SHELL) {
  if (!Module['print']) Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function read() { throw 'no read() available (jsc?)' };
  }

  Module['readBinary'] = function readBinary(f) {
    return read(f, 'binary');
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  this['Module'] = Module;

}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function read(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof console !== 'undefined') {
    if (!Module['print']) Module['print'] = function print(x) {
      console.log(x);
    };
    if (!Module['printErr']) Module['printErr'] = function printErr(x) {
      console.log(x);
    };
  } else {
    // Probably a worker, and without console.log. We can do very little here...
    var TRY_USE_DUMP = false;
    if (!Module['print']) Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }

  if (ENVIRONMENT_IS_WEB) {
    window['Module'] = Module;
  } else {
    Module['load'] = importScripts;
  }
}
else {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}

function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] == 'undefined' && Module['read']) {
  Module['load'] = function load(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Callbacks
Module['preRun'] = [];
Module['postRun'] = [];

// Merge back in the overrides
for (var key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}



// === Auto-generated preamble library stuff ===

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  setTempRet0: function (value) {
    tempRet0 = value;
  },
  getTempRet0: function () {
    return tempRet0;
  },
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  forceAlign: function (target, quantum) {
    quantum = quantum || 4;
    if (quantum == 1) return target;
    if (isNumber(target) && isNumber(quantum)) {
      return Math.ceil(target/quantum)*quantum;
    } else if (isNumber(quantum) && isPowerOfTwo(quantum)) {
      return '(((' +target + ')+' + (quantum-1) + ')&' + -quantum + ')';
    }
    return 'Math.ceil((' + target + ')/' + quantum + ')*' + quantum;
  },
  isNumberType: function (type) {
    return type in Runtime.INT_TYPES || type in Runtime.FLOAT_TYPES;
  },
  isPointerType: function isPointerType(type) {
  return type[type.length-1] == '*';
},
  isStructType: function isStructType(type) {
  if (isPointerType(type)) return false;
  if (isArrayType(type)) return true;
  if (/<?\{ ?[^}]* ?\}>?/.test(type)) return true; // { i32, i8 } etc. - anonymous struct types
  // See comment in isStructPointerType()
  return type[0] == '%';
},
  INT_TYPES: {"i1":0,"i8":0,"i16":0,"i32":0,"i64":0},
  FLOAT_TYPES: {"float":0,"double":0},
  or64: function (x, y) {
    var l = (x | 0) | (y | 0);
    var h = (Math.round(x / 4294967296) | Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  and64: function (x, y) {
    var l = (x | 0) & (y | 0);
    var h = (Math.round(x / 4294967296) & Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  xor64: function (x, y) {
    var l = (x | 0) ^ (y | 0);
    var h = (Math.round(x / 4294967296) ^ Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  getNativeTypeSize: function (type) {
    switch (type) {
      case 'i1': case 'i8': return 1;
      case 'i16': return 2;
      case 'i32': return 4;
      case 'i64': return 8;
      case 'float': return 4;
      case 'double': return 8;
      default: {
        if (type[type.length-1] === '*') {
          return Runtime.QUANTUM_SIZE; // A pointer
        } else if (type[0] === 'i') {
          var bits = parseInt(type.substr(1));
          assert(bits % 8 === 0);
          return bits/8;
        } else {
          return 0;
        }
      }
    }
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  dedup: function dedup(items, ident) {
  var seen = {};
  if (ident) {
    return items.filter(function(item) {
      if (seen[item[ident]]) return false;
      seen[item[ident]] = true;
      return true;
    });
  } else {
    return items.filter(function(item) {
      if (seen[item]) return false;
      seen[item] = true;
      return true;
    });
  }
},
  set: function set() {
  var args = typeof arguments[0] === 'object' ? arguments[0] : arguments;
  var ret = {};
  for (var i = 0; i < args.length; i++) {
    ret[args[i]] = 0;
  }
  return ret;
},
  STACK_ALIGN: 8,
  getAlignSize: function (type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    if (!vararg && (type == 'i64' || type == 'double')) return 8;
    if (!type) return Math.min(size, 8); // align structures internally to 64 bits
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  calculateStructAlignment: function calculateStructAlignment(type) {
    type.flatSize = 0;
    type.alignSize = 0;
    var diffs = [];
    var prev = -1;
    var index = 0;
    type.flatIndexes = type.fields.map(function(field) {
      index++;
      var size, alignSize;
      if (Runtime.isNumberType(field) || Runtime.isPointerType(field)) {
        size = Runtime.getNativeTypeSize(field); // pack char; char; in structs, also char[X]s.
        alignSize = Runtime.getAlignSize(field, size);
      } else if (Runtime.isStructType(field)) {
        if (field[1] === '0') {
          // this is [0 x something]. When inside another structure like here, it must be at the end,
          // and it adds no size
          // XXX this happens in java-nbody for example... assert(index === type.fields.length, 'zero-length in the middle!');
          size = 0;
          if (Types.types[field]) {
            alignSize = Runtime.getAlignSize(null, Types.types[field].alignSize);
          } else {
            alignSize = type.alignSize || QUANTUM_SIZE;
          }
        } else {
          size = Types.types[field].flatSize;
          alignSize = Runtime.getAlignSize(null, Types.types[field].alignSize);
        }
      } else if (field[0] == 'b') {
        // bN, large number field, like a [N x i8]
        size = field.substr(1)|0;
        alignSize = 1;
      } else if (field[0] === '<') {
        // vector type
        size = alignSize = Types.types[field].flatSize; // fully aligned
      } else if (field[0] === 'i') {
        // illegal integer field, that could not be legalized because it is an internal structure field
        // it is ok to have such fields, if we just use them as markers of field size and nothing more complex
        size = alignSize = parseInt(field.substr(1))/8;
        assert(size % 1 === 0, 'cannot handle non-byte-size field ' + field);
      } else {
        assert(false, 'invalid type for calculateStructAlignment');
      }
      if (type.packed) alignSize = 1;
      type.alignSize = Math.max(type.alignSize, alignSize);
      var curr = Runtime.alignMemory(type.flatSize, alignSize); // if necessary, place this on aligned memory
      type.flatSize = curr + size;
      if (prev >= 0) {
        diffs.push(curr-prev);
      }
      prev = curr;
      return curr;
    });
    if (type.name_ && type.name_[0] === '[') {
      // arrays have 2 elements, so we get the proper difference. then we scale here. that way we avoid
      // allocating a potentially huge array for [999999 x i8] etc.
      type.flatSize = parseInt(type.name_.substr(1))*type.flatSize/2;
    }
    type.flatSize = Runtime.alignMemory(type.flatSize, type.alignSize);
    if (diffs.length == 0) {
      type.flatFactor = type.flatSize;
    } else if (Runtime.dedup(diffs).length == 1) {
      type.flatFactor = diffs[0];
    }
    type.needsFlattening = (type.flatFactor != 1);
    return type.flatIndexes;
  },
  generateStructInfo: function (struct, typeName, offset) {
    var type, alignment;
    if (typeName) {
      offset = offset || 0;
      type = (typeof Types === 'undefined' ? Runtime.typeInfo : Types.types)[typeName];
      if (!type) return null;
      if (type.fields.length != struct.length) {
        printErr('Number of named fields must match the type for ' + typeName + ': possibly duplicate struct names. Cannot return structInfo');
        return null;
      }
      alignment = type.flatIndexes;
    } else {
      var type = { fields: struct.map(function(item) { return item[0] }) };
      alignment = Runtime.calculateStructAlignment(type);
    }
    var ret = {
      __size__: type.flatSize
    };
    if (typeName) {
      struct.forEach(function(item, i) {
        if (typeof item === 'string') {
          ret[item] = alignment[i] + offset;
        } else {
          // embedded struct
          var key;
          for (var k in item) key = k;
          ret[key] = Runtime.generateStructInfo(item[key], type.fields[i], alignment[i]);
        }
      });
    } else {
      struct.forEach(function(item, i) {
        ret[item[1]] = alignment[i];
      });
    }
    return ret;
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      assert(args.length == sig.length-1);
      if (!args.splice) args = Array.prototype.slice.call(args);
      args.splice(0, 0, ptr);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].apply(null, args);
    } else {
      assert(sig.length == 1);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].call(null, ptr);
    }
  },
  functionPointers: [null,null,null,null,null,null,null,null,null,null],
  addFunction: function (func) {
    for (var i = 0; i < Runtime.functionPointers.length; i++) {
      if (!Runtime.functionPointers[i]) {
        Runtime.functionPointers[i] = func;
        return 2*(1 + i);
      }
    }
    throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
  },
  removeFunction: function (index) {
    Runtime.functionPointers[(index-2)/2] = null;
  },
  getAsmConst: function (code, numArgs) {
    // code is a constant string on the heap, so we can cache these
    if (!Runtime.asmConstCache) Runtime.asmConstCache = {};
    var func = Runtime.asmConstCache[code];
    if (func) return func;
    var args = [];
    for (var i = 0; i < numArgs; i++) {
      args.push(String.fromCharCode(36) + i); // $0, $1 etc
    }
    var source = Pointer_stringify(code);
    if (source[0] === '"') {
      // tolerate EM_ASM("..code..") even though EM_ASM(..code..) is correct
      if (source.indexOf('"', 1) === source.length-1) {
        source = source.substr(1, source.length-2);
      } else {
        // something invalid happened, e.g. EM_ASM("..code($0)..", input)
        abort('invalid EM_ASM input |' + source + '|. Please use EM_ASM(..code..) (no quotes) or EM_ASM({ ..code($0).. }, input) (to input values)');
      }
    }
    try {
      var evalled = eval('(function(' + args.join(',') + '){ ' + source + ' })'); // new Function does not allow upvars in node
    } catch(e) {
      Module.printErr('error in executing inline EM_ASM code: ' + e + ' on: \n\n' + source + '\n\nwith args |' + args + '| (make sure to use the right one out of EM_ASM, EM_ASM_ARGS, etc.)');
      throw e;
    }
    return Runtime.asmConstCache[code] = evalled;
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[func]) {
      Runtime.funcWrappers[func] = function dynCall_wrapper() {
        return Runtime.dynCall(sig, func, arguments);
      };
    }
    return Runtime.funcWrappers[func];
  },
  UTF8Processor: function () {
    var buffer = [];
    var needed = 0;
    this.processCChar = function (code) {
      code = code & 0xFF;

      if (buffer.length == 0) {
        if ((code & 0x80) == 0x00) {        // 0xxxxxxx
          return String.fromCharCode(code);
        }
        buffer.push(code);
        if ((code & 0xE0) == 0xC0) {        // 110xxxxx
          needed = 1;
        } else if ((code & 0xF0) == 0xE0) { // 1110xxxx
          needed = 2;
        } else {                            // 11110xxx
          needed = 3;
        }
        return '';
      }

      if (needed) {
        buffer.push(code);
        needed--;
        if (needed > 0) return '';
      }

      var c1 = buffer[0];
      var c2 = buffer[1];
      var c3 = buffer[2];
      var c4 = buffer[3];
      var ret;
      if (buffer.length == 2) {
        ret = String.fromCharCode(((c1 & 0x1F) << 6)  | (c2 & 0x3F));
      } else if (buffer.length == 3) {
        ret = String.fromCharCode(((c1 & 0x0F) << 12) | ((c2 & 0x3F) << 6)  | (c3 & 0x3F));
      } else {
        // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
        var codePoint = ((c1 & 0x07) << 18) | ((c2 & 0x3F) << 12) |
                        ((c3 & 0x3F) << 6)  | (c4 & 0x3F);
        ret = String.fromCharCode(
          Math.floor((codePoint - 0x10000) / 0x400) + 0xD800,
          (codePoint - 0x10000) % 0x400 + 0xDC00);
      }
      buffer.length = 0;
      return ret;
    }
    this.processJSString = function processJSString(string) {
      /* TODO: use TextEncoder when present,
        var encoder = new TextEncoder();
        encoder['encoding'] = "utf-8";
        var utf8Array = encoder['encode'](aMsg.data);
      */
      string = unescape(encodeURIComponent(string));
      var ret = [];
      for (var i = 0; i < string.length; i++) {
        ret.push(string.charCodeAt(i));
      }
      return ret;
    }
  },
  getCompilerSetting: function (name) {
    throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work';
  },
  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((((STACKTOP|0) < (STACK_MAX|0))|0))|0); return ret; },
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + (assert(!staticSealed),size))|0;STATICTOP = (((STATICTOP)+7)&-8); return ret; },
  dynamicAlloc: function (size) { var ret = DYNAMICTOP;DYNAMICTOP = (DYNAMICTOP + (assert(DYNAMICTOP > 0),size))|0;DYNAMICTOP = (((DYNAMICTOP)+7)&-8); if (DYNAMICTOP >= TOTAL_MEMORY) enlargeMemory();; return ret; },
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 8))*(quantum ? quantum : 8); return ret; },
  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0))); return ret; },
  GLOBAL_BASE: 8,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}


Module['Runtime'] = Runtime;

function jsCall() {
  var args = Array.prototype.slice.call(arguments);
  return Runtime.functionPointers[args[0]].apply(null, args.slice(1));
}








//========================================
// Runtime essentials
//========================================

var __THREW__ = 0; // Used in checking for thrown exceptions.

var ABORT = false; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

var undef = 0;
// tempInt is used for 32-bit signed values or smaller. tempBigInt is used
// for 32-bit unsigned values or more than 32 bits. TODO: audit all uses of tempInt
var tempValue, tempInt, tempBigInt, tempInt2, tempBigInt2, tempPair, tempBigIntI, tempBigIntR, tempBigIntS, tempBigIntP, tempBigIntD, tempDouble, tempFloat;
var tempI64, tempI64b;
var tempRet0, tempRet1, tempRet2, tempRet3, tempRet4, tempRet5, tempRet6, tempRet7, tempRet8, tempRet9;

function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  if (!func) {
    try {
      func = eval('_' + ident); // explicit lookup
    } catch(e) {}
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}

var cwrap, ccall;
(function(){
  var stack = 0;
  var JSfuncs = {
    'stackSave' : function() {
      stack = Runtime.stackSave();
    },
    'stackRestore' : function() {
      Runtime.stackRestore(stack);
    },
    // type conversion from js to c
    'arrayToC' : function(arr) {
      var ret = Runtime.stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    },
    'stringToC' : function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        ret = Runtime.stackAlloc(str.length + 1); // +1 for the trailing '\0'
        writeStringToMemory(str, ret);
      }
      return ret;
    }
  };
  // For fast lookup of conversion functions
  var toC = {'string' : JSfuncs['stringToC'], 'array' : JSfuncs['arrayToC']};

  // C calling interface. A convenient way to call C functions (in C files, or
  // defined with extern "C").
  //
  // Note: ccall/cwrap use the C stack for temporary values. If you pass a string
  //       then it is only alive until the call is complete. If the code being
  //       called saves the pointer to be used later, it may point to invalid
  //       data. If you need a string to live forever, you can create it (and
  //       must later delete it manually!) using malloc and writeStringToMemory,
  //       for example.
  //
  // Note: LLVM optimizations can inline and remove functions, after which you will not be
  //       able to call them. Closure can also do so. To avoid that, add your function to
  //       the exports using something like
  //
  //         -s EXPORTED_FUNCTIONS='["_main", "_myfunc"]'
  //
  // @param ident      The name of the C function (note that C++ functions will be name-mangled - use extern "C")
  // @param returnType The return type of the function, one of the JS types 'number', 'string' or 'array' (use 'number' for any C pointer, and
  //                   'array' for JavaScript arrays and typed arrays; note that arrays are 8-bit).
  // @param argTypes   An array of the types of arguments for the function (if there are no arguments, this can be ommitted). Types are as in returnType,
  //                   except that 'array' is not possible (there is no way for us to know the length of the array)
  // @param args       An array of the arguments to the function, as native JS values (as in returnType)
  //                   Note that string arguments will be stored on the stack (the JS string will become a C string on the stack).
  // @return           The return value, as a native JS value (as in returnType)
  ccall = function ccallFunc(ident, returnType, argTypes, args) {
    var func = getCFunc(ident);
    var cArgs = [];
    assert(returnType !== 'array', 'Return type should not be "array".');
    if (args) {
      for (var i = 0; i < args.length; i++) {
        var converter = toC[argTypes[i]];
        if (converter) {
          if (stack === 0) stack = Runtime.stackSave();
          cArgs[i] = converter(args[i]);
        } else {
          cArgs[i] = args[i];
        }
      }
    }
    var ret = func.apply(null, cArgs);
    if (returnType === 'string') ret = Pointer_stringify(ret);
    if (stack !== 0) JSfuncs['stackRestore']();
    return ret;
  }

  var sourceRegex = /^function\s*\(([^)]*)\)\s*{\s*([^*]*?)[\s;]*(?:return\s*(.*?)[;\s]*)?}$/;
  function parseJSFunc(jsfunc) {
    // Match the body and the return value of a javascript function source
    var parsed = jsfunc.toString().match(sourceRegex).slice(1);
    return {arguments : parsed[0], body : parsed[1], returnValue: parsed[2]}
  }
  var JSsource = {};
  for (var fun in JSfuncs) {
    if (JSfuncs.hasOwnProperty(fun)) {
      // Elements of toCsource are arrays of three items:
      // the code, and the return value
      JSsource[fun] = parseJSFunc(JSfuncs[fun]);
    }
  }
  // Returns a native JS wrapper for a C function. This is similar to ccall, but
  // returns a function you can call repeatedly in a normal way. For example:
  //
  //   var my_function = cwrap('my_c_function', 'number', ['number', 'number']);
  //   alert(my_function(5, 22));
  //   alert(my_function(99, 12));
  //
  cwrap = function cwrap(ident, returnType, argTypes) {
    var cfunc = getCFunc(ident);
    // When the function takes numbers and returns a number, we can just return
    // the original function
    var numericArgs = argTypes.every(function(type){ return type === 'number'});
    var numericRet = (returnType !== 'string');
    if ( numericRet && numericArgs) {
      return cfunc;
    }
    // Creation of the arguments list (["$1","$2",...,"$nargs"])
    var argNames = argTypes.map(function(x,i){return '$'+i});
    var funcstr = "(function(" + argNames.join(',') + ") {";
    var nargs = argTypes.length;
    if (!numericArgs) {
      // Generate the code needed to convert the arguments from javascript
      // values to pointers
      funcstr += JSsource['stackSave'].body + ';';
      for (var i = 0; i < nargs; i++) {
        var arg = argNames[i], type = argTypes[i];
        if (type === 'number') continue;
        var convertCode = JSsource[type + 'ToC']; // [code, return]
        funcstr += 'var ' + convertCode.arguments + ' = ' + arg + ';';
        funcstr += convertCode.body + ';';
        funcstr += arg + '=' + convertCode.returnValue + ';';
      }
    }

    // When the code is compressed, the name of cfunc is not literally 'cfunc' anymore
    var cfuncname = parseJSFunc(function(){return cfunc}).returnValue;
    // Call the function
    funcstr += 'var ret = ' + cfuncname + '(' + argNames.join(',') + ');';
    if (!numericRet) { // Return type can only by 'string' or 'number'
      // Convert the result to a string
      var strgfy = parseJSFunc(function(){return Pointer_stringify}).returnValue;
      funcstr += 'ret = ' + strgfy + '(ret);';
    }
    if (!numericArgs) {
      // If we had a stack, restore it
      funcstr += JSsource['stackRestore'].body + ';';
    }
    funcstr += 'return ret})';
    return eval(funcstr);
  };
})();
Module["cwrap"] = cwrap;
Module["ccall"] = ccall;

// Sets a value in memory in a dynamic way at run-time. Uses the
// type data. This is the same as makeSetValue, except that
// makeSetValue is done at compile-time and generates the needed
// code then, whereas this function picks the right code at
// run-time.
// Note that setValue and getValue only do *aligned* writes and reads!
// Note that ccall uses JS types as for defining types, while setValue and
// getValue need LLVM types ('i8', 'i32') - this is a lower-level operation
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module['setValue'] = setValue;

// Parallel to setValue.
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module['getValue'] = getValue;

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module['ALLOC_NORMAL'] = ALLOC_NORMAL;
Module['ALLOC_STACK'] = ALLOC_STACK;
Module['ALLOC_STATIC'] = ALLOC_STATIC;
Module['ALLOC_DYNAMIC'] = ALLOC_DYNAMIC;
Module['ALLOC_NONE'] = ALLOC_NONE;

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(slab, ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}
Module['allocate'] = allocate;

function Pointer_stringify(ptr, /* optional */ length) {
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = false;
  var t;
  var i = 0;
  while (1) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))>>0)];
    if (t >= 128) hasUtf = true;
    else if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (!hasUtf) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }

  var utf8 = new Runtime.UTF8Processor();
  for (i = 0; i < length; i++) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))>>0)];
    ret += utf8.processCChar(t);
  }
  return ret;
}
Module['Pointer_stringify'] = Pointer_stringify;

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.
function UTF16ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
    if (codeUnit == 0)
      return str;
    ++i;
    // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
    str += String.fromCharCode(codeUnit);
  }
}
Module['UTF16ToString'] = UTF16ToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16LE form. The copy will require at most (str.length*2+1)*2 bytes of space in the HEAP.
function stringToUTF16(str, outPtr) {
  for(var i = 0; i < str.length; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[(((outPtr)+(i*2))>>1)]=codeUnit;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[(((outPtr)+(str.length*2))>>1)]=0;
}
Module['stringToUTF16'] = stringToUTF16;

// Given a pointer 'ptr' to a null-terminated UTF32LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.
function UTF32ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}
Module['UTF32ToString'] = UTF32ToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32LE form. The copy will require at most (str.length+1)*4 bytes of space in the HEAP,
// but can use less, since str.length does not return the number of characters in the string, but the number of UTF-16 code units in the string.
function stringToUTF32(str, outPtr) {
  var iChar = 0;
  for(var iCodeUnit = 0; iCodeUnit < str.length; ++iCodeUnit) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    var codeUnit = str.charCodeAt(iCodeUnit); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++iCodeUnit);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[(((outPtr)+(iChar*4))>>2)]=codeUnit;
    ++iChar;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[(((outPtr)+(iChar*4))>>2)]=0;
}
Module['stringToUTF32'] = stringToUTF32;

function demangle(func) {
  var i = 3;
  // params, etc.
  var basicTypes = {
    'v': 'void',
    'b': 'bool',
    'c': 'char',
    's': 'short',
    'i': 'int',
    'l': 'long',
    'f': 'float',
    'd': 'double',
    'w': 'wchar_t',
    'a': 'signed char',
    'h': 'unsigned char',
    't': 'unsigned short',
    'j': 'unsigned int',
    'm': 'unsigned long',
    'x': 'long long',
    'y': 'unsigned long long',
    'z': '...'
  };
  var subs = [];
  var first = true;
  function dump(x) {
    //return;
    if (x) Module.print(x);
    Module.print(func);
    var pre = '';
    for (var a = 0; a < i; a++) pre += ' ';
    Module.print (pre + '^');
  }
  function parseNested() {
    i++;
    if (func[i] === 'K') i++; // ignore const
    var parts = [];
    while (func[i] !== 'E') {
      if (func[i] === 'S') { // substitution
        i++;
        var next = func.indexOf('_', i);
        var num = func.substring(i, next) || 0;
        parts.push(subs[num] || '?');
        i = next+1;
        continue;
      }
      if (func[i] === 'C') { // constructor
        parts.push(parts[parts.length-1]);
        i += 2;
        continue;
      }
      var size = parseInt(func.substr(i));
      var pre = size.toString().length;
      if (!size || !pre) { i--; break; } // counter i++ below us
      var curr = func.substr(i + pre, size);
      parts.push(curr);
      subs.push(curr);
      i += pre + size;
    }
    i++; // skip E
    return parts;
  }
  function parse(rawList, limit, allowVoid) { // main parser
    limit = limit || Infinity;
    var ret = '', list = [];
    function flushList() {
      return '(' + list.join(', ') + ')';
    }
    var name;
    if (func[i] === 'N') {
      // namespaced N-E
      name = parseNested().join('::');
      limit--;
      if (limit === 0) return rawList ? [name] : name;
    } else {
      // not namespaced
      if (func[i] === 'K' || (first && func[i] === 'L')) i++; // ignore const and first 'L'
      var size = parseInt(func.substr(i));
      if (size) {
        var pre = size.toString().length;
        name = func.substr(i + pre, size);
        i += pre + size;
      }
    }
    first = false;
    if (func[i] === 'I') {
      i++;
      var iList = parse(true);
      var iRet = parse(true, 1, true);
      ret += iRet[0] + ' ' + name + '<' + iList.join(', ') + '>';
    } else {
      ret = name;
    }
    paramLoop: while (i < func.length && limit-- > 0) {
      //dump('paramLoop');
      var c = func[i++];
      if (c in basicTypes) {
        list.push(basicTypes[c]);
      } else {
        switch (c) {
          case 'P': list.push(parse(true, 1, true)[0] + '*'); break; // pointer
          case 'R': list.push(parse(true, 1, true)[0] + '&'); break; // reference
          case 'L': { // literal
            i++; // skip basic type
            var end = func.indexOf('E', i);
            var size = end - i;
            list.push(func.substr(i, size));
            i += size + 2; // size + 'EE'
            break;
          }
          case 'A': { // array
            var size = parseInt(func.substr(i));
            i += size.toString().length;
            if (func[i] !== '_') throw '?';
            i++; // skip _
            list.push(parse(true, 1, true)[0] + ' [' + size + ']');
            break;
          }
          case 'E': break paramLoop;
          default: ret += '?' + c; break paramLoop;
        }
      }
    }
    if (!allowVoid && list.length === 1 && list[0] === 'void') list = []; // avoid (void)
    if (rawList) {
      if (ret) {
        list.push(ret + '?');
      }
      return list;
    } else {
      return ret + flushList();
    }
  }
  try {
    // Special-case the entry point, since its name differs from other name mangling.
    if (func == 'Object._main' || func == '_main') {
      return 'main()';
    }
    if (typeof func === 'number') func = Pointer_stringify(func);
    if (func[0] !== '_') return func;
    if (func[1] !== '_') return func; // C function
    if (func[2] !== 'Z') return func;
    switch (func[3]) {
      case 'n': return 'operator new()';
      case 'd': return 'operator delete()';
    }
    return parse();
  } catch(e) {
    return func;
  }
}

function demangleAll(text) {
  return text.replace(/__Z[\w\d_]+/g, function(x) { var y = demangle(x); return x === y ? x : (x + ' [' + y + ']') });
}

function stackTrace() {
  var stack = new Error().stack;
  return stack ? demangleAll(stack) : '(no stack trace available)'; // Stack trace is not available at least on IE10 and Safari 6.
}

// Memory management

var PAGE_SIZE = 4096;
function alignMemoryPage(x) {
  return (x+4095)&-4096;
}

var HEAP;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;

var STATIC_BASE = 0, STATICTOP = 0, staticSealed = false; // static area
var STACK_BASE = 0, STACKTOP = 0, STACK_MAX = 0; // stack area
var DYNAMIC_BASE = 0, DYNAMICTOP = 0; // dynamic area handled by sbrk

function enlargeMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with -s TOTAL_MEMORY=X with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with ALLOW_MEMORY_GROWTH which adjusts the size at runtime but prevents some optimizations, or (3) set Module.TOTAL_MEMORY before the program runs.');
}

var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;
var FAST_MEMORY = Module['FAST_MEMORY'] || 2097152;

var totalMemory = 4096;
while (totalMemory < TOTAL_MEMORY || totalMemory < 2*TOTAL_STACK) {
  if (totalMemory < 16*1024*1024) {
    totalMemory *= 2;
  } else {
    totalMemory += 16*1024*1024
  }
}
if (totalMemory !== TOTAL_MEMORY) {
  Module.printErr('increasing TOTAL_MEMORY to ' + totalMemory + ' to be more reasonable');
  TOTAL_MEMORY = totalMemory;
}

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
       'JS engine does not provide full typed array support');

var buffer = new ArrayBuffer(TOTAL_MEMORY);
HEAP8 = new Int8Array(buffer);
HEAP16 = new Int16Array(buffer);
HEAP32 = new Int32Array(buffer);
HEAPU8 = new Uint8Array(buffer);
HEAPU16 = new Uint16Array(buffer);
HEAPU32 = new Uint32Array(buffer);
HEAPF32 = new Float32Array(buffer);
HEAPF64 = new Float64Array(buffer);

// Endianness check (note: assumes compiler arch was little-endian)
HEAP32[0] = 255;
assert(HEAPU8[0] === 255 && HEAPU8[3] === 0, 'Typed arrays 2 must be run on a little-endian system');

Module['HEAP'] = HEAP;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Runtime.dynCall('v', func);
      } else {
        Runtime.dynCall('vi', func, [callback.arg]);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;

function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
    Module.printErr('Exiting runtime. Any attempt to access the compiled C code may fail from now. If you want to keep the runtime alive, set Module["noExitRuntime"] = true or build with -s NO_EXIT_RUNTIME=1');
  }
  callRuntimeCallbacks(__ATEXIT__);
}

function postRun() {
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}
Module['addOnPreRun'] = Module.addOnPreRun = addOnPreRun;

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}
Module['addOnInit'] = Module.addOnInit = addOnInit;

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}
Module['addOnPreMain'] = Module.addOnPreMain = addOnPreMain;

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}
Module['addOnExit'] = Module.addOnExit = addOnExit;

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}
Module['addOnPostRun'] = Module.addOnPostRun = addOnPostRun;

// Tools

// This processes a JS string into a C-line array of numbers, 0-terminated.
// For LLVM-originating strings, see parser.js:parseLLVMString function
function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var ret = (new Runtime.UTF8Processor()).processJSString(stringy);
  if (length) {
    ret.length = length;
  }
  if (!dontAddNull) {
    ret.push(0);
  }
  return ret;
}
Module['intArrayFromString'] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module['intArrayToString'] = intArrayToString;

// Write a Javascript array to somewhere in the heap
function writeStringToMemory(string, buffer, dontAddNull) {
  var array = intArrayFromString(string, dontAddNull);
  var i = 0;
  while (i < array.length) {
    var chr = array[i];
    HEAP8[(((buffer)+(i))>>0)]=chr;
    i = i + 1;
  }
}
Module['writeStringToMemory'] = writeStringToMemory;

function writeArrayToMemory(array, buffer) {
  for (var i = 0; i < array.length; i++) {
    HEAP8[(((buffer)+(i))>>0)]=array[i];
  }
}
Module['writeArrayToMemory'] = writeArrayToMemory;

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; i++) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[(((buffer)+(i))>>0)]=str.charCodeAt(i);
  }
  if (!dontAddNull) HEAP8[(((buffer)+(str.length))>>0)]=0;
}
Module['writeAsciiToMemory'] = writeAsciiToMemory;

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}

// check for imul support, and also for correctness ( https://bugs.webkit.org/show_bug.cgi?id=126345 )
if (!Math['imul'] || Math['imul'](0xffffffff, 5) !== -5) Math['imul'] = function imul(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
Math.imul = Math['imul'];


var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_min = Math.min;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            Module.printErr('still waiting on run dependencies:');
          }
          Module.printErr('dependency: ' + dep);
        }
        if (shown) {
          Module.printErr('(end of list)');
        }
      }, 10000);
    }
  } else {
    Module.printErr('warning: run dependency added without ID');
  }
}
Module['addRunDependency'] = addRunDependency;
function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    Module.printErr('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}
Module['removeRunDependency'] = removeRunDependency;

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data


var memoryInitializer = null;

// === Body ===
var __ZTIt = 14856;
var __ZTIs = 14840;
var __ZTIm = 14920;
var __ZTIl = 14904;
var __ZTVN10__cxxabiv119__pointer_type_infoE = 14616;
var __ZTIi = 14872;
var __ZTIh = 14808;
var __ZTIj = 14888;
var __ZTId = 14952;
var __ZTVN10__cxxabiv117__class_type_infoE = 14576;
var __ZTIf = 14936;
var __ZTIa = 14824;
var __ZTVN10__cxxabiv120__si_class_type_infoE = 14960;
var __ZTIc = 14792;




STATIC_BASE = 8;

STATICTOP = STATIC_BASE + Runtime.alignMemory(16739);
  /* global initializers */ __ATINIT__.push({ func: function() { __GLOBAL__I_a25() } }, { func: function() { __GLOBAL__I_a46() } }, { func: function() { __GLOBAL__I_a75() } });
  

/* memory initializer */ allocate([78,86,101,99,116,111,114,0,120,0,0,0,0,0,0,0,121,0,0,0,0,0,0,0,77,111,100,101,108,79,98,106,101,99,116,0,0,0,0,0,105,115,68,101,97,100,0,0,107,105,108,108,0,0,0,0,109,97,115,115,0,0,0,0,105,110,100,101,120,0,0,0,112,111,115,105,116,105,111,110,0,0,0,0,0,0,0,0,118,101,108,111,99,105,116,121,0,0,0,0,0,0,0,0,102,111,114,99,101,0,0,0,77,79,86,101,99,116,111,114,0,0,0,0,0,0,0,0,77,111,100,101,108,0,0,0,117,112,100,97,116,101,0,0,118,105,105,105,100,0,0,0,53,77,111,100,101,108,0,0,248,56,0,0,160,0,0,0,78,83,116,51,95,95,49,54,118,101,99,116,111,114,73,49,49,77,111,100,101,108,79,98,106,101,99,116,78,83,95,57,97,108,108,111,99,97,116,111,114,73,83,49,95,69,69,69,69,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,51,95,95,118,101,99,116,111,114,95,98,97,115,101,73,49,49,77,111,100,101,108,79,98,106,101,99,116,78,83,95,57,97,108,108,111,99,97,116,111,114,73,83,49,95,69,69,69,69,0,0,0,0,0,0,0,78,83,116,51,95,95,49,50,48,95,95,118,101,99,116,111,114,95,98,97,115,101,95,99,111,109,109,111,110,73,76,98,49,69,69,69,0,0,0,0,248,56,0,0,40,1,0,0,216,58,0,0,232,0,0,0,0,0,0,0,1,0,0,0,80,1,0,0,0,0,0,0,216,58,0,0,176,0,0,0,0,0,0,0,1,0,0,0,88,1,0,0,0,0,0,0,80,53,77,111,100,101,108,0,32,57,0,0,136,1,0,0,0,0,0,0,168,0,0,0,105,105,0,0,0,0,0,0,118,105,0,0,0,0,0,0,118,0,0,0,0,0,0,0,105,105,0,0,0,0,0,0,80,75,53,77,111,100,101,108,0,0,0,0,0,0,0,0,32,57,0,0,192,1,0,0,1,0,0,0,168,0,0,0,112,117,115,104,95,98,97,99,107,0,0,0,0,0,0,0,115,105,122,101,0,0,0,0,103,101,116,0,0,0,0,0,115,101,116,0,0,0,0,0,105,105,105,105,105,0,0,0,49,49,77,111,100,101,108,79,98,106,101,99,116,0,0,0,248,56,0,0,16,2,0,0,105,105,105,105,0,0,0,0,78,49,48,101,109,115,99,114,105,112,116,101,110,51,118,97,108,69,0,0,0,0,0,0,248,56,0,0,48,2,0,0,105,105,105,0,0,0,0,0,80,75,78,83,116,51,95,95,49,54,118,101,99,116,111,114,73,49,49,77,111,100,101,108,79,98,106,101,99,116,78,83,95,57,97,108,108,111,99,97,116,111,114,73,83,49,95,69,69,69,69,0,0,0,0,0,32,57,0,0,88,2,0,0,1,0,0,0,112,1,0,0,118,105,105,105,0,0,0,0,80,78,83,116,51,95,95,49,54,118,101,99,116,111,114,73,49,49,77,111,100,101,108,79,98,106,101,99,116,78,83,95,57,97,108,108,111,99,97,116,111,114,73,83,49,95,69,69,69,69,0,0,0,0,0,0,32,57,0,0,168,2,0,0,0,0,0,0,112,1,0,0,105,105,0,0,0,0,0,0,118,105,0,0,0,0,0,0,105,105,0,0,0,0,0,0,118,105,105,105,0,0,0,0,55,78,86,101,99,116,111,114,73,100,76,105,51,69,69,0,248,56,0,0,16,3,0,0,105,105,105,0,0,0,0,0,118,105,105,105,0,0,0,0,105,105,105,0,0,0,0,0,118,105,105,100,0,0,0,0,100,105,105,0,0,0,0,0,118,105,105,0,0,0,0,0,80,49,49,77,111,100,101,108,79,98,106,101,99,116,0,0,32,57,0,0,88,3,0,0,0,0,0,0,32,2,0,0,105,105,105,0,0,0,0,0,105,105,0,0,0,0,0,0,105,105,105,105,105,100,100,105,0,0,0,0,0,0,0,0,118,105,0,0,0,0,0,0,105,105,0,0,0,0,0,0,80,75,49,49,77,111,100,101,108,79,98,106,101,99,116,0,32,57,0,0,168,3,0,0,1,0,0,0,32,2,0,0,118,105,105,100,0,0,0,0,100,105,105,0,0,0,0,0,105,105,100,100,0,0,0,0,80,55,78,86,101,99,116,111,114,73,100,76,105,51,69,69,0,0,0,0,0,0,0,0,32,57,0,0,224,3,0,0,0,0,0,0,32,3,0,0,118,105,0,0,0,0,0,0,105,105,0,0,0,0,0,0,80,75,55,78,86,101,99,116,111,114,73,100,76,105,51,69,69,0,0,0,0,0,0,0,32,57,0,0,24,4,0,0,1,0,0,0,32,3,0,0,118,111,105,100,0,0,0,0,98,111,111,108,0,0,0,0,99,104,97,114,0,0,0,0,115,105,103,110,101,100,32,99,104,97,114,0,0,0,0,0,117,110,115,105,103,110,101,100,32,99,104,97,114,0,0,0,115,104,111,114,116,0,0,0,117,110,115,105,103,110,101,100,32,115,104,111,114,116,0,0,105,110,116,0,0,0,0,0,117,110,115,105,103,110,101,100,32,105,110,116,0,0,0,0,108,111,110,103,0,0,0,0,117,110,115,105,103,110,101,100,32,108,111,110,103,0,0,0,102,108,111,97,116,0,0,0,100,111,117,98,108,101,0,0,115,116,100,58,58,115,116,114,105,110,103,0,0,0,0,0,115,116,100,58,58,98,97,115,105,99,95,115,116,114,105,110,103,60,117,110,115,105,103,110,101,100,32,99,104,97,114,62,0,0,0,0,0,0,0,0,115,116,100,58,58,119,115,116,114,105,110,103,0,0,0,0,101,109,115,99,114,105,112,116,101,110,58,58,118,97,108,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,69,0,0,0,0,0,248,56,0,0,64,5,0,0,78,83,116,51,95,95,49,49,50,98,97,115,105,99,95,115,116,114,105,110,103,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,78,83,95,57,97,108,108,111,99,97,116,111,114,73,119,69,69,69,69,0,0,78,83,116,51,95,95,49,50,49,95,95,98,97,115,105,99,95,115,116,114,105,110,103,95,99,111,109,109,111,110,73,76,98,49,69,69,69,0,0,0,248,56,0,0,168,5,0,0,216,58,0,0,104,5,0,0,0,0,0,0,1,0,0,0,208,5,0,0,0,0,0,0,78,83,116,51,95,95,49,49,50,98,97,115,105,99,95,115,116,114,105,110,103,73,104,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,104,69,69,78,83,95,57,97,108,108,111,99,97,116,111,114,73,104,69,69,69,69,0,0,216,58,0,0,240,5,0,0,0,0,0,0,1,0,0,0,208,5,0,0,0,0,0,0,78,83,116,51,95,95,49,49,50,98,97,115,105,99,95,115,116,114,105,110,103,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,78,83,95,57,97,108,108,111,99,97,116,111,114,73,99,69,69,69,69,0,0,216,58,0,0,72,6,0,0,0,0,0,0,1,0,0,0,208,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,40,11,0,0,22,0,0,0,23,0,0,0,24,0,0,0,25,0,0,0,26,0,0,0,27,0,0,0,28,0,0,0,29,0,0,0,30,0,0,0,31,0,0,0,32,0,0,0,33,0,0,0,34,0,0,0,35,0,0,0,78,83,116,51,95,95,49,49,49,95,95,115,116,100,111,117,116,98,117,102,73,119,69,69,0,0,0,0,0,0,0,0,120,58,0,0,8,11,0,0,88,17,0,0,0,0,0,0,0,0,0,0,144,11,0,0,36,0,0,0,37,0,0,0,38,0,0,0,25,0,0,0,26,0,0,0,27,0,0,0,39,0,0,0,29,0,0,0,30,0,0,0,40,0,0,0,41,0,0,0,42,0,0,0,43,0,0,0,44,0,0,0,78,83,116,51,95,95,49,49,48,95,95,115,116,100,105,110,98,117,102,73,119,69,69,0,120,58,0,0,120,11,0,0,88,17,0,0,0,0,0,0,117,110,115,117,112,112,111,114,116,101,100,32,108,111,99,97,108,101,32,102,111,114,32,115,116,97,110,100,97,114,100,32,105,110,112,117,116,0,0,0,0,0,0,0,40,12,0,0,45,0,0,0,46,0,0,0,47,0,0,0,48,0,0,0,49,0,0,0,50,0,0,0,51,0,0,0,52,0,0,0,53,0,0,0,54,0,0,0,55,0,0,0,56,0,0,0,57,0,0,0,58,0,0,0,78,83,116,51,95,95,49,49,49,95,95,115,116,100,111,117,116,98,117,102,73,99,69,69,0,0,0,0,0,0,0,0,120,58,0,0,8,12,0,0,24,17,0,0,0,0,0,0,0,0,0,0,144,12,0,0,59,0,0,0,60,0,0,0,61,0,0,0,48,0,0,0,49,0,0,0,50,0,0,0,62,0,0,0,52,0,0,0,53,0,0,0,63,0,0,0,64,0,0,0,65,0,0,0,66,0,0,0,67,0,0,0,78,83,116,51,95,95,49,49,48,95,95,115,116,100,105,110,98,117,102,73,99,69,69,0,120,58,0,0,120,12,0,0,24,17,0,0,0,0,0,0,78,83,116,51,95,95,49,49,52,95,95,115,104,97,114,101,100,95,99,111,117,110,116,69,0,0,0,0,0,0,0,0,248,56,0,0,160,12,0,0,0,0,0,0,8,13,0,0,68,0,0,0,69,0,0,0,70,0,0,0,0,0,0,0,0,0,0,0,112,13,0,0,71,0,0,0,72,0,0,0,73,0,0,0,0,0,0,0,83,116,49,49,108,111,103,105,99,95,101,114,114,111,114,0,120,58,0,0,248,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,13,0,0,68,0,0,0,74,0,0,0,70,0,0,0,0,0,0,0,83,116,49,50,108,101,110,103,116,104,95,101,114,114,111,114,0,0,0,0,0,0,0,0,120,58,0,0,48,13,0,0,8,13,0,0,0,0,0,0,83,116,49,51,114,117,110,116,105,109,101,95,101,114,114,111,114,0,0,0,0,0,0,0,120,58,0,0,88,13,0,0,0,0,0,0,0,0,0,0,58,32,0,0,0,0,0,0,0,0,0,0,184,13,0,0,75,0,0,0,76,0,0,0,73,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,50,115,121,115,116,101,109,95,101,114,114,111,114,69,0,0,120,58,0,0,160,13,0,0,112,13,0,0,0,0,0,0,78,83,116,51,95,95,49,49,52,101,114,114,111,114,95,99,97,116,101,103,111,114,121,69,0,0,0,0,0,0,0,0,248,56,0,0,200,13,0,0,78,83,116,51,95,95,49,49,50,95,95,100,111,95,109,101,115,115,97,103,101,69,0,0,120,58,0,0,240,13,0,0,232,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,98,97,115,105,99,95,115,116,114,105,110,103,0,0,0,0,0,0,0,0,24,17,0,0,77,0,0,0,78,0,0,0,79,0,0,0,48,0,0,0,49,0,0,0,50,0,0,0,62,0,0,0,52,0,0,0,53,0,0,0,54,0,0,0,55,0,0,0,56,0,0,0,66,0,0,0,67,0,0,0,0,0,0,0,88,17,0,0,80,0,0,0,81,0,0,0,82,0,0,0,25,0,0,0,26,0,0,0,27,0,0,0,39,0,0,0,29,0,0,0,30,0,0,0,31,0,0,0,32,0,0,0,33,0,0,0,43,0,0,0,44,0,0,0,8,0,0,0,0,0,0,0,144,17,0,0,83,0,0,0,84,0,0,0,248,255,255,255,248,255,255,255,144,17,0,0,85,0,0,0,86,0,0,0,8,0,0,0,0,0,0,0,216,17,0,0,87,0,0,0,88,0,0,0,248,255,255,255,248,255,255,255,216,17,0,0,89,0,0,0,90,0,0,0,4,0,0,0,0,0,0,0,32,18,0,0,91,0,0,0,92,0,0,0,252,255,255,255,252,255,255,255,32,18,0,0,93,0,0,0,94,0,0,0,4,0,0,0,0,0,0,0,104,18,0,0,95,0,0,0,96,0,0,0,252,255,255,255,252,255,255,255,104,18,0,0,97,0,0,0,98,0,0,0,105,111,115,116,114,101,97,109,0,0,0,0,0,0,0,0,117,110,115,112,101,99,105,102,105,101,100,32,105,111,115,116,114,101,97,109,95,99,97,116,101,103,111,114,121,32,101,114,114,111,114,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,16,0,0,99,0,0,0,100,0,0,0,73,0,0,0,0,0,0,0,0,0,0,0,88,16,0,0,101,0,0,0,102,0,0,0,105,111,115,95,98,97,115,101,58,58,99,108,101,97,114,0,78,83,116,51,95,95,49,56,105,111,115,95,98,97,115,101,55,102,97,105,108,117,114,101,69,0,0,0,0,0,0,0,120,58,0,0,16,16,0,0,184,13,0,0,0,0,0,0,78,83,116,51,95,95,49,56,105,111,115,95,98,97,115,101,69,0,0,0,0,0,0,0,248,56,0,0,64,16,0,0,78,83,116,51,95,95,49,57,98,97,115,105,99,95,105,111,115,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,0,0,0,0,0,0,120,58,0,0,96,16,0,0,88,16,0,0,0,0,0,0,78,83,116,51,95,95,49,57,98,97,115,105,99,95,105,111,115,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,0,0,0,0,0,0,0,120,58,0,0,160,16,0,0,88,16,0,0,0,0,0,0,78,83,116,51,95,95,49,49,53,98,97,115,105,99,95,115,116,114,101,97,109,98,117,102,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,0,0,0,0,0,0,0,248,56,0,0,224,16,0,0,78,83,116,51,95,95,49,49,53,98,97,115,105,99,95,115,116,114,101,97,109,98,117,102,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,0,0,0,0,0,0,0,0,248,56,0,0,32,17,0,0,78,83,116,51,95,95,49,49,51,98,97,115,105,99,95,105,115,116,114,101,97,109,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,0,216,58,0,0,96,17,0,0,0,0,0,0,1,0,0,0,144,16,0,0,3,244,255,255,78,83,116,51,95,95,49,49,51,98,97,115,105,99,95,105,115,116,114,101,97,109,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,0,0,216,58,0,0,168,17,0,0,0,0,0,0,1,0,0,0,208,16,0,0,3,244,255,255,78,83,116,51,95,95,49,49,51,98,97,115,105,99,95,111,115,116,114,101,97,109,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,0,216,58,0,0,240,17,0,0,0,0,0,0,1,0,0,0,144,16,0,0,3,244,255,255,78,83,116,51,95,95,49,49,51,98,97,115,105,99,95,111,115,116,114,101,97,109,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,0,0,216,58,0,0,56,18,0,0,0,0,0,0,1,0,0,0,208,16,0,0,3,244,255,255,0,0,0,0,200,18,0,0,103,0,0,0,104,0,0,0,105,0,0,0,106,0,0,0,107,0,0,0,108,0,0,0,109,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,57,95,95,105,111,115,116,114,101,97,109,95,99,97,116,101,103,111,114,121,69,0,0,0,120,58,0,0,168,18,0,0,8,14,0,0,0,0,0,0,0,0,0,0,184,32,0,0,110,0,0,0,111,0,0,0,112,0,0,0,113,0,0,0,114,0,0,0,115,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,32,0,0,116,0,0,0,117,0,0,0,112,0,0,0,118,0,0,0,119,0,0,0,120,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,144,37,0,0,121,0,0,0,122,0,0,0,112,0,0,0,123,0,0,0,124,0,0,0,125,0,0,0,126,0,0,0,127,0,0,0,128,0,0,0,129,0,0,0,130,0,0,0,131,0,0,0,132,0,0,0,133,0,0,0,0,0,0,0,0,0,0,0,48,49,50,51,52,53,54,55,56,57,97,98,99,100,101,102,65,66,67,68,69,70,120,88,43,45,112,80,105,73,110,78,0,0,0,0,0,0,0,0,37,112,0,0,0,0,0,0,0,0,0,0,40,38,0,0,134,0,0,0,135,0,0,0,112,0,0,0,136,0,0,0,137,0,0,0,138,0,0,0,139,0,0,0,140,0,0,0,141,0,0,0,142,0,0,0,143,0,0,0,144,0,0,0,145,0,0,0,146,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,232,38,0,0,147,0,0,0,148,0,0,0,112,0,0,0,149,0,0,0,150,0,0,0,151,0,0,0,152,0,0,0,153,0,0,0,154,0,0,0,155,0,0,0,156,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,39,0,0,157,0,0,0,158,0,0,0,112,0,0,0,159,0,0,0,160,0,0,0,161,0,0,0,162,0,0,0,163,0,0,0,164,0,0,0,165,0,0,0,166,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,0,0,0,0,0,0,0,37,112,0,0,0,0,0,0,0,0,0,0,168,34,0,0,167,0,0,0,168,0,0,0,112,0,0,0,169,0,0,0,170,0,0,0,171,0,0,0,172,0,0,0,173,0,0,0,174,0,0,0,175,0,0,0,248,255,255,255,168,34,0,0,176,0,0,0,177,0,0,0,178,0,0,0,179,0,0,0,180,0,0,0,181,0,0,0,182,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,72,58,37,77,58,37,83,37,109,47,37,100,47,37,121,37,89,45,37,109,45,37,100,37,73,58,37,77,58,37,83,32,37,112,0,0,0,0,0,37,72,58,37,77,0,0,0,37,72,58,37,77,58,37,83,0,0,0,0,72,35,0,0,183,0,0,0,184,0,0,0,112,0,0,0,185,0,0,0,186,0,0,0,187,0,0,0,188,0,0,0,189,0,0,0,190,0,0,0,191,0,0,0,248,255,255,255,72,35,0,0,192,0,0,0,193,0,0,0,194,0,0,0,195,0,0,0,196,0,0,0,197,0,0,0,198,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,37,0,0,0,109,0,0,0,47,0,0,0,37,0,0,0,100,0,0,0,47,0,0,0,37,0,0,0,121,0,0,0,37,0,0,0,89,0,0,0,45,0,0,0,37,0,0,0,109,0,0,0,45,0,0,0,37,0,0,0,100,0,0,0,37,0,0,0,73,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,32,0,0,0,37,0,0,0,112,0,0,0,0,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,0,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,0,0,0,0,216,35,0,0,199,0,0,0,200,0,0,0,112,0,0,0,201,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,36,0,0,202,0,0,0,203,0,0,0,112,0,0,0,204,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,33,0,0,205,0,0,0,206,0,0,0,112,0,0,0,207,0,0,0,208,0,0,0,209,0,0,0,210,0,0,0,211,0,0,0,212,0,0,0,213,0,0,0,214,0,0,0,215,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,112,33,0,0,216,0,0,0,217,0,0,0,112,0,0,0,218,0,0,0,219,0,0,0,220,0,0,0,221,0,0,0,222,0,0,0,223,0,0,0,224,0,0,0,225,0,0,0,226,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,176,33,0,0,227,0,0,0,228,0,0,0,112,0,0,0,229,0,0,0,230,0,0,0,231,0,0,0,232,0,0,0,233,0,0,0,234,0,0,0,235,0,0,0,236,0,0,0,237,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,33,0,0,238,0,0,0,239,0,0,0,112,0,0,0,240,0,0,0,241,0,0,0,242,0,0,0,243,0,0,0,244,0,0,0,245,0,0,0,246,0,0,0,247,0,0,0,248,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,40,0,0,249,0,0,0,250,0,0,0,112,0,0,0,251,0,0,0,252,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,49,50,51,52,53,54,55,56,57,0,0,0,0,0,0,37,76,102,0,0,0,0,0,109,111,110,101,121,95,103,101,116,32,101,114,114,111,114,0,0,0,0,0,160,40,0,0,253,0,0,0,254,0,0,0,112,0,0,0,255,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,49,50,51,52,53,54,55,56,57,0,0,0,0,0,0,0,0,0,0,48,41,0,0,1,1,0,0,2,1,0,0,112,0,0,0,3,1,0,0,4,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,46,48,76,102,0,0,0,0,0,0,0,192,41,0,0,5,1,0,0,6,1,0,0,112,0,0,0,7,1,0,0,8,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,152,36,0,0,9,1,0,0,10,1,0,0,112,0,0,0,11,1,0,0,12,1,0,0,13,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,208,36,0,0,14,1,0,0,15,1,0,0,112,0,0,0,16,1,0,0,17,1,0,0,18,1,0,0,0,0,0,0,0,0,0,0,118,101,99,116,111,114,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,67,0,0,0,0,0,0,0,0,0,0,0,144,32,0,0,19,1,0,0,20,1,0,0,112,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,104,29,0,0,21,1,0,0,22,1,0,0,112,0,0,0,23,1,0,0,24,1,0,0,25,1,0,0,26,1,0,0,27,1,0,0,28,1,0,0,29,1,0,0,30,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,30,0,0,31,1,0,0,32,1,0,0,112,0,0,0,33,1,0,0,34,1,0,0,35,1,0,0,36,1,0,0,37,1,0,0,38,1,0,0,39,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,32,0,0,40,1,0,0,41,1,0,0,112,0,0,0,42,1,0,0,43,1,0,0,44,1,0,0,45,1,0,0,46,1,0,0,0,0,0,0,104,32,0,0,47,1,0,0,48,1,0,0,112,0,0,0,49,1,0,0,50,1,0,0,51,1,0,0,52,1,0,0,53,1,0,0,116,0,0,0,114,0,0,0,117,0,0,0,101,0,0,0,0,0,0,0,0,0,0,0,102,97,108,115,101,0,0,0,102,0,0,0,97,0,0,0,108,0,0,0,115,0,0,0,101,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,0,0,0,109,0,0,0,47,0,0,0,37,0,0,0,100,0,0,0,47,0,0,0,37,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,97,32,37,98,32,37,100,32,37,72,58,37,77,58,37,83,32,37,89,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,0,0,0,97,0,0,0,32,0,0,0,37,0,0,0,98,0,0,0,32,0,0,0,37,0,0,0,100,0,0,0,32,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,32,0,0,0,37,0,0,0,89,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,73,58,37,77,58,37,83,32,37,112,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,0,0,0,73,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,32,0,0,0,37,0,0,0,112,0,0,0,0,0,0,0,108,111,99,97,108,101,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,0,0,0,0,0,0,0,160,28,0,0,54,1,0,0,55,1,0,0,112,0,0,0,0,0,0,0,78,83,116,51,95,95,49,54,108,111,99,97,108,101,53,102,97,99,101,116,69,0,0,0,120,58,0,0,136,28,0,0,192,12,0,0,0,0,0,0,0,0,0,0,48,29,0,0,54,1,0,0,56,1,0,0,112,0,0,0,57,1,0,0,58,1,0,0,59,1,0,0,60,1,0,0,61,1,0,0,62,1,0,0,63,1,0,0,64,1,0,0,65,1,0,0,66,1,0,0,67,1,0,0,68,1,0,0,0,0,0,0,78,83,116,51,95,95,49,53,99,116,121,112,101,73,119,69,69,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,48,99,116,121,112,101,95,98,97,115,101,69,0,0,0,0,248,56,0,0,16,29,0,0,216,58,0,0,248,28,0,0,0,0,0,0,2,0,0,0,160,28,0,0,2,0,0,0,40,29,0,0,2,0,0,0,78,83,116,51,95,95,49,53,99,116,121,112,101,73,99,69,69,0,0,0,0,0,0,0,216,58,0,0,80,29,0,0,0,0,0,0,2,0,0,0,160,28,0,0,2,0,0,0,40,29,0,0,2,0,0,0,0,0,0,0,0,30,0,0,54,1,0,0,69,1,0,0,112,0,0,0,70,1,0,0,71,1,0,0,72,1,0,0,73,1,0,0,74,1,0,0,75,1,0,0,76,1,0,0,78,83,116,51,95,95,49,55,99,111,100,101,99,118,116,73,99,99,49,49,95,95,109,98,115,116,97,116,101,95,116,69,69,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,50,99,111,100,101,99,118,116,95,98,97,115,101,69,0,0,248,56,0,0,224,29,0,0,216,58,0,0,184,29,0,0,0,0,0,0,2,0,0,0,160,28,0,0,2,0,0,0,248,29,0,0,2,0,0,0,78,83,116,51,95,95,49,55,99,111,100,101,99,118,116,73,119,99,49,49,95,95,109,98,115,116,97,116,101,95,116,69,69,0,0,0,0,0,0,0,216,58,0,0,32,30,0,0,0,0,0,0,2,0,0,0,160,28,0,0,2,0,0,0,248,29,0,0,2,0,0,0,0,0,0,0,192,30,0,0,54,1,0,0,77,1,0,0,112,0,0,0,78,1,0,0,79,1,0,0,80,1,0,0,81,1,0,0,82,1,0,0,83,1,0,0,84,1,0,0,78,83,116,51,95,95,49,55,99,111,100,101,99,118,116,73,68,115,99,49,49,95,95,109,98,115,116,97,116,101,95,116,69,69,0,0,0,0,0,0,216,58,0,0,152,30,0,0,0,0,0,0,2,0,0,0,160,28,0,0,2,0,0,0,248,29,0,0,2,0,0,0,0,0,0,0,56,31,0,0,54,1,0,0,85,1,0,0,112,0,0,0,86,1,0,0,87,1,0,0,88,1,0,0,89,1,0,0,90,1,0,0,91,1,0,0,92,1,0,0,78,83,116,51,95,95,49,55,99,111,100,101,99,118,116,73,68,105,99,49,49,95,95,109,98,115,116,97,116,101,95,116,69,69,0,0,0,0,0,0,216,58,0,0,16,31,0,0,0,0,0,0,2,0,0,0,160,28,0,0,2,0,0,0,248,29,0,0,2,0,0,0,0,0,0,0,176,31,0,0,54,1,0,0,93,1,0,0,112,0,0,0,86,1,0,0,87,1,0,0,88,1,0,0,89,1,0,0,90,1,0,0,91,1,0,0,92,1,0,0,78,83,116,51,95,95,49,49,54,95,95,110,97,114,114,111,119,95,116,111,95,117,116,102,56,73,76,106,51,50,69,69,69,0,0,0,0,0,0,0,120,58,0,0,136,31,0,0,56,31,0,0,0,0,0,0,0,0,0,0,24,32,0,0,54,1,0,0,94,1,0,0,112,0,0,0,86,1,0,0,87,1,0,0,88,1,0,0,89,1,0,0,90,1,0,0,91,1,0,0,92,1,0,0,78,83,116,51,95,95,49,49,55,95,95,119,105,100,101,110,95,102,114,111,109,95,117,116,102,56,73,76,106,51,50,69,69,69,0,0,0,0,0,0,120,58,0,0,240,31,0,0,56,31,0,0,0,0,0,0,78,83,116,51,95,95,49,56,110,117,109,112,117,110,99,116,73,99,69,69,0,0,0,0,120,58,0,0,40,32,0,0,160,28,0,0,0,0,0,0,78,83,116,51,95,95,49,56,110,117,109,112,117,110,99,116,73,119,69,69,0,0,0,0,120,58,0,0,80,32,0,0,160,28,0,0,0,0,0,0,78,83,116,51,95,95,49,54,108,111,99,97,108,101,53,95,95,105,109,112,69,0,0,0,120,58,0,0,120,32,0,0,160,28,0,0,0,0,0,0,78,83,116,51,95,95,49,55,99,111,108,108,97,116,101,73,99,69,69,0,0,0,0,0,120,58,0,0,160,32,0,0,160,28,0,0,0,0,0,0,78,83,116,51,95,95,49,55,99,111,108,108,97,116,101,73,119,69,69,0,0,0,0,0,120,58,0,0,200,32,0,0,160,28,0,0,0,0,0,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,112,117,110,99,116,73,99,76,98,48,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,95,98,97,115,101,69,0,0,0,0,248,56,0,0,16,33,0,0,216,58,0,0,240,32,0,0,0,0,0,0,2,0,0,0,160,28,0,0,2,0,0,0,40,33,0,0,2,0,0,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,112,117,110,99,116,73,99,76,98,49,69,69,69,0,0,0,0,0,216,58,0,0,80,33,0,0,0,0,0,0,2,0,0,0,160,28,0,0,2,0,0,0,40,33,0,0,2,0,0,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,112,117,110,99,116,73,119,76,98,48,69,69,69,0,0,0,0,0,216,58,0,0,144,33,0,0,0,0,0,0,2,0,0,0,160,28,0,0,2,0,0,0,40,33,0,0,2,0,0,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,112,117,110,99,116,73,119,76,98,49,69,69,69,0,0,0,0,0,216,58,0,0,208,33,0,0,0,0,0,0,2,0,0,0,160,28,0,0,2,0,0,0,40,33,0,0,2,0,0,0,78,83,116,51,95,95,49,56,116,105,109,101,95,103,101,116,73,99,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,0,0,0,78,83,116,51,95,95,49,57,116,105,109,101,95,98,97,115,101,69,0,0,0,0,0,0,248,56,0,0,88,34,0,0,78,83,116,51,95,95,49,50,48,95,95,116,105,109,101,95,103,101,116,95,99,95,115,116,111,114,97,103,101,73,99,69,69,0,0,0,0,0,0,0,248,56,0,0,120,34,0,0,216,58,0,0,16,34,0,0,0,0,0,0,3,0,0,0,160,28,0,0,2,0,0,0,112,34,0,0,2,0,0,0,160,34,0,0,0,8,0,0,78,83,116,51,95,95,49,56,116,105,109,101,95,103,101,116,73,119,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,0,0,0,78,83,116,51,95,95,49,50,48,95,95,116,105,109,101,95,103,101,116,95,99,95,115,116,111,114,97,103,101,73,119,69,69,0,0,0,0,0,0,0,248,56,0,0,24,35,0,0,216,58,0,0,208,34,0,0,0,0,0,0,3,0,0,0,160,28,0,0,2,0,0,0,112,34,0,0,2,0,0,0,64,35,0,0,0,8,0,0,78,83,116,51,95,95,49,56,116,105,109,101,95,112,117,116,73,99,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,0,0,0,78,83,116,51,95,95,49,49,48,95,95,116,105,109,101,95,112,117,116,69,0,0,0,0,248,56,0,0,184,35,0,0,216,58,0,0,112,35,0,0,0,0,0,0,2,0,0,0,160,28,0,0,2,0,0,0,208,35,0,0,0,8,0,0,78,83,116,51,95,95,49,56,116,105,109,101,95,112,117,116,73,119,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,0,0,0,216,58,0,0,248,35,0,0,0,0,0,0,2,0,0,0,160,28,0,0,2,0,0,0,208,35,0,0,0,8,0,0,78,83,116,51,95,95,49,56,109,101,115,115,97,103,101,115,73,99,69,69,0,0,0,0,78,83,116,51,95,95,49,49,51,109,101,115,115,97,103,101,115,95,98,97,115,101,69,0,248,56,0,0,120,36,0,0,216,58,0,0,96,36,0,0,0,0,0,0,2,0,0,0,160,28,0,0,2,0,0,0,144,36,0,0,2,0,0,0,78,83,116,51,95,95,49,56,109,101,115,115,97,103,101,115,73,119,69,69,0,0,0,0,216,58,0,0,184,36,0,0,0,0,0,0,2,0,0,0,160,28,0,0,2,0,0,0,144,36,0,0,2,0,0,0,78,83,116,51,95,95,49,55,110,117,109,95,103,101,116,73,99,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,57,95,95,110,117,109,95,103,101,116,73,99,69,69,0,0,0,78,83,116,51,95,95,49,49,52,95,95,110,117,109,95,103,101,116,95,98,97,115,101,69,0,0,0,0,0,0,0,0,248,56,0,0,80,37,0,0,216,58,0,0,56,37,0,0,0,0,0,0,1,0,0,0,112,37,0,0,0,0,0,0,216,58,0,0,240,36,0,0,0,0,0,0,2,0,0,0,160,28,0,0,2,0,0,0,120,37,0,0,0,0,0,0,78,83,116,51,95,95,49,55,110,117,109,95,103,101,116,73,119,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,57,95,95,110,117,109,95,103,101,116,73,119,69,69,0,0,0,216,58,0,0,248,37,0,0,0,0,0,0,1,0,0,0,112,37,0,0,0,0,0,0,216,58,0,0,176,37,0,0,0,0,0,0,2,0,0,0,160,28,0,0,2,0,0,0,16,38,0,0,0,0,0,0,78,83,116,51,95,95,49,55,110,117,109,95,112,117,116,73,99,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,57,95,95,110,117,109,95,112,117,116,73,99,69,69,0,0,0,78,83,116,51,95,95,49,49,52,95,95,110,117,109,95,112,117,116,95,98,97,115,101,69,0,0,0,0,0,0,0,0,248,56,0,0,168,38,0,0,216,58,0,0,144,38,0,0,0,0,0,0,1,0,0,0,200,38,0,0,0,0,0,0,216,58,0,0,72,38,0,0,0,0,0,0,2,0,0,0,160,28,0,0,2,0,0,0,208,38,0,0,0,0,0,0,78,83,116,51,95,95,49,55,110,117,109,95,112,117,116,73,119,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,57,95,95,110,117,109,95,112,117,116,73,119,69,69,0,0,0,216,58,0,0,80,39,0,0,0,0,0,0,1,0,0,0,200,38,0,0,0,0,0,0,216,58,0,0,8,39,0,0,0,0,0,0,2,0,0,0,160,28,0,0,2,0,0,0,104,39,0,0,0,0,0,0,78,83,116,51,95,95,49,57,109,111,110,101,121,95,103,101,116,73,99,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,0,0,78,83,116,51,95,95,49,49,49,95,95,109,111,110,101,121,95,103,101,116,73,99,69,69,0,0,0,0,0,0,0,0,248,56,0,0,232,39,0,0,216,58,0,0,160,39,0,0,0,0,0,0,2,0,0,0,160,28,0,0,2,0,0,0,8,40,0,0,0,0,0,0,78,83,116,51,95,95,49,57,109,111,110,101,121,95,103,101,116,73,119,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,0,0,78,83,116,51,95,95,49,49,49,95,95,109,111,110,101,121,95,103,101,116,73,119,69,69,0,0,0,0,0,0,0,0,248,56,0,0,120,40,0,0,216,58,0,0,48,40,0,0,0,0,0,0,2,0,0,0,160,28,0,0,2,0,0,0,152,40,0,0,0,0,0,0,78,83,116,51,95,95,49,57,109,111,110,101,121,95,112,117,116,73,99,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,0,0,78,83,116,51,95,95,49,49,49,95,95,109,111,110,101,121,95,112,117,116,73,99,69,69,0,0,0,0,0,0,0,0,248,56,0,0,8,41,0,0,216,58,0,0,192,40,0,0,0,0,0,0,2,0,0,0,160,28,0,0,2,0,0,0,40,41,0,0,0,0,0,0,78,83,116,51,95,95,49,57,109,111,110,101,121,95,112,117,116,73,119,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,0,0,78,83,116,51,95,95,49,49,49,95,95,109,111,110,101,121,95,112,117,116,73,119,69,69,0,0,0,0,0,0,0,0,248,56,0,0,152,41,0,0,216,58,0,0,80,41,0,0,0,0,0,0,2,0,0,0,160,28,0,0,2,0,0,0,184,41,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,65,0,0,0,77,0,0,0,0,0,0,0,0,0,0,0,80,0,0,0,77,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,65,77,0,0,0,0,0,0,80,77,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,74,0,0,0,97,0,0,0,110,0,0,0,117,0,0,0,97,0,0,0,114,0,0,0,121,0,0,0,0,0,0,0,70,0,0,0,101,0,0,0,98,0,0,0,114,0,0,0,117,0,0,0,97,0,0,0,114,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,77,0,0,0,97,0,0,0,114,0,0,0,99,0,0,0,104,0,0,0,0,0,0,0,65,0,0,0,112,0,0,0,114,0,0,0,105,0,0,0,108,0,0,0,0,0,0,0,74,0,0,0,117,0,0,0,110,0,0,0,101,0,0,0,0,0,0,0,0,0,0,0,74,0,0,0,117,0,0,0,108,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,65,0,0,0,117,0,0,0,103,0,0,0,117,0,0,0,115,0,0,0,116,0,0,0,0,0,0,0,0,0,0,0,83,0,0,0,101,0,0,0,112,0,0,0,116,0,0,0,101,0,0,0,109,0,0,0,98,0,0,0,101,0,0,0,114,0,0,0,0,0,0,0,79,0,0,0,99,0,0,0,116,0,0,0,111,0,0,0,98,0,0,0,101,0,0,0,114,0,0,0,0,0,0,0,78,0,0,0,111,0,0,0,118,0,0,0,101,0,0,0,109,0,0,0,98,0,0,0,101,0,0,0,114,0,0,0,0,0,0,0,0,0,0,0,68,0,0,0,101,0,0,0,99,0,0,0,101,0,0,0,109,0,0,0,98,0,0,0,101,0,0,0,114,0,0,0,0,0,0,0,0,0,0,0,74,0,0,0,97,0,0,0,110,0,0,0,0,0,0,0,70,0,0,0,101,0,0,0,98,0,0,0,0,0,0,0,77,0,0,0,97,0,0,0,114,0,0,0,0,0,0,0,65,0,0,0,112,0,0,0,114,0,0,0,0,0,0,0,77,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,74,0,0,0,117,0,0,0,110,0,0,0,0,0,0,0,74,0,0,0,117,0,0,0,108,0,0,0,0,0,0,0,65,0,0,0,117,0,0,0,103,0,0,0,0,0,0,0,83,0,0,0,101,0,0,0,112,0,0,0,0,0,0,0,79,0,0,0,99,0,0,0,116,0,0,0,0,0,0,0,78,0,0,0,111,0,0,0,118,0,0,0,0,0,0,0,68,0,0,0,101,0,0,0,99,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,74,97,110,117,97,114,121,0,70,101,98,114,117,97,114,121,0,0,0,0,0,0,0,0,77,97,114,99,104,0,0,0,65,112,114,105,108,0,0,0,77,97,121,0,0,0,0,0,74,117,110,101,0,0,0,0,74,117,108,121,0,0,0,0,65,117,103,117,115,116,0,0,83,101,112,116,101,109,98,101,114,0,0,0,0,0,0,0,79,99,116,111,98,101,114,0,78,111,118,101,109,98,101,114,0,0,0,0,0,0,0,0,68,101,99,101,109,98,101,114,0,0,0,0,0,0,0,0,74,97,110,0,0,0,0,0,70,101,98,0,0,0,0,0,77,97,114,0,0,0,0,0,65,112,114,0,0,0,0,0,74,117,110,0,0,0,0,0,74,117,108,0,0,0,0,0,65,117,103,0,0,0,0,0,83,101,112,0,0,0,0,0,79,99,116,0,0,0,0,0,78,111,118,0,0,0,0,0,68,101,99,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,83,0,0,0,117,0,0,0,110,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,77,0,0,0,111,0,0,0,110,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,84,0,0,0,117,0,0,0,101,0,0,0,115,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,87,0,0,0,101,0,0,0,100,0,0,0,110,0,0,0,101,0,0,0,115,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,84,0,0,0,104,0,0,0,117,0,0,0,114,0,0,0,115,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,70,0,0,0,114,0,0,0,105,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,83,0,0,0,97,0,0,0,116,0,0,0,117,0,0,0,114,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,83,0,0,0,117,0,0,0,110,0,0,0,0,0,0,0,77,0,0,0,111,0,0,0,110,0,0,0,0,0,0,0,84,0,0,0,117,0,0,0,101,0,0,0,0,0,0,0,87,0,0,0,101,0,0,0,100,0,0,0,0,0,0,0,84,0,0,0,104,0,0,0,117,0,0,0,0,0,0,0,70,0,0,0,114,0,0,0,105,0,0,0,0,0,0,0,83,0,0,0,97,0,0,0,116,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,83,117,110,100,97,121,0,0,77,111,110,100,97,121,0,0,84,117,101,115,100,97,121,0,87,101,100,110,101,115,100,97,121,0,0,0,0,0,0,0,84,104,117,114,115,100,97,121,0,0,0,0,0,0,0,0,70,114,105,100,97,121,0,0,83,97,116,117,114,100,97,121,0,0,0,0,0,0,0,0,83,117,110,0,0,0,0,0,77,111,110,0,0,0,0,0,84,117,101,0,0,0,0,0,87,101,100,0,0,0,0,0,84,104,117,0,0,0,0,0,70,114,105,0,0,0,0,0,83,97,116,0,0,0,0,0,2,0,0,192,3,0,0,192,4,0,0,192,5,0,0,192,6,0,0,192,7,0,0,192,8,0,0,192,9,0,0,192,10,0,0,192,11,0,0,192,12,0,0,192,13,0,0,192,14,0,0,192,15,0,0,192,16,0,0,192,17,0,0,192,18,0,0,192,19,0,0,192,20,0,0,192,21,0,0,192,22,0,0,192,23,0,0,192,24,0,0,192,25,0,0,192,26,0,0,192,27,0,0,192,28,0,0,192,29,0,0,192,30,0,0,192,31,0,0,192,0,0,0,179,1,0,0,195,2,0,0,195,3,0,0,195,4,0,0,195,5,0,0,195,6,0,0,195,7,0,0,195,8,0,0,195,9,0,0,195,10,0,0,195,11,0,0,195,12,0,0,195,13,0,0,211,14,0,0,195,15,0,0,195,0,0,12,187,1,0,12,195,2,0,12,195,3,0,12,195,4,0,12,211,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,56,0,0,95,1,0,0,96,1,0,0,97,1,0,0,0,0,0,0,115,116,100,58,58,98,97,100,95,99,97,115,116,0,0,0,83,116,57,116,121,112,101,95,105,110,102,111,0,0,0,0,248,56,0,0,216,55,0,0,83,116,56,98,97,100,95,99,97,115,116,0,0,0,0,0,120,58,0,0,240,55,0,0,0,0,0,0,0,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,54,95,95,115,104,105,109,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,0,0,0,0,120,58,0,0,16,56,0,0,232,55,0,0,0,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,55,95,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,0,0,0,120,58,0,0,72,56,0,0,56,56,0,0,0,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,57,95,95,112,111,105,110,116,101,114,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,55,95,95,112,98,97,115,101,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,0,0,0,120,58,0,0,168,56,0,0,56,56,0,0,0,0,0,0,120,58,0,0,128,56,0,0,208,56,0,0,0,0,0,0,0,0,0,0,112,56,0,0,98,1,0,0,99,1,0,0,100,1,0,0,101,1,0,0,102,1,0,0,103,1,0,0,104,1,0,0,105,1,0,0,0,0,0,0,224,56,0,0,98,1,0,0,106,1,0,0,100,1,0,0,101,1,0,0,107,1,0,0,0,0,0,0,0,0,0,0,128,57,0,0,98,1,0,0,108,1,0,0,100,1,0,0,101,1,0,0,109,1,0,0,0,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,50,51,95,95,102,117,110,100,97,109,101,110,116,97,108,95,116,121,112,101,95,105,110,102,111,69,0,120,58,0,0,88,57,0,0,56,56,0,0,0,0,0,0,118,0,0,0,0,0,0,0,64,57,0,0,144,57,0,0,68,110,0,0,0,0,0,0,64,57,0,0,160,57,0,0,98,0,0,0,0,0,0,0,64,57,0,0,176,57,0,0,99,0,0,0,0,0,0,0,64,57,0,0,192,57,0,0,104,0,0,0,0,0,0,0,64,57,0,0,208,57,0,0,97,0,0,0,0,0,0,0,64,57,0,0,224,57,0,0,115,0,0,0,0,0,0,0,64,57,0,0,240,57,0,0,116,0,0,0,0,0,0,0,64,57,0,0,0,58,0,0,105,0,0,0,0,0,0,0,64,57,0,0,16,58,0,0,106,0,0,0,0,0,0,0,64,57,0,0,32,58,0,0,108,0,0,0,0,0,0,0,64,57,0,0,48,58,0,0,109,0,0,0,0,0,0,0,64,57,0,0,64,58,0,0,102,0,0,0,0,0,0,0,64,57,0,0,80,58,0,0,100,0,0,0,0,0,0,0,64,57,0,0,96,58,0,0,0,0,0,0,192,58,0,0,98,1,0,0,110,1,0,0,100,1,0,0,101,1,0,0,102,1,0,0,111,1,0,0,112,1,0,0,113,1,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,50,48,95,95,115,105,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,120,58,0,0,152,58,0,0,112,56,0,0,0,0,0,0,0,0,0,0,32,59,0,0,98,1,0,0,114,1,0,0,100,1,0,0,101,1,0,0,102,1,0,0,115,1,0,0,116,1,0,0,117,1,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,50,49,95,95,118,109,105,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,0,0,120,58,0,0,248,58,0,0,112,56,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,96,61,0,0,118,1,0,0,119,1,0,0,120,1,0,0,0,0,0,0,115,116,100,58,58,98,97,100,95,97,108,108,111,99,0,0,83,116,57,98,97,100,95,97,108,108,111,99,0,0,0,0,120,58,0,0,80,61,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,1,2,3,4,5,6,7,8,9,255,255,255,255,255,255,255,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,255,255,255,255,255,255,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,1,2,4,7,3,6,5,0,0,0,0,0,0,0,0,105,110,102,105,110,105,116,121,0,0,0,0,0,0,0,0,95,112,137,0,255,9,47,15,10,0,0,0,100,0,0,0,232,3,0,0,16,39,0,0,160,134,1,0,64,66,15,0,128,150,152,0,0,225,245,5,17,0,10,0,17,17,17,0,0,0,0,5,0,0,0,0,0,0,9,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,15,10,17,17,17,3,10,7,0,1,19,9,11,11,0,0,9,6,11,0,0,11,0,6,17,0,0,0,17,17,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,10,10,17,17,17,0,10,0,0,2,0,9,11,0,0,0,9,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,4,13,0,0,0,0,9,14,0,0,0,0,0,14,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,15,0,0,0,0,9,16,0,0,0,0,0,16,0,0,16,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,10,0,0,0,0,9,11,0,0,0,0,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,45,43,32,32,32,48,88,48,120,0,0,0,0,0,0,0,40,110,117,108,108,41,0,0,45,48,88,43,48,88,32,48,88,45,48,120,43,48,120,32,48,120,0,0,0,0,0,0,105,110,102,0,0,0,0,0,73,78,70,0,0,0,0,0,110,97,110,0,0,0,0,0,78,65,78,0,0,0,0,0,48,49,50,51,52,53,54,55,56,57,65,66,67,68,69,70,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,121,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE);




var tempDoublePtr = Runtime.alignMemory(allocate(12, "i8", ALLOC_STATIC), 8);

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}


  
  function _atexit(func, arg) {
      __ATEXIT__.unshift({ func: func, arg: arg });
    }function ___cxa_atexit() {
  return _atexit.apply(null, arguments)
  }

   
  Module["_i64Subtract"] = _i64Subtract;

   
  Module["_i64Add"] = _i64Add;

  
  function __ZSt18uncaught_exceptionv() { // std::uncaught_exception()
      return !!__ZSt18uncaught_exceptionv.uncaught_exception;
    }
  
  
  
  function ___cxa_is_number_type(type) {
      var isNumber = false;
      try { if (type == __ZTIi) isNumber = true } catch(e){}
      try { if (type == __ZTIj) isNumber = true } catch(e){}
      try { if (type == __ZTIl) isNumber = true } catch(e){}
      try { if (type == __ZTIm) isNumber = true } catch(e){}
      try { if (type == __ZTIx) isNumber = true } catch(e){}
      try { if (type == __ZTIy) isNumber = true } catch(e){}
      try { if (type == __ZTIf) isNumber = true } catch(e){}
      try { if (type == __ZTId) isNumber = true } catch(e){}
      try { if (type == __ZTIe) isNumber = true } catch(e){}
      try { if (type == __ZTIc) isNumber = true } catch(e){}
      try { if (type == __ZTIa) isNumber = true } catch(e){}
      try { if (type == __ZTIh) isNumber = true } catch(e){}
      try { if (type == __ZTIs) isNumber = true } catch(e){}
      try { if (type == __ZTIt) isNumber = true } catch(e){}
      return isNumber;
    }function ___cxa_does_inherit(definiteType, possibilityType, possibility) {
      if (possibility == 0) return false;
      if (possibilityType == 0 || possibilityType == definiteType)
        return true;
      var possibility_type_info;
      if (___cxa_is_number_type(possibilityType)) {
        possibility_type_info = possibilityType;
      } else {
        var possibility_type_infoAddr = HEAP32[((possibilityType)>>2)] - 8;
        possibility_type_info = HEAP32[((possibility_type_infoAddr)>>2)];
      }
      switch (possibility_type_info) {
      case 0: // possibility is a pointer
        // See if definite type is a pointer
        var definite_type_infoAddr = HEAP32[((definiteType)>>2)] - 8;
        var definite_type_info = HEAP32[((definite_type_infoAddr)>>2)];
        if (definite_type_info == 0) {
          // Also a pointer; compare base types of pointers
          var defPointerBaseAddr = definiteType+8;
          var defPointerBaseType = HEAP32[((defPointerBaseAddr)>>2)];
          var possPointerBaseAddr = possibilityType+8;
          var possPointerBaseType = HEAP32[((possPointerBaseAddr)>>2)];
          return ___cxa_does_inherit(defPointerBaseType, possPointerBaseType, possibility);
        } else
          return false; // one pointer and one non-pointer
      case 1: // class with no base class
        return false;
      case 2: // class with base class
        var parentTypeAddr = possibilityType + 8;
        var parentType = HEAP32[((parentTypeAddr)>>2)];
        return ___cxa_does_inherit(definiteType, parentType, possibility);
      default:
        return false; // some unencountered type
      }
    }
  
  
  
  var ___cxa_last_thrown_exception=0;function ___resumeException(ptr) {
      if (!___cxa_last_thrown_exception) { ___cxa_last_thrown_exception = ptr; }
      throw ptr;
    }
  
  var ___cxa_exception_header_size=8;function ___cxa_find_matching_catch(thrown, throwntype) {
      if (thrown == -1) thrown = ___cxa_last_thrown_exception;
      header = thrown - ___cxa_exception_header_size;
      if (throwntype == -1) throwntype = HEAP32[((header)>>2)];
      var typeArray = Array.prototype.slice.call(arguments, 2);
  
      // If throwntype is a pointer, this means a pointer has been
      // thrown. When a pointer is thrown, actually what's thrown
      // is a pointer to the pointer. We'll dereference it.
      if (throwntype != 0 && !___cxa_is_number_type(throwntype)) {
        var throwntypeInfoAddr= HEAP32[((throwntype)>>2)] - 8;
        var throwntypeInfo= HEAP32[((throwntypeInfoAddr)>>2)];
        if (throwntypeInfo == 0)
          thrown = HEAP32[((thrown)>>2)];
      }
      // The different catch blocks are denoted by different types.
      // Due to inheritance, those types may not precisely match the
      // type of the thrown object. Find one which matches, and
      // return the type of the catch block which should be called.
      for (var i = 0; i < typeArray.length; i++) {
        if (___cxa_does_inherit(typeArray[i], throwntype, thrown))
          return ((asm["setTempRet0"](typeArray[i]),thrown)|0);
      }
      // Shouldn't happen unless we have bogus data in typeArray
      // or encounter a type for which emscripten doesn't have suitable
      // typeinfo defined. Best-efforts match just in case.
      return ((asm["setTempRet0"](throwntype),thrown)|0);
    }function ___cxa_throw(ptr, type, destructor) {
      if (!___cxa_throw.initialized) {
        try {
          HEAP32[((__ZTVN10__cxxabiv119__pointer_type_infoE)>>2)]=0; // Workaround for libcxxabi integration bug
        } catch(e){}
        try {
          HEAP32[((__ZTVN10__cxxabiv117__class_type_infoE)>>2)]=1; // Workaround for libcxxabi integration bug
        } catch(e){}
        try {
          HEAP32[((__ZTVN10__cxxabiv120__si_class_type_infoE)>>2)]=2; // Workaround for libcxxabi integration bug
        } catch(e){}
        ___cxa_throw.initialized = true;
      }
      var header = ptr - ___cxa_exception_header_size;
      HEAP32[((header)>>2)]=type;
      HEAP32[(((header)+(4))>>2)]=destructor;
      ___cxa_last_thrown_exception = ptr;
      if (!("uncaught_exception" in __ZSt18uncaught_exceptionv)) {
        __ZSt18uncaught_exceptionv.uncaught_exception = 1;
      } else {
        __ZSt18uncaught_exceptionv.uncaught_exception++;
      }
      throw ptr;
    }

  function __embind_register_bool() {
  Module['printErr']('missing function: _embind_register_bool'); abort(-1);
  }

  var _emscripten_landingpad=true;

  function __embind_register_std_string() {
  Module['printErr']('missing function: _embind_register_std_string'); abort(-1);
  }

  function __embind_register_integer() {
  Module['printErr']('missing function: _embind_register_integer'); abort(-1);
  }

  
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};
  
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  
  
  var ___errno_state=0;function ___setErrNo(value) {
      // For convenient setting and returning of errno.
      HEAP32[((___errno_state)>>2)]=value;
      return value;
    }
  
  var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up--; up) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            continue;
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          if (stream.tty.output.length) {
            stream.tty.ops.put_char(stream.tty, 10);
          }
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          for (var i = 0; i < length; i++) {
            try {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              result = process['stdin']['read']();
              if (!result) {
                if (process['stdin']['_readableState'] && process['stdin']['_readableState']['ended']) {
                  return null;  // EOF
                }
                return undefined;  // no data available
              }
            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['print'](tty.output.join(''));
            tty.output = [];
          } else {
            tty.output.push(TTY.utf8.processCChar(val));
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['printErr'](tty.output.join(''));
            tty.output = [];
          } else {
            tty.output.push(TTY.utf8.processCChar(val));
          }
        }}};
  
  var MEMFS={ops_table:null,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            },
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.buffer.byteLength which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },getFileDataAsRegularArray:function (node) {
        if (node.contents && node.contents.subarray) {
          var arr = [];
          for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
          return arr; // Returns a copy of the original data.
        }
        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
      },getFileDataAsTypedArray:function (node) {
        if (node.contents && node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function (node, newCapacity) {
  
        // If we are asked to expand the size of a file that already exists, revert to using a standard JS array to store the file
        // instead of a typed array. This makes resizing the array more flexible because we can just .push() elements at the back to
        // increase the size.
        if (node.contents && node.contents.subarray && newCapacity > node.contents.length) {
          node.contents = MEMFS.getFileDataAsRegularArray(node);
          node.usedBytes = node.contents.length; // We might be writing to a lazy-loaded file which had overridden this property, so force-reset it.
        }
  
        if (!node.contents || node.contents.subarray) { // Keep using a typed array if creating a new storage, or if old one was a typed array as well.
          var prevCapacity = node.contents ? node.contents.buffer.byteLength : 0;
          if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
          // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
          // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
          // avoid overshooting the allocation cap by a very large margin.
          var CAPACITY_DOUBLING_MAX = 1024 * 1024;
          newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) | 0);
          if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
          var oldContents = node.contents;
          node.contents = new Uint8Array(newCapacity); // Allocate new storage.
          if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
          return;
        }
        // Not using a typed array to back the file storage. Use a standard JS array instead.
        if (!node.contents && newCapacity > 0) node.contents = [];
        while (node.contents.length < newCapacity) node.contents.push(0);
      },resizeFileStorage:function (node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
          return;
        }
  
        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
          var oldContents = node.contents;
          node.contents = new Uint8Array(new ArrayBuffer(newSize)); // Allocate new storage.
          node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          node.usedBytes = newSize;
          return;
        }
        // Backing with a JS array.
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else
          {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) { // Can we just reuse the buffer we are given?
              assert(position === 0, 'canOwn must imply no weird position inside the file');
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); // Use typed array write if available.
          else
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          node.usedBytes = Math.max(node.usedBytes, position+length);
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          stream.ungotten = [];
          stream.position = position;
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < stream.node.usedBytes) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        }}};
  
  var IDBFS={dbs:{},indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        // reuse all of the core MEMFS functionality
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
  
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
  
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
  
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },getDB:function (name, callback) {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
  
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e);
        }
        req.onupgradeneeded = function(e) {
          var db = e.target.result;
          var transaction = e.target.transaction;
  
          var fileStore;
  
          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }
  
          fileStore.createIndex('timestamp', 'timestamp', { unique: false });
        };
        req.onsuccess = function() {
          db = req.result;
  
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function() {
          callback(this.error);
        };
      },getLocalSet:function (mount, callback) {
        var entries = {};
  
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
  
        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  
        while (check.length) {
          var path = check.pop();
          var stat;
  
          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
  
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
          }
  
          entries[path] = { timestamp: stat.mtime };
        }
  
        return callback(null, { type: 'local', entries: entries });
      },getRemoteSet:function (mount, callback) {
        var entries = {};
  
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
  
          var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
          transaction.onerror = function() { callback(this.error); };
  
          var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
          var index = store.index('timestamp');
  
          index.openKeyCursor().onsuccess = function(event) {
            var cursor = event.target.result;
  
            if (!cursor) {
              return callback(null, { type: 'remote', db: db, entries: entries });
            }
  
            entries[cursor.primaryKey] = { timestamp: cursor.key };
  
            cursor.continue();
          };
        });
      },loadLocalEntry:function (path, callback) {
        var stat, node;
  
        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e);
        }
  
        if (FS.isDir(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode });
        } else if (FS.isFile(stat.mode)) {
          // Performance consideration: storing a normal JavaScript array to a IndexedDB is much slower than storing a typed array.
          // Therefore always convert the file contents to a typed array first before writing the data to IndexedDB.
          node.contents = MEMFS.getFileDataAsTypedArray(node);
          return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
        } else {
          return callback(new Error('node type not supported'));
        }
      },storeLocalEntry:function (path, entry, callback) {
        try {
          if (FS.isDir(entry.mode)) {
            FS.mkdir(path, entry.mode);
          } else if (FS.isFile(entry.mode)) {
            FS.writeFile(path, entry.contents, { encoding: 'binary', canOwn: true });
          } else {
            return callback(new Error('node type not supported'));
          }
  
          FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },removeLocalEntry:function (path, callback) {
        try {
          var lookup = FS.lookupPath(path);
          var stat = FS.stat(path);
  
          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },loadRemoteEntry:function (store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function(event) { callback(null, event.target.result); };
        req.onerror = function() { callback(this.error); };
      },storeRemoteEntry:function (store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function() { callback(this.error); };
      },removeRemoteEntry:function (store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function() { callback(this.error); };
      },reconcile:function (src, dst, callback) {
        var total = 0;
  
        var create = [];
        Object.keys(src.entries).forEach(function (key) {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create.push(key);
            total++;
          }
        });
  
        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
          var e = dst.entries[key];
          var e2 = src.entries[key];
          if (!e2) {
            remove.push(key);
            total++;
          }
        });
  
        if (!total) {
          return callback(null);
        }
  
        var errored = false;
        var completed = 0;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= total) {
            return callback(null);
          }
        };
  
        transaction.onerror = function() { done(this.error); };
  
        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach(function (path) {
          if (dst.type === 'local') {
            IDBFS.loadRemoteEntry(store, path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });
  
        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach(function(path) {
          if (dst.type === 'local') {
            IDBFS.removeLocalEntry(path, done);
          } else {
            IDBFS.removeRemoteEntry(store, path, done);
          }
        });
      }};
  
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // On Windows, directories return permission bits 'rw-rw-rw-', even though they have 'rwxrwxrwx', so 
            // propagate write bits to execute bits.
            stat.mode = stat.mode | ((stat.mode & 146) >> 1);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsToPermissionStringMap:{0:"r",1:"r+",2:"r+",64:"r",65:"r+",66:"r+",129:"rx+",193:"rx+",514:"w+",577:"w",578:"w+",705:"wx",706:"wx+",1024:"a",1025:"a",1026:"a+",1089:"a",1090:"a+",1153:"ax",1154:"ax+",1217:"ax",1218:"ax+",4096:"rs",4098:"rs+"},flagsToPermissionString:function (flags) {
        if (flags in NODEFS.flagsToPermissionStringMap) {
          return NODEFS.flagsToPermissionStringMap[flags];
        } else {
          return flags;
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsToPermissionString(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(length);
          var res;
          try {
            res = fs.readSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          if (res > 0) {
            for (var i = 0; i < res; i++) {
              buffer[offset + i] = nbuffer[i];
            }
          }
          return res;
        },write:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(buffer.subarray(offset, offset + length));
          var res;
          try {
            res = fs.writeSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return res;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
  
          stream.position = position;
          return position;
        }}};
  
  var _stdin=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stdout=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stderr=allocate(1, "i32*", ALLOC_STATIC);var FS={root:null,mounts:[],devices:[null],streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || {};
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
              
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); },
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); },
            },
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return !!node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var accmode = flag & 2097155;
        var perms = ['r', 'w', 'rw'][accmode];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES;
        }
        return 0;
      },mayLookup:function (dir) {
        return FS.nodePermissions(dir, 'x');
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return ERRNO_CODES.EBUSY;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
          if ((flags & 2097155) !== 0 ||  // opening for write
              (flags & 512)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },getStreamFromPtr:function (ptr) {
        return FS.streams[ptr - 1];
      },getPtrForStream:function (stream) {
        return stream ? stream.fd + 1 : 0;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },getMounts:function (mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            callback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function (type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          console.log("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // POSIX says unlink should set EPERM, not EISDIR
          if (err === ERRNO_CODES.EISDIR) err = ERRNO_CODES.EPERM;
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function (path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return link.node_ops.readlink(link);
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // check permissions
        var err = FS.mayOpen(node, flags);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            Module['printErr']('read file: ' + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function (stream) {
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
      },llseek:function (stream, offset, whence) {
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        return stream.stream_ops.llseek(stream, offset, whence);
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          console.log("FS.trackingDelegate['onWriteToFile']('"+path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = '';
          var utf8 = new Runtime.UTF8Processor();
          for (var i = 0; i < length; i++) {
            ret += utf8.processCChar(buf[i]);
          }
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        opts.encoding = opts.encoding || 'utf8';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var stream = FS.open(path, opts.flags, opts.mode);
        if (opts.encoding === 'utf8') {
          var utf8 = new Runtime.UTF8Processor();
          var buf = new Uint8Array(utf8.processJSString(data));
          FS.write(stream, buf, 0, buf.length, 0, opts.canOwn);
        } else if (opts.encoding === 'binary') {
          FS.write(stream, data, 0, data.length, 0, opts.canOwn);
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function() { return 0; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        HEAP32[((_stdin)>>2)]=FS.getPtrForStream(stdin);
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
  
        var stdout = FS.open('/dev/stdout', 'w');
        HEAP32[((_stdout)>>2)]=FS.getPtrForStream(stdout);
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
  
        var stderr = FS.open('/dev/stderr', 'w');
        HEAP32[((_stderr)>>2)]=FS.getPtrForStream(stderr);
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno) {
          this.errno = errno;
          for (var key in ERRNO_CODES) {
            if (ERRNO_CODES[key] === errno) {
              this.code = key;
              break;
            }
          }
          this.message = ERRNO_MESSAGES[errno];
          if (this.stack) this.stack = demangleAll(this.stack);
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [ERRNO_CODES.ENOENT].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = Math.floor(idx / this.chunkSize);
          return this.getter(chunkNum)[chunkOffset];
        }
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        }
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
            // Find length
            var xhr = new XMLHttpRequest();
            xhr.open('HEAD', url, false);
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            var datalength = Number(xhr.getResponseHeader("Content-length"));
            var header;
            var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
            var chunkSize = 1024*1024; // Chunk size in bytes
  
            if (!hasByteServing) chunkSize = datalength;
  
            // Function to get a range from the remote URL.
            var doXHR = (function(from, to) {
              if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
              if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
              // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
              var xhr = new XMLHttpRequest();
              xhr.open('GET', url, false);
              if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
              // Some hints to the browser that we want binary data.
              if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
              if (xhr.overrideMimeType) {
                xhr.overrideMimeType('text/plain; charset=x-user-defined');
              }
  
              xhr.send(null);
              if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
              if (xhr.response !== undefined) {
                return new Uint8Array(xhr.response || []);
              } else {
                return intArrayFromString(xhr.responseText || '', true);
              }
            });
            var lazyArray = this;
            lazyArray.setDataGetter(function(chunkNum) {
              var start = chunkNum * chunkSize;
              var end = (chunkNum+1) * chunkSize - 1; // including this byte
              end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
              if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
                lazyArray.chunks[chunkNum] = doXHR(start, end);
              }
              if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
              return lazyArray.chunks[chunkNum];
            });
  
            this._length = datalength;
            this._chunkSize = chunkSize;
            this.lengthKnown = true;
        }
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperty(lazyArray, "length", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._length;
              }
          });
          Object.defineProperty(lazyArray, "chunkSize", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._chunkSize;
              }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperty(node, "usedBytes", {
            get: function() { return this.contents.length; }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn) {
        Browser.init();
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        function processData(byteArray) {
          function finish(byteArray) {
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency('cp ' + fullname);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency('cp ' + fullname);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency('cp ' + fullname);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};function _fflush(stream) {
      // int fflush(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fflush.html
      // we don't currently perform any user-space buffering of data
    }

  function __emval_decref() {
  Module['printErr']('missing function: _emval_decref'); abort(-1);
  }

  var _emscripten_postinvoke=true;

  
  
  
  
  function _mkport() { throw 'TODO' }var SOCKFS={mount:function (mount) {
        return FS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createSocket:function (family, type, protocol) {
        var streaming = type == 1;
        if (protocol) {
          assert(streaming == (protocol == 6)); // if SOCK_STREAM, must be tcp
        }
  
        // create our internal socket structure
        var sock = {
          family: family,
          type: type,
          protocol: protocol,
          server: null,
          peers: {},
          pending: [],
          recv_queue: [],
          sock_ops: SOCKFS.websocket_sock_ops
        };
  
        // create the filesystem node to store the socket structure
        var name = SOCKFS.nextname();
        var node = FS.createNode(SOCKFS.root, name, 49152, 0);
        node.sock = sock;
  
        // and the wrapping stream that enables library functions such
        // as read and write to indirectly interact with the socket
        var stream = FS.createStream({
          path: name,
          node: node,
          flags: FS.modeStringToFlags('r+'),
          seekable: false,
          stream_ops: SOCKFS.stream_ops
        });
  
        // map the new stream to the socket structure (sockets have a 1:1
        // relationship with a stream)
        sock.stream = stream;
  
        return sock;
      },getSocket:function (fd) {
        var stream = FS.getStream(fd);
        if (!stream || !FS.isSocket(stream.node.mode)) {
          return null;
        }
        return stream.node.sock;
      },stream_ops:{poll:function (stream) {
          var sock = stream.node.sock;
          return sock.sock_ops.poll(sock);
        },ioctl:function (stream, request, varargs) {
          var sock = stream.node.sock;
          return sock.sock_ops.ioctl(sock, request, varargs);
        },read:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          var msg = sock.sock_ops.recvmsg(sock, length);
          if (!msg) {
            // socket is closed
            return 0;
          }
          buffer.set(msg.buffer, offset);
          return msg.buffer.length;
        },write:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          return sock.sock_ops.sendmsg(sock, buffer, offset, length);
        },close:function (stream) {
          var sock = stream.node.sock;
          sock.sock_ops.close(sock);
        }},nextname:function () {
        if (!SOCKFS.nextname.current) {
          SOCKFS.nextname.current = 0;
        }
        return 'socket[' + (SOCKFS.nextname.current++) + ']';
      },websocket_sock_ops:{createPeer:function (sock, addr, port) {
          var ws;
  
          if (typeof addr === 'object') {
            ws = addr;
            addr = null;
            port = null;
          }
  
          if (ws) {
            // for sockets that've already connected (e.g. we're the server)
            // we can inspect the _socket property for the address
            if (ws._socket) {
              addr = ws._socket.remoteAddress;
              port = ws._socket.remotePort;
            }
            // if we're just now initializing a connection to the remote,
            // inspect the url property
            else {
              var result = /ws[s]?:\/\/([^:]+):(\d+)/.exec(ws.url);
              if (!result) {
                throw new Error('WebSocket URL must be in the format ws(s)://address:port');
              }
              addr = result[1];
              port = parseInt(result[2], 10);
            }
          } else {
            // create the actual websocket object and connect
            try {
              // runtimeConfig gets set to true if WebSocket runtime configuration is available.
              var runtimeConfig = (Module['websocket'] && ('object' === typeof Module['websocket']));
  
              // The default value is 'ws://' the replace is needed because the compiler replaces "//" comments with '#'
              // comments without checking context, so we'd end up with ws:#, the replace swaps the "#" for "//" again.
              var url = 'ws:#'.replace('#', '//');
  
              if (runtimeConfig) {
                if ('string' === typeof Module['websocket']['url']) {
                  url = Module['websocket']['url']; // Fetch runtime WebSocket URL config.
                }
              }
  
              if (url === 'ws://' || url === 'wss://') { // Is the supplied URL config just a prefix, if so complete it.
                url = url + addr + ':' + port;
              }
  
              // Make the WebSocket subprotocol (Sec-WebSocket-Protocol) default to binary if no configuration is set.
              var subProtocols = 'binary'; // The default value is 'binary'
  
              if (runtimeConfig) {
                if ('string' === typeof Module['websocket']['subprotocol']) {
                  subProtocols = Module['websocket']['subprotocol']; // Fetch runtime WebSocket subprotocol config.
                }
              }
  
              // The regex trims the string (removes spaces at the beginning and end, then splits the string by
              // <any space>,<any space> into an Array. Whitespace removal is important for Websockify and ws.
              subProtocols = subProtocols.replace(/^ +| +$/g,"").split(/ *, */);
  
              // The node ws library API for specifying optional subprotocol is slightly different than the browser's.
              var opts = ENVIRONMENT_IS_NODE ? {'protocol': subProtocols.toString()} : subProtocols;
  
              // If node we use the ws library.
              var WebSocket = ENVIRONMENT_IS_NODE ? require('ws') : window['WebSocket'];
              ws = new WebSocket(url, opts);
              ws.binaryType = 'arraybuffer';
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EHOSTUNREACH);
            }
          }
  
  
          var peer = {
            addr: addr,
            port: port,
            socket: ws,
            dgram_send_queue: []
          };
  
          SOCKFS.websocket_sock_ops.addPeer(sock, peer);
          SOCKFS.websocket_sock_ops.handlePeerEvents(sock, peer);
  
          // if this is a bound dgram socket, send the port number first to allow
          // us to override the ephemeral port reported to us by remotePort on the
          // remote end.
          if (sock.type === 2 && typeof sock.sport !== 'undefined') {
            peer.dgram_send_queue.push(new Uint8Array([
                255, 255, 255, 255,
                'p'.charCodeAt(0), 'o'.charCodeAt(0), 'r'.charCodeAt(0), 't'.charCodeAt(0),
                ((sock.sport & 0xff00) >> 8) , (sock.sport & 0xff)
            ]));
          }
  
          return peer;
        },getPeer:function (sock, addr, port) {
          return sock.peers[addr + ':' + port];
        },addPeer:function (sock, peer) {
          sock.peers[peer.addr + ':' + peer.port] = peer;
        },removePeer:function (sock, peer) {
          delete sock.peers[peer.addr + ':' + peer.port];
        },handlePeerEvents:function (sock, peer) {
          var first = true;
  
          var handleOpen = function () {
            try {
              var queued = peer.dgram_send_queue.shift();
              while (queued) {
                peer.socket.send(queued);
                queued = peer.dgram_send_queue.shift();
              }
            } catch (e) {
              // not much we can do here in the way of proper error handling as we've already
              // lied and said this data was sent. shut it down.
              peer.socket.close();
            }
          };
  
          function handleMessage(data) {
            assert(typeof data !== 'string' && data.byteLength !== undefined);  // must receive an ArrayBuffer
            data = new Uint8Array(data);  // make a typed array view on the array buffer
  
  
            // if this is the port message, override the peer's port with it
            var wasfirst = first;
            first = false;
            if (wasfirst &&
                data.length === 10 &&
                data[0] === 255 && data[1] === 255 && data[2] === 255 && data[3] === 255 &&
                data[4] === 'p'.charCodeAt(0) && data[5] === 'o'.charCodeAt(0) && data[6] === 'r'.charCodeAt(0) && data[7] === 't'.charCodeAt(0)) {
              // update the peer's port and it's key in the peer map
              var newport = ((data[8] << 8) | data[9]);
              SOCKFS.websocket_sock_ops.removePeer(sock, peer);
              peer.port = newport;
              SOCKFS.websocket_sock_ops.addPeer(sock, peer);
              return;
            }
  
            sock.recv_queue.push({ addr: peer.addr, port: peer.port, data: data });
          };
  
          if (ENVIRONMENT_IS_NODE) {
            peer.socket.on('open', handleOpen);
            peer.socket.on('message', function(data, flags) {
              if (!flags.binary) {
                return;
              }
              handleMessage((new Uint8Array(data)).buffer);  // copy from node Buffer -> ArrayBuffer
            });
            peer.socket.on('error', function() {
              // don't throw
            });
          } else {
            peer.socket.onopen = handleOpen;
            peer.socket.onmessage = function peer_socket_onmessage(event) {
              handleMessage(event.data);
            };
          }
        },poll:function (sock) {
          if (sock.type === 1 && sock.server) {
            // listen sockets should only say they're available for reading
            // if there are pending clients.
            return sock.pending.length ? (64 | 1) : 0;
          }
  
          var mask = 0;
          var dest = sock.type === 1 ?  // we only care about the socket state for connection-based sockets
            SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport) :
            null;
  
          if (sock.recv_queue.length ||
              !dest ||  // connection-less sockets are always ready to read
              (dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {  // let recv return 0 once closed
            mask |= (64 | 1);
          }
  
          if (!dest ||  // connection-less sockets are always ready to write
              (dest && dest.socket.readyState === dest.socket.OPEN)) {
            mask |= 4;
          }
  
          if ((dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {
            mask |= 16;
          }
  
          return mask;
        },ioctl:function (sock, request, arg) {
          switch (request) {
            case 21531:
              var bytes = 0;
              if (sock.recv_queue.length) {
                bytes = sock.recv_queue[0].data.length;
              }
              HEAP32[((arg)>>2)]=bytes;
              return 0;
            default:
              return ERRNO_CODES.EINVAL;
          }
        },close:function (sock) {
          // if we've spawned a listen server, close it
          if (sock.server) {
            try {
              sock.server.close();
            } catch (e) {
            }
            sock.server = null;
          }
          // close any peer connections
          var peers = Object.keys(sock.peers);
          for (var i = 0; i < peers.length; i++) {
            var peer = sock.peers[peers[i]];
            try {
              peer.socket.close();
            } catch (e) {
            }
            SOCKFS.websocket_sock_ops.removePeer(sock, peer);
          }
          return 0;
        },bind:function (sock, addr, port) {
          if (typeof sock.saddr !== 'undefined' || typeof sock.sport !== 'undefined') {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already bound
          }
          sock.saddr = addr;
          sock.sport = port || _mkport();
          // in order to emulate dgram sockets, we need to launch a listen server when
          // binding on a connection-less socket
          // note: this is only required on the server side
          if (sock.type === 2) {
            // close the existing server if it exists
            if (sock.server) {
              sock.server.close();
              sock.server = null;
            }
            // swallow error operation not supported error that occurs when binding in the
            // browser where this isn't supported
            try {
              sock.sock_ops.listen(sock, 0);
            } catch (e) {
              if (!(e instanceof FS.ErrnoError)) throw e;
              if (e.errno !== ERRNO_CODES.EOPNOTSUPP) throw e;
            }
          }
        },connect:function (sock, addr, port) {
          if (sock.server) {
            throw new FS.ErrnoError(ERRNO_CODS.EOPNOTSUPP);
          }
  
          // TODO autobind
          // if (!sock.addr && sock.type == 2) {
          // }
  
          // early out if we're already connected / in the middle of connecting
          if (typeof sock.daddr !== 'undefined' && typeof sock.dport !== 'undefined') {
            var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
            if (dest) {
              if (dest.socket.readyState === dest.socket.CONNECTING) {
                throw new FS.ErrnoError(ERRNO_CODES.EALREADY);
              } else {
                throw new FS.ErrnoError(ERRNO_CODES.EISCONN);
              }
            }
          }
  
          // add the socket to our peer list and set our
          // destination address / port to match
          var peer = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
          sock.daddr = peer.addr;
          sock.dport = peer.port;
  
          // always "fail" in non-blocking mode
          throw new FS.ErrnoError(ERRNO_CODES.EINPROGRESS);
        },listen:function (sock, backlog) {
          if (!ENVIRONMENT_IS_NODE) {
            throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
          }
          if (sock.server) {
             throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already listening
          }
          var WebSocketServer = require('ws').Server;
          var host = sock.saddr;
          sock.server = new WebSocketServer({
            host: host,
            port: sock.sport
            // TODO support backlog
          });
  
          sock.server.on('connection', function(ws) {
            if (sock.type === 1) {
              var newsock = SOCKFS.createSocket(sock.family, sock.type, sock.protocol);
  
              // create a peer on the new socket
              var peer = SOCKFS.websocket_sock_ops.createPeer(newsock, ws);
              newsock.daddr = peer.addr;
              newsock.dport = peer.port;
  
              // push to queue for accept to pick up
              sock.pending.push(newsock);
            } else {
              // create a peer on the listen socket so calling sendto
              // with the listen socket and an address will resolve
              // to the correct client
              SOCKFS.websocket_sock_ops.createPeer(sock, ws);
            }
          });
          sock.server.on('closed', function() {
            sock.server = null;
          });
          sock.server.on('error', function() {
            // don't throw
          });
        },accept:function (listensock) {
          if (!listensock.server) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          var newsock = listensock.pending.shift();
          newsock.stream.flags = listensock.stream.flags;
          return newsock;
        },getname:function (sock, peer) {
          var addr, port;
          if (peer) {
            if (sock.daddr === undefined || sock.dport === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            }
            addr = sock.daddr;
            port = sock.dport;
          } else {
            // TODO saddr and sport will be set for bind()'d UDP sockets, but what
            // should we be returning for TCP sockets that've been connect()'d?
            addr = sock.saddr || 0;
            port = sock.sport || 0;
          }
          return { addr: addr, port: port };
        },sendmsg:function (sock, buffer, offset, length, addr, port) {
          if (sock.type === 2) {
            // connection-less sockets will honor the message address,
            // and otherwise fall back to the bound destination address
            if (addr === undefined || port === undefined) {
              addr = sock.daddr;
              port = sock.dport;
            }
            // if there was no address to fall back to, error out
            if (addr === undefined || port === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.EDESTADDRREQ);
            }
          } else {
            // connection-based sockets will only use the bound
            addr = sock.daddr;
            port = sock.dport;
          }
  
          // find the peer for the destination address
          var dest = SOCKFS.websocket_sock_ops.getPeer(sock, addr, port);
  
          // early out if not connected with a connection-based socket
          if (sock.type === 1) {
            if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            } else if (dest.socket.readyState === dest.socket.CONNECTING) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
  
          // create a copy of the incoming data to send, as the WebSocket API
          // doesn't work entirely with an ArrayBufferView, it'll just send
          // the entire underlying buffer
          var data;
          if (buffer instanceof Array || buffer instanceof ArrayBuffer) {
            data = buffer.slice(offset, offset + length);
          } else {  // ArrayBufferView
            data = buffer.buffer.slice(buffer.byteOffset + offset, buffer.byteOffset + offset + length);
          }
  
          // if we're emulating a connection-less dgram socket and don't have
          // a cached connection, queue the buffer to send upon connect and
          // lie, saying the data was sent now.
          if (sock.type === 2) {
            if (!dest || dest.socket.readyState !== dest.socket.OPEN) {
              // if we're not connected, open a new connection
              if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                dest = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
              }
              dest.dgram_send_queue.push(data);
              return length;
            }
          }
  
          try {
            // send the actual data
            dest.socket.send(data);
            return length;
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
        },recvmsg:function (sock, length) {
          // http://pubs.opengroup.org/onlinepubs/7908799/xns/recvmsg.html
          if (sock.type === 1 && sock.server) {
            // tcp servers should not be recv()'ing on the listen socket
            throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
          }
  
          var queued = sock.recv_queue.shift();
          if (!queued) {
            if (sock.type === 1) {
              var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
  
              if (!dest) {
                // if we have a destination address but are not connected, error out
                throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
              }
              else if (dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                // return null if the socket has closed
                return null;
              }
              else {
                // else, our socket is in a valid state but truly has nothing available
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
            } else {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
  
          // queued.data will be an ArrayBuffer if it's unadulterated, but if it's
          // requeued TCP data it'll be an ArrayBufferView
          var queuedLength = queued.data.byteLength || queued.data.length;
          var queuedOffset = queued.data.byteOffset || 0;
          var queuedBuffer = queued.data.buffer || queued.data;
          var bytesRead = Math.min(length, queuedLength);
          var res = {
            buffer: new Uint8Array(queuedBuffer, queuedOffset, bytesRead),
            addr: queued.addr,
            port: queued.port
          };
  
  
          // push back any unread data for TCP connections
          if (sock.type === 1 && bytesRead < queuedLength) {
            var bytesRemaining = queuedLength - bytesRead;
            queued.data = new Uint8Array(queuedBuffer, queuedOffset + bytesRead, bytesRemaining);
            sock.recv_queue.unshift(queued);
          }
  
          return res;
        }}};function _send(fd, buf, len, flags) {
      var sock = SOCKFS.getSocket(fd);
      if (!sock) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      // TODO honor flags
      return _write(fd, buf, len);
    }
  
  function _pwrite(fildes, buf, nbyte, offset) {
      // ssize_t pwrite(int fildes, const void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte, offset);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _write(fildes, buf, nbyte) {
      // ssize_t write(int fildes, const void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
  
  
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }
  
  function _fileno(stream) {
      // int fileno(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fileno.html
      stream = FS.getStreamFromPtr(stream);
      if (!stream) return -1;
      return stream.fd;
    }function _fwrite(ptr, size, nitems, stream) {
      // size_t fwrite(const void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fwrite.html
      var bytesToWrite = nitems * size;
      if (bytesToWrite == 0) return 0;
      var fd = _fileno(stream);
      var bytesWritten = _write(fd, ptr, bytesToWrite);
      if (bytesWritten == -1) {
        var streamObj = FS.getStreamFromPtr(stream);
        if (streamObj) streamObj.error = true;
        return 0;
      } else {
        return Math.floor(bytesWritten / size);
      }
    }

  function __emval_take_value() {
  Module['printErr']('missing function: _emval_take_value'); abort(-1);
  }

  function __embind_register_emval() {
  Module['printErr']('missing function: _embind_register_emval'); abort(-1);
  }

  function ___gxx_personality_v0() {
    }

   
  Module["_bitshift64Lshr"] = _bitshift64Lshr;

  var _BDtoIHigh=true;

  function _pthread_cond_broadcast() {
      return 0;
    }

  var _emscripten_resume=true;

  
  
  function __exit(status) {
      // void _exit(int status);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/exit.html
      Module['exit'](status);
    }function _exit(status) {
      __exit(status);
    }function __ZSt9terminatev() {
      _exit(-1234);
    }

  function _pthread_mutex_unlock() {}

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 
  Module["_memcpy"] = _memcpy;

  function _pthread_mutex_lock() {}

  function __emval_incref() {
  Module['printErr']('missing function: _emval_incref'); abort(-1);
  }

  function _llvm_pow_f64() {
  return Math_pow.apply(null, arguments)
  }

  function _sbrk(bytes) {
      // Implement a Linux-like 'memory area' for our 'process'.
      // Changes the size of the memory area by |bytes|; returns the
      // address of the previous top ('break') of the memory area
      // We control the "dynamic" memory - DYNAMIC_BASE to DYNAMICTOP
      var self = _sbrk;
      if (!self.called) {
        DYNAMICTOP = alignMemoryPage(DYNAMICTOP); // make sure we start out aligned
        self.called = true;
        assert(Runtime.dynamicAlloc);
        self.alloc = Runtime.dynamicAlloc;
        Runtime.dynamicAlloc = function() { abort('cannot dynamically allocate, sbrk now has control') };
      }
      var ret = DYNAMICTOP;
      if (bytes != 0) self.alloc(bytes);
      return ret;  // Previous break location.
    }

  
  
  function __isLeapYear(year) {
        return year%4 === 0 && (year%100 !== 0 || year%400 === 0);
    }
  
  function __arraySum(array, index) {
      var sum = 0;
      for (var i = 0; i <= index; sum += array[i++]);
      return sum;
    }
  
  
  var __MONTH_DAYS_LEAP=[31,29,31,30,31,30,31,31,30,31,30,31];
  
  var __MONTH_DAYS_REGULAR=[31,28,31,30,31,30,31,31,30,31,30,31];function __addDays(date, days) {
      var newDate = new Date(date.getTime());
      while(days > 0) {
        var leap = __isLeapYear(newDate.getFullYear());
        var currentMonth = newDate.getMonth();
        var daysInCurrentMonth = (leap ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR)[currentMonth];
  
        if (days > daysInCurrentMonth-newDate.getDate()) {
          // we spill over to next month
          days -= (daysInCurrentMonth-newDate.getDate()+1);
          newDate.setDate(1);
          if (currentMonth < 11) {
            newDate.setMonth(currentMonth+1)
          } else {
            newDate.setMonth(0);
            newDate.setFullYear(newDate.getFullYear()+1);
          }
        } else {
          // we stay in current month 
          newDate.setDate(newDate.getDate()+days);
          return newDate;
        }
      }
  
      return newDate;
    }function _strftime(s, maxsize, format, tm) {
      // size_t strftime(char *restrict s, size_t maxsize, const char *restrict format, const struct tm *restrict timeptr);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/strftime.html
      
      var date = {
        tm_sec: HEAP32[((tm)>>2)],
        tm_min: HEAP32[(((tm)+(4))>>2)],
        tm_hour: HEAP32[(((tm)+(8))>>2)],
        tm_mday: HEAP32[(((tm)+(12))>>2)],
        tm_mon: HEAP32[(((tm)+(16))>>2)],
        tm_year: HEAP32[(((tm)+(20))>>2)],
        tm_wday: HEAP32[(((tm)+(24))>>2)],
        tm_yday: HEAP32[(((tm)+(28))>>2)],
        tm_isdst: HEAP32[(((tm)+(32))>>2)]
      };
  
      var pattern = Pointer_stringify(format);
  
      // expand format
      var EXPANSION_RULES_1 = {
        '%c': '%a %b %d %H:%M:%S %Y',     // Replaced by the locale's appropriate date and time representation - e.g., Mon Aug  3 14:02:01 2013
        '%D': '%m/%d/%y',                 // Equivalent to %m / %d / %y
        '%F': '%Y-%m-%d',                 // Equivalent to %Y - %m - %d
        '%h': '%b',                       // Equivalent to %b
        '%r': '%I:%M:%S %p',              // Replaced by the time in a.m. and p.m. notation
        '%R': '%H:%M',                    // Replaced by the time in 24-hour notation
        '%T': '%H:%M:%S',                 // Replaced by the time
        '%x': '%m/%d/%y',                 // Replaced by the locale's appropriate date representation
        '%X': '%H:%M:%S',                 // Replaced by the locale's appropriate date representation
      };
      for (var rule in EXPANSION_RULES_1) {
        pattern = pattern.replace(new RegExp(rule, 'g'), EXPANSION_RULES_1[rule]);
      }
  
      var WEEKDAYS = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
      var MONTHS = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
  
      function leadingSomething(value, digits, character) {
        var str = typeof value === 'number' ? value.toString() : (value || '');
        while (str.length < digits) {
          str = character[0]+str;
        }
        return str;
      };
  
      function leadingNulls(value, digits) {
        return leadingSomething(value, digits, '0');
      };
  
      function compareByDay(date1, date2) {
        function sgn(value) {
          return value < 0 ? -1 : (value > 0 ? 1 : 0);
        };
  
        var compare;
        if ((compare = sgn(date1.getFullYear()-date2.getFullYear())) === 0) {
          if ((compare = sgn(date1.getMonth()-date2.getMonth())) === 0) {
            compare = sgn(date1.getDate()-date2.getDate());
          }
        }
        return compare;
      };
  
      function getFirstWeekStartDate(janFourth) {
          switch (janFourth.getDay()) {
            case 0: // Sunday
              return new Date(janFourth.getFullYear()-1, 11, 29);
            case 1: // Monday
              return janFourth;
            case 2: // Tuesday
              return new Date(janFourth.getFullYear(), 0, 3);
            case 3: // Wednesday
              return new Date(janFourth.getFullYear(), 0, 2);
            case 4: // Thursday
              return new Date(janFourth.getFullYear(), 0, 1);
            case 5: // Friday
              return new Date(janFourth.getFullYear()-1, 11, 31);
            case 6: // Saturday
              return new Date(janFourth.getFullYear()-1, 11, 30);
          }
      };
  
      function getWeekBasedYear(date) {
          var thisDate = __addDays(new Date(date.tm_year+1900, 0, 1), date.tm_yday);
  
          var janFourthThisYear = new Date(thisDate.getFullYear(), 0, 4);
          var janFourthNextYear = new Date(thisDate.getFullYear()+1, 0, 4);
  
          var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
          var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
  
          if (compareByDay(firstWeekStartThisYear, thisDate) <= 0) {
            // this date is after the start of the first week of this year
            if (compareByDay(firstWeekStartNextYear, thisDate) <= 0) {
              return thisDate.getFullYear()+1;
            } else {
              return thisDate.getFullYear();
            }
          } else { 
            return thisDate.getFullYear()-1;
          }
      };
  
      var EXPANSION_RULES_2 = {
        '%a': function(date) {
          return WEEKDAYS[date.tm_wday].substring(0,3);
        },
        '%A': function(date) {
          return WEEKDAYS[date.tm_wday];
        },
        '%b': function(date) {
          return MONTHS[date.tm_mon].substring(0,3);
        },
        '%B': function(date) {
          return MONTHS[date.tm_mon];
        },
        '%C': function(date) {
          var year = date.tm_year+1900;
          return leadingNulls(Math.floor(year/100),2);
        },
        '%d': function(date) {
          return leadingNulls(date.tm_mday, 2);
        },
        '%e': function(date) {
          return leadingSomething(date.tm_mday, 2, ' ');
        },
        '%g': function(date) {
          // %g, %G, and %V give values according to the ISO 8601:2000 standard week-based year. 
          // In this system, weeks begin on a Monday and week 1 of the year is the week that includes 
          // January 4th, which is also the week that includes the first Thursday of the year, and 
          // is also the first week that contains at least four days in the year. 
          // If the first Monday of January is the 2nd, 3rd, or 4th, the preceding days are part of 
          // the last week of the preceding year; thus, for Saturday 2nd January 1999, 
          // %G is replaced by 1998 and %V is replaced by 53. If December 29th, 30th, 
          // or 31st is a Monday, it and any following days are part of week 1 of the following year. 
          // Thus, for Tuesday 30th December 1997, %G is replaced by 1998 and %V is replaced by 01.
          
          return getWeekBasedYear(date).toString().substring(2);
        },
        '%G': function(date) {
          return getWeekBasedYear(date);
        },
        '%H': function(date) {
          return leadingNulls(date.tm_hour, 2);
        },
        '%I': function(date) {
          return leadingNulls(date.tm_hour < 13 ? date.tm_hour : date.tm_hour-12, 2);
        },
        '%j': function(date) {
          // Day of the year (001-366)
          return leadingNulls(date.tm_mday+__arraySum(__isLeapYear(date.tm_year+1900) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, date.tm_mon-1), 3);
        },
        '%m': function(date) {
          return leadingNulls(date.tm_mon+1, 2);
        },
        '%M': function(date) {
          return leadingNulls(date.tm_min, 2);
        },
        '%n': function() {
          return '\n';
        },
        '%p': function(date) {
          if (date.tm_hour > 0 && date.tm_hour < 13) {
            return 'AM';
          } else {
            return 'PM';
          }
        },
        '%S': function(date) {
          return leadingNulls(date.tm_sec, 2);
        },
        '%t': function() {
          return '\t';
        },
        '%u': function(date) {
          var day = new Date(date.tm_year+1900, date.tm_mon+1, date.tm_mday, 0, 0, 0, 0);
          return day.getDay() || 7;
        },
        '%U': function(date) {
          // Replaced by the week number of the year as a decimal number [00,53]. 
          // The first Sunday of January is the first day of week 1; 
          // days in the new year before this are in week 0. [ tm_year, tm_wday, tm_yday]
          var janFirst = new Date(date.tm_year+1900, 0, 1);
          var firstSunday = janFirst.getDay() === 0 ? janFirst : __addDays(janFirst, 7-janFirst.getDay());
          var endDate = new Date(date.tm_year+1900, date.tm_mon, date.tm_mday);
          
          // is target date after the first Sunday?
          if (compareByDay(firstSunday, endDate) < 0) {
            // calculate difference in days between first Sunday and endDate
            var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth()-1)-31;
            var firstSundayUntilEndJanuary = 31-firstSunday.getDate();
            var days = firstSundayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();
            return leadingNulls(Math.ceil(days/7), 2);
          }
  
          return compareByDay(firstSunday, janFirst) === 0 ? '01': '00';
        },
        '%V': function(date) {
          // Replaced by the week number of the year (Monday as the first day of the week) 
          // as a decimal number [01,53]. If the week containing 1 January has four 
          // or more days in the new year, then it is considered week 1. 
          // Otherwise, it is the last week of the previous year, and the next week is week 1. 
          // Both January 4th and the first Thursday of January are always in week 1. [ tm_year, tm_wday, tm_yday]
          var janFourthThisYear = new Date(date.tm_year+1900, 0, 4);
          var janFourthNextYear = new Date(date.tm_year+1901, 0, 4);
  
          var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
          var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
  
          var endDate = __addDays(new Date(date.tm_year+1900, 0, 1), date.tm_yday);
  
          if (compareByDay(endDate, firstWeekStartThisYear) < 0) {
            // if given date is before this years first week, then it belongs to the 53rd week of last year
            return '53';
          } 
  
          if (compareByDay(firstWeekStartNextYear, endDate) <= 0) {
            // if given date is after next years first week, then it belongs to the 01th week of next year
            return '01';
          }
  
          // given date is in between CW 01..53 of this calendar year
          var daysDifference;
          if (firstWeekStartThisYear.getFullYear() < date.tm_year+1900) {
            // first CW of this year starts last year
            daysDifference = date.tm_yday+32-firstWeekStartThisYear.getDate()
          } else {
            // first CW of this year starts this year
            daysDifference = date.tm_yday+1-firstWeekStartThisYear.getDate();
          }
          return leadingNulls(Math.ceil(daysDifference/7), 2);
        },
        '%w': function(date) {
          var day = new Date(date.tm_year+1900, date.tm_mon+1, date.tm_mday, 0, 0, 0, 0);
          return day.getDay();
        },
        '%W': function(date) {
          // Replaced by the week number of the year as a decimal number [00,53]. 
          // The first Monday of January is the first day of week 1; 
          // days in the new year before this are in week 0. [ tm_year, tm_wday, tm_yday]
          var janFirst = new Date(date.tm_year, 0, 1);
          var firstMonday = janFirst.getDay() === 1 ? janFirst : __addDays(janFirst, janFirst.getDay() === 0 ? 1 : 7-janFirst.getDay()+1);
          var endDate = new Date(date.tm_year+1900, date.tm_mon, date.tm_mday);
  
          // is target date after the first Monday?
          if (compareByDay(firstMonday, endDate) < 0) {
            var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth()-1)-31;
            var firstMondayUntilEndJanuary = 31-firstMonday.getDate();
            var days = firstMondayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();
            return leadingNulls(Math.ceil(days/7), 2);
          }
          return compareByDay(firstMonday, janFirst) === 0 ? '01': '00';
        },
        '%y': function(date) {
          // Replaced by the last two digits of the year as a decimal number [00,99]. [ tm_year]
          return (date.tm_year+1900).toString().substring(2);
        },
        '%Y': function(date) {
          // Replaced by the year as a decimal number (for example, 1997). [ tm_year]
          return date.tm_year+1900;
        },
        '%z': function(date) {
          // Replaced by the offset from UTC in the ISO 8601:2000 standard format ( +hhmm or -hhmm ),
          // or by no characters if no timezone is determinable. 
          // For example, "-0430" means 4 hours 30 minutes behind UTC (west of Greenwich). 
          // If tm_isdst is zero, the standard time offset is used. 
          // If tm_isdst is greater than zero, the daylight savings time offset is used. 
          // If tm_isdst is negative, no characters are returned. 
          // FIXME: we cannot determine time zone (or can we?)
          return '';
        },
        '%Z': function(date) {
          // Replaced by the timezone name or abbreviation, or by no bytes if no timezone information exists. [ tm_isdst]
          // FIXME: we cannot determine time zone (or can we?)
          return '';
        },
        '%%': function() {
          return '%';
        }
      };
      for (var rule in EXPANSION_RULES_2) {
        if (pattern.indexOf(rule) >= 0) {
          pattern = pattern.replace(new RegExp(rule, 'g'), EXPANSION_RULES_2[rule](date));
        }
      }
  
      var bytes = intArrayFromString(pattern, false);
      if (bytes.length > maxsize) {
        return 0;
      } 
  
      writeArrayToMemory(bytes, s);
      return bytes.length-1;
    }function _strftime_l(s, maxsize, format, tm) {
      return _strftime(s, maxsize, format, tm); // no locale support yet
    }

  function ___cxa_guard_abort() {}

  
  function _malloc(bytes) {
      /* Over-allocate to make sure it is byte-aligned by 8.
       * This will leak memory, but this is only the dummy
       * implementation (replaced by dlmalloc normally) so
       * not an issue.
       */
      var ptr = Runtime.dynamicAlloc(bytes + 8);
      return (ptr+8) & 0xFFFFFFF8;
    }
  Module["_malloc"] = _malloc;function _newlocale(mask, locale, base) {
      return _malloc(4);
    }

   
  Module["_memmove"] = _memmove;

  var _emscripten_preinvoke=true;

  
  function _strerror_r(errnum, strerrbuf, buflen) {
      if (errnum in ERRNO_MESSAGES) {
        if (ERRNO_MESSAGES[errnum].length > buflen - 1) {
          return ___setErrNo(ERRNO_CODES.ERANGE);
        } else {
          var msg = ERRNO_MESSAGES[errnum];
          writeAsciiToMemory(msg, strerrbuf);
          return 0;
        }
      } else {
        return ___setErrNo(ERRNO_CODES.EINVAL);
      }
    }function _strerror(errnum) {
      if (!_strerror.buffer) _strerror.buffer = _malloc(256);
      _strerror_r(errnum, _strerror.buffer, 256);
      return _strerror.buffer;
    }

  function _catclose(catd) {
      // int catclose (nl_catd catd)
      return 0;
    }

  function __ZNSt9exceptionD2Ev() {}

  function __embind_register_memory_view() {
  Module['printErr']('missing function: _embind_register_memory_view'); abort(-1);
  }

  function ___cxa_guard_release() {}

  function _ungetc(c, stream) {
      // int ungetc(int c, FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/ungetc.html
      stream = FS.getStreamFromPtr(stream);
      if (!stream) {
        return -1;
      }
      if (c === -1) {
        // do nothing for EOF character
        return c;
      }
      c = unSign(c & 0xFF);
      stream.ungotten.push(c);
      stream.eof = false;
      return c;
    }

  function _uselocale(locale) {
      return 0;
    }

  
  
  function _free() {
  }
  Module["_free"] = _free;function ___cxa_free_exception(ptr) {
      try {
        return _free(ptr - ___cxa_exception_header_size);
      } catch(e) { // XXX FIXME
        Module.printErr('exception during cxa_free_exception: ' + e);
      }
    }
  
  var ___cxa_caught_exceptions=[];function ___cxa_end_catch() {
      if (___cxa_end_catch.rethrown) {
        ___cxa_end_catch.rethrown = false;
        return;
      }
      // Clear state flag.
      asm['setThrew'](0);
      // Call destructor if one is registered then clear it.
      var ptr = ___cxa_caught_exceptions.pop();
      if (ptr) {
        header = ptr - ___cxa_exception_header_size;
        var destructor = HEAP32[(((header)+(4))>>2)];
        if (destructor) {
          Runtime.dynCall('vi', destructor, [ptr]);
          HEAP32[(((header)+(4))>>2)]=0;
        }
        ___cxa_free_exception(ptr);
        ___cxa_last_thrown_exception = 0;
      }
    }

  function _sysconf(name) {
      // long sysconf(int name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/sysconf.html
      switch(name) {
        case 30: return PAGE_SIZE;
        case 132:
        case 133:
        case 12:
        case 137:
        case 138:
        case 15:
        case 235:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 149:
        case 13:
        case 10:
        case 236:
        case 153:
        case 9:
        case 21:
        case 22:
        case 159:
        case 154:
        case 14:
        case 77:
        case 78:
        case 139:
        case 80:
        case 81:
        case 79:
        case 82:
        case 68:
        case 67:
        case 164:
        case 11:
        case 29:
        case 47:
        case 48:
        case 95:
        case 52:
        case 51:
        case 46:
          return 200809;
        case 27:
        case 246:
        case 127:
        case 128:
        case 23:
        case 24:
        case 160:
        case 161:
        case 181:
        case 182:
        case 242:
        case 183:
        case 184:
        case 243:
        case 244:
        case 245:
        case 165:
        case 178:
        case 179:
        case 49:
        case 50:
        case 168:
        case 169:
        case 175:
        case 170:
        case 171:
        case 172:
        case 97:
        case 76:
        case 32:
        case 173:
        case 35:
          return -1;
        case 176:
        case 177:
        case 7:
        case 155:
        case 8:
        case 157:
        case 125:
        case 126:
        case 92:
        case 93:
        case 129:
        case 130:
        case 131:
        case 94:
        case 91:
          return 1;
        case 74:
        case 60:
        case 69:
        case 70:
        case 4:
          return 1024;
        case 31:
        case 42:
        case 72:
          return 32;
        case 87:
        case 26:
        case 33:
          return 2147483647;
        case 34:
        case 1:
          return 47839;
        case 38:
        case 36:
          return 99;
        case 43:
        case 37:
          return 2048;
        case 0: return 2097152;
        case 3: return 65536;
        case 28: return 32768;
        case 44: return 32767;
        case 75: return 16384;
        case 39: return 1000;
        case 89: return 700;
        case 71: return 256;
        case 40: return 255;
        case 2: return 100;
        case 180: return 64;
        case 25: return 20;
        case 5: return 16;
        case 6: return 6;
        case 73: return 4;
        case 84: return 1;
      }
      ___setErrNo(ERRNO_CODES.EINVAL);
      return -1;
    }

  function __embind_register_void() {
  Module['printErr']('missing function: _embind_register_void'); abort(-1);
  }

  function ___errno_location() {
      return ___errno_state;
    }

   
  Module["_memset"] = _memset;

  var _BDtoILow=true;

  var _BItoD=true;

   
  Module["_bitshift64Shl"] = _bitshift64Shl;

  function _abort() {
      Module['abort']();
    }

  function __embind_register_class_property() {
  Module['printErr']('missing function: _embind_register_class_property'); abort(-1);
  }


  function __embind_register_class() {
  Module['printErr']('missing function: _embind_register_class'); abort(-1);
  }

   
  Module["_strlen"] = _strlen;

  function _pthread_cond_wait() {
      return 0;
    }

  function _fabs() {
  return Math_abs.apply(null, arguments)
  }

  function ___cxa_rethrow() {
      ___cxa_end_catch.rethrown = true;
      var ptr = ___cxa_caught_exceptions.pop();
      throw ptr;
    }

  
  
  
  
  function _recv(fd, buf, len, flags) {
      var sock = SOCKFS.getSocket(fd);
      if (!sock) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      // TODO honor flags
      return _read(fd, buf, len);
    }
  
  function _pread(fildes, buf, nbyte, offset) {
      // ssize_t pread(int fildes, void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.read(stream, slab, buf, nbyte, offset);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _read(fildes, buf, nbyte) {
      // ssize_t read(int fildes, void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
  
  
      try {
        var slab = HEAP8;
        return FS.read(stream, slab, buf, nbyte);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fread(ptr, size, nitems, stream) {
      // size_t fread(void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fread.html
      var bytesToRead = nitems * size;
      if (bytesToRead == 0) {
        return 0;
      }
      var bytesRead = 0;
      var streamObj = FS.getStreamFromPtr(stream);
      if (!streamObj) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return 0;
      }
      while (streamObj.ungotten.length && bytesToRead > 0) {
        HEAP8[((ptr++)>>0)]=streamObj.ungotten.pop();
        bytesToRead--;
        bytesRead++;
      }
      var err = _read(streamObj.fd, ptr, bytesToRead);
      if (err == -1) {
        if (streamObj) streamObj.error = true;
        return 0;
      }
      bytesRead += err;
      if (bytesRead < bytesToRead) streamObj.eof = true;
      return Math.floor(bytesRead / size);
    }function _fgetc(stream) {
      // int fgetc(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fgetc.html
      var streamObj = FS.getStreamFromPtr(stream);
      if (!streamObj) return -1;
      if (streamObj.eof || streamObj.error) return -1;
      var ret = _fread(_fgetc.ret, 1, 1, stream);
      if (ret == 0) {
        return -1;
      } else if (ret == -1) {
        streamObj.error = true;
        return -1;
      } else {
        return HEAPU8[((_fgetc.ret)>>0)];
      }
    }function _getc() {
  return _fgetc.apply(null, arguments)
  }

  function _sqrt() {
  return Math_sqrt.apply(null, arguments)
  }

  var Browser={mainLoop:{scheduler:null,method:"",shouldPause:false,paused:false,queue:[],pause:function () {
          Browser.mainLoop.shouldPause = true;
        },resume:function () {
          if (Browser.mainLoop.paused) {
            Browser.mainLoop.paused = false;
            Browser.mainLoop.scheduler();
          }
          Browser.mainLoop.shouldPause = false;
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        }},isFullScreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function () {
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = []; // needs to exist even in workers
  
        if (Browser.initted || ENVIRONMENT_IS_WORKER) return;
        Browser.initted = true;
  
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : undefined;
        if (!Module.noImageDecoding && typeof Browser.URLObject === 'undefined') {
          console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
          Module.noImageDecoding = true;
        }
  
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
  
        var imagePlugin = {};
        imagePlugin['canHandle'] = function imagePlugin_canHandle(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
        };
        imagePlugin['handle'] = function imagePlugin_handle(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: Browser.getMimetype(name) });
              if (b.size !== byteArray.length) { // Safari bug #118630
                // Safari's Blob can only take an ArrayBuffer
                b = new Blob([(new Uint8Array(byteArray)).buffer], { type: Browser.getMimetype(name) });
              }
            } catch(e) {
              Runtime.warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          assert(typeof url == 'string', 'createObjectURL must return a url as a string');
          var img = new Image();
          img.onload = function img_onload() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function img_onerror(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
  
        var audioPlugin = {};
        audioPlugin['canHandle'] = function audioPlugin_canHandle(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function audioPlugin_handle(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            assert(typeof url == 'string', 'createObjectURL must return a url as a string');
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function audio_onerror(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            Browser.safeSetTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
  
        // Canvas event setup
  
        var canvas = Module['canvas'];
        if (canvas) {
          // forced aspect ratio can be enabled by defining 'forcedAspectRatio' on Module
          // Module['forcedAspectRatio'] = 4 / 3;
          
          canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                      canvas['mozRequestPointerLock'] ||
                                      canvas['webkitRequestPointerLock'] ||
                                      canvas['msRequestPointerLock'] ||
                                      function(){};
          canvas.exitPointerLock = document['exitPointerLock'] ||
                                   document['mozExitPointerLock'] ||
                                   document['webkitExitPointerLock'] ||
                                   document['msExitPointerLock'] ||
                                   function(){}; // no-op if function does not exist
          canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
  
          function pointerLockChange() {
            Browser.pointerLock = document['pointerLockElement'] === canvas ||
                                  document['mozPointerLockElement'] === canvas ||
                                  document['webkitPointerLockElement'] === canvas ||
                                  document['msPointerLockElement'] === canvas;
          }
  
          document.addEventListener('pointerlockchange', pointerLockChange, false);
          document.addEventListener('mozpointerlockchange', pointerLockChange, false);
          document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
          document.addEventListener('mspointerlockchange', pointerLockChange, false);
  
          if (Module['elementPointerLock']) {
            canvas.addEventListener("click", function(ev) {
              if (!Browser.pointerLock && canvas.requestPointerLock) {
                canvas.requestPointerLock();
                ev.preventDefault();
              }
            }, false);
          }
        }
      },createContext:function (canvas, useWebGL, setInModule, webGLContextAttributes) {
        var ctx;
        var errorInfo = '?';
        function onContextCreationError(event) {
          errorInfo = event.statusMessage || errorInfo;
        }
        try {
          if (useWebGL) {
            var contextAttributes = {
              antialias: false,
              alpha: false
            };
  
            if (webGLContextAttributes) {
              for (var attribute in webGLContextAttributes) {
                contextAttributes[attribute] = webGLContextAttributes[attribute];
              }
            }
  
  
            canvas.addEventListener('webglcontextcreationerror', onContextCreationError, false);
            try {
              ['experimental-webgl', 'webgl'].some(function(webglId) {
                return ctx = canvas.getContext(webglId, contextAttributes);
              });
            } finally {
              canvas.removeEventListener('webglcontextcreationerror', onContextCreationError, false);
            }
          } else {
            ctx = canvas.getContext('2d');
          }
          if (!ctx) throw ':(';
        } catch (e) {
          Module.print('Could not create canvas: ' + [errorInfo, e]);
          return null;
        }
        if (useWebGL) {
          // Set the background of the WebGL canvas to black
          canvas.style.backgroundColor = "black";
        }
        if (setInModule) {
          GLctx = Module.ctx = ctx;
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
          Browser.init();
        }
        return ctx;
      },destroyContext:function (canvas, useWebGL, setInModule) {},fullScreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullScreen:function (lockPointer, resizeCanvas) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;
  
        var canvas = Module['canvas'];
        function fullScreenChange() {
          Browser.isFullScreen = false;
          var canvasContainer = canvas.parentNode;
          if ((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
               document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
               document['fullScreenElement'] || document['fullscreenElement'] ||
               document['msFullScreenElement'] || document['msFullscreenElement'] ||
               document['webkitCurrentFullScreenElement']) === canvasContainer) {
            canvas.cancelFullScreen = document['cancelFullScreen'] ||
                                      document['mozCancelFullScreen'] ||
                                      document['webkitCancelFullScreen'] ||
                                      document['msExitFullscreen'] ||
                                      document['exitFullscreen'] ||
                                      function() {};
            canvas.cancelFullScreen = canvas.cancelFullScreen.bind(document);
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullScreen = true;
            if (Browser.resizeCanvas) Browser.setFullScreenCanvasSize();
          } else {
            
            // remove the full screen specific parent of the canvas again to restore the HTML structure from before going full screen
            canvasContainer.parentNode.insertBefore(canvas, canvasContainer);
            canvasContainer.parentNode.removeChild(canvasContainer);
            
            if (Browser.resizeCanvas) Browser.setWindowedCanvasSize();
          }
          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullScreen);
          Browser.updateCanvasDimensions(canvas);
        }
  
        if (!Browser.fullScreenHandlersInstalled) {
          Browser.fullScreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullScreenChange, false);
          document.addEventListener('mozfullscreenchange', fullScreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullScreenChange, false);
          document.addEventListener('MSFullscreenChange', fullScreenChange, false);
        }
  
        // create a new parent to ensure the canvas has no siblings. this allows browsers to optimize full screen performance when its parent is the full screen root
        var canvasContainer = document.createElement("div");
        canvas.parentNode.insertBefore(canvasContainer, canvas);
        canvasContainer.appendChild(canvas);
        
        // use parent of canvas as full screen root to allow aspect ratio correction (Firefox stretches the root to screen size)
        canvasContainer.requestFullScreen = canvasContainer['requestFullScreen'] ||
                                            canvasContainer['mozRequestFullScreen'] ||
                                            canvasContainer['msRequestFullscreen'] ||
                                           (canvasContainer['webkitRequestFullScreen'] ? function() { canvasContainer['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
        canvasContainer.requestFullScreen();
      },requestAnimationFrame:function requestAnimationFrame(func) {
        if (typeof window === 'undefined') { // Provide fallback to setTimeout if window is undefined (e.g. in Node.js)
          setTimeout(func, 1000/60);
        } else {
          if (!window.requestAnimationFrame) {
            window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                           window['mozRequestAnimationFrame'] ||
                                           window['webkitRequestAnimationFrame'] ||
                                           window['msRequestAnimationFrame'] ||
                                           window['oRequestAnimationFrame'] ||
                                           window['setTimeout'];
          }
          window.requestAnimationFrame(func);
        }
      },safeCallback:function (func) {
        return function() {
          if (!ABORT) return func.apply(null, arguments);
        };
      },safeRequestAnimationFrame:function (func) {
        return Browser.requestAnimationFrame(function() {
          if (!ABORT) func();
        });
      },safeSetTimeout:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setTimeout(function() {
          if (!ABORT) func();
        }, timeout);
      },safeSetInterval:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setInterval(function() {
          if (!ABORT) func();
        }, timeout);
      },getMimetype:function (name) {
        return {
          'jpg': 'image/jpeg',
          'jpeg': 'image/jpeg',
          'png': 'image/png',
          'bmp': 'image/bmp',
          'ogg': 'audio/ogg',
          'wav': 'audio/wav',
          'mp3': 'audio/mpeg'
        }[name.substr(name.lastIndexOf('.')+1)];
      },getUserMedia:function (func) {
        if(!window.getUserMedia) {
          window.getUserMedia = navigator['getUserMedia'] ||
                                navigator['mozGetUserMedia'];
        }
        window.getUserMedia(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },getMouseWheelDelta:function (event) {
        var delta = 0;
        switch (event.type) {
          case 'DOMMouseScroll': 
            delta = event.detail;
            break;
          case 'mousewheel': 
            delta = -event.wheelDelta;
            break;
          case 'wheel': 
            delta = event.deltaY;
            break;
          default:
            throw 'unrecognized mouse wheel event: ' + event.type;
        }
        return Math.max(-1, Math.min(1, delta));
      },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,touches:{},lastTouches:{},calculateMouseEvent:function (event) { // event should be mousemove, mousedown or mouseup
        if (Browser.pointerLock) {
          // When the pointer is locked, calculate the coordinates
          // based on the movement of the mouse.
          // Workaround for Firefox bug 764498
          if (event.type != 'mousemove' &&
              ('mozMovementX' in event)) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }
          
          // check if SDL is available
          if (typeof SDL != "undefined") {
          	Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
          	Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
          } else {
          	// just add the mouse delta to the current absolut mouse position
          	// FIXME: ideally this should be clamped against the canvas size and zero
          	Browser.mouseX += Browser.mouseMovementX;
          	Browser.mouseY += Browser.mouseMovementY;
          }        
        } else {
          // Otherwise, calculate the movement based on the changes
          // in the coordinates.
          var rect = Module["canvas"].getBoundingClientRect();
          var cw = Module["canvas"].width;
          var ch = Module["canvas"].height;
  
          // Neither .scrollX or .pageXOffset are defined in a spec, but
          // we prefer .scrollX because it is currently in a spec draft.
          // (see: http://www.w3.org/TR/2013/WD-cssom-view-20131217/)
          var scrollX = ((typeof window.scrollX !== 'undefined') ? window.scrollX : window.pageXOffset);
          var scrollY = ((typeof window.scrollY !== 'undefined') ? window.scrollY : window.pageYOffset);
          // If this assert lands, it's likely because the browser doesn't support scrollX or pageXOffset
          // and we have no viable fallback.
          assert((typeof scrollX !== 'undefined') && (typeof scrollY !== 'undefined'), 'Unable to retrieve scroll position, mouse positions likely broken.');
  
          if (event.type === 'touchstart' || event.type === 'touchend' || event.type === 'touchmove') {
            var touch = event.touch;
            if (touch === undefined) {
              return; // the "touch" property is only defined in SDL
  
            }
            var adjustedX = touch.pageX - (scrollX + rect.left);
            var adjustedY = touch.pageY - (scrollY + rect.top);
  
            adjustedX = adjustedX * (cw / rect.width);
            adjustedY = adjustedY * (ch / rect.height);
  
            var coords = { x: adjustedX, y: adjustedY };
            
            if (event.type === 'touchstart') {
              Browser.lastTouches[touch.identifier] = coords;
              Browser.touches[touch.identifier] = coords;
            } else if (event.type === 'touchend' || event.type === 'touchmove') {
              Browser.lastTouches[touch.identifier] = Browser.touches[touch.identifier];
              Browser.touches[touch.identifier] = { x: adjustedX, y: adjustedY };
            } 
            return;
          }
  
          var x = event.pageX - (scrollX + rect.left);
          var y = event.pageY - (scrollY + rect.top);
  
          // the canvas might be CSS-scaled compared to its backbuffer;
          // SDL-using content will want mouse coordinates in terms
          // of backbuffer units.
          x = x * (cw / rect.width);
          y = y * (ch / rect.height);
  
          Browser.mouseMovementX = x - Browser.mouseX;
          Browser.mouseMovementY = y - Browser.mouseY;
          Browser.mouseX = x;
          Browser.mouseY = y;
        }
      },xhrLoad:function (url, onload, onerror) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, true);
        xhr.responseType = 'arraybuffer';
        xhr.onload = function xhr_onload() {
          if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
            onload(xhr.response);
          } else {
            onerror();
          }
        };
        xhr.onerror = onerror;
        xhr.send(null);
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        Browser.xhrLoad(url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (!noRunDep) removeRunDependency('al ' + url);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (!noRunDep) addRunDependency('al ' + url);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        Browser.updateCanvasDimensions(canvas, width, height);
        if (!noUpdates) Browser.updateResizeListeners();
      },windowedWidth:0,windowedHeight:0,setFullScreenCanvasSize:function () {
        // check if SDL is available   
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },setWindowedCanvasSize:function () {
        // check if SDL is available       
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },updateCanvasDimensions:function (canvas, wNative, hNative) {
        if (wNative && hNative) {
          canvas.widthNative = wNative;
          canvas.heightNative = hNative;
        } else {
          wNative = canvas.widthNative;
          hNative = canvas.heightNative;
        }
        var w = wNative;
        var h = hNative;
        if (Module['forcedAspectRatio'] && Module['forcedAspectRatio'] > 0) {
          if (w/h < Module['forcedAspectRatio']) {
            w = Math.round(h * Module['forcedAspectRatio']);
          } else {
            h = Math.round(w / Module['forcedAspectRatio']);
          }
        }
        if (((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
             document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
             document['fullScreenElement'] || document['fullscreenElement'] ||
             document['msFullScreenElement'] || document['msFullscreenElement'] ||
             document['webkitCurrentFullScreenElement']) === canvas.parentNode) && (typeof screen != 'undefined')) {
           var factor = Math.min(screen.width / w, screen.height / h);
           w = Math.round(w * factor);
           h = Math.round(h * factor);
        }
        if (Browser.resizeCanvas) {
          if (canvas.width  != w) canvas.width  = w;
          if (canvas.height != h) canvas.height = h;
          if (typeof canvas.style != 'undefined') {
            canvas.style.removeProperty( "width");
            canvas.style.removeProperty("height");
          }
        } else {
          if (canvas.width  != wNative) canvas.width  = wNative;
          if (canvas.height != hNative) canvas.height = hNative;
          if (typeof canvas.style != 'undefined') {
            if (w != wNative || h != hNative) {
              canvas.style.setProperty( "width", w + "px", "important");
              canvas.style.setProperty("height", h + "px", "important");
            } else {
              canvas.style.removeProperty( "width");
              canvas.style.removeProperty("height");
            }
          }
        }
      }};

  function ___ctype_b_loc() {
      // http://refspecs.freestandards.org/LSB_3.0.0/LSB-Core-generic/LSB-Core-generic/baselib---ctype-b-loc.html
      var me = ___ctype_b_loc;
      if (!me.ret) {
        var values = [
          0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
          0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
          0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,8195,8194,8194,8194,8194,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,24577,49156,49156,49156,
          49156,49156,49156,49156,49156,49156,49156,49156,49156,49156,49156,49156,55304,55304,55304,55304,55304,55304,55304,55304,
          55304,55304,49156,49156,49156,49156,49156,49156,49156,54536,54536,54536,54536,54536,54536,50440,50440,50440,50440,50440,
          50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,49156,49156,49156,49156,49156,
          49156,54792,54792,54792,54792,54792,54792,50696,50696,50696,50696,50696,50696,50696,50696,50696,50696,50696,50696,50696,
          50696,50696,50696,50696,50696,50696,50696,49156,49156,49156,49156,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
          0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
          0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
        ];
        var i16size = 2;
        var arr = _malloc(values.length * i16size);
        for (var i = 0; i < values.length; i++) {
          HEAP16[(((arr)+(i * i16size))>>1)]=values[i];
        }
        me.ret = allocate([arr + 128 * i16size], 'i16*', ALLOC_NORMAL);
      }
      return me.ret;
    }

  function _freelocale(locale) {
      _free(locale);
    }

  function ___cxa_allocate_exception(size) {
      var ptr = _malloc(size + ___cxa_exception_header_size);
      return ptr + ___cxa_exception_header_size;
    }

  
  function _fmod(x, y) {
      return x % y;
    }function _fmodl() {
  return _fmod.apply(null, arguments)
  }

  function _catopen(name, oflag) {
      // nl_catd catopen (const char *name, int oflag)
      return -1;
    }

  function _catgets(catd, set_id, msg_id, s) {
      // char *catgets (nl_catd catd, int set_id, int msg_id, const char *s)
      return s;
    }

  function __embind_register_float() {
  Module['printErr']('missing function: _embind_register_float'); abort(-1);
  }

  function _time(ptr) {
      var ret = Math.floor(Date.now()/1000);
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret;
      }
      return ret;
    }

  function ___ctype_toupper_loc() {
      // http://refspecs.freestandards.org/LSB_3.1.1/LSB-Core-generic/LSB-Core-generic/libutil---ctype-toupper-loc.html
      var me = ___ctype_toupper_loc;
      if (!me.ret) {
        var values = [
          128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,
          158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,
          188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,
          218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,
          248,249,250,251,252,253,254,-1,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,
          33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,
          73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,
          81,82,83,84,85,86,87,88,89,90,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,
          145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,
          175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,
          205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,
          235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255
        ];
        var i32size = 4;
        var arr = _malloc(values.length * i32size);
        for (var i = 0; i < values.length; i++) {
          HEAP32[(((arr)+(i * i32size))>>2)]=values[i];
        }
        me.ret = allocate([arr + 128 * i32size], 'i32*', ALLOC_NORMAL);
      }
      return me.ret;
    }

  function ___cxa_guard_acquire(variable) {
      if (!HEAP8[((variable)>>0)]) { // ignore SAFE_HEAP stuff because llvm mixes i64 and i8 here
        HEAP8[((variable)>>0)]=1;
        return 1;
      }
      return 0;
    }

  function ___ctype_tolower_loc() {
      // http://refspecs.freestandards.org/LSB_3.1.1/LSB-Core-generic/LSB-Core-generic/libutil---ctype-tolower-loc.html
      var me = ___ctype_tolower_loc;
      if (!me.ret) {
        var values = [
          128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,
          158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,
          188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,
          218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,
          248,249,250,251,252,253,254,-1,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,
          33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,97,98,99,100,101,102,103,
          104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,91,92,93,94,95,96,97,98,99,100,101,102,103,
          104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,
          134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,
          164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,
          194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,
          224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,
          254,255
        ];
        var i32size = 4;
        var arr = _malloc(values.length * i32size);
        for (var i = 0; i < values.length; i++) {
          HEAP32[(((arr)+(i * i32size))>>2)]=values[i];
        }
        me.ret = allocate([arr + 128 * i32size], 'i32*', ALLOC_NORMAL);
      }
      return me.ret;
    }

  function ___cxa_begin_catch(ptr) {
      __ZSt18uncaught_exceptionv.uncaught_exception--;
      ___cxa_caught_exceptions.push(___cxa_last_thrown_exception);
      return ptr;
    }


  function ___cxa_call_unexpected(exception) {
      Module.printErr('Unexpected exception thrown, this is not properly supported - aborting');
      ABORT = true;
      throw exception;
    }

  function __embind_register_std_wstring() {
  Module['printErr']('missing function: _embind_register_std_wstring'); abort(-1);
  }

  function __embind_register_class_constructor() {
  Module['printErr']('missing function: _embind_register_class_constructor'); abort(-1);
  }

  
  
  function __reallyNegative(x) {
      return x < 0 || (x === 0 && (1/x) === -Infinity);
    }function _copysign(a, b) {
      return __reallyNegative(a) === __reallyNegative(b) ? a : -a;
    }function _copysignl() {
  return _copysign.apply(null, arguments)
  }

  function __emval_undefined() {
  Module['printErr']('missing function: _emval_undefined'); abort(-1);
  }

  function __embind_register_class_function() {
  Module['printErr']('missing function: _embind_register_class_function'); abort(-1);
  }

  var __ZTISt9exception=allocate([allocate([1,0,0,0,0,0,0], "i8", ALLOC_STATIC)+8, 0], "i32", ALLOC_STATIC);

  var ___dso_handle=allocate(1, "i32*", ALLOC_STATIC);



FS.staticInit();__ATINIT__.unshift({ func: function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() } });__ATMAIN__.push({ func: function() { FS.ignorePermissions = false } });__ATEXIT__.push({ func: function() { FS.quit() } });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;
___errno_state = Runtime.staticAlloc(4); HEAP32[((___errno_state)>>2)]=0;
__ATINIT__.unshift({ func: function() { TTY.init() } });__ATEXIT__.push({ func: function() { TTY.shutdown() } });TTY.utf8 = new Runtime.UTF8Processor();
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); NODEFS.staticInit(); }
__ATINIT__.push({ func: function() { SOCKFS.root = FS.mount(SOCKFS, {}, null); } });
_fgetc.ret = allocate([0], "i8", ALLOC_STATIC);
Module["requestFullScreen"] = function Module_requestFullScreen(lockPointer, resizeCanvas) { Browser.requestFullScreen(lockPointer, resizeCanvas) };
  Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) { Browser.requestAnimationFrame(func) };
  Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) { Browser.setCanvasSize(width, height, noUpdates) };
  Module["pauseMainLoop"] = function Module_pauseMainLoop() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function Module_resumeMainLoop() { Browser.mainLoop.resume() };
  Module["getUserMedia"] = function Module_getUserMedia() { Browser.getUserMedia() }
STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);

staticSealed = true; // seal the static portion of memory

STACK_MAX = STACK_BASE + 5242880;

DYNAMIC_BASE = DYNAMICTOP = Runtime.alignMemory(STACK_MAX);

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");

 var ctlz_i8 = allocate([8,7,6,6,5,5,5,5,4,4,4,4,4,4,4,4,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_DYNAMIC);
 var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_DYNAMIC);

  var Math_min = Math.min;
function nullFunc_iiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_vid(x) { Module["printErr"]("Invalid function pointer called with signature 'vid'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_vi(x) { Module["printErr"]("Invalid function pointer called with signature 'vi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_vii(x) { Module["printErr"]("Invalid function pointer called with signature 'vii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_ii(x) { Module["printErr"]("Invalid function pointer called with signature 'ii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_iidd(x) { Module["printErr"]("Invalid function pointer called with signature 'iidd'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_iiiiiiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_iiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viiiiiiiiiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiiiiiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viiiiid(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiid'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_di(x) { Module["printErr"]("Invalid function pointer called with signature 'di'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_iiiiddi(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiddi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_iiiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viiiiiid(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiiid'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viiiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viiiiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_iii(x) { Module["printErr"]("Invalid function pointer called with signature 'iii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_iiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_iiiiiddi(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiiddi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_diii(x) { Module["printErr"]("Invalid function pointer called with signature 'diii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_dii(x) { Module["printErr"]("Invalid function pointer called with signature 'dii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_i(x) { Module["printErr"]("Invalid function pointer called with signature 'i'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_iiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viiid(x) { Module["printErr"]("Invalid function pointer called with signature 'viiid'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viii(x) { Module["printErr"]("Invalid function pointer called with signature 'viii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_v(x) { Module["printErr"]("Invalid function pointer called with signature 'v'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viid(x) { Module["printErr"]("Invalid function pointer called with signature 'viid'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_idd(x) { Module["printErr"]("Invalid function pointer called with signature 'idd'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function invoke_iiiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
  try {
    return Module["dynCall_iiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiii(index,a1,a2,a3,a4,a5) {
  try {
    Module["dynCall_viiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vid(index,a1,a2) {
  try {
    Module["dynCall_vid"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vi(index,a1) {
  try {
    Module["dynCall_vi"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vii(index,a1,a2) {
  try {
    Module["dynCall_vii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_ii(index,a1) {
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iidd(index,a1,a2,a3) {
  try {
    return Module["dynCall_iidd"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11) {
  try {
    return Module["dynCall_iiiiiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiiiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15) {
  try {
    Module["dynCall_viiiiiiiiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiid(index,a1,a2,a3,a4,a5,a6) {
  try {
    Module["dynCall_viiiiid"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8) {
  try {
    Module["dynCall_viiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  try {
    Module["dynCall_viiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_di(index,a1) {
  try {
    return Module["dynCall_di"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiiddi(index,a1,a2,a3,a4,a5,a6) {
  try {
    return Module["dynCall_iiiiddi"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8) {
  try {
    return Module["dynCall_iiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
  try {
    Module["dynCall_viiiiiii"](index,a1,a2,a3,a4,a5,a6,a7);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiiid(index,a1,a2,a3,a4,a5,a6,a7) {
  try {
    Module["dynCall_viiiiiid"](index,a1,a2,a3,a4,a5,a6,a7);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9) {
  try {
    Module["dynCall_viiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10) {
  try {
    Module["dynCall_viiiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iii(index,a1,a2) {
  try {
    return Module["dynCall_iii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiiii(index,a1,a2,a3,a4,a5) {
  try {
    return Module["dynCall_iiiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiiiddi(index,a1,a2,a3,a4,a5,a6,a7) {
  try {
    return Module["dynCall_iiiiiddi"](index,a1,a2,a3,a4,a5,a6,a7);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_diii(index,a1,a2,a3) {
  try {
    return Module["dynCall_diii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_dii(index,a1,a2) {
  try {
    return Module["dynCall_dii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_i(index) {
  try {
    return Module["dynCall_i"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiii(index,a1,a2,a3,a4) {
  try {
    return Module["dynCall_iiiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiid(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_viiid"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viii(index,a1,a2,a3) {
  try {
    Module["dynCall_viii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_v(index) {
  try {
    Module["dynCall_v"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viid(index,a1,a2,a3) {
  try {
    Module["dynCall_viid"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_idd(index,a1,a2) {
  try {
    return Module["dynCall_idd"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiii(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_viiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

  function asmPrintInt(x, y) {
    Module.print('int ' + x + ',' + y);// + ' ' + new Error().stack);
  }
  function asmPrintFloat(x, y) {
    Module.print('float ' + x + ',' + y);// + ' ' + new Error().stack);
  }
  // EMSCRIPTEN_START_ASM
  var asm = (function(global, env, buffer) {
    'almost asm';
    var HEAP8 = new global.Int8Array(buffer);
    var HEAP16 = new global.Int16Array(buffer);
    var HEAP32 = new global.Int32Array(buffer);
    var HEAPU8 = new global.Uint8Array(buffer);
    var HEAPU16 = new global.Uint16Array(buffer);
    var HEAPU32 = new global.Uint32Array(buffer);
    var HEAPF32 = new global.Float32Array(buffer);
    var HEAPF64 = new global.Float64Array(buffer);
  
  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var cttz_i8=env.cttz_i8|0;
  var ctlz_i8=env.ctlz_i8|0;
  var __ZTISt9exception=env.__ZTISt9exception|0;
  var ___dso_handle=env.___dso_handle|0;
  var _stderr=env._stderr|0;
  var _stdin=env._stdin|0;
  var _stdout=env._stdout|0;

    var __THREW__ = 0;
    var threwValue = 0;
    var setjmpId = 0;
    var undef = 0;
    var nan = +env.NaN, inf = +env.Infinity;
    var tempInt = 0, tempBigInt = 0, tempBigIntP = 0, tempBigIntS = 0, tempBigIntR = 0.0, tempBigIntI = 0, tempBigIntD = 0, tempValue = 0, tempDouble = 0.0;
  
    var tempRet0 = 0;
    var tempRet1 = 0;
    var tempRet2 = 0;
    var tempRet3 = 0;
    var tempRet4 = 0;
    var tempRet5 = 0;
    var tempRet6 = 0;
    var tempRet7 = 0;
    var tempRet8 = 0;
    var tempRet9 = 0;
  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var abort=env.abort;
  var assert=env.assert;
  var asmPrintInt=env.asmPrintInt;
  var asmPrintFloat=env.asmPrintFloat;
  var Math_min=env.min;
  var jsCall=env.jsCall;
  var nullFunc_iiiiiiii=env.nullFunc_iiiiiiii;
  var nullFunc_viiiii=env.nullFunc_viiiii;
  var nullFunc_vid=env.nullFunc_vid;
  var nullFunc_vi=env.nullFunc_vi;
  var nullFunc_vii=env.nullFunc_vii;
  var nullFunc_ii=env.nullFunc_ii;
  var nullFunc_iidd=env.nullFunc_iidd;
  var nullFunc_iiiiiiiiiiii=env.nullFunc_iiiiiiiiiiii;
  var nullFunc_iiii=env.nullFunc_iiii;
  var nullFunc_viiiiiiiiiiiiiii=env.nullFunc_viiiiiiiiiiiiiii;
  var nullFunc_viiiiid=env.nullFunc_viiiiid;
  var nullFunc_viiiiiiii=env.nullFunc_viiiiiiii;
  var nullFunc_viiiiii=env.nullFunc_viiiiii;
  var nullFunc_di=env.nullFunc_di;
  var nullFunc_iiiiddi=env.nullFunc_iiiiddi;
  var nullFunc_iiiiiiiii=env.nullFunc_iiiiiiiii;
  var nullFunc_viiiiiii=env.nullFunc_viiiiiii;
  var nullFunc_viiiiiid=env.nullFunc_viiiiiid;
  var nullFunc_viiiiiiiii=env.nullFunc_viiiiiiiii;
  var nullFunc_viiiiiiiiii=env.nullFunc_viiiiiiiiii;
  var nullFunc_iii=env.nullFunc_iii;
  var nullFunc_iiiiii=env.nullFunc_iiiiii;
  var nullFunc_iiiiiddi=env.nullFunc_iiiiiddi;
  var nullFunc_diii=env.nullFunc_diii;
  var nullFunc_dii=env.nullFunc_dii;
  var nullFunc_i=env.nullFunc_i;
  var nullFunc_iiiii=env.nullFunc_iiiii;
  var nullFunc_viiid=env.nullFunc_viiid;
  var nullFunc_viii=env.nullFunc_viii;
  var nullFunc_v=env.nullFunc_v;
  var nullFunc_viid=env.nullFunc_viid;
  var nullFunc_idd=env.nullFunc_idd;
  var nullFunc_viiii=env.nullFunc_viiii;
  var invoke_iiiiiiii=env.invoke_iiiiiiii;
  var invoke_viiiii=env.invoke_viiiii;
  var invoke_vid=env.invoke_vid;
  var invoke_vi=env.invoke_vi;
  var invoke_vii=env.invoke_vii;
  var invoke_ii=env.invoke_ii;
  var invoke_iidd=env.invoke_iidd;
  var invoke_iiiiiiiiiiii=env.invoke_iiiiiiiiiiii;
  var invoke_iiii=env.invoke_iiii;
  var invoke_viiiiiiiiiiiiiii=env.invoke_viiiiiiiiiiiiiii;
  var invoke_viiiiid=env.invoke_viiiiid;
  var invoke_viiiiiiii=env.invoke_viiiiiiii;
  var invoke_viiiiii=env.invoke_viiiiii;
  var invoke_di=env.invoke_di;
  var invoke_iiiiddi=env.invoke_iiiiddi;
  var invoke_iiiiiiiii=env.invoke_iiiiiiiii;
  var invoke_viiiiiii=env.invoke_viiiiiii;
  var invoke_viiiiiid=env.invoke_viiiiiid;
  var invoke_viiiiiiiii=env.invoke_viiiiiiiii;
  var invoke_viiiiiiiiii=env.invoke_viiiiiiiiii;
  var invoke_iii=env.invoke_iii;
  var invoke_iiiiii=env.invoke_iiiiii;
  var invoke_iiiiiddi=env.invoke_iiiiiddi;
  var invoke_diii=env.invoke_diii;
  var invoke_dii=env.invoke_dii;
  var invoke_i=env.invoke_i;
  var invoke_iiiii=env.invoke_iiiii;
  var invoke_viiid=env.invoke_viiid;
  var invoke_viii=env.invoke_viii;
  var invoke_v=env.invoke_v;
  var invoke_viid=env.invoke_viid;
  var invoke_idd=env.invoke_idd;
  var invoke_viiii=env.invoke_viiii;
  var _fabs=env._fabs;
  var _fread=env._fread;
  var __ZSt9terminatev=env.__ZSt9terminatev;
  var ___cxa_guard_acquire=env.___cxa_guard_acquire;
  var _fmodl=env._fmodl;
  var __ZSt18uncaught_exceptionv=env.__ZSt18uncaught_exceptionv;
  var ___ctype_toupper_loc=env.___ctype_toupper_loc;
  var __addDays=env.__addDays;
  var _sbrk=env._sbrk;
  var ___cxa_begin_catch=env.___cxa_begin_catch;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var _sysconf=env._sysconf;
  var __embind_register_std_string=env.__embind_register_std_string;
  var __embind_register_class_function=env.__embind_register_class_function;
  var _write=env._write;
  var __isLeapYear=env.__isLeapYear;
  var __embind_register_class_constructor=env.__embind_register_class_constructor;
  var __ZNSt9exceptionD2Ev=env.__ZNSt9exceptionD2Ev;
  var ___cxa_atexit=env.___cxa_atexit;
  var ___cxa_does_inherit=env.___cxa_does_inherit;
  var ___cxa_rethrow=env.___cxa_rethrow;
  var _catclose=env._catclose;
  var _send=env._send;
  var ___cxa_is_number_type=env.___cxa_is_number_type;
  var __embind_register_integer=env.__embind_register_integer;
  var ___cxa_free_exception=env.___cxa_free_exception;
  var ___cxa_find_matching_catch=env.___cxa_find_matching_catch;
  var ___cxa_guard_release=env.___cxa_guard_release;
  var _strerror_r=env._strerror_r;
  var ___setErrNo=env.___setErrNo;
  var _newlocale=env._newlocale;
  var __embind_register_bool=env.__embind_register_bool;
  var ___resumeException=env.___resumeException;
  var _freelocale=env._freelocale;
  var ___cxa_call_unexpected=env.___cxa_call_unexpected;
  var __embind_register_emval=env.__embind_register_emval;
  var __emval_decref=env.__emval_decref;
  var __embind_register_class=env.__embind_register_class;
  var _read=env._read;
  var _fwrite=env._fwrite;
  var _time=env._time;
  var _pthread_mutex_lock=env._pthread_mutex_lock;
  var _catopen=env._catopen;
  var _exit=env._exit;
  var ___cxa_guard_abort=env.___cxa_guard_abort;
  var _llvm_pow_f64=env._llvm_pow_f64;
  var ___ctype_b_loc=env.___ctype_b_loc;
  var _fmod=env._fmod;
  var __emval_incref=env.__emval_incref;
  var ___cxa_allocate_exception=env.___cxa_allocate_exception;
  var __emval_take_value=env.__emval_take_value;
  var _pwrite=env._pwrite;
  var _uselocale=env._uselocale;
  var ___cxa_end_catch=env.___cxa_end_catch;
  var _strftime=env._strftime;
  var _pthread_cond_broadcast=env._pthread_cond_broadcast;
  var _recv=env._recv;
  var _copysign=env._copysign;
  var _abort=env._abort;
  var __emval_undefined=env.__emval_undefined;
  var __embind_register_class_property=env.__embind_register_class_property;
  var _pthread_cond_wait=env._pthread_cond_wait;
  var __embind_register_memory_view=env.__embind_register_memory_view;
  var ___gxx_personality_v0=env.___gxx_personality_v0;
  var _ungetc=env._ungetc;
  var __embind_register_void=env.__embind_register_void;
  var _fflush=env._fflush;
  var _strftime_l=env._strftime_l;
  var __reallyNegative=env.__reallyNegative;
  var _catgets=env._catgets;
  var __embind_register_std_wstring=env.__embind_register_std_wstring;
  var _fileno=env._fileno;
  var __exit=env.__exit;
  var __arraySum=env.__arraySum;
  var ___ctype_tolower_loc=env.___ctype_tolower_loc;
  var _pthread_mutex_unlock=env._pthread_mutex_unlock;
  var _pread=env._pread;
  var _mkport=env._mkport;
  var __embind_register_float=env.__embind_register_float;
  var _getc=env._getc;
  var ___errno_location=env.___errno_location;
  var _fgetc=env._fgetc;
  var ___cxa_throw=env.___cxa_throw;
  var _copysignl=env._copysignl;
  var _strerror=env._strerror;
  var _atexit=env._atexit;
  var _sqrt=env._sqrt;
  var tempFloat = 0.0;

  // EMSCRIPTEN_START_FUNCS
  function stackAlloc(size) {
    size = size|0;
    var ret = 0;
    ret = STACKTOP;
    STACKTOP = (STACKTOP + size)|0;
  STACKTOP = (STACKTOP + 7)&-8;
    return ret|0;
  }
  function stackSave() {
    return STACKTOP|0;
  }
  function stackRestore(top) {
    top = top|0;
    STACKTOP = top;
  }
  function setThrew(threw, value) {
    threw = threw|0;
    value = value|0;
    if ((__THREW__|0) == 0) {
      __THREW__ = threw;
      threwValue = value;
    }
  }
  function copyTempFloat(ptr) {
    ptr = ptr|0;
    HEAP8[tempDoublePtr>>0] = HEAP8[ptr>>0];
    HEAP8[tempDoublePtr+1>>0] = HEAP8[ptr+1>>0];
    HEAP8[tempDoublePtr+2>>0] = HEAP8[ptr+2>>0];
    HEAP8[tempDoublePtr+3>>0] = HEAP8[ptr+3>>0];
  }
  function copyTempDouble(ptr) {
    ptr = ptr|0;
    HEAP8[tempDoublePtr>>0] = HEAP8[ptr>>0];
    HEAP8[tempDoublePtr+1>>0] = HEAP8[ptr+1>>0];
    HEAP8[tempDoublePtr+2>>0] = HEAP8[ptr+2>>0];
    HEAP8[tempDoublePtr+3>>0] = HEAP8[ptr+3>>0];
    HEAP8[tempDoublePtr+4>>0] = HEAP8[ptr+4>>0];
    HEAP8[tempDoublePtr+5>>0] = HEAP8[ptr+5>>0];
    HEAP8[tempDoublePtr+6>>0] = HEAP8[ptr+6>>0];
    HEAP8[tempDoublePtr+7>>0] = HEAP8[ptr+7>>0];
  }
  function setTempRet0(value) {
    value = value|0;
    tempRet0 = value;
  }
  function getTempRet0() {
    return tempRet0|0;
  }
  
function __ZN5Model6UpdateERNSt3__16vectorI11ModelObjectNS0_9allocatorIS2_EEEEd($this,$objects,$time_elapsed) {
 $this = $this|0;
 $objects = $objects|0;
 $time_elapsed = +$time_elapsed;
 var $0 = 0, $1 = 0.0, $2 = 0.0, $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0.0, $or$cond = 0, $simulator$i = 0, $storemerge$i$i = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $simulator$i = sp;
 HEAPF64[$simulator$i>>3] = 0.0100000000000000002082;
 $0 = (($simulator$i) + 8|0);
 HEAPF64[$0>>3] = 10.0;
 $2 = 0.0100000000000000002082;$storemerge$i$i = 0.0;
 while(1) {
  $1 = $time_elapsed - $2;
  $3 = !($storemerge$i$i <= $1);
  if ($3) {
   break;
  }
  __ZN14NBodySimulator18AdvanceAndCallbackERNSt3__16vectorI11ModelObjectNS0_9allocatorIS2_EEEEdPFvS6_E($simulator$i,$objects,$2,378);
  $4 = +HEAPF64[$simulator$i>>3];
  $5 = $storemerge$i$i + $4;
  $2 = $4;$storemerge$i$i = $5;
 }
 $6 = !($storemerge$i$i > $time_elapsed);
 $7 = !($time_elapsed >= 0.0);
 $or$cond = $6 | $7;
 if ($or$cond) {
  STACKTOP = sp;return;
 }
 $8 = $storemerge$i$i - $2;
 __ZN14NBodySimulator18AdvanceAndCallbackERNSt3__16vectorI11ModelObjectNS0_9allocatorIS2_EEEEdPFvS6_E($simulator$i,$objects,$8,378);
 STACKTOP = sp;return;
}
function __ZN5Model14HandleOverlapsERNSt3__16vectorI11ModelObjectNS0_9allocatorIS2_EEEE($objects) {
 $objects = $objects|0;
 var $$pre$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $13$phi = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0.0, $26 = 0, $27 = 0.0, $28 = 0, $29 = 0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0.0, $42 = 0.0;
 var $43 = 0, $44 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $circle_left$i$sroa$0 = 0, $circle_right$i$sroa$0 = 0, $i$sroa$0$0 = 0, $j$sroa$0$0 = 0, $storemerge$i$i$i = 0, $sum$i$i$i$0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $0 = sp + 80|0;
 $1 = sp + 48|0;
 $circle_left$i$sroa$0 = sp + 24|0;
 $circle_right$i$sroa$0 = sp;
 $2 = (($objects) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$objects>>2]|0;
 $5 = $3;
 $6 = $4;
 $7 = (($5) - ($6))|0;
 $8 = (($7|0) / 96)&-1;
 $9 = ($8>>>0)<(2);
 if ($9) {
  STACKTOP = sp;return;
 }
 $10 = (($1) + 24|0);
 $11 = (($0) + 24|0);
 $13 = $3;$i$sroa$0$0 = $4;
 L4: while(1) {
  $12 = ($i$sroa$0$0|0)==($13|0);
  if ($12) {
   break;
  }
  $14 = (($i$sroa$0$0) + 92|0);
  $15 = HEAP8[$14>>0]|0;
  $16 = $15 & 1;
  $17 = ($16<<24>>24)==(0);
  $18 = (($i$sroa$0$0) + 96|0);
  if (!($17)) {
   $13$phi = $13;$i$sroa$0$0 = $18;$13 = $13$phi;
   continue;
  }
  $19 = (($i$sroa$0$0) + 80|0);
  $j$sroa$0$0 = $18;
  while(1) {
   $20 = ($j$sroa$0$0|0)==($13|0);
   if ($20) {
    $13$phi = $13;$i$sroa$0$0 = $18;$13 = $13$phi;
    continue L4;
   }
   $21 = (($j$sroa$0$0) + 92|0);
   $22 = HEAP8[$21>>0]|0;
   $23 = $22 & 1;
   $24 = ($23<<24>>24)==(0);
   if ($24) {
    ;HEAP32[$circle_left$i$sroa$0+0>>2]=HEAP32[$i$sroa$0$0+0>>2]|0;HEAP32[$circle_left$i$sroa$0+4>>2]=HEAP32[$i$sroa$0$0+4>>2]|0;HEAP32[$circle_left$i$sroa$0+8>>2]=HEAP32[$i$sroa$0$0+8>>2]|0;HEAP32[$circle_left$i$sroa$0+12>>2]=HEAP32[$i$sroa$0$0+12>>2]|0;HEAP32[$circle_left$i$sroa$0+16>>2]=HEAP32[$i$sroa$0$0+16>>2]|0;HEAP32[$circle_left$i$sroa$0+20>>2]=HEAP32[$i$sroa$0$0+20>>2]|0;
    $25 = +HEAPF64[$19>>3];
    ;HEAP32[$circle_right$i$sroa$0+0>>2]=HEAP32[$j$sroa$0$0+0>>2]|0;HEAP32[$circle_right$i$sroa$0+4>>2]=HEAP32[$j$sroa$0$0+4>>2]|0;HEAP32[$circle_right$i$sroa$0+8>>2]=HEAP32[$j$sroa$0$0+8>>2]|0;HEAP32[$circle_right$i$sroa$0+12>>2]=HEAP32[$j$sroa$0$0+12>>2]|0;HEAP32[$circle_right$i$sroa$0+16>>2]=HEAP32[$j$sroa$0$0+16>>2]|0;HEAP32[$circle_right$i$sroa$0+20>>2]=HEAP32[$j$sroa$0$0+20>>2]|0;
    $26 = (($j$sroa$0$0) + 80|0);
    $27 = +HEAPF64[$26>>3];
    ;HEAP32[$1+0>>2]=HEAP32[$circle_left$i$sroa$0+0>>2]|0;HEAP32[$1+4>>2]=HEAP32[$circle_left$i$sroa$0+4>>2]|0;HEAP32[$1+8>>2]=HEAP32[$circle_left$i$sroa$0+8>>2]|0;HEAP32[$1+12>>2]=HEAP32[$circle_left$i$sroa$0+12>>2]|0;HEAP32[$1+16>>2]=HEAP32[$circle_left$i$sroa$0+16>>2]|0;HEAP32[$1+20>>2]=HEAP32[$circle_left$i$sroa$0+20>>2]|0;
    HEAPF64[$10>>3] = $25;
    ;HEAP32[$0+0>>2]=HEAP32[$circle_right$i$sroa$0+0>>2]|0;HEAP32[$0+4>>2]=HEAP32[$circle_right$i$sroa$0+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$circle_right$i$sroa$0+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$circle_right$i$sroa$0+12>>2]|0;HEAP32[$0+16>>2]=HEAP32[$circle_right$i$sroa$0+16>>2]|0;HEAP32[$0+20>>2]=HEAP32[$circle_right$i$sroa$0+20>>2]|0;
    HEAPF64[$11>>3] = $27;
    $storemerge$i$i$i = 0;$sum$i$i$i$0 = 0.0;
    while(1) {
     $28 = ($storemerge$i$i$i|0)<(3);
     if (!($28)) {
      break;
     }
     $29 = (($1) + ($storemerge$i$i$i<<3)|0);
     $30 = +HEAPF64[$29>>3];
     $31 = (($0) + ($storemerge$i$i$i<<3)|0);
     $32 = +HEAPF64[$31>>3];
     $33 = $30 * $30;
     $34 = $30 * 2.0;
     $35 = $34 * $32;
     $36 = $33 - $35;
     $37 = $32 * $32;
     $38 = $36 + $37;
     $39 = $sum$i$i$i$0 + $38;
     $40 = (($storemerge$i$i$i) + 1)|0;
     $storemerge$i$i$i = $40;$sum$i$i$i$0 = $39;
    }
    $41 = (+Math_sqrt((+$sum$i$i$i$0)));
    $42 = $25 + $27;
    $43 = !($41 <= $42);
    if (!($43)) {
     break;
    }
   }
   $44 = (($j$sroa$0$0) + 96|0);
   $j$sroa$0$0 = $44;
  }
  HEAP8[$14>>0] = 1;
  HEAP8[$21>>0] = 1;
  $$pre$pre = HEAP32[$2>>2]|0;
  $13 = $$pre$pre;$i$sroa$0$0 = $18;
 }
 STACKTOP = sp;return;
}
function __ZNK11ModelObject8positionEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result+0>>2]=HEAP32[$this+0>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$this+4>>2]|0;HEAP32[$agg$result+8>>2]=HEAP32[$this+8>>2]|0;HEAP32[$agg$result+12>>2]=HEAP32[$this+12>>2]|0;HEAP32[$agg$result+16>>2]=HEAP32[$this+16>>2]|0;HEAP32[$agg$result+20>>2]=HEAP32[$this+20>>2]|0;
 STACKTOP = sp;return;
}
function __ZNK11ModelObject8velocityEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 24|0);
 ;HEAP32[$agg$result+0>>2]=HEAP32[$0+0>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$0+4>>2]|0;HEAP32[$agg$result+8>>2]=HEAP32[$0+8>>2]|0;HEAP32[$agg$result+12>>2]=HEAP32[$0+12>>2]|0;HEAP32[$agg$result+16>>2]=HEAP32[$0+16>>2]|0;HEAP32[$agg$result+20>>2]=HEAP32[$0+20>>2]|0;
 STACKTOP = sp;return;
}
function __ZNK11ModelObject5forceEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 48|0);
 ;HEAP32[$agg$result+0>>2]=HEAP32[$0+0>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$0+4>>2]|0;HEAP32[$agg$result+8>>2]=HEAP32[$0+8>>2]|0;HEAP32[$agg$result+12>>2]=HEAP32[$0+12>>2]|0;HEAP32[$agg$result+16>>2]=HEAP32[$0+16>>2]|0;HEAP32[$agg$result+20>>2]=HEAP32[$0+20>>2]|0;
 STACKTOP = sp;return;
}
function __ZNK11ModelObject4massEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 72|0);
 $1 = +HEAPF64[$0>>3];
 STACKTOP = sp;return (+$1);
}
function __ZNK11ModelObject5indexEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 88|0);
 $1 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($1|0);
}
function __ZNK11ModelObject6isDeadEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 92|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)!=(0);
 STACKTOP = sp;return ($3|0);
}
function __ZN11ModelObject12set_positionE7NVectorIdLi3EE($this,$position) {
 $this = $this|0;
 $position = $position|0;
 var $0 = 0.0, $1 = 0, $2 = 0.0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = +HEAPF64[$position>>3];
 HEAPF64[$this>>3] = $0;
 $1 = (($position) + 8|0);
 $2 = +HEAPF64[$1>>3];
 $3 = (($this) + 8|0);
 HEAPF64[$3>>3] = $2;
 STACKTOP = sp;return;
}
function __ZN7NVectorIdLi3EE4setXEd($this,$x) {
 $this = $this|0;
 $x = +$x;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[$this>>3] = $x;
 STACKTOP = sp;return;
}
function __ZNK7NVectorIdLi3EE1xEv($this) {
 $this = $this|0;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = +HEAPF64[$this>>3];
 STACKTOP = sp;return (+$0);
}
function __ZN7NVectorIdLi3EE4setYEd($this,$y) {
 $this = $this|0;
 $y = +$y;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 HEAPF64[$0>>3] = $y;
 STACKTOP = sp;return;
}
function __ZNK7NVectorIdLi3EE1yEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 $1 = +HEAPF64[$0>>3];
 STACKTOP = sp;return (+$1);
}
function __ZN11ModelObject12set_velocityE7NVectorIdLi3EE($this,$velocity) {
 $this = $this|0;
 $velocity = $velocity|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 24|0);
 ;HEAP32[$0+0>>2]=HEAP32[$velocity+0>>2]|0;HEAP32[$0+4>>2]=HEAP32[$velocity+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$velocity+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$velocity+12>>2]|0;HEAP32[$0+16>>2]=HEAP32[$velocity+16>>2]|0;HEAP32[$0+20>>2]=HEAP32[$velocity+20>>2]|0;
 STACKTOP = sp;return;
}
function __ZN11ModelObject9set_forceE7NVectorIdLi3EE($this,$force) {
 $this = $this|0;
 $force = $force|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 48|0);
 ;HEAP32[$0+0>>2]=HEAP32[$force+0>>2]|0;HEAP32[$0+4>>2]=HEAP32[$force+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$force+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$force+12>>2]|0;HEAP32[$0+16>>2]=HEAP32[$force+16>>2]|0;HEAP32[$0+20>>2]=HEAP32[$force+20>>2]|0;
 STACKTOP = sp;return;
}
function __ZN11ModelObject8set_massEd($this,$mass) {
 $this = $this|0;
 $mass = +$mass;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 72|0);
 HEAPF64[$0>>3] = $mass;
 STACKTOP = sp;return;
}
function __ZN11ModelObject9set_indexEi($this,$index) {
 $this = $this|0;
 $index = $index|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 88|0);
 HEAP32[$0>>2] = $index;
 STACKTOP = sp;return;
}
function __ZN11ModelObject4killEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 92|0);
 HEAP8[$0>>0] = 1;
 STACKTOP = sp;return;
}
function __ZN14NBodySimulator18AdvanceAndCallbackERNSt3__16vectorI11ModelObjectNS0_9allocatorIS2_EEEEdPFvS6_E($this,$bodies,$time,$call_back) {
 $this = $this|0;
 $bodies = $bodies|0;
 $time = +$time;
 $call_back = $call_back|0;
 var $$pre = 0, $$pre15 = 0, $$sroa$05 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0.0, $101 = 0, $102 = 0, $103 = 0, $104 = 0.0, $105 = 0.0, $106 = 0, $107 = 0, $108 = 0, $109 = 0.0, $11 = 0, $110 = 0, $111 = 0.0, $112 = 0.0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0.0, $117 = 0.0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0.0, $122 = 0, $123 = 0.0, $124 = 0.0, $125 = 0, $126 = 0, $127 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0, $26 = 0.0, $27 = 0.0, $28 = 0, $29 = 0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0.0, $33 = 0.0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0, $46 = 0, $47 = 0.0, $48 = 0.0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0.0;
 var $53 = 0, $54 = 0.0, $55 = 0.0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0, $63 = 0, $64 = 0, $65 = 0.0, $66 = 0, $67 = 0.0, $68 = 0.0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0.0, $75 = 0, $76 = 0, $77 = 0.0, $78 = 0.0, $79 = 0, $8 = 0, $80 = 0, $81 = 0.0, $82 = 0.0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0.0, $88 = 0.0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0.0, $93 = 0, $94 = 0.0, $95 = 0.0, $96 = 0, $97 = 0, $98 = 0, $99 = 0.0, $acceleration$i = 0, $direction$i$i$i = 0, $force$i$i = 0, $i$i$sroa$0$0 = 0, $i$i1$sroa$0$0 = 0, $i$sroa$0$0 = 0, $j$i$sroa$0$0 = 0, $m1$i$i$sroa$1 = 0, $m2$i$i$sroa$1 = 0;
 var $pow2$i = 0.0, $storemerge$i$i = 0, $storemerge$i$i$i = 0, $storemerge$i$i$i$i = 0, $storemerge$i$i$i$i$i = 0, $storemerge$i$i11$i = 0, $storemerge$i$i14$i$i = 0, $storemerge$i$i17$i = 0, $storemerge$i$i2$i = 0, $storemerge$i$i2$i$i$i = 0, $storemerge$i$i3$i$i = 0, $storemerge$i$i7$i$i = 0, $storemerge$i$i8$i = 0, $storemerge$i14$i = 0, $storemerge$i5$i = 0, $sum$i$i$i$i$0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0;
 $acceleration$i = sp + 320|0;
 $0 = sp + 296|0;
 $1 = sp + 272|0;
 $2 = sp + 248|0;
 $3 = sp + 224|0;
 $direction$i$i$i = sp + 200|0;
 $4 = sp + 168|0;
 $m1$i$i$sroa$1 = sp + 144|0;
 $m2$i$i$sroa$1 = sp + 120|0;
 $force$i$i = sp + 96|0;
 $5 = sp + 72|0;
 $6 = sp + 48|0;
 $$sroa$05 = sp + 24|0;
 $7 = sp;
 $8 = HEAP32[$bodies>>2]|0;
 $9 = (($bodies) + 4|0);
 $i$i$sroa$0$0 = $8;
 while(1) {
  $10 = HEAP32[$9>>2]|0;
  $11 = ($i$i$sroa$0$0|0)==($10|0);
  if ($11) {
   break;
  }
  $12 = (($i$i$sroa$0$0) + 48|0);
  $13 = (($i$i$sroa$0$0) + 96|0);
  ;HEAP32[$12+0>>2]=0|0;HEAP32[$12+4>>2]=0|0;HEAP32[$12+8>>2]=0|0;HEAP32[$12+12>>2]=0|0;HEAP32[$12+16>>2]=0|0;HEAP32[$12+20>>2]=0|0;
  $i$i$sroa$0$0 = $13;
 }
 $14 = HEAP32[$bodies>>2]|0;
 $15 = (($this) + 8|0);
 $16 = (($4) + 8|0);
 $18 = $i$i$sroa$0$0;$i$i1$sroa$0$0 = $14;
 L5: while(1) {
  $17 = ($i$i1$sroa$0$0|0)==($18|0);
  if ($17) {
   break;
  }
  $19 = (($i$i1$sroa$0$0) + 96|0);
  $20 = (($i$i1$sroa$0$0) + 72|0);
  $21 = (($i$i1$sroa$0$0) + 48|0);
  $23 = $18;$j$i$sroa$0$0 = $19;
  while(1) {
   $22 = ($j$i$sroa$0$0|0)==($23|0);
   if ($22) {
    $18 = $23;$i$i1$sroa$0$0 = $19;
    continue L5;
   }
   $24 = +HEAPF64[$20>>3];
   ;HEAP32[$m1$i$i$sroa$1+0>>2]=HEAP32[$i$i1$sroa$0$0+0>>2]|0;HEAP32[$m1$i$i$sroa$1+4>>2]=HEAP32[$i$i1$sroa$0$0+4>>2]|0;HEAP32[$m1$i$i$sroa$1+8>>2]=HEAP32[$i$i1$sroa$0$0+8>>2]|0;HEAP32[$m1$i$i$sroa$1+12>>2]=HEAP32[$i$i1$sroa$0$0+12>>2]|0;HEAP32[$m1$i$i$sroa$1+16>>2]=HEAP32[$i$i1$sroa$0$0+16>>2]|0;HEAP32[$m1$i$i$sroa$1+20>>2]=HEAP32[$i$i1$sroa$0$0+20>>2]|0;
   $25 = (($j$i$sroa$0$0) + 72|0);
   $26 = +HEAPF64[$25>>3];
   ;HEAP32[$m2$i$i$sroa$1+0>>2]=HEAP32[$j$i$sroa$0$0+0>>2]|0;HEAP32[$m2$i$i$sroa$1+4>>2]=HEAP32[$j$i$sroa$0$0+4>>2]|0;HEAP32[$m2$i$i$sroa$1+8>>2]=HEAP32[$j$i$sroa$0$0+8>>2]|0;HEAP32[$m2$i$i$sroa$1+12>>2]=HEAP32[$j$i$sroa$0$0+12>>2]|0;HEAP32[$m2$i$i$sroa$1+16>>2]=HEAP32[$j$i$sroa$0$0+16>>2]|0;HEAP32[$m2$i$i$sroa$1+20>>2]=HEAP32[$j$i$sroa$0$0+20>>2]|0;
   $27 = +HEAPF64[$15>>3];
   HEAPF64[$4>>3] = $24;
   ;HEAP32[$16+0>>2]=HEAP32[$m1$i$i$sroa$1+0>>2]|0;HEAP32[$16+4>>2]=HEAP32[$m1$i$i$sroa$1+4>>2]|0;HEAP32[$16+8>>2]=HEAP32[$m1$i$i$sroa$1+8>>2]|0;HEAP32[$16+12>>2]=HEAP32[$m1$i$i$sroa$1+12>>2]|0;HEAP32[$16+16>>2]=HEAP32[$m1$i$i$sroa$1+16>>2]|0;HEAP32[$16+20>>2]=HEAP32[$m1$i$i$sroa$1+20>>2]|0;
   ;HEAP32[$direction$i$i$i+0>>2]=HEAP32[$m2$i$i$sroa$1+0>>2]|0;HEAP32[$direction$i$i$i+4>>2]=HEAP32[$m2$i$i$sroa$1+4>>2]|0;HEAP32[$direction$i$i$i+8>>2]=HEAP32[$m2$i$i$sroa$1+8>>2]|0;HEAP32[$direction$i$i$i+12>>2]=HEAP32[$m2$i$i$sroa$1+12>>2]|0;HEAP32[$direction$i$i$i+16>>2]=HEAP32[$m2$i$i$sroa$1+16>>2]|0;HEAP32[$direction$i$i$i+20>>2]=HEAP32[$m2$i$i$sroa$1+20>>2]|0;
   $storemerge$i$i$i$i$i = 0;
   while(1) {
    $28 = ($storemerge$i$i$i$i$i|0)<(3);
    if (!($28)) {
     $storemerge$i$i14$i$i = 0;$sum$i$i$i$i$0 = 0.0;
     break;
    }
    $29 = ((($4) + ($storemerge$i$i$i$i$i<<3)|0) + 8|0);
    $30 = +HEAPF64[$29>>3];
    $31 = (($direction$i$i$i) + ($storemerge$i$i$i$i$i<<3)|0);
    $32 = +HEAPF64[$31>>3];
    $33 = $32 - $30;
    HEAPF64[$31>>3] = $33;
    $34 = (($storemerge$i$i$i$i$i) + 1)|0;
    $storemerge$i$i$i$i$i = $34;
   }
   while(1) {
    $35 = ($storemerge$i$i14$i$i|0)<(3);
    if (!($35)) {
     break;
    }
    $36 = (($direction$i$i$i) + ($storemerge$i$i14$i$i<<3)|0);
    $37 = +HEAPF64[$36>>3];
    $38 = $37 * $37;
    $39 = $sum$i$i$i$i$0 + $38;
    $40 = (($storemerge$i$i14$i$i) + 1)|0;
    $storemerge$i$i14$i$i = $40;$sum$i$i$i$i$0 = $39;
   }
   $41 = (+Math_pow((+$sum$i$i$i$i$0),1.5));
   $42 = $27 * $24;
   $43 = $42 * $26;
   $44 = $43 / $41;
   ;HEAP32[$force$i$i+0>>2]=HEAP32[$direction$i$i$i+0>>2]|0;HEAP32[$force$i$i+4>>2]=HEAP32[$direction$i$i$i+4>>2]|0;HEAP32[$force$i$i+8>>2]=HEAP32[$direction$i$i$i+8>>2]|0;HEAP32[$force$i$i+12>>2]=HEAP32[$direction$i$i$i+12>>2]|0;HEAP32[$force$i$i+16>>2]=HEAP32[$direction$i$i$i+16>>2]|0;HEAP32[$force$i$i+20>>2]=HEAP32[$direction$i$i$i+20>>2]|0;
   $storemerge$i$i2$i$i$i = 0;
   while(1) {
    $45 = ($storemerge$i$i2$i$i$i|0)<(3);
    if (!($45)) {
     break;
    }
    $46 = (($force$i$i) + ($storemerge$i$i2$i$i$i<<3)|0);
    $47 = +HEAPF64[$46>>3];
    $48 = $47 * $44;
    HEAPF64[$46>>3] = $48;
    $49 = (($storemerge$i$i2$i$i$i) + 1)|0;
    $storemerge$i$i2$i$i$i = $49;
   }
   _memmove(($5|0),($21|0),24)|0;
   $storemerge$i$i7$i$i = 0;
   while(1) {
    $50 = ($storemerge$i$i7$i$i|0)<(3);
    if (!($50)) {
     break;
    }
    $51 = (($force$i$i) + ($storemerge$i$i7$i$i<<3)|0);
    $52 = +HEAPF64[$51>>3];
    $53 = (($5) + ($storemerge$i$i7$i$i<<3)|0);
    $54 = +HEAPF64[$53>>3];
    $55 = $54 + $52;
    HEAPF64[$53>>3] = $55;
    $56 = (($storemerge$i$i7$i$i) + 1)|0;
    $storemerge$i$i7$i$i = $56;
   }
   _memmove(($21|0),($5|0),24)|0;
   $57 = (($j$i$sroa$0$0) + 48|0);
   ;HEAP32[$$sroa$05+0>>2]=HEAP32[$57+0>>2]|0;HEAP32[$$sroa$05+4>>2]=HEAP32[$57+4>>2]|0;HEAP32[$$sroa$05+8>>2]=HEAP32[$57+8>>2]|0;HEAP32[$$sroa$05+12>>2]=HEAP32[$57+12>>2]|0;HEAP32[$$sroa$05+16>>2]=HEAP32[$57+16>>2]|0;HEAP32[$$sroa$05+20>>2]=HEAP32[$57+20>>2]|0;
   ;HEAP32[$7+0>>2]=HEAP32[$force$i$i+0>>2]|0;HEAP32[$7+4>>2]=HEAP32[$force$i$i+4>>2]|0;HEAP32[$7+8>>2]=HEAP32[$force$i$i+8>>2]|0;HEAP32[$7+12>>2]=HEAP32[$force$i$i+12>>2]|0;HEAP32[$7+16>>2]=HEAP32[$force$i$i+16>>2]|0;HEAP32[$7+20>>2]=HEAP32[$force$i$i+20>>2]|0;
   $storemerge$i$i3$i$i = 0;
   while(1) {
    $58 = ($storemerge$i$i3$i$i|0)<(3);
    if (!($58)) {
     break;
    }
    $59 = (($7) + ($storemerge$i$i3$i$i<<3)|0);
    $60 = +HEAPF64[$59>>3];
    $61 = $60 * -1.0;
    HEAPF64[$59>>3] = $61;
    $62 = (($storemerge$i$i3$i$i) + 1)|0;
    $storemerge$i$i3$i$i = $62;
   }
   ;HEAP32[$6+0>>2]=HEAP32[$$sroa$05+0>>2]|0;HEAP32[$6+4>>2]=HEAP32[$$sroa$05+4>>2]|0;HEAP32[$6+8>>2]=HEAP32[$$sroa$05+8>>2]|0;HEAP32[$6+12>>2]=HEAP32[$$sroa$05+12>>2]|0;HEAP32[$6+16>>2]=HEAP32[$$sroa$05+16>>2]|0;HEAP32[$6+20>>2]=HEAP32[$$sroa$05+20>>2]|0;
   $storemerge$i$i$i$i = 0;
   while(1) {
    $63 = ($storemerge$i$i$i$i|0)<(3);
    if (!($63)) {
     break;
    }
    $64 = (($7) + ($storemerge$i$i$i$i<<3)|0);
    $65 = +HEAPF64[$64>>3];
    $66 = (($6) + ($storemerge$i$i$i$i<<3)|0);
    $67 = +HEAPF64[$66>>3];
    $68 = $67 + $65;
    HEAPF64[$66>>3] = $68;
    $69 = (($storemerge$i$i$i$i) + 1)|0;
    $storemerge$i$i$i$i = $69;
   }
   _memmove(($57|0),($6|0),24)|0;
   $70 = (($j$i$sroa$0$0) + 96|0);
   $$pre15 = HEAP32[$9>>2]|0;
   $23 = $$pre15;$j$i$sroa$0$0 = $70;
  }
 }
 $71 = HEAP32[$bodies>>2]|0;
 $73 = $18;$i$sroa$0$0 = $71;
 while(1) {
  $72 = ($i$sroa$0$0|0)==($73|0);
  if ($72) {
   break;
  }
  $74 = +HEAPF64[$this>>3];
  $75 = (($i$sroa$0$0) + 48|0);
  $76 = (($i$sroa$0$0) + 72|0);
  $77 = +HEAPF64[$76>>3];
  $78 = 1.0 / $77;
  ;HEAP32[$acceleration$i+0>>2]=HEAP32[$75+0>>2]|0;HEAP32[$acceleration$i+4>>2]=HEAP32[$75+4>>2]|0;HEAP32[$acceleration$i+8>>2]=HEAP32[$75+8>>2]|0;HEAP32[$acceleration$i+12>>2]=HEAP32[$75+12>>2]|0;HEAP32[$acceleration$i+16>>2]=HEAP32[$75+16>>2]|0;HEAP32[$acceleration$i+20>>2]=HEAP32[$75+20>>2]|0;
  $storemerge$i$i$i = 0;
  while(1) {
   $79 = ($storemerge$i$i$i|0)<(3);
   if (!($79)) {
    break;
   }
   $80 = (($acceleration$i) + ($storemerge$i$i$i<<3)|0);
   $81 = +HEAPF64[$80>>3];
   $82 = $81 * $78;
   HEAPF64[$80>>3] = $82;
   $83 = (($storemerge$i$i$i) + 1)|0;
   $storemerge$i$i$i = $83;
  }
  $84 = (($i$sroa$0$0) + 24|0);
  ;HEAP32[$0+0>>2]=HEAP32[$84+0>>2]|0;HEAP32[$0+4>>2]=HEAP32[$84+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$84+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$84+12>>2]|0;HEAP32[$0+16>>2]=HEAP32[$84+16>>2]|0;HEAP32[$0+20>>2]=HEAP32[$84+20>>2]|0;
  $storemerge$i$i17$i = 0;
  while(1) {
   $85 = ($storemerge$i$i17$i|0)<(3);
   if (!($85)) {
    $storemerge$i14$i = 0;
    break;
   }
   $86 = (($0) + ($storemerge$i$i17$i<<3)|0);
   $87 = +HEAPF64[$86>>3];
   $88 = $87 * $74;
   HEAPF64[$86>>3] = $88;
   $89 = (($storemerge$i$i17$i) + 1)|0;
   $storemerge$i$i17$i = $89;
  }
  while(1) {
   $90 = ($storemerge$i14$i|0)<(3);
   if (!($90)) {
    break;
   }
   $91 = (($0) + ($storemerge$i14$i<<3)|0);
   $92 = +HEAPF64[$91>>3];
   $93 = (($i$sroa$0$0) + ($storemerge$i14$i<<3)|0);
   $94 = +HEAPF64[$93>>3];
   $95 = $94 + $92;
   HEAPF64[$93>>3] = $95;
   $96 = (($storemerge$i14$i) + 1)|0;
   $storemerge$i14$i = $96;
  }
  ;HEAP32[$2+0>>2]=HEAP32[$acceleration$i+0>>2]|0;HEAP32[$2+4>>2]=HEAP32[$acceleration$i+4>>2]|0;HEAP32[$2+8>>2]=HEAP32[$acceleration$i+8>>2]|0;HEAP32[$2+12>>2]=HEAP32[$acceleration$i+12>>2]|0;HEAP32[$2+16>>2]=HEAP32[$acceleration$i+16>>2]|0;HEAP32[$2+20>>2]=HEAP32[$acceleration$i+20>>2]|0;
  $storemerge$i$i11$i = 0;
  while(1) {
   $97 = ($storemerge$i$i11$i|0)<(3);
   if (!($97)) {
    break;
   }
   $98 = (($2) + ($storemerge$i$i11$i<<3)|0);
   $99 = +HEAPF64[$98>>3];
   $100 = $99 * 0.5;
   HEAPF64[$98>>3] = $100;
   $101 = (($storemerge$i$i11$i) + 1)|0;
   $storemerge$i$i11$i = $101;
  }
  $pow2$i = $74 * $74;
  ;HEAP32[$1+0>>2]=HEAP32[$2+0>>2]|0;HEAP32[$1+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$1+8>>2]=HEAP32[$2+8>>2]|0;HEAP32[$1+12>>2]=HEAP32[$2+12>>2]|0;HEAP32[$1+16>>2]=HEAP32[$2+16>>2]|0;HEAP32[$1+20>>2]=HEAP32[$2+20>>2]|0;
  $storemerge$i$i8$i = 0;
  while(1) {
   $102 = ($storemerge$i$i8$i|0)<(3);
   if (!($102)) {
    $storemerge$i5$i = 0;
    break;
   }
   $103 = (($1) + ($storemerge$i$i8$i<<3)|0);
   $104 = +HEAPF64[$103>>3];
   $105 = $104 * $pow2$i;
   HEAPF64[$103>>3] = $105;
   $106 = (($storemerge$i$i8$i) + 1)|0;
   $storemerge$i$i8$i = $106;
  }
  while(1) {
   $107 = ($storemerge$i5$i|0)<(3);
   if (!($107)) {
    break;
   }
   $108 = (($1) + ($storemerge$i5$i<<3)|0);
   $109 = +HEAPF64[$108>>3];
   $110 = (($i$sroa$0$0) + ($storemerge$i5$i<<3)|0);
   $111 = +HEAPF64[$110>>3];
   $112 = $111 + $109;
   HEAPF64[$110>>3] = $112;
   $113 = (($storemerge$i5$i) + 1)|0;
   $storemerge$i5$i = $113;
  }
  ;HEAP32[$3+0>>2]=HEAP32[$acceleration$i+0>>2]|0;HEAP32[$3+4>>2]=HEAP32[$acceleration$i+4>>2]|0;HEAP32[$3+8>>2]=HEAP32[$acceleration$i+8>>2]|0;HEAP32[$3+12>>2]=HEAP32[$acceleration$i+12>>2]|0;HEAP32[$3+16>>2]=HEAP32[$acceleration$i+16>>2]|0;HEAP32[$3+20>>2]=HEAP32[$acceleration$i+20>>2]|0;
  $storemerge$i$i2$i = 0;
  while(1) {
   $114 = ($storemerge$i$i2$i|0)<(3);
   if (!($114)) {
    $storemerge$i$i = 0;
    break;
   }
   $115 = (($3) + ($storemerge$i$i2$i<<3)|0);
   $116 = +HEAPF64[$115>>3];
   $117 = $116 * $74;
   HEAPF64[$115>>3] = $117;
   $118 = (($storemerge$i$i2$i) + 1)|0;
   $storemerge$i$i2$i = $118;
  }
  while(1) {
   $119 = ($storemerge$i$i|0)<(3);
   if (!($119)) {
    break;
   }
   $120 = (($3) + ($storemerge$i$i<<3)|0);
   $121 = +HEAPF64[$120>>3];
   $122 = ((($i$sroa$0$0) + ($storemerge$i$i<<3)|0) + 24|0);
   $123 = +HEAPF64[$122>>3];
   $124 = $123 + $121;
   HEAPF64[$122>>3] = $124;
   $125 = (($storemerge$i$i) + 1)|0;
   $storemerge$i$i = $125;
  }
  $126 = (($i$sroa$0$0) + 96|0);
  $$pre = HEAP32[$9>>2]|0;
  $73 = $$pre;$i$sroa$0$0 = $126;
 }
 $127 = ($call_back|0)==(0|0);
 if ($127) {
  STACKTOP = sp;return;
 }
 FUNCTION_TABLE_vi[$call_back & 511]($bodies);
 STACKTOP = sp;return;
}
function __ZN10emscripten8internal13MethodInvokerIM5ModelFvRNSt3__16vectorI11ModelObjectNS3_9allocatorIS5_EEEEdEvPS2_JS9_dEE6invokeERKSB_SC_PS8_d($method,$wireThis,$args,$args1) {
 $method = $method|0;
 $wireThis = $wireThis|0;
 $args = $args|0;
 $args1 = +$args1;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$field = HEAPU8[$method>>0]|(HEAPU8[$method+1>>0]<<8)|(HEAPU8[$method+2>>0]<<16)|(HEAPU8[$method+3>>0]<<24);
 $$index1 = (($method) + 4|0);
 $$field2 = HEAPU8[$$index1>>0]|(HEAPU8[$$index1+1>>0]<<8)|(HEAPU8[$$index1+2>>0]<<16)|(HEAPU8[$$index1+3>>0]<<24);
 $0 = $$field2 >> 1;
 $1 = (($wireThis) + ($0)|0);
 $2 = $$field2 & 1;
 $3 = ($2|0)==(0);
 if ($3) {
  $7 = $$field;
  $8 = $7;
  FUNCTION_TABLE_viid[$8 & 511]($1,$args,$args1);
  STACKTOP = sp;return;
 } else {
  $4 = HEAP32[$1>>2]|0;
  $5 = (($4) + ($$field)|0);
  $6 = HEAP32[$5>>2]|0;
  $8 = $6;
  FUNCTION_TABLE_viid[$8 & 511]($1,$args,$args1);
  STACKTOP = sp;return;
 }
}
function __ZN10emscripten8internal12operator_newI5ModelJEEEPT_DpT0_() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $lpad$phi$i$index = 0, $lpad$phi$i$index2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 while(1) {
  $0 = (_malloc(1)|0);
  $1 = ($0|0)==(0|0);
  if (!($1)) {
   label = 12;
   break;
  }
  $2 = HEAP32[15648>>2]|0;HEAP32[15648>>2] = (($2+0)|0);
  $3 = ($2|0)==(0);
  if ($3) {
   label = 9;
   break;
  }
  $4 = $2;
  __THREW__ = 0;
  invoke_v($4|0);
  $5 = __THREW__; __THREW__ = 0;
  $6 = $5&1;
  if ($6) {
   label = 5;
   break;
  }
 }
 do {
  if ((label|0) == 5) {
   $7 = ___cxa_find_matching_catch(-1,-1,15712|0)|0;
   $8 = tempRet0;
   $lpad$phi$i$index = $7;$lpad$phi$i$index2 = $8;
  }
  else if ((label|0) == 9) {
   $12 = (___cxa_allocate_exception(4)|0);
   HEAP32[$12>>2] = ((15656 + 8|0));
   __THREW__ = 0;
   invoke_viii(379,($12|0),(15712|0),(374|0));
   $13 = __THREW__; __THREW__ = 0;
   $14 = $13&1;
   if ($14) {
    $9 = ___cxa_find_matching_catch(-1,-1,15712|0)|0;
    $10 = tempRet0;
    $lpad$phi$i$index = $9;$lpad$phi$i$index2 = $10;
    break;
   } else {
    // unreachable;
   }
  }
  else if ((label|0) == 12) {
   STACKTOP = sp;return ($0|0);
  }
 } while(0);
 $11 = ($lpad$phi$i$index2|0)<(0);
 if ($11) {
  ___cxa_call_unexpected(($lpad$phi$i$index|0));
  // unreachable;
 } else {
  ___resumeException($lpad$phi$i$index|0);
  // unreachable;
 }
 return 0|0;
}
function __ZN10emscripten8internal7InvokerIP5ModelJEE6invokeEPFS3_vE($fn) {
 $fn = $fn|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (FUNCTION_TABLE_i[$fn & 511]()|0);
 STACKTOP = sp;return ($0|0);
}
function __ZN10emscripten8internal13getActualTypeI5ModelEEPKNS0_7_TYPEIDEPT_($ptr) {
 $ptr = $ptr|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return (168|0);
}
function __ZN10emscripten8internal14raw_destructorI5ModelEEvPT_($ptr) {
 $ptr = $ptr|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($ptr|0)==(0|0);
 if (!($0)) {
  _free($ptr);
 }
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorI11ModelObjectNS_9allocatorIS1_EEE9push_backERKS1_($this,$__x) {
 $this = $this|0;
 $__x = $__x|0;
 var $$ = 0, $$pre = 0, $$size$i$i$i$i = 0, $$sum = 0, $$sum1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $9 = 0, $__v$i$sroa$2$0 = 0, $eh$lpad$body$i$i$index13Z2D = 0, $eh$lpad$body$i$i$indexZ2D = 0, $eh$lpad$body5$i$index8Z2D = 0, $eh$lpad$body5$i$indexZ2D = 0, $lpad$phi$i$i$i$i$index = 0, $lpad$phi$i$i$i$i$index18 = 0, $lpad$phi$i$i$index = 0, $lpad$phi$i$i$index3 = 0, dest = 0, label = 0;
 var sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($this) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($1|0)==($3|0);
 if (!($4)) {
  $5 = ($1|0)==(0|0);
  if ($5) {
   $7 = 0;
  } else {
   dest=$1+0|0; src=$__x+0|0; stop=dest+96|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
   $$pre = HEAP32[$0>>2]|0;
   $7 = $$pre;
  }
  $6 = (($7) + 96|0);
  HEAP32[$0>>2] = $6;
  STACKTOP = sp;return;
 }
 $8 = HEAP32[$this>>2]|0;
 $9 = $1;
 $10 = $8;
 $11 = (($9) - ($10))|0;
 $12 = (($11|0) / 96)&-1;
 $13 = (($12) + 1)|0;
 $14 = ($13>>>0)>(44739242);
 if ($14) {
  $15 = (___cxa_allocate_exception(8)|0);
  HEAP32[$15>>2] = ((3272 + 8|0));
  while(1) {
   $16 = (_malloc(19)|0);
   $17 = ($16|0)==(0|0);
   if (!($17)) {
    label = 17;
    break;
   }
   $18 = HEAP32[15648>>2]|0;HEAP32[15648>>2] = (($18+0)|0);
   $19 = ($18|0)==(0);
   if ($19) {
    label = 15;
    break;
   }
   $20 = $18;
   __THREW__ = 0;
   invoke_v($20|0);
   $21 = __THREW__; __THREW__ = 0;
   $22 = $21&1;
   if ($22) {
    label = 10;
    break;
   }
  }
  do {
   if ((label|0) == 10) {
    $23 = ___cxa_find_matching_catch(-1,-1,15712|0)|0;
    $24 = tempRet0;
    $lpad$phi$i$i$index = $23;$lpad$phi$i$i$index3 = $24;
   }
   else if ((label|0) == 15) {
    $30 = (___cxa_allocate_exception(4)|0);
    HEAP32[$30>>2] = ((15656 + 8|0));
    __THREW__ = 0;
    invoke_viii(379,($30|0),(15712|0),(374|0));
    $31 = __THREW__; __THREW__ = 0;
    $32 = $31&1;
    if ($32) {
     $25 = ___cxa_find_matching_catch(-1,-1,15712|0)|0;
     $26 = tempRet0;
     $lpad$phi$i$i$index = $25;$lpad$phi$i$i$index3 = $26;
     break;
    } else {
     // unreachable;
    }
   }
   else if ((label|0) == 17) {
    $33 = (($15) + 4|0);
    $34 = (($16) + 4|0);
    HEAP32[$34>>2] = 6;
    HEAP32[$16>>2] = 6;
    $35 = (($16) + 12|0);
    HEAP32[$33>>2] = $35;
    $36 = (($16) + 8|0);
    HEAP32[$36>>2] = 0;
    ;HEAP8[$35+0>>0]=HEAP8[6312+0>>0]|0;HEAP8[$35+1>>0]=HEAP8[6312+1>>0]|0;HEAP8[$35+2>>0]=HEAP8[6312+2>>0]|0;HEAP8[$35+3>>0]=HEAP8[6312+3>>0]|0;HEAP8[$35+4>>0]=HEAP8[6312+4>>0]|0;HEAP8[$35+5>>0]=HEAP8[6312+5>>0]|0;HEAP8[$35+6>>0]=HEAP8[6312+6>>0]|0;
    HEAP32[$15>>2] = ((3352 + 8|0));
    ___cxa_throw(($15|0),(3400|0),(68|0));
    // unreachable;
   }
  } while(0);
  $27 = ($lpad$phi$i$i$index3|0)<(0);
  do {
   if ($27) {
    __THREW__ = 0;
    invoke_vi(380,($lpad$phi$i$i$index|0));
    $28 = __THREW__; __THREW__ = 0;
    $29 = $28&1;
    if ($29) {
     $37 = ___cxa_find_matching_catch(-1,-1,15712|0)|0;
     $38 = tempRet0;
     $eh$lpad$body5$i$index8Z2D = $38;$eh$lpad$body5$i$indexZ2D = $37;
     break;
    } else {
     // unreachable;
    }
   } else {
    $eh$lpad$body5$i$index8Z2D = $lpad$phi$i$i$index3;$eh$lpad$body5$i$indexZ2D = $lpad$phi$i$i$index;
   }
  } while(0);
  $39 = ($eh$lpad$body5$i$index8Z2D|0)<(0);
  if (!($39)) {
   $eh$lpad$body$i$i$index13Z2D = $eh$lpad$body5$i$index8Z2D;$eh$lpad$body$i$i$indexZ2D = $eh$lpad$body5$i$indexZ2D;
   __ZNSt9exceptionD2Ev(($15|0));
   ___cxa_free_exception(($15|0));
   ___resumeException($eh$lpad$body$i$i$indexZ2D|0);
   // unreachable;
  }
  __THREW__ = 0;
  invoke_vi(380,($eh$lpad$body5$i$indexZ2D|0));
  $40 = __THREW__; __THREW__ = 0;
  $41 = $40&1;
  if (!($41)) {
   // unreachable;
  }
  $42 = ___cxa_find_matching_catch(-1,-1)|0;
  $43 = tempRet0;
  $eh$lpad$body$i$i$index13Z2D = $43;$eh$lpad$body$i$i$indexZ2D = $42;
  __ZNSt9exceptionD2Ev(($15|0));
  ___cxa_free_exception(($15|0));
  ___resumeException($eh$lpad$body$i$i$indexZ2D|0);
  // unreachable;
 }
 $44 = ($12>>>0)<(22369621);
 if ($44) {
  $45 = $12 << 1;
  $46 = ($45>>>0)<($13>>>0);
  $$ = $46 ? $13 : $45;
  $47 = ($$|0)==(0);
  if ($47) {
   $67 = 0;$69 = $$;
  } else {
   $49 = $$;
   label = 26;
  }
 } else {
  $49 = 44739242;
  label = 26;
 }
 L38: do {
  if ((label|0) == 26) {
   $48 = ($49*96)|0;
   $50 = ($48|0)==(0);
   $$size$i$i$i$i = $50 ? 1 : $48;
   while(1) {
    $51 = (_malloc($$size$i$i$i$i)|0);
    $52 = ($51|0)==(0|0);
    if (!($52)) {
     label = 37;
     break;
    }
    $53 = HEAP32[15648>>2]|0;HEAP32[15648>>2] = (($53+0)|0);
    $54 = ($53|0)==(0);
    if ($54) {
     label = 34;
     break;
    }
    $55 = $53;
    __THREW__ = 0;
    invoke_v($55|0);
    $56 = __THREW__; __THREW__ = 0;
    $57 = $56&1;
    if ($57) {
     label = 30;
     break;
    }
   }
   do {
    if ((label|0) == 30) {
     $58 = ___cxa_find_matching_catch(-1,-1,15712|0)|0;
     $59 = tempRet0;
     $lpad$phi$i$i$i$i$index = $58;$lpad$phi$i$i$i$i$index18 = $59;
    }
    else if ((label|0) == 34) {
     $63 = (___cxa_allocate_exception(4)|0);
     HEAP32[$63>>2] = ((15656 + 8|0));
     __THREW__ = 0;
     invoke_viii(379,($63|0),(15712|0),(374|0));
     $64 = __THREW__; __THREW__ = 0;
     $65 = $64&1;
     if ($65) {
      $60 = ___cxa_find_matching_catch(-1,-1,15712|0)|0;
      $61 = tempRet0;
      $lpad$phi$i$i$i$i$index = $60;$lpad$phi$i$i$i$i$index18 = $61;
      break;
     } else {
      // unreachable;
     }
    }
    else if ((label|0) == 37) {
     $67 = $51;$69 = $49;
     break L38;
    }
   } while(0);
   $62 = ($lpad$phi$i$i$i$i$index18|0)<(0);
   if ($62) {
    ___cxa_call_unexpected(($lpad$phi$i$i$i$i$index|0));
    // unreachable;
   } else {
    ___resumeException($lpad$phi$i$i$i$i$index|0);
    // unreachable;
   }
  }
 } while(0);
 $66 = (($67) + (($12*96)|0)|0);
 $68 = (($67) + (($69*96)|0)|0);
 $70 = ($66|0)==(0|0);
 if (!($70)) {
  dest=$66+0|0; src=$__x+0|0; stop=dest+96|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 }
 $$sum = (($12) + 1)|0;
 $71 = (($67) + (($$sum*96)|0)|0);
 $72 = HEAP32[$this>>2]|0;
 $73 = HEAP32[$0>>2]|0;
 $74 = $73;
 $75 = $72;
 $76 = (($74) - ($75))|0;
 $77 = (($76|0) / -96)&-1;
 $$sum1 = (($12) + ($77))|0;
 $78 = (($67) + (($$sum1*96)|0)|0);
 _memcpy(($78|0),($72|0),($76|0))|0;
 $79 = HEAP32[$this>>2]|0;
 HEAP32[$this>>2] = $78;
 $80 = HEAP32[$0>>2]|0;
 HEAP32[$0>>2] = $71;
 HEAP32[$2>>2] = $68;
 $__v$i$sroa$2$0 = $80;
 while(1) {
  $81 = ($79|0)==($__v$i$sroa$2$0|0);
  if ($81) {
   break;
  }
  $82 = (($__v$i$sroa$2$0) + -96|0);
  $__v$i$sroa$2$0 = $82;
 }
 $83 = ($79|0)==(0|0);
 if ($83) {
  STACKTOP = sp;return;
 }
 _free($79);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorI11ModelObjectNS_9allocatorIS1_EEE4sizeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$this>>2]|0;
 $3 = $1;
 $4 = $2;
 $5 = (($3) - ($4))|0;
 $6 = (($5|0) / 96)&-1;
 STACKTOP = sp;return ($6|0);
}
function __ZN10emscripten8internal12VectorAccessINSt3__16vectorI11ModelObjectNS2_9allocatorIS4_EEEEE3getERKS7_j($agg$result,$v,$index) {
 $agg$result = $agg$result|0;
 $v = $v|0;
 $index = $index|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $argv$i$i = 0, $lpad$phi$i$i$i$i$i$i$index = 0, $lpad$phi$i$i$i$i$i$i$index2 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $argv$i$i = sp;
 $0 = (($v) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$v>>2]|0;
 $3 = $1;
 $4 = $2;
 $5 = (($3) - ($4))|0;
 $6 = (($5|0) / 96)&-1;
 $7 = ($6>>>0)>($index>>>0);
 if (!($7)) {
  $25 = (__emval_undefined()|0);
  HEAP32[$agg$result>>2] = $25;
  STACKTOP = sp;return;
 }
 $8 = (($2) + (($index*96)|0)|0);
 while(1) {
  $9 = (_malloc(96)|0);
  $10 = ($9|0)==(0|0);
  if (!($10)) {
   label = 13;
   break;
  }
  $11 = HEAP32[15648>>2]|0;HEAP32[15648>>2] = (($11+0)|0);
  $12 = ($11|0)==(0);
  if ($12) {
   label = 10;
   break;
  }
  $13 = $11;
  __THREW__ = 0;
  invoke_v($13|0);
  $14 = __THREW__; __THREW__ = 0;
  $15 = $14&1;
  if ($15) {
   label = 6;
   break;
  }
 }
 do {
  if ((label|0) == 6) {
   $16 = ___cxa_find_matching_catch(-1,-1,15712|0)|0;
   $17 = tempRet0;
   $lpad$phi$i$i$i$i$i$i$index = $16;$lpad$phi$i$i$i$i$i$i$index2 = $17;
  }
  else if ((label|0) == 10) {
   $21 = (___cxa_allocate_exception(4)|0);
   HEAP32[$21>>2] = ((15656 + 8|0));
   __THREW__ = 0;
   invoke_viii(379,($21|0),(15712|0),(374|0));
   $22 = __THREW__; __THREW__ = 0;
   $23 = $22&1;
   if ($23) {
    $18 = ___cxa_find_matching_catch(-1,-1,15712|0)|0;
    $19 = tempRet0;
    $lpad$phi$i$i$i$i$i$i$index = $18;$lpad$phi$i$i$i$i$i$i$index2 = $19;
    break;
   } else {
    // unreachable;
   }
  }
  else if ((label|0) == 13) {
   dest=$9+0|0; src=$8+0|0; stop=dest+96|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
   HEAP32[$argv$i$i>>2] = $9;
   $24 = (__emval_take_value((544|0),($argv$i$i|0))|0);
   HEAP32[$agg$result>>2] = $24;
   STACKTOP = sp;return;
  }
 } while(0);
 $20 = ($lpad$phi$i$i$i$i$i$i$index2|0)<(0);
 if ($20) {
  ___cxa_call_unexpected(($lpad$phi$i$i$i$i$i$i$index|0));
  // unreachable;
 } else {
  ___resumeException($lpad$phi$i$i$i$i$i$i$index|0);
  // unreachable;
 }
}
function __ZN10emscripten8internal12VectorAccessINSt3__16vectorI11ModelObjectNS2_9allocatorIS4_EEEEE3setERS7_jRKS4_($v,$index,$value) {
 $v = $v|0;
 $index = $index|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 $0 = HEAP32[$v>>2]|0;
 $1 = (($0) + (($index*96)|0)|0);
 dest=$1+0|0; src=$value+0|0; stop=dest+92|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));HEAP8[$1+92>>0]=HEAP8[$value+92>>0]|0;
 STACKTOP = sp;return 1;
}
function __ZN10emscripten8internal15FunctionInvokerIPFbRNSt3__16vectorI11ModelObjectNS2_9allocatorIS4_EEEEjRKS4_EbS8_JjSA_EE6invokeEPSC_PS7_jPS4_($function,$wireThis,$args,$args1) {
 $function = $function|0;
 $wireThis = $wireThis|0;
 $args = $args|0;
 $args1 = $args1|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$function>>2]|0;
 $1 = (FUNCTION_TABLE_iiii[$0 & 511]($wireThis,$args,$args1)|0);
 STACKTOP = sp;return ($1|0);
}
function __ZN10emscripten8internal15FunctionInvokerIPFNS_3valERKNSt3__16vectorI11ModelObjectNS3_9allocatorIS5_EEEEjES2_SA_JjEE6invokeEPSC_PS8_j($function,$wireThis,$args) {
 $function = $function|0;
 $wireThis = $wireThis|0;
 $args = $args|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp;
 $1 = HEAP32[$function>>2]|0;
 FUNCTION_TABLE_viii[$1 & 511]($0,$wireThis,$args);
 $2 = HEAP32[$0>>2]|0;
 __THREW__ = 0;
 invoke_vi(381,($2|0));
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $10 = ___cxa_find_matching_catch(-1,-1)|0;
  $11 = tempRet0;
  $12 = HEAP32[$0>>2]|0;
  __THREW__ = 0;
  invoke_vi(382,($12|0));
  $13 = __THREW__; __THREW__ = 0;
  $14 = $13&1;
  if ($14) {
   $15 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
   $16 = tempRet0;
   ___clang_call_terminate($15);
   // unreachable;
  } else {
   ___resumeException($10|0);
   // unreachable;
  }
 } else {
  $5 = HEAP32[$0>>2]|0;
  __THREW__ = 0;
  invoke_vi(382,($5|0));
  $6 = __THREW__; __THREW__ = 0;
  $7 = $6&1;
  if ($7) {
   $8 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
   $9 = tempRet0;
   ___clang_call_terminate($8);
   // unreachable;
  } else {
   STACKTOP = sp;return ($5|0);
  }
 }
 return 0|0;
}
function ___clang_call_terminate($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 (___cxa_begin_catch(($0|0))|0);
 __ZSt9terminatev();
 // unreachable;
}
function __ZN10emscripten8internal13MethodInvokerIMNSt3__16vectorI11ModelObjectNS2_9allocatorIS4_EEEEKFjvEjPKS7_JEE6invokeERKS9_SB_($method,$wireThis) {
 $method = $method|0;
 $wireThis = $wireThis|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$field = HEAPU8[$method>>0]|(HEAPU8[$method+1>>0]<<8)|(HEAPU8[$method+2>>0]<<16)|(HEAPU8[$method+3>>0]<<24);
 $$index1 = (($method) + 4|0);
 $$field2 = HEAPU8[$$index1>>0]|(HEAPU8[$$index1+1>>0]<<8)|(HEAPU8[$$index1+2>>0]<<16)|(HEAPU8[$$index1+3>>0]<<24);
 $0 = $$field2 >> 1;
 $1 = (($wireThis) + ($0)|0);
 $2 = $$field2 & 1;
 $3 = ($2|0)==(0);
 if ($3) {
  $7 = $$field;
  $8 = $7;
  $9 = (FUNCTION_TABLE_ii[$8 & 511]($1)|0);
  STACKTOP = sp;return ($9|0);
 } else {
  $4 = HEAP32[$1>>2]|0;
  $5 = (($4) + ($$field)|0);
  $6 = HEAP32[$5>>2]|0;
  $8 = $6;
  $9 = (FUNCTION_TABLE_ii[$8 & 511]($1)|0);
  STACKTOP = sp;return ($9|0);
 }
 return 0|0;
}
function __ZN10emscripten8internal13MethodInvokerIMNSt3__16vectorI11ModelObjectNS2_9allocatorIS4_EEEEFvRKS4_EvPS7_JS9_EE6invokeERKSB_SC_PS4_($method,$wireThis,$args) {
 $method = $method|0;
 $wireThis = $wireThis|0;
 $args = $args|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$field = HEAPU8[$method>>0]|(HEAPU8[$method+1>>0]<<8)|(HEAPU8[$method+2>>0]<<16)|(HEAPU8[$method+3>>0]<<24);
 $$index1 = (($method) + 4|0);
 $$field2 = HEAPU8[$$index1>>0]|(HEAPU8[$$index1+1>>0]<<8)|(HEAPU8[$$index1+2>>0]<<16)|(HEAPU8[$$index1+3>>0]<<24);
 $0 = $$field2 >> 1;
 $1 = (($wireThis) + ($0)|0);
 $2 = $$field2 & 1;
 $3 = ($2|0)==(0);
 if ($3) {
  $7 = $$field;
  $8 = $7;
  FUNCTION_TABLE_vii[$8 & 511]($1,$args);
  STACKTOP = sp;return;
 } else {
  $4 = HEAP32[$1>>2]|0;
  $5 = (($4) + ($$field)|0);
  $6 = HEAP32[$5>>2]|0;
  $8 = $6;
  FUNCTION_TABLE_vii[$8 & 511]($1,$args);
  STACKTOP = sp;return;
 }
}
function __ZN10emscripten8internal12operator_newINSt3__16vectorI11ModelObjectNS2_9allocatorIS4_EEEEJEEEPT_DpT0_() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $lpad$phi$i$index = 0, $lpad$phi$i$index2 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 while(1) {
  $0 = (_malloc(12)|0);
  $1 = ($0|0)==(0|0);
  if (!($1)) {
   label = 12;
   break;
  }
  $2 = HEAP32[15648>>2]|0;HEAP32[15648>>2] = (($2+0)|0);
  $3 = ($2|0)==(0);
  if ($3) {
   label = 9;
   break;
  }
  $4 = $2;
  __THREW__ = 0;
  invoke_v($4|0);
  $5 = __THREW__; __THREW__ = 0;
  $6 = $5&1;
  if ($6) {
   label = 5;
   break;
  }
 }
 do {
  if ((label|0) == 5) {
   $7 = ___cxa_find_matching_catch(-1,-1,15712|0)|0;
   $8 = tempRet0;
   $lpad$phi$i$index = $7;$lpad$phi$i$index2 = $8;
  }
  else if ((label|0) == 9) {
   $12 = (___cxa_allocate_exception(4)|0);
   HEAP32[$12>>2] = ((15656 + 8|0));
   __THREW__ = 0;
   invoke_viii(379,($12|0),(15712|0),(374|0));
   $13 = __THREW__; __THREW__ = 0;
   $14 = $13&1;
   if ($14) {
    $9 = ___cxa_find_matching_catch(-1,-1,15712|0)|0;
    $10 = tempRet0;
    $lpad$phi$i$index = $9;$lpad$phi$i$index2 = $10;
    break;
   } else {
    // unreachable;
   }
  }
  else if ((label|0) == 12) {
   HEAP32[$0>>2] = 0;
   $15 = (($0) + 4|0);
   HEAP32[$15>>2] = 0;
   $16 = (($0) + 8|0);
   HEAP32[$16>>2] = 0;
   STACKTOP = sp;return ($0|0);
  }
 } while(0);
 $11 = ($lpad$phi$i$index2|0)<(0);
 if ($11) {
  ___cxa_call_unexpected(($lpad$phi$i$index|0));
  // unreachable;
 } else {
  ___resumeException($lpad$phi$i$index|0);
  // unreachable;
 }
 return 0|0;
}
function __ZN10emscripten8internal7InvokerIPNSt3__16vectorI11ModelObjectNS2_9allocatorIS4_EEEEJEE6invokeEPFS8_vE($fn) {
 $fn = $fn|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (FUNCTION_TABLE_i[$fn & 511]()|0);
 STACKTOP = sp;return ($0|0);
}
function __ZN10emscripten8internal13getActualTypeINSt3__16vectorI11ModelObjectNS2_9allocatorIS4_EEEEEEPKNS0_7_TYPEIDEPT_($ptr) {
 $ptr = $ptr|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return (368|0);
}
function __ZN10emscripten8internal14raw_destructorINSt3__16vectorI11ModelObjectNS2_9allocatorIS4_EEEEEEvPT_($ptr) {
 $ptr = $ptr|0;
 var $$pre = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($ptr|0)==(0|0);
 if ($0) {
  STACKTOP = sp;return;
 }
 $1 = HEAP32[$ptr>>2]|0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  $3 = (($ptr) + 4|0);
  $$pre = HEAP32[$3>>2]|0;
  $5 = $$pre;
  while(1) {
   $4 = ($1|0)==($5|0);
   if ($4) {
    break;
   }
   $6 = (($5) + -96|0);
   HEAP32[$3>>2] = $6;
   $5 = $6;
  }
  _free($1);
 }
 _free($ptr);
 STACKTOP = sp;return;
}
function __ZN10emscripten8internal12GetterPolicyIM11ModelObjectKFK7NVectorIdLi3EEvEE3getIS2_EEPS4_RKS7_RKT_($context,$ptr) {
 $context = $context|0;
 $ptr = $ptr|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $lpad$phi$i$i$index = 0, $lpad$phi$i$i$index5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = sp;
 $$field = HEAPU8[$context>>0]|(HEAPU8[$context+1>>0]<<8)|(HEAPU8[$context+2>>0]<<16)|(HEAPU8[$context+3>>0]<<24);
 $$index1 = (($context) + 4|0);
 $$field2 = HEAPU8[$$index1>>0]|(HEAPU8[$$index1+1>>0]<<8)|(HEAPU8[$$index1+2>>0]<<16)|(HEAPU8[$$index1+3>>0]<<24);
 $1 = $$field2 >> 1;
 $2 = (($ptr) + ($1)|0);
 $3 = $$field2 & 1;
 $4 = ($3|0)==(0);
 if ($4) {
  $8 = $$field;
  $9 = $8;
 } else {
  $5 = HEAP32[$2>>2]|0;
  $6 = (($5) + ($$field)|0);
  $7 = HEAP32[$6>>2]|0;
  $9 = $7;
 }
 FUNCTION_TABLE_vii[$9 & 511]($0,$2);
 while(1) {
  $10 = (_malloc(24)|0);
  $11 = ($10|0)==(0|0);
  if (!($11)) {
   label = 15;
   break;
  }
  $12 = HEAP32[15648>>2]|0;HEAP32[15648>>2] = (($12+0)|0);
  $13 = ($12|0)==(0);
  if ($13) {
   label = 12;
   break;
  }
  $14 = $12;
  __THREW__ = 0;
  invoke_v($14|0);
  $15 = __THREW__; __THREW__ = 0;
  $16 = $15&1;
  if ($16) {
   label = 8;
   break;
  }
 }
 do {
  if ((label|0) == 8) {
   $17 = ___cxa_find_matching_catch(-1,-1,15712|0)|0;
   $18 = tempRet0;
   $lpad$phi$i$i$index = $17;$lpad$phi$i$i$index5 = $18;
  }
  else if ((label|0) == 12) {
   $22 = (___cxa_allocate_exception(4)|0);
   HEAP32[$22>>2] = ((15656 + 8|0));
   __THREW__ = 0;
   invoke_viii(379,($22|0),(15712|0),(374|0));
   $23 = __THREW__; __THREW__ = 0;
   $24 = $23&1;
   if ($24) {
    $19 = ___cxa_find_matching_catch(-1,-1,15712|0)|0;
    $20 = tempRet0;
    $lpad$phi$i$i$index = $19;$lpad$phi$i$i$index5 = $20;
    break;
   } else {
    // unreachable;
   }
  }
  else if ((label|0) == 15) {
   ;HEAP32[$10+0>>2]=HEAP32[$0+0>>2]|0;HEAP32[$10+4>>2]=HEAP32[$0+4>>2]|0;HEAP32[$10+8>>2]=HEAP32[$0+8>>2]|0;HEAP32[$10+12>>2]=HEAP32[$0+12>>2]|0;HEAP32[$10+16>>2]=HEAP32[$0+16>>2]|0;HEAP32[$10+20>>2]=HEAP32[$0+20>>2]|0;
   STACKTOP = sp;return ($10|0);
  }
 } while(0);
 $21 = ($lpad$phi$i$i$index5|0)<(0);
 if ($21) {
  ___cxa_call_unexpected(($lpad$phi$i$i$index|0));
  // unreachable;
 } else {
  ___resumeException($lpad$phi$i$i$index|0);
  // unreachable;
 }
 return 0|0;
}
function __ZN10emscripten8internal12SetterPolicyIM11ModelObjectFv7NVectorIdLi3EEEE3setIS2_EEvRKS6_RT_PS4_($context,$ptr,$wt) {
 $context = $context|0;
 $ptr = $ptr|0;
 $wt = $wt|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $wt$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $wt$byval_copy = sp;
 $$field = HEAPU8[$context>>0]|(HEAPU8[$context+1>>0]<<8)|(HEAPU8[$context+2>>0]<<16)|(HEAPU8[$context+3>>0]<<24);
 $$index1 = (($context) + 4|0);
 $$field2 = HEAPU8[$$index1>>0]|(HEAPU8[$$index1+1>>0]<<8)|(HEAPU8[$$index1+2>>0]<<16)|(HEAPU8[$$index1+3>>0]<<24);
 $0 = $$field2 >> 1;
 $1 = (($ptr) + ($0)|0);
 $2 = $$field2 & 1;
 $3 = ($2|0)==(0);
 if ($3) {
  $7 = $$field;
  $8 = $7;
 } else {
  $4 = HEAP32[$1>>2]|0;
  $5 = (($4) + ($$field)|0);
  $6 = HEAP32[$5>>2]|0;
  $8 = $6;
 }
 ;HEAP32[$wt$byval_copy+0>>2]=HEAP32[$wt+0>>2]|0;HEAP32[$wt$byval_copy+4>>2]=HEAP32[$wt+4>>2]|0;HEAP32[$wt$byval_copy+8>>2]=HEAP32[$wt+8>>2]|0;HEAP32[$wt$byval_copy+12>>2]=HEAP32[$wt+12>>2]|0;HEAP32[$wt$byval_copy+16>>2]=HEAP32[$wt+16>>2]|0;HEAP32[$wt$byval_copy+20>>2]=HEAP32[$wt+20>>2]|0;
 FUNCTION_TABLE_vii[$8 & 511]($1,$wt$byval_copy);
 STACKTOP = sp;return;
}
function __ZN10emscripten8internal12GetterPolicyIM11ModelObjectKFKivEE3getIS2_EEiRKS5_RKT_($context,$ptr) {
 $context = $context|0;
 $ptr = $ptr|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$field = HEAPU8[$context>>0]|(HEAPU8[$context+1>>0]<<8)|(HEAPU8[$context+2>>0]<<16)|(HEAPU8[$context+3>>0]<<24);
 $$index1 = (($context) + 4|0);
 $$field2 = HEAPU8[$$index1>>0]|(HEAPU8[$$index1+1>>0]<<8)|(HEAPU8[$$index1+2>>0]<<16)|(HEAPU8[$$index1+3>>0]<<24);
 $0 = $$field2 >> 1;
 $1 = (($ptr) + ($0)|0);
 $2 = $$field2 & 1;
 $3 = ($2|0)==(0);
 if ($3) {
  $7 = $$field;
  $8 = $7;
  $9 = (FUNCTION_TABLE_ii[$8 & 511]($1)|0);
  STACKTOP = sp;return ($9|0);
 } else {
  $4 = HEAP32[$1>>2]|0;
  $5 = (($4) + ($$field)|0);
  $6 = HEAP32[$5>>2]|0;
  $8 = $6;
  $9 = (FUNCTION_TABLE_ii[$8 & 511]($1)|0);
  STACKTOP = sp;return ($9|0);
 }
 return 0|0;
}
function __ZN10emscripten8internal12SetterPolicyIM11ModelObjectFviEE3setIS2_EEvRKS4_RT_i($context,$ptr,$wt) {
 $context = $context|0;
 $ptr = $ptr|0;
 $wt = $wt|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$field = HEAPU8[$context>>0]|(HEAPU8[$context+1>>0]<<8)|(HEAPU8[$context+2>>0]<<16)|(HEAPU8[$context+3>>0]<<24);
 $$index1 = (($context) + 4|0);
 $$field2 = HEAPU8[$$index1>>0]|(HEAPU8[$$index1+1>>0]<<8)|(HEAPU8[$$index1+2>>0]<<16)|(HEAPU8[$$index1+3>>0]<<24);
 $0 = $$field2 >> 1;
 $1 = (($ptr) + ($0)|0);
 $2 = $$field2 & 1;
 $3 = ($2|0)==(0);
 if ($3) {
  $7 = $$field;
  $8 = $7;
  FUNCTION_TABLE_vii[$8 & 511]($1,$wt);
  STACKTOP = sp;return;
 } else {
  $4 = HEAP32[$1>>2]|0;
  $5 = (($4) + ($$field)|0);
  $6 = HEAP32[$5>>2]|0;
  $8 = $6;
  FUNCTION_TABLE_vii[$8 & 511]($1,$wt);
  STACKTOP = sp;return;
 }
}
function __ZN10emscripten8internal12GetterPolicyIM11ModelObjectKFKdvEE3getIS2_EEdRKS5_RKT_($context,$ptr) {
 $context = $context|0;
 $ptr = $ptr|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $$field = HEAPU8[$context>>0]|(HEAPU8[$context+1>>0]<<8)|(HEAPU8[$context+2>>0]<<16)|(HEAPU8[$context+3>>0]<<24);
 $$index1 = (($context) + 4|0);
 $$field2 = HEAPU8[$$index1>>0]|(HEAPU8[$$index1+1>>0]<<8)|(HEAPU8[$$index1+2>>0]<<16)|(HEAPU8[$$index1+3>>0]<<24);
 $0 = $$field2 >> 1;
 $1 = (($ptr) + ($0)|0);
 $2 = $$field2 & 1;
 $3 = ($2|0)==(0);
 if ($3) {
  $7 = $$field;
  $8 = $7;
  $9 = (+FUNCTION_TABLE_di[$8 & 511]($1));
  STACKTOP = sp;return (+$9);
 } else {
  $4 = HEAP32[$1>>2]|0;
  $5 = (($4) + ($$field)|0);
  $6 = HEAP32[$5>>2]|0;
  $8 = $6;
  $9 = (+FUNCTION_TABLE_di[$8 & 511]($1));
  STACKTOP = sp;return (+$9);
 }
 return +0;
}
function __ZN10emscripten8internal12SetterPolicyIM11ModelObjectFvdEE3setIS2_EEvRKS4_RT_d($context,$ptr,$wt) {
 $context = $context|0;
 $ptr = $ptr|0;
 $wt = +$wt;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$field = HEAPU8[$context>>0]|(HEAPU8[$context+1>>0]<<8)|(HEAPU8[$context+2>>0]<<16)|(HEAPU8[$context+3>>0]<<24);
 $$index1 = (($context) + 4|0);
 $$field2 = HEAPU8[$$index1>>0]|(HEAPU8[$$index1+1>>0]<<8)|(HEAPU8[$$index1+2>>0]<<16)|(HEAPU8[$$index1+3>>0]<<24);
 $0 = $$field2 >> 1;
 $1 = (($ptr) + ($0)|0);
 $2 = $$field2 & 1;
 $3 = ($2|0)==(0);
 if ($3) {
  $7 = $$field;
  $8 = $7;
  FUNCTION_TABLE_vid[$8 & 511]($1,$wt);
  STACKTOP = sp;return;
 } else {
  $4 = HEAP32[$1>>2]|0;
  $5 = (($4) + ($$field)|0);
  $6 = HEAP32[$5>>2]|0;
  $8 = $6;
  FUNCTION_TABLE_vid[$8 & 511]($1,$wt);
  STACKTOP = sp;return;
 }
}
function __ZN10emscripten8internal13MethodInvokerIM11ModelObjectFvvEvPS2_JEE6invokeERKS4_S5_($method,$wireThis) {
 $method = $method|0;
 $wireThis = $wireThis|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$field = HEAPU8[$method>>0]|(HEAPU8[$method+1>>0]<<8)|(HEAPU8[$method+2>>0]<<16)|(HEAPU8[$method+3>>0]<<24);
 $$index1 = (($method) + 4|0);
 $$field2 = HEAPU8[$$index1>>0]|(HEAPU8[$$index1+1>>0]<<8)|(HEAPU8[$$index1+2>>0]<<16)|(HEAPU8[$$index1+3>>0]<<24);
 $0 = $$field2 >> 1;
 $1 = (($wireThis) + ($0)|0);
 $2 = $$field2 & 1;
 $3 = ($2|0)==(0);
 if ($3) {
  $7 = $$field;
  $8 = $7;
  FUNCTION_TABLE_vi[$8 & 511]($1);
  STACKTOP = sp;return;
 } else {
  $4 = HEAP32[$1>>2]|0;
  $5 = (($4) + ($$field)|0);
  $6 = HEAP32[$5>>2]|0;
  $8 = $6;
  FUNCTION_TABLE_vi[$8 & 511]($1);
  STACKTOP = sp;return;
 }
}
function __ZN10emscripten8internal12GetterPolicyIM11ModelObjectKFKbvEE3getIS2_EEbRKS5_RKT_($context,$ptr) {
 $context = $context|0;
 $ptr = $ptr|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$field = HEAPU8[$context>>0]|(HEAPU8[$context+1>>0]<<8)|(HEAPU8[$context+2>>0]<<16)|(HEAPU8[$context+3>>0]<<24);
 $$index1 = (($context) + 4|0);
 $$field2 = HEAPU8[$$index1>>0]|(HEAPU8[$$index1+1>>0]<<8)|(HEAPU8[$$index1+2>>0]<<16)|(HEAPU8[$$index1+3>>0]<<24);
 $0 = $$field2 >> 1;
 $1 = (($ptr) + ($0)|0);
 $2 = $$field2 & 1;
 $3 = ($2|0)==(0);
 if ($3) {
  $7 = $$field;
  $8 = $7;
  $9 = (FUNCTION_TABLE_ii[$8 & 511]($1)|0);
  STACKTOP = sp;return ($9|0);
 } else {
  $4 = HEAP32[$1>>2]|0;
  $5 = (($4) + ($$field)|0);
  $6 = HEAP32[$5>>2]|0;
  $8 = $6;
  $9 = (FUNCTION_TABLE_ii[$8 & 511]($1)|0);
  STACKTOP = sp;return ($9|0);
 }
 return 0|0;
}
function __ZN10emscripten8internal12operator_newI11ModelObjectJEEEPT_DpT0_() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $lpad$phi$i$index = 0, $lpad$phi$i$index2 = 0, dest = 0, label = 0, sp = 0;
 var stop = 0;
 sp = STACKTOP;
 while(1) {
  $0 = (_malloc(96)|0);
  $1 = ($0|0)==(0|0);
  if (!($1)) {
   label = 12;
   break;
  }
  $2 = HEAP32[15648>>2]|0;HEAP32[15648>>2] = (($2+0)|0);
  $3 = ($2|0)==(0);
  if ($3) {
   label = 9;
   break;
  }
  $4 = $2;
  __THREW__ = 0;
  invoke_v($4|0);
  $5 = __THREW__; __THREW__ = 0;
  $6 = $5&1;
  if ($6) {
   label = 5;
   break;
  }
 }
 do {
  if ((label|0) == 5) {
   $7 = ___cxa_find_matching_catch(-1,-1,15712|0)|0;
   $8 = tempRet0;
   $lpad$phi$i$index = $7;$lpad$phi$i$index2 = $8;
  }
  else if ((label|0) == 9) {
   $12 = (___cxa_allocate_exception(4)|0);
   HEAP32[$12>>2] = ((15656 + 8|0));
   __THREW__ = 0;
   invoke_viii(379,($12|0),(15712|0),(374|0));
   $13 = __THREW__; __THREW__ = 0;
   $14 = $13&1;
   if ($14) {
    $9 = ___cxa_find_matching_catch(-1,-1,15712|0)|0;
    $10 = tempRet0;
    $lpad$phi$i$index = $9;$lpad$phi$i$index2 = $10;
    break;
   } else {
    // unreachable;
   }
  }
  else if ((label|0) == 12) {
   dest=$0+0|0; stop=dest+92|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));HEAP8[$0+92>>0]=0|0;
   STACKTOP = sp;return ($0|0);
  }
 } while(0);
 $11 = ($lpad$phi$i$index2|0)<(0);
 if ($11) {
  ___cxa_call_unexpected(($lpad$phi$i$index|0));
  // unreachable;
 } else {
  ___resumeException($lpad$phi$i$index|0);
  // unreachable;
 }
 return 0|0;
}
function __ZN10emscripten8internal7InvokerIP11ModelObjectJEE6invokeEPFS3_vE($fn) {
 $fn = $fn|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (FUNCTION_TABLE_i[$fn & 511]()|0);
 STACKTOP = sp;return ($0|0);
}
function __ZN10emscripten8internal12operator_newI11ModelObjectJ7NVectorIdLi3EES4_S4_ddiEEEPT_DpT0_($args,$args1,$args2,$args3,$args4,$args5) {
 $args = $args|0;
 $args1 = $args1|0;
 $args2 = $args2|0;
 $args3 = +$args3;
 $args4 = +$args4;
 $args5 = $args5|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $lpad$phi$i$index = 0, $lpad$phi$i$index15 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 while(1) {
  $0 = (_malloc(96)|0);
  $1 = ($0|0)==(0|0);
  if (!($1)) {
   label = 12;
   break;
  }
  $2 = HEAP32[15648>>2]|0;HEAP32[15648>>2] = (($2+0)|0);
  $3 = ($2|0)==(0);
  if ($3) {
   label = 9;
   break;
  }
  $4 = $2;
  __THREW__ = 0;
  invoke_v($4|0);
  $5 = __THREW__; __THREW__ = 0;
  $6 = $5&1;
  if ($6) {
   label = 5;
   break;
  }
 }
 do {
  if ((label|0) == 5) {
   $7 = ___cxa_find_matching_catch(-1,-1,15712|0)|0;
   $8 = tempRet0;
   $lpad$phi$i$index = $7;$lpad$phi$i$index15 = $8;
  }
  else if ((label|0) == 9) {
   $12 = (___cxa_allocate_exception(4)|0);
   HEAP32[$12>>2] = ((15656 + 8|0));
   __THREW__ = 0;
   invoke_viii(379,($12|0),(15712|0),(374|0));
   $13 = __THREW__; __THREW__ = 0;
   $14 = $13&1;
   if ($14) {
    $9 = ___cxa_find_matching_catch(-1,-1,15712|0)|0;
    $10 = tempRet0;
    $lpad$phi$i$index = $9;$lpad$phi$i$index15 = $10;
    break;
   } else {
    // unreachable;
   }
  }
  else if ((label|0) == 12) {
   ;HEAP32[$0+0>>2]=HEAP32[$args+0>>2]|0;HEAP32[$0+4>>2]=HEAP32[$args+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$args+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$args+12>>2]|0;HEAP32[$0+16>>2]=HEAP32[$args+16>>2]|0;HEAP32[$0+20>>2]=HEAP32[$args+20>>2]|0;
   $15 = (($0) + 24|0);
   ;HEAP32[$15+0>>2]=HEAP32[$args1+0>>2]|0;HEAP32[$15+4>>2]=HEAP32[$args1+4>>2]|0;HEAP32[$15+8>>2]=HEAP32[$args1+8>>2]|0;HEAP32[$15+12>>2]=HEAP32[$args1+12>>2]|0;HEAP32[$15+16>>2]=HEAP32[$args1+16>>2]|0;HEAP32[$15+20>>2]=HEAP32[$args1+20>>2]|0;
   $16 = (($0) + 48|0);
   ;HEAP32[$16+0>>2]=HEAP32[$args2+0>>2]|0;HEAP32[$16+4>>2]=HEAP32[$args2+4>>2]|0;HEAP32[$16+8>>2]=HEAP32[$args2+8>>2]|0;HEAP32[$16+12>>2]=HEAP32[$args2+12>>2]|0;HEAP32[$16+16>>2]=HEAP32[$args2+16>>2]|0;HEAP32[$16+20>>2]=HEAP32[$args2+20>>2]|0;
   $17 = (($0) + 72|0);
   HEAPF64[$17>>3] = $args3;
   $18 = (($0) + 80|0);
   HEAPF64[$18>>3] = $args4;
   $19 = (($0) + 88|0);
   HEAP32[$19>>2] = $args5;
   $20 = (($0) + 92|0);
   HEAP8[$20>>0] = 0;
   STACKTOP = sp;return ($0|0);
  }
 } while(0);
 $11 = ($lpad$phi$i$index15|0)<(0);
 if ($11) {
  ___cxa_call_unexpected(($lpad$phi$i$index|0));
  // unreachable;
 } else {
  ___resumeException($lpad$phi$i$index|0);
  // unreachable;
 }
 return 0|0;
}
function __ZN10emscripten8internal7InvokerIP11ModelObjectJ7NVectorIdLi3EES5_S5_ddiEE6invokeEPFS3_S5_S5_S5_ddiEPS5_S9_S9_ddi($fn,$args,$args1,$args2,$args3,$args4,$args5) {
 $fn = $fn|0;
 $args = $args|0;
 $args1 = $args1|0;
 $args2 = $args2|0;
 $args3 = +$args3;
 $args4 = +$args4;
 $args5 = $args5|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $args2$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0;
 $args2$byval_copy = sp + 96|0;
 $$byval_copy1 = sp + 72|0;
 $$byval_copy = sp + 48|0;
 $0 = sp + 24|0;
 $1 = sp;
 ;HEAP32[$0+0>>2]=HEAP32[$args+0>>2]|0;HEAP32[$0+4>>2]=HEAP32[$args+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$args+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$args+12>>2]|0;HEAP32[$0+16>>2]=HEAP32[$args+16>>2]|0;HEAP32[$0+20>>2]=HEAP32[$args+20>>2]|0;
 ;HEAP32[$1+0>>2]=HEAP32[$args1+0>>2]|0;HEAP32[$1+4>>2]=HEAP32[$args1+4>>2]|0;HEAP32[$1+8>>2]=HEAP32[$args1+8>>2]|0;HEAP32[$1+12>>2]=HEAP32[$args1+12>>2]|0;HEAP32[$1+16>>2]=HEAP32[$args1+16>>2]|0;HEAP32[$1+20>>2]=HEAP32[$args1+20>>2]|0;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$0+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$0+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$0+12>>2]|0;HEAP32[$$byval_copy+16>>2]=HEAP32[$0+16>>2]|0;HEAP32[$$byval_copy+20>>2]=HEAP32[$0+20>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;HEAP32[$$byval_copy1+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$$byval_copy1+8>>2]=HEAP32[$1+8>>2]|0;HEAP32[$$byval_copy1+12>>2]=HEAP32[$1+12>>2]|0;HEAP32[$$byval_copy1+16>>2]=HEAP32[$1+16>>2]|0;HEAP32[$$byval_copy1+20>>2]=HEAP32[$1+20>>2]|0;
 ;HEAP32[$args2$byval_copy+0>>2]=HEAP32[$args2+0>>2]|0;HEAP32[$args2$byval_copy+4>>2]=HEAP32[$args2+4>>2]|0;HEAP32[$args2$byval_copy+8>>2]=HEAP32[$args2+8>>2]|0;HEAP32[$args2$byval_copy+12>>2]=HEAP32[$args2+12>>2]|0;HEAP32[$args2$byval_copy+16>>2]=HEAP32[$args2+16>>2]|0;HEAP32[$args2$byval_copy+20>>2]=HEAP32[$args2+20>>2]|0;
 $2 = (FUNCTION_TABLE_iiiiddi[$fn & 511]($$byval_copy,$$byval_copy1,$args2$byval_copy,$args3,$args4,$args5)|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN10emscripten8internal13getActualTypeI11ModelObjectEEPKNS0_7_TYPEIDEPT_($ptr) {
 $ptr = $ptr|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return (544|0);
}
function __ZN10emscripten8internal14raw_destructorI11ModelObjectEEvPT_($ptr) {
 $ptr = $ptr|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($ptr|0)==(0|0);
 if (!($0)) {
  _free($ptr);
 }
 STACKTOP = sp;return;
}
function __ZN10emscripten8internal12GetterPolicyIM7NVectorIdLi3EEKFdvEE3getIS3_EEdRKS5_RKT_($context,$ptr) {
 $context = $context|0;
 $ptr = $ptr|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $$field = HEAPU8[$context>>0]|(HEAPU8[$context+1>>0]<<8)|(HEAPU8[$context+2>>0]<<16)|(HEAPU8[$context+3>>0]<<24);
 $$index1 = (($context) + 4|0);
 $$field2 = HEAPU8[$$index1>>0]|(HEAPU8[$$index1+1>>0]<<8)|(HEAPU8[$$index1+2>>0]<<16)|(HEAPU8[$$index1+3>>0]<<24);
 $0 = $$field2 >> 1;
 $1 = (($ptr) + ($0)|0);
 $2 = $$field2 & 1;
 $3 = ($2|0)==(0);
 if ($3) {
  $7 = $$field;
  $8 = $7;
  $9 = (+FUNCTION_TABLE_di[$8 & 511]($1));
  STACKTOP = sp;return (+$9);
 } else {
  $4 = HEAP32[$1>>2]|0;
  $5 = (($4) + ($$field)|0);
  $6 = HEAP32[$5>>2]|0;
  $8 = $6;
  $9 = (+FUNCTION_TABLE_di[$8 & 511]($1));
  STACKTOP = sp;return (+$9);
 }
 return +0;
}
function __ZN10emscripten8internal12SetterPolicyIM7NVectorIdLi3EEFvdEE3setIS3_EEvRKS5_RT_d($context,$ptr,$wt) {
 $context = $context|0;
 $ptr = $ptr|0;
 $wt = +$wt;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$field = HEAPU8[$context>>0]|(HEAPU8[$context+1>>0]<<8)|(HEAPU8[$context+2>>0]<<16)|(HEAPU8[$context+3>>0]<<24);
 $$index1 = (($context) + 4|0);
 $$field2 = HEAPU8[$$index1>>0]|(HEAPU8[$$index1+1>>0]<<8)|(HEAPU8[$$index1+2>>0]<<16)|(HEAPU8[$$index1+3>>0]<<24);
 $0 = $$field2 >> 1;
 $1 = (($ptr) + ($0)|0);
 $2 = $$field2 & 1;
 $3 = ($2|0)==(0);
 if ($3) {
  $7 = $$field;
  $8 = $7;
  FUNCTION_TABLE_vid[$8 & 511]($1,$wt);
  STACKTOP = sp;return;
 } else {
  $4 = HEAP32[$1>>2]|0;
  $5 = (($4) + ($$field)|0);
  $6 = HEAP32[$5>>2]|0;
  $8 = $6;
  FUNCTION_TABLE_vid[$8 & 511]($1,$wt);
  STACKTOP = sp;return;
 }
}
function __ZN10emscripten8internal12operator_newI7NVectorIdLi3EEJddEEEPT_DpT0_($args,$args1) {
 $args = +$args;
 $args1 = +$args1;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $lpad$phi$i$index = 0, $lpad$phi$i$index2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 while(1) {
  $0 = (_malloc(24)|0);
  $1 = ($0|0)==(0|0);
  if (!($1)) {
   label = 12;
   break;
  }
  $2 = HEAP32[15648>>2]|0;HEAP32[15648>>2] = (($2+0)|0);
  $3 = ($2|0)==(0);
  if ($3) {
   label = 9;
   break;
  }
  $4 = $2;
  __THREW__ = 0;
  invoke_v($4|0);
  $5 = __THREW__; __THREW__ = 0;
  $6 = $5&1;
  if ($6) {
   label = 5;
   break;
  }
 }
 do {
  if ((label|0) == 5) {
   $7 = ___cxa_find_matching_catch(-1,-1,15712|0)|0;
   $8 = tempRet0;
   $lpad$phi$i$index = $7;$lpad$phi$i$index2 = $8;
  }
  else if ((label|0) == 9) {
   $12 = (___cxa_allocate_exception(4)|0);
   HEAP32[$12>>2] = ((15656 + 8|0));
   __THREW__ = 0;
   invoke_viii(379,($12|0),(15712|0),(374|0));
   $13 = __THREW__; __THREW__ = 0;
   $14 = $13&1;
   if ($14) {
    $9 = ___cxa_find_matching_catch(-1,-1,15712|0)|0;
    $10 = tempRet0;
    $lpad$phi$i$index = $9;$lpad$phi$i$index2 = $10;
    break;
   } else {
    // unreachable;
   }
  }
  else if ((label|0) == 12) {
   HEAPF64[$0>>3] = $args;
   $15 = (($0) + 8|0);
   HEAPF64[$15>>3] = $args1;
   STACKTOP = sp;return ($0|0);
  }
 } while(0);
 $11 = ($lpad$phi$i$index2|0)<(0);
 if ($11) {
  ___cxa_call_unexpected(($lpad$phi$i$index|0));
  // unreachable;
 } else {
  ___resumeException($lpad$phi$i$index|0);
  // unreachable;
 }
 return 0|0;
}
function __ZN10emscripten8internal7InvokerIP7NVectorIdLi3EEJddEE6invokeEPFS4_ddEdd($fn,$args,$args1) {
 $fn = $fn|0;
 $args = +$args;
 $args1 = +$args1;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (FUNCTION_TABLE_idd[$fn & 511]($args,$args1)|0);
 STACKTOP = sp;return ($0|0);
}
function __ZN10emscripten8internal13getActualTypeI7NVectorIdLi3EEEEPKNS0_7_TYPEIDEPT_($ptr) {
 $ptr = $ptr|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return (800|0);
}
function __ZN10emscripten8internal14raw_destructorI7NVectorIdLi3EEEEvPT_($ptr) {
 $ptr = $ptr|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($ptr|0)==(0|0);
 if (!($0)) {
  _free($ptr);
 }
 STACKTOP = sp;return;
}
function __GLOBAL__I_a25() {
 var $$index220 = 0, $$index222 = 0, $$index224 = 0, $$index226 = 0, $$index228 = 0, $$index230 = 0, $$index232 = 0, $$index234 = 0, $$index236 = 0, $$index238 = 0, $$index240 = 0, $$index242 = 0, $$index244 = 0, $$index246 = 0, $$index248 = 0, $$index250 = 0, $$index252 = 0, $$index254 = 0, $$index256 = 0, $0 = 0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, $args$i$i$i = 0, $args$i$i$i$i = 0, $args$i$i$i$i$i = 0, $args$i$i35$i$i = 0, $args$i$i45$i$i = 0, $args$i$i64$i$i = 0, $args$i$i66$i$i = 0, $args$i5$i$i$i = 0;
 var $args$i61$i$i = 0, $args$i7$i$i$i = 0, $args$i8$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0;
 $args$i$i66$i$i = sp + 168|0;
 $args$i$i64$i$i = sp + 136|0;
 $args$i$i$i$i$i = sp + 128|0;
 $args$i8$i$i$i = sp + 104|0;
 $args$i7$i$i$i = sp + 88|0;
 $args$i5$i$i$i = sp + 72|0;
 $args$i$i45$i$i = sp + 56|0;
 $args$i$i35$i$i = sp + 48|0;
 $args$i$i$i$i = sp + 32|0;
 $args$i61$i$i = sp + 12|0;
 $args$i$i$i = sp;
 __embind_register_class((800|0),(1016|0),(1072|0),(0|0),(1040|0),(383|0),(432|0),(0|0),(432|0),(0|0),(8|0),(1032|0),(384|0));
 HEAP32[$args$i$i$i$i>>2] = 3;
 $0 = (($args$i$i$i$i) + 4|0);
 HEAP32[$0>>2] = 1016;
 $1 = (($args$i$i$i$i) + 8|0);
 HEAP32[$1>>2] = 14952;
 $2 = (($args$i$i$i$i) + 12|0);
 HEAP32[$2>>2] = 14952;
 __embind_register_class_constructor((800|0),3,($0|0),(984|0),(385|0),(386|0));
 $3 = (_malloc(8)|0);
 $4 = ($3|0)==(0|0);
 if (!($4)) {
  HEAP8[$3>>0]=(387)&255;HEAP8[$3+1>>0]=((387)>>8)&255;HEAP8[$3+2>>0]=((387)>>16)&255;HEAP8[$3+3>>0]=(387)>>24;
  $$index220 = (($3) + 4|0);
  HEAP8[$$index220>>0]=0&255;HEAP8[$$index220+1>>0]=(0>>8)&255;HEAP8[$$index220+2>>0]=(0>>16)&255;HEAP8[$$index220+3>>0]=0>>24;
 }
 $5 = (_malloc(8)|0);
 $6 = ($5|0)==(0|0);
 if (!($6)) {
  HEAP8[$5>>0]=(388)&255;HEAP8[$5+1>>0]=((388)>>8)&255;HEAP8[$5+2>>0]=((388)>>16)&255;HEAP8[$5+3>>0]=(388)>>24;
  $$index222 = (($5) + 4|0);
  HEAP8[$$index222>>0]=0&255;HEAP8[$$index222+1>>0]=(0>>8)&255;HEAP8[$$index222+2>>0]=(0>>16)&255;HEAP8[$$index222+3>>0]=0>>24;
 }
 __embind_register_class_property((800|0),(16|0),(14952|0),(976|0),(389|0),($3|0),(14952|0),(968|0),(390|0),($5|0));
 $7 = (_malloc(8)|0);
 $8 = ($7|0)==(0|0);
 if (!($8)) {
  HEAP8[$7>>0]=(391)&255;HEAP8[$7+1>>0]=((391)>>8)&255;HEAP8[$7+2>>0]=((391)>>16)&255;HEAP8[$7+3>>0]=(391)>>24;
  $$index224 = (($7) + 4|0);
  HEAP8[$$index224>>0]=0&255;HEAP8[$$index224+1>>0]=(0>>8)&255;HEAP8[$$index224+2>>0]=(0>>16)&255;HEAP8[$$index224+3>>0]=0>>24;
 }
 $9 = (_malloc(8)|0);
 $10 = ($9|0)==(0|0);
 if (!($10)) {
  HEAP8[$9>>0]=(392)&255;HEAP8[$9+1>>0]=((392)>>8)&255;HEAP8[$9+2>>0]=((392)>>16)&255;HEAP8[$9+3>>0]=(392)>>24;
  $$index226 = (($9) + 4|0);
  HEAP8[$$index226>>0]=0&255;HEAP8[$$index226+1>>0]=(0>>8)&255;HEAP8[$$index226+2>>0]=(0>>16)&255;HEAP8[$$index226+3>>0]=0>>24;
 }
 __embind_register_class_property((800|0),(24|0),(14952|0),(976|0),(389|0),($7|0),(14952|0),(968|0),(390|0),($9|0));
 __embind_register_class((544|0),(872|0),(952|0),(0|0),(928|0),(393|0),(432|0),(0|0),(432|0),(0|0),(32|0),(920|0),(394|0));
 HEAP32[$args$i$i64$i$i>>2] = 7;
 $11 = (($args$i$i64$i$i) + 4|0);
 HEAP32[$11>>2] = 872;
 $12 = (($args$i$i64$i$i) + 8|0);
 HEAP32[$12>>2] = 800;
 $13 = (($args$i$i64$i$i) + 12|0);
 HEAP32[$13>>2] = 800;
 $14 = (($args$i$i64$i$i) + 16|0);
 HEAP32[$14>>2] = 800;
 $15 = (($args$i$i64$i$i) + 20|0);
 HEAP32[$15>>2] = 14952;
 $16 = (($args$i$i64$i$i) + 24|0);
 HEAP32[$16>>2] = 14952;
 $17 = (($args$i$i64$i$i) + 28|0);
 HEAP32[$17>>2] = 14872;
 __embind_register_class_constructor((544|0),7,($11|0),(904|0),(395|0),(396|0));
 HEAP32[$args$i$i66$i$i>>2] = 1;
 $18 = (($args$i$i66$i$i) + 4|0);
 HEAP32[$18>>2] = 872;
 __embind_register_class_constructor((544|0),1,($18|0),(896|0),(397|0),(398|0));
 $19 = (_malloc(8)|0);
 $20 = ($19|0)==(0|0);
 if (!($20)) {
  HEAP8[$19>>0]=(399)&255;HEAP8[$19+1>>0]=((399)>>8)&255;HEAP8[$19+2>>0]=((399)>>16)&255;HEAP8[$19+3>>0]=(399)>>24;
  $$index228 = (($19) + 4|0);
  HEAP8[$$index228>>0]=0&255;HEAP8[$$index228+1>>0]=(0>>8)&255;HEAP8[$$index228+2>>0]=(0>>16)&255;HEAP8[$$index228+3>>0]=0>>24;
 }
 __embind_register_class_property((544|0),(48|0),(14776|0),(888|0),(400|0),($19|0),(0|0),(0|0),(0|0),(0|0));
 HEAP32[$args$i$i$i>>2] = 2;
 $21 = (($args$i$i$i) + 4|0);
 HEAP32[$21>>2] = 14744;
 $22 = (($args$i$i$i) + 8|0);
 HEAP32[$22>>2] = 872;
 $23 = (_malloc(8)|0);
 $24 = ($23|0)==(0|0);
 if (!($24)) {
  HEAP8[$23>>0]=(401)&255;HEAP8[$23+1>>0]=((401)>>8)&255;HEAP8[$23+2>>0]=((401)>>16)&255;HEAP8[$23+3>>0]=(401)>>24;
  $$index230 = (($23) + 4|0);
  HEAP8[$$index230>>0]=0&255;HEAP8[$$index230+1>>0]=(0>>8)&255;HEAP8[$$index230+2>>0]=(0>>16)&255;HEAP8[$$index230+3>>0]=0>>24;
 }
 __embind_register_class_function((544|0),(56|0),2,($21|0),(848|0),(402|0),($23|0),0);
 $25 = (_malloc(8)|0);
 $26 = ($25|0)==(0|0);
 if (!($26)) {
  HEAP8[$25>>0]=(403)&255;HEAP8[$25+1>>0]=((403)>>8)&255;HEAP8[$25+2>>0]=((403)>>16)&255;HEAP8[$25+3>>0]=(403)>>24;
  $$index232 = (($25) + 4|0);
  HEAP8[$$index232>>0]=0&255;HEAP8[$$index232+1>>0]=(0>>8)&255;HEAP8[$$index232+2>>0]=(0>>16)&255;HEAP8[$$index232+3>>0]=0>>24;
 }
 $27 = (_malloc(8)|0);
 $28 = ($27|0)==(0|0);
 if (!($28)) {
  HEAP8[$27>>0]=(404)&255;HEAP8[$27+1>>0]=((404)>>8)&255;HEAP8[$27+2>>0]=((404)>>16)&255;HEAP8[$27+3>>0]=(404)>>24;
  $$index234 = (($27) + 4|0);
  HEAP8[$$index234>>0]=0&255;HEAP8[$$index234+1>>0]=(0>>8)&255;HEAP8[$$index234+2>>0]=(0>>16)&255;HEAP8[$$index234+3>>0]=0>>24;
 }
 __embind_register_class_property((544|0),(64|0),(14952|0),(840|0),(405|0),($25|0),(14952|0),(832|0),(406|0),($27|0));
 $29 = (_malloc(8)|0);
 $30 = ($29|0)==(0|0);
 if (!($30)) {
  HEAP8[$29>>0]=(407)&255;HEAP8[$29+1>>0]=((407)>>8)&255;HEAP8[$29+2>>0]=((407)>>16)&255;HEAP8[$29+3>>0]=(407)>>24;
  $$index236 = (($29) + 4|0);
  HEAP8[$$index236>>0]=0&255;HEAP8[$$index236+1>>0]=(0>>8)&255;HEAP8[$$index236+2>>0]=(0>>16)&255;HEAP8[$$index236+3>>0]=0>>24;
 }
 $31 = (_malloc(8)|0);
 $32 = ($31|0)==(0|0);
 if (!($32)) {
  HEAP8[$31>>0]=(408)&255;HEAP8[$31+1>>0]=((408)>>8)&255;HEAP8[$31+2>>0]=((408)>>16)&255;HEAP8[$31+3>>0]=(408)>>24;
  $$index238 = (($31) + 4|0);
  HEAP8[$$index238>>0]=0&255;HEAP8[$$index238+1>>0]=(0>>8)&255;HEAP8[$$index238+2>>0]=(0>>16)&255;HEAP8[$$index238+3>>0]=0>>24;
 }
 __embind_register_class_property((544|0),(72|0),(14872|0),(824|0),(409|0),($29|0),(14872|0),(816|0),(410|0),($31|0));
 $33 = (_malloc(8)|0);
 $34 = ($33|0)==(0|0);
 if (!($34)) {
  HEAP8[$33>>0]=(411)&255;HEAP8[$33+1>>0]=((411)>>8)&255;HEAP8[$33+2>>0]=((411)>>16)&255;HEAP8[$33+3>>0]=(411)>>24;
  $$index240 = (($33) + 4|0);
  HEAP8[$$index240>>0]=0&255;HEAP8[$$index240+1>>0]=(0>>8)&255;HEAP8[$$index240+2>>0]=(0>>16)&255;HEAP8[$$index240+3>>0]=0>>24;
 }
 $35 = (_malloc(8)|0);
 $36 = ($35|0)==(0|0);
 if (!($36)) {
  HEAP8[$35>>0]=(412)&255;HEAP8[$35+1>>0]=((412)>>8)&255;HEAP8[$35+2>>0]=((412)>>16)&255;HEAP8[$35+3>>0]=(412)>>24;
  $$index242 = (($35) + 4|0);
  HEAP8[$$index242>>0]=0&255;HEAP8[$$index242+1>>0]=(0>>8)&255;HEAP8[$$index242+2>>0]=(0>>16)&255;HEAP8[$$index242+3>>0]=0>>24;
 }
 __embind_register_class_property((544|0),(80|0),(800|0),(808|0),(413|0),($33|0),(800|0),(776|0),(414|0),($35|0));
 $37 = (_malloc(8)|0);
 $38 = ($37|0)==(0|0);
 if (!($38)) {
  HEAP8[$37>>0]=(415)&255;HEAP8[$37+1>>0]=((415)>>8)&255;HEAP8[$37+2>>0]=((415)>>16)&255;HEAP8[$37+3>>0]=(415)>>24;
  $$index244 = (($37) + 4|0);
  HEAP8[$$index244>>0]=0&255;HEAP8[$$index244+1>>0]=(0>>8)&255;HEAP8[$$index244+2>>0]=(0>>16)&255;HEAP8[$$index244+3>>0]=0>>24;
 }
 $39 = (_malloc(8)|0);
 $40 = ($39|0)==(0|0);
 if (!($40)) {
  HEAP8[$39>>0]=(416)&255;HEAP8[$39+1>>0]=((416)>>8)&255;HEAP8[$39+2>>0]=((416)>>16)&255;HEAP8[$39+3>>0]=(416)>>24;
  $$index246 = (($39) + 4|0);
  HEAP8[$$index246>>0]=0&255;HEAP8[$$index246+1>>0]=(0>>8)&255;HEAP8[$$index246+2>>0]=(0>>16)&255;HEAP8[$$index246+3>>0]=0>>24;
 }
 __embind_register_class_property((544|0),(96|0),(800|0),(808|0),(413|0),($37|0),(800|0),(776|0),(414|0),($39|0));
 $41 = (_malloc(8)|0);
 $42 = ($41|0)==(0|0);
 if (!($42)) {
  HEAP8[$41>>0]=(417)&255;HEAP8[$41+1>>0]=((417)>>8)&255;HEAP8[$41+2>>0]=((417)>>16)&255;HEAP8[$41+3>>0]=(417)>>24;
  $$index248 = (($41) + 4|0);
  HEAP8[$$index248>>0]=0&255;HEAP8[$$index248+1>>0]=(0>>8)&255;HEAP8[$$index248+2>>0]=(0>>16)&255;HEAP8[$$index248+3>>0]=0>>24;
 }
 $43 = (_malloc(8)|0);
 $44 = ($43|0)==(0|0);
 if (!($44)) {
  HEAP8[$43>>0]=(418)&255;HEAP8[$43+1>>0]=((418)>>8)&255;HEAP8[$43+2>>0]=((418)>>16)&255;HEAP8[$43+3>>0]=(418)>>24;
  $$index250 = (($43) + 4|0);
  HEAP8[$$index250>>0]=0&255;HEAP8[$$index250+1>>0]=(0>>8)&255;HEAP8[$$index250+2>>0]=(0>>16)&255;HEAP8[$$index250+3>>0]=0>>24;
 }
 __embind_register_class_property((544|0),(112|0),(800|0),(808|0),(413|0),($41|0),(800|0),(776|0),(414|0),($43|0));
 __embind_register_class((368|0),(736|0),(656|0),(0|0),(768|0),(419|0),(432|0),(0|0),(432|0),(0|0),(120|0),(760|0),(420|0));
 HEAP32[$args$i$i$i$i$i>>2] = 1;
 $45 = (($args$i$i$i$i$i) + 4|0);
 HEAP32[$45>>2] = 736;
 __embind_register_class_constructor((368|0),1,($45|0),(752|0),(421|0),(422|0));
 HEAP32[$args$i$i45$i$i>>2] = 3;
 $46 = (($args$i$i45$i$i) + 4|0);
 HEAP32[$46>>2] = 14744;
 $47 = (($args$i$i45$i$i) + 8|0);
 HEAP32[$47>>2] = 736;
 $48 = (($args$i$i45$i$i) + 12|0);
 HEAP32[$48>>2] = 544;
 $49 = (_malloc(8)|0);
 $50 = ($49|0)==(0|0);
 if (!($50)) {
  HEAP8[$49>>0]=(423)&255;HEAP8[$49+1>>0]=((423)>>8)&255;HEAP8[$49+2>>0]=((423)>>16)&255;HEAP8[$49+3>>0]=(423)>>24;
  $$index252 = (($49) + 4|0);
  HEAP8[$$index252>>0]=0&255;HEAP8[$$index252+1>>0]=(0>>8)&255;HEAP8[$$index252+2>>0]=(0>>16)&255;HEAP8[$$index252+3>>0]=0>>24;
 }
 __embind_register_class_function((368|0),(480|0),3,($46|0),(672|0),(424|0),($49|0),0);
 HEAP32[$args$i5$i$i$i>>2] = 2;
 $51 = (($args$i5$i$i$i) + 4|0);
 HEAP32[$51>>2] = 14888;
 $52 = (($args$i5$i$i$i) + 8|0);
 HEAP32[$52>>2] = 656;
 $53 = (_malloc(8)|0);
 $54 = ($53|0)==(0|0);
 if (!($54)) {
  HEAP8[$53>>0]=(425)&255;HEAP8[$53+1>>0]=((425)>>8)&255;HEAP8[$53+2>>0]=((425)>>16)&255;HEAP8[$53+3>>0]=(425)>>24;
  $$index254 = (($53) + 4|0);
  HEAP8[$$index254>>0]=0&255;HEAP8[$$index254+1>>0]=(0>>8)&255;HEAP8[$$index254+2>>0]=(0>>16)&255;HEAP8[$$index254+3>>0]=0>>24;
 }
 __embind_register_class_function((368|0),(496|0),2,($51|0),(592|0),(426|0),($53|0),0);
 HEAP32[$args$i7$i$i$i>>2] = 3;
 $55 = (($args$i7$i$i$i) + 4|0);
 HEAP32[$55>>2] = 584;
 $56 = (($args$i7$i$i$i) + 8|0);
 HEAP32[$56>>2] = 368;
 $57 = (($args$i7$i$i$i) + 12|0);
 HEAP32[$57>>2] = 14888;
 $58 = (_malloc(4)|0);
 $59 = ($58|0)==(0|0);
 if (!($59)) {
  HEAP32[$58>>2] = 427;
 }
 __embind_register_class_function((368|0),(504|0),3,($55|0),(552|0),(428|0),($58|0),0);
 HEAP32[$args$i8$i$i$i>>2] = 4;
 $60 = (($args$i8$i$i$i) + 4|0);
 HEAP32[$60>>2] = 14776;
 $61 = (($args$i8$i$i$i) + 8|0);
 HEAP32[$61>>2] = 368;
 $62 = (($args$i8$i$i$i) + 12|0);
 HEAP32[$62>>2] = 14888;
 $63 = (($args$i8$i$i$i) + 16|0);
 HEAP32[$63>>2] = 544;
 $64 = (_malloc(4)|0);
 $65 = ($64|0)==(0|0);
 if (!($65)) {
  HEAP32[$64>>2] = 429;
 }
 __embind_register_class_function((368|0),(512|0),4,($60|0),(520|0),(430|0),($64|0),0);
 __embind_register_class((168|0),(400|0),(464|0),(0|0),(440|0),(431|0),(432|0),(0|0),(432|0),(0|0),(136|0),(424|0),(432|0));
 HEAP32[$args$i$i35$i$i>>2] = 1;
 $66 = (($args$i$i35$i$i) + 4|0);
 HEAP32[$66>>2] = 400;
 __embind_register_class_constructor((168|0),1,($66|0),(416|0),(433|0),(434|0));
 HEAP32[$args$i61$i$i>>2] = 4;
 $67 = (($args$i61$i$i) + 4|0);
 HEAP32[$67>>2] = 14744;
 $68 = (($args$i61$i$i) + 8|0);
 HEAP32[$68>>2] = 400;
 $69 = (($args$i61$i$i) + 12|0);
 HEAP32[$69>>2] = 368;
 $70 = (($args$i61$i$i) + 16|0);
 HEAP32[$70>>2] = 14952;
 $71 = (_malloc(8)|0);
 $72 = ($71|0)==(0|0);
 if ($72) {
  __embind_register_class_function((168|0),(144|0),4,($67|0),(152|0),(436|0),($71|0),0);
  STACKTOP = sp;return;
 }
 HEAP8[$71>>0]=(435)&255;HEAP8[$71+1>>0]=((435)>>8)&255;HEAP8[$71+2>>0]=((435)>>16)&255;HEAP8[$71+3>>0]=(435)>>24;
 $$index256 = (($71) + 4|0);
 HEAP8[$$index256>>0]=0&255;HEAP8[$$index256+1>>0]=(0>>8)&255;HEAP8[$$index256+2>>0]=(0>>16)&255;HEAP8[$$index256+3>>0]=0>>24;
 __embind_register_class_function((168|0),(144|0),4,($67|0),(152|0),(436|0),($71|0),0);
 STACKTOP = sp;return;
}
function ___getTypeName($ti) {
 $ti = $ti|0;
 var $$0$i = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($ti) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_strlen(($1|0))|0);
 $3 = (($2) + 1)|0;
 $4 = (_malloc($3)|0);
 $5 = ($4|0)==(0|0);
 if ($5) {
  $$0$i = 0;
  STACKTOP = sp;return ($$0$i|0);
 }
 _memcpy(($4|0),($1|0),($3|0))|0;
 $$0$i = $4;
 STACKTOP = sp;return ($$0$i|0);
}
function __GLOBAL__I_a46() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __embind_register_void((14744|0),(1088|0));
 __embind_register_bool((14776|0),(1096|0),1,1,0);
 __embind_register_integer((14792|0),(1104|0),1,-128,127);
 __embind_register_integer((14824|0),(1112|0),1,-128,127);
 __embind_register_integer((14808|0),(1128|0),1,0,255);
 __embind_register_integer((14840|0),(1144|0),2,-32768,32767);
 __embind_register_integer((14856|0),(1152|0),2,0,65535);
 __embind_register_integer((14872|0),(1168|0),4,-2147483648,2147483647);
 __embind_register_integer((14888|0),(1176|0),4,0,-1);
 __embind_register_integer((14904|0),(1192|0),4,-2147483648,2147483647);
 __embind_register_integer((14920|0),(1200|0),4,0,-1);
 __embind_register_float((14936|0),(1216|0),4);
 __embind_register_float((14952|0),(1224|0),8);
 __embind_register_std_string((1672|0),(1232|0));
 __embind_register_std_string((1584|0),(1248|0));
 __embind_register_std_wstring((1496|0),4,(1288|0));
 __embind_register_emval((584|0),(1304|0));
 __embind_register_memory_view((1376|0),(1320|0));
 STACKTOP = sp;return;
}
function __ZNSt3__18ios_base4InitD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __THREW__ = 0;
 invoke_vi(437,(1784|0));
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 if (!($1)) {
  __THREW__ = 0;
  invoke_vi(437,(1960|0));
  $2 = __THREW__; __THREW__ = 0;
  $3 = $2&1;
  if (!($3)) {
   __THREW__ = 0;
   invoke_vi(438,(2136|0));
   $4 = __THREW__; __THREW__ = 0;
   $5 = $4&1;
   if (!($5)) {
    __THREW__ = 0;
    invoke_vi(438,(2312|0));
    $6 = __THREW__; __THREW__ = 0;
    $7 = $6&1;
    if (!($7)) {
     STACKTOP = sp;return;
    }
   }
  }
 }
 $8 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
 $9 = tempRet0;
 ___clang_call_terminate($8);
 // unreachable;
}
function __ZNSt3__111__stdoutbufIwED1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((3760 + 8|0));
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 4|0);
 $3 = HEAP32[$2>>2]|0;HEAP32[$2>>2] = (($3+-1)|0);
 $4 = ($3|0)==(0);
 if (!($4)) {
  STACKTOP = sp;return;
 }
 $5 = HEAP32[$1>>2]|0;
 $6 = (($5) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 FUNCTION_TABLE_vi[$7 & 511]($1);
 STACKTOP = sp;return;
}
function __ZNSt3__111__stdoutbufIwED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((3760 + 8|0));
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 4|0);
 $3 = HEAP32[$2>>2]|0;HEAP32[$2>>2] = (($3+-1)|0);
 $4 = ($3|0)==(0);
 if (!($4)) {
  _free($this);
  STACKTOP = sp;return;
 }
 $5 = HEAP32[$1>>2]|0;
 $6 = (($5) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 FUNCTION_TABLE_vi[$7 & 511]($1);
 _free($this);
 STACKTOP = sp;return;
}
function __ZNSt3__111__stdoutbufIwE5imbueERKNS_6localeE($this,$__loc) {
 $this = $this|0;
 $__loc = $__loc|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__loc$idx$val = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + 24|0);
 $2 = HEAP32[$1>>2]|0;
 (FUNCTION_TABLE_ii[$2 & 511]($this)|0);
 $__loc$idx$val = HEAP32[$__loc>>2]|0;
 $3 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc$idx$val,6488)|0);
 $4 = (($this) + 36|0);
 HEAP32[$4>>2] = $3;
 $5 = HEAP32[$3>>2]|0;
 $6 = (($5) + 28|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (FUNCTION_TABLE_ii[$7 & 511]($3)|0);
 $9 = (($this) + 44|0);
 $10 = $8&1;
 HEAP8[$9>>0] = $10;
 STACKTOP = sp;return;
}
function __ZNSt3__111__stdoutbufIwE4syncEv($this) {
 $this = $this|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $__extbe = 0, $__extbuf = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $__extbuf = sp + 8|0;
 $__extbe = sp;
 $0 = (($this) + 36|0);
 $1 = (($this) + 40|0);
 $2 = (($__extbuf) + 8|0);
 $3 = $__extbuf;
 $4 = (($this) + 32|0);
 while(1) {
  $5 = HEAP32[$0>>2]|0;
  $6 = HEAP32[$1>>2]|0;
  $7 = HEAP32[$5>>2]|0;
  $8 = (($7) + 20|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = (FUNCTION_TABLE_iiiiii[$9 & 511]($5,$6,$__extbuf,$2,$__extbe)|0);
  $11 = HEAP32[$__extbe>>2]|0;
  $12 = $11;
  $13 = (($12) - ($3))|0;
  $14 = HEAP32[$4>>2]|0;
  $15 = (_fwrite(($__extbuf|0),1,($13|0),($14|0))|0);
  $16 = ($15|0)==($13|0);
  if (!($16)) {
   $$0 = -1;
   label = 5;
   break;
  }
  if ((($10|0) == 2)) {
   $$0 = -1;
   label = 5;
   break;
  } else if (!((($10|0) == 1))) {
   label = 4;
   break;
  }
 }
 if ((label|0) == 4) {
  $17 = HEAP32[$4>>2]|0;
  $18 = (_fflush(($17|0))|0);
  $not$ = ($18|0)!=(0);
  $$ = $not$ << 31 >> 31;
  $$0 = $$;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 5) {
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function __ZNSt3__111__stdoutbufIwE6xsputnEPKwi($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $$0 = 0, $$012 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__i$03 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 44|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(0);
 if (!($2)) {
  $4 = (($this) + 32|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (_fwrite(($__s|0),4,($__n|0),($5|0))|0);
  $$0 = $6;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = ($__n|0)>(0);
 if ($3) {
  $$012 = $__s;$__i$03 = 0;
 } else {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 while(1) {
  $7 = HEAP32[$this>>2]|0;
  $8 = (($7) + 52|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = HEAP32[$$012>>2]|0;
  $11 = (FUNCTION_TABLE_iii[$9 & 511]($this,$10)|0);
  $12 = ($11|0)==(-1);
  if ($12) {
   $$0 = $__i$03;
   label = 6;
   break;
  }
  $13 = (($__i$03) + 1)|0;
  $14 = (($$012) + 4|0);
  $15 = ($13|0)<($__n|0);
  if ($15) {
   $$012 = $14;$__i$03 = $13;
  } else {
   $$0 = $13;
   label = 6;
   break;
  }
 }
 if ((label|0) == 6) {
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function __ZNSt3__111__stdoutbufIwE8overflowEj($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $$0 = 0, $$__c$i = 0, $$pbase$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__1buf = 0, $__e = 0;
 var $__extbe = 0, $__extbuf = 0, $pbase$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $__extbuf = sp + 16|0;
 $__1buf = sp + 8|0;
 $__extbe = sp + 4|0;
 $__e = sp;
 $0 = ($__c|0)==(-1);
 L1: do {
  if (!($0)) {
   HEAP32[$__1buf>>2] = $__c;
   $1 = (($this) + 44|0);
   $2 = HEAP8[$1>>0]|0;
   $3 = ($2<<24>>24)==(0);
   if (!($3)) {
    $4 = (($this) + 32|0);
    $5 = HEAP32[$4>>2]|0;
    $6 = (_fwrite(($__1buf|0),4,1,($5|0))|0);
    $7 = ($6|0)==(1);
    if ($7) {
     break;
    } else {
     $$0 = -1;
    }
    STACKTOP = sp;return ($$0|0);
   }
   HEAP32[$__extbe>>2] = $__extbuf;
   $8 = (($__1buf) + 4|0);
   $9 = (($this) + 36|0);
   $10 = (($this) + 40|0);
   $11 = (($__extbuf) + 8|0);
   $12 = $__extbuf;
   $13 = (($this) + 32|0);
   $pbase$0 = $__1buf;
   while(1) {
    $14 = HEAP32[$9>>2]|0;
    $15 = HEAP32[$10>>2]|0;
    $16 = HEAP32[$14>>2]|0;
    $17 = (($16) + 12|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = (FUNCTION_TABLE_iiiiiiiii[$18 & 511]($14,$15,$pbase$0,$8,$__e,$__extbuf,$11,$__extbe)|0);
    $20 = HEAP32[$__e>>2]|0;
    $21 = ($20|0)==($pbase$0|0);
    if ($21) {
     $$0 = -1;
     label = 12;
     break;
    }
    $22 = ($19|0)==(3);
    if ($22) {
     label = 7;
     break;
    }
    $26 = ($19|0)==(1);
    $27 = ($19>>>0)<(2);
    if (!($27)) {
     $$0 = -1;
     label = 12;
     break;
    }
    $28 = HEAP32[$__extbe>>2]|0;
    $29 = $28;
    $30 = (($29) - ($12))|0;
    $31 = HEAP32[$13>>2]|0;
    $32 = (_fwrite(($__extbuf|0),1,($30|0),($31|0))|0);
    $33 = ($32|0)==($30|0);
    if (!($33)) {
     $$0 = -1;
     label = 12;
     break;
    }
    $34 = HEAP32[$__e>>2]|0;
    $$pbase$0 = $26 ? $34 : $pbase$0;
    if ($26) {
     $pbase$0 = $$pbase$0;
    } else {
     break L1;
    }
   }
   if ((label|0) == 7) {
    $23 = HEAP32[$13>>2]|0;
    $24 = (_fwrite(($pbase$0|0),1,1,($23|0))|0);
    $25 = ($24|0)==(1);
    if ($25) {
     break;
    } else {
     $$0 = -1;
    }
    STACKTOP = sp;return ($$0|0);
   }
   else if ((label|0) == 12) {
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 $$__c$i = $0 ? 0 : $__c;
 $$0 = $$__c$i;
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt3__110__stdinbufIwED1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((3760 + 8|0));
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 4|0);
 $3 = HEAP32[$2>>2]|0;HEAP32[$2>>2] = (($3+-1)|0);
 $4 = ($3|0)==(0);
 if (!($4)) {
  STACKTOP = sp;return;
 }
 $5 = HEAP32[$1>>2]|0;
 $6 = (($5) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 FUNCTION_TABLE_vi[$7 & 511]($1);
 STACKTOP = sp;return;
}
function __ZNSt3__110__stdinbufIwED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((3760 + 8|0));
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 4|0);
 $3 = HEAP32[$2>>2]|0;HEAP32[$2>>2] = (($3+-1)|0);
 $4 = ($3|0)==(0);
 if (!($4)) {
  _free($this);
  STACKTOP = sp;return;
 }
 $5 = HEAP32[$1>>2]|0;
 $6 = (($5) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 FUNCTION_TABLE_vi[$7 & 511]($1);
 _free($this);
 STACKTOP = sp;return;
}
function __ZNSt3__110__stdinbufIwE5imbueERKNS_6localeE($this,$__loc) {
 $this = $this|0;
 $__loc = $__loc|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__loc$idx$val = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__loc$idx$val = HEAP32[$__loc>>2]|0;
 $0 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc$idx$val,6488)|0);
 $1 = (($this) + 36|0);
 HEAP32[$1>>2] = $0;
 $2 = HEAP32[$0>>2]|0;
 $3 = (($2) + 24|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (FUNCTION_TABLE_ii[$4 & 511]($0)|0);
 $6 = (($this) + 44|0);
 HEAP32[$6>>2] = $5;
 $7 = HEAP32[$1>>2]|0;
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + 28|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (FUNCTION_TABLE_ii[$10 & 511]($7)|0);
 $12 = (($this) + 53|0);
 $13 = $11&1;
 HEAP8[$12>>0] = $13;
 $14 = HEAP32[$6>>2]|0;
 $15 = ($14|0)>(8);
 if ($15) {
  __ZNSt3__121__throw_runtime_errorEPKc(2976);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function __ZNSt3__110__stdinbufIwE9underflowEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__110__stdinbufIwE9__getcharEb($this,0)|0);
 STACKTOP = sp;return ($0|0);
}
function __ZNSt3__110__stdinbufIwE5uflowEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__110__stdinbufIwE9__getcharEb($this,1)|0);
 STACKTOP = sp;return ($0|0);
}
function __ZNSt3__110__stdinbufIwE9pbackfailEj($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__ci = 0, $__enxt = 0, $__extbuf = 0, $__inxt = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $__extbuf = sp + 16|0;
 $__enxt = sp + 8|0;
 $__ci = sp + 4|0;
 $__inxt = sp;
 $0 = ($__c|0)==(-1);
 $1 = (($this) + 52|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = ($2<<24>>24)!=(0);
 if ($0) {
  if ($3) {
   $$01 = -1;
   STACKTOP = sp;return ($$01|0);
  }
  $4 = (($this) + 48|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)!=(-1);
  $7 = $6&1;
  HEAP8[$1>>0] = $7;
  $$01 = $5;
  STACKTOP = sp;return ($$01|0);
 }
 $8 = (($this) + 48|0);
 L8: do {
  if ($3) {
   $9 = HEAP32[$8>>2]|0;
   HEAP32[$__ci>>2] = $9;
   $10 = (($this) + 36|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = (($this) + 40|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = (($__ci) + 4|0);
   $15 = (($__extbuf) + 8|0);
   $16 = HEAP32[$11>>2]|0;
   $17 = (($16) + 12|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = (FUNCTION_TABLE_iiiiiiiii[$18 & 511]($11,$13,$__ci,$14,$__inxt,$__extbuf,$15,$__enxt)|0);
   if ((($19|0) == 1) | (($19|0) == 2)) {
    $$01 = -1;
    STACKTOP = sp;return ($$01|0);
   } else if ((($19|0) == 3)) {
    $20 = HEAP32[$8>>2]|0;
    $21 = $20&255;
    HEAP8[$__extbuf>>0] = $21;
    $22 = (($__extbuf) + 1|0);
    HEAP32[$__enxt>>2] = $22;
   }
   $23 = (($this) + 32|0);
   while(1) {
    $24 = HEAP32[$__enxt>>2]|0;
    $25 = ($24>>>0)>($__extbuf>>>0);
    if (!($25)) {
     break L8;
    }
    $26 = (($24) + -1|0);
    HEAP32[$__enxt>>2] = $26;
    $27 = HEAP8[$26>>0]|0;
    $28 = $27 << 24 >> 24;
    $29 = HEAP32[$23>>2]|0;
    $30 = (_ungetc(($28|0),($29|0))|0);
    $31 = ($30|0)==(-1);
    if ($31) {
     $$01 = -1;
     break;
    }
   }
   STACKTOP = sp;return ($$01|0);
  }
 } while(0);
 HEAP32[$8>>2] = $__c;
 HEAP8[$1>>0] = 1;
 $$01 = $__c;
 STACKTOP = sp;return ($$01|0);
}
function __ZNSt3__110__stdinbufIwE9__getcharEb($this,$__consume) {
 $this = $this|0;
 $__consume = $__consume|0;
 var $$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $7 = 0, $8 = 0, $9 = 0, $__1buf = 0, $__enxt = 0, $__extbuf = 0, $__i$09 = 0, $__i2$0 = 0, $__inxt = 0, $__nread$0 = 0, $__nread$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $__extbuf = sp + 16|0;
 $__1buf = sp + 8|0;
 $__enxt = sp + 4|0;
 $__inxt = sp;
 $0 = (($this) + 52|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(0);
 if (!($2)) {
  $3 = (($this) + 48|0);
  $4 = HEAP32[$3>>2]|0;
  if (!($__consume)) {
   $$0 = $4;
   STACKTOP = sp;return ($$0|0);
  }
  HEAP32[$3>>2] = -1;
  HEAP8[$0>>0] = 0;
  $$0 = $4;
  STACKTOP = sp;return ($$0|0);
 }
 $5 = (($this) + 44|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)>(1);
 $8 = $7 ? $6 : 1;
 $9 = ($8|0)>(0);
 L8: do {
  if ($9) {
   $10 = (($this) + 32|0);
   $__i$09 = 0;
   while(1) {
    $11 = HEAP32[$10>>2]|0;
    $12 = (_getc(($11|0))|0);
    $13 = ($12|0)==(-1);
    if ($13) {
     $$0 = -1;
     break;
    }
    $14 = $12&255;
    $15 = (($__extbuf) + ($__i$09)|0);
    HEAP8[$15>>0] = $14;
    $16 = (($__i$09) + 1)|0;
    $17 = ($16|0)<($8|0);
    if ($17) {
     $__i$09 = $16;
    } else {
     break L8;
    }
   }
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 $18 = (($this) + 53|0);
 $19 = HEAP8[$18>>0]|0;
 $20 = ($19<<24>>24)==(0);
 L15: do {
  if ($20) {
   $21 = (($this) + 40|0);
   $22 = (($this) + 36|0);
   $23 = (($__1buf) + 4|0);
   $24 = (($this) + 32|0);
   $__nread$0 = $8;
   while(1) {
    $27 = HEAP32[$21>>2]|0;
    $28 = $27;
    $29 = $28;
    $30 = HEAP32[$29>>2]|0;
    $31 = (($28) + 4)|0;
    $32 = $31;
    $33 = HEAP32[$32>>2]|0;
    $34 = HEAP32[$22>>2]|0;
    $35 = (($__extbuf) + ($__nread$0)|0);
    $36 = HEAP32[$34>>2]|0;
    $37 = (($36) + 16|0);
    $38 = HEAP32[$37>>2]|0;
    $39 = (FUNCTION_TABLE_iiiiiiiii[$38 & 511]($34,$27,$__extbuf,$35,$__enxt,$__1buf,$23,$__inxt)|0);
    if ((($39|0) == 3)) {
     label = 14;
     break;
    } else if ((($39|0) == 2)) {
     $$0 = -1;
     label = 22;
     break;
    } else if (!((($39|0) == 1))) {
     $__nread$2 = $__nread$0;
     break L15;
    }
    $40 = HEAP32[$21>>2]|0;
    $41 = $40;
    $42 = $41;
    HEAP32[$42>>2] = $30;
    $43 = (($41) + 4)|0;
    $44 = $43;
    HEAP32[$44>>2] = $33;
    $45 = ($__nread$0|0)==(8);
    if ($45) {
     $$0 = -1;
     label = 22;
     break;
    }
    $46 = HEAP32[$24>>2]|0;
    $47 = (_getc(($46|0))|0);
    $48 = ($47|0)==(-1);
    if ($48) {
     $$0 = -1;
     label = 22;
     break;
    }
    $51 = $47&255;
    HEAP8[$35>>0] = $51;
    $52 = (($__nread$0) + 1)|0;
    $__nread$0 = $52;
   }
   if ((label|0) == 14) {
    $49 = HEAP8[$__extbuf>>0]|0;
    $50 = $49 << 24 >> 24;
    HEAP32[$__1buf>>2] = $50;
    $__nread$2 = $__nread$0;
    break;
   }
   else if ((label|0) == 22) {
    STACKTOP = sp;return ($$0|0);
   }
  } else {
   $25 = HEAP8[$__extbuf>>0]|0;
   $26 = $25 << 24 >> 24;
   HEAP32[$__1buf>>2] = $26;
   $__nread$2 = $8;
  }
 } while(0);
 if ($__consume) {
  $62 = HEAP32[$__1buf>>2]|0;
  $63 = (($this) + 48|0);
  HEAP32[$63>>2] = $62;
  $$0 = $62;
  STACKTOP = sp;return ($$0|0);
 }
 $53 = (($this) + 32|0);
 $__i2$0 = $__nread$2;
 while(1) {
  $54 = ($__i2$0|0)>(0);
  if (!($54)) {
   break;
  }
  $55 = (($__i2$0) + -1)|0;
  $56 = (($__extbuf) + ($55)|0);
  $57 = HEAP8[$56>>0]|0;
  $58 = $57 << 24 >> 24;
  $59 = HEAP32[$53>>2]|0;
  $60 = (_ungetc(($58|0),($59|0))|0);
  $61 = ($60|0)==(-1);
  if ($61) {
   $$0 = -1;
   label = 22;
   break;
  } else {
   $__i2$0 = $55;
  }
 }
 if ((label|0) == 22) {
  STACKTOP = sp;return ($$0|0);
 }
 $$pre = HEAP32[$__1buf>>2]|0;
 $$0 = $$pre;
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt3__111__stdoutbufIcED1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((3696 + 8|0));
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 4|0);
 $3 = HEAP32[$2>>2]|0;HEAP32[$2>>2] = (($3+-1)|0);
 $4 = ($3|0)==(0);
 if (!($4)) {
  STACKTOP = sp;return;
 }
 $5 = HEAP32[$1>>2]|0;
 $6 = (($5) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 FUNCTION_TABLE_vi[$7 & 511]($1);
 STACKTOP = sp;return;
}
function __ZNSt3__111__stdoutbufIcED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((3696 + 8|0));
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 4|0);
 $3 = HEAP32[$2>>2]|0;HEAP32[$2>>2] = (($3+-1)|0);
 $4 = ($3|0)==(0);
 if (!($4)) {
  _free($this);
  STACKTOP = sp;return;
 }
 $5 = HEAP32[$1>>2]|0;
 $6 = (($5) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 FUNCTION_TABLE_vi[$7 & 511]($1);
 _free($this);
 STACKTOP = sp;return;
}
function __ZNSt3__111__stdoutbufIcE5imbueERKNS_6localeE($this,$__loc) {
 $this = $this|0;
 $__loc = $__loc|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__loc$idx$val = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + 24|0);
 $2 = HEAP32[$1>>2]|0;
 (FUNCTION_TABLE_ii[$2 & 511]($this)|0);
 $__loc$idx$val = HEAP32[$__loc>>2]|0;
 $3 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc$idx$val,6480)|0);
 $4 = (($this) + 36|0);
 HEAP32[$4>>2] = $3;
 $5 = HEAP32[$3>>2]|0;
 $6 = (($5) + 28|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (FUNCTION_TABLE_ii[$7 & 511]($3)|0);
 $9 = (($this) + 44|0);
 $10 = $8&1;
 HEAP8[$9>>0] = $10;
 STACKTOP = sp;return;
}
function __ZNSt3__111__stdoutbufIcE4syncEv($this) {
 $this = $this|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $__extbe = 0, $__extbuf = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $__extbuf = sp + 8|0;
 $__extbe = sp;
 $0 = (($this) + 36|0);
 $1 = (($this) + 40|0);
 $2 = (($__extbuf) + 8|0);
 $3 = $__extbuf;
 $4 = (($this) + 32|0);
 while(1) {
  $5 = HEAP32[$0>>2]|0;
  $6 = HEAP32[$1>>2]|0;
  $7 = HEAP32[$5>>2]|0;
  $8 = (($7) + 20|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = (FUNCTION_TABLE_iiiiii[$9 & 511]($5,$6,$__extbuf,$2,$__extbe)|0);
  $11 = HEAP32[$__extbe>>2]|0;
  $12 = $11;
  $13 = (($12) - ($3))|0;
  $14 = HEAP32[$4>>2]|0;
  $15 = (_fwrite(($__extbuf|0),1,($13|0),($14|0))|0);
  $16 = ($15|0)==($13|0);
  if (!($16)) {
   $$0 = -1;
   label = 5;
   break;
  }
  if ((($10|0) == 2)) {
   $$0 = -1;
   label = 5;
   break;
  } else if (!((($10|0) == 1))) {
   label = 4;
   break;
  }
 }
 if ((label|0) == 4) {
  $17 = HEAP32[$4>>2]|0;
  $18 = (_fflush(($17|0))|0);
  $not$ = ($18|0)!=(0);
  $$ = $not$ << 31 >> 31;
  $$0 = $$;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 5) {
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function __ZNSt3__111__stdoutbufIcE6xsputnEPKci($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $$0 = 0, $$012 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__i$03 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 44|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(0);
 if (!($2)) {
  $4 = (($this) + 32|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (_fwrite(($__s|0),1,($__n|0),($5|0))|0);
  $$0 = $6;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = ($__n|0)>(0);
 if ($3) {
  $$012 = $__s;$__i$03 = 0;
 } else {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 while(1) {
  $7 = HEAP32[$this>>2]|0;
  $8 = (($7) + 52|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = HEAP8[$$012>>0]|0;
  $11 = $10&255;
  $12 = (FUNCTION_TABLE_iii[$9 & 511]($this,$11)|0);
  $13 = ($12|0)==(-1);
  if ($13) {
   $$0 = $__i$03;
   label = 6;
   break;
  }
  $14 = (($__i$03) + 1)|0;
  $15 = (($$012) + 1|0);
  $16 = ($14|0)<($__n|0);
  if ($16) {
   $$012 = $15;$__i$03 = $14;
  } else {
   $$0 = $14;
   label = 6;
   break;
  }
 }
 if ((label|0) == 6) {
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function __ZNSt3__111__stdoutbufIcE8overflowEi($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $$0 = 0, $$__c$i = 0, $$pbase$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__1buf = 0;
 var $__e = 0, $__extbe = 0, $__extbuf = 0, $pbase$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $__extbuf = sp + 16|0;
 $__1buf = sp + 8|0;
 $__extbe = sp + 4|0;
 $__e = sp;
 $0 = ($__c|0)==(-1);
 L1: do {
  if (!($0)) {
   $1 = $__c&255;
   HEAP8[$__1buf>>0] = $1;
   $2 = (($this) + 44|0);
   $3 = HEAP8[$2>>0]|0;
   $4 = ($3<<24>>24)==(0);
   if (!($4)) {
    $5 = (($this) + 32|0);
    $6 = HEAP32[$5>>2]|0;
    $7 = (_fwrite(($__1buf|0),1,1,($6|0))|0);
    $8 = ($7|0)==(1);
    if ($8) {
     break;
    } else {
     $$0 = -1;
    }
    STACKTOP = sp;return ($$0|0);
   }
   HEAP32[$__extbe>>2] = $__extbuf;
   $9 = (($__1buf) + 1|0);
   $10 = (($this) + 36|0);
   $11 = (($this) + 40|0);
   $12 = (($__extbuf) + 8|0);
   $13 = $__extbuf;
   $14 = (($this) + 32|0);
   $pbase$0 = $__1buf;
   while(1) {
    $15 = HEAP32[$10>>2]|0;
    $16 = HEAP32[$11>>2]|0;
    $17 = HEAP32[$15>>2]|0;
    $18 = (($17) + 12|0);
    $19 = HEAP32[$18>>2]|0;
    $20 = (FUNCTION_TABLE_iiiiiiiii[$19 & 511]($15,$16,$pbase$0,$9,$__e,$__extbuf,$12,$__extbe)|0);
    $21 = HEAP32[$__e>>2]|0;
    $22 = ($21|0)==($pbase$0|0);
    if ($22) {
     $$0 = -1;
     label = 12;
     break;
    }
    $23 = ($20|0)==(3);
    if ($23) {
     label = 7;
     break;
    }
    $27 = ($20|0)==(1);
    $28 = ($20>>>0)<(2);
    if (!($28)) {
     $$0 = -1;
     label = 12;
     break;
    }
    $29 = HEAP32[$__extbe>>2]|0;
    $30 = $29;
    $31 = (($30) - ($13))|0;
    $32 = HEAP32[$14>>2]|0;
    $33 = (_fwrite(($__extbuf|0),1,($31|0),($32|0))|0);
    $34 = ($33|0)==($31|0);
    if (!($34)) {
     $$0 = -1;
     label = 12;
     break;
    }
    $35 = HEAP32[$__e>>2]|0;
    $$pbase$0 = $27 ? $35 : $pbase$0;
    if ($27) {
     $pbase$0 = $$pbase$0;
    } else {
     break L1;
    }
   }
   if ((label|0) == 7) {
    $24 = HEAP32[$14>>2]|0;
    $25 = (_fwrite(($pbase$0|0),1,1,($24|0))|0);
    $26 = ($25|0)==(1);
    if ($26) {
     break;
    } else {
     $$0 = -1;
    }
    STACKTOP = sp;return ($$0|0);
   }
   else if ((label|0) == 12) {
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 $$__c$i = $0 ? 0 : $__c;
 $$0 = $$__c$i;
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt3__110__stdinbufIcED1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((3696 + 8|0));
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 4|0);
 $3 = HEAP32[$2>>2]|0;HEAP32[$2>>2] = (($3+-1)|0);
 $4 = ($3|0)==(0);
 if (!($4)) {
  STACKTOP = sp;return;
 }
 $5 = HEAP32[$1>>2]|0;
 $6 = (($5) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 FUNCTION_TABLE_vi[$7 & 511]($1);
 STACKTOP = sp;return;
}
function __ZNSt3__110__stdinbufIcED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((3696 + 8|0));
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 4|0);
 $3 = HEAP32[$2>>2]|0;HEAP32[$2>>2] = (($3+-1)|0);
 $4 = ($3|0)==(0);
 if (!($4)) {
  _free($this);
  STACKTOP = sp;return;
 }
 $5 = HEAP32[$1>>2]|0;
 $6 = (($5) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 FUNCTION_TABLE_vi[$7 & 511]($1);
 _free($this);
 STACKTOP = sp;return;
}
function __ZNSt3__110__stdinbufIcE5imbueERKNS_6localeE($this,$__loc) {
 $this = $this|0;
 $__loc = $__loc|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__loc$idx$val = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__loc$idx$val = HEAP32[$__loc>>2]|0;
 $0 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc$idx$val,6480)|0);
 $1 = (($this) + 36|0);
 HEAP32[$1>>2] = $0;
 $2 = HEAP32[$0>>2]|0;
 $3 = (($2) + 24|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (FUNCTION_TABLE_ii[$4 & 511]($0)|0);
 $6 = (($this) + 44|0);
 HEAP32[$6>>2] = $5;
 $7 = HEAP32[$1>>2]|0;
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + 28|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (FUNCTION_TABLE_ii[$10 & 511]($7)|0);
 $12 = (($this) + 53|0);
 $13 = $11&1;
 HEAP8[$12>>0] = $13;
 $14 = HEAP32[$6>>2]|0;
 $15 = ($14|0)>(8);
 if ($15) {
  __ZNSt3__121__throw_runtime_errorEPKc(2976);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function __ZNSt3__110__stdinbufIcE9underflowEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__110__stdinbufIcE9__getcharEb($this,0)|0);
 STACKTOP = sp;return ($0|0);
}
function __ZNSt3__110__stdinbufIcE5uflowEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__110__stdinbufIcE9__getcharEb($this,1)|0);
 STACKTOP = sp;return ($0|0);
}
function __ZNSt3__110__stdinbufIcE9pbackfailEi($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__ci = 0, $__enxt = 0, $__extbuf = 0, $__inxt = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $__extbuf = sp + 16|0;
 $__enxt = sp + 4|0;
 $__ci = sp + 8|0;
 $__inxt = sp;
 $0 = ($__c|0)==(-1);
 $1 = (($this) + 52|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = ($2<<24>>24)!=(0);
 if ($0) {
  if ($3) {
   $$01 = -1;
   STACKTOP = sp;return ($$01|0);
  }
  $4 = (($this) + 48|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)!=(-1);
  $7 = $6&1;
  HEAP8[$1>>0] = $7;
  $$01 = $5;
  STACKTOP = sp;return ($$01|0);
 }
 $8 = (($this) + 48|0);
 L8: do {
  if ($3) {
   $9 = HEAP32[$8>>2]|0;
   $10 = $9&255;
   HEAP8[$__ci>>0] = $10;
   $11 = (($this) + 36|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = (($this) + 40|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = (($__ci) + 1|0);
   $16 = (($__extbuf) + 8|0);
   $17 = HEAP32[$12>>2]|0;
   $18 = (($17) + 12|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = (FUNCTION_TABLE_iiiiiiiii[$19 & 511]($12,$14,$__ci,$15,$__inxt,$__extbuf,$16,$__enxt)|0);
   if ((($20|0) == 3)) {
    $21 = HEAP32[$8>>2]|0;
    $22 = $21&255;
    HEAP8[$__extbuf>>0] = $22;
    $23 = (($__extbuf) + 1|0);
    HEAP32[$__enxt>>2] = $23;
   } else if ((($20|0) == 1) | (($20|0) == 2)) {
    $$01 = -1;
    STACKTOP = sp;return ($$01|0);
   }
   $24 = (($this) + 32|0);
   while(1) {
    $25 = HEAP32[$__enxt>>2]|0;
    $26 = ($25>>>0)>($__extbuf>>>0);
    if (!($26)) {
     break L8;
    }
    $27 = (($25) + -1|0);
    HEAP32[$__enxt>>2] = $27;
    $28 = HEAP8[$27>>0]|0;
    $29 = $28 << 24 >> 24;
    $30 = HEAP32[$24>>2]|0;
    $31 = (_ungetc(($29|0),($30|0))|0);
    $32 = ($31|0)==(-1);
    if ($32) {
     $$01 = -1;
     break;
    }
   }
   STACKTOP = sp;return ($$01|0);
  }
 } while(0);
 HEAP32[$8>>2] = $__c;
 HEAP8[$1>>0] = 1;
 $$01 = $__c;
 STACKTOP = sp;return ($$01|0);
}
function __ZNSt3__110__stdinbufIcE9__getcharEb($this,$__consume) {
 $this = $this|0;
 $__consume = $__consume|0;
 var $$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, $__1buf = 0, $__enxt = 0, $__extbuf = 0, $__i$09 = 0, $__i2$0 = 0, $__inxt = 0, $__nread$0 = 0, $__nread$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $__extbuf = sp + 16|0;
 $__1buf = sp + 8|0;
 $__enxt = sp + 4|0;
 $__inxt = sp;
 $0 = (($this) + 52|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(0);
 if (!($2)) {
  $3 = (($this) + 48|0);
  $4 = HEAP32[$3>>2]|0;
  if (!($__consume)) {
   $$0 = $4;
   STACKTOP = sp;return ($$0|0);
  }
  HEAP32[$3>>2] = -1;
  HEAP8[$0>>0] = 0;
  $$0 = $4;
  STACKTOP = sp;return ($$0|0);
 }
 $5 = (($this) + 44|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)>(1);
 $8 = $7 ? $6 : 1;
 $9 = ($8|0)>(0);
 L8: do {
  if ($9) {
   $10 = (($this) + 32|0);
   $__i$09 = 0;
   while(1) {
    $11 = HEAP32[$10>>2]|0;
    $12 = (_getc(($11|0))|0);
    $13 = ($12|0)==(-1);
    if ($13) {
     $$0 = -1;
     break;
    }
    $14 = $12&255;
    $15 = (($__extbuf) + ($__i$09)|0);
    HEAP8[$15>>0] = $14;
    $16 = (($__i$09) + 1)|0;
    $17 = ($16|0)<($8|0);
    if ($17) {
     $__i$09 = $16;
    } else {
     break L8;
    }
   }
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 $18 = (($this) + 53|0);
 $19 = HEAP8[$18>>0]|0;
 $20 = ($19<<24>>24)==(0);
 L15: do {
  if ($20) {
   $21 = (($this) + 40|0);
   $22 = (($this) + 36|0);
   $23 = (($__1buf) + 1|0);
   $24 = (($this) + 32|0);
   $__nread$0 = $8;
   while(1) {
    $26 = HEAP32[$21>>2]|0;
    $27 = $26;
    $28 = $27;
    $29 = HEAP32[$28>>2]|0;
    $30 = (($27) + 4)|0;
    $31 = $30;
    $32 = HEAP32[$31>>2]|0;
    $33 = HEAP32[$22>>2]|0;
    $34 = (($__extbuf) + ($__nread$0)|0);
    $35 = HEAP32[$33>>2]|0;
    $36 = (($35) + 16|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = (FUNCTION_TABLE_iiiiiiiii[$37 & 511]($33,$26,$__extbuf,$34,$__enxt,$__1buf,$23,$__inxt)|0);
    if ((($38|0) == 3)) {
     label = 14;
     break;
    } else if ((($38|0) == 2)) {
     $$0 = -1;
     label = 23;
     break;
    } else if (!((($38|0) == 1))) {
     $__nread$2 = $__nread$0;
     break L15;
    }
    $39 = HEAP32[$21>>2]|0;
    $40 = $39;
    $41 = $40;
    HEAP32[$41>>2] = $29;
    $42 = (($40) + 4)|0;
    $43 = $42;
    HEAP32[$43>>2] = $32;
    $44 = ($__nread$0|0)==(8);
    if ($44) {
     $$0 = -1;
     label = 23;
     break;
    }
    $45 = HEAP32[$24>>2]|0;
    $46 = (_getc(($45|0))|0);
    $47 = ($46|0)==(-1);
    if ($47) {
     $$0 = -1;
     label = 23;
     break;
    }
    $49 = $46&255;
    HEAP8[$34>>0] = $49;
    $50 = (($__nread$0) + 1)|0;
    $__nread$0 = $50;
   }
   if ((label|0) == 14) {
    $48 = HEAP8[$__extbuf>>0]|0;
    HEAP8[$__1buf>>0] = $48;
    $__nread$2 = $__nread$0;
    break;
   }
   else if ((label|0) == 23) {
    STACKTOP = sp;return ($$0|0);
   }
  } else {
   $25 = HEAP8[$__extbuf>>0]|0;
   HEAP8[$__1buf>>0] = $25;
   $__nread$2 = $8;
  }
 } while(0);
 do {
  if ($__consume) {
   $60 = HEAP8[$__1buf>>0]|0;
   $61 = $60&255;
   $62 = (($this) + 48|0);
   HEAP32[$62>>2] = $61;
   $64 = $60;
  } else {
   $51 = (($this) + 32|0);
   $__i2$0 = $__nread$2;
   while(1) {
    $52 = ($__i2$0|0)>(0);
    if (!($52)) {
     label = 21;
     break;
    }
    $53 = (($__i2$0) + -1)|0;
    $54 = (($__extbuf) + ($53)|0);
    $55 = HEAP8[$54>>0]|0;
    $56 = $55&255;
    $57 = HEAP32[$51>>2]|0;
    $58 = (_ungetc(($56|0),($57|0))|0);
    $59 = ($58|0)==(-1);
    if ($59) {
     $$0 = -1;
     label = 23;
     break;
    } else {
     $__i2$0 = $53;
    }
   }
   if ((label|0) == 21) {
    $$pre = HEAP8[$__1buf>>0]|0;
    $64 = $$pre;
    break;
   }
   else if ((label|0) == 23) {
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 $63 = $64&255;
 $$0 = $63;
 STACKTOP = sp;return ($$0|0);
}
function __GLOBAL__I_a75() {
 var $$sum$i = 0, $$sum10$i = 0, $$sum11$i = 0, $$sum12$i = 0, $$sum13$i = 0, $$sum7$i = 0, $$sum8$i = 0, $$sum9$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0;
 var $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0;
 var $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0;
 var $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0;
 var $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0;
 var $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0;
 var $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0;
 var $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0;
 var $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0;
 var $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0;
 var $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0;
 var $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0;
 var $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__p$i$i$i$i = 0, $__p$i$i$i$i$i = 0, $__p$i$i$i$i14$i = 0, $__p$i$i$i23$i = 0, $__p$i$i$i33$i = 0, $__p$i$i$i4$i = 0, $not$$i$i = 0, $not$$i43$i = 0, dest = 0, label = 0, sp = 0;
 var stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0;
 $__p$i$i$i33$i = sp + 80|0;
 $__p$i$i$i23$i = sp + 64|0;
 $__p$i$i$i$i14$i = sp + 48|0;
 $__p$i$i$i4$i = sp + 32|0;
 $__p$i$i$i$i = sp + 16|0;
 $__p$i$i$i$i$i = sp;
 $0 = HEAP32[_stdin>>2]|0;
 HEAP32[2408>>2] = ((3696 + 8|0));
 __ZNSt3__16localeC2Ev(((2408 + 4|0)));
 ;HEAP32[((2408 + 8|0))+0>>2]=0|0;HEAP32[((2408 + 8|0))+4>>2]=0|0;HEAP32[((2408 + 8|0))+8>>2]=0|0;HEAP32[((2408 + 8|0))+12>>2]=0|0;HEAP32[((2408 + 8|0))+16>>2]=0|0;HEAP32[((2408 + 8|0))+20>>2]=0|0;
 HEAP32[2408>>2] = ((3128 + 8|0));
 HEAP32[((2408 + 32|0))>>2] = $0;
 HEAP32[((2408 + 40|0))>>2] = 2464;
 HEAP32[((2408 + 48|0))>>2] = -1;
 HEAP8[((2408 + 52|0))>>0] = 0;
 $1 = HEAP32[((2408 + 4|0))>>2]|0;
 $2 = (($1) + 4|0);
 $3 = HEAP32[$2>>2]|0;HEAP32[$2>>2] = (($3+1)|0);
 $4 = HEAP32[6480>>2]|0;
 $5 = ($4|0)==(-1);
 if ($5) {
  label = 3;
 } else {
  HEAP32[$__p$i$i$i$i$i>>2] = 6480;
  $6 = (($__p$i$i$i$i$i) + 4|0);
  HEAP32[$6>>2] = (439);
  $7 = (($__p$i$i$i$i$i) + 8|0);
  HEAP32[$7>>2] = 0;
  __THREW__ = 0;
  invoke_vii(440,(6480|0),($__p$i$i$i$i$i|0));
  $8 = __THREW__; __THREW__ = 0;
  $9 = $8&1;
  if (!($9)) {
   label = 3;
  }
 }
 do {
  if ((label|0) == 3) {
   $10 = HEAP32[((6480 + 4|0))>>2]|0;
   $11 = (($10) + -1)|0;
   $12 = (($1) + 12|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = (($1) + 8|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = $13;
   $17 = $15;
   $18 = (($16) - ($17))|0;
   $19 = $18 >> 2;
   $20 = ($19>>>0)>($11>>>0);
   if ($20) {
    $21 = (($15) + ($11<<2)|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = ($22|0)==(0|0);
    if (!($23)) {
     HEAP32[((2408 + 36|0))>>2] = $22;
     $27 = HEAP32[$22>>2]|0;
     $28 = (($27) + 24|0);
     $29 = HEAP32[$28>>2]|0;
     $30 = (FUNCTION_TABLE_ii[$29 & 511]($22)|0);
     HEAP32[((2408 + 44|0))>>2] = $30;
     $31 = HEAP32[((2408 + 36|0))>>2]|0;
     $32 = HEAP32[$31>>2]|0;
     $33 = (($32) + 28|0);
     $34 = HEAP32[$33>>2]|0;
     $35 = (FUNCTION_TABLE_ii[$34 & 511]($31)|0);
     $36 = $35&1;
     HEAP8[((2408 + 53|0))>>0] = $36;
     $37 = HEAP32[((2408 + 44|0))>>2]|0;
     $38 = ($37|0)>(8);
     if ($38) {
      __THREW__ = 0;
      invoke_vi(441,(2976|0));
      $39 = __THREW__; __THREW__ = 0;
      $40 = $39&1;
      if ($40) {
       break;
      }
     }
     $41 = HEAP32[$2>>2]|0;HEAP32[$2>>2] = (($41+-1)|0);
     $42 = ($41|0)==(0);
     if ($42) {
      $43 = HEAP32[$1>>2]|0;
      $44 = (($43) + 8|0);
      $45 = HEAP32[$44>>2]|0;
      FUNCTION_TABLE_vi[$45 & 511]($1);
     }
     HEAP32[1696>>2] = ((3824 + 12|0));
     HEAP32[((1696 + 8|0))>>2] = ((3824 + 32|0));
     HEAP32[((1696 + 4|0))>>2] = 0;
     HEAP32[((1696 + 32|0))>>2] = 2408;
     HEAP32[((1696 + 24|0))>>2] = 0;
     HEAP32[((1696 + 28|0))>>2] = 0;
     HEAP32[((1696 + 12|0))>>2] = 4098;
     HEAP32[((1696 + 20|0))>>2] = 0;
     HEAP32[((1696 + 16|0))>>2] = 6;
     dest=((1696 + 40|0))+0|0; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
     __ZNSt3__16localeC2Ev(((1696 + 36|0)));
     HEAP32[((1696 + 80|0))>>2] = 0;
     HEAP32[((1696 + 84|0))>>2] = -1;
     $60 = HEAP32[_stdout>>2]|0;
     HEAP32[2512>>2] = ((3696 + 8|0));
     __ZNSt3__16localeC2Ev(((2512 + 4|0)));
     ;HEAP32[((2512 + 8|0))+0>>2]=0|0;HEAP32[((2512 + 8|0))+4>>2]=0|0;HEAP32[((2512 + 8|0))+8>>2]=0|0;HEAP32[((2512 + 8|0))+12>>2]=0|0;HEAP32[((2512 + 8|0))+16>>2]=0|0;HEAP32[((2512 + 8|0))+20>>2]=0|0;
     HEAP32[2512>>2] = ((3016 + 8|0));
     HEAP32[((2512 + 32|0))>>2] = $60;
     $61 = HEAP32[((2512 + 4|0))>>2]|0;
     $62 = (($61) + 4|0);
     $63 = HEAP32[$62>>2]|0;HEAP32[$62>>2] = (($63+1)|0);
     $64 = HEAP32[6480>>2]|0;
     $65 = ($64|0)==(-1);
     if ($65) {
      label = 18;
     } else {
      HEAP32[$__p$i$i$i$i>>2] = 6480;
      $66 = (($__p$i$i$i$i) + 4|0);
      HEAP32[$66>>2] = (439);
      $67 = (($__p$i$i$i$i) + 8|0);
      HEAP32[$67>>2] = 0;
      __THREW__ = 0;
      invoke_vii(440,(6480|0),($__p$i$i$i$i|0));
      $68 = __THREW__; __THREW__ = 0;
      $69 = $68&1;
      if (!($69)) {
       label = 18;
      }
     }
     if ((label|0) == 18) {
      $70 = HEAP32[((6480 + 4|0))>>2]|0;
      $71 = (($70) + -1)|0;
      $72 = (($61) + 12|0);
      $73 = HEAP32[$72>>2]|0;
      $74 = (($61) + 8|0);
      $75 = HEAP32[$74>>2]|0;
      $76 = $73;
      $77 = $75;
      $78 = (($76) - ($77))|0;
      $79 = $78 >> 2;
      $80 = ($79>>>0)>($71>>>0);
      if ($80) {
       $81 = (($75) + ($71<<2)|0);
       $82 = HEAP32[$81>>2]|0;
       $83 = ($82|0)==(0|0);
       if (!($83)) {
        $87 = HEAP32[$62>>2]|0;HEAP32[$62>>2] = (($87+-1)|0);
        $88 = ($87|0)==(0);
        if ($88) {
         $103 = HEAP32[$61>>2]|0;
         $104 = (($103) + 8|0);
         $105 = HEAP32[$104>>2]|0;
         FUNCTION_TABLE_vi[$105 & 511]($61);
        }
        HEAP32[((2512 + 36|0))>>2] = $82;
        HEAP32[((2512 + 40|0))>>2] = ((2464 + 8|0));
        $106 = HEAP32[$82>>2]|0;
        $107 = (($106) + 28|0);
        $108 = HEAP32[$107>>2]|0;
        $109 = (FUNCTION_TABLE_ii[$108 & 511]($82)|0);
        $110 = $109&1;
        HEAP8[((2512 + 44|0))>>0] = $110;
        HEAP32[1784>>2] = ((3904 + 12|0));
        HEAP32[((1784 + 4|0))>>2] = ((3904 + 32|0));
        HEAP32[((1784 + 28|0))>>2] = 2512;
        HEAP32[((1784 + 20|0))>>2] = 0;
        HEAP32[((1784 + 24|0))>>2] = 0;
        HEAP32[((1784 + 8|0))>>2] = 4098;
        HEAP32[((1784 + 16|0))>>2] = 0;
        HEAP32[((1784 + 12|0))>>2] = 6;
        dest=((1784 + 36|0))+0|0; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
        __ZNSt3__16localeC2Ev(((1784 + 32|0)));
        HEAP32[((1784 + 76|0))>>2] = 0;
        HEAP32[((1784 + 80|0))>>2] = -1;
        $111 = HEAP32[_stderr>>2]|0;
        HEAP32[2560>>2] = ((3696 + 8|0));
        __ZNSt3__16localeC2Ev(((2560 + 4|0)));
        ;HEAP32[((2560 + 8|0))+0>>2]=0|0;HEAP32[((2560 + 8|0))+4>>2]=0|0;HEAP32[((2560 + 8|0))+8>>2]=0|0;HEAP32[((2560 + 8|0))+12>>2]=0|0;HEAP32[((2560 + 8|0))+16>>2]=0|0;HEAP32[((2560 + 8|0))+20>>2]=0|0;
        HEAP32[2560>>2] = ((3016 + 8|0));
        HEAP32[((2560 + 32|0))>>2] = $111;
        $112 = HEAP32[((2560 + 4|0))>>2]|0;
        $113 = (($112) + 4|0);
        $114 = HEAP32[$113>>2]|0;HEAP32[$113>>2] = (($114+1)|0);
        $115 = HEAP32[6480>>2]|0;
        $116 = ($115|0)==(-1);
        if ($116) {
         label = 31;
        } else {
         HEAP32[$__p$i$i$i4$i>>2] = 6480;
         $117 = (($__p$i$i$i4$i) + 4|0);
         HEAP32[$117>>2] = (439);
         $118 = (($__p$i$i$i4$i) + 8|0);
         HEAP32[$118>>2] = 0;
         __THREW__ = 0;
         invoke_vii(440,(6480|0),($__p$i$i$i4$i|0));
         $119 = __THREW__; __THREW__ = 0;
         $120 = $119&1;
         if (!($120)) {
          label = 31;
         }
        }
        if ((label|0) == 31) {
         $121 = HEAP32[((6480 + 4|0))>>2]|0;
         $122 = (($121) + -1)|0;
         $123 = (($112) + 12|0);
         $124 = HEAP32[$123>>2]|0;
         $125 = (($112) + 8|0);
         $126 = HEAP32[$125>>2]|0;
         $127 = $124;
         $128 = $126;
         $129 = (($127) - ($128))|0;
         $130 = $129 >> 2;
         $131 = ($130>>>0)>($122>>>0);
         if ($131) {
          $132 = (($126) + ($122<<2)|0);
          $133 = HEAP32[$132>>2]|0;
          $134 = ($133|0)==(0|0);
          if (!($134)) {
           $138 = HEAP32[$113>>2]|0;HEAP32[$113>>2] = (($138+-1)|0);
           $139 = ($138|0)==(0);
           if ($139) {
            $154 = HEAP32[$112>>2]|0;
            $155 = (($154) + 8|0);
            $156 = HEAP32[$155>>2]|0;
            FUNCTION_TABLE_vi[$156 & 511]($112);
           }
           HEAP32[((2560 + 36|0))>>2] = $133;
           HEAP32[((2560 + 40|0))>>2] = ((2464 + 16|0));
           $157 = HEAP32[$133>>2]|0;
           $158 = (($157) + 28|0);
           $159 = HEAP32[$158>>2]|0;
           $160 = (FUNCTION_TABLE_ii[$159 & 511]($133)|0);
           $161 = $160&1;
           HEAP8[((2560 + 44|0))>>0] = $161;
           HEAP32[1872>>2] = ((3904 + 12|0));
           HEAP32[((1872 + 4|0))>>2] = ((3904 + 32|0));
           HEAP32[((1872 + 28|0))>>2] = 2560;
           HEAP32[((1872 + 20|0))>>2] = 0;
           HEAP32[((1872 + 24|0))>>2] = 0;
           HEAP32[((1872 + 8|0))>>2] = 4098;
           HEAP32[((1872 + 16|0))>>2] = 0;
           HEAP32[((1872 + 12|0))>>2] = 6;
           dest=((1872 + 36|0))+0|0; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
           __ZNSt3__16localeC2Ev(((1872 + 32|0)));
           HEAP32[((1872 + 76|0))>>2] = 0;
           HEAP32[((1872 + 80|0))>>2] = -1;
           $162 = HEAP32[1872>>2]|0;
           $163 = (($162) + -12|0);
           $164 = HEAP32[$163>>2]|0;
           $$sum$i = (($164) + 24)|0;
           $165 = (1872 + ($$sum$i)|0);
           $166 = HEAP32[$165>>2]|0;
           HEAP32[1960>>2] = ((3904 + 12|0));
           HEAP32[((1960 + 4|0))>>2] = ((3904 + 32|0));
           HEAP32[((1960 + 28|0))>>2] = $166;
           $not$$i$i = ($166|0)==(0|0);
           $167 = $not$$i$i&1;
           HEAP32[((1960 + 20|0))>>2] = $167;
           HEAP32[((1960 + 24|0))>>2] = 0;
           HEAP32[((1960 + 8|0))>>2] = 4098;
           HEAP32[((1960 + 16|0))>>2] = 0;
           HEAP32[((1960 + 12|0))>>2] = 6;
           dest=((1960 + 36|0))+0|0; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
           __ZNSt3__16localeC2Ev(((1960 + 32|0)));
           HEAP32[((1960 + 76|0))>>2] = 0;
           HEAP32[((1960 + 80|0))>>2] = -1;
           $168 = HEAP32[1696>>2]|0;
           $169 = (($168) + -12|0);
           $170 = HEAP32[$169>>2]|0;
           $$sum7$i = (($170) + 72)|0;
           $171 = (1696 + ($$sum7$i)|0);
           HEAP32[$171>>2] = 1784;
           $172 = HEAP32[1872>>2]|0;
           $173 = (($172) + -12|0);
           $174 = HEAP32[$173>>2]|0;
           $$sum8$i = (($174) + 4)|0;
           $175 = (1872 + ($$sum8$i)|0);
           $176 = HEAP32[$175>>2]|0;
           $177 = $176 | 8192;
           HEAP32[$175>>2] = $177;
           $178 = HEAP32[1872>>2]|0;
           $179 = (($178) + -12|0);
           $180 = HEAP32[$179>>2]|0;
           $$sum9$i = (($180) + 72)|0;
           $181 = (1872 + ($$sum9$i)|0);
           HEAP32[$181>>2] = 1784;
           HEAP32[2608>>2] = ((3760 + 8|0));
           __ZNSt3__16localeC2Ev(((2608 + 4|0)));
           ;HEAP32[((2608 + 8|0))+0>>2]=0|0;HEAP32[((2608 + 8|0))+4>>2]=0|0;HEAP32[((2608 + 8|0))+8>>2]=0|0;HEAP32[((2608 + 8|0))+12>>2]=0|0;HEAP32[((2608 + 8|0))+16>>2]=0|0;HEAP32[((2608 + 8|0))+20>>2]=0|0;
           HEAP32[2608>>2] = ((2872 + 8|0));
           HEAP32[((2608 + 32|0))>>2] = $0;
           HEAP32[((2608 + 40|0))>>2] = ((2464 + 24|0));
           HEAP32[((2608 + 48|0))>>2] = -1;
           HEAP8[((2608 + 52|0))>>0] = 0;
           $182 = HEAP32[((2608 + 4|0))>>2]|0;
           $183 = (($182) + 4|0);
           $184 = HEAP32[$183>>2]|0;HEAP32[$183>>2] = (($184+1)|0);
           $185 = HEAP32[6488>>2]|0;
           $186 = ($185|0)==(-1);
           if ($186) {
            label = 44;
           } else {
            HEAP32[$__p$i$i$i$i14$i>>2] = 6488;
            $187 = (($__p$i$i$i$i14$i) + 4|0);
            HEAP32[$187>>2] = (439);
            $188 = (($__p$i$i$i$i14$i) + 8|0);
            HEAP32[$188>>2] = 0;
            __THREW__ = 0;
            invoke_vii(440,(6488|0),($__p$i$i$i$i14$i|0));
            $189 = __THREW__; __THREW__ = 0;
            $190 = $189&1;
            if (!($190)) {
             label = 44;
            }
           }
           L36: do {
            if ((label|0) == 44) {
             $191 = HEAP32[((6488 + 4|0))>>2]|0;
             $192 = (($191) + -1)|0;
             $193 = (($182) + 12|0);
             $194 = HEAP32[$193>>2]|0;
             $195 = (($182) + 8|0);
             $196 = HEAP32[$195>>2]|0;
             $197 = $194;
             $198 = $196;
             $199 = (($197) - ($198))|0;
             $200 = $199 >> 2;
             $201 = ($200>>>0)>($192>>>0);
             do {
              if ($201) {
               $202 = (($196) + ($192<<2)|0);
               $203 = HEAP32[$202>>2]|0;
               $204 = ($203|0)==(0|0);
               if ($204) {
                break;
               }
               HEAP32[((2608 + 36|0))>>2] = $203;
               $208 = HEAP32[$203>>2]|0;
               $209 = (($208) + 24|0);
               $210 = HEAP32[$209>>2]|0;
               $211 = (FUNCTION_TABLE_ii[$210 & 511]($203)|0);
               HEAP32[((2608 + 44|0))>>2] = $211;
               $212 = HEAP32[((2608 + 36|0))>>2]|0;
               $213 = HEAP32[$212>>2]|0;
               $214 = (($213) + 28|0);
               $215 = HEAP32[$214>>2]|0;
               $216 = (FUNCTION_TABLE_ii[$215 & 511]($212)|0);
               $217 = $216&1;
               HEAP8[((2608 + 53|0))>>0] = $217;
               $218 = HEAP32[((2608 + 44|0))>>2]|0;
               $219 = ($218|0)>(8);
               if ($219) {
                __THREW__ = 0;
                invoke_vi(441,(2976|0));
                $220 = __THREW__; __THREW__ = 0;
                $221 = $220&1;
                if ($221) {
                 break L36;
                }
               }
               $222 = HEAP32[$183>>2]|0;HEAP32[$183>>2] = (($222+-1)|0);
               $223 = ($222|0)==(0);
               if ($223) {
                $224 = HEAP32[$182>>2]|0;
                $225 = (($224) + 8|0);
                $226 = HEAP32[$225>>2]|0;
                FUNCTION_TABLE_vi[$226 & 511]($182);
               }
               HEAP32[2048>>2] = ((3864 + 12|0));
               HEAP32[((2048 + 8|0))>>2] = ((3864 + 32|0));
               HEAP32[((2048 + 4|0))>>2] = 0;
               HEAP32[((2048 + 32|0))>>2] = 2608;
               HEAP32[((2048 + 24|0))>>2] = 0;
               HEAP32[((2048 + 28|0))>>2] = 0;
               HEAP32[((2048 + 12|0))>>2] = 4098;
               HEAP32[((2048 + 20|0))>>2] = 0;
               HEAP32[((2048 + 16|0))>>2] = 6;
               dest=((2048 + 40|0))+0|0; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
               __ZNSt3__16localeC2Ev(((2048 + 36|0)));
               HEAP32[((2048 + 80|0))>>2] = 0;
               HEAP32[((2048 + 84|0))>>2] = -1;
               HEAP32[2664>>2] = ((3760 + 8|0));
               __ZNSt3__16localeC2Ev(((2664 + 4|0)));
               ;HEAP32[((2664 + 8|0))+0>>2]=0|0;HEAP32[((2664 + 8|0))+4>>2]=0|0;HEAP32[((2664 + 8|0))+8>>2]=0|0;HEAP32[((2664 + 8|0))+12>>2]=0|0;HEAP32[((2664 + 8|0))+16>>2]=0|0;HEAP32[((2664 + 8|0))+20>>2]=0|0;
               HEAP32[2664>>2] = ((2760 + 8|0));
               HEAP32[((2664 + 32|0))>>2] = $60;
               $241 = HEAP32[((2664 + 4|0))>>2]|0;
               $242 = (($241) + 4|0);
               $243 = HEAP32[$242>>2]|0;HEAP32[$242>>2] = (($243+1)|0);
               $244 = HEAP32[6488>>2]|0;
               $245 = ($244|0)==(-1);
               if ($245) {
                label = 59;
               } else {
                HEAP32[$__p$i$i$i23$i>>2] = 6488;
                $246 = (($__p$i$i$i23$i) + 4|0);
                HEAP32[$246>>2] = (439);
                $247 = (($__p$i$i$i23$i) + 8|0);
                HEAP32[$247>>2] = 0;
                __THREW__ = 0;
                invoke_vii(440,(6488|0),($__p$i$i$i23$i|0));
                $248 = __THREW__; __THREW__ = 0;
                $249 = $248&1;
                if (!($249)) {
                 label = 59;
                }
               }
               do {
                if ((label|0) == 59) {
                 $250 = HEAP32[((6488 + 4|0))>>2]|0;
                 $251 = (($250) + -1)|0;
                 $252 = (($241) + 12|0);
                 $253 = HEAP32[$252>>2]|0;
                 $254 = (($241) + 8|0);
                 $255 = HEAP32[$254>>2]|0;
                 $256 = $253;
                 $257 = $255;
                 $258 = (($256) - ($257))|0;
                 $259 = $258 >> 2;
                 $260 = ($259>>>0)>($251>>>0);
                 do {
                  if ($260) {
                   $261 = (($255) + ($251<<2)|0);
                   $262 = HEAP32[$261>>2]|0;
                   $263 = ($262|0)==(0|0);
                   if ($263) {
                    break;
                   }
                   $267 = HEAP32[$242>>2]|0;HEAP32[$242>>2] = (($267+-1)|0);
                   $268 = ($267|0)==(0);
                   if ($268) {
                    $283 = HEAP32[$241>>2]|0;
                    $284 = (($283) + 8|0);
                    $285 = HEAP32[$284>>2]|0;
                    FUNCTION_TABLE_vi[$285 & 511]($241);
                   }
                   HEAP32[((2664 + 36|0))>>2] = $262;
                   HEAP32[((2664 + 40|0))>>2] = ((2464 + 32|0));
                   $286 = HEAP32[$262>>2]|0;
                   $287 = (($286) + 28|0);
                   $288 = HEAP32[$287>>2]|0;
                   $289 = (FUNCTION_TABLE_ii[$288 & 511]($262)|0);
                   $290 = $289&1;
                   HEAP8[((2664 + 44|0))>>0] = $290;
                   HEAP32[2136>>2] = ((3944 + 12|0));
                   HEAP32[((2136 + 4|0))>>2] = ((3944 + 32|0));
                   HEAP32[((2136 + 28|0))>>2] = 2664;
                   HEAP32[((2136 + 20|0))>>2] = 0;
                   HEAP32[((2136 + 24|0))>>2] = 0;
                   HEAP32[((2136 + 8|0))>>2] = 4098;
                   HEAP32[((2136 + 16|0))>>2] = 0;
                   HEAP32[((2136 + 12|0))>>2] = 6;
                   dest=((2136 + 36|0))+0|0; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
                   __ZNSt3__16localeC2Ev(((2136 + 32|0)));
                   HEAP32[((2136 + 76|0))>>2] = 0;
                   HEAP32[((2136 + 80|0))>>2] = -1;
                   HEAP32[2712>>2] = ((3760 + 8|0));
                   __ZNSt3__16localeC2Ev(((2712 + 4|0)));
                   ;HEAP32[((2712 + 8|0))+0>>2]=0|0;HEAP32[((2712 + 8|0))+4>>2]=0|0;HEAP32[((2712 + 8|0))+8>>2]=0|0;HEAP32[((2712 + 8|0))+12>>2]=0|0;HEAP32[((2712 + 8|0))+16>>2]=0|0;HEAP32[((2712 + 8|0))+20>>2]=0|0;
                   HEAP32[2712>>2] = ((2760 + 8|0));
                   HEAP32[((2712 + 32|0))>>2] = $111;
                   $291 = HEAP32[((2712 + 4|0))>>2]|0;
                   $292 = (($291) + 4|0);
                   $293 = HEAP32[$292>>2]|0;HEAP32[$292>>2] = (($293+1)|0);
                   $294 = HEAP32[6488>>2]|0;
                   $295 = ($294|0)==(-1);
                   if ($295) {
                    label = 72;
                   } else {
                    HEAP32[$__p$i$i$i33$i>>2] = 6488;
                    $296 = (($__p$i$i$i33$i) + 4|0);
                    HEAP32[$296>>2] = (439);
                    $297 = (($__p$i$i$i33$i) + 8|0);
                    HEAP32[$297>>2] = 0;
                    __THREW__ = 0;
                    invoke_vii(440,(6488|0),($__p$i$i$i33$i|0));
                    $298 = __THREW__; __THREW__ = 0;
                    $299 = $298&1;
                    if (!($299)) {
                     label = 72;
                    }
                   }
                   do {
                    if ((label|0) == 72) {
                     $300 = HEAP32[((6488 + 4|0))>>2]|0;
                     $301 = (($300) + -1)|0;
                     $302 = (($291) + 12|0);
                     $303 = HEAP32[$302>>2]|0;
                     $304 = (($291) + 8|0);
                     $305 = HEAP32[$304>>2]|0;
                     $306 = $303;
                     $307 = $305;
                     $308 = (($306) - ($307))|0;
                     $309 = $308 >> 2;
                     $310 = ($309>>>0)>($301>>>0);
                     do {
                      if ($310) {
                       $311 = (($305) + ($301<<2)|0);
                       $312 = HEAP32[$311>>2]|0;
                       $313 = ($312|0)==(0|0);
                       if ($313) {
                        break;
                       }
                       $317 = HEAP32[$292>>2]|0;HEAP32[$292>>2] = (($317+-1)|0);
                       $318 = ($317|0)==(0);
                       if (!($318)) {
                        HEAP32[((2712 + 36|0))>>2] = $312;
                        HEAP32[((2712 + 40|0))>>2] = ((2464 + 40|0));
                        $336 = HEAP32[$312>>2]|0;
                        $337 = (($336) + 28|0);
                        $338 = HEAP32[$337>>2]|0;
                        $339 = (FUNCTION_TABLE_ii[$338 & 511]($312)|0);
                        $340 = $339&1;
                        HEAP8[((2712 + 44|0))>>0] = $340;
                        HEAP32[2224>>2] = ((3944 + 12|0));
                        HEAP32[((2224 + 4|0))>>2] = ((3944 + 32|0));
                        HEAP32[((2224 + 28|0))>>2] = 2712;
                        HEAP32[((2224 + 20|0))>>2] = 0;
                        HEAP32[((2224 + 24|0))>>2] = 0;
                        HEAP32[((2224 + 8|0))>>2] = 4098;
                        HEAP32[((2224 + 16|0))>>2] = 0;
                        HEAP32[((2224 + 12|0))>>2] = 6;
                        dest=((2224 + 36|0))+0|0; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
                        __ZNSt3__16localeC2Ev(((2224 + 32|0)));
                        HEAP32[((2224 + 76|0))>>2] = 0;
                        HEAP32[((2224 + 80|0))>>2] = -1;
                        $341 = HEAP32[2224>>2]|0;
                        $342 = (($341) + -12|0);
                        $343 = HEAP32[$342>>2]|0;
                        $$sum10$i = (($343) + 24)|0;
                        $344 = (2224 + ($$sum10$i)|0);
                        $345 = HEAP32[$344>>2]|0;
                        HEAP32[2312>>2] = ((3944 + 12|0));
                        HEAP32[((2312 + 4|0))>>2] = ((3944 + 32|0));
                        HEAP32[((2312 + 28|0))>>2] = $345;
                        $not$$i43$i = ($345|0)==(0|0);
                        $346 = $not$$i43$i&1;
                        HEAP32[((2312 + 20|0))>>2] = $346;
                        HEAP32[((2312 + 24|0))>>2] = 0;
                        HEAP32[((2312 + 8|0))>>2] = 4098;
                        HEAP32[((2312 + 16|0))>>2] = 0;
                        HEAP32[((2312 + 12|0))>>2] = 6;
                        dest=((2312 + 36|0))+0|0; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
                        __ZNSt3__16localeC2Ev(((2312 + 32|0)));
                        HEAP32[((2312 + 76|0))>>2] = 0;
                        HEAP32[((2312 + 80|0))>>2] = -1;
                        $347 = HEAP32[2048>>2]|0;
                        $348 = (($347) + -12|0);
                        $349 = HEAP32[$348>>2]|0;
                        $$sum11$i = (($349) + 72)|0;
                        $350 = (2048 + ($$sum11$i)|0);
                        HEAP32[$350>>2] = 2136;
                        $351 = HEAP32[2224>>2]|0;
                        $352 = (($351) + -12|0);
                        $353 = HEAP32[$352>>2]|0;
                        $$sum12$i = (($353) + 4)|0;
                        $354 = (2224 + ($$sum12$i)|0);
                        $355 = HEAP32[$354>>2]|0;
                        $356 = $355 | 8192;
                        HEAP32[$354>>2] = $356;
                        $357 = HEAP32[2224>>2]|0;
                        $358 = (($357) + -12|0);
                        $359 = HEAP32[$358>>2]|0;
                        $$sum13$i = (($359) + 72)|0;
                        $360 = (2224 + ($$sum13$i)|0);
                        HEAP32[$360>>2] = 2136;
                        (___cxa_atexit((442|0),(2400|0),(___dso_handle|0))|0);
                        STACKTOP = sp;return;
                       }
                       $333 = HEAP32[$291>>2]|0;
                       $334 = (($333) + 8|0);
                       $335 = HEAP32[$334>>2]|0;
                       FUNCTION_TABLE_vi[$335 & 511]($291);
                       HEAP32[((2712 + 36|0))>>2] = $312;
                       HEAP32[((2712 + 40|0))>>2] = ((2464 + 40|0));
                       $336 = HEAP32[$312>>2]|0;
                       $337 = (($336) + 28|0);
                       $338 = HEAP32[$337>>2]|0;
                       $339 = (FUNCTION_TABLE_ii[$338 & 511]($312)|0);
                       $340 = $339&1;
                       HEAP8[((2712 + 44|0))>>0] = $340;
                       HEAP32[2224>>2] = ((3944 + 12|0));
                       HEAP32[((2224 + 4|0))>>2] = ((3944 + 32|0));
                       HEAP32[((2224 + 28|0))>>2] = 2712;
                       HEAP32[((2224 + 20|0))>>2] = 0;
                       HEAP32[((2224 + 24|0))>>2] = 0;
                       HEAP32[((2224 + 8|0))>>2] = 4098;
                       HEAP32[((2224 + 16|0))>>2] = 0;
                       HEAP32[((2224 + 12|0))>>2] = 6;
                       dest=((2224 + 36|0))+0|0; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
                       __ZNSt3__16localeC2Ev(((2224 + 32|0)));
                       HEAP32[((2224 + 76|0))>>2] = 0;
                       HEAP32[((2224 + 80|0))>>2] = -1;
                       $341 = HEAP32[2224>>2]|0;
                       $342 = (($341) + -12|0);
                       $343 = HEAP32[$342>>2]|0;
                       $$sum10$i = (($343) + 24)|0;
                       $344 = (2224 + ($$sum10$i)|0);
                       $345 = HEAP32[$344>>2]|0;
                       HEAP32[2312>>2] = ((3944 + 12|0));
                       HEAP32[((2312 + 4|0))>>2] = ((3944 + 32|0));
                       HEAP32[((2312 + 28|0))>>2] = $345;
                       $not$$i43$i = ($345|0)==(0|0);
                       $346 = $not$$i43$i&1;
                       HEAP32[((2312 + 20|0))>>2] = $346;
                       HEAP32[((2312 + 24|0))>>2] = 0;
                       HEAP32[((2312 + 8|0))>>2] = 4098;
                       HEAP32[((2312 + 16|0))>>2] = 0;
                       HEAP32[((2312 + 12|0))>>2] = 6;
                       dest=((2312 + 36|0))+0|0; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
                       __ZNSt3__16localeC2Ev(((2312 + 32|0)));
                       HEAP32[((2312 + 76|0))>>2] = 0;
                       HEAP32[((2312 + 80|0))>>2] = -1;
                       $347 = HEAP32[2048>>2]|0;
                       $348 = (($347) + -12|0);
                       $349 = HEAP32[$348>>2]|0;
                       $$sum11$i = (($349) + 72)|0;
                       $350 = (2048 + ($$sum11$i)|0);
                       HEAP32[$350>>2] = 2136;
                       $351 = HEAP32[2224>>2]|0;
                       $352 = (($351) + -12|0);
                       $353 = HEAP32[$352>>2]|0;
                       $$sum12$i = (($353) + 4)|0;
                       $354 = (2224 + ($$sum12$i)|0);
                       $355 = HEAP32[$354>>2]|0;
                       $356 = $355 | 8192;
                       HEAP32[$354>>2] = $356;
                       $357 = HEAP32[2224>>2]|0;
                       $358 = (($357) + -12|0);
                       $359 = HEAP32[$358>>2]|0;
                       $$sum13$i = (($359) + 72)|0;
                       $360 = (2224 + ($$sum13$i)|0);
                       HEAP32[$360>>2] = 2136;
                       (___cxa_atexit((442|0),(2400|0),(___dso_handle|0))|0);
                       STACKTOP = sp;return;
                      }
                     } while(0);
                     $314 = (___cxa_allocate_exception(4)|0);
                     HEAP32[$314>>2] = ((14256 + 8|0));
                     __THREW__ = 0;
                     invoke_viii(379,($314|0),(14336|0),(351|0));
                     $315 = __THREW__; __THREW__ = 0;
                     $316 = $315&1;
                     if ($316) {
                      break;
                     }
                     // unreachable;
                    }
                   } while(0);
                   $319 = ___cxa_find_matching_catch(-1,-1)|0;
                   $320 = tempRet0;
                   $321 = HEAP32[$292>>2]|0;HEAP32[$292>>2] = (($321+-1)|0);
                   $322 = ($321|0)==(0);
                   if ($322) {
                    $323 = HEAP32[$291>>2]|0;
                    $324 = (($323) + 8|0);
                    $325 = HEAP32[$324>>2]|0;
                    FUNCTION_TABLE_vi[$325 & 511]($291);
                   }
                   HEAP32[2712>>2] = ((3760 + 8|0));
                   $326 = HEAP32[((2712 + 4|0))>>2]|0;
                   $327 = (($326) + 4|0);
                   $328 = HEAP32[$327>>2]|0;HEAP32[$327>>2] = (($328+-1)|0);
                   $329 = ($328|0)==(0);
                   if (!($329)) {
                    ___resumeException($319|0);
                    // unreachable;
                   }
                   $330 = HEAP32[$326>>2]|0;
                   $331 = (($330) + 8|0);
                   $332 = HEAP32[$331>>2]|0;
                   FUNCTION_TABLE_vi[$332 & 511]($326);
                   ___resumeException($319|0);
                   // unreachable;
                  }
                 } while(0);
                 $264 = (___cxa_allocate_exception(4)|0);
                 HEAP32[$264>>2] = ((14256 + 8|0));
                 __THREW__ = 0;
                 invoke_viii(379,($264|0),(14336|0),(351|0));
                 $265 = __THREW__; __THREW__ = 0;
                 $266 = $265&1;
                 if ($266) {
                  break;
                 }
                 // unreachable;
                }
               } while(0);
               $269 = ___cxa_find_matching_catch(-1,-1)|0;
               $270 = tempRet0;
               $271 = HEAP32[$242>>2]|0;HEAP32[$242>>2] = (($271+-1)|0);
               $272 = ($271|0)==(0);
               if ($272) {
                $273 = HEAP32[$241>>2]|0;
                $274 = (($273) + 8|0);
                $275 = HEAP32[$274>>2]|0;
                FUNCTION_TABLE_vi[$275 & 511]($241);
               }
               HEAP32[2664>>2] = ((3760 + 8|0));
               $276 = HEAP32[((2664 + 4|0))>>2]|0;
               $277 = (($276) + 4|0);
               $278 = HEAP32[$277>>2]|0;HEAP32[$277>>2] = (($278+-1)|0);
               $279 = ($278|0)==(0);
               if (!($279)) {
                ___resumeException($269|0);
                // unreachable;
               }
               $280 = HEAP32[$276>>2]|0;
               $281 = (($280) + 8|0);
               $282 = HEAP32[$281>>2]|0;
               FUNCTION_TABLE_vi[$282 & 511]($276);
               ___resumeException($269|0);
               // unreachable;
              }
             } while(0);
             $205 = (___cxa_allocate_exception(4)|0);
             HEAP32[$205>>2] = ((14256 + 8|0));
             __THREW__ = 0;
             invoke_viii(379,($205|0),(14336|0),(351|0));
             $206 = __THREW__; __THREW__ = 0;
             $207 = $206&1;
             if ($207) {
              break;
             }
             // unreachable;
            }
           } while(0);
           $227 = ___cxa_find_matching_catch(-1,-1)|0;
           $228 = tempRet0;
           $229 = HEAP32[$183>>2]|0;HEAP32[$183>>2] = (($229+-1)|0);
           $230 = ($229|0)==(0);
           if ($230) {
            $231 = HEAP32[$182>>2]|0;
            $232 = (($231) + 8|0);
            $233 = HEAP32[$232>>2]|0;
            FUNCTION_TABLE_vi[$233 & 511]($182);
           }
           HEAP32[2608>>2] = ((3760 + 8|0));
           $234 = HEAP32[((2608 + 4|0))>>2]|0;
           $235 = (($234) + 4|0);
           $236 = HEAP32[$235>>2]|0;HEAP32[$235>>2] = (($236+-1)|0);
           $237 = ($236|0)==(0);
           if (!($237)) {
            ___resumeException($227|0);
            // unreachable;
           }
           $238 = HEAP32[$234>>2]|0;
           $239 = (($238) + 8|0);
           $240 = HEAP32[$239>>2]|0;
           FUNCTION_TABLE_vi[$240 & 511]($234);
           ___resumeException($227|0);
           // unreachable;
          }
         }
         $135 = (___cxa_allocate_exception(4)|0);
         HEAP32[$135>>2] = ((14256 + 8|0));
         __THREW__ = 0;
         invoke_viii(379,($135|0),(14336|0),(351|0));
         $136 = __THREW__; __THREW__ = 0;
         $137 = $136&1;
         if (!($137)) {
          // unreachable;
         }
        }
        $140 = ___cxa_find_matching_catch(-1,-1)|0;
        $141 = tempRet0;
        $142 = HEAP32[$113>>2]|0;HEAP32[$113>>2] = (($142+-1)|0);
        $143 = ($142|0)==(0);
        if ($143) {
         $144 = HEAP32[$112>>2]|0;
         $145 = (($144) + 8|0);
         $146 = HEAP32[$145>>2]|0;
         FUNCTION_TABLE_vi[$146 & 511]($112);
        }
        HEAP32[2560>>2] = ((3696 + 8|0));
        $147 = HEAP32[((2560 + 4|0))>>2]|0;
        $148 = (($147) + 4|0);
        $149 = HEAP32[$148>>2]|0;HEAP32[$148>>2] = (($149+-1)|0);
        $150 = ($149|0)==(0);
        if (!($150)) {
         ___resumeException($140|0);
         // unreachable;
        }
        $151 = HEAP32[$147>>2]|0;
        $152 = (($151) + 8|0);
        $153 = HEAP32[$152>>2]|0;
        FUNCTION_TABLE_vi[$153 & 511]($147);
        ___resumeException($140|0);
        // unreachable;
       }
      }
      $84 = (___cxa_allocate_exception(4)|0);
      HEAP32[$84>>2] = ((14256 + 8|0));
      __THREW__ = 0;
      invoke_viii(379,($84|0),(14336|0),(351|0));
      $85 = __THREW__; __THREW__ = 0;
      $86 = $85&1;
      if (!($86)) {
       // unreachable;
      }
     }
     $89 = ___cxa_find_matching_catch(-1,-1)|0;
     $90 = tempRet0;
     $91 = HEAP32[$62>>2]|0;HEAP32[$62>>2] = (($91+-1)|0);
     $92 = ($91|0)==(0);
     if ($92) {
      $93 = HEAP32[$61>>2]|0;
      $94 = (($93) + 8|0);
      $95 = HEAP32[$94>>2]|0;
      FUNCTION_TABLE_vi[$95 & 511]($61);
     }
     HEAP32[2512>>2] = ((3696 + 8|0));
     $96 = HEAP32[((2512 + 4|0))>>2]|0;
     $97 = (($96) + 4|0);
     $98 = HEAP32[$97>>2]|0;HEAP32[$97>>2] = (($98+-1)|0);
     $99 = ($98|0)==(0);
     if (!($99)) {
      ___resumeException($89|0);
      // unreachable;
     }
     $100 = HEAP32[$96>>2]|0;
     $101 = (($100) + 8|0);
     $102 = HEAP32[$101>>2]|0;
     FUNCTION_TABLE_vi[$102 & 511]($96);
     ___resumeException($89|0);
     // unreachable;
    }
   }
   $24 = (___cxa_allocate_exception(4)|0);
   HEAP32[$24>>2] = ((14256 + 8|0));
   __THREW__ = 0;
   invoke_viii(379,($24|0),(14336|0),(351|0));
   $25 = __THREW__; __THREW__ = 0;
   $26 = $25&1;
   if (!($26)) {
    // unreachable;
   }
  }
 } while(0);
 $46 = ___cxa_find_matching_catch(-1,-1)|0;
 $47 = tempRet0;
 $48 = HEAP32[$2>>2]|0;HEAP32[$2>>2] = (($48+-1)|0);
 $49 = ($48|0)==(0);
 if ($49) {
  $50 = HEAP32[$1>>2]|0;
  $51 = (($50) + 8|0);
  $52 = HEAP32[$51>>2]|0;
  FUNCTION_TABLE_vi[$52 & 511]($1);
 }
 HEAP32[2408>>2] = ((3696 + 8|0));
 $53 = HEAP32[((2408 + 4|0))>>2]|0;
 $54 = (($53) + 4|0);
 $55 = HEAP32[$54>>2]|0;HEAP32[$54>>2] = (($55+-1)|0);
 $56 = ($55|0)==(0);
 if (!($56)) {
  ___resumeException($46|0);
  // unreachable;
 }
 $57 = HEAP32[$53>>2]|0;
 $58 = (($57) + 8|0);
 $59 = HEAP32[$58>>2]|0;
 FUNCTION_TABLE_vi[$59 & 511]($53);
 ___resumeException($46|0);
 // unreachable;
}
function __ZNSt11logic_errorD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $this$idx$val$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((3272 + 8|0));
 $0 = (($this) + 4|0);
 $this$idx$val$i$i = HEAP32[$0>>2]|0;
 $1 = (($this$idx$val$i$i) + -4|0);
 $2 = HEAP32[$1>>2]|0;HEAP32[$1>>2] = (($2+-1)|0);
 $3 = (($2) + -1)|0;
 $4 = ($3|0)<(0);
 if ($4) {
  $5 = HEAP32[$0>>2]|0;
  $6 = (($5) + -12|0);
  _free($6);
  __ZNSt9exceptionD2Ev(($this|0));
  _free($this);
  STACKTOP = sp;return;
 } else {
  __ZNSt9exceptionD2Ev(($this|0));
  _free($this);
  STACKTOP = sp;return;
 }
}
function __ZNSt11logic_errorD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $this$idx$val$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((3272 + 8|0));
 $0 = (($this) + 4|0);
 $this$idx$val$i = HEAP32[$0>>2]|0;
 $1 = (($this$idx$val$i) + -4|0);
 $2 = HEAP32[$1>>2]|0;HEAP32[$1>>2] = (($2+-1)|0);
 $3 = (($2) + -1)|0;
 $4 = ($3|0)<(0);
 if (!($4)) {
  __ZNSt9exceptionD2Ev(($this|0));
  STACKTOP = sp;return;
 }
 $5 = HEAP32[$0>>2]|0;
 $6 = (($5) + -12|0);
 _free($6);
 __ZNSt9exceptionD2Ev(($this|0));
 STACKTOP = sp;return;
}
function __ZNKSt11logic_error4whatEv($this) {
 $this = $this|0;
 var $$idx$val = 0, $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $$idx$val = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($$idx$val|0);
}
function __ZNSt13runtime_errorD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $this$idx$val$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((3296 + 8|0));
 $0 = (($this) + 4|0);
 $this$idx$val$i$i = HEAP32[$0>>2]|0;
 $1 = (($this$idx$val$i$i) + -4|0);
 $2 = HEAP32[$1>>2]|0;HEAP32[$1>>2] = (($2+-1)|0);
 $3 = (($2) + -1)|0;
 $4 = ($3|0)<(0);
 if ($4) {
  $5 = HEAP32[$0>>2]|0;
  $6 = (($5) + -12|0);
  _free($6);
  __ZNSt9exceptionD2Ev(($this|0));
  _free($this);
  STACKTOP = sp;return;
 } else {
  __ZNSt9exceptionD2Ev(($this|0));
  _free($this);
  STACKTOP = sp;return;
 }
}
function __ZNSt13runtime_errorD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $this$idx$val$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((3296 + 8|0));
 $0 = (($this) + 4|0);
 $this$idx$val$i = HEAP32[$0>>2]|0;
 $1 = (($this$idx$val$i) + -4|0);
 $2 = HEAP32[$1>>2]|0;HEAP32[$1>>2] = (($2+-1)|0);
 $3 = (($2) + -1)|0;
 $4 = ($3|0)<(0);
 if (!($4)) {
  __ZNSt9exceptionD2Ev(($this|0));
  STACKTOP = sp;return;
 }
 $5 = HEAP32[$0>>2]|0;
 $6 = (($5) + -12|0);
 _free($6);
 __ZNSt9exceptionD2Ev(($this|0));
 STACKTOP = sp;return;
}
function __ZNKSt13runtime_error4whatEv($this) {
 $this = $this|0;
 var $$idx$val = 0, $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $$idx$val = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($$idx$val|0);
}
function __ZNSt12length_errorD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $this$idx$val$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((3272 + 8|0));
 $0 = (($this) + 4|0);
 $this$idx$val$i$i = HEAP32[$0>>2]|0;
 $1 = (($this$idx$val$i$i) + -4|0);
 $2 = HEAP32[$1>>2]|0;HEAP32[$1>>2] = (($2+-1)|0);
 $3 = (($2) + -1)|0;
 $4 = ($3|0)<(0);
 if ($4) {
  $5 = HEAP32[$0>>2]|0;
  $6 = (($5) + -12|0);
  _free($6);
  __ZNSt9exceptionD2Ev(($this|0));
  _free($this);
  STACKTOP = sp;return;
 } else {
  __ZNSt9exceptionD2Ev(($this|0));
  _free($this);
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__114error_category23default_error_conditionEi($agg$result,$this,$ev) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $ev = $ev|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$agg$result>>2] = $ev;
 $0 = (($agg$result) + 4|0);
 HEAP32[$0>>2] = $this;
 STACKTOP = sp;return;
}
function __ZNKSt3__114error_category10equivalentEiRKNS_15error_conditionE($this,$code,$condition) {
 $this = $this|0;
 $code = $code|0;
 $condition = $condition|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp;
 $1 = HEAP32[$this>>2]|0;
 $2 = (($1) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 FUNCTION_TABLE_viii[$3 & 511]($0,$this,$code);
 $4 = (($0) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($condition) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($5|0)==($7|0);
 if (!($8)) {
  $12 = 0;
  STACKTOP = sp;return ($12|0);
 }
 $9 = HEAP32[$0>>2]|0;
 $10 = HEAP32[$condition>>2]|0;
 $11 = ($9|0)==($10|0);
 $12 = $11;
 STACKTOP = sp;return ($12|0);
}
function __ZNKSt3__114error_category10equivalentERKNS_10error_codeEi($this,$code,$condition) {
 $this = $this|0;
 $code = $code|0;
 $condition = $condition|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($code) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==($this|0);
 if (!($2)) {
  $5 = 0;
  STACKTOP = sp;return ($5|0);
 }
 $3 = HEAP32[$code>>2]|0;
 $4 = ($3|0)==($condition|0);
 $5 = $4;
 STACKTOP = sp;return ($5|0);
}
function __ZNSt3__112system_errorD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $this$idx$val$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((3296 + 8|0));
 $0 = (($this) + 4|0);
 $this$idx$val$i$i = HEAP32[$0>>2]|0;
 $1 = (($this$idx$val$i$i) + -4|0);
 $2 = HEAP32[$1>>2]|0;HEAP32[$1>>2] = (($2+-1)|0);
 $3 = (($2) + -1)|0;
 $4 = ($3|0)<(0);
 if ($4) {
  $5 = HEAP32[$0>>2]|0;
  $6 = (($5) + -12|0);
  _free($6);
 }
 __ZNSt9exceptionD2Ev(($this|0));
 _free($this);
 STACKTOP = sp;return;
}
function __ZNSt3__112system_errorD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $this$idx$val$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((3296 + 8|0));
 $0 = (($this) + 4|0);
 $this$idx$val$i$i = HEAP32[$0>>2]|0;
 $1 = (($this$idx$val$i$i) + -4|0);
 $2 = HEAP32[$1>>2]|0;HEAP32[$1>>2] = (($2+-1)|0);
 $3 = (($2) + -1)|0;
 $4 = ($3|0)<(0);
 if (!($4)) {
  __ZNSt9exceptionD2Ev(($this|0));
  STACKTOP = sp;return;
 }
 $5 = HEAP32[$0>>2]|0;
 $6 = (($5) + -12|0);
 _free($6);
 __ZNSt9exceptionD2Ev(($this|0));
 STACKTOP = sp;return;
}
function __ZNSt3__111__call_onceERVmPvPFvS2_E($flag,$arg) {
 $flag = $flag|0;
 $arg = $arg|0;
 var $$idx$val$i = 0, $$idx1$i = 0, $$idx1$val$i$field = 0, $$idx1$val$i$field2 = 0, $$idx1$val$i$index1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 (_pthread_mutex_lock((3608|0))|0);
 $0 = HEAP32[$flag>>2]|0;
 $1 = ($0|0)==(1);
 if ($1) {
  while(1) {
   (_pthread_cond_wait((3632|0),(3608|0))|0);
   $2 = HEAP32[$flag>>2]|0;
   $3 = ($2|0)==(1);
   if (!($3)) {
    break;
   }
  }
 }
 $4 = HEAP32[$flag>>2]|0;
 $5 = ($4|0)==(0);
 if (!($5)) {
  (_pthread_mutex_unlock((3608|0))|0);
  STACKTOP = sp;return;
 }
 HEAP32[$flag>>2] = 1;
 __THREW__ = 0;
 (invoke_ii(443,(3608|0))|0);
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if (!($7)) {
  $$idx$val$i = HEAP32[$arg>>2]|0;
  $$idx1$i = (($arg) + 4|0);
  $$idx1$val$i$field = HEAPU8[$$idx1$i>>0]|(HEAPU8[$$idx1$i+1>>0]<<8)|(HEAPU8[$$idx1$i+2>>0]<<16)|(HEAPU8[$$idx1$i+3>>0]<<24);
  $$idx1$val$i$index1 = (($$idx1$i) + 4|0);
  $$idx1$val$i$field2 = HEAPU8[$$idx1$val$i$index1>>0]|(HEAPU8[$$idx1$val$i$index1+1>>0]<<8)|(HEAPU8[$$idx1$val$i$index1+2>>0]<<16)|(HEAPU8[$$idx1$val$i$index1+3>>0]<<24);
  $8 = $$idx1$val$i$field2 >> 1;
  $9 = (($$idx$val$i) + ($8)|0);
  $10 = $$idx1$val$i$field2 & 1;
  $11 = ($10|0)==(0);
  if ($11) {
   $15 = $$idx1$val$i$field;
   $16 = $15;
  } else {
   $12 = HEAP32[$9>>2]|0;
   $13 = (($12) + ($$idx1$val$i$field)|0);
   $14 = HEAP32[$13>>2]|0;
   $16 = $14;
  }
  __THREW__ = 0;
  invoke_vi($16|0,($9|0));
  $17 = __THREW__; __THREW__ = 0;
  $18 = $17&1;
  if (!($18)) {
   __THREW__ = 0;
   (invoke_ii(444,(3608|0))|0);
   $19 = __THREW__; __THREW__ = 0;
   $20 = $19&1;
   if (!($20)) {
    HEAP32[$flag>>2] = -1;
    __THREW__ = 0;
    (invoke_ii(443,(3608|0))|0);
    $21 = __THREW__; __THREW__ = 0;
    $22 = $21&1;
    if (!($22)) {
     __THREW__ = 0;
     (invoke_ii(445,(3632|0))|0);
     $23 = __THREW__; __THREW__ = 0;
     $24 = $23&1;
     if (!($24)) {
      STACKTOP = sp;return;
     }
    }
   }
  }
 }
 $25 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
 $26 = tempRet0;
 (___cxa_begin_catch(($25|0))|0);
 __THREW__ = 0;
 (invoke_ii(444,(3608|0))|0);
 $27 = __THREW__; __THREW__ = 0;
 $28 = $27&1;
 if (!($28)) {
  HEAP32[$flag>>2] = 0;
  __THREW__ = 0;
  (invoke_ii(443,(3608|0))|0);
  $29 = __THREW__; __THREW__ = 0;
  $30 = $29&1;
  if (!($30)) {
   __THREW__ = 0;
   (invoke_ii(445,(3632|0))|0);
   $31 = __THREW__; __THREW__ = 0;
   $32 = $31&1;
   if (!($32)) {
    __THREW__ = 0;
    invoke_v(446);
    $33 = __THREW__; __THREW__ = 0;
    $34 = $33&1;
    if (!($34)) {
     // unreachable;
    }
   }
  }
 }
 $35 = ___cxa_find_matching_catch(-1,-1)|0;
 $36 = tempRet0;
 __THREW__ = 0;
 invoke_v(447);
 $37 = __THREW__; __THREW__ = 0;
 $38 = $37&1;
 if ($38) {
  $39 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
  $40 = tempRet0;
  ___clang_call_terminate($39);
  // unreachable;
 } else {
  ___resumeException($35|0);
  // unreachable;
 }
}
function __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $eh$lpad$body$i$index14Z2D = 0, $eh$lpad$body$i$indexZ2D = 0, $eh$lpad$body2$index9Z2D = 0, $eh$lpad$body2$indexZ2D = 0, $lpad$phi$i$index = 0, $lpad$phi$i$index4 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 $0 = (___cxa_allocate_exception(8)|0);
 HEAP32[$0>>2] = ((3272 + 8|0));
 while(1) {
  $1 = (_malloc(25)|0);
  $2 = ($1|0)==(0|0);
  if (!($2)) {
   label = 17;
   break;
  }
  $3 = HEAP32[15648>>2]|0;HEAP32[15648>>2] = (($3+0)|0);
  $4 = ($3|0)==(0);
  if ($4) {
   label = 10;
   break;
  }
  $5 = $3;
  __THREW__ = 0;
  invoke_v($5|0);
  $6 = __THREW__; __THREW__ = 0;
  $7 = $6&1;
  if ($7) {
   label = 5;
   break;
  }
 }
 do {
  if ((label|0) == 5) {
   $8 = ___cxa_find_matching_catch(-1,-1,15712|0)|0;
   $9 = tempRet0;
   $lpad$phi$i$index = $8;$lpad$phi$i$index4 = $9;
  }
  else if ((label|0) == 10) {
   $15 = (___cxa_allocate_exception(4)|0);
   HEAP32[$15>>2] = ((15656 + 8|0));
   __THREW__ = 0;
   invoke_viii(379,($15|0),(15712|0),(374|0));
   $16 = __THREW__; __THREW__ = 0;
   $17 = $16&1;
   if ($17) {
    $10 = ___cxa_find_matching_catch(-1,-1,15712|0)|0;
    $11 = tempRet0;
    $lpad$phi$i$index = $10;$lpad$phi$i$index4 = $11;
    break;
   } else {
    // unreachable;
   }
  }
  else if ((label|0) == 17) {
   $25 = (($0) + 4|0);
   $26 = (($1) + 4|0);
   HEAP32[$26>>2] = 12;
   HEAP32[$1>>2] = 12;
   $27 = (($1) + 12|0);
   HEAP32[$25>>2] = $27;
   $28 = (($1) + 8|0);
   HEAP32[$28>>2] = 0;
   dest=$27+0|0; src=3680+0|0; stop=dest+13|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
   HEAP32[$0>>2] = ((3352 + 8|0));
   ___cxa_throw(($0|0),(3400|0),(68|0));
   // unreachable;
  }
 } while(0);
 $12 = ($lpad$phi$i$index4|0)<(0);
 do {
  if ($12) {
   __THREW__ = 0;
   invoke_vi(380,($lpad$phi$i$index|0));
   $13 = __THREW__; __THREW__ = 0;
   $14 = $13&1;
   if ($14) {
    $18 = ___cxa_find_matching_catch(-1,-1,15712|0)|0;
    $19 = tempRet0;
    $eh$lpad$body2$index9Z2D = $19;$eh$lpad$body2$indexZ2D = $18;
    break;
   } else {
    // unreachable;
   }
  } else {
   $eh$lpad$body2$index9Z2D = $lpad$phi$i$index4;$eh$lpad$body2$indexZ2D = $lpad$phi$i$index;
  }
 } while(0);
 $20 = ($eh$lpad$body2$index9Z2D|0)<(0);
 if (!($20)) {
  $eh$lpad$body$i$index14Z2D = $eh$lpad$body2$index9Z2D;$eh$lpad$body$i$indexZ2D = $eh$lpad$body2$indexZ2D;
  __ZNSt9exceptionD2Ev(($0|0));
  ___cxa_free_exception(($0|0));
  ___resumeException($eh$lpad$body$i$indexZ2D|0);
  // unreachable;
 }
 __THREW__ = 0;
 invoke_vi(380,($eh$lpad$body2$indexZ2D|0));
 $21 = __THREW__; __THREW__ = 0;
 $22 = $21&1;
 if (!($22)) {
  // unreachable;
 }
 $23 = ___cxa_find_matching_catch(-1,-1)|0;
 $24 = tempRet0;
 $eh$lpad$body$i$index14Z2D = $24;$eh$lpad$body$i$indexZ2D = $23;
 __ZNSt9exceptionD2Ev(($0|0));
 ___cxa_free_exception(($0|0));
 ___resumeException($eh$lpad$body$i$indexZ2D|0);
 // unreachable;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($this,$__s,$__sz) {
 $this = $this|0;
 $__s = $__s|0;
 $__sz = $__sz|0;
 var $$size$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$0 = 0, $lpad$phi$i$index = 0, $lpad$phi$i$index2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__sz>>>0)>(4294967279);
 if ($0) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
  // unreachable;
 }
 $1 = ($__sz>>>0)<(11);
 if ($1) {
  $2 = $__sz << 1;
  $3 = $2&255;
  HEAP8[$this>>0] = $3;
  $4 = (($this) + 1|0);
  $__p$0 = $4;
  _memcpy(($__p$0|0),($__s|0),($__sz|0))|0;
  $26 = (($__p$0) + ($__sz)|0);
  HEAP8[$26>>0] = 0;
  STACKTOP = sp;return;
 }
 $5 = (($__sz) + 16)|0;
 $6 = $5 & -16;
 $7 = ($6|0)==(0);
 $$size$i = $7 ? 1 : $6;
 while(1) {
  $8 = (_malloc($$size$i)|0);
  $9 = ($8|0)==(0|0);
  if (!($9)) {
   label = 16;
   break;
  }
  $10 = HEAP32[15648>>2]|0;HEAP32[15648>>2] = (($10+0)|0);
  $11 = ($10|0)==(0);
  if ($11) {
   label = 13;
   break;
  }
  $12 = $10;
  __THREW__ = 0;
  invoke_v($12|0);
  $13 = __THREW__; __THREW__ = 0;
  $14 = $13&1;
  if ($14) {
   label = 9;
   break;
  }
 }
 do {
  if ((label|0) == 9) {
   $15 = ___cxa_find_matching_catch(-1,-1,15712|0)|0;
   $16 = tempRet0;
   $lpad$phi$i$index = $15;$lpad$phi$i$index2 = $16;
  }
  else if ((label|0) == 13) {
   $20 = (___cxa_allocate_exception(4)|0);
   HEAP32[$20>>2] = ((15656 + 8|0));
   __THREW__ = 0;
   invoke_viii(379,($20|0),(15712|0),(374|0));
   $21 = __THREW__; __THREW__ = 0;
   $22 = $21&1;
   if ($22) {
    $17 = ___cxa_find_matching_catch(-1,-1,15712|0)|0;
    $18 = tempRet0;
    $lpad$phi$i$index = $17;$lpad$phi$i$index2 = $18;
    break;
   } else {
    // unreachable;
   }
  }
  else if ((label|0) == 16) {
   $23 = (($this) + 8|0);
   HEAP32[$23>>2] = $8;
   $24 = $6 | 1;
   HEAP32[$this>>2] = $24;
   $25 = (($this) + 4|0);
   HEAP32[$25>>2] = $__sz;
   $__p$0 = $8;
   _memcpy(($__p$0|0),($__s|0),($__sz|0))|0;
   $26 = (($__p$0) + ($__sz)|0);
   HEAP8[$26>>0] = 0;
   STACKTOP = sp;return;
  }
 } while(0);
 $19 = ($lpad$phi$i$index2|0)<(0);
 if ($19) {
  ___cxa_call_unexpected(($lpad$phi$i$index|0));
  // unreachable;
 } else {
  ___resumeException($lpad$phi$i$index|0);
  // unreachable;
 }
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if (!($2)) {
  $3 = (($this) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)==(0|0);
  if (!($5)) {
   _free($4);
  }
 }
 STACKTOP = sp;return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc($this,$__s) {
 $this = $this|0;
 $__s = $__s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strlen(($__s|0))|0);
 $1 = HEAP8[$this>>0]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  $10 = $1;$8 = 10;
 } else {
  $4 = HEAP32[$this>>2]|0;
  $5 = $4 & -2;
  $phitmp$i$i = (($5) + -1)|0;
  $6 = $4&255;
  $10 = $6;$8 = $phitmp$i$i;
 }
 $7 = ($8>>>0)<($0>>>0);
 $9 = $10 & 1;
 $11 = ($9<<24>>24)==(0);
 if ($7) {
  if ($11) {
   $25 = $10&255;
   $26 = $25 >>> 1;
   $28 = $26;
  } else {
   $23 = (($this) + 4|0);
   $24 = HEAP32[$23>>2]|0;
   $28 = $24;
  }
  $27 = (($0) - ($8))|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc($this,$8,$27,$28,0,$28,$0,$__s);
  STACKTOP = sp;return;
 }
 if ($11) {
  $14 = (($this) + 1|0);
  $15 = $14;
 } else {
  $12 = (($this) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  $15 = $13;
 }
 _memmove(($15|0),($__s|0),($0|0))|0;
 $16 = (($15) + ($0)|0);
 HEAP8[$16>>0] = 0;
 $17 = HEAP8[$this>>0]|0;
 $18 = $17 & 1;
 $19 = ($18<<24>>24)==(0);
 if ($19) {
  $21 = $0 << 1;
  $22 = $21&255;
  HEAP8[$this>>0] = $22;
  STACKTOP = sp;return;
 } else {
  $20 = (($this) + 4|0);
  HEAP32[$20>>2] = $0;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $$pre$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $5 = $0&255;
  $6 = $5 >>> 1;
  $8 = $6;
 } else {
  $3 = (($this) + 4|0);
  $4 = HEAP32[$3>>2]|0;
  $8 = $4;
 }
 $7 = ($8>>>0)<($__n>>>0);
 if (!($7)) {
  if ($2) {
   $47 = ((($this) + ($__n)|0) + 1|0);
   HEAP8[$47>>0] = 0;
   $48 = $__n << 1;
   $49 = $48&255;
   HEAP8[$this>>0] = $49;
   STACKTOP = sp;return;
  } else {
   $43 = (($this) + 8|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = (($44) + ($__n)|0);
   HEAP8[$45>>0] = 0;
   $46 = (($this) + 4|0);
   HEAP32[$46>>2] = $__n;
   STACKTOP = sp;return;
  }
 }
 $9 = (($__n) - ($8))|0;
 $10 = ($8|0)==($__n|0);
 if ($10) {
  STACKTOP = sp;return;
 }
 if ($2) {
  $15 = $0;$22 = 10;
 } else {
  $11 = HEAP32[$this>>2]|0;
  $12 = $11 & -2;
  $phitmp$i$i = (($12) + -1)|0;
  $13 = $11&255;
  $15 = $13;$22 = $phitmp$i$i;
 }
 $14 = $15 & 1;
 $16 = ($14<<24>>24)==(0);
 if ($16) {
  $19 = $15&255;
  $20 = $19 >>> 1;
  $23 = $20;
 } else {
  $17 = (($this) + 4|0);
  $18 = HEAP32[$17>>2]|0;
  $23 = $18;
 }
 $21 = (($22) - ($23))|0;
 $24 = ($21>>>0)<($9>>>0);
 if ($24) {
  $25 = (($9) - ($22))|0;
  $26 = (($25) + ($23))|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($this,$22,$26,$23,$23,0);
  $$pre$i = HEAP8[$this>>0]|0;
  $28 = $$pre$i;
 } else {
  $28 = $15;
 }
 $27 = $28 & 1;
 $29 = ($27<<24>>24)==(0);
 if ($29) {
  $32 = (($this) + 1|0);
  $34 = $32;
 } else {
  $30 = (($this) + 8|0);
  $31 = HEAP32[$30>>2]|0;
  $34 = $31;
 }
 $33 = (($34) + ($23)|0);
 _memset(($33|0),0,($9|0))|0;
 $35 = (($23) + ($9))|0;
 $36 = HEAP8[$this>>0]|0;
 $37 = $36 & 1;
 $38 = ($37<<24>>24)==(0);
 if ($38) {
  $40 = $35 << 1;
  $41 = $40&255;
  HEAP8[$this>>0] = $41;
 } else {
  $39 = (($this) + 4|0);
  HEAP32[$39>>2] = $35;
 }
 $42 = (($34) + ($35)|0);
 HEAP8[$42>>0] = 0;
 STACKTOP = sp;return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($this) {
 $this = $this|0;
 var $$size$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $9 = 0, $__new_data$0 = 0, $__new_data$1152228 = 0, $__new_data$11523 = 0, $__new_data$121 = 0, $__now_long$0$off018 = 0, $__now_long$0$off0926 = 0, $__p$01324 = 0, $__p$020 = 0, $eh$lpad$body$indexZ2D = 0, $lpad$phi$i$index = 0, $lpad$phi$i$index30 = 0, $lpad$phi$i6$index = 0, $lpad$phi$i6$index35 = 0, $phitmp$i = 0, $phitmp$i2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $19 = 10;$7 = $0;
 } else {
  $3 = HEAP32[$this>>2]|0;
  $4 = $3 & -2;
  $phitmp$i = (($4) + -1)|0;
  $5 = $3&255;
  $19 = $phitmp$i;$7 = $5;
 }
 $6 = $7 & 1;
 $8 = ($6<<24>>24)==(0);
 if ($8) {
  $11 = $7&255;
  $12 = $11 >>> 1;
  $14 = $12;
 } else {
  $9 = (($this) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $14 = $10;
 }
 $13 = ($14>>>0)<(11);
 if ($13) {
  $18 = 10;
 } else {
  $15 = (($14) + 16)|0;
  $16 = $15 & -16;
  $phitmp$i2 = (($16) + -1)|0;
  $18 = $phitmp$i2;
 }
 $17 = ($18|0)==($19|0);
 if ($17) {
  STACKTOP = sp;return;
 }
 $20 = ($18|0)==(10);
 do {
  if ($20) {
   $60 = (($this) + 1|0);
   $61 = (($this) + 8|0);
   $62 = HEAP32[$61>>2]|0;
   if ($8) {
    $63 = $7&255;
    $64 = $63 >>> 1;
    $65 = (($64) + 1)|0;
    _memcpy(($60|0),($62|0),($65|0))|0;
    $__new_data$11523 = $60;$__now_long$0$off0926 = 0;$__p$01324 = $62;
    label = 39;
   } else {
    $__new_data$121 = $60;$__now_long$0$off018 = 0;$__p$020 = $62;
    label = 37;
   }
  } else {
   $21 = ($18>>>0)>($19>>>0);
   $22 = (($18) + 1)|0;
   $23 = ($22|0)==(0);
   $$size$i = $23 ? 1 : $22;
   L16: do {
    if ($21) {
     while(1) {
      $24 = (_malloc($$size$i)|0);
      $25 = ($24|0)==(0|0);
      if (!($25)) {
       $__new_data$0 = $24;
       break L16;
      }
      $26 = HEAP32[15648>>2]|0;HEAP32[15648>>2] = (($26+0)|0);
      $27 = ($26|0)==(0);
      if ($27) {
       label = 18;
       break;
      }
      $28 = $26;
      __THREW__ = 0;
      invoke_v($28|0);
      $29 = __THREW__; __THREW__ = 0;
      $30 = $29&1;
      if ($30) {
       label = 14;
       break;
      }
     }
     do {
      if ((label|0) == 14) {
       $31 = ___cxa_find_matching_catch(-1,-1,15712|0)|0;
       $32 = tempRet0;
       $lpad$phi$i$index = $31;$lpad$phi$i$index30 = $32;
      }
      else if ((label|0) == 18) {
       $36 = (___cxa_allocate_exception(4)|0);
       HEAP32[$36>>2] = ((15656 + 8|0));
       __THREW__ = 0;
       invoke_viii(379,($36|0),(15712|0),(374|0));
       $37 = __THREW__; __THREW__ = 0;
       $38 = $37&1;
       if ($38) {
        $33 = ___cxa_find_matching_catch(-1,-1,15712|0)|0;
        $34 = tempRet0;
        $lpad$phi$i$index = $33;$lpad$phi$i$index30 = $34;
        break;
       } else {
        // unreachable;
       }
      }
     } while(0);
     $35 = ($lpad$phi$i$index30|0)<(0);
     if ($35) {
      ___cxa_call_unexpected(($lpad$phi$i$index|0));
      // unreachable;
     } else {
      ___resumeException($lpad$phi$i$index|0);
      // unreachable;
     }
    } else {
     while(1) {
      $39 = (_malloc($$size$i)|0);
      $40 = ($39|0)==(0|0);
      if (!($40)) {
       $__new_data$0 = $39;
       break L16;
      }
      $41 = HEAP32[15648>>2]|0;HEAP32[15648>>2] = (($41+0)|0);
      $42 = ($41|0)==(0);
      if ($42) {
       label = 29;
       break;
      }
      $43 = $41;
      __THREW__ = 0;
      invoke_v($43|0);
      $44 = __THREW__; __THREW__ = 0;
      $45 = $44&1;
      if ($45) {
       label = 24;
       break;
      }
     }
     do {
      if ((label|0) == 24) {
       $46 = ___cxa_find_matching_catch(-1,-1,15712|0,0|0)|0;
       $47 = tempRet0;
       $lpad$phi$i6$index = $46;$lpad$phi$i6$index35 = $47;
      }
      else if ((label|0) == 29) {
       $53 = (___cxa_allocate_exception(4)|0);
       HEAP32[$53>>2] = ((15656 + 8|0));
       __THREW__ = 0;
       invoke_viii(379,($53|0),(15712|0),(374|0));
       $54 = __THREW__; __THREW__ = 0;
       $55 = $54&1;
       if ($55) {
        $48 = ___cxa_find_matching_catch(-1,-1,15712|0,0|0)|0;
        $49 = tempRet0;
        $lpad$phi$i6$index = $48;$lpad$phi$i6$index35 = $49;
        break;
       } else {
        // unreachable;
       }
      }
     } while(0);
     $50 = ($lpad$phi$i6$index35|0)<(0);
     do {
      if ($50) {
       __THREW__ = 0;
       invoke_vi(380,($lpad$phi$i6$index|0));
       $51 = __THREW__; __THREW__ = 0;
       $52 = $51&1;
       if ($52) {
        $56 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
        $57 = tempRet0;
        $eh$lpad$body$indexZ2D = $56;
        break;
       } else {
        // unreachable;
       }
      } else {
       $eh$lpad$body$indexZ2D = $lpad$phi$i6$index;
      }
     } while(0);
     (___cxa_begin_catch(($eh$lpad$body$indexZ2D|0))|0);
     ___cxa_end_catch();
     STACKTOP = sp;return;
    }
   } while(0);
   if ($8) {
    $69 = (($this) + 1|0);
    $70 = $7&255;
    $71 = $70 >>> 1;
    $72 = (($71) + 1)|0;
    _memcpy(($__new_data$0|0),($69|0),($72|0))|0;
    $__new_data$1152228 = $__new_data$0;
    break;
   } else {
    $58 = (($this) + 8|0);
    $59 = HEAP32[$58>>2]|0;
    $__new_data$121 = $__new_data$0;$__now_long$0$off018 = 1;$__p$020 = $59;
    label = 37;
    break;
   }
  }
 } while(0);
 if ((label|0) == 37) {
  $66 = (($this) + 4|0);
  $67 = HEAP32[$66>>2]|0;
  $68 = (($67) + 1)|0;
  _memcpy(($__new_data$121|0),($__p$020|0),($68|0))|0;
  $__new_data$11523 = $__new_data$121;$__now_long$0$off0926 = $__now_long$0$off018;$__p$01324 = $__p$020;
  label = 39;
 }
 do {
  if ((label|0) == 39) {
   $73 = ($__p$01324|0)==(0|0);
   if ($73) {
    if ($__now_long$0$off0926) {
     $__new_data$1152228 = $__new_data$11523;
     break;
    }
   } else {
    _free($__p$01324);
    if ($__now_long$0$off0926) {
     $__new_data$1152228 = $__new_data$11523;
     break;
    }
   }
   $78 = $14 << 1;
   $79 = $78&255;
   HEAP8[$this>>0] = $79;
   STACKTOP = sp;return;
  }
 } while(0);
 $74 = (($18) + 1)|0;
 $75 = $74 | 1;
 HEAP32[$this>>2] = $75;
 $76 = (($this) + 4|0);
 HEAP32[$76>>2] = $14;
 $77 = (($this) + 8|0);
 HEAP32[$77>>2] = $__new_data$1152228;
 STACKTOP = sp;return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $14 = 10;$7 = $0;
 } else {
  $3 = HEAP32[$this>>2]|0;
  $4 = $3 & -2;
  $phitmp$i = (($4) + -1)|0;
  $5 = $3&255;
  $14 = $phitmp$i;$7 = $5;
 }
 $6 = $7 & 1;
 $8 = ($6<<24>>24)==(0);
 if ($8) {
  $11 = $7&255;
  $12 = $11 >>> 1;
  $15 = $12;
 } else {
  $9 = (($this) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $15 = $10;
 }
 $13 = (($14) - ($15))|0;
 $16 = ($13>>>0)<($__n>>>0);
 if ($16) {
  $31 = (($__n) - ($14))|0;
  $32 = (($31) + ($15))|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc($this,$14,$32,$15,$15,0,$__n,$__s);
  STACKTOP = sp;return;
 }
 $17 = ($__n|0)==(0);
 if ($17) {
  STACKTOP = sp;return;
 }
 if ($8) {
  $20 = (($this) + 1|0);
  $22 = $20;
 } else {
  $18 = (($this) + 8|0);
  $19 = HEAP32[$18>>2]|0;
  $22 = $19;
 }
 $21 = (($22) + ($15)|0);
 _memcpy(($21|0),($__s|0),($__n|0))|0;
 $23 = (($15) + ($__n))|0;
 $24 = HEAP8[$this>>0]|0;
 $25 = $24 & 1;
 $26 = ($25<<24>>24)==(0);
 if ($26) {
  $28 = $23 << 1;
  $29 = $28&255;
  HEAP8[$this>>0] = $29;
 } else {
  $27 = (($this) + 4|0);
  HEAP32[$27>>2] = $23;
 }
 $30 = (($22) + ($23)|0);
 HEAP8[$30>>0] = 0;
 STACKTOP = sp;return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc($this,$__old_cap,$__delta_cap,$__old_sz,$__n_copy,$__n_del,$__n_add,$__p_new_stuff) {
 $this = $this|0;
 $__old_cap = $__old_cap|0;
 $__delta_cap = $__delta_cap|0;
 $__old_sz = $__old_sz|0;
 $__n_copy = $__n_copy|0;
 $__n_del = $__n_del|0;
 $__n_add = $__n_add|0;
 $__p_new_stuff = $__p_new_stuff|0;
 var $$size$i = 0, $$sum = 0, $$sum1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $lpad$phi$i$index = 0, $lpad$phi$i$index2 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (-18 - ($__old_cap))|0;
 $1 = ($0>>>0)<($__delta_cap>>>0);
 if ($1) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
  // unreachable;
 }
 $2 = HEAP8[$this>>0]|0;
 $3 = $2 & 1;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  $7 = (($this) + 1|0);
  $34 = $7;
 } else {
  $5 = (($this) + 8|0);
  $6 = HEAP32[$5>>2]|0;
  $34 = $6;
 }
 $8 = ($__old_cap>>>0)<(2147483623);
 if ($8) {
  $9 = (($__delta_cap) + ($__old_cap))|0;
  $10 = $__old_cap << 1;
  $11 = ($9>>>0)<($10>>>0);
  $12 = $11 ? $10 : $9;
  $13 = ($12>>>0)<(11);
  if ($13) {
   $17 = 11;
  } else {
   $14 = (($12) + 16)|0;
   $15 = $14 & -16;
   $17 = $15;
  }
 } else {
  $17 = -17;
 }
 $16 = ($17|0)==(0);
 $$size$i = $16 ? 1 : $17;
 while(1) {
  $18 = (_malloc($$size$i)|0);
  $19 = ($18|0)==(0|0);
  if (!($19)) {
   label = 20;
   break;
  }
  $20 = HEAP32[15648>>2]|0;HEAP32[15648>>2] = (($20+0)|0);
  $21 = ($20|0)==(0);
  if ($21) {
   label = 17;
   break;
  }
  $22 = $20;
  __THREW__ = 0;
  invoke_v($22|0);
  $23 = __THREW__; __THREW__ = 0;
  $24 = $23&1;
  if ($24) {
   label = 13;
   break;
  }
 }
 do {
  if ((label|0) == 13) {
   $25 = ___cxa_find_matching_catch(-1,-1,15712|0)|0;
   $26 = tempRet0;
   $lpad$phi$i$index = $25;$lpad$phi$i$index2 = $26;
  }
  else if ((label|0) == 17) {
   $30 = (___cxa_allocate_exception(4)|0);
   HEAP32[$30>>2] = ((15656 + 8|0));
   __THREW__ = 0;
   invoke_viii(379,($30|0),(15712|0),(374|0));
   $31 = __THREW__; __THREW__ = 0;
   $32 = $31&1;
   if ($32) {
    $27 = ___cxa_find_matching_catch(-1,-1,15712|0)|0;
    $28 = tempRet0;
    $lpad$phi$i$index = $27;$lpad$phi$i$index2 = $28;
    break;
   } else {
    // unreachable;
   }
  }
  else if ((label|0) == 20) {
   $33 = ($__n_copy|0)==(0);
   if (!($33)) {
    _memcpy(($18|0),($34|0),($__n_copy|0))|0;
   }
   $35 = ($__n_add|0)==(0);
   if (!($35)) {
    $36 = (($18) + ($__n_copy)|0);
    _memcpy(($36|0),($__p_new_stuff|0),($__n_add|0))|0;
   }
   $37 = (($__old_sz) - ($__n_del))|0;
   $38 = ($37|0)==($__n_copy|0);
   if (!($38)) {
    $39 = (($37) - ($__n_copy))|0;
    $$sum = (($__n_add) + ($__n_copy))|0;
    $40 = (($18) + ($$sum)|0);
    $$sum1 = (($__n_del) + ($__n_copy))|0;
    $41 = (($34) + ($$sum1)|0);
    _memcpy(($40|0),($41|0),($39|0))|0;
   }
   $42 = ($__old_cap|0)==(10);
   $43 = ($34|0)==(0|0);
   $or$cond = $42 | $43;
   if ($or$cond) {
    $44 = (($this) + 8|0);
    HEAP32[$44>>2] = $18;
    $45 = $17 | 1;
    HEAP32[$this>>2] = $45;
    $46 = (($37) + ($__n_add))|0;
    $47 = (($this) + 4|0);
    HEAP32[$47>>2] = $46;
    $48 = (($18) + ($46)|0);
    HEAP8[$48>>0] = 0;
    STACKTOP = sp;return;
   }
   _free($34);
   $44 = (($this) + 8|0);
   HEAP32[$44>>2] = $18;
   $45 = $17 | 1;
   HEAP32[$this>>2] = $45;
   $46 = (($37) + ($__n_add))|0;
   $47 = (($this) + 4|0);
   HEAP32[$47>>2] = $46;
   $48 = (($18) + ($46)|0);
   HEAP8[$48>>0] = 0;
   STACKTOP = sp;return;
  }
 } while(0);
 $29 = ($lpad$phi$i$index2|0)<(0);
 if ($29) {
  ___cxa_call_unexpected(($lpad$phi$i$index|0));
  // unreachable;
 } else {
  ___resumeException($lpad$phi$i$index|0);
  // unreachable;
 }
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($this,$__old_cap,$__delta_cap,$__old_sz,$__n_copy,$__n_add) {
 $this = $this|0;
 $__old_cap = $__old_cap|0;
 $__delta_cap = $__delta_cap|0;
 $__old_sz = $__old_sz|0;
 $__n_copy = $__n_copy|0;
 $__n_add = $__n_add|0;
 var $$size$i = 0, $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $lpad$phi$i$index = 0, $lpad$phi$i$index2 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (-17 - ($__old_cap))|0;
 $1 = ($0>>>0)<($__delta_cap>>>0);
 if ($1) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
  // unreachable;
 }
 $2 = HEAP8[$this>>0]|0;
 $3 = $2 & 1;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  $7 = (($this) + 1|0);
  $34 = $7;
 } else {
  $5 = (($this) + 8|0);
  $6 = HEAP32[$5>>2]|0;
  $34 = $6;
 }
 $8 = ($__old_cap>>>0)<(2147483623);
 if ($8) {
  $9 = (($__delta_cap) + ($__old_cap))|0;
  $10 = $__old_cap << 1;
  $11 = ($9>>>0)<($10>>>0);
  $12 = $11 ? $10 : $9;
  $13 = ($12>>>0)<(11);
  if ($13) {
   $17 = 11;
  } else {
   $14 = (($12) + 16)|0;
   $15 = $14 & -16;
   $17 = $15;
  }
 } else {
  $17 = -17;
 }
 $16 = ($17|0)==(0);
 $$size$i = $16 ? 1 : $17;
 while(1) {
  $18 = (_malloc($$size$i)|0);
  $19 = ($18|0)==(0|0);
  if (!($19)) {
   label = 20;
   break;
  }
  $20 = HEAP32[15648>>2]|0;HEAP32[15648>>2] = (($20+0)|0);
  $21 = ($20|0)==(0);
  if ($21) {
   label = 17;
   break;
  }
  $22 = $20;
  __THREW__ = 0;
  invoke_v($22|0);
  $23 = __THREW__; __THREW__ = 0;
  $24 = $23&1;
  if ($24) {
   label = 13;
   break;
  }
 }
 do {
  if ((label|0) == 13) {
   $25 = ___cxa_find_matching_catch(-1,-1,15712|0)|0;
   $26 = tempRet0;
   $lpad$phi$i$index = $25;$lpad$phi$i$index2 = $26;
  }
  else if ((label|0) == 17) {
   $30 = (___cxa_allocate_exception(4)|0);
   HEAP32[$30>>2] = ((15656 + 8|0));
   __THREW__ = 0;
   invoke_viii(379,($30|0),(15712|0),(374|0));
   $31 = __THREW__; __THREW__ = 0;
   $32 = $31&1;
   if ($32) {
    $27 = ___cxa_find_matching_catch(-1,-1,15712|0)|0;
    $28 = tempRet0;
    $lpad$phi$i$index = $27;$lpad$phi$i$index2 = $28;
    break;
   } else {
    // unreachable;
   }
  }
  else if ((label|0) == 20) {
   $33 = ($__n_copy|0)==(0);
   if (!($33)) {
    _memcpy(($18|0),($34|0),($__n_copy|0))|0;
   }
   $35 = ($__old_sz|0)==($__n_copy|0);
   if (!($35)) {
    $36 = (($__old_sz) - ($__n_copy))|0;
    $$sum = (($__n_add) + ($__n_copy))|0;
    $37 = (($18) + ($$sum)|0);
    $38 = (($34) + ($__n_copy)|0);
    _memcpy(($37|0),($38|0),($36|0))|0;
   }
   $39 = ($__old_cap|0)==(10);
   $40 = ($34|0)==(0|0);
   $or$cond = $39 | $40;
   if ($or$cond) {
    $41 = (($this) + 8|0);
    HEAP32[$41>>2] = $18;
    $42 = $17 | 1;
    HEAP32[$this>>2] = $42;
    STACKTOP = sp;return;
   }
   _free($34);
   $41 = (($this) + 8|0);
   HEAP32[$41>>2] = $18;
   $42 = $17 | 1;
   HEAP32[$this>>2] = $42;
   STACKTOP = sp;return;
  }
 } while(0);
 $29 = ($lpad$phi$i$index2|0)<(0);
 if ($29) {
  ___cxa_call_unexpected(($lpad$phi$i$index|0));
  // unreachable;
 } else {
  ___resumeException($lpad$phi$i$index|0);
  // unreachable;
 }
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if (!($2)) {
  $3 = (($this) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)==(0|0);
  if (!($5)) {
   _free($4);
  }
 }
 STACKTOP = sp;return;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw($this,$__s) {
 $this = $this|0;
 $__s = $__s|0;
 var $$0$i = 0, $$014$i$i$i = 0, $$023$i$i$i = 0, $$025$i$i = 0, $$05$i$i$i = 0, $$07$i$i = 0, $$16$i$i = 0, $$in$i$i = 0, $$size$i$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $lpad$phi$i$i$i$index = 0;
 var $lpad$phi$i$i$i$index3 = 0, $or$cond = 0, $phitmp$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0$i = $__s;
 while(1) {
  $0 = HEAP32[$$0$i>>2]|0;
  $1 = ($0|0)==(0);
  $2 = (($$0$i) + 4|0);
  if ($1) {
   break;
  } else {
   $$0$i = $2;
  }
 }
 $3 = $$0$i;
 $4 = $__s;
 $5 = (($3) - ($4))|0;
 $6 = $5 >> 2;
 $7 = HEAP8[$this>>0]|0;
 $8 = $7 & 1;
 $9 = ($8<<24>>24)==(0);
 if ($9) {
  $14 = 1;$16 = $7;
 } else {
  $10 = HEAP32[$this>>2]|0;
  $11 = $10 & -2;
  $phitmp$i$i = (($11) + -1)|0;
  $12 = $10&255;
  $14 = $phitmp$i$i;$16 = $12;
 }
 $13 = ($14>>>0)<($6>>>0);
 if (!($13)) {
  $15 = $16 & 1;
  $17 = ($15<<24>>24)==(0);
  if ($17) {
   $20 = (($this) + 4|0);
   $22 = $20;
  } else {
   $18 = (($this) + 8|0);
   $19 = HEAP32[$18>>2]|0;
   $22 = $19;
  }
  $21 = $22;
  $23 = (($21) - ($4))|0;
  $24 = $23 >> 2;
  $25 = ($24>>>0)<($6>>>0);
  $26 = ($6|0)==(0);
  if ($25) {
   if (!($26)) {
    $$in$i$i = $6;
    while(1) {
     $27 = (($$in$i$i) + -1)|0;
     $28 = (($__s) + ($27<<2)|0);
     $29 = HEAP32[$28>>2]|0;
     $30 = (($22) + ($27<<2)|0);
     HEAP32[$30>>2] = $29;
     $31 = ($27|0)==(0);
     if ($31) {
      break;
     } else {
      $$in$i$i = $27;
     }
    }
   }
  } else {
   if (!($26)) {
    $$025$i$i = $__s;$$07$i$i = $22;$$16$i$i = $6;
    while(1) {
     $32 = (($$16$i$i) + -1)|0;
     $33 = (($$025$i$i) + 4|0);
     $34 = HEAP32[$$025$i$i>>2]|0;
     $35 = (($$07$i$i) + 4|0);
     HEAP32[$$07$i$i>>2] = $34;
     $36 = ($32|0)==(0);
     if ($36) {
      break;
     } else {
      $$025$i$i = $33;$$07$i$i = $35;$$16$i$i = $32;
     }
    }
   }
  }
  $37 = (($22) + ($6<<2)|0);
  HEAP32[$37>>2] = 0;
  $38 = HEAP8[$this>>0]|0;
  $39 = $38 & 1;
  $40 = ($39<<24>>24)==(0);
  if ($40) {
   $42 = $5 >>> 1;
   $43 = $42&255;
   HEAP8[$this>>0] = $43;
   STACKTOP = sp;return;
  } else {
   $41 = (($this) + 4|0);
   HEAP32[$41>>2] = $6;
   STACKTOP = sp;return;
  }
 }
 $44 = (($6) - ($14))|0;
 $45 = (1073741806 - ($14))|0;
 $46 = ($45>>>0)<($44>>>0);
 if ($46) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
  // unreachable;
 }
 $47 = $16 & 1;
 $48 = ($47<<24>>24)==(0);
 if ($48) {
  $51 = (($this) + 4|0);
  $85 = $51;
 } else {
  $49 = (($this) + 8|0);
  $50 = HEAP32[$49>>2]|0;
  $85 = $50;
 }
 $52 = ($14>>>0)<(536870887);
 if ($52) {
  $53 = $14 << 1;
  $54 = ($6>>>0)<($53>>>0);
  $55 = $54 ? $53 : $6;
  $56 = ($55>>>0)<(2);
  if ($56) {
   $60 = 2;
  } else {
   $57 = (($55) + 4)|0;
   $58 = $57 & -4;
   $60 = $58;
  }
 } else {
  $60 = 1073741807;
 }
 $59 = $60 << 2;
 $61 = ($59|0)==(0);
 $$size$i$i$i = $61 ? 1 : $59;
 while(1) {
  $62 = (_malloc($$size$i$i$i)|0);
  $63 = ($62|0)==(0|0);
  if (!($63)) {
   label = 36;
   break;
  }
  $64 = HEAP32[15648>>2]|0;HEAP32[15648>>2] = (($64+0)|0);
  $65 = ($64|0)==(0);
  if ($65) {
   label = 33;
   break;
  }
  $66 = $64;
  __THREW__ = 0;
  invoke_v($66|0);
  $67 = __THREW__; __THREW__ = 0;
  $68 = $67&1;
  if ($68) {
   label = 29;
   break;
  }
 }
 do {
  if ((label|0) == 29) {
   $69 = ___cxa_find_matching_catch(-1,-1,15712|0)|0;
   $70 = tempRet0;
   $lpad$phi$i$i$i$index = $69;$lpad$phi$i$i$i$index3 = $70;
  }
  else if ((label|0) == 33) {
   $74 = (___cxa_allocate_exception(4)|0);
   HEAP32[$74>>2] = ((15656 + 8|0));
   __THREW__ = 0;
   invoke_viii(379,($74|0),(15712|0),(374|0));
   $75 = __THREW__; __THREW__ = 0;
   $76 = $75&1;
   if ($76) {
    $71 = ___cxa_find_matching_catch(-1,-1,15712|0)|0;
    $72 = tempRet0;
    $lpad$phi$i$i$i$index = $71;$lpad$phi$i$i$i$index3 = $72;
    break;
   } else {
    // unreachable;
   }
  }
  else if ((label|0) == 36) {
   $77 = ($6|0)==(0);
   if (!($77)) {
    $$014$i$i$i = $6;$$023$i$i$i = $__s;$$05$i$i$i = $62;
    while(1) {
     $78 = (($$014$i$i$i) + -1)|0;
     $79 = (($$023$i$i$i) + 4|0);
     $80 = HEAP32[$$023$i$i$i>>2]|0;
     $81 = (($$05$i$i$i) + 4|0);
     HEAP32[$$05$i$i$i>>2] = $80;
     $82 = ($78|0)==(0);
     if ($82) {
      break;
     } else {
      $$014$i$i$i = $78;$$023$i$i$i = $79;$$05$i$i$i = $81;
     }
    }
   }
   $83 = ($14|0)==(1);
   $84 = ($85|0)==(0|0);
   $or$cond = $83 | $84;
   if (!($or$cond)) {
    _free($85);
   }
   $86 = (($this) + 8|0);
   HEAP32[$86>>2] = $62;
   $87 = $60 | 1;
   HEAP32[$this>>2] = $87;
   $88 = (($this) + 4|0);
   HEAP32[$88>>2] = $6;
   $89 = (($62) + ($6<<2)|0);
   HEAP32[$89>>2] = 0;
   STACKTOP = sp;return;
  }
 } while(0);
 $73 = ($lpad$phi$i$i$i$index3|0)<(0);
 if ($73) {
  ___cxa_call_unexpected(($lpad$phi$i$i$i$index|0));
  // unreachable;
 } else {
  ___resumeException($lpad$phi$i$i$i$index|0);
  // unreachable;
 }
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($this) {
 $this = $this|0;
 var $$014$i = 0, $$023$i = 0, $$05$i = 0, $$sink = 0, $$size$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $9 = 0, $__new_data$115 = 0, $__new_data$116 = 0, $__new_data$121 = 0, $__now_long$0$off010 = 0, $__now_long$0$off018 = 0, $__now_long$0$off09 = 0, $__p$013 = 0, $__p$014 = 0, $__p$020 = 0, $__was_long$0$off011 = 0, $__was_long$0$off011$not = 0;
 var $__was_long$0$off012 = 0, $__was_long$0$off019 = 0, $eh$lpad$body$indexZ2D = 0, $lpad$phi$i$index = 0, $lpad$phi$i$index23 = 0, $lpad$phi$i6$index = 0, $lpad$phi$i6$index28 = 0, $or$cond = 0, $phitmp$i = 0, $phitmp$i2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $19 = 1;$7 = $0;
 } else {
  $3 = HEAP32[$this>>2]|0;
  $4 = $3 & -2;
  $phitmp$i = (($4) + -1)|0;
  $5 = $3&255;
  $19 = $phitmp$i;$7 = $5;
 }
 $6 = $7 & 1;
 $8 = ($6<<24>>24)==(0);
 if ($8) {
  $11 = $7&255;
  $12 = $11 >>> 1;
  $14 = $12;
 } else {
  $9 = (($this) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $14 = $10;
 }
 $13 = ($14>>>0)<(2);
 if ($13) {
  $18 = 1;
 } else {
  $15 = (($14) + 4)|0;
  $16 = $15 & -4;
  $phitmp$i2 = (($16) + -1)|0;
  $18 = $phitmp$i2;
 }
 $17 = ($18|0)==($19|0);
 if ($17) {
  STACKTOP = sp;return;
 }
 $20 = ($18|0)==(1);
 do {
  if ($20) {
   $62 = (($this) + 4|0);
   $63 = (($this) + 8|0);
   $64 = HEAP32[$63>>2]|0;
   if ($8) {
    $__new_data$116 = $62;$__now_long$0$off010 = 0;$__p$014 = $64;$__was_long$0$off012 = 1;
    label = 38;
   } else {
    $__new_data$121 = $62;$__now_long$0$off018 = 0;$__p$020 = $64;$__was_long$0$off019 = 1;
    label = 37;
   }
  } else {
   $21 = ($18>>>0)>($19>>>0);
   $22 = $18 << 2;
   $23 = (($22) + 4)|0;
   $24 = ($23|0)==(0);
   $$size$i = $24 ? 1 : $23;
   L16: do {
    if ($21) {
     while(1) {
      $25 = (_malloc($$size$i)|0);
      $26 = ($25|0)==(0|0);
      if (!($26)) {
       $$sink = $25;
       break L16;
      }
      $27 = HEAP32[15648>>2]|0;HEAP32[15648>>2] = (($27+0)|0);
      $28 = ($27|0)==(0);
      if ($28) {
       label = 18;
       break;
      }
      $29 = $27;
      __THREW__ = 0;
      invoke_v($29|0);
      $30 = __THREW__; __THREW__ = 0;
      $31 = $30&1;
      if ($31) {
       label = 14;
       break;
      }
     }
     do {
      if ((label|0) == 14) {
       $32 = ___cxa_find_matching_catch(-1,-1,15712|0)|0;
       $33 = tempRet0;
       $lpad$phi$i$index = $32;$lpad$phi$i$index23 = $33;
      }
      else if ((label|0) == 18) {
       $37 = (___cxa_allocate_exception(4)|0);
       HEAP32[$37>>2] = ((15656 + 8|0));
       __THREW__ = 0;
       invoke_viii(379,($37|0),(15712|0),(374|0));
       $38 = __THREW__; __THREW__ = 0;
       $39 = $38&1;
       if ($39) {
        $34 = ___cxa_find_matching_catch(-1,-1,15712|0)|0;
        $35 = tempRet0;
        $lpad$phi$i$index = $34;$lpad$phi$i$index23 = $35;
        break;
       } else {
        // unreachable;
       }
      }
     } while(0);
     $36 = ($lpad$phi$i$index23|0)<(0);
     if ($36) {
      ___cxa_call_unexpected(($lpad$phi$i$index|0));
      // unreachable;
     } else {
      ___resumeException($lpad$phi$i$index|0);
      // unreachable;
     }
    } else {
     while(1) {
      $40 = (_malloc($$size$i)|0);
      $41 = ($40|0)==(0|0);
      if (!($41)) {
       $$sink = $40;
       break L16;
      }
      $42 = HEAP32[15648>>2]|0;HEAP32[15648>>2] = (($42+0)|0);
      $43 = ($42|0)==(0);
      if ($43) {
       label = 29;
       break;
      }
      $44 = $42;
      __THREW__ = 0;
      invoke_v($44|0);
      $45 = __THREW__; __THREW__ = 0;
      $46 = $45&1;
      if ($46) {
       label = 24;
       break;
      }
     }
     do {
      if ((label|0) == 24) {
       $47 = ___cxa_find_matching_catch(-1,-1,15712|0,0|0)|0;
       $48 = tempRet0;
       $lpad$phi$i6$index = $47;$lpad$phi$i6$index28 = $48;
      }
      else if ((label|0) == 29) {
       $54 = (___cxa_allocate_exception(4)|0);
       HEAP32[$54>>2] = ((15656 + 8|0));
       __THREW__ = 0;
       invoke_viii(379,($54|0),(15712|0),(374|0));
       $55 = __THREW__; __THREW__ = 0;
       $56 = $55&1;
       if ($56) {
        $49 = ___cxa_find_matching_catch(-1,-1,15712|0,0|0)|0;
        $50 = tempRet0;
        $lpad$phi$i6$index = $49;$lpad$phi$i6$index28 = $50;
        break;
       } else {
        // unreachable;
       }
      }
     } while(0);
     $51 = ($lpad$phi$i6$index28|0)<(0);
     do {
      if ($51) {
       __THREW__ = 0;
       invoke_vi(380,($lpad$phi$i6$index|0));
       $52 = __THREW__; __THREW__ = 0;
       $53 = $52&1;
       if ($53) {
        $57 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
        $58 = tempRet0;
        $eh$lpad$body$indexZ2D = $57;
        break;
       } else {
        // unreachable;
       }
      } else {
       $eh$lpad$body$indexZ2D = $lpad$phi$i6$index;
      }
     } while(0);
     (___cxa_begin_catch(($eh$lpad$body$indexZ2D|0))|0);
     ___cxa_end_catch();
     STACKTOP = sp;return;
    }
   } while(0);
   if ($8) {
    $61 = (($this) + 4|0);
    $__new_data$116 = $$sink;$__now_long$0$off010 = 1;$__p$014 = $61;$__was_long$0$off012 = 0;
    label = 38;
    break;
   } else {
    $59 = (($this) + 8|0);
    $60 = HEAP32[$59>>2]|0;
    $__new_data$121 = $$sink;$__now_long$0$off018 = 1;$__p$020 = $60;$__was_long$0$off019 = 1;
    label = 37;
    break;
   }
  }
 } while(0);
 if ((label|0) == 37) {
  $65 = (($this) + 4|0);
  $66 = HEAP32[$65>>2]|0;
  $70 = $66;$__new_data$115 = $__new_data$121;$__now_long$0$off09 = $__now_long$0$off018;$__p$013 = $__p$020;$__was_long$0$off011 = $__was_long$0$off019;
 }
 else if ((label|0) == 38) {
  $67 = $7&255;
  $68 = $67 >>> 1;
  $70 = $68;$__new_data$115 = $__new_data$116;$__now_long$0$off09 = $__now_long$0$off010;$__p$013 = $__p$014;$__was_long$0$off011 = $__was_long$0$off012;
 }
 $69 = (($70) + 1)|0;
 $71 = ($69|0)==(0);
 if (!($71)) {
  $$014$i = $69;$$023$i = $__p$013;$$05$i = $__new_data$115;
  while(1) {
   $72 = (($$014$i) + -1)|0;
   $73 = (($$023$i) + 4|0);
   $74 = HEAP32[$$023$i>>2]|0;
   $75 = (($$05$i) + 4|0);
   HEAP32[$$05$i>>2] = $74;
   $76 = ($72|0)==(0);
   if ($76) {
    break;
   } else {
    $$014$i = $72;$$023$i = $73;$$05$i = $75;
   }
  }
 }
 $__was_long$0$off011$not = $__was_long$0$off011 ^ 1;
 $77 = ($__p$013|0)==(0|0);
 $or$cond = $__was_long$0$off011$not | $77;
 if (!($or$cond)) {
  _free($__p$013);
 }
 if ($__now_long$0$off09) {
  $78 = (($18) + 1)|0;
  $79 = $78 | 1;
  HEAP32[$this>>2] = $79;
  $80 = (($this) + 4|0);
  HEAP32[$80>>2] = $14;
  $81 = (($this) + 8|0);
  HEAP32[$81>>2] = $__new_data$115;
  STACKTOP = sp;return;
 } else {
  $82 = $14 << 1;
  $83 = $82&255;
  HEAP8[$this>>0] = $83;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEjjjjjj($this,$__old_cap,$__delta_cap,$__old_sz,$__n_copy,$__n_del,$__n_add) {
 $this = $this|0;
 $__old_cap = $__old_cap|0;
 $__delta_cap = $__delta_cap|0;
 $__old_sz = $__old_sz|0;
 $__n_copy = $__n_copy|0;
 $__n_del = $__n_del|0;
 $__n_add = $__n_add|0;
 var $$014$i = 0, $$014$i2 = 0, $$023$i = 0, $$023$i3 = 0, $$05$i = 0, $$05$i1 = 0, $$size$i = 0, $$sum = 0, $$sum1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $lpad$phi$i$index = 0, $lpad$phi$i$index7 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (1073741807 - ($__old_cap))|0;
 $1 = ($0>>>0)<($__delta_cap>>>0);
 if ($1) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
  // unreachable;
 }
 $2 = HEAP8[$this>>0]|0;
 $3 = $2 & 1;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  $7 = (($this) + 4|0);
  $43 = $7;
 } else {
  $5 = (($this) + 8|0);
  $6 = HEAP32[$5>>2]|0;
  $43 = $6;
 }
 $8 = ($__old_cap>>>0)<(536870887);
 if ($8) {
  $9 = (($__delta_cap) + ($__old_cap))|0;
  $10 = $__old_cap << 1;
  $11 = ($9>>>0)<($10>>>0);
  $12 = $11 ? $10 : $9;
  $13 = ($12>>>0)<(2);
  if ($13) {
   $17 = 2;
  } else {
   $14 = (($12) + 4)|0;
   $15 = $14 & -4;
   $17 = $15;
  }
 } else {
  $17 = 1073741807;
 }
 $16 = $17 << 2;
 $18 = ($16|0)==(0);
 $$size$i = $18 ? 1 : $16;
 while(1) {
  $19 = (_malloc($$size$i)|0);
  $20 = ($19|0)==(0|0);
  if (!($20)) {
   label = 20;
   break;
  }
  $21 = HEAP32[15648>>2]|0;HEAP32[15648>>2] = (($21+0)|0);
  $22 = ($21|0)==(0);
  if ($22) {
   label = 17;
   break;
  }
  $23 = $21;
  __THREW__ = 0;
  invoke_v($23|0);
  $24 = __THREW__; __THREW__ = 0;
  $25 = $24&1;
  if ($25) {
   label = 13;
   break;
  }
 }
 do {
  if ((label|0) == 13) {
   $26 = ___cxa_find_matching_catch(-1,-1,15712|0)|0;
   $27 = tempRet0;
   $lpad$phi$i$index = $26;$lpad$phi$i$index7 = $27;
  }
  else if ((label|0) == 17) {
   $31 = (___cxa_allocate_exception(4)|0);
   HEAP32[$31>>2] = ((15656 + 8|0));
   __THREW__ = 0;
   invoke_viii(379,($31|0),(15712|0),(374|0));
   $32 = __THREW__; __THREW__ = 0;
   $33 = $32&1;
   if ($33) {
    $28 = ___cxa_find_matching_catch(-1,-1,15712|0)|0;
    $29 = tempRet0;
    $lpad$phi$i$index = $28;$lpad$phi$i$index7 = $29;
    break;
   } else {
    // unreachable;
   }
  }
  else if ((label|0) == 20) {
   $34 = ($__n_copy|0)==(0);
   if (!($34)) {
    $$014$i = $__n_copy;$$023$i = $43;$$05$i = $19;
    while(1) {
     $35 = (($$014$i) + -1)|0;
     $36 = (($$023$i) + 4|0);
     $37 = HEAP32[$$023$i>>2]|0;
     $38 = (($$05$i) + 4|0);
     HEAP32[$$05$i>>2] = $37;
     $39 = ($35|0)==(0);
     if ($39) {
      break;
     } else {
      $$014$i = $35;$$023$i = $36;$$05$i = $38;
     }
    }
   }
   $40 = (($__old_sz) - ($__n_del))|0;
   $41 = ($40|0)==($__n_copy|0);
   if (!($41)) {
    $$sum1 = (($__n_del) + ($__n_copy))|0;
    $$sum = (($__n_add) + ($__n_copy))|0;
    $42 = (($43) + ($$sum1<<2)|0);
    $44 = (($19) + ($$sum<<2)|0);
    $45 = (($40) - ($__n_copy))|0;
    $$014$i2 = $45;$$023$i3 = $42;$$05$i1 = $44;
    while(1) {
     $46 = (($$014$i2) + -1)|0;
     $47 = (($$023$i3) + 4|0);
     $48 = HEAP32[$$023$i3>>2]|0;
     $49 = (($$05$i1) + 4|0);
     HEAP32[$$05$i1>>2] = $48;
     $50 = ($46|0)==(0);
     if ($50) {
      break;
     } else {
      $$014$i2 = $46;$$023$i3 = $47;$$05$i1 = $49;
     }
    }
   }
   $51 = ($__old_cap|0)==(1);
   $52 = ($43|0)==(0|0);
   $or$cond = $51 | $52;
   if ($or$cond) {
    $53 = (($this) + 8|0);
    HEAP32[$53>>2] = $19;
    $54 = $17 | 1;
    HEAP32[$this>>2] = $54;
    STACKTOP = sp;return;
   }
   _free($43);
   $53 = (($this) + 8|0);
   HEAP32[$53>>2] = $19;
   $54 = $17 | 1;
   HEAP32[$this>>2] = $54;
   STACKTOP = sp;return;
  }
 } while(0);
 $30 = ($lpad$phi$i$index7|0)<(0);
 if ($30) {
  ___cxa_call_unexpected(($lpad$phi$i$index|0));
  // unreachable;
 } else {
  ___resumeException($lpad$phi$i$index|0);
  // unreachable;
 }
}
function __ZNSt3__18ios_base5clearEj($this,$state) {
 $this = $this|0;
 $state = $state|0;
 var $$0$i = 0, $$01$i = 0, $$size$i$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $eh$lpad$body$i$i$index20Z2D = 0, $eh$lpad$body$i$i$indexZ2D = 0, $eh$lpad$body$i$index27Z2D = 0, $eh$lpad$body$i$indexZ2D = 0;
 var $eh$lpad$body$index35Z2D = 0, $eh$lpad$body$indexZ2D = 0, $eh$lpad$body3$i$i$index15Z2D = 0, $eh$lpad$body3$i$i$indexZ2D = 0, $lpad$phi$i$i$i$index = 0, $lpad$phi$i$i$i$index10 = 0, $lpad$phi$i$i$index = 0, $lpad$phi$i$i$index5 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $0 = sp + 24|0;
 $1 = sp + 12|0;
 $2 = sp;
 $3 = (($this) + 24|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $7 = $state | 1;
  $8 = (($this) + 16|0);
  HEAP32[$8>>2] = $7;
 } else {
  $6 = (($this) + 16|0);
  HEAP32[$6>>2] = $state;
 }
 $9 = $5&1;
 $10 = $9 | $state;
 $11 = (($this) + 20|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $10 & $12;
 $14 = ($13|0)==(0);
 if ($14) {
  STACKTOP = sp;return;
 }
 $15 = (___cxa_allocate_exception(16)|0);
 $16 = HEAP8[4048>>0]|0;
 $17 = ($16<<24>>24)==(0);
 if ($17) {
  $18 = (___cxa_guard_acquire((4048|0))|0);
  $19 = ($18|0)==(0);
  if (!($19)) {
   HEAP32[4040>>2] = ((4736 + 8|0));
   ___cxa_guard_release((4048|0));
  }
 }
 while(1) {
  $20 = (_malloc(16)|0);
  $21 = ($20|0)==(0|0);
  if (!($21)) {
   label = 19;
   break;
  }
  $22 = HEAP32[15648>>2]|0;HEAP32[15648>>2] = (($22+0)|0);
  $23 = ($22|0)==(0);
  if ($23) {
   label = 17;
   break;
  }
  $24 = $22;
  __THREW__ = 0;
  invoke_v($24|0);
  $25 = __THREW__; __THREW__ = 0;
  $26 = $25&1;
  if ($26) {
   label = 12;
   break;
  }
 }
 do {
  if ((label|0) == 12) {
   $27 = ___cxa_find_matching_catch(-1,-1,15712|0)|0;
   $28 = tempRet0;
   $lpad$phi$i$i$index = $27;$lpad$phi$i$i$index5 = $28;
  }
  else if ((label|0) == 17) {
   $34 = (___cxa_allocate_exception(4)|0);
   HEAP32[$34>>2] = ((15656 + 8|0));
   __THREW__ = 0;
   invoke_viii(379,($34|0),(15712|0),(374|0));
   $35 = __THREW__; __THREW__ = 0;
   $36 = $35&1;
   if ($36) {
    $29 = ___cxa_find_matching_catch(-1,-1,15712|0)|0;
    $30 = tempRet0;
    $lpad$phi$i$i$index = $29;$lpad$phi$i$i$index5 = $30;
    break;
   } else {
    // unreachable;
   }
  }
  else if ((label|0) == 19) {
   $37 = (($2) + 8|0);
   HEAP32[$37>>2] = $20;
   HEAP32[$2>>2] = 17;
   $38 = (($2) + 4|0);
   HEAP32[$38>>2] = 15;
   dest=$20+0|0; src=4096+0|0; stop=dest+15|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
   $39 = (($20) + 15|0);
   HEAP8[$39>>0] = 0;
   $40 = HEAP8[$2>>0]|0;
   $41 = $40 & 1;
   $42 = ($41<<24>>24)==(0);
   if ($42) {
    $44 = $40&255;
    $45 = $44 >>> 1;
    $47 = $45;
   } else {
    $43 = HEAP32[$38>>2]|0;
    $47 = $43;
   }
   $46 = ($47|0)==(0);
   if ($46) {
    label = 24;
   } else {
    __THREW__ = 0;
    invoke_viii(448,($2|0),(3456|0),2);
    $48 = __THREW__; __THREW__ = 0;
    $49 = $48&1;
    if ($49) {
     label = 61;
    } else {
     label = 24;
    }
   }
   do {
    if ((label|0) == 24) {
     $50 = HEAP32[4040>>2]|0;
     $51 = (($50) + 24|0);
     $52 = HEAP32[$51>>2]|0;
     __THREW__ = 0;
     invoke_viii($52|0,($0|0),(4040|0),1);
     $53 = __THREW__; __THREW__ = 0;
     $54 = $53&1;
     if ($54) {
      label = 61;
     } else {
      $55 = HEAP8[$0>>0]|0;
      $56 = $55 & 1;
      $57 = ($56<<24>>24)==(0);
      if ($57) {
       $62 = (($0) + 1|0);
       $63 = $55&255;
       $64 = $63 >>> 1;
       $65 = $62;$66 = $64;
      } else {
       $58 = (($0) + 8|0);
       $59 = HEAP32[$58>>2]|0;
       $60 = (($0) + 4|0);
       $61 = HEAP32[$60>>2]|0;
       $65 = $59;$66 = $61;
      }
      __THREW__ = 0;
      invoke_viii(448,($2|0),($65|0),($66|0));
      $67 = __THREW__; __THREW__ = 0;
      $68 = $67&1;
      if ($68) {
       $75 = ___cxa_find_matching_catch(-1,-1)|0;
       $76 = tempRet0;
       $77 = HEAP8[$0>>0]|0;
       $78 = $77 & 1;
       $79 = ($78<<24>>24)==(0);
       if ($79) {
        $eh$lpad$body$i$index27Z2D = $76;$eh$lpad$body$i$indexZ2D = $75;
        label = 62;
        break;
       }
       $80 = (($0) + 8|0);
       $81 = HEAP32[$80>>2]|0;
       $82 = ($81|0)==(0|0);
       if ($82) {
        $eh$lpad$body$i$index27Z2D = $76;$eh$lpad$body$i$indexZ2D = $75;
        label = 62;
        break;
       }
       _free($81);
       $eh$lpad$body$i$index27Z2D = $76;$eh$lpad$body$i$indexZ2D = $75;
       label = 62;
       break;
      }
      $69 = HEAP8[$0>>0]|0;
      $70 = $69 & 1;
      $71 = ($70<<24>>24)==(0);
      if (!($71)) {
       $72 = (($0) + 8|0);
       $73 = HEAP32[$72>>2]|0;
       $74 = ($73|0)==(0|0);
       if (!($74)) {
        _free($73);
       }
      }
      ;HEAP32[$1+0>>2]=HEAP32[$2+0>>2]|0;HEAP32[$1+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$1+8>>2]=HEAP32[$2+8>>2]|0;
      ;HEAP32[$2+0>>2]=0|0;HEAP32[$2+4>>2]=0|0;HEAP32[$2+8>>2]=0|0;
      HEAP32[$15>>2] = ((3296 + 8|0));
      $83 = (($15) + 4|0);
      $84 = HEAP8[$1>>0]|0;
      $85 = $84 & 1;
      $86 = ($85<<24>>24)==(0);
      if ($86) {
       $89 = (($1) + 1|0);
       $90 = $89;
      } else {
       $87 = (($1) + 8|0);
       $88 = HEAP32[$87>>2]|0;
       $90 = $88;
      }
      $91 = (_strlen(($90|0))|0);
      $92 = (($91) + 13)|0;
      $93 = ($92|0)==(0);
      $$size$i$i$i = $93 ? 1 : $92;
      while(1) {
       $94 = (_malloc($$size$i$i$i)|0);
       $95 = ($94|0)==(0|0);
       if (!($95)) {
        label = 55;
        break;
       }
       $96 = HEAP32[15648>>2]|0;HEAP32[15648>>2] = (($96+0)|0);
       $97 = ($96|0)==(0);
       if ($97) {
        label = 47;
        break;
       }
       $98 = $96;
       __THREW__ = 0;
       invoke_v($98|0);
       $99 = __THREW__; __THREW__ = 0;
       $100 = $99&1;
       if ($100) {
        label = 42;
        break;
       }
      }
      do {
       if ((label|0) == 42) {
        $101 = ___cxa_find_matching_catch(-1,-1,15712|0)|0;
        $102 = tempRet0;
        $lpad$phi$i$i$i$index = $101;$lpad$phi$i$i$i$index10 = $102;
       }
       else if ((label|0) == 47) {
        $108 = (___cxa_allocate_exception(4)|0);
        HEAP32[$108>>2] = ((15656 + 8|0));
        __THREW__ = 0;
        invoke_viii(379,($108|0),(15712|0),(374|0));
        $109 = __THREW__; __THREW__ = 0;
        $110 = $109&1;
        if ($110) {
         $103 = ___cxa_find_matching_catch(-1,-1,15712|0)|0;
         $104 = tempRet0;
         $lpad$phi$i$i$i$index = $103;$lpad$phi$i$i$i$index10 = $104;
         break;
        } else {
         // unreachable;
        }
       }
       else if ((label|0) == 55) {
        $121 = (($91) + 1)|0;
        $122 = (($94) + 4|0);
        HEAP32[$122>>2] = $91;
        HEAP32[$94>>2] = $91;
        $123 = (($94) + 12|0);
        HEAP32[$83>>2] = $123;
        $124 = (($94) + 8|0);
        HEAP32[$124>>2] = 0;
        _memcpy(($123|0),($90|0),($121|0))|0;
        $125 = HEAP8[$1>>0]|0;
        $126 = $125 & 1;
        $127 = ($126<<24>>24)==(0);
        if (!($127)) {
         $128 = (($1) + 8|0);
         $129 = HEAP32[$128>>2]|0;
         $130 = ($129|0)==(0|0);
         if (!($130)) {
          _free($129);
         }
        }
        $131 = HEAP8[$2>>0]|0;
        $132 = $131 & 1;
        $133 = ($132<<24>>24)==(0);
        if ($133) {
         HEAP32[$15>>2] = ((3464 + 8|0));
         $146 = (($15) + 8|0);
         $147 = $146;
         $148 = $147;
         HEAP32[$148>>2] = 1;
         $149 = (($147) + 4)|0;
         $150 = $149;
         HEAP32[$150>>2] = (4040);
         HEAP32[$15>>2] = ((4056 + 8|0));
         ___cxa_throw(($15|0),(4144|0),(99|0));
         // unreachable;
        }
        $134 = HEAP32[$37>>2]|0;
        $135 = ($134|0)==(0|0);
        if ($135) {
         HEAP32[$15>>2] = ((3464 + 8|0));
         $146 = (($15) + 8|0);
         $147 = $146;
         $148 = $147;
         HEAP32[$148>>2] = 1;
         $149 = (($147) + 4)|0;
         $150 = $149;
         HEAP32[$150>>2] = (4040);
         HEAP32[$15>>2] = ((4056 + 8|0));
         ___cxa_throw(($15|0),(4144|0),(99|0));
         // unreachable;
        }
        _free($134);
        HEAP32[$15>>2] = ((3464 + 8|0));
        $146 = (($15) + 8|0);
        $147 = $146;
        $148 = $147;
        HEAP32[$148>>2] = 1;
        $149 = (($147) + 4)|0;
        $150 = $149;
        HEAP32[$150>>2] = (4040);
        HEAP32[$15>>2] = ((4056 + 8|0));
        ___cxa_throw(($15|0),(4144|0),(99|0));
        // unreachable;
       }
      } while(0);
      $105 = ($lpad$phi$i$i$i$index10|0)<(0);
      do {
       if ($105) {
        __THREW__ = 0;
        invoke_vi(380,($lpad$phi$i$i$i$index|0));
        $106 = __THREW__; __THREW__ = 0;
        $107 = $106&1;
        if ($107) {
         $111 = ___cxa_find_matching_catch(-1,-1,15712|0)|0;
         $112 = tempRet0;
         $eh$lpad$body3$i$i$index15Z2D = $112;$eh$lpad$body3$i$i$indexZ2D = $111;
         break;
        } else {
         // unreachable;
        }
       } else {
        $eh$lpad$body3$i$i$index15Z2D = $lpad$phi$i$i$i$index10;$eh$lpad$body3$i$i$indexZ2D = $lpad$phi$i$i$i$index;
       }
      } while(0);
      $113 = ($eh$lpad$body3$i$i$index15Z2D|0)<(0);
      do {
       if ($113) {
        __THREW__ = 0;
        invoke_vi(380,($eh$lpad$body3$i$i$indexZ2D|0));
        $114 = __THREW__; __THREW__ = 0;
        $115 = $114&1;
        if ($115) {
         $116 = ___cxa_find_matching_catch(-1,-1)|0;
         $117 = tempRet0;
         $eh$lpad$body$i$i$index20Z2D = $117;$eh$lpad$body$i$i$indexZ2D = $116;
         break;
        } else {
         // unreachable;
        }
       } else {
        $eh$lpad$body$i$i$index20Z2D = $eh$lpad$body3$i$i$index15Z2D;$eh$lpad$body$i$i$indexZ2D = $eh$lpad$body3$i$i$indexZ2D;
       }
      } while(0);
      __ZNSt9exceptionD2Ev(($15|0));
      $118 = HEAP8[$1>>0]|0;
      $119 = $118 & 1;
      $120 = ($119<<24>>24)==(0);
      if ($120) {
       $$0$i = $eh$lpad$body$i$i$index20Z2D;$$01$i = $eh$lpad$body$i$i$indexZ2D;
      } else {
       $138 = (($1) + 8|0);
       $139 = HEAP32[$138>>2]|0;
       $140 = ($139|0)==(0|0);
       if ($140) {
        $$0$i = $eh$lpad$body$i$i$index20Z2D;$$01$i = $eh$lpad$body$i$i$indexZ2D;
       } else {
        _free($139);
        $$0$i = $eh$lpad$body$i$i$index20Z2D;$$01$i = $eh$lpad$body$i$i$indexZ2D;
       }
      }
     }
    }
   } while(0);
   if ((label|0) == 61) {
    $136 = ___cxa_find_matching_catch(-1,-1)|0;
    $137 = tempRet0;
    $eh$lpad$body$i$index27Z2D = $137;$eh$lpad$body$i$indexZ2D = $136;
    label = 62;
   }
   if ((label|0) == 62) {
    $$0$i = $eh$lpad$body$i$index27Z2D;$$01$i = $eh$lpad$body$i$indexZ2D;
   }
   $141 = HEAP8[$2>>0]|0;
   $142 = $141 & 1;
   $143 = ($142<<24>>24)==(0);
   if (!($143)) {
    $144 = HEAP32[$37>>2]|0;
    $145 = ($144|0)==(0|0);
    if (!($145)) {
     _free($144);
    }
   }
   $eh$lpad$body$index35Z2D = $$0$i;$eh$lpad$body$indexZ2D = $$01$i;
   ___cxa_free_exception(($15|0));
   ___resumeException($eh$lpad$body$indexZ2D|0);
   // unreachable;
  }
 } while(0);
 $31 = ($lpad$phi$i$i$index5|0)<(0);
 if (!($31)) {
  $eh$lpad$body$index35Z2D = $lpad$phi$i$i$index5;$eh$lpad$body$indexZ2D = $lpad$phi$i$i$index;
  ___cxa_free_exception(($15|0));
  ___resumeException($eh$lpad$body$indexZ2D|0);
  // unreachable;
 }
 __THREW__ = 0;
 invoke_vi(380,($lpad$phi$i$i$index|0));
 $32 = __THREW__; __THREW__ = 0;
 $33 = $32&1;
 if (!($33)) {
  // unreachable;
 }
 $151 = ___cxa_find_matching_catch(-1,-1)|0;
 $152 = tempRet0;
 $eh$lpad$body$index35Z2D = $152;$eh$lpad$body$indexZ2D = $151;
 ___cxa_free_exception(($15|0));
 ___resumeException($eh$lpad$body$indexZ2D|0);
 // unreachable;
}
function __ZNSt3__18ios_baseD2Ev($this) {
 $this = $this|0;
 var $$pre = 0, $$pre1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$01$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((4080 + 8|0));
 $0 = (($this) + 40|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 $$pre = (($this) + 32|0);
 $$pre1 = (($this) + 36|0);
 L1: do {
  if (!($2)) {
   $i$01$i = $1;
   while(1) {
    $3 = (($i$01$i) + -1)|0;
    $4 = HEAP32[$$pre>>2]|0;
    $5 = (($4) + ($3<<2)|0);
    $6 = HEAP32[$5>>2]|0;
    $7 = HEAP32[$$pre1>>2]|0;
    $8 = (($7) + ($3<<2)|0);
    $9 = HEAP32[$8>>2]|0;
    __THREW__ = 0;
    invoke_viii($6|0,0,($this|0),($9|0));
    $10 = __THREW__; __THREW__ = 0;
    $11 = $10&1;
    if ($11) {
     break;
    }
    $12 = ($3|0)==(0);
    if ($12) {
     break L1;
    } else {
     $i$01$i = $3;
    }
   }
   $27 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
   $28 = tempRet0;
   ___clang_call_terminate($27);
   // unreachable;
  }
 } while(0);
 $13 = (($this) + 28|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (($14) + 4|0);
 $16 = HEAP32[$15>>2]|0;HEAP32[$15>>2] = (($16+-1)|0);
 $17 = ($16|0)==(0);
 if ($17) {
  $18 = HEAP32[$14>>2]|0;
  $19 = (($18) + 8|0);
  $20 = HEAP32[$19>>2]|0;
  FUNCTION_TABLE_vi[$20 & 511]($14);
 }
 $21 = HEAP32[$$pre>>2]|0;
 _free($21);
 $22 = HEAP32[$$pre1>>2]|0;
 _free($22);
 $23 = (($this) + 48|0);
 $24 = HEAP32[$23>>2]|0;
 _free($24);
 $25 = (($this) + 60|0);
 $26 = HEAP32[$25>>2]|0;
 _free($26);
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((3696 + 8|0));
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 4|0);
 $3 = HEAP32[$2>>2]|0;HEAP32[$2>>2] = (($3+-1)|0);
 $4 = ($3|0)==(0);
 if (!($4)) {
  _free($this);
  STACKTOP = sp;return;
 }
 $5 = HEAP32[$1>>2]|0;
 $6 = (($5) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 FUNCTION_TABLE_vi[$7 & 511]($1);
 _free($this);
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((3696 + 8|0));
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 4|0);
 $3 = HEAP32[$2>>2]|0;HEAP32[$2>>2] = (($3+-1)|0);
 $4 = ($3|0)==(0);
 if (!($4)) {
  STACKTOP = sp;return;
 }
 $5 = HEAP32[$1>>2]|0;
 $6 = (($5) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 FUNCTION_TABLE_vi[$7 & 511]($1);
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5imbueERKNS_6localeE($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6setbufEPci($this,$0,$1) {
 $this = $this|0;
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return ($this|0);
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE7seekoffExNS_8ios_base7seekdirEj($agg$result,$this,$0,$1,$2,$3) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = $agg$result;
 $5 = $4;
 HEAP32[$5>>2] = 0;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = 0;
 $8 = (($agg$result) + 8|0);
 $9 = $8;
 $10 = $9;
 HEAP32[$10>>2] = -1;
 $11 = (($9) + 4)|0;
 $12 = $11;
 HEAP32[$12>>2] = -1;
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE7seekposENS_4fposI11__mbstate_tEEj($agg$result,$this,$0,$1) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $agg$result;
 $3 = $2;
 HEAP32[$3>>2] = 0;
 $4 = (($2) + 4)|0;
 $5 = $4;
 HEAP32[$5>>2] = 0;
 $6 = (($agg$result) + 8|0);
 $7 = $6;
 $8 = $7;
 HEAP32[$8>>2] = -1;
 $9 = (($7) + 4)|0;
 $10 = $9;
 HEAP32[$10>>2] = -1;
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE4syncEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9showmanycEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6xsgetnEPci($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__i$0$lcssa = 0, $__i$02 = 0;
 var $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__n|0)>(0);
 if (!($0)) {
  $__i$0$lcssa = 0;
  STACKTOP = sp;return ($__i$0$lcssa|0);
 }
 $1 = (($this) + 12|0);
 $2 = (($this) + 16|0);
 $$01 = $__s;$__i$02 = 0;
 while(1) {
  $3 = HEAP32[$1>>2]|0;
  $4 = HEAP32[$2>>2]|0;
  $5 = ($3>>>0)<($4>>>0);
  if ($5) {
   $6 = (($3) + 1|0);
   HEAP32[$1>>2] = $6;
   $7 = HEAP8[$3>>0]|0;
   $storemerge = $7;
  } else {
   $8 = HEAP32[$this>>2]|0;
   $9 = (($8) + 40|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = (FUNCTION_TABLE_ii[$10 & 511]($this)|0);
   $12 = ($11|0)==(-1);
   if ($12) {
    $__i$0$lcssa = $__i$02;
    label = 8;
    break;
   }
   $13 = $11&255;
   $storemerge = $13;
  }
  HEAP8[$$01>>0] = $storemerge;
  $14 = (($__i$02) + 1)|0;
  $15 = (($$01) + 1|0);
  $16 = ($14|0)<($__n|0);
  if ($16) {
   $$01 = $15;$__i$02 = $14;
  } else {
   $__i$0$lcssa = $14;
   label = 8;
   break;
  }
 }
 if ((label|0) == 8) {
  STACKTOP = sp;return ($__i$0$lcssa|0);
 }
 return 0|0;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9underflowEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return -1;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5uflowEv($this) {
 $this = $this|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + 36|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (FUNCTION_TABLE_ii[$2 & 511]($this)|0);
 $4 = ($3|0)==(-1);
 if ($4) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $5 = (($this) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + 1|0);
 HEAP32[$5>>2] = $7;
 $8 = HEAP8[$6>>0]|0;
 $9 = $8&255;
 $$0 = $9;
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9pbackfailEi($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return -1;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6xsputnEPKci($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $$02 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__i$0$lcssa = 0;
 var $__i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__n|0)>(0);
 if (!($0)) {
  $__i$0$lcssa = 0;
  STACKTOP = sp;return ($__i$0$lcssa|0);
 }
 $1 = (($this) + 24|0);
 $2 = (($this) + 28|0);
 $$02 = $__s;$__i$01 = 0;
 while(1) {
  $3 = HEAP32[$1>>2]|0;
  $4 = HEAP32[$2>>2]|0;
  $5 = ($3>>>0)<($4>>>0);
  if ($5) {
   $6 = HEAP8[$$02>>0]|0;
   $7 = (($3) + 1|0);
   HEAP32[$1>>2] = $7;
   HEAP8[$3>>0] = $6;
  } else {
   $8 = HEAP32[$this>>2]|0;
   $9 = (($8) + 52|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = HEAP8[$$02>>0]|0;
   $12 = $11&255;
   $13 = (FUNCTION_TABLE_iii[$10 & 511]($this,$12)|0);
   $14 = ($13|0)==(-1);
   if ($14) {
    $__i$0$lcssa = $__i$01;
    label = 7;
    break;
   }
  }
  $15 = (($$02) + 1|0);
  $16 = (($__i$01) + 1)|0;
  $17 = ($16|0)<($__n|0);
  if ($17) {
   $$02 = $15;$__i$01 = $16;
  } else {
   $__i$0$lcssa = $16;
   label = 7;
   break;
  }
 }
 if ((label|0) == 7) {
  STACKTOP = sp;return ($__i$0$lcssa|0);
 }
 return 0|0;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE8overflowEi($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return -1;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((3760 + 8|0));
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 4|0);
 $3 = HEAP32[$2>>2]|0;HEAP32[$2>>2] = (($3+-1)|0);
 $4 = ($3|0)==(0);
 if (!($4)) {
  _free($this);
  STACKTOP = sp;return;
 }
 $5 = HEAP32[$1>>2]|0;
 $6 = (($5) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 FUNCTION_TABLE_vi[$7 & 511]($1);
 _free($this);
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((3760 + 8|0));
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 4|0);
 $3 = HEAP32[$2>>2]|0;HEAP32[$2>>2] = (($3+-1)|0);
 $4 = ($3|0)==(0);
 if (!($4)) {
  STACKTOP = sp;return;
 }
 $5 = HEAP32[$1>>2]|0;
 $6 = (($5) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 FUNCTION_TABLE_vi[$7 & 511]($1);
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE5imbueERKNS_6localeE($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6setbufEPwi($this,$0,$1) {
 $this = $this|0;
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return ($this|0);
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE7seekoffExNS_8ios_base7seekdirEj($agg$result,$this,$0,$1,$2,$3) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = $agg$result;
 $5 = $4;
 HEAP32[$5>>2] = 0;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = 0;
 $8 = (($agg$result) + 8|0);
 $9 = $8;
 $10 = $9;
 HEAP32[$10>>2] = -1;
 $11 = (($9) + 4)|0;
 $12 = $11;
 HEAP32[$12>>2] = -1;
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE7seekposENS_4fposI11__mbstate_tEEj($agg$result,$this,$0,$1) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $agg$result;
 $3 = $2;
 HEAP32[$3>>2] = 0;
 $4 = (($2) + 4)|0;
 $5 = $4;
 HEAP32[$5>>2] = 0;
 $6 = (($agg$result) + 8|0);
 $7 = $6;
 $8 = $7;
 HEAP32[$8>>2] = -1;
 $9 = (($7) + 4)|0;
 $10 = $9;
 HEAP32[$10>>2] = -1;
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE4syncEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9showmanycEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6xsgetnEPwi($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__i$0$lcssa = 0, $__i$02 = 0, $storemerge = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__n|0)>(0);
 if (!($0)) {
  $__i$0$lcssa = 0;
  STACKTOP = sp;return ($__i$0$lcssa|0);
 }
 $1 = (($this) + 12|0);
 $2 = (($this) + 16|0);
 $$01 = $__s;$__i$02 = 0;
 while(1) {
  $3 = HEAP32[$1>>2]|0;
  $4 = HEAP32[$2>>2]|0;
  $5 = ($3>>>0)<($4>>>0);
  if ($5) {
   $6 = (($3) + 4|0);
   HEAP32[$1>>2] = $6;
   $7 = HEAP32[$3>>2]|0;
   $storemerge = $7;
  } else {
   $8 = HEAP32[$this>>2]|0;
   $9 = (($8) + 40|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = (FUNCTION_TABLE_ii[$10 & 511]($this)|0);
   $12 = ($11|0)==(-1);
   if ($12) {
    $__i$0$lcssa = $__i$02;
    label = 8;
    break;
   } else {
    $storemerge = $11;
   }
  }
  HEAP32[$$01>>2] = $storemerge;
  $13 = (($__i$02) + 1)|0;
  $14 = ($13|0)<($__n|0);
  if (!($14)) {
   $__i$0$lcssa = $13;
   label = 8;
   break;
  }
  $15 = (($$01) + 4|0);
  $$01 = $15;$__i$02 = $13;
 }
 if ((label|0) == 8) {
  STACKTOP = sp;return ($__i$0$lcssa|0);
 }
 return 0|0;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9underflowEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return -1;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE5uflowEv($this) {
 $this = $this|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + 36|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (FUNCTION_TABLE_ii[$2 & 511]($this)|0);
 $4 = ($3|0)==(-1);
 if ($4) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $5 = (($this) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + 4|0);
 HEAP32[$5>>2] = $7;
 $8 = HEAP32[$6>>2]|0;
 $$0 = $8;
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9pbackfailEj($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return -1;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6xsputnEPKwi($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $$02 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__i$0$lcssa = 0, $__i$01 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__n|0)>(0);
 if (!($0)) {
  $__i$0$lcssa = 0;
  STACKTOP = sp;return ($__i$0$lcssa|0);
 }
 $1 = (($this) + 24|0);
 $2 = (($this) + 28|0);
 $$02 = $__s;$__i$01 = 0;
 while(1) {
  $3 = HEAP32[$1>>2]|0;
  $4 = HEAP32[$2>>2]|0;
  $5 = ($3>>>0)<($4>>>0);
  if ($5) {
   $6 = HEAP32[$$02>>2]|0;
   $7 = (($3) + 4|0);
   HEAP32[$1>>2] = $7;
   HEAP32[$3>>2] = $6;
  } else {
   $8 = HEAP32[$this>>2]|0;
   $9 = (($8) + 52|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = HEAP32[$$02>>2]|0;
   $12 = (FUNCTION_TABLE_iii[$10 & 511]($this,$11)|0);
   $13 = ($12|0)==(-1);
   if ($13) {
    $__i$0$lcssa = $__i$01;
    label = 8;
    break;
   }
  }
  $14 = (($__i$01) + 1)|0;
  $15 = ($14|0)<($__n|0);
  if (!($15)) {
   $__i$0$lcssa = $14;
   label = 8;
   break;
  }
  $16 = (($$02) + 4|0);
  $$02 = $16;$__i$01 = $14;
 }
 if ((label|0) == 8) {
  STACKTOP = sp;return ($__i$0$lcssa|0);
 }
 return 0|0;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE8overflowEj($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return -1;
}
function __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 __ZNSt3__18ios_baseD2Ev($0);
 $1 = ($this|0)==(0|0);
 if ($1) {
  STACKTOP = sp;return;
 }
 _free($this);
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 __ZNSt3__18ios_baseD2Ev($0);
 STACKTOP = sp;return;
}
function __ZTv0_n12_NSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this|0;
 var $$sum = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($this) + ($2)|0);
 $$sum = (($2) + 8)|0;
 $4 = (($this) + ($$sum)|0);
 __ZNSt3__18ios_baseD2Ev($4);
 $5 = ($3|0)==(0|0);
 if ($5) {
  STACKTOP = sp;return;
 }
 _free($3);
 STACKTOP = sp;return;
}
function __ZTv0_n12_NSt3__113basic_istreamIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this|0;
 var $$sum = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $$sum = (($2) + 8)|0;
 $3 = (($this) + ($$sum)|0);
 __ZNSt3__18ios_baseD2Ev($3);
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($this) {
 $this = $this|0;
 var $$0 = 0, $$phi$trans$insert$phi$trans$insert = 0, $$pre$pre = 0, $$pre12 = 0, $$pre12$pre = 0, $$sum = 0, $$sum10 = 0, $$sum5 = 0, $$sum6 = 0, $$sum7 = 0, $$sum8 = 0, $$sum9 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__s = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $__s = sp;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $$sum = (($2) + 24)|0;
 $3 = (($this) + ($$sum)|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  STACKTOP = sp;return;
 }
 HEAP8[$__s>>0] = 0;
 $6 = (($__s) + 4|0);
 HEAP32[$6>>2] = $this;
 $$sum5 = (($2) + 16)|0;
 $7 = (($this) + ($$sum5)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0);
 do {
  if ($9) {
   $$sum10 = (($2) + 72)|0;
   $10 = (($this) + ($$sum10)|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = ($11|0)==(0|0);
   do {
    if ($12) {
     $$pre12 = $2;
     label = 6;
    } else {
     __THREW__ = 0;
     invoke_vi(437,($11|0));
     $13 = __THREW__; __THREW__ = 0;
     $14 = $13&1;
     if ($14) {
      $33 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
      $34 = tempRet0;
      $$0 = $33;
      break;
     } else {
      $$pre$pre = HEAP32[$this>>2]|0;
      $$phi$trans$insert$phi$trans$insert = (($$pre$pre) + -12|0);
      $$pre12$pre = HEAP32[$$phi$trans$insert$phi$trans$insert>>2]|0;
      $$pre12 = $$pre12$pre;
      label = 6;
      break;
     }
    }
   } while(0);
   if ((label|0) == 6) {
    HEAP8[$__s>>0] = 1;
    $$sum6 = (($$pre12) + 24)|0;
    $15 = (($this) + ($$sum6)|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = HEAP32[$16>>2]|0;
    $18 = (($17) + 24|0);
    $19 = HEAP32[$18>>2]|0;
    __THREW__ = 0;
    $20 = (invoke_ii($19|0,($16|0))|0);
    $21 = __THREW__; __THREW__ = 0;
    $22 = $21&1;
    if (!($22)) {
     $23 = ($20|0)==(-1);
     if (!($23)) {
      break;
     }
     $24 = HEAP32[$this>>2]|0;
     $25 = (($24) + -12|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = (($this) + ($26)|0);
     $$sum9 = (($26) + 16)|0;
     $28 = (($this) + ($$sum9)|0);
     $29 = HEAP32[$28>>2]|0;
     $30 = $29 | 1;
     __THREW__ = 0;
     invoke_vii(449,($27|0),($30|0));
     $31 = __THREW__; __THREW__ = 0;
     $32 = $31&1;
     if (!($32)) {
      break;
     }
    }
    $35 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
    $36 = tempRet0;
    __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s);
    $$0 = $35;
   }
   (___cxa_begin_catch(($$0|0))|0);
   $37 = HEAP32[$this>>2]|0;
   $38 = (($37) + -12|0);
   $39 = HEAP32[$38>>2]|0;
   $$sum7 = (($39) + 16)|0;
   $40 = (($this) + ($$sum7)|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = $41 | 1;
   HEAP32[$40>>2] = $42;
   $$sum8 = (($39) + 20)|0;
   $43 = (($this) + ($$sum8)|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = $44 & 1;
   $46 = ($45|0)==(0);
   if ($46) {
    ___cxa_end_catch();
    STACKTOP = sp;return;
   }
   __THREW__ = 0;
   invoke_v(446);
   $47 = __THREW__; __THREW__ = 0;
   $48 = $47&1;
   if (!($48)) {
    // unreachable;
   }
   $49 = ___cxa_find_matching_catch(-1,-1)|0;
   $50 = tempRet0;
   __THREW__ = 0;
   invoke_v(447);
   $51 = __THREW__; __THREW__ = 0;
   $52 = $51&1;
   if ($52) {
    $53 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
    $54 = tempRet0;
    ___clang_call_terminate($53);
    // unreachable;
   } else {
    ___resumeException($49|0);
    // unreachable;
   }
  }
 } while(0);
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s);
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_istreamIwNS_11char_traitsIwEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 __ZNSt3__18ios_baseD2Ev($0);
 $1 = ($this|0)==(0|0);
 if ($1) {
  STACKTOP = sp;return;
 }
 _free($this);
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_istreamIwNS_11char_traitsIwEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 __ZNSt3__18ios_baseD2Ev($0);
 STACKTOP = sp;return;
}
function __ZTv0_n12_NSt3__113basic_istreamIwNS_11char_traitsIwEEED0Ev($this) {
 $this = $this|0;
 var $$sum = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($this) + ($2)|0);
 $$sum = (($2) + 8)|0;
 $4 = (($this) + ($$sum)|0);
 __ZNSt3__18ios_baseD2Ev($4);
 $5 = ($3|0)==(0|0);
 if ($5) {
  STACKTOP = sp;return;
 }
 _free($3);
 STACKTOP = sp;return;
}
function __ZTv0_n12_NSt3__113basic_istreamIwNS_11char_traitsIwEEED1Ev($this) {
 $this = $this|0;
 var $$sum = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $$sum = (($2) + 8)|0;
 $3 = (($this) + ($$sum)|0);
 __ZNSt3__18ios_baseD2Ev($3);
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE5flushEv($this) {
 $this = $this|0;
 var $$0 = 0, $$phi$trans$insert$phi$trans$insert = 0, $$pre$pre = 0, $$pre12 = 0, $$pre12$pre = 0, $$sum = 0, $$sum10 = 0, $$sum5 = 0, $$sum6 = 0, $$sum7 = 0, $$sum8 = 0, $$sum9 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__s = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $__s = sp;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $$sum = (($2) + 24)|0;
 $3 = (($this) + ($$sum)|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  STACKTOP = sp;return;
 }
 HEAP8[$__s>>0] = 0;
 $6 = (($__s) + 4|0);
 HEAP32[$6>>2] = $this;
 $$sum5 = (($2) + 16)|0;
 $7 = (($this) + ($$sum5)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0);
 do {
  if ($9) {
   $$sum10 = (($2) + 72)|0;
   $10 = (($this) + ($$sum10)|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = ($11|0)==(0|0);
   do {
    if ($12) {
     $$pre12 = $2;
     label = 6;
    } else {
     __THREW__ = 0;
     invoke_vi(438,($11|0));
     $13 = __THREW__; __THREW__ = 0;
     $14 = $13&1;
     if ($14) {
      $33 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
      $34 = tempRet0;
      $$0 = $33;
      break;
     } else {
      $$pre$pre = HEAP32[$this>>2]|0;
      $$phi$trans$insert$phi$trans$insert = (($$pre$pre) + -12|0);
      $$pre12$pre = HEAP32[$$phi$trans$insert$phi$trans$insert>>2]|0;
      $$pre12 = $$pre12$pre;
      label = 6;
      break;
     }
    }
   } while(0);
   if ((label|0) == 6) {
    HEAP8[$__s>>0] = 1;
    $$sum6 = (($$pre12) + 24)|0;
    $15 = (($this) + ($$sum6)|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = HEAP32[$16>>2]|0;
    $18 = (($17) + 24|0);
    $19 = HEAP32[$18>>2]|0;
    __THREW__ = 0;
    $20 = (invoke_ii($19|0,($16|0))|0);
    $21 = __THREW__; __THREW__ = 0;
    $22 = $21&1;
    if (!($22)) {
     $23 = ($20|0)==(-1);
     if (!($23)) {
      break;
     }
     $24 = HEAP32[$this>>2]|0;
     $25 = (($24) + -12|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = (($this) + ($26)|0);
     $$sum9 = (($26) + 16)|0;
     $28 = (($this) + ($$sum9)|0);
     $29 = HEAP32[$28>>2]|0;
     $30 = $29 | 1;
     __THREW__ = 0;
     invoke_vii(449,($27|0),($30|0));
     $31 = __THREW__; __THREW__ = 0;
     $32 = $31&1;
     if (!($32)) {
      break;
     }
    }
    $35 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
    $36 = tempRet0;
    __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE6sentryD2Ev($__s);
    $$0 = $35;
   }
   (___cxa_begin_catch(($$0|0))|0);
   $37 = HEAP32[$this>>2]|0;
   $38 = (($37) + -12|0);
   $39 = HEAP32[$38>>2]|0;
   $$sum7 = (($39) + 16)|0;
   $40 = (($this) + ($$sum7)|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = $41 | 1;
   HEAP32[$40>>2] = $42;
   $$sum8 = (($39) + 20)|0;
   $43 = (($this) + ($$sum8)|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = $44 & 1;
   $46 = ($45|0)==(0);
   if ($46) {
    ___cxa_end_catch();
    STACKTOP = sp;return;
   }
   __THREW__ = 0;
   invoke_v(446);
   $47 = __THREW__; __THREW__ = 0;
   $48 = $47&1;
   if (!($48)) {
    // unreachable;
   }
   $49 = ___cxa_find_matching_catch(-1,-1)|0;
   $50 = tempRet0;
   __THREW__ = 0;
   invoke_v(447);
   $51 = __THREW__; __THREW__ = 0;
   $52 = $51&1;
   if ($52) {
    $53 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
    $54 = tempRet0;
    ___clang_call_terminate($53);
    // unreachable;
   } else {
    ___resumeException($49|0);
    // unreachable;
   }
  }
 } while(0);
 __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE6sentryD2Ev($__s);
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 __ZNSt3__18ios_baseD2Ev($0);
 $1 = ($this|0)==(0|0);
 if ($1) {
  STACKTOP = sp;return;
 }
 _free($this);
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 __ZNSt3__18ios_baseD2Ev($0);
 STACKTOP = sp;return;
}
function __ZTv0_n12_NSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this|0;
 var $$sum = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($this) + ($2)|0);
 $$sum = (($2) + 4)|0;
 $4 = (($this) + ($$sum)|0);
 __ZNSt3__18ios_baseD2Ev($4);
 $5 = ($3|0)==(0|0);
 if ($5) {
  STACKTOP = sp;return;
 }
 _free($3);
 STACKTOP = sp;return;
}
function __ZTv0_n12_NSt3__113basic_ostreamIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this|0;
 var $$sum = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $$sum = (($2) + 4)|0;
 $3 = (($this) + ($$sum)|0);
 __ZNSt3__18ios_baseD2Ev($3);
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($this) {
 $this = $this|0;
 var $$sum = 0, $$sum1 = 0, $$sum2 = 0, $$sum3 = 0, $$sum4 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + -12|0);
 $4 = HEAP32[$3>>2]|0;
 $$sum = (($4) + 24)|0;
 $5 = (($1) + ($$sum)|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0|0);
 if ($7) {
  STACKTOP = sp;return;
 }
 $$sum1 = (($4) + 16)|0;
 $8 = (($1) + ($$sum1)|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0);
 if (!($10)) {
  STACKTOP = sp;return;
 }
 $$sum2 = (($4) + 4)|0;
 $11 = (($1) + ($$sum2)|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $12 & 8192;
 $14 = ($13|0)==(0);
 if ($14) {
  STACKTOP = sp;return;
 }
 $15 = (__ZSt18uncaught_exceptionv()|0);
 if ($15) {
  STACKTOP = sp;return;
 }
 $16 = HEAP32[$0>>2]|0;
 $17 = HEAP32[$16>>2]|0;
 $18 = (($17) + -12|0);
 $19 = HEAP32[$18>>2]|0;
 $$sum3 = (($19) + 24)|0;
 $20 = (($16) + ($$sum3)|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = HEAP32[$21>>2]|0;
 $23 = (($22) + 24|0);
 $24 = HEAP32[$23>>2]|0;
 __THREW__ = 0;
 $25 = (invoke_ii($24|0,($21|0))|0);
 $26 = __THREW__; __THREW__ = 0;
 $27 = $26&1;
 if (!($27)) {
  $28 = ($25|0)==(-1);
  if (!($28)) {
   STACKTOP = sp;return;
  }
  $29 = HEAP32[$0>>2]|0;
  $30 = HEAP32[$29>>2]|0;
  $31 = (($30) + -12|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = (($29) + ($32)|0);
  $$sum4 = (($32) + 16)|0;
  $34 = (($29) + ($$sum4)|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = $35 | 1;
  __THREW__ = 0;
  invoke_vii(449,($33|0),($36|0));
  $37 = __THREW__; __THREW__ = 0;
  $38 = $37&1;
  if (!($38)) {
   STACKTOP = sp;return;
  }
 }
 $39 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
 $40 = tempRet0;
 (___cxa_begin_catch(($39|0))|0);
 __THREW__ = 0;
 invoke_v(447);
 $41 = __THREW__; __THREW__ = 0;
 $42 = $41&1;
 if ($42) {
  $43 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
  $44 = tempRet0;
  ___clang_call_terminate($43);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 __ZNSt3__18ios_baseD2Ev($0);
 $1 = ($this|0)==(0|0);
 if ($1) {
  STACKTOP = sp;return;
 }
 _free($this);
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 __ZNSt3__18ios_baseD2Ev($0);
 STACKTOP = sp;return;
}
function __ZTv0_n12_NSt3__113basic_ostreamIwNS_11char_traitsIwEEED0Ev($this) {
 $this = $this|0;
 var $$sum = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($this) + ($2)|0);
 $$sum = (($2) + 4)|0;
 $4 = (($this) + ($$sum)|0);
 __ZNSt3__18ios_baseD2Ev($4);
 $5 = ($3|0)==(0|0);
 if ($5) {
  STACKTOP = sp;return;
 }
 _free($3);
 STACKTOP = sp;return;
}
function __ZTv0_n12_NSt3__113basic_ostreamIwNS_11char_traitsIwEEED1Ev($this) {
 $this = $this|0;
 var $$sum = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $$sum = (($2) + 4)|0;
 $3 = (($this) + ($$sum)|0);
 __ZNSt3__18ios_baseD2Ev($3);
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE6sentryD2Ev($this) {
 $this = $this|0;
 var $$sum = 0, $$sum1 = 0, $$sum2 = 0, $$sum3 = 0, $$sum4 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + -12|0);
 $4 = HEAP32[$3>>2]|0;
 $$sum = (($4) + 24)|0;
 $5 = (($1) + ($$sum)|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0|0);
 if ($7) {
  STACKTOP = sp;return;
 }
 $$sum1 = (($4) + 16)|0;
 $8 = (($1) + ($$sum1)|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0);
 if (!($10)) {
  STACKTOP = sp;return;
 }
 $$sum2 = (($4) + 4)|0;
 $11 = (($1) + ($$sum2)|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $12 & 8192;
 $14 = ($13|0)==(0);
 if ($14) {
  STACKTOP = sp;return;
 }
 $15 = (__ZSt18uncaught_exceptionv()|0);
 if ($15) {
  STACKTOP = sp;return;
 }
 $16 = HEAP32[$0>>2]|0;
 $17 = HEAP32[$16>>2]|0;
 $18 = (($17) + -12|0);
 $19 = HEAP32[$18>>2]|0;
 $$sum3 = (($19) + 24)|0;
 $20 = (($16) + ($$sum3)|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = HEAP32[$21>>2]|0;
 $23 = (($22) + 24|0);
 $24 = HEAP32[$23>>2]|0;
 __THREW__ = 0;
 $25 = (invoke_ii($24|0,($21|0))|0);
 $26 = __THREW__; __THREW__ = 0;
 $27 = $26&1;
 if (!($27)) {
  $28 = ($25|0)==(-1);
  if (!($28)) {
   STACKTOP = sp;return;
  }
  $29 = HEAP32[$0>>2]|0;
  $30 = HEAP32[$29>>2]|0;
  $31 = (($30) + -12|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = (($29) + ($32)|0);
  $$sum4 = (($32) + 16)|0;
  $34 = (($29) + ($$sum4)|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = $35 | 1;
  __THREW__ = 0;
  invoke_vii(449,($33|0),($36|0));
  $37 = __THREW__; __THREW__ = 0;
  $38 = $37&1;
  if (!($38)) {
   STACKTOP = sp;return;
  }
 }
 $39 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
 $40 = tempRet0;
 (___cxa_begin_catch(($39|0))|0);
 __THREW__ = 0;
 invoke_v(447);
 $41 = __THREW__; __THREW__ = 0;
 $42 = $41&1;
 if ($42) {
  $43 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
  $44 = tempRet0;
  ___clang_call_terminate($43);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__119__iostream_category4nameEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return (3984|0);
}
function __ZNKSt3__119__iostream_category7messageEi($agg$result,$this,$ev) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $ev = $ev|0;
 var $$size$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$0$i$i$i$i = 0, $lpad$phi$i$i$index = 0, $lpad$phi$i$i$index2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($ev|0)==(1);
 if ($0) {
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($agg$result,4000,35);
  STACKTOP = sp;return;
 }
 $1 = (_strerror(($ev|0))|0);
 $2 = (_strlen(($1|0))|0);
 $3 = ($2>>>0)>(4294967279);
 if ($3) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
  // unreachable;
 }
 $4 = ($2>>>0)<(11);
 L8: do {
  if ($4) {
   $5 = $2 << 1;
   $6 = $5&255;
   HEAP8[$agg$result>>0] = $6;
   $7 = (($agg$result) + 1|0);
   $__p$0$i$i$i$i = $7;
  } else {
   $8 = (($2) + 16)|0;
   $9 = $8 & -16;
   $10 = ($9|0)==(0);
   $$size$i$i = $10 ? 1 : $9;
   while(1) {
    $11 = (_malloc($$size$i$i)|0);
    $12 = ($11|0)==(0|0);
    if (!($12)) {
     label = 17;
     break;
    }
    $13 = HEAP32[15648>>2]|0;HEAP32[15648>>2] = (($13+0)|0);
    $14 = ($13|0)==(0);
    if ($14) {
     label = 14;
     break;
    }
    $15 = $13;
    __THREW__ = 0;
    invoke_v($15|0);
    $16 = __THREW__; __THREW__ = 0;
    $17 = $16&1;
    if ($17) {
     label = 10;
     break;
    }
   }
   do {
    if ((label|0) == 10) {
     $18 = ___cxa_find_matching_catch(-1,-1,15712|0)|0;
     $19 = tempRet0;
     $lpad$phi$i$i$index = $18;$lpad$phi$i$i$index2 = $19;
    }
    else if ((label|0) == 14) {
     $23 = (___cxa_allocate_exception(4)|0);
     HEAP32[$23>>2] = ((15656 + 8|0));
     __THREW__ = 0;
     invoke_viii(379,($23|0),(15712|0),(374|0));
     $24 = __THREW__; __THREW__ = 0;
     $25 = $24&1;
     if ($25) {
      $20 = ___cxa_find_matching_catch(-1,-1,15712|0)|0;
      $21 = tempRet0;
      $lpad$phi$i$i$index = $20;$lpad$phi$i$i$index2 = $21;
      break;
     } else {
      // unreachable;
     }
    }
    else if ((label|0) == 17) {
     $26 = (($agg$result) + 8|0);
     HEAP32[$26>>2] = $11;
     $27 = $9 | 1;
     HEAP32[$agg$result>>2] = $27;
     $28 = (($agg$result) + 4|0);
     HEAP32[$28>>2] = $2;
     $__p$0$i$i$i$i = $11;
     break L8;
    }
   } while(0);
   $22 = ($lpad$phi$i$i$index2|0)<(0);
   if ($22) {
    ___cxa_call_unexpected(($lpad$phi$i$i$index|0));
    // unreachable;
   } else {
    ___resumeException($lpad$phi$i$i$index|0);
    // unreachable;
   }
  }
 } while(0);
 _memcpy(($__p$0$i$i$i$i|0),($1|0),($2|0))|0;
 $29 = (($__p$0$i$i$i$i) + ($2)|0);
 HEAP8[$29>>0] = 0;
 STACKTOP = sp;return;
}
function __ZNSt3__119__iostream_categoryD1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNSt3__18ios_base7failureD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $this$idx$val$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((3296 + 8|0));
 $0 = (($this) + 4|0);
 $this$idx$val$i$i$i = HEAP32[$0>>2]|0;
 $1 = (($this$idx$val$i$i$i) + -4|0);
 $2 = HEAP32[$1>>2]|0;HEAP32[$1>>2] = (($2+-1)|0);
 $3 = (($2) + -1)|0;
 $4 = ($3|0)<(0);
 if ($4) {
  $5 = HEAP32[$0>>2]|0;
  $6 = (($5) + -12|0);
  _free($6);
 }
 __ZNSt9exceptionD2Ev(($this|0));
 _free($this);
 STACKTOP = sp;return;
}
function __ZNSt3__18ios_base7failureD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $this$idx$val$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((3296 + 8|0));
 $0 = (($this) + 4|0);
 $this$idx$val$i$i$i = HEAP32[$0>>2]|0;
 $1 = (($this$idx$val$i$i$i) + -4|0);
 $2 = HEAP32[$1>>2]|0;HEAP32[$1>>2] = (($2+-1)|0);
 $3 = (($2) + -1)|0;
 $4 = ($3|0)<(0);
 if (!($4)) {
  __ZNSt9exceptionD2Ev(($this|0));
  STACKTOP = sp;return;
 }
 $5 = HEAP32[$0>>2]|0;
 $6 = (($5) + -12|0);
 _free($6);
 __ZNSt9exceptionD2Ev(($this|0));
 STACKTOP = sp;return;
}
function __ZNSt3__18ios_baseD0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__18ios_baseD2Ev($this);
 $0 = ($this|0)==(0|0);
 if (!($0)) {
  _free($this);
 }
 STACKTOP = sp;return;
}
function __ZNSt3__119__iostream_categoryD0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($this|0)==(0|0);
 if (!($0)) {
  _free($this);
 }
 STACKTOP = sp;return;
}
function __ZNSt3__17collateIcED0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($this|0)==(0|0);
 if (!($0)) {
  _free($this);
 }
 STACKTOP = sp;return;
}
function __ZNSt3__17collateIcED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5facetD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__17collateIcE10do_compareEPKcS3_S3_S3_($this,$__lo1,$__hi1,$__lo2,$__hi2) {
 $this = $this|0;
 $__lo1 = $__lo1|0;
 $__hi1 = $__hi1|0;
 $__lo2 = $__lo2|0;
 $__hi2 = $__hi2|0;
 var $$0 = 0, $$015 = 0, $$02$lcssa = 0, $$024 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__lo2|0)==($__hi2|0);
 L1: do {
  if ($0) {
   $$02$lcssa = $__lo1;
   label = 6;
  } else {
   $$015 = $__lo2;$$024 = $__lo1;
   while(1) {
    $1 = ($$024|0)==($__hi1|0);
    if ($1) {
     $$0 = -1;
     break L1;
    }
    $2 = HEAP8[$$024>>0]|0;
    $3 = HEAP8[$$015>>0]|0;
    $4 = ($2<<24>>24)<($3<<24>>24);
    if ($4) {
     $$0 = -1;
     break L1;
    }
    $5 = ($3<<24>>24)<($2<<24>>24);
    if ($5) {
     $$0 = 1;
     break L1;
    }
    $6 = (($$024) + 1|0);
    $7 = (($$015) + 1|0);
    $8 = ($7|0)==($__hi2|0);
    if ($8) {
     $$02$lcssa = $6;
     label = 6;
     break;
    } else {
     $$015 = $7;$$024 = $6;
    }
   }
  }
 } while(0);
 if ((label|0) == 6) {
  $9 = ($$02$lcssa|0)!=($__hi1|0);
  $10 = $9&1;
  $$0 = $10;
 }
 STACKTOP = sp;return ($$0|0);
}
function __ZNKSt3__17collateIcE12do_transformEPKcS3_($agg$result,$this,$__lo,$__hi) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__lo = $__lo|0;
 $__hi = $__hi|0;
 var $$02$i$i$i = 0, $$size$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$0$lcssa$i$i$i = 0, $__p$0$ph$i$i$i = 0, $__p$01$i$i$i = 0;
 var $lpad$phi$i$index = 0, $lpad$phi$i$index2 = 0, $scevgep$i$i$i = 0, $scevgep3$i$i$i = 0, $scevgep4$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $__lo;
 $1 = $__hi;
 $2 = (($1) - ($0))|0;
 $3 = ($2>>>0)>(4294967279);
 if ($3) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
  // unreachable;
 }
 $4 = ($2>>>0)<(11);
 L4: do {
  if ($4) {
   $5 = $2 << 1;
   $6 = $5&255;
   HEAP8[$agg$result>>0] = $6;
   $7 = (($agg$result) + 1|0);
   $__p$0$ph$i$i$i = $7;
  } else {
   $8 = (($2) + 16)|0;
   $9 = $8 & -16;
   $10 = ($9|0)==(0);
   $$size$i = $10 ? 1 : $9;
   while(1) {
    $11 = (_malloc($$size$i)|0);
    $12 = ($11|0)==(0|0);
    if (!($12)) {
     label = 16;
     break;
    }
    $13 = HEAP32[15648>>2]|0;HEAP32[15648>>2] = (($13+0)|0);
    $14 = ($13|0)==(0);
    if ($14) {
     label = 13;
     break;
    }
    $15 = $13;
    __THREW__ = 0;
    invoke_v($15|0);
    $16 = __THREW__; __THREW__ = 0;
    $17 = $16&1;
    if ($17) {
     label = 9;
     break;
    }
   }
   do {
    if ((label|0) == 9) {
     $18 = ___cxa_find_matching_catch(-1,-1,15712|0)|0;
     $19 = tempRet0;
     $lpad$phi$i$index = $18;$lpad$phi$i$index2 = $19;
    }
    else if ((label|0) == 13) {
     $23 = (___cxa_allocate_exception(4)|0);
     HEAP32[$23>>2] = ((15656 + 8|0));
     __THREW__ = 0;
     invoke_viii(379,($23|0),(15712|0),(374|0));
     $24 = __THREW__; __THREW__ = 0;
     $25 = $24&1;
     if ($25) {
      $20 = ___cxa_find_matching_catch(-1,-1,15712|0)|0;
      $21 = tempRet0;
      $lpad$phi$i$index = $20;$lpad$phi$i$index2 = $21;
      break;
     } else {
      // unreachable;
     }
    }
    else if ((label|0) == 16) {
     $26 = (($agg$result) + 8|0);
     HEAP32[$26>>2] = $11;
     $27 = $9 | 1;
     HEAP32[$agg$result>>2] = $27;
     $28 = (($agg$result) + 4|0);
     HEAP32[$28>>2] = $2;
     $__p$0$ph$i$i$i = $11;
     break L4;
    }
   } while(0);
   $22 = ($lpad$phi$i$index2|0)<(0);
   if ($22) {
    ___cxa_call_unexpected(($lpad$phi$i$index|0));
    // unreachable;
   } else {
    ___resumeException($lpad$phi$i$index|0);
    // unreachable;
   }
  }
 } while(0);
 $29 = ($__lo|0)==($__hi|0);
 if ($29) {
  $__p$0$lcssa$i$i$i = $__p$0$ph$i$i$i;
  HEAP8[$__p$0$lcssa$i$i$i>>0] = 0;
  STACKTOP = sp;return;
 } else {
  $$02$i$i$i = $__lo;$__p$01$i$i$i = $__p$0$ph$i$i$i;
 }
 while(1) {
  $30 = HEAP8[$$02$i$i$i>>0]|0;
  HEAP8[$__p$01$i$i$i>>0] = $30;
  $31 = (($$02$i$i$i) + 1|0);
  $32 = (($__p$01$i$i$i) + 1|0);
  $33 = ($31|0)==($__hi|0);
  if ($33) {
   break;
  } else {
   $$02$i$i$i = $31;$__p$01$i$i$i = $32;
  }
 }
 $34 = (0 - ($0))|0;
 $scevgep$i$i$i = (($__hi) + ($34)|0);
 $scevgep3$i$i$i = $scevgep$i$i$i;
 $scevgep4$i$i$i = (($__p$0$ph$i$i$i) + ($scevgep3$i$i$i)|0);
 $__p$0$lcssa$i$i$i = $scevgep4$i$i$i;
 HEAP8[$__p$0$lcssa$i$i$i>>0] = 0;
 STACKTOP = sp;return;
}
function __ZNKSt3__17collateIcE7do_hashEPKcS3_($this,$__lo,$__hi) {
 $this = $this|0;
 $__lo = $__lo|0;
 $__hi = $__hi|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__h$0$lcssa = 0, $__h$02 = 0, $__p$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__lo|0)==($__hi|0);
 if ($0) {
  $__h$0$lcssa = 0;
  STACKTOP = sp;return ($__h$0$lcssa|0);
 } else {
  $__h$02 = 0;$__p$01 = $__lo;
 }
 while(1) {
  $1 = $__h$02 << 4;
  $2 = HEAP8[$__p$01>>0]|0;
  $3 = $2 << 24 >> 24;
  $4 = (($3) + ($1))|0;
  $5 = $4 & -268435456;
  $6 = $5 >>> 24;
  $7 = $6 | $5;
  $8 = $7 ^ $4;
  $9 = (($__p$01) + 1|0);
  $10 = ($9|0)==($__hi|0);
  if ($10) {
   $__h$0$lcssa = $8;
   break;
  } else {
   $__h$02 = $8;$__p$01 = $9;
  }
 }
 STACKTOP = sp;return ($__h$0$lcssa|0);
}
function __ZNSt3__17collateIwED0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($this|0)==(0|0);
 if (!($0)) {
  _free($this);
 }
 STACKTOP = sp;return;
}
function __ZNSt3__17collateIwED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__17collateIwE10do_compareEPKwS3_S3_S3_($this,$__lo1,$__hi1,$__lo2,$__hi2) {
 $this = $this|0;
 $__lo1 = $__lo1|0;
 $__hi1 = $__hi1|0;
 $__lo2 = $__lo2|0;
 $__hi2 = $__hi2|0;
 var $$0 = 0, $$015 = 0, $$02$lcssa = 0, $$024 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__lo2|0)==($__hi2|0);
 L1: do {
  if ($0) {
   $$02$lcssa = $__lo1;
   label = 6;
  } else {
   $$015 = $__lo2;$$024 = $__lo1;
   while(1) {
    $1 = ($$024|0)==($__hi1|0);
    if ($1) {
     $$0 = -1;
     break L1;
    }
    $2 = HEAP32[$$024>>2]|0;
    $3 = HEAP32[$$015>>2]|0;
    $4 = ($2|0)<($3|0);
    if ($4) {
     $$0 = -1;
     break L1;
    }
    $5 = ($3|0)<($2|0);
    if ($5) {
     $$0 = 1;
     break L1;
    }
    $6 = (($$024) + 4|0);
    $7 = (($$015) + 4|0);
    $8 = ($7|0)==($__hi2|0);
    if ($8) {
     $$02$lcssa = $6;
     label = 6;
     break;
    } else {
     $$015 = $7;$$024 = $6;
    }
   }
  }
 } while(0);
 if ((label|0) == 6) {
  $9 = ($$02$lcssa|0)!=($__hi1|0);
  $10 = $9&1;
  $$0 = $10;
 }
 STACKTOP = sp;return ($$0|0);
}
function __ZNKSt3__17collateIwE12do_transformEPKwS3_($agg$result,$this,$__lo,$__hi) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__lo = $__lo|0;
 $__hi = $__hi|0;
 var $$02$i$i$i = 0, $$size$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $__p$0$lcssa$i$i$i = 0, $__p$0$ph$i$i$i = 0, $__p$01$i$i$i = 0, $lpad$phi$i$index = 0, $lpad$phi$i$index2 = 0, $scevgep$i$i$i = 0, $scevgep5$i$i$i = 0, $uglygep$i$i$i = 0, $uglygep4$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $__lo;
 $1 = $__hi;
 $2 = (($1) - ($0))|0;
 $3 = $2 >> 2;
 $4 = ($3>>>0)>(1073741807);
 if ($4) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
  // unreachable;
 }
 $5 = ($3>>>0)<(2);
 L4: do {
  if ($5) {
   $6 = $2 >>> 1;
   $7 = $6&255;
   HEAP8[$agg$result>>0] = $7;
   $8 = (($agg$result) + 4|0);
   $__p$0$ph$i$i$i = $8;
  } else {
   $9 = (($3) + 4)|0;
   $10 = $9 & -4;
   $11 = $10 << 2;
   $12 = ($11|0)==(0);
   $$size$i = $12 ? 1 : $11;
   while(1) {
    $13 = (_malloc($$size$i)|0);
    $14 = ($13|0)==(0|0);
    if (!($14)) {
     label = 16;
     break;
    }
    $15 = HEAP32[15648>>2]|0;HEAP32[15648>>2] = (($15+0)|0);
    $16 = ($15|0)==(0);
    if ($16) {
     label = 13;
     break;
    }
    $17 = $15;
    __THREW__ = 0;
    invoke_v($17|0);
    $18 = __THREW__; __THREW__ = 0;
    $19 = $18&1;
    if ($19) {
     label = 9;
     break;
    }
   }
   do {
    if ((label|0) == 9) {
     $20 = ___cxa_find_matching_catch(-1,-1,15712|0)|0;
     $21 = tempRet0;
     $lpad$phi$i$index = $20;$lpad$phi$i$index2 = $21;
    }
    else if ((label|0) == 13) {
     $25 = (___cxa_allocate_exception(4)|0);
     HEAP32[$25>>2] = ((15656 + 8|0));
     __THREW__ = 0;
     invoke_viii(379,($25|0),(15712|0),(374|0));
     $26 = __THREW__; __THREW__ = 0;
     $27 = $26&1;
     if ($27) {
      $22 = ___cxa_find_matching_catch(-1,-1,15712|0)|0;
      $23 = tempRet0;
      $lpad$phi$i$index = $22;$lpad$phi$i$index2 = $23;
      break;
     } else {
      // unreachable;
     }
    }
    else if ((label|0) == 16) {
     $28 = (($agg$result) + 8|0);
     HEAP32[$28>>2] = $13;
     $29 = $10 | 1;
     HEAP32[$agg$result>>2] = $29;
     $30 = (($agg$result) + 4|0);
     HEAP32[$30>>2] = $3;
     $__p$0$ph$i$i$i = $13;
     break L4;
    }
   } while(0);
   $24 = ($lpad$phi$i$index2|0)<(0);
   if ($24) {
    ___cxa_call_unexpected(($lpad$phi$i$index|0));
    // unreachable;
   } else {
    ___resumeException($lpad$phi$i$index|0);
    // unreachable;
   }
  }
 } while(0);
 $31 = ($__lo|0)==($__hi|0);
 if ($31) {
  $__p$0$lcssa$i$i$i = $__p$0$ph$i$i$i;
  HEAP32[$__p$0$lcssa$i$i$i>>2] = 0;
  STACKTOP = sp;return;
 }
 $scevgep$i$i$i = (($__hi) + -4|0);
 $32 = (0 - ($0))|0;
 $uglygep$i$i$i = (($scevgep$i$i$i) + ($32)|0);
 $$02$i$i$i = $__lo;$__p$01$i$i$i = $__p$0$ph$i$i$i;
 while(1) {
  $33 = HEAP32[$$02$i$i$i>>2]|0;
  HEAP32[$__p$01$i$i$i>>2] = $33;
  $34 = (($$02$i$i$i) + 4|0);
  $35 = (($__p$01$i$i$i) + 4|0);
  $36 = ($34|0)==($__hi|0);
  if ($36) {
   break;
  } else {
   $$02$i$i$i = $34;$__p$01$i$i$i = $35;
  }
 }
 $uglygep4$i$i$i = $uglygep$i$i$i;
 $37 = $uglygep4$i$i$i >>> 2;
 $38 = (($37) + 1)|0;
 $scevgep5$i$i$i = (($__p$0$ph$i$i$i) + ($38<<2)|0);
 $__p$0$lcssa$i$i$i = $scevgep5$i$i$i;
 HEAP32[$__p$0$lcssa$i$i$i>>2] = 0;
 STACKTOP = sp;return;
}
function __ZNKSt3__17collateIwE7do_hashEPKwS3_($this,$__lo,$__hi) {
 $this = $this|0;
 $__lo = $__lo|0;
 $__hi = $__hi|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__h$0$lcssa = 0, $__h$02 = 0, $__p$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__lo|0)==($__hi|0);
 if ($0) {
  $__h$0$lcssa = 0;
  STACKTOP = sp;return ($__h$0$lcssa|0);
 } else {
  $__h$02 = 0;$__p$01 = $__lo;
 }
 while(1) {
  $1 = $__h$02 << 4;
  $2 = HEAP32[$__p$01>>2]|0;
  $3 = (($2) + ($1))|0;
  $4 = $3 & -268435456;
  $5 = $4 >>> 24;
  $6 = $5 | $4;
  $7 = $6 ^ $3;
  $8 = (($__p$01) + 4|0);
  $9 = ($8|0)==($__hi|0);
  if ($9) {
   $__h$0$lcssa = $7;
   break;
  } else {
   $__h$02 = $7;$__p$01 = $8;
  }
 }
 STACKTOP = sp;return ($__h$0$lcssa|0);
}
function __ZNSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($this|0)==(0|0);
 if (!($0)) {
  _free($this);
 }
 STACKTOP = sp;return;
}
function __ZNSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRb($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $$byval_copy = 0, $$byval_copy14 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__lv = 0, $__names = 0, $__p$i$i$i$i = 0;
 var $__p$i$i$i$i4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $$byval_copy14 = sp + 76|0;
 $$byval_copy = sp + 72|0;
 $__p$i$i$i$i4 = sp + 16|0;
 $__p$i$i$i$i = sp;
 $__lv = sp + 68|0;
 $0 = sp + 64|0;
 $1 = sp + 60|0;
 $2 = sp + 56|0;
 $__names = sp + 32|0;
 $3 = (($__iob) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 1;
 $6 = ($5|0)==(0);
 if ($6) {
  HEAP32[$__lv>>2] = -1;
  $7 = HEAP32[$this>>2]|0;
  $8 = (($7) + 16|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = HEAP32[$__b>>2]|0;
  HEAP32[$1>>2] = $10;
  $11 = HEAP32[$__e>>2]|0;
  HEAP32[$2>>2] = $11;
  ;HEAP32[$$byval_copy+0>>2]=HEAP32[$1+0>>2]|0;
  ;HEAP32[$$byval_copy14+0>>2]=HEAP32[$2+0>>2]|0;
  FUNCTION_TABLE_viiiiiii[$9 & 511]($0,$this,$$byval_copy,$$byval_copy14,$__iob,$__err,$__lv);
  $12 = HEAP32[$0>>2]|0;
  HEAP32[$__b>>2] = $12;
  $13 = HEAP32[$__lv>>2]|0;
  if ((($13|0) == 0)) {
   HEAP8[$__v>>0] = 0;
  } else if ((($13|0) == 1)) {
   HEAP8[$__v>>0] = 1;
  } else {
   HEAP8[$__v>>0] = 1;
   HEAP32[$__err>>2] = 4;
  }
  HEAP32[$agg$result>>2] = $12;
  STACKTOP = sp;return;
 }
 $14 = (($__iob) + 28|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (($15) + 4|0);
 $17 = HEAP32[$16>>2]|0;HEAP32[$16>>2] = (($17+1)|0);
 $18 = HEAP32[6416>>2]|0;
 $19 = ($18|0)==(-1);
 if ($19) {
  label = 9;
 } else {
  HEAP32[$__p$i$i$i$i>>2] = 6416;
  $20 = (($__p$i$i$i$i) + 4|0);
  HEAP32[$20>>2] = (439);
  $21 = (($__p$i$i$i$i) + 8|0);
  HEAP32[$21>>2] = 0;
  __THREW__ = 0;
  invoke_vii(440,(6416|0),($__p$i$i$i$i|0));
  $22 = __THREW__; __THREW__ = 0;
  $23 = $22&1;
  if (!($23)) {
   label = 9;
  }
 }
 if ((label|0) == 9) {
  $24 = HEAP32[((6416 + 4|0))>>2]|0;
  $25 = (($24) + -1)|0;
  $26 = (($15) + 12|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = (($15) + 8|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = $27;
  $31 = $29;
  $32 = (($30) - ($31))|0;
  $33 = $32 >> 2;
  $34 = ($33>>>0)>($25>>>0);
  if ($34) {
   $35 = (($29) + ($25<<2)|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = ($36|0)==(0|0);
   if (!($37)) {
    $41 = (($15) + 4|0);
    $42 = HEAP32[$41>>2]|0;HEAP32[$41>>2] = (($42+-1)|0);
    $43 = ($42|0)==(0);
    if ($43) {
     $44 = HEAP32[$15>>2]|0;
     $45 = (($44) + 8|0);
     $46 = HEAP32[$45>>2]|0;
     FUNCTION_TABLE_vi[$46 & 511]($15);
    }
    $47 = HEAP32[$14>>2]|0;
    $48 = (($47) + 4|0);
    $49 = HEAP32[$48>>2]|0;HEAP32[$48>>2] = (($49+1)|0);
    $50 = HEAP32[6560>>2]|0;
    $51 = ($50|0)==(-1);
    if ($51) {
     label = 17;
    } else {
     HEAP32[$__p$i$i$i$i4>>2] = 6560;
     $52 = (($__p$i$i$i$i4) + 4|0);
     HEAP32[$52>>2] = (439);
     $53 = (($__p$i$i$i$i4) + 8|0);
     HEAP32[$53>>2] = 0;
     __THREW__ = 0;
     invoke_vii(440,(6560|0),($__p$i$i$i$i4|0));
     $54 = __THREW__; __THREW__ = 0;
     $55 = $54&1;
     if (!($55)) {
      label = 17;
     }
    }
    if ((label|0) == 17) {
     $56 = HEAP32[((6560 + 4|0))>>2]|0;
     $57 = (($56) + -1)|0;
     $58 = (($47) + 12|0);
     $59 = HEAP32[$58>>2]|0;
     $60 = (($47) + 8|0);
     $61 = HEAP32[$60>>2]|0;
     $62 = $59;
     $63 = $61;
     $64 = (($62) - ($63))|0;
     $65 = $64 >> 2;
     $66 = ($65>>>0)>($57>>>0);
     if ($66) {
      $67 = (($61) + ($57<<2)|0);
      $68 = HEAP32[$67>>2]|0;
      $69 = ($68|0)==(0|0);
      if (!($69)) {
       $73 = (($47) + 4|0);
       $74 = HEAP32[$73>>2]|0;HEAP32[$73>>2] = (($74+-1)|0);
       $75 = ($74|0)==(0);
       if ($75) {
        $76 = HEAP32[$47>>2]|0;
        $77 = (($76) + 8|0);
        $78 = HEAP32[$77>>2]|0;
        FUNCTION_TABLE_vi[$78 & 511]($47);
       }
       $79 = HEAP32[$68>>2]|0;
       $80 = (($79) + 24|0);
       $81 = HEAP32[$80>>2]|0;
       __THREW__ = 0;
       invoke_vii($81|0,($__names|0),($68|0));
       $82 = __THREW__; __THREW__ = 0;
       $83 = $82&1;
       if ($83) {
        $$02 = $__names;
       } else {
        $84 = (($__names) + 12|0);
        $85 = HEAP32[$68>>2]|0;
        $86 = (($85) + 28|0);
        $87 = HEAP32[$86>>2]|0;
        __THREW__ = 0;
        invoke_vii($87|0,($84|0),($68|0));
        $88 = __THREW__; __THREW__ = 0;
        $89 = $88&1;
        if ($89) {
         $$02 = $84;
        } else {
         $90 = HEAP32[$__e>>2]|0;
         $91 = (($__names) + 24|0);
         __THREW__ = 0;
         $92 = (invoke_iiiiiiii(450,($__b|0),($90|0),($__names|0),($91|0),($36|0),($__err|0),1)|0);
         $93 = __THREW__; __THREW__ = 0;
         $94 = $93&1;
         if ($94) {
          $138 = ___cxa_find_matching_catch(-1,-1)|0;
          $139 = tempRet0;
          $140 = HEAP8[$84>>0]|0;
          $141 = $140 & 1;
          $142 = ($141<<24>>24)==(0);
          do {
           if (!($142)) {
            $143 = (($__names) + 20|0);
            $144 = HEAP32[$143>>2]|0;
            $145 = ($144|0)==(0|0);
            if ($145) {
             break;
            }
            _free($144);
           }
          } while(0);
          $146 = HEAP8[$__names>>0]|0;
          $147 = $146 & 1;
          $148 = ($147<<24>>24)==(0);
          do {
           if (!($148)) {
            $149 = (($__names) + 8|0);
            $150 = HEAP32[$149>>2]|0;
            $151 = ($150|0)==(0|0);
            if ($151) {
             break;
            }
            _free($150);
           }
          } while(0);
          $$0 = $138;$$01 = $139;
          ___resumeException($$0|0);
          // unreachable;
         }
         $95 = ($92|0)==($__names|0);
         $96 = $95&1;
         HEAP8[$__v>>0] = $96;
         $97 = HEAP32[$__b>>2]|0;
         HEAP32[$agg$result>>2] = $97;
         $98 = HEAP8[$84>>0]|0;
         $99 = $98 & 1;
         $100 = ($99<<24>>24)==(0);
         if (!($100)) {
          $101 = (($__names) + 20|0);
          $102 = HEAP32[$101>>2]|0;
          $103 = ($102|0)==(0|0);
          if (!($103)) {
           _free($102);
          }
         }
         $104 = HEAP8[$__names>>0]|0;
         $105 = $104 & 1;
         $106 = ($105<<24>>24)==(0);
         if ($106) {
          STACKTOP = sp;return;
         }
         $107 = (($__names) + 8|0);
         $108 = HEAP32[$107>>2]|0;
         $109 = ($108|0)==(0|0);
         if ($109) {
          STACKTOP = sp;return;
         }
         _free($108);
         STACKTOP = sp;return;
        }
       }
       $126 = ___cxa_find_matching_catch(-1,-1)|0;
       $127 = tempRet0;
       $128 = ($__names|0)==($$02|0);
       if ($128) {
        $$0 = $126;$$01 = $127;
        ___resumeException($$0|0);
        // unreachable;
       } else {
        $130 = $$02;
       }
       while(1) {
        $129 = (($130) + -12|0);
        $131 = HEAP8[$129>>0]|0;
        $132 = $131 & 1;
        $133 = ($132<<24>>24)==(0);
        if (!($133)) {
         $134 = (($130) + -4|0);
         $135 = HEAP32[$134>>2]|0;
         $136 = ($135|0)==(0|0);
         if (!($136)) {
          _free($135);
         }
        }
        $137 = ($129|0)==($__names|0);
        if ($137) {
         $$0 = $126;$$01 = $127;
         break;
        } else {
         $130 = $129;
        }
       }
       ___resumeException($$0|0);
       // unreachable;
      }
     }
     $70 = (___cxa_allocate_exception(4)|0);
     HEAP32[$70>>2] = ((14256 + 8|0));
     __THREW__ = 0;
     invoke_viii(379,($70|0),(14336|0),(351|0));
     $71 = __THREW__; __THREW__ = 0;
     $72 = $71&1;
     if (!($72)) {
      // unreachable;
     }
    }
    $118 = ___cxa_find_matching_catch(-1,-1)|0;
    $119 = tempRet0;
    $120 = (($47) + 4|0);
    $121 = HEAP32[$120>>2]|0;HEAP32[$120>>2] = (($121+-1)|0);
    $122 = ($121|0)==(0);
    if (!($122)) {
     $$0 = $118;$$01 = $119;
     ___resumeException($$0|0);
     // unreachable;
    }
    $123 = HEAP32[$47>>2]|0;
    $124 = (($123) + 8|0);
    $125 = HEAP32[$124>>2]|0;
    FUNCTION_TABLE_vi[$125 & 511]($47);
    $$0 = $118;$$01 = $119;
    ___resumeException($$0|0);
    // unreachable;
   }
  }
  $38 = (___cxa_allocate_exception(4)|0);
  HEAP32[$38>>2] = ((14256 + 8|0));
  __THREW__ = 0;
  invoke_viii(379,($38|0),(14336|0),(351|0));
  $39 = __THREW__; __THREW__ = 0;
  $40 = $39&1;
  if (!($40)) {
   // unreachable;
  }
 }
 $110 = ___cxa_find_matching_catch(-1,-1)|0;
 $111 = tempRet0;
 $112 = (($15) + 4|0);
 $113 = HEAP32[$112>>2]|0;HEAP32[$112>>2] = (($113+-1)|0);
 $114 = ($113|0)==(0);
 if (!($114)) {
  $$0 = $110;$$01 = $111;
  ___resumeException($$0|0);
  // unreachable;
 }
 $115 = HEAP32[$15>>2]|0;
 $116 = (($115) + 8|0);
 $117 = HEAP32[$116>>2]|0;
 FUNCTION_TABLE_vi[$117 & 511]($15);
 $$0 = $110;$$01 = $111;
 ___resumeException($$0|0);
 // unreachable;
}
function __ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$__e$0,$__kb,$__ke,$__ct,$__err,$__case_sensitive) {
 $__b = $__b|0;
 $__e$0 = $__e$0|0;
 $__kb = $__kb|0;
 $__ke = $__ke|0;
 $__ct = $__ct|0;
 $__err = $__err|0;
 $__case_sensitive = $__case_sensitive|0;
 var $$ = 0, $$0$i$i = 0, $$024 = 0, $$02680 = 0, $$__e$sroa$0$0 = 0, $$__e$sroa$0$04 = 0, $$index = 0, $$index16 = 0, $$not = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i12 = 0, $$pre$i2$i$i16 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0;
 var $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0;
 var $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0;
 var $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0;
 var $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0;
 var $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0;
 var $212 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__c$0 = 0, $__consume$0$off0$lcssa = 0, $__consume$0$off035 = 0, $__consume$0$off035$us = 0, $__consume$1$off0 = 0, $__consume$1$off0$us = 0, $__e$sroa$0$0 = 0, $__e$sroa$0$0$ph = 0, $__e$sroa$0$1 = 0, $__indx$0 = 0, $__indx$0$ph = 0, $__ky$064 = 0, $__ky1$036 = 0, $__ky1$036$us = 0;
 var $__ky2$047 = 0, $__n_does_match$0$lcssa = 0, $__n_does_match$062 = 0, $__n_does_match$1 = 0, $__n_does_match$2$ph = 0, $__n_does_match$3$lcssa = 0, $__n_does_match$332 = 0, $__n_does_match$332$us = 0, $__n_does_match$4 = 0, $__n_does_match$4$us = 0, $__n_does_match$545 = 0, $__n_does_match$6 = 0, $__n_might_match$0$lcssa = 0, $__n_might_match$061 = 0, $__n_might_match$1 = 0, $__n_might_match$2$ph = 0, $__n_might_match$3$lcssa = 0, $__n_might_match$331 = 0, $__n_might_match$331$us = 0, $__n_might_match$4 = 0;
 var $__n_might_match$4$us = 0, $__st$063 = 0, $__st$133 = 0, $__st$133$us = 0, $__st$246 = 0, $__st$32581 = 0, $__statbuf = 0, $__status$0 = 0, $lpad$phi$index = 0, $lpad$phi$index8 = 0, $tmp$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $__statbuf = sp;
 $0 = $__ke;
 $1 = $__kb;
 $2 = (($0) - ($1))|0;
 $3 = (($2|0) / 12)&-1;
 $4 = ($3>>>0)>(100);
 if ($4) {
  $5 = (_malloc($3)|0);
  $6 = ($5|0)==(0|0);
  if ($6) {
   $7 = (___cxa_allocate_exception(4)|0);
   HEAP32[$7>>2] = ((15656 + 8|0));
   __THREW__ = 0;
   invoke_viii(379,($7|0),(15712|0),(374|0));
   $8 = __THREW__; __THREW__ = 0;
   $9 = $8&1;
   if (!($9)) {
    // unreachable;
   }
   $10 = ___cxa_find_matching_catch(-1,-1)|0;
   $11 = tempRet0;
   $$index = $10;$$index16 = $11;
   ___resumeException($$index|0);
   // unreachable;
  } else {
   $21 = $5;$__status$0 = $5;
  }
 } else {
  $21 = 0;$__status$0 = $__statbuf;
 }
 $22 = ($__kb|0)==($__ke|0);
 if ($22) {
  $__n_does_match$0$lcssa = 0;$__n_might_match$0$lcssa = $3;
 } else {
  $__ky$064 = $__kb;$__n_does_match$062 = 0;$__n_might_match$061 = $3;$__st$063 = $__status$0;
  while(1) {
   $23 = HEAP8[$__ky$064>>0]|0;
   $24 = $23 & 1;
   $25 = ($24<<24>>24)==(0);
   if ($25) {
    $28 = $23&255;
    $29 = $28 >>> 1;
    $31 = $29;
   } else {
    $26 = (($__ky$064) + 4|0);
    $27 = HEAP32[$26>>2]|0;
    $31 = $27;
   }
   $30 = ($31|0)==(0);
   if ($30) {
    HEAP8[$__st$063>>0] = 2;
    $32 = (($__n_might_match$061) + -1)|0;
    $33 = (($__n_does_match$062) + 1)|0;
    $__n_does_match$1 = $33;$__n_might_match$1 = $32;
   } else {
    HEAP8[$__st$063>>0] = 1;
    $__n_does_match$1 = $__n_does_match$062;$__n_might_match$1 = $__n_might_match$061;
   }
   $34 = (($__ky$064) + 12|0);
   $35 = (($__st$063) + 1|0);
   $36 = ($34|0)==($__ke|0);
   if ($36) {
    $__n_does_match$0$lcssa = $__n_does_match$1;$__n_might_match$0$lcssa = $__n_might_match$1;
    break;
   } else {
    $__ky$064 = $34;$__n_does_match$062 = $__n_does_match$1;$__n_might_match$061 = $__n_might_match$1;$__st$063 = $35;
   }
  }
 }
 $__e$sroa$0$0$ph = $__e$0;$__indx$0$ph = 0;$__n_does_match$2$ph = $__n_does_match$0$lcssa;$__n_might_match$2$ph = $__n_might_match$0$lcssa;
 L21: while(1) {
  $37 = ($__n_might_match$2$ph|0)!=(0);
  $__e$sroa$0$0 = $__e$sroa$0$0$ph;$__indx$0 = $__indx$0$ph;
  while(1) {
   $38 = HEAP32[$__b>>2]|0;
   $39 = ($38|0)==(0|0);
   do {
    if ($39) {
     $53 = 0;
    } else {
     $40 = (($38) + 12|0);
     $41 = HEAP32[$40>>2]|0;
     $42 = (($38) + 16|0);
     $43 = HEAP32[$42>>2]|0;
     $44 = ($41|0)==($43|0);
     if ($44) {
      $45 = HEAP32[$38>>2]|0;
      $46 = (($45) + 36|0);
      $47 = HEAP32[$46>>2]|0;
      __THREW__ = 0;
      $48 = (invoke_ii($47|0,($38|0))|0);
      $49 = __THREW__; __THREW__ = 0;
      $50 = $49&1;
      if ($50) {
       label = 7;
       break L21;
      }
      $51 = ($48|0)==(-1);
      if ($51) {
       HEAP32[$__b>>2] = 0;
       $53 = 0;
       break;
      } else {
       $$pre$i$i$i = HEAP32[$__b>>2]|0;
       $53 = $$pre$i$i$i;
       break;
      }
     } else {
      $53 = $38;
     }
    }
   } while(0);
   $52 = ($53|0)==(0|0);
   $54 = ($__e$sroa$0$0|0)==(0|0);
   if ($54) {
    $$pre$i2$i$i16 = 0;$__e$sroa$0$1 = 0;
   } else {
    $55 = (($__e$sroa$0$0) + 12|0);
    $56 = HEAP32[$55>>2]|0;
    $57 = (($__e$sroa$0$0) + 16|0);
    $58 = HEAP32[$57>>2]|0;
    $59 = ($56|0)==($58|0);
    if ($59) {
     $60 = HEAP32[$__e$sroa$0$0>>2]|0;
     $61 = (($60) + 36|0);
     $62 = HEAP32[$61>>2]|0;
     __THREW__ = 0;
     $63 = (invoke_ii($62|0,($__e$sroa$0$0|0))|0);
     $64 = __THREW__; __THREW__ = 0;
     $65 = $64&1;
     if ($65) {
      label = 7;
      break L21;
     }
     $66 = ($63|0)==(-1);
     $$__e$sroa$0$0 = $66 ? 0 : $__e$sroa$0$0;
     $$__e$sroa$0$04 = $66 ? 0 : $__e$sroa$0$0;
     $$pre$i2$i$i16 = $$__e$sroa$0$04;$__e$sroa$0$1 = $$__e$sroa$0$0;
    } else {
     $$pre$i2$i$i16 = $__e$sroa$0$0;$__e$sroa$0$1 = $__e$sroa$0$0;
    }
   }
   $67 = ($$pre$i2$i$i16|0)==(0|0);
   $tmp$i$i = $52 ^ $67;
   $$ = $tmp$i$i & $37;
   $68 = HEAP32[$__b>>2]|0;
   if (!($$)) {
    label = 80;
    break L21;
   }
   $69 = (($68) + 12|0);
   $70 = HEAP32[$69>>2]|0;
   $71 = (($68) + 16|0);
   $72 = HEAP32[$71>>2]|0;
   $73 = ($70|0)==($72|0);
   if ($73) {
    $74 = HEAP32[$68>>2]|0;
    $75 = (($74) + 36|0);
    $76 = HEAP32[$75>>2]|0;
    __THREW__ = 0;
    $77 = (invoke_ii($76|0,($68|0))|0);
    $78 = __THREW__; __THREW__ = 0;
    $79 = $78&1;
    if ($79) {
     label = 7;
     break L21;
    } else {
     $$0$i$i = $77;
    }
   } else {
    $80 = HEAP8[$70>>0]|0;
    $81 = $80&255;
    $$0$i$i = $81;
   }
   $82 = $$0$i$i&255;
   if ($__case_sensitive) {
    $__c$0 = $82;
   } else {
    $83 = HEAP32[$__ct>>2]|0;
    $84 = (($83) + 12|0);
    $85 = HEAP32[$84>>2]|0;
    __THREW__ = 0;
    $86 = (invoke_iii($85|0,($__ct|0),($82|0))|0);
    $87 = __THREW__; __THREW__ = 0;
    $88 = $87&1;
    if ($88) {
     label = 7;
     break L21;
    } else {
     $__c$0 = $86;
    }
   }
   $$pre = (($__indx$0) + 1)|0;
   if ($22) {
    $__e$sroa$0$0 = $__e$sroa$0$1;$__indx$0 = $$pre;
   } else {
    break;
   }
  }
  L47: do {
   if ($__case_sensitive) {
    $__consume$0$off035$us = 0;$__ky1$036$us = $__kb;$__n_does_match$332$us = $__n_does_match$2$ph;$__n_might_match$331$us = $__n_might_match$2$ph;$__st$133$us = $__status$0;
    while(1) {
     $89 = HEAP8[$__st$133$us>>0]|0;
     $90 = ($89<<24>>24)==(1);
     do {
      if ($90) {
       $91 = HEAP8[$__ky1$036$us>>0]|0;
       $92 = $91 & 1;
       $93 = ($92<<24>>24)==(0);
       if ($93) {
        $96 = (($__ky1$036$us) + 1|0);
        $98 = $96;
       } else {
        $94 = (($__ky1$036$us) + 8|0);
        $95 = HEAP32[$94>>2]|0;
        $98 = $95;
       }
       $97 = (($98) + ($__indx$0)|0);
       $99 = HEAP8[$97>>0]|0;
       $100 = ($__c$0<<24>>24)==($99<<24>>24);
       if (!($100)) {
        HEAP8[$__st$133$us>>0] = 0;
        $101 = (($__n_might_match$331$us) + -1)|0;
        $__consume$1$off0$us = $__consume$0$off035$us;$__n_does_match$4$us = $__n_does_match$332$us;$__n_might_match$4$us = $101;
        break;
       }
       if ($93) {
        $104 = $91&255;
        $105 = $104 >>> 1;
        $107 = $105;
       } else {
        $102 = (($__ky1$036$us) + 4|0);
        $103 = HEAP32[$102>>2]|0;
        $107 = $103;
       }
       $106 = ($107|0)==($$pre|0);
       if ($106) {
        HEAP8[$__st$133$us>>0] = 2;
        $108 = (($__n_might_match$331$us) + -1)|0;
        $109 = (($__n_does_match$332$us) + 1)|0;
        $__consume$1$off0$us = 1;$__n_does_match$4$us = $109;$__n_might_match$4$us = $108;
       } else {
        $__consume$1$off0$us = 1;$__n_does_match$4$us = $__n_does_match$332$us;$__n_might_match$4$us = $__n_might_match$331$us;
       }
      } else {
       $__consume$1$off0$us = $__consume$0$off035$us;$__n_does_match$4$us = $__n_does_match$332$us;$__n_might_match$4$us = $__n_might_match$331$us;
      }
     } while(0);
     $110 = (($__ky1$036$us) + 12|0);
     $111 = ($110|0)==($__ke|0);
     if ($111) {
      $__consume$0$off0$lcssa = $__consume$1$off0$us;$__n_does_match$3$lcssa = $__n_does_match$4$us;$__n_might_match$3$lcssa = $__n_might_match$4$us;
      break L47;
     }
     $112 = (($__st$133$us) + 1|0);
     $__consume$0$off035$us = $__consume$1$off0$us;$__ky1$036$us = $110;$__n_does_match$332$us = $__n_does_match$4$us;$__n_might_match$331$us = $__n_might_match$4$us;$__st$133$us = $112;
    }
   } else {
    $__consume$0$off035 = 0;$__ky1$036 = $__kb;$__n_does_match$332 = $__n_does_match$2$ph;$__n_might_match$331 = $__n_might_match$2$ph;$__st$133 = $__status$0;
    while(1) {
     $113 = HEAP8[$__st$133>>0]|0;
     $114 = ($113<<24>>24)==(1);
     do {
      if ($114) {
       $115 = HEAP8[$__ky1$036>>0]|0;
       $116 = $115 & 1;
       $117 = ($116<<24>>24)==(0);
       if ($117) {
        $120 = (($__ky1$036) + 1|0);
        $122 = $120;
       } else {
        $118 = (($__ky1$036) + 8|0);
        $119 = HEAP32[$118>>2]|0;
        $122 = $119;
       }
       $121 = (($122) + ($__indx$0)|0);
       $123 = HEAP8[$121>>0]|0;
       $124 = HEAP32[$__ct>>2]|0;
       $125 = (($124) + 12|0);
       $126 = HEAP32[$125>>2]|0;
       __THREW__ = 0;
       $127 = (invoke_iii($126|0,($__ct|0),($123|0))|0);
       $128 = __THREW__; __THREW__ = 0;
       $129 = $128&1;
       if ($129) {
        label = 6;
        break L21;
       }
       $130 = ($__c$0<<24>>24)==($127<<24>>24);
       if (!($130)) {
        HEAP8[$__st$133>>0] = 0;
        $142 = (($__n_might_match$331) + -1)|0;
        $__consume$1$off0 = $__consume$0$off035;$__n_does_match$4 = $__n_does_match$332;$__n_might_match$4 = $142;
        break;
       }
       $131 = HEAP8[$__ky1$036>>0]|0;
       $132 = $131 & 1;
       $133 = ($132<<24>>24)==(0);
       if ($133) {
        $136 = $131&255;
        $137 = $136 >>> 1;
        $139 = $137;
       } else {
        $134 = (($__ky1$036) + 4|0);
        $135 = HEAP32[$134>>2]|0;
        $139 = $135;
       }
       $138 = ($139|0)==($$pre|0);
       if ($138) {
        HEAP8[$__st$133>>0] = 2;
        $140 = (($__n_might_match$331) + -1)|0;
        $141 = (($__n_does_match$332) + 1)|0;
        $__consume$1$off0 = 1;$__n_does_match$4 = $141;$__n_might_match$4 = $140;
       } else {
        $__consume$1$off0 = 1;$__n_does_match$4 = $__n_does_match$332;$__n_might_match$4 = $__n_might_match$331;
       }
      } else {
       $__consume$1$off0 = $__consume$0$off035;$__n_does_match$4 = $__n_does_match$332;$__n_might_match$4 = $__n_might_match$331;
      }
     } while(0);
     $143 = (($__ky1$036) + 12|0);
     $144 = ($143|0)==($__ke|0);
     if ($144) {
      $__consume$0$off0$lcssa = $__consume$1$off0;$__n_does_match$3$lcssa = $__n_does_match$4;$__n_might_match$3$lcssa = $__n_might_match$4;
      break L47;
     }
     $145 = (($__st$133) + 1|0);
     $__consume$0$off035 = $__consume$1$off0;$__ky1$036 = $143;$__n_does_match$332 = $__n_does_match$4;$__n_might_match$331 = $__n_might_match$4;$__st$133 = $145;
    }
   }
  } while(0);
  if (!($__consume$0$off0$lcssa)) {
   $__e$sroa$0$0$ph = $__e$sroa$0$1;$__indx$0$ph = $$pre;$__n_does_match$2$ph = $__n_does_match$3$lcssa;$__n_might_match$2$ph = $__n_might_match$3$lcssa;
   continue;
  }
  $146 = HEAP32[$__b>>2]|0;
  $147 = (($146) + 12|0);
  $148 = HEAP32[$147>>2]|0;
  $149 = (($146) + 16|0);
  $150 = HEAP32[$149>>2]|0;
  $151 = ($148|0)==($150|0);
  if ($151) {
   $152 = HEAP32[$146>>2]|0;
   $153 = (($152) + 40|0);
   $154 = HEAP32[$153>>2]|0;
   __THREW__ = 0;
   (invoke_ii($154|0,($146|0))|0);
   $155 = __THREW__; __THREW__ = 0;
   $156 = $155&1;
   if ($156) {
    label = 8;
    break;
   }
  } else {
   $157 = (($148) + 1|0);
   HEAP32[$147>>2] = $157;
  }
  $158 = (($__n_might_match$3$lcssa) + ($__n_does_match$3$lcssa))|0;
  $$not = ($158>>>0)<(2);
  if ($$not) {
   $__e$sroa$0$0$ph = $__e$sroa$0$1;$__indx$0$ph = $$pre;$__n_does_match$2$ph = $__n_does_match$3$lcssa;$__n_might_match$2$ph = $__n_might_match$3$lcssa;
   continue;
  } else {
   $__ky2$047 = $__kb;$__n_does_match$545 = $__n_does_match$3$lcssa;$__st$246 = $__status$0;
  }
  while(1) {
   $159 = HEAP8[$__st$246>>0]|0;
   $160 = ($159<<24>>24)==(2);
   if ($160) {
    $161 = HEAP8[$__ky2$047>>0]|0;
    $162 = $161 & 1;
    $163 = ($162<<24>>24)==(0);
    if ($163) {
     $166 = $161&255;
     $167 = $166 >>> 1;
     $169 = $167;
    } else {
     $164 = (($__ky2$047) + 4|0);
     $165 = HEAP32[$164>>2]|0;
     $169 = $165;
    }
    $168 = ($169|0)==($$pre|0);
    if ($168) {
     $__n_does_match$6 = $__n_does_match$545;
    } else {
     HEAP8[$__st$246>>0] = 0;
     $170 = (($__n_does_match$545) + -1)|0;
     $__n_does_match$6 = $170;
    }
   } else {
    $__n_does_match$6 = $__n_does_match$545;
   }
   $171 = (($__ky2$047) + 12|0);
   $172 = (($__st$246) + 1|0);
   $173 = ($171|0)==($__ke|0);
   if ($173) {
    $__e$sroa$0$0$ph = $__e$sroa$0$1;$__indx$0$ph = $$pre;$__n_does_match$2$ph = $__n_does_match$6;$__n_might_match$2$ph = $__n_might_match$3$lcssa;
    continue L21;
   } else {
    $__ky2$047 = $171;$__n_does_match$545 = $__n_does_match$6;$__st$246 = $172;
   }
  }
 }
 if ((label|0) == 6) {
  $12 = ___cxa_find_matching_catch(-1,-1)|0;
  $13 = tempRet0;
  $lpad$phi$index = $12;$lpad$phi$index8 = $13;
 }
 else if ((label|0) == 7) {
  $14 = ___cxa_find_matching_catch(-1,-1)|0;
  $15 = tempRet0;
  $lpad$phi$index = $14;$lpad$phi$index8 = $15;
 }
 else if ((label|0) == 8) {
  $16 = ___cxa_find_matching_catch(-1,-1)|0;
  $17 = tempRet0;
  $lpad$phi$index = $16;$lpad$phi$index8 = $17;
 }
 else if ((label|0) == 80) {
  $174 = ($68|0)==(0|0);
  do {
   if ($174) {
    $188 = 0;
    label = 86;
   } else {
    $175 = (($68) + 12|0);
    $176 = HEAP32[$175>>2]|0;
    $177 = (($68) + 16|0);
    $178 = HEAP32[$177>>2]|0;
    $179 = ($176|0)==($178|0);
    if ($179) {
     $180 = HEAP32[$68>>2]|0;
     $181 = (($180) + 36|0);
     $182 = HEAP32[$181>>2]|0;
     __THREW__ = 0;
     $183 = (invoke_ii($182|0,($68|0))|0);
     $184 = __THREW__; __THREW__ = 0;
     $185 = $184&1;
     if (!($185)) {
      $186 = ($183|0)==(-1);
      if ($186) {
       HEAP32[$__b>>2] = 0;
       $188 = 0;
       label = 86;
       break;
      } else {
       $$pre$i$i$i12 = HEAP32[$__b>>2]|0;
       $188 = $$pre$i$i$i12;
       label = 86;
       break;
      }
     }
    } else {
     $188 = $68;
     label = 86;
    }
   }
  } while(0);
  L113: do {
   if ((label|0) == 86) {
    $187 = ($188|0)==(0|0);
    do {
     if ($67) {
      label = 91;
     } else {
      $189 = (($$pre$i2$i$i16) + 12|0);
      $190 = HEAP32[$189>>2]|0;
      $191 = (($$pre$i2$i$i16) + 16|0);
      $192 = HEAP32[$191>>2]|0;
      $193 = ($190|0)==($192|0);
      if (!($193)) {
       if ($187) {
        break;
       } else {
        label = 93;
        break;
       }
      }
      $194 = HEAP32[$$pre$i2$i$i16>>2]|0;
      $195 = (($194) + 36|0);
      $196 = HEAP32[$195>>2]|0;
      __THREW__ = 0;
      $197 = (invoke_ii($196|0,($$pre$i2$i$i16|0))|0);
      $198 = __THREW__; __THREW__ = 0;
      $199 = $198&1;
      if ($199) {
       break L113;
      }
      $200 = ($197|0)==(-1);
      if ($200) {
       label = 91;
      } else {
       if (!($187)) {
        label = 93;
       }
      }
     }
    } while(0);
    if ((label|0) == 91) {
     if ($187) {
      label = 93;
     }
    }
    if ((label|0) == 93) {
     $201 = HEAP32[$__err>>2]|0;
     $202 = $201 | 2;
     HEAP32[$__err>>2] = $202;
    }
    L127: do {
     if ($22) {
      label = 98;
     } else {
      $203 = HEAP8[$__status$0>>0]|0;
      $204 = ($203<<24>>24)==(2);
      if ($204) {
       $$024 = $__kb;
      } else {
       $$02680 = $__kb;$__st$32581 = $__status$0;
       while(1) {
        $208 = (($$02680) + 12|0);
        $209 = ($208|0)==($__ke|0);
        $206 = (($__st$32581) + 1|0);
        if ($209) {
         label = 98;
         break L127;
        }
        $205 = HEAP8[$206>>0]|0;
        $207 = ($205<<24>>24)==(2);
        if ($207) {
         $$024 = $208;
         break;
        } else {
         $$02680 = $208;$__st$32581 = $206;
        }
       }
      }
     }
    } while(0);
    if ((label|0) == 98) {
     $210 = HEAP32[$__err>>2]|0;
     $211 = $210 | 4;
     HEAP32[$__err>>2] = $211;
     $$024 = $__ke;
    }
    $212 = ($21|0)==(0|0);
    if ($212) {
     STACKTOP = sp;return ($$024|0);
    }
    _free($21);
    STACKTOP = sp;return ($$024|0);
   }
  } while(0);
  $18 = ___cxa_find_matching_catch(-1,-1)|0;
  $19 = tempRet0;
  $lpad$phi$index = $18;$lpad$phi$index8 = $19;
 }
 $20 = ($21|0)==(0|0);
 if ($20) {
  $$index = $lpad$phi$index;$$index16 = $lpad$phi$index8;
  ___resumeException($$index|0);
  // unreachable;
 }
 _free($21);
 $$index = $lpad$phi$index;$$index16 = $lpad$phi$index8;
 ___resumeException($$index|0);
 // unreachable;
 return 0|0;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRl($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$ = 0, $$$pre$i$i$i4$i = 0, $$0$i$i = 0, $$0$i$i$i = 0, $$pre$i$i$i4$i = 0, $$pre$i2$i$i$i = 0, $$pre$phi32$iZ2D = 0, $$pre$phi34$iZ2D = 0, $$pre31$i = 0, $$pre33$i = 0, $$sroa$06$0 = 0, $$sroa$06$2 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0;
 var $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0;
 var $178 = 0, $179 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0$i = 0, $__a$1$i = 0, $__a$2$i = 0, $__a_end$i = 0, $__atoms$i = 0, $__buf$i = 0, $__dc$i = 0, $__g$i = 0;
 var $__g_end$i = 0, $__grouping$i = 0, $__thousands_sep$i = 0, $lpad$phi$i$index = 0, $lpad$phi$i$index8 = 0, $phitmp$i19$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0;
 $__atoms$i = sp + 198|0;
 $__thousands_sep$i = sp + 196|0;
 $__grouping$i = sp + 184|0;
 $__buf$i = sp + 172|0;
 $__a_end$i = sp + 168|0;
 $__g$i = sp + 8|0;
 $__g_end$i = sp + 4|0;
 $__dc$i = sp;
 $0 = HEAP32[$__b>>2]|0;
 $1 = HEAP32[$__e>>2]|0;
 $2 = (($__iob) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & 74;
 if ((($4|0) == 64)) {
  $$0$i$i = 8;
 } else if ((($4|0) == 8)) {
  $$0$i$i = 16;
 } else if ((($4|0) == 0)) {
  $$0$i$i = 0;
 } else {
  $$0$i$i = 10;
 }
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping$i,$__iob,$__atoms$i,$__thousands_sep$i);
 ;HEAP32[$__buf$i+0>>2]=0|0;HEAP32[$__buf$i+4>>2]=0|0;HEAP32[$__buf$i+8>>2]=0|0;
 __THREW__ = 0;
 invoke_vii(451,($__buf$i|0),10);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 L6: do {
  if ($6) {
   label = 36;
  } else {
   $7 = HEAP8[$__buf$i>>0]|0;
   $8 = $7 & 1;
   $9 = ($8<<24>>24)==(0);
   if ($9) {
    $12 = (($__buf$i) + 1|0);
    $$pre33$i = (($__buf$i) + 8|0);
    $$pre$phi32$iZ2D = $12;$$pre$phi34$iZ2D = $$pre33$i;$13 = $12;
   } else {
    $10 = (($__buf$i) + 8|0);
    $11 = HEAP32[$10>>2]|0;
    $$pre31$i = (($__buf$i) + 1|0);
    $$pre$phi32$iZ2D = $$pre31$i;$$pre$phi34$iZ2D = $10;$13 = $11;
   }
   HEAP32[$__a_end$i>>2] = $13;
   HEAP32[$__g_end$i>>2] = $__g$i;
   HEAP32[$__dc$i>>2] = 0;
   $14 = (($__buf$i) + 4|0);
   $15 = HEAP8[$__thousands_sep$i>>0]|0;
   $$pre$i$i$i4$i = $0;$$sroa$06$0 = $1;$__a$0$i = $13;
   L12: while(1) {
    $16 = ($$pre$i$i$i4$i|0)==(0|0);
    if ($16) {
     $30 = 0;
    } else {
     $17 = (($$pre$i$i$i4$i) + 12|0);
     $18 = HEAP32[$17>>2]|0;
     $19 = (($$pre$i$i$i4$i) + 16|0);
     $20 = HEAP32[$19>>2]|0;
     $21 = ($18|0)==($20|0);
     if ($21) {
      $22 = HEAP32[$$pre$i$i$i4$i>>2]|0;
      $23 = (($22) + 36|0);
      $24 = HEAP32[$23>>2]|0;
      __THREW__ = 0;
      $25 = (invoke_ii($24|0,($$pre$i$i$i4$i|0))|0);
      $26 = __THREW__; __THREW__ = 0;
      $27 = $26&1;
      if ($27) {
       label = 35;
       break;
      }
      $28 = ($25|0)==(-1);
      $$$pre$i$i$i4$i = $28 ? 0 : $$pre$i$i$i4$i;
      $30 = $$$pre$i$i$i4$i;
     } else {
      $30 = $$pre$i$i$i4$i;
     }
    }
    $29 = ($30|0)==(0|0);
    $31 = ($$sroa$06$0|0)==(0|0);
    do {
     if ($31) {
      label = 19;
     } else {
      $32 = (($$sroa$06$0) + 12|0);
      $33 = HEAP32[$32>>2]|0;
      $34 = (($$sroa$06$0) + 16|0);
      $35 = HEAP32[$34>>2]|0;
      $36 = ($33|0)==($35|0);
      if (!($36)) {
       if ($29) {
        $$sroa$06$2 = $$sroa$06$0;
        break;
       } else {
        $$pre$i2$i$i$i = $$sroa$06$0;$__a$2$i = $__a$0$i;
        break L12;
       }
      }
      $37 = HEAP32[$$sroa$06$0>>2]|0;
      $38 = (($37) + 36|0);
      $39 = HEAP32[$38>>2]|0;
      __THREW__ = 0;
      $40 = (invoke_ii($39|0,($$sroa$06$0|0))|0);
      $41 = __THREW__; __THREW__ = 0;
      $42 = $41&1;
      if ($42) {
       label = 35;
       break L12;
      }
      $43 = ($40|0)==(-1);
      if ($43) {
       label = 19;
      } else {
       if ($29) {
        $$sroa$06$2 = $$sroa$06$0;
       } else {
        $$pre$i2$i$i$i = $$sroa$06$0;$__a$2$i = $__a$0$i;
        break L12;
       }
      }
     }
    } while(0);
    if ((label|0) == 19) {
     label = 0;
     if ($29) {
      $$pre$i2$i$i$i = 0;$__a$2$i = $__a$0$i;
      break;
     } else {
      $$sroa$06$2 = 0;
     }
    }
    $44 = HEAP32[$__a_end$i>>2]|0;
    $45 = $44;
    $46 = $__a$0$i;
    $47 = (($45) - ($46))|0;
    $48 = HEAP8[$__buf$i>>0]|0;
    $49 = $48 & 1;
    $50 = ($49<<24>>24)==(0);
    if ($50) {
     $52 = $48&255;
     $53 = $52 >>> 1;
     $55 = $53;
    } else {
     $51 = HEAP32[$14>>2]|0;
     $55 = $51;
    }
    $54 = ($47|0)==($55|0);
    if ($54) {
     if ($50) {
      $57 = $48&255;
      $58 = $57 >>> 1;
      $60 = $58;
     } else {
      $56 = HEAP32[$14>>2]|0;
      $60 = $56;
     }
     $59 = $60 << 1;
     __THREW__ = 0;
     invoke_vii(451,($__buf$i|0),($59|0));
     $61 = __THREW__; __THREW__ = 0;
     $62 = $61&1;
     if ($62) {
      label = 35;
      break;
     }
     $63 = HEAP8[$__buf$i>>0]|0;
     $64 = $63 & 1;
     $65 = ($64<<24>>24)==(0);
     if ($65) {
      $68 = 10;
     } else {
      $66 = HEAP32[$__buf$i>>2]|0;
      $67 = $66 & -2;
      $phitmp$i19$i = (($67) + -1)|0;
      $68 = $phitmp$i19$i;
     }
     __THREW__ = 0;
     invoke_vii(451,($__buf$i|0),($68|0));
     $69 = __THREW__; __THREW__ = 0;
     $70 = $69&1;
     if ($70) {
      label = 35;
      break;
     }
     $71 = HEAP8[$__buf$i>>0]|0;
     $72 = $71 & 1;
     $73 = ($72<<24>>24)==(0);
     if ($73) {
      $76 = $$pre$phi32$iZ2D;
     } else {
      $74 = HEAP32[$$pre$phi34$iZ2D>>2]|0;
      $76 = $74;
     }
     $75 = (($76) + ($60)|0);
     HEAP32[$__a_end$i>>2] = $75;
     $__a$1$i = $76;
    } else {
     $__a$1$i = $__a$0$i;
    }
    $93 = (($30) + 12|0);
    $94 = HEAP32[$93>>2]|0;
    $95 = (($30) + 16|0);
    $96 = HEAP32[$95>>2]|0;
    $97 = ($94|0)==($96|0);
    if ($97) {
     $98 = HEAP32[$30>>2]|0;
     $99 = (($98) + 36|0);
     $100 = HEAP32[$99>>2]|0;
     __THREW__ = 0;
     $101 = (invoke_ii($100|0,($30|0))|0);
     $102 = __THREW__; __THREW__ = 0;
     $103 = $102&1;
     if ($103) {
      label = 35;
      break;
     } else {
      $$0$i$i$i = $101;
     }
    } else {
     $104 = HEAP8[$94>>0]|0;
     $105 = $104&255;
     $$0$i$i$i = $105;
    }
    $106 = $$0$i$i$i&255;
    $107 = (__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($106,$$0$i$i,$__a$1$i,$__a_end$i,$__dc$i,$15,$__grouping$i,$__g$i,$__g_end$i,$__atoms$i)|0);
    $108 = ($107|0)==(0);
    if (!($108)) {
     $$pre$i2$i$i$i = $$sroa$06$2;$__a$2$i = $__a$1$i;
     break;
    }
    $109 = HEAP32[$93>>2]|0;
    $110 = HEAP32[$95>>2]|0;
    $111 = ($109|0)==($110|0);
    if ($111) {
     $112 = HEAP32[$30>>2]|0;
     $113 = (($112) + 40|0);
     $114 = HEAP32[$113>>2]|0;
     __THREW__ = 0;
     (invoke_ii($114|0,($30|0))|0);
     $115 = __THREW__; __THREW__ = 0;
     $116 = $115&1;
     if ($116) {
      label = 35;
      break;
     } else {
      $$pre$i$i$i4$i = $30;$$sroa$06$0 = $$sroa$06$2;$__a$0$i = $__a$1$i;
      continue;
     }
    } else {
     $117 = (($109) + 1|0);
     HEAP32[$93>>2] = $117;
     $$pre$i$i$i4$i = $30;$$sroa$06$0 = $$sroa$06$2;$__a$0$i = $__a$1$i;
     continue;
    }
   }
   if ((label|0) == 35) {
    $77 = ___cxa_find_matching_catch(-1,-1)|0;
    $78 = tempRet0;
    $lpad$phi$i$index = $77;$lpad$phi$i$index8 = $78;
    break;
   }
   $118 = HEAP8[$__grouping$i>>0]|0;
   $119 = $118 & 1;
   $120 = ($119<<24>>24)==(0);
   if ($120) {
    $123 = $118&255;
    $124 = $123 >>> 1;
    $126 = $124;
   } else {
    $121 = (($__grouping$i) + 4|0);
    $122 = HEAP32[$121>>2]|0;
    $126 = $122;
   }
   $125 = ($126|0)==(0);
   if (!($125)) {
    $127 = HEAP32[$__g_end$i>>2]|0;
    $128 = $127;
    $129 = $__g$i;
    $130 = (($128) - ($129))|0;
    $131 = ($130|0)<(160);
    if ($131) {
     $132 = HEAP32[$__dc$i>>2]|0;
     $133 = (($127) + 4|0);
     HEAP32[$__g_end$i>>2] = $133;
     HEAP32[$127>>2] = $132;
    }
   }
   $134 = HEAP32[$__a_end$i>>2]|0;
   __THREW__ = 0;
   $135 = (invoke_iiiii(452,($__a$2$i|0),($134|0),($__err|0),($$0$i$i|0))|0);
   $136 = __THREW__; __THREW__ = 0;
   $137 = $136&1;
   if ($137) {
    label = 36;
   } else {
    HEAP32[$__v>>2] = $135;
    $138 = HEAP32[$__g_end$i>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping$i,$__g$i,$138,$__err);
    if ($29) {
     $152 = 0;
    } else {
     $139 = (($30) + 12|0);
     $140 = HEAP32[$139>>2]|0;
     $141 = (($30) + 16|0);
     $142 = HEAP32[$141>>2]|0;
     $143 = ($140|0)==($142|0);
     if ($143) {
      $144 = HEAP32[$30>>2]|0;
      $145 = (($144) + 36|0);
      $146 = HEAP32[$145>>2]|0;
      __THREW__ = 0;
      $147 = (invoke_ii($146|0,($30|0))|0);
      $148 = __THREW__; __THREW__ = 0;
      $149 = $148&1;
      if ($149) {
       label = 36;
       break;
      }
      $150 = ($147|0)==(-1);
      $$ = $150 ? 0 : $30;
      $152 = $$;
     } else {
      $152 = $30;
     }
    }
    $151 = ($152|0)==(0|0);
    $153 = ($$pre$i2$i$i$i|0)==(0|0);
    do {
     if ($153) {
      label = 67;
     } else {
      $154 = (($$pre$i2$i$i$i) + 12|0);
      $155 = HEAP32[$154>>2]|0;
      $156 = (($$pre$i2$i$i$i) + 16|0);
      $157 = HEAP32[$156>>2]|0;
      $158 = ($155|0)==($157|0);
      if (!($158)) {
       if ($151) {
        break;
       } else {
        label = 69;
        break;
       }
      }
      $159 = HEAP32[$$pre$i2$i$i$i>>2]|0;
      $160 = (($159) + 36|0);
      $161 = HEAP32[$160>>2]|0;
      __THREW__ = 0;
      $162 = (invoke_ii($161|0,($$pre$i2$i$i$i|0))|0);
      $163 = __THREW__; __THREW__ = 0;
      $164 = $163&1;
      if ($164) {
       label = 36;
       break L6;
      }
      $165 = ($162|0)==(-1);
      if ($165) {
       label = 67;
      } else {
       if (!($151)) {
        label = 69;
       }
      }
     }
    } while(0);
    if ((label|0) == 67) {
     if ($151) {
      label = 69;
     }
    }
    if ((label|0) == 69) {
     $166 = HEAP32[$__err>>2]|0;
     $167 = $166 | 2;
     HEAP32[$__err>>2] = $167;
    }
    HEAP32[$agg$result>>2] = $152;
    $168 = HEAP8[$__buf$i>>0]|0;
    $169 = $168 & 1;
    $170 = ($169<<24>>24)==(0);
    if (!($170)) {
     $171 = (($__buf$i) + 8|0);
     $172 = HEAP32[$171>>2]|0;
     $173 = ($172|0)==(0|0);
     if (!($173)) {
      _free($172);
     }
    }
    $174 = HEAP8[$__grouping$i>>0]|0;
    $175 = $174 & 1;
    $176 = ($175<<24>>24)==(0);
    if ($176) {
     STACKTOP = sp;return;
    }
    $177 = (($__grouping$i) + 8|0);
    $178 = HEAP32[$177>>2]|0;
    $179 = ($178|0)==(0|0);
    if ($179) {
     STACKTOP = sp;return;
    }
    _free($178);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 36) {
  $79 = ___cxa_find_matching_catch(-1,-1)|0;
  $80 = tempRet0;
  $lpad$phi$i$index = $79;$lpad$phi$i$index8 = $80;
 }
 $81 = HEAP8[$__buf$i>>0]|0;
 $82 = $81 & 1;
 $83 = ($82<<24>>24)==(0);
 if (!($83)) {
  $84 = (($__buf$i) + 8|0);
  $85 = HEAP32[$84>>2]|0;
  $86 = ($85|0)==(0|0);
  if (!($86)) {
   _free($85);
  }
 }
 $87 = HEAP8[$__grouping$i>>0]|0;
 $88 = $87 & 1;
 $89 = ($88<<24>>24)==(0);
 if ($89) {
  ___resumeException($lpad$phi$i$index|0);
  // unreachable;
 }
 $90 = (($__grouping$i) + 8|0);
 $91 = HEAP32[$90>>2]|0;
 $92 = ($91|0)==(0|0);
 if ($92) {
  ___resumeException($lpad$phi$i$index|0);
  // unreachable;
 }
 _free($91);
 ___resumeException($lpad$phi$i$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRx($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$ = 0, $$$pre$i$i$i4$i = 0, $$0$i$i = 0, $$0$i$i$i = 0, $$pre$i$i$i4$i = 0, $$pre$i2$i$i$i = 0, $$pre$phi32$iZ2D = 0, $$pre$phi34$iZ2D = 0, $$pre31$i = 0, $$pre33$i = 0, $$sroa$06$0 = 0, $$sroa$06$2 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0;
 var $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0;
 var $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0$i = 0, $__a$1$i = 0, $__a$2$i = 0;
 var $__a_end$i = 0, $__atoms$i = 0, $__buf$i = 0, $__dc$i = 0, $__g$i = 0, $__g_end$i = 0, $__grouping$i = 0, $__thousands_sep$i = 0, $lpad$phi$i$index = 0, $lpad$phi$i$index8 = 0, $phitmp$i19$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0;
 $__atoms$i = sp + 198|0;
 $__thousands_sep$i = sp + 196|0;
 $__grouping$i = sp + 184|0;
 $__buf$i = sp + 172|0;
 $__a_end$i = sp + 168|0;
 $__g$i = sp + 8|0;
 $__g_end$i = sp + 4|0;
 $__dc$i = sp;
 $0 = HEAP32[$__b>>2]|0;
 $1 = HEAP32[$__e>>2]|0;
 $2 = (($__iob) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & 74;
 if ((($4|0) == 64)) {
  $$0$i$i = 8;
 } else if ((($4|0) == 8)) {
  $$0$i$i = 16;
 } else if ((($4|0) == 0)) {
  $$0$i$i = 0;
 } else {
  $$0$i$i = 10;
 }
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping$i,$__iob,$__atoms$i,$__thousands_sep$i);
 ;HEAP32[$__buf$i+0>>2]=0|0;HEAP32[$__buf$i+4>>2]=0|0;HEAP32[$__buf$i+8>>2]=0|0;
 __THREW__ = 0;
 invoke_vii(451,($__buf$i|0),10);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 L6: do {
  if ($6) {
   label = 36;
  } else {
   $7 = HEAP8[$__buf$i>>0]|0;
   $8 = $7 & 1;
   $9 = ($8<<24>>24)==(0);
   if ($9) {
    $12 = (($__buf$i) + 1|0);
    $$pre33$i = (($__buf$i) + 8|0);
    $$pre$phi32$iZ2D = $12;$$pre$phi34$iZ2D = $$pre33$i;$13 = $12;
   } else {
    $10 = (($__buf$i) + 8|0);
    $11 = HEAP32[$10>>2]|0;
    $$pre31$i = (($__buf$i) + 1|0);
    $$pre$phi32$iZ2D = $$pre31$i;$$pre$phi34$iZ2D = $10;$13 = $11;
   }
   HEAP32[$__a_end$i>>2] = $13;
   HEAP32[$__g_end$i>>2] = $__g$i;
   HEAP32[$__dc$i>>2] = 0;
   $14 = (($__buf$i) + 4|0);
   $15 = HEAP8[$__thousands_sep$i>>0]|0;
   $$pre$i$i$i4$i = $0;$$sroa$06$0 = $1;$__a$0$i = $13;
   L12: while(1) {
    $16 = ($$pre$i$i$i4$i|0)==(0|0);
    if ($16) {
     $30 = 0;
    } else {
     $17 = (($$pre$i$i$i4$i) + 12|0);
     $18 = HEAP32[$17>>2]|0;
     $19 = (($$pre$i$i$i4$i) + 16|0);
     $20 = HEAP32[$19>>2]|0;
     $21 = ($18|0)==($20|0);
     if ($21) {
      $22 = HEAP32[$$pre$i$i$i4$i>>2]|0;
      $23 = (($22) + 36|0);
      $24 = HEAP32[$23>>2]|0;
      __THREW__ = 0;
      $25 = (invoke_ii($24|0,($$pre$i$i$i4$i|0))|0);
      $26 = __THREW__; __THREW__ = 0;
      $27 = $26&1;
      if ($27) {
       label = 35;
       break;
      }
      $28 = ($25|0)==(-1);
      $$$pre$i$i$i4$i = $28 ? 0 : $$pre$i$i$i4$i;
      $30 = $$$pre$i$i$i4$i;
     } else {
      $30 = $$pre$i$i$i4$i;
     }
    }
    $29 = ($30|0)==(0|0);
    $31 = ($$sroa$06$0|0)==(0|0);
    do {
     if ($31) {
      label = 19;
     } else {
      $32 = (($$sroa$06$0) + 12|0);
      $33 = HEAP32[$32>>2]|0;
      $34 = (($$sroa$06$0) + 16|0);
      $35 = HEAP32[$34>>2]|0;
      $36 = ($33|0)==($35|0);
      if (!($36)) {
       if ($29) {
        $$sroa$06$2 = $$sroa$06$0;
        break;
       } else {
        $$pre$i2$i$i$i = $$sroa$06$0;$__a$2$i = $__a$0$i;
        break L12;
       }
      }
      $37 = HEAP32[$$sroa$06$0>>2]|0;
      $38 = (($37) + 36|0);
      $39 = HEAP32[$38>>2]|0;
      __THREW__ = 0;
      $40 = (invoke_ii($39|0,($$sroa$06$0|0))|0);
      $41 = __THREW__; __THREW__ = 0;
      $42 = $41&1;
      if ($42) {
       label = 35;
       break L12;
      }
      $43 = ($40|0)==(-1);
      if ($43) {
       label = 19;
      } else {
       if ($29) {
        $$sroa$06$2 = $$sroa$06$0;
       } else {
        $$pre$i2$i$i$i = $$sroa$06$0;$__a$2$i = $__a$0$i;
        break L12;
       }
      }
     }
    } while(0);
    if ((label|0) == 19) {
     label = 0;
     if ($29) {
      $$pre$i2$i$i$i = 0;$__a$2$i = $__a$0$i;
      break;
     } else {
      $$sroa$06$2 = 0;
     }
    }
    $44 = HEAP32[$__a_end$i>>2]|0;
    $45 = $44;
    $46 = $__a$0$i;
    $47 = (($45) - ($46))|0;
    $48 = HEAP8[$__buf$i>>0]|0;
    $49 = $48 & 1;
    $50 = ($49<<24>>24)==(0);
    if ($50) {
     $52 = $48&255;
     $53 = $52 >>> 1;
     $55 = $53;
    } else {
     $51 = HEAP32[$14>>2]|0;
     $55 = $51;
    }
    $54 = ($47|0)==($55|0);
    if ($54) {
     if ($50) {
      $57 = $48&255;
      $58 = $57 >>> 1;
      $60 = $58;
     } else {
      $56 = HEAP32[$14>>2]|0;
      $60 = $56;
     }
     $59 = $60 << 1;
     __THREW__ = 0;
     invoke_vii(451,($__buf$i|0),($59|0));
     $61 = __THREW__; __THREW__ = 0;
     $62 = $61&1;
     if ($62) {
      label = 35;
      break;
     }
     $63 = HEAP8[$__buf$i>>0]|0;
     $64 = $63 & 1;
     $65 = ($64<<24>>24)==(0);
     if ($65) {
      $68 = 10;
     } else {
      $66 = HEAP32[$__buf$i>>2]|0;
      $67 = $66 & -2;
      $phitmp$i19$i = (($67) + -1)|0;
      $68 = $phitmp$i19$i;
     }
     __THREW__ = 0;
     invoke_vii(451,($__buf$i|0),($68|0));
     $69 = __THREW__; __THREW__ = 0;
     $70 = $69&1;
     if ($70) {
      label = 35;
      break;
     }
     $71 = HEAP8[$__buf$i>>0]|0;
     $72 = $71 & 1;
     $73 = ($72<<24>>24)==(0);
     if ($73) {
      $76 = $$pre$phi32$iZ2D;
     } else {
      $74 = HEAP32[$$pre$phi34$iZ2D>>2]|0;
      $76 = $74;
     }
     $75 = (($76) + ($60)|0);
     HEAP32[$__a_end$i>>2] = $75;
     $__a$1$i = $76;
    } else {
     $__a$1$i = $__a$0$i;
    }
    $93 = (($30) + 12|0);
    $94 = HEAP32[$93>>2]|0;
    $95 = (($30) + 16|0);
    $96 = HEAP32[$95>>2]|0;
    $97 = ($94|0)==($96|0);
    if ($97) {
     $98 = HEAP32[$30>>2]|0;
     $99 = (($98) + 36|0);
     $100 = HEAP32[$99>>2]|0;
     __THREW__ = 0;
     $101 = (invoke_ii($100|0,($30|0))|0);
     $102 = __THREW__; __THREW__ = 0;
     $103 = $102&1;
     if ($103) {
      label = 35;
      break;
     } else {
      $$0$i$i$i = $101;
     }
    } else {
     $104 = HEAP8[$94>>0]|0;
     $105 = $104&255;
     $$0$i$i$i = $105;
    }
    $106 = $$0$i$i$i&255;
    $107 = (__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($106,$$0$i$i,$__a$1$i,$__a_end$i,$__dc$i,$15,$__grouping$i,$__g$i,$__g_end$i,$__atoms$i)|0);
    $108 = ($107|0)==(0);
    if (!($108)) {
     $$pre$i2$i$i$i = $$sroa$06$2;$__a$2$i = $__a$1$i;
     break;
    }
    $109 = HEAP32[$93>>2]|0;
    $110 = HEAP32[$95>>2]|0;
    $111 = ($109|0)==($110|0);
    if ($111) {
     $112 = HEAP32[$30>>2]|0;
     $113 = (($112) + 40|0);
     $114 = HEAP32[$113>>2]|0;
     __THREW__ = 0;
     (invoke_ii($114|0,($30|0))|0);
     $115 = __THREW__; __THREW__ = 0;
     $116 = $115&1;
     if ($116) {
      label = 35;
      break;
     } else {
      $$pre$i$i$i4$i = $30;$$sroa$06$0 = $$sroa$06$2;$__a$0$i = $__a$1$i;
      continue;
     }
    } else {
     $117 = (($109) + 1|0);
     HEAP32[$93>>2] = $117;
     $$pre$i$i$i4$i = $30;$$sroa$06$0 = $$sroa$06$2;$__a$0$i = $__a$1$i;
     continue;
    }
   }
   if ((label|0) == 35) {
    $77 = ___cxa_find_matching_catch(-1,-1)|0;
    $78 = tempRet0;
    $lpad$phi$i$index = $77;$lpad$phi$i$index8 = $78;
    break;
   }
   $118 = HEAP8[$__grouping$i>>0]|0;
   $119 = $118 & 1;
   $120 = ($119<<24>>24)==(0);
   if ($120) {
    $123 = $118&255;
    $124 = $123 >>> 1;
    $126 = $124;
   } else {
    $121 = (($__grouping$i) + 4|0);
    $122 = HEAP32[$121>>2]|0;
    $126 = $122;
   }
   $125 = ($126|0)==(0);
   if (!($125)) {
    $127 = HEAP32[$__g_end$i>>2]|0;
    $128 = $127;
    $129 = $__g$i;
    $130 = (($128) - ($129))|0;
    $131 = ($130|0)<(160);
    if ($131) {
     $132 = HEAP32[$__dc$i>>2]|0;
     $133 = (($127) + 4|0);
     HEAP32[$__g_end$i>>2] = $133;
     HEAP32[$127>>2] = $132;
    }
   }
   $134 = HEAP32[$__a_end$i>>2]|0;
   __THREW__ = 0;
   $135 = (invoke_iiiii(453,($__a$2$i|0),($134|0),($__err|0),($$0$i$i|0))|0);
   $136 = tempRet0;
   $137 = __THREW__; __THREW__ = 0;
   $138 = $137&1;
   if ($138) {
    label = 36;
   } else {
    $139 = $__v;
    $140 = $139;
    HEAP32[$140>>2] = $135;
    $141 = (($139) + 4)|0;
    $142 = $141;
    HEAP32[$142>>2] = $136;
    $143 = HEAP32[$__g_end$i>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping$i,$__g$i,$143,$__err);
    if ($29) {
     $157 = 0;
    } else {
     $144 = (($30) + 12|0);
     $145 = HEAP32[$144>>2]|0;
     $146 = (($30) + 16|0);
     $147 = HEAP32[$146>>2]|0;
     $148 = ($145|0)==($147|0);
     if ($148) {
      $149 = HEAP32[$30>>2]|0;
      $150 = (($149) + 36|0);
      $151 = HEAP32[$150>>2]|0;
      __THREW__ = 0;
      $152 = (invoke_ii($151|0,($30|0))|0);
      $153 = __THREW__; __THREW__ = 0;
      $154 = $153&1;
      if ($154) {
       label = 36;
       break;
      }
      $155 = ($152|0)==(-1);
      $$ = $155 ? 0 : $30;
      $157 = $$;
     } else {
      $157 = $30;
     }
    }
    $156 = ($157|0)==(0|0);
    $158 = ($$pre$i2$i$i$i|0)==(0|0);
    do {
     if ($158) {
      label = 67;
     } else {
      $159 = (($$pre$i2$i$i$i) + 12|0);
      $160 = HEAP32[$159>>2]|0;
      $161 = (($$pre$i2$i$i$i) + 16|0);
      $162 = HEAP32[$161>>2]|0;
      $163 = ($160|0)==($162|0);
      if (!($163)) {
       if ($156) {
        break;
       } else {
        label = 69;
        break;
       }
      }
      $164 = HEAP32[$$pre$i2$i$i$i>>2]|0;
      $165 = (($164) + 36|0);
      $166 = HEAP32[$165>>2]|0;
      __THREW__ = 0;
      $167 = (invoke_ii($166|0,($$pre$i2$i$i$i|0))|0);
      $168 = __THREW__; __THREW__ = 0;
      $169 = $168&1;
      if ($169) {
       label = 36;
       break L6;
      }
      $170 = ($167|0)==(-1);
      if ($170) {
       label = 67;
      } else {
       if (!($156)) {
        label = 69;
       }
      }
     }
    } while(0);
    if ((label|0) == 67) {
     if ($156) {
      label = 69;
     }
    }
    if ((label|0) == 69) {
     $171 = HEAP32[$__err>>2]|0;
     $172 = $171 | 2;
     HEAP32[$__err>>2] = $172;
    }
    HEAP32[$agg$result>>2] = $157;
    $173 = HEAP8[$__buf$i>>0]|0;
    $174 = $173 & 1;
    $175 = ($174<<24>>24)==(0);
    if (!($175)) {
     $176 = (($__buf$i) + 8|0);
     $177 = HEAP32[$176>>2]|0;
     $178 = ($177|0)==(0|0);
     if (!($178)) {
      _free($177);
     }
    }
    $179 = HEAP8[$__grouping$i>>0]|0;
    $180 = $179 & 1;
    $181 = ($180<<24>>24)==(0);
    if ($181) {
     STACKTOP = sp;return;
    }
    $182 = (($__grouping$i) + 8|0);
    $183 = HEAP32[$182>>2]|0;
    $184 = ($183|0)==(0|0);
    if ($184) {
     STACKTOP = sp;return;
    }
    _free($183);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 36) {
  $79 = ___cxa_find_matching_catch(-1,-1)|0;
  $80 = tempRet0;
  $lpad$phi$i$index = $79;$lpad$phi$i$index8 = $80;
 }
 $81 = HEAP8[$__buf$i>>0]|0;
 $82 = $81 & 1;
 $83 = ($82<<24>>24)==(0);
 if (!($83)) {
  $84 = (($__buf$i) + 8|0);
  $85 = HEAP32[$84>>2]|0;
  $86 = ($85|0)==(0|0);
  if (!($86)) {
   _free($85);
  }
 }
 $87 = HEAP8[$__grouping$i>>0]|0;
 $88 = $87 & 1;
 $89 = ($88<<24>>24)==(0);
 if ($89) {
  ___resumeException($lpad$phi$i$index|0);
  // unreachable;
 }
 $90 = (($__grouping$i) + 8|0);
 $91 = HEAP32[$90>>2]|0;
 $92 = ($91|0)==(0|0);
 if ($92) {
  ___resumeException($lpad$phi$i$index|0);
  // unreachable;
 }
 _free($91);
 ___resumeException($lpad$phi$i$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRt($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$ = 0, $$$pre$i$i$i4$i = 0, $$0$i$i = 0, $$0$i$i$i = 0, $$pre$i$i$i4$i = 0, $$pre$i2$i$i$i = 0, $$pre$phi32$iZ2D = 0, $$pre$phi34$iZ2D = 0, $$pre31$i = 0, $$pre33$i = 0, $$sroa$06$0 = 0, $$sroa$06$2 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0;
 var $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0;
 var $178 = 0, $179 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0$i = 0, $__a$1$i = 0, $__a$2$i = 0, $__a_end$i = 0, $__atoms$i = 0, $__buf$i = 0, $__dc$i = 0, $__g$i = 0;
 var $__g_end$i = 0, $__grouping$i = 0, $__thousands_sep$i = 0, $lpad$phi$i$index = 0, $lpad$phi$i$index8 = 0, $phitmp$i19$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0;
 $__atoms$i = sp + 198|0;
 $__thousands_sep$i = sp + 196|0;
 $__grouping$i = sp + 184|0;
 $__buf$i = sp + 172|0;
 $__a_end$i = sp + 168|0;
 $__g$i = sp + 8|0;
 $__g_end$i = sp + 4|0;
 $__dc$i = sp;
 $0 = HEAP32[$__b>>2]|0;
 $1 = HEAP32[$__e>>2]|0;
 $2 = (($__iob) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & 74;
 if ((($4|0) == 64)) {
  $$0$i$i = 8;
 } else if ((($4|0) == 8)) {
  $$0$i$i = 16;
 } else if ((($4|0) == 0)) {
  $$0$i$i = 0;
 } else {
  $$0$i$i = 10;
 }
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping$i,$__iob,$__atoms$i,$__thousands_sep$i);
 ;HEAP32[$__buf$i+0>>2]=0|0;HEAP32[$__buf$i+4>>2]=0|0;HEAP32[$__buf$i+8>>2]=0|0;
 __THREW__ = 0;
 invoke_vii(451,($__buf$i|0),10);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 L6: do {
  if ($6) {
   label = 36;
  } else {
   $7 = HEAP8[$__buf$i>>0]|0;
   $8 = $7 & 1;
   $9 = ($8<<24>>24)==(0);
   if ($9) {
    $12 = (($__buf$i) + 1|0);
    $$pre33$i = (($__buf$i) + 8|0);
    $$pre$phi32$iZ2D = $12;$$pre$phi34$iZ2D = $$pre33$i;$13 = $12;
   } else {
    $10 = (($__buf$i) + 8|0);
    $11 = HEAP32[$10>>2]|0;
    $$pre31$i = (($__buf$i) + 1|0);
    $$pre$phi32$iZ2D = $$pre31$i;$$pre$phi34$iZ2D = $10;$13 = $11;
   }
   HEAP32[$__a_end$i>>2] = $13;
   HEAP32[$__g_end$i>>2] = $__g$i;
   HEAP32[$__dc$i>>2] = 0;
   $14 = (($__buf$i) + 4|0);
   $15 = HEAP8[$__thousands_sep$i>>0]|0;
   $$pre$i$i$i4$i = $0;$$sroa$06$0 = $1;$__a$0$i = $13;
   L12: while(1) {
    $16 = ($$pre$i$i$i4$i|0)==(0|0);
    if ($16) {
     $30 = 0;
    } else {
     $17 = (($$pre$i$i$i4$i) + 12|0);
     $18 = HEAP32[$17>>2]|0;
     $19 = (($$pre$i$i$i4$i) + 16|0);
     $20 = HEAP32[$19>>2]|0;
     $21 = ($18|0)==($20|0);
     if ($21) {
      $22 = HEAP32[$$pre$i$i$i4$i>>2]|0;
      $23 = (($22) + 36|0);
      $24 = HEAP32[$23>>2]|0;
      __THREW__ = 0;
      $25 = (invoke_ii($24|0,($$pre$i$i$i4$i|0))|0);
      $26 = __THREW__; __THREW__ = 0;
      $27 = $26&1;
      if ($27) {
       label = 35;
       break;
      }
      $28 = ($25|0)==(-1);
      $$$pre$i$i$i4$i = $28 ? 0 : $$pre$i$i$i4$i;
      $30 = $$$pre$i$i$i4$i;
     } else {
      $30 = $$pre$i$i$i4$i;
     }
    }
    $29 = ($30|0)==(0|0);
    $31 = ($$sroa$06$0|0)==(0|0);
    do {
     if ($31) {
      label = 19;
     } else {
      $32 = (($$sroa$06$0) + 12|0);
      $33 = HEAP32[$32>>2]|0;
      $34 = (($$sroa$06$0) + 16|0);
      $35 = HEAP32[$34>>2]|0;
      $36 = ($33|0)==($35|0);
      if (!($36)) {
       if ($29) {
        $$sroa$06$2 = $$sroa$06$0;
        break;
       } else {
        $$pre$i2$i$i$i = $$sroa$06$0;$__a$2$i = $__a$0$i;
        break L12;
       }
      }
      $37 = HEAP32[$$sroa$06$0>>2]|0;
      $38 = (($37) + 36|0);
      $39 = HEAP32[$38>>2]|0;
      __THREW__ = 0;
      $40 = (invoke_ii($39|0,($$sroa$06$0|0))|0);
      $41 = __THREW__; __THREW__ = 0;
      $42 = $41&1;
      if ($42) {
       label = 35;
       break L12;
      }
      $43 = ($40|0)==(-1);
      if ($43) {
       label = 19;
      } else {
       if ($29) {
        $$sroa$06$2 = $$sroa$06$0;
       } else {
        $$pre$i2$i$i$i = $$sroa$06$0;$__a$2$i = $__a$0$i;
        break L12;
       }
      }
     }
    } while(0);
    if ((label|0) == 19) {
     label = 0;
     if ($29) {
      $$pre$i2$i$i$i = 0;$__a$2$i = $__a$0$i;
      break;
     } else {
      $$sroa$06$2 = 0;
     }
    }
    $44 = HEAP32[$__a_end$i>>2]|0;
    $45 = $44;
    $46 = $__a$0$i;
    $47 = (($45) - ($46))|0;
    $48 = HEAP8[$__buf$i>>0]|0;
    $49 = $48 & 1;
    $50 = ($49<<24>>24)==(0);
    if ($50) {
     $52 = $48&255;
     $53 = $52 >>> 1;
     $55 = $53;
    } else {
     $51 = HEAP32[$14>>2]|0;
     $55 = $51;
    }
    $54 = ($47|0)==($55|0);
    if ($54) {
     if ($50) {
      $57 = $48&255;
      $58 = $57 >>> 1;
      $60 = $58;
     } else {
      $56 = HEAP32[$14>>2]|0;
      $60 = $56;
     }
     $59 = $60 << 1;
     __THREW__ = 0;
     invoke_vii(451,($__buf$i|0),($59|0));
     $61 = __THREW__; __THREW__ = 0;
     $62 = $61&1;
     if ($62) {
      label = 35;
      break;
     }
     $63 = HEAP8[$__buf$i>>0]|0;
     $64 = $63 & 1;
     $65 = ($64<<24>>24)==(0);
     if ($65) {
      $68 = 10;
     } else {
      $66 = HEAP32[$__buf$i>>2]|0;
      $67 = $66 & -2;
      $phitmp$i19$i = (($67) + -1)|0;
      $68 = $phitmp$i19$i;
     }
     __THREW__ = 0;
     invoke_vii(451,($__buf$i|0),($68|0));
     $69 = __THREW__; __THREW__ = 0;
     $70 = $69&1;
     if ($70) {
      label = 35;
      break;
     }
     $71 = HEAP8[$__buf$i>>0]|0;
     $72 = $71 & 1;
     $73 = ($72<<24>>24)==(0);
     if ($73) {
      $76 = $$pre$phi32$iZ2D;
     } else {
      $74 = HEAP32[$$pre$phi34$iZ2D>>2]|0;
      $76 = $74;
     }
     $75 = (($76) + ($60)|0);
     HEAP32[$__a_end$i>>2] = $75;
     $__a$1$i = $76;
    } else {
     $__a$1$i = $__a$0$i;
    }
    $93 = (($30) + 12|0);
    $94 = HEAP32[$93>>2]|0;
    $95 = (($30) + 16|0);
    $96 = HEAP32[$95>>2]|0;
    $97 = ($94|0)==($96|0);
    if ($97) {
     $98 = HEAP32[$30>>2]|0;
     $99 = (($98) + 36|0);
     $100 = HEAP32[$99>>2]|0;
     __THREW__ = 0;
     $101 = (invoke_ii($100|0,($30|0))|0);
     $102 = __THREW__; __THREW__ = 0;
     $103 = $102&1;
     if ($103) {
      label = 35;
      break;
     } else {
      $$0$i$i$i = $101;
     }
    } else {
     $104 = HEAP8[$94>>0]|0;
     $105 = $104&255;
     $$0$i$i$i = $105;
    }
    $106 = $$0$i$i$i&255;
    $107 = (__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($106,$$0$i$i,$__a$1$i,$__a_end$i,$__dc$i,$15,$__grouping$i,$__g$i,$__g_end$i,$__atoms$i)|0);
    $108 = ($107|0)==(0);
    if (!($108)) {
     $$pre$i2$i$i$i = $$sroa$06$2;$__a$2$i = $__a$1$i;
     break;
    }
    $109 = HEAP32[$93>>2]|0;
    $110 = HEAP32[$95>>2]|0;
    $111 = ($109|0)==($110|0);
    if ($111) {
     $112 = HEAP32[$30>>2]|0;
     $113 = (($112) + 40|0);
     $114 = HEAP32[$113>>2]|0;
     __THREW__ = 0;
     (invoke_ii($114|0,($30|0))|0);
     $115 = __THREW__; __THREW__ = 0;
     $116 = $115&1;
     if ($116) {
      label = 35;
      break;
     } else {
      $$pre$i$i$i4$i = $30;$$sroa$06$0 = $$sroa$06$2;$__a$0$i = $__a$1$i;
      continue;
     }
    } else {
     $117 = (($109) + 1|0);
     HEAP32[$93>>2] = $117;
     $$pre$i$i$i4$i = $30;$$sroa$06$0 = $$sroa$06$2;$__a$0$i = $__a$1$i;
     continue;
    }
   }
   if ((label|0) == 35) {
    $77 = ___cxa_find_matching_catch(-1,-1)|0;
    $78 = tempRet0;
    $lpad$phi$i$index = $77;$lpad$phi$i$index8 = $78;
    break;
   }
   $118 = HEAP8[$__grouping$i>>0]|0;
   $119 = $118 & 1;
   $120 = ($119<<24>>24)==(0);
   if ($120) {
    $123 = $118&255;
    $124 = $123 >>> 1;
    $126 = $124;
   } else {
    $121 = (($__grouping$i) + 4|0);
    $122 = HEAP32[$121>>2]|0;
    $126 = $122;
   }
   $125 = ($126|0)==(0);
   if (!($125)) {
    $127 = HEAP32[$__g_end$i>>2]|0;
    $128 = $127;
    $129 = $__g$i;
    $130 = (($128) - ($129))|0;
    $131 = ($130|0)<(160);
    if ($131) {
     $132 = HEAP32[$__dc$i>>2]|0;
     $133 = (($127) + 4|0);
     HEAP32[$__g_end$i>>2] = $133;
     HEAP32[$127>>2] = $132;
    }
   }
   $134 = HEAP32[$__a_end$i>>2]|0;
   __THREW__ = 0;
   $135 = (invoke_iiiii(454,($__a$2$i|0),($134|0),($__err|0),($$0$i$i|0))|0);
   $136 = __THREW__; __THREW__ = 0;
   $137 = $136&1;
   if ($137) {
    label = 36;
   } else {
    HEAP16[$__v>>1] = $135;
    $138 = HEAP32[$__g_end$i>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping$i,$__g$i,$138,$__err);
    if ($29) {
     $152 = 0;
    } else {
     $139 = (($30) + 12|0);
     $140 = HEAP32[$139>>2]|0;
     $141 = (($30) + 16|0);
     $142 = HEAP32[$141>>2]|0;
     $143 = ($140|0)==($142|0);
     if ($143) {
      $144 = HEAP32[$30>>2]|0;
      $145 = (($144) + 36|0);
      $146 = HEAP32[$145>>2]|0;
      __THREW__ = 0;
      $147 = (invoke_ii($146|0,($30|0))|0);
      $148 = __THREW__; __THREW__ = 0;
      $149 = $148&1;
      if ($149) {
       label = 36;
       break;
      }
      $150 = ($147|0)==(-1);
      $$ = $150 ? 0 : $30;
      $152 = $$;
     } else {
      $152 = $30;
     }
    }
    $151 = ($152|0)==(0|0);
    $153 = ($$pre$i2$i$i$i|0)==(0|0);
    do {
     if ($153) {
      label = 67;
     } else {
      $154 = (($$pre$i2$i$i$i) + 12|0);
      $155 = HEAP32[$154>>2]|0;
      $156 = (($$pre$i2$i$i$i) + 16|0);
      $157 = HEAP32[$156>>2]|0;
      $158 = ($155|0)==($157|0);
      if (!($158)) {
       if ($151) {
        break;
       } else {
        label = 69;
        break;
       }
      }
      $159 = HEAP32[$$pre$i2$i$i$i>>2]|0;
      $160 = (($159) + 36|0);
      $161 = HEAP32[$160>>2]|0;
      __THREW__ = 0;
      $162 = (invoke_ii($161|0,($$pre$i2$i$i$i|0))|0);
      $163 = __THREW__; __THREW__ = 0;
      $164 = $163&1;
      if ($164) {
       label = 36;
       break L6;
      }
      $165 = ($162|0)==(-1);
      if ($165) {
       label = 67;
      } else {
       if (!($151)) {
        label = 69;
       }
      }
     }
    } while(0);
    if ((label|0) == 67) {
     if ($151) {
      label = 69;
     }
    }
    if ((label|0) == 69) {
     $166 = HEAP32[$__err>>2]|0;
     $167 = $166 | 2;
     HEAP32[$__err>>2] = $167;
    }
    HEAP32[$agg$result>>2] = $152;
    $168 = HEAP8[$__buf$i>>0]|0;
    $169 = $168 & 1;
    $170 = ($169<<24>>24)==(0);
    if (!($170)) {
     $171 = (($__buf$i) + 8|0);
     $172 = HEAP32[$171>>2]|0;
     $173 = ($172|0)==(0|0);
     if (!($173)) {
      _free($172);
     }
    }
    $174 = HEAP8[$__grouping$i>>0]|0;
    $175 = $174 & 1;
    $176 = ($175<<24>>24)==(0);
    if ($176) {
     STACKTOP = sp;return;
    }
    $177 = (($__grouping$i) + 8|0);
    $178 = HEAP32[$177>>2]|0;
    $179 = ($178|0)==(0|0);
    if ($179) {
     STACKTOP = sp;return;
    }
    _free($178);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 36) {
  $79 = ___cxa_find_matching_catch(-1,-1)|0;
  $80 = tempRet0;
  $lpad$phi$i$index = $79;$lpad$phi$i$index8 = $80;
 }
 $81 = HEAP8[$__buf$i>>0]|0;
 $82 = $81 & 1;
 $83 = ($82<<24>>24)==(0);
 if (!($83)) {
  $84 = (($__buf$i) + 8|0);
  $85 = HEAP32[$84>>2]|0;
  $86 = ($85|0)==(0|0);
  if (!($86)) {
   _free($85);
  }
 }
 $87 = HEAP8[$__grouping$i>>0]|0;
 $88 = $87 & 1;
 $89 = ($88<<24>>24)==(0);
 if ($89) {
  ___resumeException($lpad$phi$i$index|0);
  // unreachable;
 }
 $90 = (($__grouping$i) + 8|0);
 $91 = HEAP32[$90>>2]|0;
 $92 = ($91|0)==(0|0);
 if ($92) {
  ___resumeException($lpad$phi$i$index|0);
  // unreachable;
 }
 _free($91);
 ___resumeException($lpad$phi$i$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$ = 0, $$$pre$i$i$i4$i = 0, $$0$i$i = 0, $$0$i$i$i = 0, $$pre$i$i$i4$i = 0, $$pre$i2$i$i$i = 0, $$pre$phi32$iZ2D = 0, $$pre$phi34$iZ2D = 0, $$pre31$i = 0, $$pre33$i = 0, $$sroa$06$0 = 0, $$sroa$06$2 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0;
 var $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0;
 var $178 = 0, $179 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0$i = 0, $__a$1$i = 0, $__a$2$i = 0, $__a_end$i = 0, $__atoms$i = 0, $__buf$i = 0, $__dc$i = 0, $__g$i = 0;
 var $__g_end$i = 0, $__grouping$i = 0, $__thousands_sep$i = 0, $lpad$phi$i$index = 0, $lpad$phi$i$index8 = 0, $phitmp$i19$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0;
 $__atoms$i = sp + 198|0;
 $__thousands_sep$i = sp + 196|0;
 $__grouping$i = sp + 184|0;
 $__buf$i = sp + 172|0;
 $__a_end$i = sp + 168|0;
 $__g$i = sp + 8|0;
 $__g_end$i = sp + 4|0;
 $__dc$i = sp;
 $0 = HEAP32[$__b>>2]|0;
 $1 = HEAP32[$__e>>2]|0;
 $2 = (($__iob) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & 74;
 if ((($4|0) == 64)) {
  $$0$i$i = 8;
 } else if ((($4|0) == 8)) {
  $$0$i$i = 16;
 } else if ((($4|0) == 0)) {
  $$0$i$i = 0;
 } else {
  $$0$i$i = 10;
 }
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping$i,$__iob,$__atoms$i,$__thousands_sep$i);
 ;HEAP32[$__buf$i+0>>2]=0|0;HEAP32[$__buf$i+4>>2]=0|0;HEAP32[$__buf$i+8>>2]=0|0;
 __THREW__ = 0;
 invoke_vii(451,($__buf$i|0),10);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 L6: do {
  if ($6) {
   label = 36;
  } else {
   $7 = HEAP8[$__buf$i>>0]|0;
   $8 = $7 & 1;
   $9 = ($8<<24>>24)==(0);
   if ($9) {
    $12 = (($__buf$i) + 1|0);
    $$pre33$i = (($__buf$i) + 8|0);
    $$pre$phi32$iZ2D = $12;$$pre$phi34$iZ2D = $$pre33$i;$13 = $12;
   } else {
    $10 = (($__buf$i) + 8|0);
    $11 = HEAP32[$10>>2]|0;
    $$pre31$i = (($__buf$i) + 1|0);
    $$pre$phi32$iZ2D = $$pre31$i;$$pre$phi34$iZ2D = $10;$13 = $11;
   }
   HEAP32[$__a_end$i>>2] = $13;
   HEAP32[$__g_end$i>>2] = $__g$i;
   HEAP32[$__dc$i>>2] = 0;
   $14 = (($__buf$i) + 4|0);
   $15 = HEAP8[$__thousands_sep$i>>0]|0;
   $$pre$i$i$i4$i = $0;$$sroa$06$0 = $1;$__a$0$i = $13;
   L12: while(1) {
    $16 = ($$pre$i$i$i4$i|0)==(0|0);
    if ($16) {
     $30 = 0;
    } else {
     $17 = (($$pre$i$i$i4$i) + 12|0);
     $18 = HEAP32[$17>>2]|0;
     $19 = (($$pre$i$i$i4$i) + 16|0);
     $20 = HEAP32[$19>>2]|0;
     $21 = ($18|0)==($20|0);
     if ($21) {
      $22 = HEAP32[$$pre$i$i$i4$i>>2]|0;
      $23 = (($22) + 36|0);
      $24 = HEAP32[$23>>2]|0;
      __THREW__ = 0;
      $25 = (invoke_ii($24|0,($$pre$i$i$i4$i|0))|0);
      $26 = __THREW__; __THREW__ = 0;
      $27 = $26&1;
      if ($27) {
       label = 35;
       break;
      }
      $28 = ($25|0)==(-1);
      $$$pre$i$i$i4$i = $28 ? 0 : $$pre$i$i$i4$i;
      $30 = $$$pre$i$i$i4$i;
     } else {
      $30 = $$pre$i$i$i4$i;
     }
    }
    $29 = ($30|0)==(0|0);
    $31 = ($$sroa$06$0|0)==(0|0);
    do {
     if ($31) {
      label = 19;
     } else {
      $32 = (($$sroa$06$0) + 12|0);
      $33 = HEAP32[$32>>2]|0;
      $34 = (($$sroa$06$0) + 16|0);
      $35 = HEAP32[$34>>2]|0;
      $36 = ($33|0)==($35|0);
      if (!($36)) {
       if ($29) {
        $$sroa$06$2 = $$sroa$06$0;
        break;
       } else {
        $$pre$i2$i$i$i = $$sroa$06$0;$__a$2$i = $__a$0$i;
        break L12;
       }
      }
      $37 = HEAP32[$$sroa$06$0>>2]|0;
      $38 = (($37) + 36|0);
      $39 = HEAP32[$38>>2]|0;
      __THREW__ = 0;
      $40 = (invoke_ii($39|0,($$sroa$06$0|0))|0);
      $41 = __THREW__; __THREW__ = 0;
      $42 = $41&1;
      if ($42) {
       label = 35;
       break L12;
      }
      $43 = ($40|0)==(-1);
      if ($43) {
       label = 19;
      } else {
       if ($29) {
        $$sroa$06$2 = $$sroa$06$0;
       } else {
        $$pre$i2$i$i$i = $$sroa$06$0;$__a$2$i = $__a$0$i;
        break L12;
       }
      }
     }
    } while(0);
    if ((label|0) == 19) {
     label = 0;
     if ($29) {
      $$pre$i2$i$i$i = 0;$__a$2$i = $__a$0$i;
      break;
     } else {
      $$sroa$06$2 = 0;
     }
    }
    $44 = HEAP32[$__a_end$i>>2]|0;
    $45 = $44;
    $46 = $__a$0$i;
    $47 = (($45) - ($46))|0;
    $48 = HEAP8[$__buf$i>>0]|0;
    $49 = $48 & 1;
    $50 = ($49<<24>>24)==(0);
    if ($50) {
     $52 = $48&255;
     $53 = $52 >>> 1;
     $55 = $53;
    } else {
     $51 = HEAP32[$14>>2]|0;
     $55 = $51;
    }
    $54 = ($47|0)==($55|0);
    if ($54) {
     if ($50) {
      $57 = $48&255;
      $58 = $57 >>> 1;
      $60 = $58;
     } else {
      $56 = HEAP32[$14>>2]|0;
      $60 = $56;
     }
     $59 = $60 << 1;
     __THREW__ = 0;
     invoke_vii(451,($__buf$i|0),($59|0));
     $61 = __THREW__; __THREW__ = 0;
     $62 = $61&1;
     if ($62) {
      label = 35;
      break;
     }
     $63 = HEAP8[$__buf$i>>0]|0;
     $64 = $63 & 1;
     $65 = ($64<<24>>24)==(0);
     if ($65) {
      $68 = 10;
     } else {
      $66 = HEAP32[$__buf$i>>2]|0;
      $67 = $66 & -2;
      $phitmp$i19$i = (($67) + -1)|0;
      $68 = $phitmp$i19$i;
     }
     __THREW__ = 0;
     invoke_vii(451,($__buf$i|0),($68|0));
     $69 = __THREW__; __THREW__ = 0;
     $70 = $69&1;
     if ($70) {
      label = 35;
      break;
     }
     $71 = HEAP8[$__buf$i>>0]|0;
     $72 = $71 & 1;
     $73 = ($72<<24>>24)==(0);
     if ($73) {
      $76 = $$pre$phi32$iZ2D;
     } else {
      $74 = HEAP32[$$pre$phi34$iZ2D>>2]|0;
      $76 = $74;
     }
     $75 = (($76) + ($60)|0);
     HEAP32[$__a_end$i>>2] = $75;
     $__a$1$i = $76;
    } else {
     $__a$1$i = $__a$0$i;
    }
    $93 = (($30) + 12|0);
    $94 = HEAP32[$93>>2]|0;
    $95 = (($30) + 16|0);
    $96 = HEAP32[$95>>2]|0;
    $97 = ($94|0)==($96|0);
    if ($97) {
     $98 = HEAP32[$30>>2]|0;
     $99 = (($98) + 36|0);
     $100 = HEAP32[$99>>2]|0;
     __THREW__ = 0;
     $101 = (invoke_ii($100|0,($30|0))|0);
     $102 = __THREW__; __THREW__ = 0;
     $103 = $102&1;
     if ($103) {
      label = 35;
      break;
     } else {
      $$0$i$i$i = $101;
     }
    } else {
     $104 = HEAP8[$94>>0]|0;
     $105 = $104&255;
     $$0$i$i$i = $105;
    }
    $106 = $$0$i$i$i&255;
    $107 = (__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($106,$$0$i$i,$__a$1$i,$__a_end$i,$__dc$i,$15,$__grouping$i,$__g$i,$__g_end$i,$__atoms$i)|0);
    $108 = ($107|0)==(0);
    if (!($108)) {
     $$pre$i2$i$i$i = $$sroa$06$2;$__a$2$i = $__a$1$i;
     break;
    }
    $109 = HEAP32[$93>>2]|0;
    $110 = HEAP32[$95>>2]|0;
    $111 = ($109|0)==($110|0);
    if ($111) {
     $112 = HEAP32[$30>>2]|0;
     $113 = (($112) + 40|0);
     $114 = HEAP32[$113>>2]|0;
     __THREW__ = 0;
     (invoke_ii($114|0,($30|0))|0);
     $115 = __THREW__; __THREW__ = 0;
     $116 = $115&1;
     if ($116) {
      label = 35;
      break;
     } else {
      $$pre$i$i$i4$i = $30;$$sroa$06$0 = $$sroa$06$2;$__a$0$i = $__a$1$i;
      continue;
     }
    } else {
     $117 = (($109) + 1|0);
     HEAP32[$93>>2] = $117;
     $$pre$i$i$i4$i = $30;$$sroa$06$0 = $$sroa$06$2;$__a$0$i = $__a$1$i;
     continue;
    }
   }
   if ((label|0) == 35) {
    $77 = ___cxa_find_matching_catch(-1,-1)|0;
    $78 = tempRet0;
    $lpad$phi$i$index = $77;$lpad$phi$i$index8 = $78;
    break;
   }
   $118 = HEAP8[$__grouping$i>>0]|0;
   $119 = $118 & 1;
   $120 = ($119<<24>>24)==(0);
   if ($120) {
    $123 = $118&255;
    $124 = $123 >>> 1;
    $126 = $124;
   } else {
    $121 = (($__grouping$i) + 4|0);
    $122 = HEAP32[$121>>2]|0;
    $126 = $122;
   }
   $125 = ($126|0)==(0);
   if (!($125)) {
    $127 = HEAP32[$__g_end$i>>2]|0;
    $128 = $127;
    $129 = $__g$i;
    $130 = (($128) - ($129))|0;
    $131 = ($130|0)<(160);
    if ($131) {
     $132 = HEAP32[$__dc$i>>2]|0;
     $133 = (($127) + 4|0);
     HEAP32[$__g_end$i>>2] = $133;
     HEAP32[$127>>2] = $132;
    }
   }
   $134 = HEAP32[$__a_end$i>>2]|0;
   __THREW__ = 0;
   $135 = (invoke_iiiii(455,($__a$2$i|0),($134|0),($__err|0),($$0$i$i|0))|0);
   $136 = __THREW__; __THREW__ = 0;
   $137 = $136&1;
   if ($137) {
    label = 36;
   } else {
    HEAP32[$__v>>2] = $135;
    $138 = HEAP32[$__g_end$i>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping$i,$__g$i,$138,$__err);
    if ($29) {
     $152 = 0;
    } else {
     $139 = (($30) + 12|0);
     $140 = HEAP32[$139>>2]|0;
     $141 = (($30) + 16|0);
     $142 = HEAP32[$141>>2]|0;
     $143 = ($140|0)==($142|0);
     if ($143) {
      $144 = HEAP32[$30>>2]|0;
      $145 = (($144) + 36|0);
      $146 = HEAP32[$145>>2]|0;
      __THREW__ = 0;
      $147 = (invoke_ii($146|0,($30|0))|0);
      $148 = __THREW__; __THREW__ = 0;
      $149 = $148&1;
      if ($149) {
       label = 36;
       break;
      }
      $150 = ($147|0)==(-1);
      $$ = $150 ? 0 : $30;
      $152 = $$;
     } else {
      $152 = $30;
     }
    }
    $151 = ($152|0)==(0|0);
    $153 = ($$pre$i2$i$i$i|0)==(0|0);
    do {
     if ($153) {
      label = 67;
     } else {
      $154 = (($$pre$i2$i$i$i) + 12|0);
      $155 = HEAP32[$154>>2]|0;
      $156 = (($$pre$i2$i$i$i) + 16|0);
      $157 = HEAP32[$156>>2]|0;
      $158 = ($155|0)==($157|0);
      if (!($158)) {
       if ($151) {
        break;
       } else {
        label = 69;
        break;
       }
      }
      $159 = HEAP32[$$pre$i2$i$i$i>>2]|0;
      $160 = (($159) + 36|0);
      $161 = HEAP32[$160>>2]|0;
      __THREW__ = 0;
      $162 = (invoke_ii($161|0,($$pre$i2$i$i$i|0))|0);
      $163 = __THREW__; __THREW__ = 0;
      $164 = $163&1;
      if ($164) {
       label = 36;
       break L6;
      }
      $165 = ($162|0)==(-1);
      if ($165) {
       label = 67;
      } else {
       if (!($151)) {
        label = 69;
       }
      }
     }
    } while(0);
    if ((label|0) == 67) {
     if ($151) {
      label = 69;
     }
    }
    if ((label|0) == 69) {
     $166 = HEAP32[$__err>>2]|0;
     $167 = $166 | 2;
     HEAP32[$__err>>2] = $167;
    }
    HEAP32[$agg$result>>2] = $152;
    $168 = HEAP8[$__buf$i>>0]|0;
    $169 = $168 & 1;
    $170 = ($169<<24>>24)==(0);
    if (!($170)) {
     $171 = (($__buf$i) + 8|0);
     $172 = HEAP32[$171>>2]|0;
     $173 = ($172|0)==(0|0);
     if (!($173)) {
      _free($172);
     }
    }
    $174 = HEAP8[$__grouping$i>>0]|0;
    $175 = $174 & 1;
    $176 = ($175<<24>>24)==(0);
    if ($176) {
     STACKTOP = sp;return;
    }
    $177 = (($__grouping$i) + 8|0);
    $178 = HEAP32[$177>>2]|0;
    $179 = ($178|0)==(0|0);
    if ($179) {
     STACKTOP = sp;return;
    }
    _free($178);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 36) {
  $79 = ___cxa_find_matching_catch(-1,-1)|0;
  $80 = tempRet0;
  $lpad$phi$i$index = $79;$lpad$phi$i$index8 = $80;
 }
 $81 = HEAP8[$__buf$i>>0]|0;
 $82 = $81 & 1;
 $83 = ($82<<24>>24)==(0);
 if (!($83)) {
  $84 = (($__buf$i) + 8|0);
  $85 = HEAP32[$84>>2]|0;
  $86 = ($85|0)==(0|0);
  if (!($86)) {
   _free($85);
  }
 }
 $87 = HEAP8[$__grouping$i>>0]|0;
 $88 = $87 & 1;
 $89 = ($88<<24>>24)==(0);
 if ($89) {
  ___resumeException($lpad$phi$i$index|0);
  // unreachable;
 }
 $90 = (($__grouping$i) + 8|0);
 $91 = HEAP32[$90>>2]|0;
 $92 = ($91|0)==(0|0);
 if ($92) {
  ___resumeException($lpad$phi$i$index|0);
  // unreachable;
 }
 _free($91);
 ___resumeException($lpad$phi$i$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRm($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$ = 0, $$$pre$i$i$i4$i = 0, $$0$i$i = 0, $$0$i$i$i = 0, $$pre$i$i$i4$i = 0, $$pre$i2$i$i$i = 0, $$pre$phi32$iZ2D = 0, $$pre$phi34$iZ2D = 0, $$pre31$i = 0, $$pre33$i = 0, $$sroa$06$0 = 0, $$sroa$06$2 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0;
 var $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0;
 var $178 = 0, $179 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0$i = 0, $__a$1$i = 0, $__a$2$i = 0, $__a_end$i = 0, $__atoms$i = 0, $__buf$i = 0, $__dc$i = 0, $__g$i = 0;
 var $__g_end$i = 0, $__grouping$i = 0, $__thousands_sep$i = 0, $lpad$phi$i$index = 0, $lpad$phi$i$index8 = 0, $phitmp$i19$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0;
 $__atoms$i = sp + 198|0;
 $__thousands_sep$i = sp + 196|0;
 $__grouping$i = sp + 184|0;
 $__buf$i = sp + 172|0;
 $__a_end$i = sp + 168|0;
 $__g$i = sp + 8|0;
 $__g_end$i = sp + 4|0;
 $__dc$i = sp;
 $0 = HEAP32[$__b>>2]|0;
 $1 = HEAP32[$__e>>2]|0;
 $2 = (($__iob) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & 74;
 if ((($4|0) == 64)) {
  $$0$i$i = 8;
 } else if ((($4|0) == 8)) {
  $$0$i$i = 16;
 } else if ((($4|0) == 0)) {
  $$0$i$i = 0;
 } else {
  $$0$i$i = 10;
 }
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping$i,$__iob,$__atoms$i,$__thousands_sep$i);
 ;HEAP32[$__buf$i+0>>2]=0|0;HEAP32[$__buf$i+4>>2]=0|0;HEAP32[$__buf$i+8>>2]=0|0;
 __THREW__ = 0;
 invoke_vii(451,($__buf$i|0),10);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 L6: do {
  if ($6) {
   label = 36;
  } else {
   $7 = HEAP8[$__buf$i>>0]|0;
   $8 = $7 & 1;
   $9 = ($8<<24>>24)==(0);
   if ($9) {
    $12 = (($__buf$i) + 1|0);
    $$pre33$i = (($__buf$i) + 8|0);
    $$pre$phi32$iZ2D = $12;$$pre$phi34$iZ2D = $$pre33$i;$13 = $12;
   } else {
    $10 = (($__buf$i) + 8|0);
    $11 = HEAP32[$10>>2]|0;
    $$pre31$i = (($__buf$i) + 1|0);
    $$pre$phi32$iZ2D = $$pre31$i;$$pre$phi34$iZ2D = $10;$13 = $11;
   }
   HEAP32[$__a_end$i>>2] = $13;
   HEAP32[$__g_end$i>>2] = $__g$i;
   HEAP32[$__dc$i>>2] = 0;
   $14 = (($__buf$i) + 4|0);
   $15 = HEAP8[$__thousands_sep$i>>0]|0;
   $$pre$i$i$i4$i = $0;$$sroa$06$0 = $1;$__a$0$i = $13;
   L12: while(1) {
    $16 = ($$pre$i$i$i4$i|0)==(0|0);
    if ($16) {
     $30 = 0;
    } else {
     $17 = (($$pre$i$i$i4$i) + 12|0);
     $18 = HEAP32[$17>>2]|0;
     $19 = (($$pre$i$i$i4$i) + 16|0);
     $20 = HEAP32[$19>>2]|0;
     $21 = ($18|0)==($20|0);
     if ($21) {
      $22 = HEAP32[$$pre$i$i$i4$i>>2]|0;
      $23 = (($22) + 36|0);
      $24 = HEAP32[$23>>2]|0;
      __THREW__ = 0;
      $25 = (invoke_ii($24|0,($$pre$i$i$i4$i|0))|0);
      $26 = __THREW__; __THREW__ = 0;
      $27 = $26&1;
      if ($27) {
       label = 35;
       break;
      }
      $28 = ($25|0)==(-1);
      $$$pre$i$i$i4$i = $28 ? 0 : $$pre$i$i$i4$i;
      $30 = $$$pre$i$i$i4$i;
     } else {
      $30 = $$pre$i$i$i4$i;
     }
    }
    $29 = ($30|0)==(0|0);
    $31 = ($$sroa$06$0|0)==(0|0);
    do {
     if ($31) {
      label = 19;
     } else {
      $32 = (($$sroa$06$0) + 12|0);
      $33 = HEAP32[$32>>2]|0;
      $34 = (($$sroa$06$0) + 16|0);
      $35 = HEAP32[$34>>2]|0;
      $36 = ($33|0)==($35|0);
      if (!($36)) {
       if ($29) {
        $$sroa$06$2 = $$sroa$06$0;
        break;
       } else {
        $$pre$i2$i$i$i = $$sroa$06$0;$__a$2$i = $__a$0$i;
        break L12;
       }
      }
      $37 = HEAP32[$$sroa$06$0>>2]|0;
      $38 = (($37) + 36|0);
      $39 = HEAP32[$38>>2]|0;
      __THREW__ = 0;
      $40 = (invoke_ii($39|0,($$sroa$06$0|0))|0);
      $41 = __THREW__; __THREW__ = 0;
      $42 = $41&1;
      if ($42) {
       label = 35;
       break L12;
      }
      $43 = ($40|0)==(-1);
      if ($43) {
       label = 19;
      } else {
       if ($29) {
        $$sroa$06$2 = $$sroa$06$0;
       } else {
        $$pre$i2$i$i$i = $$sroa$06$0;$__a$2$i = $__a$0$i;
        break L12;
       }
      }
     }
    } while(0);
    if ((label|0) == 19) {
     label = 0;
     if ($29) {
      $$pre$i2$i$i$i = 0;$__a$2$i = $__a$0$i;
      break;
     } else {
      $$sroa$06$2 = 0;
     }
    }
    $44 = HEAP32[$__a_end$i>>2]|0;
    $45 = $44;
    $46 = $__a$0$i;
    $47 = (($45) - ($46))|0;
    $48 = HEAP8[$__buf$i>>0]|0;
    $49 = $48 & 1;
    $50 = ($49<<24>>24)==(0);
    if ($50) {
     $52 = $48&255;
     $53 = $52 >>> 1;
     $55 = $53;
    } else {
     $51 = HEAP32[$14>>2]|0;
     $55 = $51;
    }
    $54 = ($47|0)==($55|0);
    if ($54) {
     if ($50) {
      $57 = $48&255;
      $58 = $57 >>> 1;
      $60 = $58;
     } else {
      $56 = HEAP32[$14>>2]|0;
      $60 = $56;
     }
     $59 = $60 << 1;
     __THREW__ = 0;
     invoke_vii(451,($__buf$i|0),($59|0));
     $61 = __THREW__; __THREW__ = 0;
     $62 = $61&1;
     if ($62) {
      label = 35;
      break;
     }
     $63 = HEAP8[$__buf$i>>0]|0;
     $64 = $63 & 1;
     $65 = ($64<<24>>24)==(0);
     if ($65) {
      $68 = 10;
     } else {
      $66 = HEAP32[$__buf$i>>2]|0;
      $67 = $66 & -2;
      $phitmp$i19$i = (($67) + -1)|0;
      $68 = $phitmp$i19$i;
     }
     __THREW__ = 0;
     invoke_vii(451,($__buf$i|0),($68|0));
     $69 = __THREW__; __THREW__ = 0;
     $70 = $69&1;
     if ($70) {
      label = 35;
      break;
     }
     $71 = HEAP8[$__buf$i>>0]|0;
     $72 = $71 & 1;
     $73 = ($72<<24>>24)==(0);
     if ($73) {
      $76 = $$pre$phi32$iZ2D;
     } else {
      $74 = HEAP32[$$pre$phi34$iZ2D>>2]|0;
      $76 = $74;
     }
     $75 = (($76) + ($60)|0);
     HEAP32[$__a_end$i>>2] = $75;
     $__a$1$i = $76;
    } else {
     $__a$1$i = $__a$0$i;
    }
    $93 = (($30) + 12|0);
    $94 = HEAP32[$93>>2]|0;
    $95 = (($30) + 16|0);
    $96 = HEAP32[$95>>2]|0;
    $97 = ($94|0)==($96|0);
    if ($97) {
     $98 = HEAP32[$30>>2]|0;
     $99 = (($98) + 36|0);
     $100 = HEAP32[$99>>2]|0;
     __THREW__ = 0;
     $101 = (invoke_ii($100|0,($30|0))|0);
     $102 = __THREW__; __THREW__ = 0;
     $103 = $102&1;
     if ($103) {
      label = 35;
      break;
     } else {
      $$0$i$i$i = $101;
     }
    } else {
     $104 = HEAP8[$94>>0]|0;
     $105 = $104&255;
     $$0$i$i$i = $105;
    }
    $106 = $$0$i$i$i&255;
    $107 = (__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($106,$$0$i$i,$__a$1$i,$__a_end$i,$__dc$i,$15,$__grouping$i,$__g$i,$__g_end$i,$__atoms$i)|0);
    $108 = ($107|0)==(0);
    if (!($108)) {
     $$pre$i2$i$i$i = $$sroa$06$2;$__a$2$i = $__a$1$i;
     break;
    }
    $109 = HEAP32[$93>>2]|0;
    $110 = HEAP32[$95>>2]|0;
    $111 = ($109|0)==($110|0);
    if ($111) {
     $112 = HEAP32[$30>>2]|0;
     $113 = (($112) + 40|0);
     $114 = HEAP32[$113>>2]|0;
     __THREW__ = 0;
     (invoke_ii($114|0,($30|0))|0);
     $115 = __THREW__; __THREW__ = 0;
     $116 = $115&1;
     if ($116) {
      label = 35;
      break;
     } else {
      $$pre$i$i$i4$i = $30;$$sroa$06$0 = $$sroa$06$2;$__a$0$i = $__a$1$i;
      continue;
     }
    } else {
     $117 = (($109) + 1|0);
     HEAP32[$93>>2] = $117;
     $$pre$i$i$i4$i = $30;$$sroa$06$0 = $$sroa$06$2;$__a$0$i = $__a$1$i;
     continue;
    }
   }
   if ((label|0) == 35) {
    $77 = ___cxa_find_matching_catch(-1,-1)|0;
    $78 = tempRet0;
    $lpad$phi$i$index = $77;$lpad$phi$i$index8 = $78;
    break;
   }
   $118 = HEAP8[$__grouping$i>>0]|0;
   $119 = $118 & 1;
   $120 = ($119<<24>>24)==(0);
   if ($120) {
    $123 = $118&255;
    $124 = $123 >>> 1;
    $126 = $124;
   } else {
    $121 = (($__grouping$i) + 4|0);
    $122 = HEAP32[$121>>2]|0;
    $126 = $122;
   }
   $125 = ($126|0)==(0);
   if (!($125)) {
    $127 = HEAP32[$__g_end$i>>2]|0;
    $128 = $127;
    $129 = $__g$i;
    $130 = (($128) - ($129))|0;
    $131 = ($130|0)<(160);
    if ($131) {
     $132 = HEAP32[$__dc$i>>2]|0;
     $133 = (($127) + 4|0);
     HEAP32[$__g_end$i>>2] = $133;
     HEAP32[$127>>2] = $132;
    }
   }
   $134 = HEAP32[$__a_end$i>>2]|0;
   __THREW__ = 0;
   $135 = (invoke_iiiii(456,($__a$2$i|0),($134|0),($__err|0),($$0$i$i|0))|0);
   $136 = __THREW__; __THREW__ = 0;
   $137 = $136&1;
   if ($137) {
    label = 36;
   } else {
    HEAP32[$__v>>2] = $135;
    $138 = HEAP32[$__g_end$i>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping$i,$__g$i,$138,$__err);
    if ($29) {
     $152 = 0;
    } else {
     $139 = (($30) + 12|0);
     $140 = HEAP32[$139>>2]|0;
     $141 = (($30) + 16|0);
     $142 = HEAP32[$141>>2]|0;
     $143 = ($140|0)==($142|0);
     if ($143) {
      $144 = HEAP32[$30>>2]|0;
      $145 = (($144) + 36|0);
      $146 = HEAP32[$145>>2]|0;
      __THREW__ = 0;
      $147 = (invoke_ii($146|0,($30|0))|0);
      $148 = __THREW__; __THREW__ = 0;
      $149 = $148&1;
      if ($149) {
       label = 36;
       break;
      }
      $150 = ($147|0)==(-1);
      $$ = $150 ? 0 : $30;
      $152 = $$;
     } else {
      $152 = $30;
     }
    }
    $151 = ($152|0)==(0|0);
    $153 = ($$pre$i2$i$i$i|0)==(0|0);
    do {
     if ($153) {
      label = 67;
     } else {
      $154 = (($$pre$i2$i$i$i) + 12|0);
      $155 = HEAP32[$154>>2]|0;
      $156 = (($$pre$i2$i$i$i) + 16|0);
      $157 = HEAP32[$156>>2]|0;
      $158 = ($155|0)==($157|0);
      if (!($158)) {
       if ($151) {
        break;
       } else {
        label = 69;
        break;
       }
      }
      $159 = HEAP32[$$pre$i2$i$i$i>>2]|0;
      $160 = (($159) + 36|0);
      $161 = HEAP32[$160>>2]|0;
      __THREW__ = 0;
      $162 = (invoke_ii($161|0,($$pre$i2$i$i$i|0))|0);
      $163 = __THREW__; __THREW__ = 0;
      $164 = $163&1;
      if ($164) {
       label = 36;
       break L6;
      }
      $165 = ($162|0)==(-1);
      if ($165) {
       label = 67;
      } else {
       if (!($151)) {
        label = 69;
       }
      }
     }
    } while(0);
    if ((label|0) == 67) {
     if ($151) {
      label = 69;
     }
    }
    if ((label|0) == 69) {
     $166 = HEAP32[$__err>>2]|0;
     $167 = $166 | 2;
     HEAP32[$__err>>2] = $167;
    }
    HEAP32[$agg$result>>2] = $152;
    $168 = HEAP8[$__buf$i>>0]|0;
    $169 = $168 & 1;
    $170 = ($169<<24>>24)==(0);
    if (!($170)) {
     $171 = (($__buf$i) + 8|0);
     $172 = HEAP32[$171>>2]|0;
     $173 = ($172|0)==(0|0);
     if (!($173)) {
      _free($172);
     }
    }
    $174 = HEAP8[$__grouping$i>>0]|0;
    $175 = $174 & 1;
    $176 = ($175<<24>>24)==(0);
    if ($176) {
     STACKTOP = sp;return;
    }
    $177 = (($__grouping$i) + 8|0);
    $178 = HEAP32[$177>>2]|0;
    $179 = ($178|0)==(0|0);
    if ($179) {
     STACKTOP = sp;return;
    }
    _free($178);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 36) {
  $79 = ___cxa_find_matching_catch(-1,-1)|0;
  $80 = tempRet0;
  $lpad$phi$i$index = $79;$lpad$phi$i$index8 = $80;
 }
 $81 = HEAP8[$__buf$i>>0]|0;
 $82 = $81 & 1;
 $83 = ($82<<24>>24)==(0);
 if (!($83)) {
  $84 = (($__buf$i) + 8|0);
  $85 = HEAP32[$84>>2]|0;
  $86 = ($85|0)==(0|0);
  if (!($86)) {
   _free($85);
  }
 }
 $87 = HEAP8[$__grouping$i>>0]|0;
 $88 = $87 & 1;
 $89 = ($88<<24>>24)==(0);
 if ($89) {
  ___resumeException($lpad$phi$i$index|0);
  // unreachable;
 }
 $90 = (($__grouping$i) + 8|0);
 $91 = HEAP32[$90>>2]|0;
 $92 = ($91|0)==(0|0);
 if ($92) {
  ___resumeException($lpad$phi$i$index|0);
  // unreachable;
 }
 _free($91);
 ___resumeException($lpad$phi$i$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRy($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$ = 0, $$$pre$i$i$i4$i = 0, $$0$i$i = 0, $$0$i$i$i = 0, $$pre$i$i$i4$i = 0, $$pre$i2$i$i$i = 0, $$pre$phi32$iZ2D = 0, $$pre$phi34$iZ2D = 0, $$pre31$i = 0, $$pre33$i = 0, $$sroa$06$0 = 0, $$sroa$06$2 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0;
 var $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0;
 var $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0$i = 0, $__a$1$i = 0, $__a$2$i = 0;
 var $__a_end$i = 0, $__atoms$i = 0, $__buf$i = 0, $__dc$i = 0, $__g$i = 0, $__g_end$i = 0, $__grouping$i = 0, $__thousands_sep$i = 0, $lpad$phi$i$index = 0, $lpad$phi$i$index8 = 0, $phitmp$i19$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0;
 $__atoms$i = sp + 198|0;
 $__thousands_sep$i = sp + 196|0;
 $__grouping$i = sp + 184|0;
 $__buf$i = sp + 172|0;
 $__a_end$i = sp + 168|0;
 $__g$i = sp + 8|0;
 $__g_end$i = sp + 4|0;
 $__dc$i = sp;
 $0 = HEAP32[$__b>>2]|0;
 $1 = HEAP32[$__e>>2]|0;
 $2 = (($__iob) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & 74;
 if ((($4|0) == 64)) {
  $$0$i$i = 8;
 } else if ((($4|0) == 8)) {
  $$0$i$i = 16;
 } else if ((($4|0) == 0)) {
  $$0$i$i = 0;
 } else {
  $$0$i$i = 10;
 }
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping$i,$__iob,$__atoms$i,$__thousands_sep$i);
 ;HEAP32[$__buf$i+0>>2]=0|0;HEAP32[$__buf$i+4>>2]=0|0;HEAP32[$__buf$i+8>>2]=0|0;
 __THREW__ = 0;
 invoke_vii(451,($__buf$i|0),10);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 L6: do {
  if ($6) {
   label = 36;
  } else {
   $7 = HEAP8[$__buf$i>>0]|0;
   $8 = $7 & 1;
   $9 = ($8<<24>>24)==(0);
   if ($9) {
    $12 = (($__buf$i) + 1|0);
    $$pre33$i = (($__buf$i) + 8|0);
    $$pre$phi32$iZ2D = $12;$$pre$phi34$iZ2D = $$pre33$i;$13 = $12;
   } else {
    $10 = (($__buf$i) + 8|0);
    $11 = HEAP32[$10>>2]|0;
    $$pre31$i = (($__buf$i) + 1|0);
    $$pre$phi32$iZ2D = $$pre31$i;$$pre$phi34$iZ2D = $10;$13 = $11;
   }
   HEAP32[$__a_end$i>>2] = $13;
   HEAP32[$__g_end$i>>2] = $__g$i;
   HEAP32[$__dc$i>>2] = 0;
   $14 = (($__buf$i) + 4|0);
   $15 = HEAP8[$__thousands_sep$i>>0]|0;
   $$pre$i$i$i4$i = $0;$$sroa$06$0 = $1;$__a$0$i = $13;
   L12: while(1) {
    $16 = ($$pre$i$i$i4$i|0)==(0|0);
    if ($16) {
     $30 = 0;
    } else {
     $17 = (($$pre$i$i$i4$i) + 12|0);
     $18 = HEAP32[$17>>2]|0;
     $19 = (($$pre$i$i$i4$i) + 16|0);
     $20 = HEAP32[$19>>2]|0;
     $21 = ($18|0)==($20|0);
     if ($21) {
      $22 = HEAP32[$$pre$i$i$i4$i>>2]|0;
      $23 = (($22) + 36|0);
      $24 = HEAP32[$23>>2]|0;
      __THREW__ = 0;
      $25 = (invoke_ii($24|0,($$pre$i$i$i4$i|0))|0);
      $26 = __THREW__; __THREW__ = 0;
      $27 = $26&1;
      if ($27) {
       label = 35;
       break;
      }
      $28 = ($25|0)==(-1);
      $$$pre$i$i$i4$i = $28 ? 0 : $$pre$i$i$i4$i;
      $30 = $$$pre$i$i$i4$i;
     } else {
      $30 = $$pre$i$i$i4$i;
     }
    }
    $29 = ($30|0)==(0|0);
    $31 = ($$sroa$06$0|0)==(0|0);
    do {
     if ($31) {
      label = 19;
     } else {
      $32 = (($$sroa$06$0) + 12|0);
      $33 = HEAP32[$32>>2]|0;
      $34 = (($$sroa$06$0) + 16|0);
      $35 = HEAP32[$34>>2]|0;
      $36 = ($33|0)==($35|0);
      if (!($36)) {
       if ($29) {
        $$sroa$06$2 = $$sroa$06$0;
        break;
       } else {
        $$pre$i2$i$i$i = $$sroa$06$0;$__a$2$i = $__a$0$i;
        break L12;
       }
      }
      $37 = HEAP32[$$sroa$06$0>>2]|0;
      $38 = (($37) + 36|0);
      $39 = HEAP32[$38>>2]|0;
      __THREW__ = 0;
      $40 = (invoke_ii($39|0,($$sroa$06$0|0))|0);
      $41 = __THREW__; __THREW__ = 0;
      $42 = $41&1;
      if ($42) {
       label = 35;
       break L12;
      }
      $43 = ($40|0)==(-1);
      if ($43) {
       label = 19;
      } else {
       if ($29) {
        $$sroa$06$2 = $$sroa$06$0;
       } else {
        $$pre$i2$i$i$i = $$sroa$06$0;$__a$2$i = $__a$0$i;
        break L12;
       }
      }
     }
    } while(0);
    if ((label|0) == 19) {
     label = 0;
     if ($29) {
      $$pre$i2$i$i$i = 0;$__a$2$i = $__a$0$i;
      break;
     } else {
      $$sroa$06$2 = 0;
     }
    }
    $44 = HEAP32[$__a_end$i>>2]|0;
    $45 = $44;
    $46 = $__a$0$i;
    $47 = (($45) - ($46))|0;
    $48 = HEAP8[$__buf$i>>0]|0;
    $49 = $48 & 1;
    $50 = ($49<<24>>24)==(0);
    if ($50) {
     $52 = $48&255;
     $53 = $52 >>> 1;
     $55 = $53;
    } else {
     $51 = HEAP32[$14>>2]|0;
     $55 = $51;
    }
    $54 = ($47|0)==($55|0);
    if ($54) {
     if ($50) {
      $57 = $48&255;
      $58 = $57 >>> 1;
      $60 = $58;
     } else {
      $56 = HEAP32[$14>>2]|0;
      $60 = $56;
     }
     $59 = $60 << 1;
     __THREW__ = 0;
     invoke_vii(451,($__buf$i|0),($59|0));
     $61 = __THREW__; __THREW__ = 0;
     $62 = $61&1;
     if ($62) {
      label = 35;
      break;
     }
     $63 = HEAP8[$__buf$i>>0]|0;
     $64 = $63 & 1;
     $65 = ($64<<24>>24)==(0);
     if ($65) {
      $68 = 10;
     } else {
      $66 = HEAP32[$__buf$i>>2]|0;
      $67 = $66 & -2;
      $phitmp$i19$i = (($67) + -1)|0;
      $68 = $phitmp$i19$i;
     }
     __THREW__ = 0;
     invoke_vii(451,($__buf$i|0),($68|0));
     $69 = __THREW__; __THREW__ = 0;
     $70 = $69&1;
     if ($70) {
      label = 35;
      break;
     }
     $71 = HEAP8[$__buf$i>>0]|0;
     $72 = $71 & 1;
     $73 = ($72<<24>>24)==(0);
     if ($73) {
      $76 = $$pre$phi32$iZ2D;
     } else {
      $74 = HEAP32[$$pre$phi34$iZ2D>>2]|0;
      $76 = $74;
     }
     $75 = (($76) + ($60)|0);
     HEAP32[$__a_end$i>>2] = $75;
     $__a$1$i = $76;
    } else {
     $__a$1$i = $__a$0$i;
    }
    $93 = (($30) + 12|0);
    $94 = HEAP32[$93>>2]|0;
    $95 = (($30) + 16|0);
    $96 = HEAP32[$95>>2]|0;
    $97 = ($94|0)==($96|0);
    if ($97) {
     $98 = HEAP32[$30>>2]|0;
     $99 = (($98) + 36|0);
     $100 = HEAP32[$99>>2]|0;
     __THREW__ = 0;
     $101 = (invoke_ii($100|0,($30|0))|0);
     $102 = __THREW__; __THREW__ = 0;
     $103 = $102&1;
     if ($103) {
      label = 35;
      break;
     } else {
      $$0$i$i$i = $101;
     }
    } else {
     $104 = HEAP8[$94>>0]|0;
     $105 = $104&255;
     $$0$i$i$i = $105;
    }
    $106 = $$0$i$i$i&255;
    $107 = (__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($106,$$0$i$i,$__a$1$i,$__a_end$i,$__dc$i,$15,$__grouping$i,$__g$i,$__g_end$i,$__atoms$i)|0);
    $108 = ($107|0)==(0);
    if (!($108)) {
     $$pre$i2$i$i$i = $$sroa$06$2;$__a$2$i = $__a$1$i;
     break;
    }
    $109 = HEAP32[$93>>2]|0;
    $110 = HEAP32[$95>>2]|0;
    $111 = ($109|0)==($110|0);
    if ($111) {
     $112 = HEAP32[$30>>2]|0;
     $113 = (($112) + 40|0);
     $114 = HEAP32[$113>>2]|0;
     __THREW__ = 0;
     (invoke_ii($114|0,($30|0))|0);
     $115 = __THREW__; __THREW__ = 0;
     $116 = $115&1;
     if ($116) {
      label = 35;
      break;
     } else {
      $$pre$i$i$i4$i = $30;$$sroa$06$0 = $$sroa$06$2;$__a$0$i = $__a$1$i;
      continue;
     }
    } else {
     $117 = (($109) + 1|0);
     HEAP32[$93>>2] = $117;
     $$pre$i$i$i4$i = $30;$$sroa$06$0 = $$sroa$06$2;$__a$0$i = $__a$1$i;
     continue;
    }
   }
   if ((label|0) == 35) {
    $77 = ___cxa_find_matching_catch(-1,-1)|0;
    $78 = tempRet0;
    $lpad$phi$i$index = $77;$lpad$phi$i$index8 = $78;
    break;
   }
   $118 = HEAP8[$__grouping$i>>0]|0;
   $119 = $118 & 1;
   $120 = ($119<<24>>24)==(0);
   if ($120) {
    $123 = $118&255;
    $124 = $123 >>> 1;
    $126 = $124;
   } else {
    $121 = (($__grouping$i) + 4|0);
    $122 = HEAP32[$121>>2]|0;
    $126 = $122;
   }
   $125 = ($126|0)==(0);
   if (!($125)) {
    $127 = HEAP32[$__g_end$i>>2]|0;
    $128 = $127;
    $129 = $__g$i;
    $130 = (($128) - ($129))|0;
    $131 = ($130|0)<(160);
    if ($131) {
     $132 = HEAP32[$__dc$i>>2]|0;
     $133 = (($127) + 4|0);
     HEAP32[$__g_end$i>>2] = $133;
     HEAP32[$127>>2] = $132;
    }
   }
   $134 = HEAP32[$__a_end$i>>2]|0;
   __THREW__ = 0;
   $135 = (invoke_iiiii(457,($__a$2$i|0),($134|0),($__err|0),($$0$i$i|0))|0);
   $136 = tempRet0;
   $137 = __THREW__; __THREW__ = 0;
   $138 = $137&1;
   if ($138) {
    label = 36;
   } else {
    $139 = $__v;
    $140 = $139;
    HEAP32[$140>>2] = $135;
    $141 = (($139) + 4)|0;
    $142 = $141;
    HEAP32[$142>>2] = $136;
    $143 = HEAP32[$__g_end$i>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping$i,$__g$i,$143,$__err);
    if ($29) {
     $157 = 0;
    } else {
     $144 = (($30) + 12|0);
     $145 = HEAP32[$144>>2]|0;
     $146 = (($30) + 16|0);
     $147 = HEAP32[$146>>2]|0;
     $148 = ($145|0)==($147|0);
     if ($148) {
      $149 = HEAP32[$30>>2]|0;
      $150 = (($149) + 36|0);
      $151 = HEAP32[$150>>2]|0;
      __THREW__ = 0;
      $152 = (invoke_ii($151|0,($30|0))|0);
      $153 = __THREW__; __THREW__ = 0;
      $154 = $153&1;
      if ($154) {
       label = 36;
       break;
      }
      $155 = ($152|0)==(-1);
      $$ = $155 ? 0 : $30;
      $157 = $$;
     } else {
      $157 = $30;
     }
    }
    $156 = ($157|0)==(0|0);
    $158 = ($$pre$i2$i$i$i|0)==(0|0);
    do {
     if ($158) {
      label = 67;
     } else {
      $159 = (($$pre$i2$i$i$i) + 12|0);
      $160 = HEAP32[$159>>2]|0;
      $161 = (($$pre$i2$i$i$i) + 16|0);
      $162 = HEAP32[$161>>2]|0;
      $163 = ($160|0)==($162|0);
      if (!($163)) {
       if ($156) {
        break;
       } else {
        label = 69;
        break;
       }
      }
      $164 = HEAP32[$$pre$i2$i$i$i>>2]|0;
      $165 = (($164) + 36|0);
      $166 = HEAP32[$165>>2]|0;
      __THREW__ = 0;
      $167 = (invoke_ii($166|0,($$pre$i2$i$i$i|0))|0);
      $168 = __THREW__; __THREW__ = 0;
      $169 = $168&1;
      if ($169) {
       label = 36;
       break L6;
      }
      $170 = ($167|0)==(-1);
      if ($170) {
       label = 67;
      } else {
       if (!($156)) {
        label = 69;
       }
      }
     }
    } while(0);
    if ((label|0) == 67) {
     if ($156) {
      label = 69;
     }
    }
    if ((label|0) == 69) {
     $171 = HEAP32[$__err>>2]|0;
     $172 = $171 | 2;
     HEAP32[$__err>>2] = $172;
    }
    HEAP32[$agg$result>>2] = $157;
    $173 = HEAP8[$__buf$i>>0]|0;
    $174 = $173 & 1;
    $175 = ($174<<24>>24)==(0);
    if (!($175)) {
     $176 = (($__buf$i) + 8|0);
     $177 = HEAP32[$176>>2]|0;
     $178 = ($177|0)==(0|0);
     if (!($178)) {
      _free($177);
     }
    }
    $179 = HEAP8[$__grouping$i>>0]|0;
    $180 = $179 & 1;
    $181 = ($180<<24>>24)==(0);
    if ($181) {
     STACKTOP = sp;return;
    }
    $182 = (($__grouping$i) + 8|0);
    $183 = HEAP32[$182>>2]|0;
    $184 = ($183|0)==(0|0);
    if ($184) {
     STACKTOP = sp;return;
    }
    _free($183);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 36) {
  $79 = ___cxa_find_matching_catch(-1,-1)|0;
  $80 = tempRet0;
  $lpad$phi$i$index = $79;$lpad$phi$i$index8 = $80;
 }
 $81 = HEAP8[$__buf$i>>0]|0;
 $82 = $81 & 1;
 $83 = ($82<<24>>24)==(0);
 if (!($83)) {
  $84 = (($__buf$i) + 8|0);
  $85 = HEAP32[$84>>2]|0;
  $86 = ($85|0)==(0|0);
  if (!($86)) {
   _free($85);
  }
 }
 $87 = HEAP8[$__grouping$i>>0]|0;
 $88 = $87 & 1;
 $89 = ($88<<24>>24)==(0);
 if ($89) {
  ___resumeException($lpad$phi$i$index|0);
  // unreachable;
 }
 $90 = (($__grouping$i) + 8|0);
 $91 = HEAP32[$90>>2]|0;
 $92 = ($91|0)==(0|0);
 if ($92) {
  ___resumeException($lpad$phi$i$index|0);
  // unreachable;
 }
 _free($91);
 ___resumeException($lpad$phi$i$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRf($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$ = 0, $$$pre$i$i$i4$i = 0, $$0$i$i$i = 0, $$pre$i$i$i4$i = 0, $$pre$i2$i$i$i = 0, $$pre$phi33$iZ2D = 0, $$pre$phi35$iZ2D = 0, $$pre32$i = 0, $$pre34$i = 0, $$sroa$06$0 = 0, $$sroa$06$2 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0.0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0;
 var $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0;
 var $179 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0$i = 0, $__a$1$i = 0, $__a$2$i = 0, $__a_end$i = 0, $__atoms$i = 0, $__buf$i = 0, $__dc$i = 0, $__decimal_point$i = 0, $__exp$i = 0;
 var $__g$i = 0, $__g_end$i = 0, $__grouping$i = 0, $__in_units$i = 0, $__thousands_sep$i = 0, $lpad$phi$i$index = 0, $lpad$phi$i$index9 = 0, $phitmp$i19$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0;
 $__atoms$i = sp + 200|0;
 $__decimal_point$i = sp + 199|0;
 $__thousands_sep$i = sp + 198|0;
 $__grouping$i = sp + 184|0;
 $__buf$i = sp + 172|0;
 $__a_end$i = sp + 168|0;
 $__g$i = sp + 8|0;
 $__g_end$i = sp + 4|0;
 $__dc$i = sp;
 $__in_units$i = sp + 197|0;
 $__exp$i = sp + 196|0;
 $0 = HEAP32[$__b>>2]|0;
 $1 = HEAP32[$__e>>2]|0;
 __ZNSt3__19__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($__grouping$i,$__iob,$__atoms$i,$__decimal_point$i,$__thousands_sep$i);
 ;HEAP32[$__buf$i+0>>2]=0|0;HEAP32[$__buf$i+4>>2]=0|0;HEAP32[$__buf$i+8>>2]=0|0;
 __THREW__ = 0;
 invoke_vii(451,($__buf$i|0),10);
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 L1: do {
  if ($3) {
   label = 32;
  } else {
   $4 = HEAP8[$__buf$i>>0]|0;
   $5 = $4 & 1;
   $6 = ($5<<24>>24)==(0);
   if ($6) {
    $9 = (($__buf$i) + 1|0);
    $$pre34$i = (($__buf$i) + 8|0);
    $$pre$phi33$iZ2D = $9;$$pre$phi35$iZ2D = $$pre34$i;$10 = $9;
   } else {
    $7 = (($__buf$i) + 8|0);
    $8 = HEAP32[$7>>2]|0;
    $$pre32$i = (($__buf$i) + 1|0);
    $$pre$phi33$iZ2D = $$pre32$i;$$pre$phi35$iZ2D = $7;$10 = $8;
   }
   HEAP32[$__a_end$i>>2] = $10;
   HEAP32[$__g_end$i>>2] = $__g$i;
   HEAP32[$__dc$i>>2] = 0;
   HEAP8[$__in_units$i>>0] = 1;
   HEAP8[$__exp$i>>0] = 69;
   $11 = (($__buf$i) + 4|0);
   $12 = HEAP8[$__decimal_point$i>>0]|0;
   $13 = HEAP8[$__thousands_sep$i>>0]|0;
   $$pre$i$i$i4$i = $0;$$sroa$06$0 = $1;$__a$0$i = $10;
   L7: while(1) {
    $14 = ($$pre$i$i$i4$i|0)==(0|0);
    if ($14) {
     $28 = 0;
    } else {
     $15 = (($$pre$i$i$i4$i) + 12|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = (($$pre$i$i$i4$i) + 16|0);
     $18 = HEAP32[$17>>2]|0;
     $19 = ($16|0)==($18|0);
     if ($19) {
      $20 = HEAP32[$$pre$i$i$i4$i>>2]|0;
      $21 = (($20) + 36|0);
      $22 = HEAP32[$21>>2]|0;
      __THREW__ = 0;
      $23 = (invoke_ii($22|0,($$pre$i$i$i4$i|0))|0);
      $24 = __THREW__; __THREW__ = 0;
      $25 = $24&1;
      if ($25) {
       label = 31;
       break;
      }
      $26 = ($23|0)==(-1);
      $$$pre$i$i$i4$i = $26 ? 0 : $$pre$i$i$i4$i;
      $28 = $$$pre$i$i$i4$i;
     } else {
      $28 = $$pre$i$i$i4$i;
     }
    }
    $27 = ($28|0)==(0|0);
    $29 = ($$sroa$06$0|0)==(0|0);
    do {
     if ($29) {
      label = 15;
     } else {
      $30 = (($$sroa$06$0) + 12|0);
      $31 = HEAP32[$30>>2]|0;
      $32 = (($$sroa$06$0) + 16|0);
      $33 = HEAP32[$32>>2]|0;
      $34 = ($31|0)==($33|0);
      if (!($34)) {
       if ($27) {
        $$sroa$06$2 = $$sroa$06$0;
        break;
       } else {
        $$pre$i2$i$i$i = $$sroa$06$0;$__a$2$i = $__a$0$i;
        break L7;
       }
      }
      $35 = HEAP32[$$sroa$06$0>>2]|0;
      $36 = (($35) + 36|0);
      $37 = HEAP32[$36>>2]|0;
      __THREW__ = 0;
      $38 = (invoke_ii($37|0,($$sroa$06$0|0))|0);
      $39 = __THREW__; __THREW__ = 0;
      $40 = $39&1;
      if ($40) {
       label = 31;
       break L7;
      }
      $41 = ($38|0)==(-1);
      if ($41) {
       label = 15;
      } else {
       if ($27) {
        $$sroa$06$2 = $$sroa$06$0;
       } else {
        $$pre$i2$i$i$i = $$sroa$06$0;$__a$2$i = $__a$0$i;
        break L7;
       }
      }
     }
    } while(0);
    if ((label|0) == 15) {
     label = 0;
     if ($27) {
      $$pre$i2$i$i$i = 0;$__a$2$i = $__a$0$i;
      break;
     } else {
      $$sroa$06$2 = 0;
     }
    }
    $42 = HEAP32[$__a_end$i>>2]|0;
    $43 = $42;
    $44 = $__a$0$i;
    $45 = (($43) - ($44))|0;
    $46 = HEAP8[$__buf$i>>0]|0;
    $47 = $46 & 1;
    $48 = ($47<<24>>24)==(0);
    if ($48) {
     $50 = $46&255;
     $51 = $50 >>> 1;
     $53 = $51;
    } else {
     $49 = HEAP32[$11>>2]|0;
     $53 = $49;
    }
    $52 = ($45|0)==($53|0);
    if ($52) {
     if ($48) {
      $55 = $46&255;
      $56 = $55 >>> 1;
      $58 = $56;
     } else {
      $54 = HEAP32[$11>>2]|0;
      $58 = $54;
     }
     $57 = $58 << 1;
     __THREW__ = 0;
     invoke_vii(451,($__buf$i|0),($57|0));
     $59 = __THREW__; __THREW__ = 0;
     $60 = $59&1;
     if ($60) {
      label = 31;
      break;
     }
     $61 = HEAP8[$__buf$i>>0]|0;
     $62 = $61 & 1;
     $63 = ($62<<24>>24)==(0);
     if ($63) {
      $66 = 10;
     } else {
      $64 = HEAP32[$__buf$i>>2]|0;
      $65 = $64 & -2;
      $phitmp$i19$i = (($65) + -1)|0;
      $66 = $phitmp$i19$i;
     }
     __THREW__ = 0;
     invoke_vii(451,($__buf$i|0),($66|0));
     $67 = __THREW__; __THREW__ = 0;
     $68 = $67&1;
     if ($68) {
      label = 31;
      break;
     }
     $69 = HEAP8[$__buf$i>>0]|0;
     $70 = $69 & 1;
     $71 = ($70<<24>>24)==(0);
     if ($71) {
      $74 = $$pre$phi33$iZ2D;
     } else {
      $72 = HEAP32[$$pre$phi35$iZ2D>>2]|0;
      $74 = $72;
     }
     $73 = (($74) + ($58)|0);
     HEAP32[$__a_end$i>>2] = $73;
     $__a$1$i = $74;
    } else {
     $__a$1$i = $__a$0$i;
    }
    $91 = (($28) + 12|0);
    $92 = HEAP32[$91>>2]|0;
    $93 = (($28) + 16|0);
    $94 = HEAP32[$93>>2]|0;
    $95 = ($92|0)==($94|0);
    if ($95) {
     $96 = HEAP32[$28>>2]|0;
     $97 = (($96) + 36|0);
     $98 = HEAP32[$97>>2]|0;
     __THREW__ = 0;
     $99 = (invoke_ii($98|0,($28|0))|0);
     $100 = __THREW__; __THREW__ = 0;
     $101 = $100&1;
     if ($101) {
      label = 31;
      break;
     } else {
      $$0$i$i$i = $99;
     }
    } else {
     $102 = HEAP8[$92>>0]|0;
     $103 = $102&255;
     $$0$i$i$i = $103;
    }
    $104 = $$0$i$i$i&255;
    $105 = (__ZNSt3__19__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($104,$__in_units$i,$__exp$i,$__a$1$i,$__a_end$i,$12,$13,$__grouping$i,$__g$i,$__g_end$i,$__dc$i,$__atoms$i)|0);
    $106 = ($105|0)==(0);
    if (!($106)) {
     $$pre$i2$i$i$i = $$sroa$06$2;$__a$2$i = $__a$1$i;
     break;
    }
    $107 = HEAP32[$91>>2]|0;
    $108 = HEAP32[$93>>2]|0;
    $109 = ($107|0)==($108|0);
    if ($109) {
     $110 = HEAP32[$28>>2]|0;
     $111 = (($110) + 40|0);
     $112 = HEAP32[$111>>2]|0;
     __THREW__ = 0;
     (invoke_ii($112|0,($28|0))|0);
     $113 = __THREW__; __THREW__ = 0;
     $114 = $113&1;
     if ($114) {
      label = 31;
      break;
     } else {
      $$pre$i$i$i4$i = $28;$$sroa$06$0 = $$sroa$06$2;$__a$0$i = $__a$1$i;
      continue;
     }
    } else {
     $115 = (($107) + 1|0);
     HEAP32[$91>>2] = $115;
     $$pre$i$i$i4$i = $28;$$sroa$06$0 = $$sroa$06$2;$__a$0$i = $__a$1$i;
     continue;
    }
   }
   if ((label|0) == 31) {
    $75 = ___cxa_find_matching_catch(-1,-1)|0;
    $76 = tempRet0;
    $lpad$phi$i$index = $75;$lpad$phi$i$index9 = $76;
    break;
   }
   $116 = HEAP8[$__grouping$i>>0]|0;
   $117 = $116 & 1;
   $118 = ($117<<24>>24)==(0);
   if ($118) {
    $121 = $116&255;
    $122 = $121 >>> 1;
    $124 = $122;
   } else {
    $119 = (($__grouping$i) + 4|0);
    $120 = HEAP32[$119>>2]|0;
    $124 = $120;
   }
   $123 = ($124|0)==(0);
   if (!($123)) {
    $125 = HEAP8[$__in_units$i>>0]|0;
    $126 = ($125<<24>>24)==(0);
    if (!($126)) {
     $127 = HEAP32[$__g_end$i>>2]|0;
     $128 = $127;
     $129 = $__g$i;
     $130 = (($128) - ($129))|0;
     $131 = ($130|0)<(160);
     if ($131) {
      $132 = HEAP32[$__dc$i>>2]|0;
      $133 = (($127) + 4|0);
      HEAP32[$__g_end$i>>2] = $133;
      HEAP32[$127>>2] = $132;
     }
    }
   }
   $134 = HEAP32[$__a_end$i>>2]|0;
   __THREW__ = 0;
   $135 = (+invoke_diii(458,($__a$2$i|0),($134|0),($__err|0)));
   $136 = __THREW__; __THREW__ = 0;
   $137 = $136&1;
   if ($137) {
    label = 32;
   } else {
    HEAPF32[$__v>>2] = $135;
    $138 = HEAP32[$__g_end$i>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping$i,$__g$i,$138,$__err);
    if ($27) {
     $152 = 0;
    } else {
     $139 = (($28) + 12|0);
     $140 = HEAP32[$139>>2]|0;
     $141 = (($28) + 16|0);
     $142 = HEAP32[$141>>2]|0;
     $143 = ($140|0)==($142|0);
     if ($143) {
      $144 = HEAP32[$28>>2]|0;
      $145 = (($144) + 36|0);
      $146 = HEAP32[$145>>2]|0;
      __THREW__ = 0;
      $147 = (invoke_ii($146|0,($28|0))|0);
      $148 = __THREW__; __THREW__ = 0;
      $149 = $148&1;
      if ($149) {
       label = 32;
       break;
      }
      $150 = ($147|0)==(-1);
      $$ = $150 ? 0 : $28;
      $152 = $$;
     } else {
      $152 = $28;
     }
    }
    $151 = ($152|0)==(0|0);
    $153 = ($$pre$i2$i$i$i|0)==(0|0);
    do {
     if ($153) {
      label = 64;
     } else {
      $154 = (($$pre$i2$i$i$i) + 12|0);
      $155 = HEAP32[$154>>2]|0;
      $156 = (($$pre$i2$i$i$i) + 16|0);
      $157 = HEAP32[$156>>2]|0;
      $158 = ($155|0)==($157|0);
      if (!($158)) {
       if ($151) {
        break;
       } else {
        label = 66;
        break;
       }
      }
      $159 = HEAP32[$$pre$i2$i$i$i>>2]|0;
      $160 = (($159) + 36|0);
      $161 = HEAP32[$160>>2]|0;
      __THREW__ = 0;
      $162 = (invoke_ii($161|0,($$pre$i2$i$i$i|0))|0);
      $163 = __THREW__; __THREW__ = 0;
      $164 = $163&1;
      if ($164) {
       label = 32;
       break L1;
      }
      $165 = ($162|0)==(-1);
      if ($165) {
       label = 64;
      } else {
       if (!($151)) {
        label = 66;
       }
      }
     }
    } while(0);
    if ((label|0) == 64) {
     if ($151) {
      label = 66;
     }
    }
    if ((label|0) == 66) {
     $166 = HEAP32[$__err>>2]|0;
     $167 = $166 | 2;
     HEAP32[$__err>>2] = $167;
    }
    HEAP32[$agg$result>>2] = $152;
    $168 = HEAP8[$__buf$i>>0]|0;
    $169 = $168 & 1;
    $170 = ($169<<24>>24)==(0);
    if (!($170)) {
     $171 = (($__buf$i) + 8|0);
     $172 = HEAP32[$171>>2]|0;
     $173 = ($172|0)==(0|0);
     if (!($173)) {
      _free($172);
     }
    }
    $174 = HEAP8[$__grouping$i>>0]|0;
    $175 = $174 & 1;
    $176 = ($175<<24>>24)==(0);
    if ($176) {
     STACKTOP = sp;return;
    }
    $177 = (($__grouping$i) + 8|0);
    $178 = HEAP32[$177>>2]|0;
    $179 = ($178|0)==(0|0);
    if ($179) {
     STACKTOP = sp;return;
    }
    _free($178);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 32) {
  $77 = ___cxa_find_matching_catch(-1,-1)|0;
  $78 = tempRet0;
  $lpad$phi$i$index = $77;$lpad$phi$i$index9 = $78;
 }
 $79 = HEAP8[$__buf$i>>0]|0;
 $80 = $79 & 1;
 $81 = ($80<<24>>24)==(0);
 if (!($81)) {
  $82 = (($__buf$i) + 8|0);
  $83 = HEAP32[$82>>2]|0;
  $84 = ($83|0)==(0|0);
  if (!($84)) {
   _free($83);
  }
 }
 $85 = HEAP8[$__grouping$i>>0]|0;
 $86 = $85 & 1;
 $87 = ($86<<24>>24)==(0);
 if ($87) {
  ___resumeException($lpad$phi$i$index|0);
  // unreachable;
 }
 $88 = (($__grouping$i) + 8|0);
 $89 = HEAP32[$88>>2]|0;
 $90 = ($89|0)==(0|0);
 if ($90) {
  ___resumeException($lpad$phi$i$index|0);
  // unreachable;
 }
 _free($89);
 ___resumeException($lpad$phi$i$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRd($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$ = 0, $$$pre$i$i$i4$i = 0, $$0$i$i$i = 0, $$pre$i$i$i4$i = 0, $$pre$i2$i$i$i = 0, $$pre$phi33$iZ2D = 0, $$pre$phi35$iZ2D = 0, $$pre32$i = 0, $$pre34$i = 0, $$sroa$06$0 = 0, $$sroa$06$2 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0.0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0;
 var $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0;
 var $179 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0$i = 0, $__a$1$i = 0, $__a$2$i = 0, $__a_end$i = 0, $__atoms$i = 0, $__buf$i = 0, $__dc$i = 0, $__decimal_point$i = 0, $__exp$i = 0;
 var $__g$i = 0, $__g_end$i = 0, $__grouping$i = 0, $__in_units$i = 0, $__thousands_sep$i = 0, $lpad$phi$i$index = 0, $lpad$phi$i$index9 = 0, $phitmp$i19$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0;
 $__atoms$i = sp + 200|0;
 $__decimal_point$i = sp + 199|0;
 $__thousands_sep$i = sp + 198|0;
 $__grouping$i = sp + 184|0;
 $__buf$i = sp + 172|0;
 $__a_end$i = sp + 168|0;
 $__g$i = sp + 8|0;
 $__g_end$i = sp + 4|0;
 $__dc$i = sp;
 $__in_units$i = sp + 197|0;
 $__exp$i = sp + 196|0;
 $0 = HEAP32[$__b>>2]|0;
 $1 = HEAP32[$__e>>2]|0;
 __ZNSt3__19__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($__grouping$i,$__iob,$__atoms$i,$__decimal_point$i,$__thousands_sep$i);
 ;HEAP32[$__buf$i+0>>2]=0|0;HEAP32[$__buf$i+4>>2]=0|0;HEAP32[$__buf$i+8>>2]=0|0;
 __THREW__ = 0;
 invoke_vii(451,($__buf$i|0),10);
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 L1: do {
  if ($3) {
   label = 32;
  } else {
   $4 = HEAP8[$__buf$i>>0]|0;
   $5 = $4 & 1;
   $6 = ($5<<24>>24)==(0);
   if ($6) {
    $9 = (($__buf$i) + 1|0);
    $$pre34$i = (($__buf$i) + 8|0);
    $$pre$phi33$iZ2D = $9;$$pre$phi35$iZ2D = $$pre34$i;$10 = $9;
   } else {
    $7 = (($__buf$i) + 8|0);
    $8 = HEAP32[$7>>2]|0;
    $$pre32$i = (($__buf$i) + 1|0);
    $$pre$phi33$iZ2D = $$pre32$i;$$pre$phi35$iZ2D = $7;$10 = $8;
   }
   HEAP32[$__a_end$i>>2] = $10;
   HEAP32[$__g_end$i>>2] = $__g$i;
   HEAP32[$__dc$i>>2] = 0;
   HEAP8[$__in_units$i>>0] = 1;
   HEAP8[$__exp$i>>0] = 69;
   $11 = (($__buf$i) + 4|0);
   $12 = HEAP8[$__decimal_point$i>>0]|0;
   $13 = HEAP8[$__thousands_sep$i>>0]|0;
   $$pre$i$i$i4$i = $0;$$sroa$06$0 = $1;$__a$0$i = $10;
   L7: while(1) {
    $14 = ($$pre$i$i$i4$i|0)==(0|0);
    if ($14) {
     $28 = 0;
    } else {
     $15 = (($$pre$i$i$i4$i) + 12|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = (($$pre$i$i$i4$i) + 16|0);
     $18 = HEAP32[$17>>2]|0;
     $19 = ($16|0)==($18|0);
     if ($19) {
      $20 = HEAP32[$$pre$i$i$i4$i>>2]|0;
      $21 = (($20) + 36|0);
      $22 = HEAP32[$21>>2]|0;
      __THREW__ = 0;
      $23 = (invoke_ii($22|0,($$pre$i$i$i4$i|0))|0);
      $24 = __THREW__; __THREW__ = 0;
      $25 = $24&1;
      if ($25) {
       label = 31;
       break;
      }
      $26 = ($23|0)==(-1);
      $$$pre$i$i$i4$i = $26 ? 0 : $$pre$i$i$i4$i;
      $28 = $$$pre$i$i$i4$i;
     } else {
      $28 = $$pre$i$i$i4$i;
     }
    }
    $27 = ($28|0)==(0|0);
    $29 = ($$sroa$06$0|0)==(0|0);
    do {
     if ($29) {
      label = 15;
     } else {
      $30 = (($$sroa$06$0) + 12|0);
      $31 = HEAP32[$30>>2]|0;
      $32 = (($$sroa$06$0) + 16|0);
      $33 = HEAP32[$32>>2]|0;
      $34 = ($31|0)==($33|0);
      if (!($34)) {
       if ($27) {
        $$sroa$06$2 = $$sroa$06$0;
        break;
       } else {
        $$pre$i2$i$i$i = $$sroa$06$0;$__a$2$i = $__a$0$i;
        break L7;
       }
      }
      $35 = HEAP32[$$sroa$06$0>>2]|0;
      $36 = (($35) + 36|0);
      $37 = HEAP32[$36>>2]|0;
      __THREW__ = 0;
      $38 = (invoke_ii($37|0,($$sroa$06$0|0))|0);
      $39 = __THREW__; __THREW__ = 0;
      $40 = $39&1;
      if ($40) {
       label = 31;
       break L7;
      }
      $41 = ($38|0)==(-1);
      if ($41) {
       label = 15;
      } else {
       if ($27) {
        $$sroa$06$2 = $$sroa$06$0;
       } else {
        $$pre$i2$i$i$i = $$sroa$06$0;$__a$2$i = $__a$0$i;
        break L7;
       }
      }
     }
    } while(0);
    if ((label|0) == 15) {
     label = 0;
     if ($27) {
      $$pre$i2$i$i$i = 0;$__a$2$i = $__a$0$i;
      break;
     } else {
      $$sroa$06$2 = 0;
     }
    }
    $42 = HEAP32[$__a_end$i>>2]|0;
    $43 = $42;
    $44 = $__a$0$i;
    $45 = (($43) - ($44))|0;
    $46 = HEAP8[$__buf$i>>0]|0;
    $47 = $46 & 1;
    $48 = ($47<<24>>24)==(0);
    if ($48) {
     $50 = $46&255;
     $51 = $50 >>> 1;
     $53 = $51;
    } else {
     $49 = HEAP32[$11>>2]|0;
     $53 = $49;
    }
    $52 = ($45|0)==($53|0);
    if ($52) {
     if ($48) {
      $55 = $46&255;
      $56 = $55 >>> 1;
      $58 = $56;
     } else {
      $54 = HEAP32[$11>>2]|0;
      $58 = $54;
     }
     $57 = $58 << 1;
     __THREW__ = 0;
     invoke_vii(451,($__buf$i|0),($57|0));
     $59 = __THREW__; __THREW__ = 0;
     $60 = $59&1;
     if ($60) {
      label = 31;
      break;
     }
     $61 = HEAP8[$__buf$i>>0]|0;
     $62 = $61 & 1;
     $63 = ($62<<24>>24)==(0);
     if ($63) {
      $66 = 10;
     } else {
      $64 = HEAP32[$__buf$i>>2]|0;
      $65 = $64 & -2;
      $phitmp$i19$i = (($65) + -1)|0;
      $66 = $phitmp$i19$i;
     }
     __THREW__ = 0;
     invoke_vii(451,($__buf$i|0),($66|0));
     $67 = __THREW__; __THREW__ = 0;
     $68 = $67&1;
     if ($68) {
      label = 31;
      break;
     }
     $69 = HEAP8[$__buf$i>>0]|0;
     $70 = $69 & 1;
     $71 = ($70<<24>>24)==(0);
     if ($71) {
      $74 = $$pre$phi33$iZ2D;
     } else {
      $72 = HEAP32[$$pre$phi35$iZ2D>>2]|0;
      $74 = $72;
     }
     $73 = (($74) + ($58)|0);
     HEAP32[$__a_end$i>>2] = $73;
     $__a$1$i = $74;
    } else {
     $__a$1$i = $__a$0$i;
    }
    $91 = (($28) + 12|0);
    $92 = HEAP32[$91>>2]|0;
    $93 = (($28) + 16|0);
    $94 = HEAP32[$93>>2]|0;
    $95 = ($92|0)==($94|0);
    if ($95) {
     $96 = HEAP32[$28>>2]|0;
     $97 = (($96) + 36|0);
     $98 = HEAP32[$97>>2]|0;
     __THREW__ = 0;
     $99 = (invoke_ii($98|0,($28|0))|0);
     $100 = __THREW__; __THREW__ = 0;
     $101 = $100&1;
     if ($101) {
      label = 31;
      break;
     } else {
      $$0$i$i$i = $99;
     }
    } else {
     $102 = HEAP8[$92>>0]|0;
     $103 = $102&255;
     $$0$i$i$i = $103;
    }
    $104 = $$0$i$i$i&255;
    $105 = (__ZNSt3__19__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($104,$__in_units$i,$__exp$i,$__a$1$i,$__a_end$i,$12,$13,$__grouping$i,$__g$i,$__g_end$i,$__dc$i,$__atoms$i)|0);
    $106 = ($105|0)==(0);
    if (!($106)) {
     $$pre$i2$i$i$i = $$sroa$06$2;$__a$2$i = $__a$1$i;
     break;
    }
    $107 = HEAP32[$91>>2]|0;
    $108 = HEAP32[$93>>2]|0;
    $109 = ($107|0)==($108|0);
    if ($109) {
     $110 = HEAP32[$28>>2]|0;
     $111 = (($110) + 40|0);
     $112 = HEAP32[$111>>2]|0;
     __THREW__ = 0;
     (invoke_ii($112|0,($28|0))|0);
     $113 = __THREW__; __THREW__ = 0;
     $114 = $113&1;
     if ($114) {
      label = 31;
      break;
     } else {
      $$pre$i$i$i4$i = $28;$$sroa$06$0 = $$sroa$06$2;$__a$0$i = $__a$1$i;
      continue;
     }
    } else {
     $115 = (($107) + 1|0);
     HEAP32[$91>>2] = $115;
     $$pre$i$i$i4$i = $28;$$sroa$06$0 = $$sroa$06$2;$__a$0$i = $__a$1$i;
     continue;
    }
   }
   if ((label|0) == 31) {
    $75 = ___cxa_find_matching_catch(-1,-1)|0;
    $76 = tempRet0;
    $lpad$phi$i$index = $75;$lpad$phi$i$index9 = $76;
    break;
   }
   $116 = HEAP8[$__grouping$i>>0]|0;
   $117 = $116 & 1;
   $118 = ($117<<24>>24)==(0);
   if ($118) {
    $121 = $116&255;
    $122 = $121 >>> 1;
    $124 = $122;
   } else {
    $119 = (($__grouping$i) + 4|0);
    $120 = HEAP32[$119>>2]|0;
    $124 = $120;
   }
   $123 = ($124|0)==(0);
   if (!($123)) {
    $125 = HEAP8[$__in_units$i>>0]|0;
    $126 = ($125<<24>>24)==(0);
    if (!($126)) {
     $127 = HEAP32[$__g_end$i>>2]|0;
     $128 = $127;
     $129 = $__g$i;
     $130 = (($128) - ($129))|0;
     $131 = ($130|0)<(160);
     if ($131) {
      $132 = HEAP32[$__dc$i>>2]|0;
      $133 = (($127) + 4|0);
      HEAP32[$__g_end$i>>2] = $133;
      HEAP32[$127>>2] = $132;
     }
    }
   }
   $134 = HEAP32[$__a_end$i>>2]|0;
   __THREW__ = 0;
   $135 = (+invoke_diii(459,($__a$2$i|0),($134|0),($__err|0)));
   $136 = __THREW__; __THREW__ = 0;
   $137 = $136&1;
   if ($137) {
    label = 32;
   } else {
    HEAPF64[$__v>>3] = $135;
    $138 = HEAP32[$__g_end$i>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping$i,$__g$i,$138,$__err);
    if ($27) {
     $152 = 0;
    } else {
     $139 = (($28) + 12|0);
     $140 = HEAP32[$139>>2]|0;
     $141 = (($28) + 16|0);
     $142 = HEAP32[$141>>2]|0;
     $143 = ($140|0)==($142|0);
     if ($143) {
      $144 = HEAP32[$28>>2]|0;
      $145 = (($144) + 36|0);
      $146 = HEAP32[$145>>2]|0;
      __THREW__ = 0;
      $147 = (invoke_ii($146|0,($28|0))|0);
      $148 = __THREW__; __THREW__ = 0;
      $149 = $148&1;
      if ($149) {
       label = 32;
       break;
      }
      $150 = ($147|0)==(-1);
      $$ = $150 ? 0 : $28;
      $152 = $$;
     } else {
      $152 = $28;
     }
    }
    $151 = ($152|0)==(0|0);
    $153 = ($$pre$i2$i$i$i|0)==(0|0);
    do {
     if ($153) {
      label = 64;
     } else {
      $154 = (($$pre$i2$i$i$i) + 12|0);
      $155 = HEAP32[$154>>2]|0;
      $156 = (($$pre$i2$i$i$i) + 16|0);
      $157 = HEAP32[$156>>2]|0;
      $158 = ($155|0)==($157|0);
      if (!($158)) {
       if ($151) {
        break;
       } else {
        label = 66;
        break;
       }
      }
      $159 = HEAP32[$$pre$i2$i$i$i>>2]|0;
      $160 = (($159) + 36|0);
      $161 = HEAP32[$160>>2]|0;
      __THREW__ = 0;
      $162 = (invoke_ii($161|0,($$pre$i2$i$i$i|0))|0);
      $163 = __THREW__; __THREW__ = 0;
      $164 = $163&1;
      if ($164) {
       label = 32;
       break L1;
      }
      $165 = ($162|0)==(-1);
      if ($165) {
       label = 64;
      } else {
       if (!($151)) {
        label = 66;
       }
      }
     }
    } while(0);
    if ((label|0) == 64) {
     if ($151) {
      label = 66;
     }
    }
    if ((label|0) == 66) {
     $166 = HEAP32[$__err>>2]|0;
     $167 = $166 | 2;
     HEAP32[$__err>>2] = $167;
    }
    HEAP32[$agg$result>>2] = $152;
    $168 = HEAP8[$__buf$i>>0]|0;
    $169 = $168 & 1;
    $170 = ($169<<24>>24)==(0);
    if (!($170)) {
     $171 = (($__buf$i) + 8|0);
     $172 = HEAP32[$171>>2]|0;
     $173 = ($172|0)==(0|0);
     if (!($173)) {
      _free($172);
     }
    }
    $174 = HEAP8[$__grouping$i>>0]|0;
    $175 = $174 & 1;
    $176 = ($175<<24>>24)==(0);
    if ($176) {
     STACKTOP = sp;return;
    }
    $177 = (($__grouping$i) + 8|0);
    $178 = HEAP32[$177>>2]|0;
    $179 = ($178|0)==(0|0);
    if ($179) {
     STACKTOP = sp;return;
    }
    _free($178);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 32) {
  $77 = ___cxa_find_matching_catch(-1,-1)|0;
  $78 = tempRet0;
  $lpad$phi$i$index = $77;$lpad$phi$i$index9 = $78;
 }
 $79 = HEAP8[$__buf$i>>0]|0;
 $80 = $79 & 1;
 $81 = ($80<<24>>24)==(0);
 if (!($81)) {
  $82 = (($__buf$i) + 8|0);
  $83 = HEAP32[$82>>2]|0;
  $84 = ($83|0)==(0|0);
  if (!($84)) {
   _free($83);
  }
 }
 $85 = HEAP8[$__grouping$i>>0]|0;
 $86 = $85 & 1;
 $87 = ($86<<24>>24)==(0);
 if ($87) {
  ___resumeException($lpad$phi$i$index|0);
  // unreachable;
 }
 $88 = (($__grouping$i) + 8|0);
 $89 = HEAP32[$88>>2]|0;
 $90 = ($89|0)==(0|0);
 if ($90) {
  ___resumeException($lpad$phi$i$index|0);
  // unreachable;
 }
 _free($89);
 ___resumeException($lpad$phi$i$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRe($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$ = 0, $$$pre$i$i$i4$i = 0, $$0$i$i$i = 0, $$pre$i$i$i4$i = 0, $$pre$i2$i$i$i = 0, $$pre$phi33$iZ2D = 0, $$pre$phi35$iZ2D = 0, $$pre32$i = 0, $$pre34$i = 0, $$sroa$06$0 = 0, $$sroa$06$2 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0.0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0;
 var $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0;
 var $179 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0$i = 0, $__a$1$i = 0, $__a$2$i = 0, $__a_end$i = 0, $__atoms$i = 0, $__buf$i = 0, $__dc$i = 0, $__decimal_point$i = 0, $__exp$i = 0;
 var $__g$i = 0, $__g_end$i = 0, $__grouping$i = 0, $__in_units$i = 0, $__thousands_sep$i = 0, $lpad$phi$i$index = 0, $lpad$phi$i$index9 = 0, $phitmp$i19$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0;
 $__atoms$i = sp + 200|0;
 $__decimal_point$i = sp + 199|0;
 $__thousands_sep$i = sp + 198|0;
 $__grouping$i = sp + 184|0;
 $__buf$i = sp + 172|0;
 $__a_end$i = sp + 168|0;
 $__g$i = sp + 8|0;
 $__g_end$i = sp + 4|0;
 $__dc$i = sp;
 $__in_units$i = sp + 197|0;
 $__exp$i = sp + 196|0;
 $0 = HEAP32[$__b>>2]|0;
 $1 = HEAP32[$__e>>2]|0;
 __ZNSt3__19__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($__grouping$i,$__iob,$__atoms$i,$__decimal_point$i,$__thousands_sep$i);
 ;HEAP32[$__buf$i+0>>2]=0|0;HEAP32[$__buf$i+4>>2]=0|0;HEAP32[$__buf$i+8>>2]=0|0;
 __THREW__ = 0;
 invoke_vii(451,($__buf$i|0),10);
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 L1: do {
  if ($3) {
   label = 32;
  } else {
   $4 = HEAP8[$__buf$i>>0]|0;
   $5 = $4 & 1;
   $6 = ($5<<24>>24)==(0);
   if ($6) {
    $9 = (($__buf$i) + 1|0);
    $$pre34$i = (($__buf$i) + 8|0);
    $$pre$phi33$iZ2D = $9;$$pre$phi35$iZ2D = $$pre34$i;$10 = $9;
   } else {
    $7 = (($__buf$i) + 8|0);
    $8 = HEAP32[$7>>2]|0;
    $$pre32$i = (($__buf$i) + 1|0);
    $$pre$phi33$iZ2D = $$pre32$i;$$pre$phi35$iZ2D = $7;$10 = $8;
   }
   HEAP32[$__a_end$i>>2] = $10;
   HEAP32[$__g_end$i>>2] = $__g$i;
   HEAP32[$__dc$i>>2] = 0;
   HEAP8[$__in_units$i>>0] = 1;
   HEAP8[$__exp$i>>0] = 69;
   $11 = (($__buf$i) + 4|0);
   $12 = HEAP8[$__decimal_point$i>>0]|0;
   $13 = HEAP8[$__thousands_sep$i>>0]|0;
   $$pre$i$i$i4$i = $0;$$sroa$06$0 = $1;$__a$0$i = $10;
   L7: while(1) {
    $14 = ($$pre$i$i$i4$i|0)==(0|0);
    if ($14) {
     $28 = 0;
    } else {
     $15 = (($$pre$i$i$i4$i) + 12|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = (($$pre$i$i$i4$i) + 16|0);
     $18 = HEAP32[$17>>2]|0;
     $19 = ($16|0)==($18|0);
     if ($19) {
      $20 = HEAP32[$$pre$i$i$i4$i>>2]|0;
      $21 = (($20) + 36|0);
      $22 = HEAP32[$21>>2]|0;
      __THREW__ = 0;
      $23 = (invoke_ii($22|0,($$pre$i$i$i4$i|0))|0);
      $24 = __THREW__; __THREW__ = 0;
      $25 = $24&1;
      if ($25) {
       label = 31;
       break;
      }
      $26 = ($23|0)==(-1);
      $$$pre$i$i$i4$i = $26 ? 0 : $$pre$i$i$i4$i;
      $28 = $$$pre$i$i$i4$i;
     } else {
      $28 = $$pre$i$i$i4$i;
     }
    }
    $27 = ($28|0)==(0|0);
    $29 = ($$sroa$06$0|0)==(0|0);
    do {
     if ($29) {
      label = 15;
     } else {
      $30 = (($$sroa$06$0) + 12|0);
      $31 = HEAP32[$30>>2]|0;
      $32 = (($$sroa$06$0) + 16|0);
      $33 = HEAP32[$32>>2]|0;
      $34 = ($31|0)==($33|0);
      if (!($34)) {
       if ($27) {
        $$sroa$06$2 = $$sroa$06$0;
        break;
       } else {
        $$pre$i2$i$i$i = $$sroa$06$0;$__a$2$i = $__a$0$i;
        break L7;
       }
      }
      $35 = HEAP32[$$sroa$06$0>>2]|0;
      $36 = (($35) + 36|0);
      $37 = HEAP32[$36>>2]|0;
      __THREW__ = 0;
      $38 = (invoke_ii($37|0,($$sroa$06$0|0))|0);
      $39 = __THREW__; __THREW__ = 0;
      $40 = $39&1;
      if ($40) {
       label = 31;
       break L7;
      }
      $41 = ($38|0)==(-1);
      if ($41) {
       label = 15;
      } else {
       if ($27) {
        $$sroa$06$2 = $$sroa$06$0;
       } else {
        $$pre$i2$i$i$i = $$sroa$06$0;$__a$2$i = $__a$0$i;
        break L7;
       }
      }
     }
    } while(0);
    if ((label|0) == 15) {
     label = 0;
     if ($27) {
      $$pre$i2$i$i$i = 0;$__a$2$i = $__a$0$i;
      break;
     } else {
      $$sroa$06$2 = 0;
     }
    }
    $42 = HEAP32[$__a_end$i>>2]|0;
    $43 = $42;
    $44 = $__a$0$i;
    $45 = (($43) - ($44))|0;
    $46 = HEAP8[$__buf$i>>0]|0;
    $47 = $46 & 1;
    $48 = ($47<<24>>24)==(0);
    if ($48) {
     $50 = $46&255;
     $51 = $50 >>> 1;
     $53 = $51;
    } else {
     $49 = HEAP32[$11>>2]|0;
     $53 = $49;
    }
    $52 = ($45|0)==($53|0);
    if ($52) {
     if ($48) {
      $55 = $46&255;
      $56 = $55 >>> 1;
      $58 = $56;
     } else {
      $54 = HEAP32[$11>>2]|0;
      $58 = $54;
     }
     $57 = $58 << 1;
     __THREW__ = 0;
     invoke_vii(451,($__buf$i|0),($57|0));
     $59 = __THREW__; __THREW__ = 0;
     $60 = $59&1;
     if ($60) {
      label = 31;
      break;
     }
     $61 = HEAP8[$__buf$i>>0]|0;
     $62 = $61 & 1;
     $63 = ($62<<24>>24)==(0);
     if ($63) {
      $66 = 10;
     } else {
      $64 = HEAP32[$__buf$i>>2]|0;
      $65 = $64 & -2;
      $phitmp$i19$i = (($65) + -1)|0;
      $66 = $phitmp$i19$i;
     }
     __THREW__ = 0;
     invoke_vii(451,($__buf$i|0),($66|0));
     $67 = __THREW__; __THREW__ = 0;
     $68 = $67&1;
     if ($68) {
      label = 31;
      break;
     }
     $69 = HEAP8[$__buf$i>>0]|0;
     $70 = $69 & 1;
     $71 = ($70<<24>>24)==(0);
     if ($71) {
      $74 = $$pre$phi33$iZ2D;
     } else {
      $72 = HEAP32[$$pre$phi35$iZ2D>>2]|0;
      $74 = $72;
     }
     $73 = (($74) + ($58)|0);
     HEAP32[$__a_end$i>>2] = $73;
     $__a$1$i = $74;
    } else {
     $__a$1$i = $__a$0$i;
    }
    $91 = (($28) + 12|0);
    $92 = HEAP32[$91>>2]|0;
    $93 = (($28) + 16|0);
    $94 = HEAP32[$93>>2]|0;
    $95 = ($92|0)==($94|0);
    if ($95) {
     $96 = HEAP32[$28>>2]|0;
     $97 = (($96) + 36|0);
     $98 = HEAP32[$97>>2]|0;
     __THREW__ = 0;
     $99 = (invoke_ii($98|0,($28|0))|0);
     $100 = __THREW__; __THREW__ = 0;
     $101 = $100&1;
     if ($101) {
      label = 31;
      break;
     } else {
      $$0$i$i$i = $99;
     }
    } else {
     $102 = HEAP8[$92>>0]|0;
     $103 = $102&255;
     $$0$i$i$i = $103;
    }
    $104 = $$0$i$i$i&255;
    $105 = (__ZNSt3__19__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($104,$__in_units$i,$__exp$i,$__a$1$i,$__a_end$i,$12,$13,$__grouping$i,$__g$i,$__g_end$i,$__dc$i,$__atoms$i)|0);
    $106 = ($105|0)==(0);
    if (!($106)) {
     $$pre$i2$i$i$i = $$sroa$06$2;$__a$2$i = $__a$1$i;
     break;
    }
    $107 = HEAP32[$91>>2]|0;
    $108 = HEAP32[$93>>2]|0;
    $109 = ($107|0)==($108|0);
    if ($109) {
     $110 = HEAP32[$28>>2]|0;
     $111 = (($110) + 40|0);
     $112 = HEAP32[$111>>2]|0;
     __THREW__ = 0;
     (invoke_ii($112|0,($28|0))|0);
     $113 = __THREW__; __THREW__ = 0;
     $114 = $113&1;
     if ($114) {
      label = 31;
      break;
     } else {
      $$pre$i$i$i4$i = $28;$$sroa$06$0 = $$sroa$06$2;$__a$0$i = $__a$1$i;
      continue;
     }
    } else {
     $115 = (($107) + 1|0);
     HEAP32[$91>>2] = $115;
     $$pre$i$i$i4$i = $28;$$sroa$06$0 = $$sroa$06$2;$__a$0$i = $__a$1$i;
     continue;
    }
   }
   if ((label|0) == 31) {
    $75 = ___cxa_find_matching_catch(-1,-1)|0;
    $76 = tempRet0;
    $lpad$phi$i$index = $75;$lpad$phi$i$index9 = $76;
    break;
   }
   $116 = HEAP8[$__grouping$i>>0]|0;
   $117 = $116 & 1;
   $118 = ($117<<24>>24)==(0);
   if ($118) {
    $121 = $116&255;
    $122 = $121 >>> 1;
    $124 = $122;
   } else {
    $119 = (($__grouping$i) + 4|0);
    $120 = HEAP32[$119>>2]|0;
    $124 = $120;
   }
   $123 = ($124|0)==(0);
   if (!($123)) {
    $125 = HEAP8[$__in_units$i>>0]|0;
    $126 = ($125<<24>>24)==(0);
    if (!($126)) {
     $127 = HEAP32[$__g_end$i>>2]|0;
     $128 = $127;
     $129 = $__g$i;
     $130 = (($128) - ($129))|0;
     $131 = ($130|0)<(160);
     if ($131) {
      $132 = HEAP32[$__dc$i>>2]|0;
      $133 = (($127) + 4|0);
      HEAP32[$__g_end$i>>2] = $133;
      HEAP32[$127>>2] = $132;
     }
    }
   }
   $134 = HEAP32[$__a_end$i>>2]|0;
   __THREW__ = 0;
   $135 = (+invoke_diii(460,($__a$2$i|0),($134|0),($__err|0)));
   $136 = __THREW__; __THREW__ = 0;
   $137 = $136&1;
   if ($137) {
    label = 32;
   } else {
    HEAPF64[$__v>>3] = $135;
    $138 = HEAP32[$__g_end$i>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping$i,$__g$i,$138,$__err);
    if ($27) {
     $152 = 0;
    } else {
     $139 = (($28) + 12|0);
     $140 = HEAP32[$139>>2]|0;
     $141 = (($28) + 16|0);
     $142 = HEAP32[$141>>2]|0;
     $143 = ($140|0)==($142|0);
     if ($143) {
      $144 = HEAP32[$28>>2]|0;
      $145 = (($144) + 36|0);
      $146 = HEAP32[$145>>2]|0;
      __THREW__ = 0;
      $147 = (invoke_ii($146|0,($28|0))|0);
      $148 = __THREW__; __THREW__ = 0;
      $149 = $148&1;
      if ($149) {
       label = 32;
       break;
      }
      $150 = ($147|0)==(-1);
      $$ = $150 ? 0 : $28;
      $152 = $$;
     } else {
      $152 = $28;
     }
    }
    $151 = ($152|0)==(0|0);
    $153 = ($$pre$i2$i$i$i|0)==(0|0);
    do {
     if ($153) {
      label = 64;
     } else {
      $154 = (($$pre$i2$i$i$i) + 12|0);
      $155 = HEAP32[$154>>2]|0;
      $156 = (($$pre$i2$i$i$i) + 16|0);
      $157 = HEAP32[$156>>2]|0;
      $158 = ($155|0)==($157|0);
      if (!($158)) {
       if ($151) {
        break;
       } else {
        label = 66;
        break;
       }
      }
      $159 = HEAP32[$$pre$i2$i$i$i>>2]|0;
      $160 = (($159) + 36|0);
      $161 = HEAP32[$160>>2]|0;
      __THREW__ = 0;
      $162 = (invoke_ii($161|0,($$pre$i2$i$i$i|0))|0);
      $163 = __THREW__; __THREW__ = 0;
      $164 = $163&1;
      if ($164) {
       label = 32;
       break L1;
      }
      $165 = ($162|0)==(-1);
      if ($165) {
       label = 64;
      } else {
       if (!($151)) {
        label = 66;
       }
      }
     }
    } while(0);
    if ((label|0) == 64) {
     if ($151) {
      label = 66;
     }
    }
    if ((label|0) == 66) {
     $166 = HEAP32[$__err>>2]|0;
     $167 = $166 | 2;
     HEAP32[$__err>>2] = $167;
    }
    HEAP32[$agg$result>>2] = $152;
    $168 = HEAP8[$__buf$i>>0]|0;
    $169 = $168 & 1;
    $170 = ($169<<24>>24)==(0);
    if (!($170)) {
     $171 = (($__buf$i) + 8|0);
     $172 = HEAP32[$171>>2]|0;
     $173 = ($172|0)==(0|0);
     if (!($173)) {
      _free($172);
     }
    }
    $174 = HEAP8[$__grouping$i>>0]|0;
    $175 = $174 & 1;
    $176 = ($175<<24>>24)==(0);
    if ($176) {
     STACKTOP = sp;return;
    }
    $177 = (($__grouping$i) + 8|0);
    $178 = HEAP32[$177>>2]|0;
    $179 = ($178|0)==(0|0);
    if ($179) {
     STACKTOP = sp;return;
    }
    _free($178);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 32) {
  $77 = ___cxa_find_matching_catch(-1,-1)|0;
  $78 = tempRet0;
  $lpad$phi$i$index = $77;$lpad$phi$i$index9 = $78;
 }
 $79 = HEAP8[$__buf$i>>0]|0;
 $80 = $79 & 1;
 $81 = ($80<<24>>24)==(0);
 if (!($81)) {
  $82 = (($__buf$i) + 8|0);
  $83 = HEAP32[$82>>2]|0;
  $84 = ($83|0)==(0|0);
  if (!($84)) {
   _free($83);
  }
 }
 $85 = HEAP8[$__grouping$i>>0]|0;
 $86 = $85 & 1;
 $87 = ($86<<24>>24)==(0);
 if ($87) {
  ___resumeException($lpad$phi$i$index|0);
  // unreachable;
 }
 $88 = (($__grouping$i) + 8|0);
 $89 = HEAP32[$88>>2]|0;
 $90 = ($89|0)==(0|0);
 if ($90) {
  ___resumeException($lpad$phi$i$index|0);
  // unreachable;
 }
 _free($89);
 ___resumeException($lpad$phi$i$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0 = 0, $$0$i$i = 0, $$0$lcssa$i$i = 0, $$01 = 0, $$01$i$i = 0, $$ph = 0, $$ph32 = 0, $$pre = 0, $$pre$i$i$i9 = 0, $$pre$phi39Z2D = 0, $$pre$phi41Z2D = 0, $$pre38 = 0, $$pre40 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0;
 var $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0;
 var $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0;
 var $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0;
 var $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0;
 var $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0;
 var $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0;
 var $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $242$phi = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0;
 var $__atoms = 0, $__buf = 0, $__g = 0, $__p$i$i$i$i = 0, $eh$lpad$body$index10Z2D = 0, $eh$lpad$body$indexZ2D = 0, $phitmp$i22 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0;
 $vararg_buffer = sp + 16|0;
 $__p$i$i$i$i = sp;
 $__atoms = sp + 196|0;
 $__buf = sp + 184|0;
 $__g = sp + 24|0;
 $0 = (($__iob) + 28|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 4|0);
 $3 = HEAP32[$2>>2]|0;HEAP32[$2>>2] = (($3+1)|0);
 $4 = HEAP32[6416>>2]|0;
 $5 = ($4|0)==(-1);
 if ($5) {
  label = 3;
 } else {
  HEAP32[$__p$i$i$i$i>>2] = 6416;
  $6 = (($__p$i$i$i$i) + 4|0);
  HEAP32[$6>>2] = (439);
  $7 = (($__p$i$i$i$i) + 8|0);
  HEAP32[$7>>2] = 0;
  __THREW__ = 0;
  invoke_vii(440,(6416|0),($__p$i$i$i$i|0));
  $8 = __THREW__; __THREW__ = 0;
  $9 = $8&1;
  if (!($9)) {
   label = 3;
  }
 }
 do {
  if ((label|0) == 3) {
   $10 = HEAP32[((6416 + 4|0))>>2]|0;
   $11 = (($10) + -1)|0;
   $12 = (($1) + 12|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = (($1) + 8|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = $13;
   $17 = $15;
   $18 = (($16) - ($17))|0;
   $19 = $18 >> 2;
   $20 = ($19>>>0)>($11>>>0);
   if ($20) {
    $21 = (($15) + ($11<<2)|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = ($22|0)==(0|0);
    if (!($23)) {
     $27 = HEAP32[$22>>2]|0;
     $28 = (($27) + 32|0);
     $29 = HEAP32[$28>>2]|0;
     __THREW__ = 0;
     (invoke_iiiii($29|0,($22|0),(4976|0),(((4976 + 26|0))|0),($__atoms|0))|0);
     $30 = __THREW__; __THREW__ = 0;
     $31 = $30&1;
     if ($31) {
      break;
     }
     $32 = (($1) + 4|0);
     $33 = HEAP32[$32>>2]|0;HEAP32[$32>>2] = (($33+-1)|0);
     $34 = ($33|0)==(0);
     if ($34) {
      $35 = HEAP32[$1>>2]|0;
      $36 = (($35) + 8|0);
      $37 = HEAP32[$36>>2]|0;
      FUNCTION_TABLE_vi[$37 & 511]($1);
     }
     ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
     __THREW__ = 0;
     invoke_vii(451,($__buf|0),10);
     $38 = __THREW__; __THREW__ = 0;
     $39 = $38&1;
     L12: do {
      if ($39) {
       label = 45;
      } else {
       $40 = HEAP8[$__buf>>0]|0;
       $41 = $40 & 1;
       $42 = ($41<<24>>24)==(0);
       if ($42) {
        $45 = (($__buf) + 1|0);
        $$pre40 = (($__buf) + 8|0);
        $$pre$phi39Z2D = $45;$$pre$phi41Z2D = $$pre40;$241 = $45;
       } else {
        $43 = (($__buf) + 8|0);
        $44 = HEAP32[$43>>2]|0;
        $$pre38 = (($__buf) + 1|0);
        $$pre$phi39Z2D = $$pre38;$$pre$phi41Z2D = $43;$241 = $44;
       }
       $46 = (($__buf) + 4|0);
       $47 = (($__atoms) + 24|0);
       $48 = (($__atoms) + 25|0);
       $49 = (($__atoms) + 26|0);
       $50 = $__atoms;
       $$pre = HEAP32[$__b>>2]|0;
       $$pre$i$i$i9 = $$pre;$175 = 0;$242 = $__g;$81 = $241;$__a$0 = $241;
       L18: while(1) {
        $51 = ($$pre$i$i$i9|0)==(0|0);
        if ($51) {
         $65 = 0;
        } else {
         $52 = (($$pre$i$i$i9) + 12|0);
         $53 = HEAP32[$52>>2]|0;
         $54 = (($$pre$i$i$i9) + 16|0);
         $55 = HEAP32[$54>>2]|0;
         $56 = ($53|0)==($55|0);
         if ($56) {
          $57 = HEAP32[$$pre$i$i$i9>>2]|0;
          $58 = (($57) + 36|0);
          $59 = HEAP32[$58>>2]|0;
          __THREW__ = 0;
          $60 = (invoke_ii($59|0,($$pre$i$i$i9|0))|0);
          $61 = __THREW__; __THREW__ = 0;
          $62 = $61&1;
          if ($62) {
           label = 44;
           break;
          }
          $63 = ($60|0)==(-1);
          if ($63) {
           HEAP32[$__b>>2] = 0;
           $65 = 0;
          } else {
           $65 = $$pre$i$i$i9;
          }
         } else {
          $65 = $$pre$i$i$i9;
         }
        }
        $64 = ($65|0)==(0|0);
        $66 = HEAP32[$__e>>2]|0;
        $67 = ($66|0)==(0|0);
        do {
         if ($67) {
          label = 26;
         } else {
          $68 = (($66) + 12|0);
          $69 = HEAP32[$68>>2]|0;
          $70 = (($66) + 16|0);
          $71 = HEAP32[$70>>2]|0;
          $72 = ($69|0)==($71|0);
          if (!($72)) {
           if ($64) {
            break;
           } else {
            $__a$2 = $__a$0;
            break L18;
           }
          }
          $73 = HEAP32[$66>>2]|0;
          $74 = (($73) + 36|0);
          $75 = HEAP32[$74>>2]|0;
          __THREW__ = 0;
          $76 = (invoke_ii($75|0,($66|0))|0);
          $77 = __THREW__; __THREW__ = 0;
          $78 = $77&1;
          if ($78) {
           label = 44;
           break L18;
          }
          $79 = ($76|0)==(-1);
          if ($79) {
           HEAP32[$__e>>2] = 0;
           label = 26;
           break;
          } else {
           if ($64) {
            break;
           } else {
            $__a$2 = $__a$0;
            break L18;
           }
          }
         }
        } while(0);
        if ((label|0) == 26) {
         label = 0;
         if ($64) {
          $__a$2 = $__a$0;
          break;
         }
        }
        $80 = $81;
        $82 = $__a$0;
        $83 = (($80) - ($82))|0;
        $84 = HEAP8[$__buf>>0]|0;
        $85 = $84 & 1;
        $86 = ($85<<24>>24)==(0);
        if ($86) {
         $88 = $84&255;
         $89 = $88 >>> 1;
         $91 = $89;
        } else {
         $87 = HEAP32[$46>>2]|0;
         $91 = $87;
        }
        $90 = ($83|0)==($91|0);
        if ($90) {
         if ($86) {
          $93 = $84&255;
          $94 = $93 >>> 1;
          $96 = $94;
         } else {
          $92 = HEAP32[$46>>2]|0;
          $96 = $92;
         }
         $95 = $96 << 1;
         __THREW__ = 0;
         invoke_vii(451,($__buf|0),($95|0));
         $97 = __THREW__; __THREW__ = 0;
         $98 = $97&1;
         if ($98) {
          label = 44;
          break;
         }
         $99 = HEAP8[$__buf>>0]|0;
         $100 = $99 & 1;
         $101 = ($100<<24>>24)==(0);
         if ($101) {
          $104 = 10;
         } else {
          $102 = HEAP32[$__buf>>2]|0;
          $103 = $102 & -2;
          $phitmp$i22 = (($103) + -1)|0;
          $104 = $phitmp$i22;
         }
         __THREW__ = 0;
         invoke_vii(451,($__buf|0),($104|0));
         $105 = __THREW__; __THREW__ = 0;
         $106 = $105&1;
         if ($106) {
          label = 44;
          break;
         }
         $107 = HEAP8[$__buf>>0]|0;
         $108 = $107 & 1;
         $109 = ($108<<24>>24)==(0);
         if ($109) {
          $112 = $$pre$phi39Z2D;
         } else {
          $110 = HEAP32[$$pre$phi41Z2D>>2]|0;
          $112 = $110;
         }
         $111 = (($112) + ($96)|0);
         $146 = $111;$__a$1 = $112;
        } else {
         $146 = $81;$__a$1 = $__a$0;
        }
        $131 = (($65) + 12|0);
        $132 = HEAP32[$131>>2]|0;
        $133 = (($65) + 16|0);
        $134 = HEAP32[$133>>2]|0;
        $135 = ($132|0)==($134|0);
        if ($135) {
         $136 = HEAP32[$65>>2]|0;
         $137 = (($136) + 36|0);
         $138 = HEAP32[$137>>2]|0;
         __THREW__ = 0;
         $139 = (invoke_ii($138|0,($65|0))|0);
         $140 = __THREW__; __THREW__ = 0;
         $141 = $140&1;
         if ($141) {
          label = 44;
          break;
         } else {
          $$0$i$i = $139;
         }
        } else {
         $142 = HEAP8[$132>>0]|0;
         $143 = $142&255;
         $$0$i$i = $143;
        }
        $144 = $$0$i$i&255;
        $145 = ($146|0)==($__a$1|0);
        do {
         if ($145) {
          $147 = HEAP8[$47>>0]|0;
          $148 = ($147<<24>>24)==($144<<24>>24);
          if (!($148)) {
           $149 = HEAP8[$48>>0]|0;
           $150 = ($149<<24>>24)==($144<<24>>24);
           if (!($150)) {
            $$01$i$i = $__atoms;
            label = 57;
            break;
           }
          }
          $151 = $148 ? 43 : 45;
          $152 = (($146) + 1|0);
          HEAP8[$146>>0] = $151;
          $$ph = $152;$$ph32 = 0;
         } else {
          $$01$i$i = $__atoms;
          label = 57;
         }
        } while(0);
        do {
         if ((label|0) == 57) {
          while(1) {
           label = 0;
           $155 = HEAP8[$$01$i$i>>0]|0;
           $156 = ($155<<24>>24)==($144<<24>>24);
           $154 = (($$01$i$i) + 1|0);
           if ($156) {
            $$0$lcssa$i$i = $$01$i$i;
            break;
           }
           $153 = ($154|0)==($49|0);
           if ($153) {
            $$0$lcssa$i$i = $49;
            break;
           } else {
            $$01$i$i = $154;
            label = 57;
           }
          }
          $157 = $$0$lcssa$i$i;
          $158 = (($157) - ($50))|0;
          $159 = ($158|0)>(23);
          if ($159) {
           $__a$2 = $__a$1;
           break L18;
          }
          $160 = ($158|0)<(22);
          if ($160) {
           $171 = (4976 + ($158)|0);
           $172 = HEAP8[$171>>0]|0;
           $173 = (($146) + 1|0);
           HEAP8[$146>>0] = $172;
           $174 = (($175) + 1)|0;
           $$ph = $173;$$ph32 = $174;
           break;
          }
          if ($145) {
           $__a$2 = $146;
           break L18;
          }
          $161 = $146;
          $162 = $__a$1;
          $163 = (($161) - ($162))|0;
          $164 = ($163|0)<(3);
          if (!($164)) {
           $__a$2 = $__a$1;
           break L18;
          }
          $165 = (($146) + -1|0);
          $166 = HEAP8[$165>>0]|0;
          $167 = ($166<<24>>24)==(48);
          if (!($167)) {
           $__a$2 = $__a$1;
           break L18;
          }
          $168 = (4976 + ($158)|0);
          $169 = HEAP8[$168>>0]|0;
          $170 = (($146) + 1|0);
          HEAP8[$146>>0] = $169;
          $$ph = $170;$$ph32 = 0;
         }
        } while(0);
        $176 = HEAP32[$__b>>2]|0;
        $177 = (($176) + 12|0);
        $178 = HEAP32[$177>>2]|0;
        $179 = (($176) + 16|0);
        $180 = HEAP32[$179>>2]|0;
        $181 = ($178|0)==($180|0);
        if ($181) {
         $182 = HEAP32[$176>>2]|0;
         $183 = (($182) + 40|0);
         $184 = HEAP32[$183>>2]|0;
         __THREW__ = 0;
         (invoke_ii($184|0,($176|0))|0);
         $185 = __THREW__; __THREW__ = 0;
         $186 = $185&1;
         if ($186) {
          label = 44;
          break;
         } else {
          $242$phi = $242;$$pre$i$i$i9 = $176;$175 = $$ph32;$81 = $$ph;$__a$0 = $__a$1;$242 = $242$phi;
          continue;
         }
        } else {
         $187 = (($178) + 1|0);
         HEAP32[$177>>2] = $187;
         $242$phi = $242;$$pre$i$i$i9 = $176;$175 = $$ph32;$81 = $$ph;$__a$0 = $__a$1;$242 = $242$phi;
         continue;
        }
       }
       if ((label|0) == 44) {
        $121 = ___cxa_find_matching_catch(-1,-1)|0;
        $122 = tempRet0;
        $eh$lpad$body$index10Z2D = $122;$eh$lpad$body$indexZ2D = $121;
        break;
       }
       $188 = (($__a$2) + 3|0);
       HEAP8[$188>>0] = 0;
       $189 = HEAP8[6328>>0]|0;
       $190 = ($189<<24>>24)==(0);
       do {
        if ($190) {
         $191 = (___cxa_guard_acquire((6328|0))|0);
         $192 = ($191|0)==(0);
         if (!($192)) {
          __THREW__ = 0;
          $193 = (invoke_iiii(461,2147483647,(6336|0),(0|0))|0);
          $194 = __THREW__; __THREW__ = 0;
          $195 = $194&1;
          if ($195) {
           $196 = ___cxa_find_matching_catch(-1,-1)|0;
           $197 = tempRet0;
           ___cxa_guard_abort((6328|0));
           $eh$lpad$body$index10Z2D = $197;$eh$lpad$body$indexZ2D = $196;
           break L12;
          } else {
           HEAP32[6320>>2] = $193;
           ___cxa_guard_release((6328|0));
           break;
          }
         }
        }
       } while(0);
       $198 = HEAP32[6320>>2]|0;
       __THREW__ = 0;
       HEAP32[$vararg_buffer>>2] = $__v;
       $199 = (invoke_iiii(462,($__a$2|0),($198|0),($vararg_buffer|0))|0);
       $200 = __THREW__; __THREW__ = 0;
       $201 = $200&1;
       if ($201) {
        label = 45;
       } else {
        $202 = ($199|0)==(1);
        if (!($202)) {
         HEAP32[$__err>>2] = 4;
        }
        $203 = HEAP32[$__b>>2]|0;
        $204 = ($203|0)==(0|0);
        if ($204) {
         $218 = 0;
        } else {
         $205 = (($203) + 12|0);
         $206 = HEAP32[$205>>2]|0;
         $207 = (($203) + 16|0);
         $208 = HEAP32[$207>>2]|0;
         $209 = ($206|0)==($208|0);
         if ($209) {
          $210 = HEAP32[$203>>2]|0;
          $211 = (($210) + 36|0);
          $212 = HEAP32[$211>>2]|0;
          __THREW__ = 0;
          $213 = (invoke_ii($212|0,($203|0))|0);
          $214 = __THREW__; __THREW__ = 0;
          $215 = $214&1;
          if ($215) {
           label = 45;
           break;
          }
          $216 = ($213|0)==(-1);
          if ($216) {
           HEAP32[$__b>>2] = 0;
           $218 = 0;
          } else {
           $218 = $203;
          }
         } else {
          $218 = $203;
         }
        }
        $217 = ($218|0)==(0|0);
        $219 = HEAP32[$__e>>2]|0;
        $220 = ($219|0)==(0|0);
        do {
         if ($220) {
          label = 87;
         } else {
          $221 = (($219) + 12|0);
          $222 = HEAP32[$221>>2]|0;
          $223 = (($219) + 16|0);
          $224 = HEAP32[$223>>2]|0;
          $225 = ($222|0)==($224|0);
          if (!($225)) {
           if ($217) {
            break;
           } else {
            label = 89;
            break;
           }
          }
          $226 = HEAP32[$219>>2]|0;
          $227 = (($226) + 36|0);
          $228 = HEAP32[$227>>2]|0;
          __THREW__ = 0;
          $229 = (invoke_ii($228|0,($219|0))|0);
          $230 = __THREW__; __THREW__ = 0;
          $231 = $230&1;
          if ($231) {
           label = 45;
           break L12;
          }
          $232 = ($229|0)==(-1);
          if ($232) {
           HEAP32[$__e>>2] = 0;
           label = 87;
           break;
          } else {
           if ($217) {
            break;
           } else {
            label = 89;
            break;
           }
          }
         }
        } while(0);
        if ((label|0) == 87) {
         if ($217) {
          label = 89;
         }
        }
        if ((label|0) == 89) {
         $233 = HEAP32[$__err>>2]|0;
         $234 = $233 | 2;
         HEAP32[$__err>>2] = $234;
        }
        HEAP32[$agg$result>>2] = $218;
        $235 = HEAP8[$__buf>>0]|0;
        $236 = $235 & 1;
        $237 = ($236<<24>>24)==(0);
        if ($237) {
         STACKTOP = sp;return;
        }
        $238 = (($__buf) + 8|0);
        $239 = HEAP32[$238>>2]|0;
        $240 = ($239|0)==(0|0);
        if ($240) {
         STACKTOP = sp;return;
        }
        _free($239);
        STACKTOP = sp;return;
       }
      }
     } while(0);
     if ((label|0) == 45) {
      $123 = ___cxa_find_matching_catch(-1,-1)|0;
      $124 = tempRet0;
      $eh$lpad$body$index10Z2D = $124;$eh$lpad$body$indexZ2D = $123;
     }
     $125 = HEAP8[$__buf>>0]|0;
     $126 = $125 & 1;
     $127 = ($126<<24>>24)==(0);
     if ($127) {
      $$0 = $eh$lpad$body$indexZ2D;$$01 = $eh$lpad$body$index10Z2D;
      ___resumeException($$0|0);
      // unreachable;
     }
     $128 = (($__buf) + 8|0);
     $129 = HEAP32[$128>>2]|0;
     $130 = ($129|0)==(0|0);
     if ($130) {
      $$0 = $eh$lpad$body$indexZ2D;$$01 = $eh$lpad$body$index10Z2D;
      ___resumeException($$0|0);
      // unreachable;
     }
     _free($129);
     $$0 = $eh$lpad$body$indexZ2D;$$01 = $eh$lpad$body$index10Z2D;
     ___resumeException($$0|0);
     // unreachable;
    }
   }
   $24 = (___cxa_allocate_exception(4)|0);
   HEAP32[$24>>2] = ((14256 + 8|0));
   __THREW__ = 0;
   invoke_viii(379,($24|0),(14336|0),(351|0));
   $25 = __THREW__; __THREW__ = 0;
   $26 = $25&1;
   if (!($26)) {
    // unreachable;
   }
  }
 } while(0);
 $113 = ___cxa_find_matching_catch(-1,-1)|0;
 $114 = tempRet0;
 $115 = (($1) + 4|0);
 $116 = HEAP32[$115>>2]|0;HEAP32[$115>>2] = (($116+-1)|0);
 $117 = ($116|0)==(0);
 if (!($117)) {
  $$0 = $113;$$01 = $114;
  ___resumeException($$0|0);
  // unreachable;
 }
 $118 = HEAP32[$1>>2]|0;
 $119 = (($118) + 8|0);
 $120 = HEAP32[$119>>2]|0;
 FUNCTION_TABLE_vi[$120 & 511]($1);
 $$0 = $113;$$01 = $114;
 ___resumeException($$0|0);
 // unreachable;
}
function __ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($__ct,$__base,$__a,$__a_end,$__dc,$__thousands_sep,$__grouping,$__g,$__g_end,$__atoms) {
 $__ct = $__ct|0;
 $__base = $__base|0;
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__dc = $__dc|0;
 $__thousands_sep = $__thousands_sep|0;
 $__grouping = $__grouping|0;
 $__g = $__g|0;
 $__g_end = $__g_end|0;
 $__atoms = $__atoms|0;
 var $$0 = 0, $$0$lcssa$i = 0, $$01$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$__a_end>>2]|0;
 $1 = ($0|0)==($__a|0);
 do {
  if ($1) {
   $2 = (($__atoms) + 24|0);
   $3 = HEAP8[$2>>0]|0;
   $4 = ($3<<24>>24)==($__ct<<24>>24);
   if (!($4)) {
    $5 = (($__atoms) + 25|0);
    $6 = HEAP8[$5>>0]|0;
    $7 = ($6<<24>>24)==($__ct<<24>>24);
    if (!($7)) {
     break;
    }
   }
   $8 = $4 ? 43 : 45;
   $9 = (($__a) + 1|0);
   HEAP32[$__a_end>>2] = $9;
   HEAP8[$__a>>0] = $8;
   HEAP32[$__dc>>2] = 0;
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 $10 = HEAP8[$__grouping>>0]|0;
 $11 = $10 & 1;
 $12 = ($11<<24>>24)==(0);
 if ($12) {
  $15 = $10&255;
  $16 = $15 >>> 1;
  $18 = $16;
 } else {
  $13 = (($__grouping) + 4|0);
  $14 = HEAP32[$13>>2]|0;
  $18 = $14;
 }
 $17 = ($18|0)!=(0);
 $19 = ($__ct<<24>>24)==($__thousands_sep<<24>>24);
 $or$cond = $17 & $19;
 if ($or$cond) {
  $20 = HEAP32[$__g_end>>2]|0;
  $21 = $20;
  $22 = $__g;
  $23 = (($21) - ($22))|0;
  $24 = ($23|0)<(160);
  if (!($24)) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  $25 = HEAP32[$__dc>>2]|0;
  $26 = (($20) + 4|0);
  HEAP32[$__g_end>>2] = $26;
  HEAP32[$20>>2] = $25;
  HEAP32[$__dc>>2] = 0;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $27 = (($__atoms) + 26|0);
 $$01$i = $__atoms;
 while(1) {
  $30 = HEAP8[$$01$i>>0]|0;
  $31 = ($30<<24>>24)==($__ct<<24>>24);
  $29 = (($$01$i) + 1|0);
  if ($31) {
   $$0$lcssa$i = $$01$i;
   break;
  }
  $28 = ($29|0)==($27|0);
  if ($28) {
   $$0$lcssa$i = $27;
   break;
  } else {
   $$01$i = $29;
  }
 }
 $32 = $$0$lcssa$i;
 $33 = $__atoms;
 $34 = (($32) - ($33))|0;
 $35 = ($34|0)>(23);
 if ($35) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 if ((($__base|0) == 16)) {
  $37 = ($34|0)<(22);
  if (!($37)) {
   if ($1) {
    $$0 = -1;
    STACKTOP = sp;return ($$0|0);
   }
   $38 = $0;
   $39 = $__a;
   $40 = (($38) - ($39))|0;
   $41 = ($40|0)<(3);
   if (!($41)) {
    $$0 = -1;
    STACKTOP = sp;return ($$0|0);
   }
   $42 = (($0) + -1|0);
   $43 = HEAP8[$42>>0]|0;
   $44 = ($43<<24>>24)==(48);
   if (!($44)) {
    $$0 = -1;
    STACKTOP = sp;return ($$0|0);
   }
   HEAP32[$__dc>>2] = 0;
   $45 = (4976 + ($34)|0);
   $46 = HEAP8[$45>>0]|0;
   $47 = (($0) + 1|0);
   HEAP32[$__a_end>>2] = $47;
   HEAP8[$0>>0] = $46;
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 } else if ((($__base|0) == 10) | (($__base|0) == 8)) {
  $36 = ($34|0)<($__base|0);
  if (!($36)) {
   $$0 = -1;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $48 = (4976 + ($34)|0);
 $49 = HEAP8[$48>>0]|0;
 $50 = (($0) + 1|0);
 HEAP32[$__a_end>>2] = $50;
 HEAP8[$0>>0] = $49;
 $51 = HEAP32[$__dc>>2]|0;
 $52 = (($51) + 1)|0;
 HEAP32[$__dc>>2] = $52;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt3__110__sscanf_lEPKcP15__locale_structS1_z($__s,$__l,$varargs) {
 $__s = $__s|0;
 $__l = $__l|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $__va = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $__va = sp;
 HEAP32[$__va>>2] = $varargs;
 $0 = (_uselocale(($__l|0))|0);
 $1 = (_vsscanf($__s,5016,$__va)|0);
 $2 = ($0|0)==(0|0);
 if ($2) {
  STACKTOP = sp;return ($1|0);
 }
 __THREW__ = 0;
 (invoke_ii(463,($0|0))|0);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $5 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
  $6 = tempRet0;
  ___clang_call_terminate($5);
  // unreachable;
 } else {
  STACKTOP = sp;return ($1|0);
 }
 return 0|0;
}
function __ZNSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($this|0)==(0|0);
 if (!($0)) {
  _free($this);
 }
 STACKTOP = sp;return;
}
function __ZNSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRb($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $$byval_copy = 0, $$byval_copy14 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__lv = 0, $__names = 0, $__p$i$i$i$i = 0;
 var $__p$i$i$i$i4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $$byval_copy14 = sp + 76|0;
 $$byval_copy = sp + 72|0;
 $__p$i$i$i$i4 = sp + 16|0;
 $__p$i$i$i$i = sp;
 $__lv = sp + 68|0;
 $0 = sp + 64|0;
 $1 = sp + 60|0;
 $2 = sp + 56|0;
 $__names = sp + 32|0;
 $3 = (($__iob) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 1;
 $6 = ($5|0)==(0);
 if ($6) {
  HEAP32[$__lv>>2] = -1;
  $7 = HEAP32[$this>>2]|0;
  $8 = (($7) + 16|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = HEAP32[$__b>>2]|0;
  HEAP32[$1>>2] = $10;
  $11 = HEAP32[$__e>>2]|0;
  HEAP32[$2>>2] = $11;
  ;HEAP32[$$byval_copy+0>>2]=HEAP32[$1+0>>2]|0;
  ;HEAP32[$$byval_copy14+0>>2]=HEAP32[$2+0>>2]|0;
  FUNCTION_TABLE_viiiiiii[$9 & 511]($0,$this,$$byval_copy,$$byval_copy14,$__iob,$__err,$__lv);
  $12 = HEAP32[$0>>2]|0;
  HEAP32[$__b>>2] = $12;
  $13 = HEAP32[$__lv>>2]|0;
  if ((($13|0) == 1)) {
   HEAP8[$__v>>0] = 1;
  } else if ((($13|0) == 0)) {
   HEAP8[$__v>>0] = 0;
  } else {
   HEAP8[$__v>>0] = 1;
   HEAP32[$__err>>2] = 4;
  }
  HEAP32[$agg$result>>2] = $12;
  STACKTOP = sp;return;
 }
 $14 = (($__iob) + 28|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (($15) + 4|0);
 $17 = HEAP32[$16>>2]|0;HEAP32[$16>>2] = (($17+1)|0);
 $18 = HEAP32[6408>>2]|0;
 $19 = ($18|0)==(-1);
 if ($19) {
  label = 9;
 } else {
  HEAP32[$__p$i$i$i$i>>2] = 6408;
  $20 = (($__p$i$i$i$i) + 4|0);
  HEAP32[$20>>2] = (439);
  $21 = (($__p$i$i$i$i) + 8|0);
  HEAP32[$21>>2] = 0;
  __THREW__ = 0;
  invoke_vii(440,(6408|0),($__p$i$i$i$i|0));
  $22 = __THREW__; __THREW__ = 0;
  $23 = $22&1;
  if (!($23)) {
   label = 9;
  }
 }
 if ((label|0) == 9) {
  $24 = HEAP32[((6408 + 4|0))>>2]|0;
  $25 = (($24) + -1)|0;
  $26 = (($15) + 12|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = (($15) + 8|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = $27;
  $31 = $29;
  $32 = (($30) - ($31))|0;
  $33 = $32 >> 2;
  $34 = ($33>>>0)>($25>>>0);
  if ($34) {
   $35 = (($29) + ($25<<2)|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = ($36|0)==(0|0);
   if (!($37)) {
    $41 = (($15) + 4|0);
    $42 = HEAP32[$41>>2]|0;HEAP32[$41>>2] = (($42+-1)|0);
    $43 = ($42|0)==(0);
    if ($43) {
     $44 = HEAP32[$15>>2]|0;
     $45 = (($44) + 8|0);
     $46 = HEAP32[$45>>2]|0;
     FUNCTION_TABLE_vi[$46 & 511]($15);
    }
    $47 = HEAP32[$14>>2]|0;
    $48 = (($47) + 4|0);
    $49 = HEAP32[$48>>2]|0;HEAP32[$48>>2] = (($49+1)|0);
    $50 = HEAP32[6568>>2]|0;
    $51 = ($50|0)==(-1);
    if ($51) {
     label = 17;
    } else {
     HEAP32[$__p$i$i$i$i4>>2] = 6568;
     $52 = (($__p$i$i$i$i4) + 4|0);
     HEAP32[$52>>2] = (439);
     $53 = (($__p$i$i$i$i4) + 8|0);
     HEAP32[$53>>2] = 0;
     __THREW__ = 0;
     invoke_vii(440,(6568|0),($__p$i$i$i$i4|0));
     $54 = __THREW__; __THREW__ = 0;
     $55 = $54&1;
     if (!($55)) {
      label = 17;
     }
    }
    if ((label|0) == 17) {
     $56 = HEAP32[((6568 + 4|0))>>2]|0;
     $57 = (($56) + -1)|0;
     $58 = (($47) + 12|0);
     $59 = HEAP32[$58>>2]|0;
     $60 = (($47) + 8|0);
     $61 = HEAP32[$60>>2]|0;
     $62 = $59;
     $63 = $61;
     $64 = (($62) - ($63))|0;
     $65 = $64 >> 2;
     $66 = ($65>>>0)>($57>>>0);
     if ($66) {
      $67 = (($61) + ($57<<2)|0);
      $68 = HEAP32[$67>>2]|0;
      $69 = ($68|0)==(0|0);
      if (!($69)) {
       $73 = (($47) + 4|0);
       $74 = HEAP32[$73>>2]|0;HEAP32[$73>>2] = (($74+-1)|0);
       $75 = ($74|0)==(0);
       if ($75) {
        $76 = HEAP32[$47>>2]|0;
        $77 = (($76) + 8|0);
        $78 = HEAP32[$77>>2]|0;
        FUNCTION_TABLE_vi[$78 & 511]($47);
       }
       $79 = HEAP32[$68>>2]|0;
       $80 = (($79) + 24|0);
       $81 = HEAP32[$80>>2]|0;
       __THREW__ = 0;
       invoke_vii($81|0,($__names|0),($68|0));
       $82 = __THREW__; __THREW__ = 0;
       $83 = $82&1;
       if ($83) {
        $$02 = $__names;
       } else {
        $84 = (($__names) + 12|0);
        $85 = HEAP32[$68>>2]|0;
        $86 = (($85) + 28|0);
        $87 = HEAP32[$86>>2]|0;
        __THREW__ = 0;
        invoke_vii($87|0,($84|0),($68|0));
        $88 = __THREW__; __THREW__ = 0;
        $89 = $88&1;
        if ($89) {
         $$02 = $84;
        } else {
         $90 = HEAP32[$__e>>2]|0;
         $91 = (($__names) + 24|0);
         __THREW__ = 0;
         $92 = (invoke_iiiiiiii(464,($__b|0),($90|0),($__names|0),($91|0),($36|0),($__err|0),1)|0);
         $93 = __THREW__; __THREW__ = 0;
         $94 = $93&1;
         if ($94) {
          $138 = ___cxa_find_matching_catch(-1,-1)|0;
          $139 = tempRet0;
          $140 = HEAP8[$84>>0]|0;
          $141 = $140 & 1;
          $142 = ($141<<24>>24)==(0);
          do {
           if (!($142)) {
            $143 = (($__names) + 20|0);
            $144 = HEAP32[$143>>2]|0;
            $145 = ($144|0)==(0|0);
            if ($145) {
             break;
            }
            _free($144);
           }
          } while(0);
          $146 = HEAP8[$__names>>0]|0;
          $147 = $146 & 1;
          $148 = ($147<<24>>24)==(0);
          do {
           if (!($148)) {
            $149 = (($__names) + 8|0);
            $150 = HEAP32[$149>>2]|0;
            $151 = ($150|0)==(0|0);
            if ($151) {
             break;
            }
            _free($150);
           }
          } while(0);
          $$0 = $138;$$01 = $139;
          ___resumeException($$0|0);
          // unreachable;
         }
         $95 = ($92|0)==($__names|0);
         $96 = $95&1;
         HEAP8[$__v>>0] = $96;
         $97 = HEAP32[$__b>>2]|0;
         HEAP32[$agg$result>>2] = $97;
         $98 = HEAP8[$84>>0]|0;
         $99 = $98 & 1;
         $100 = ($99<<24>>24)==(0);
         if (!($100)) {
          $101 = (($__names) + 20|0);
          $102 = HEAP32[$101>>2]|0;
          $103 = ($102|0)==(0|0);
          if (!($103)) {
           _free($102);
          }
         }
         $104 = HEAP8[$__names>>0]|0;
         $105 = $104 & 1;
         $106 = ($105<<24>>24)==(0);
         if ($106) {
          STACKTOP = sp;return;
         }
         $107 = (($__names) + 8|0);
         $108 = HEAP32[$107>>2]|0;
         $109 = ($108|0)==(0|0);
         if ($109) {
          STACKTOP = sp;return;
         }
         _free($108);
         STACKTOP = sp;return;
        }
       }
       $126 = ___cxa_find_matching_catch(-1,-1)|0;
       $127 = tempRet0;
       $128 = ($__names|0)==($$02|0);
       if ($128) {
        $$0 = $126;$$01 = $127;
        ___resumeException($$0|0);
        // unreachable;
       } else {
        $130 = $$02;
       }
       while(1) {
        $129 = (($130) + -12|0);
        $131 = HEAP8[$129>>0]|0;
        $132 = $131 & 1;
        $133 = ($132<<24>>24)==(0);
        if (!($133)) {
         $134 = (($130) + -4|0);
         $135 = HEAP32[$134>>2]|0;
         $136 = ($135|0)==(0|0);
         if (!($136)) {
          _free($135);
         }
        }
        $137 = ($129|0)==($__names|0);
        if ($137) {
         $$0 = $126;$$01 = $127;
         break;
        } else {
         $130 = $129;
        }
       }
       ___resumeException($$0|0);
       // unreachable;
      }
     }
     $70 = (___cxa_allocate_exception(4)|0);
     HEAP32[$70>>2] = ((14256 + 8|0));
     __THREW__ = 0;
     invoke_viii(379,($70|0),(14336|0),(351|0));
     $71 = __THREW__; __THREW__ = 0;
     $72 = $71&1;
     if (!($72)) {
      // unreachable;
     }
    }
    $118 = ___cxa_find_matching_catch(-1,-1)|0;
    $119 = tempRet0;
    $120 = (($47) + 4|0);
    $121 = HEAP32[$120>>2]|0;HEAP32[$120>>2] = (($121+-1)|0);
    $122 = ($121|0)==(0);
    if (!($122)) {
     $$0 = $118;$$01 = $119;
     ___resumeException($$0|0);
     // unreachable;
    }
    $123 = HEAP32[$47>>2]|0;
    $124 = (($123) + 8|0);
    $125 = HEAP32[$124>>2]|0;
    FUNCTION_TABLE_vi[$125 & 511]($47);
    $$0 = $118;$$01 = $119;
    ___resumeException($$0|0);
    // unreachable;
   }
  }
  $38 = (___cxa_allocate_exception(4)|0);
  HEAP32[$38>>2] = ((14256 + 8|0));
  __THREW__ = 0;
  invoke_viii(379,($38|0),(14336|0),(351|0));
  $39 = __THREW__; __THREW__ = 0;
  $40 = $39&1;
  if (!($40)) {
   // unreachable;
  }
 }
 $110 = ___cxa_find_matching_catch(-1,-1)|0;
 $111 = tempRet0;
 $112 = (($15) + 4|0);
 $113 = HEAP32[$112>>2]|0;HEAP32[$112>>2] = (($113+-1)|0);
 $114 = ($113|0)==(0);
 if (!($114)) {
  $$0 = $110;$$01 = $111;
  ___resumeException($$0|0);
  // unreachable;
 }
 $115 = HEAP32[$15>>2]|0;
 $116 = (($115) + 8|0);
 $117 = HEAP32[$116>>2]|0;
 FUNCTION_TABLE_vi[$117 & 511]($15);
 $$0 = $110;$$01 = $111;
 ___resumeException($$0|0);
 // unreachable;
}
function __ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$__e$0,$__kb,$__ke,$__ct,$__err,$__case_sensitive) {
 $__b = $__b|0;
 $__e$0 = $__e$0|0;
 $__kb = $__kb|0;
 $__ke = $__ke|0;
 $__ct = $__ct|0;
 $__err = $__err|0;
 $__case_sensitive = $__case_sensitive|0;
 var $$ = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i11 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i17 = 0, $$028 = 0, $$03082 = 0, $$5 = 0, $$__e$sroa$0$0 = 0, $$__e$sroa$0$04 = 0, $$index = 0, $$index17 = 0, $$not = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i13 = 0, $$pre$i3$i$i19 = 0, $0 = 0, $1 = 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__c$0 = 0, $__consume$0$off0$lcssa = 0, $__consume$0$off039 = 0, $__consume$0$off039$us = 0, $__consume$1$off0 = 0, $__consume$1$off0$us = 0, $__e$sroa$0$0 = 0, $__e$sroa$0$0$ph = 0;
 var $__e$sroa$0$1 = 0, $__indx$0 = 0, $__indx$0$ph = 0, $__ky$068 = 0, $__ky1$040 = 0, $__ky1$040$us = 0, $__ky2$051 = 0, $__n_does_match$0$lcssa = 0, $__n_does_match$066 = 0, $__n_does_match$1 = 0, $__n_does_match$2$ph = 0, $__n_does_match$3$lcssa = 0, $__n_does_match$336 = 0, $__n_does_match$336$us = 0, $__n_does_match$4 = 0, $__n_does_match$4$us = 0, $__n_does_match$549 = 0, $__n_does_match$6 = 0, $__n_might_match$0$lcssa = 0, $__n_might_match$065 = 0;
 var $__n_might_match$1 = 0, $__n_might_match$2$ph = 0, $__n_might_match$3$lcssa = 0, $__n_might_match$335 = 0, $__n_might_match$335$us = 0, $__n_might_match$4 = 0, $__n_might_match$4$us = 0, $__st$067 = 0, $__st$137 = 0, $__st$137$us = 0, $__st$250 = 0, $__st$32983 = 0, $__statbuf = 0, $__status$0 = 0, $lpad$phi$index = 0, $lpad$phi$index9 = 0, $phitmp$i$i$i = 0, $phitmp$i$i$i14 = 0, $tmp$i$i = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $__statbuf = sp;
 $0 = $__ke;
 $1 = $__kb;
 $2 = (($0) - ($1))|0;
 $3 = (($2|0) / 12)&-1;
 $4 = ($3>>>0)>(100);
 if ($4) {
  $5 = (_malloc($3)|0);
  $6 = ($5|0)==(0|0);
  if ($6) {
   $7 = (___cxa_allocate_exception(4)|0);
   HEAP32[$7>>2] = ((15656 + 8|0));
   __THREW__ = 0;
   invoke_viii(379,($7|0),(15712|0),(374|0));
   $8 = __THREW__; __THREW__ = 0;
   $9 = $8&1;
   if (!($9)) {
    // unreachable;
   }
   $10 = ___cxa_find_matching_catch(-1,-1)|0;
   $11 = tempRet0;
   $$index = $10;$$index17 = $11;
   ___resumeException($$index|0);
   // unreachable;
  } else {
   $21 = $5;$__status$0 = $5;
  }
 } else {
  $21 = 0;$__status$0 = $__statbuf;
 }
 $22 = ($__kb|0)==($__ke|0);
 if ($22) {
  $__n_does_match$0$lcssa = 0;$__n_might_match$0$lcssa = $3;
 } else {
  $__ky$068 = $__kb;$__n_does_match$066 = 0;$__n_might_match$065 = $3;$__st$067 = $__status$0;
  while(1) {
   $23 = HEAP8[$__ky$068>>0]|0;
   $24 = $23 & 1;
   $25 = ($24<<24>>24)==(0);
   if ($25) {
    $28 = $23&255;
    $29 = $28 >>> 1;
    $31 = $29;
   } else {
    $26 = (($__ky$068) + 4|0);
    $27 = HEAP32[$26>>2]|0;
    $31 = $27;
   }
   $30 = ($31|0)==(0);
   if ($30) {
    HEAP8[$__st$067>>0] = 2;
    $32 = (($__n_might_match$065) + -1)|0;
    $33 = (($__n_does_match$066) + 1)|0;
    $__n_does_match$1 = $33;$__n_might_match$1 = $32;
   } else {
    HEAP8[$__st$067>>0] = 1;
    $__n_does_match$1 = $__n_does_match$066;$__n_might_match$1 = $__n_might_match$065;
   }
   $34 = (($__ky$068) + 12|0);
   $35 = (($__st$067) + 1|0);
   $36 = ($34|0)==($__ke|0);
   if ($36) {
    $__n_does_match$0$lcssa = $__n_does_match$1;$__n_might_match$0$lcssa = $__n_might_match$1;
    break;
   } else {
    $__ky$068 = $34;$__n_does_match$066 = $__n_does_match$1;$__n_might_match$065 = $__n_might_match$1;$__st$067 = $35;
   }
  }
 }
 $__e$sroa$0$0$ph = $__e$0;$__indx$0$ph = 0;$__n_does_match$2$ph = $__n_does_match$0$lcssa;$__n_might_match$2$ph = $__n_might_match$0$lcssa;
 L21: while(1) {
  $37 = ($__n_might_match$2$ph|0)!=(0);
  $__e$sroa$0$0 = $__e$sroa$0$0$ph;$__indx$0 = $__indx$0$ph;
  while(1) {
   $38 = HEAP32[$__b>>2]|0;
   $39 = ($38|0)==(0|0);
   do {
    if ($39) {
     $67 = 1;
    } else {
     $40 = (($38) + 12|0);
     $41 = HEAP32[$40>>2]|0;
     $42 = (($38) + 16|0);
     $43 = HEAP32[$42>>2]|0;
     $44 = ($41|0)==($43|0);
     if ($44) {
      $45 = HEAP32[$38>>2]|0;
      $46 = (($45) + 36|0);
      $47 = HEAP32[$46>>2]|0;
      __THREW__ = 0;
      $48 = (invoke_ii($47|0,($38|0))|0);
      $49 = __THREW__; __THREW__ = 0;
      $50 = $49&1;
      if ($50) {
       label = 7;
       break L21;
      } else {
       $$0$i$i$i$i = $48;
      }
     } else {
      $51 = HEAP32[$41>>2]|0;
      $$0$i$i$i$i = $51;
     }
     $52 = ($$0$i$i$i$i|0)==(-1);
     if ($52) {
      HEAP32[$__b>>2] = 0;
      $67 = 1;
      break;
     } else {
      $$pre$i$i$i = HEAP32[$__b>>2]|0;
      $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
      $67 = $phitmp$i$i$i;
      break;
     }
    }
   } while(0);
   $53 = ($__e$sroa$0$0|0)==(0|0);
   if ($53) {
    $$pre$i3$i$i19 = 0;$68 = 1;$__e$sroa$0$1 = 0;
   } else {
    $54 = (($__e$sroa$0$0) + 12|0);
    $55 = HEAP32[$54>>2]|0;
    $56 = (($__e$sroa$0$0) + 16|0);
    $57 = HEAP32[$56>>2]|0;
    $58 = ($55|0)==($57|0);
    if ($58) {
     $59 = HEAP32[$__e$sroa$0$0>>2]|0;
     $60 = (($59) + 36|0);
     $61 = HEAP32[$60>>2]|0;
     __THREW__ = 0;
     $62 = (invoke_ii($61|0,($__e$sroa$0$0|0))|0);
     $63 = __THREW__; __THREW__ = 0;
     $64 = $63&1;
     if ($64) {
      label = 7;
      break L21;
     } else {
      $$0$i$i1$i$i = $62;
     }
    } else {
     $65 = HEAP32[$55>>2]|0;
     $$0$i$i1$i$i = $65;
    }
    $66 = ($$0$i$i1$i$i|0)==(-1);
    $$__e$sroa$0$0 = $66 ? 0 : $__e$sroa$0$0;
    $$__e$sroa$0$04 = $66 ? 0 : $__e$sroa$0$0;
    $$5 = $66 ? 1 : 0;
    $$pre$i3$i$i19 = $$__e$sroa$0$04;$68 = $$5;$__e$sroa$0$1 = $$__e$sroa$0$0;
   }
   $tmp$i$i = $67 ^ $68;
   $$ = $tmp$i$i & $37;
   $69 = HEAP32[$__b>>2]|0;
   if (!($$)) {
    label = 82;
    break L21;
   }
   $70 = (($69) + 12|0);
   $71 = HEAP32[$70>>2]|0;
   $72 = (($69) + 16|0);
   $73 = HEAP32[$72>>2]|0;
   $74 = ($71|0)==($73|0);
   if ($74) {
    $75 = HEAP32[$69>>2]|0;
    $76 = (($75) + 36|0);
    $77 = HEAP32[$76>>2]|0;
    __THREW__ = 0;
    $78 = (invoke_ii($77|0,($69|0))|0);
    $79 = __THREW__; __THREW__ = 0;
    $80 = $79&1;
    if ($80) {
     label = 7;
     break L21;
    } else {
     $$0$i$i = $78;
    }
   } else {
    $81 = HEAP32[$71>>2]|0;
    $$0$i$i = $81;
   }
   if ($__case_sensitive) {
    $__c$0 = $$0$i$i;
   } else {
    $82 = HEAP32[$__ct>>2]|0;
    $83 = (($82) + 28|0);
    $84 = HEAP32[$83>>2]|0;
    __THREW__ = 0;
    $85 = (invoke_iii($84|0,($__ct|0),($$0$i$i|0))|0);
    $86 = __THREW__; __THREW__ = 0;
    $87 = $86&1;
    if ($87) {
     label = 7;
     break L21;
    } else {
     $__c$0 = $85;
    }
   }
   $$pre = (($__indx$0) + 1)|0;
   if ($22) {
    $__e$sroa$0$0 = $__e$sroa$0$1;$__indx$0 = $$pre;
   } else {
    break;
   }
  }
  L51: do {
   if ($__case_sensitive) {
    $__consume$0$off039$us = 0;$__ky1$040$us = $__kb;$__n_does_match$336$us = $__n_does_match$2$ph;$__n_might_match$335$us = $__n_might_match$2$ph;$__st$137$us = $__status$0;
    while(1) {
     $88 = HEAP8[$__st$137$us>>0]|0;
     $89 = ($88<<24>>24)==(1);
     do {
      if ($89) {
       $90 = HEAP8[$__ky1$040$us>>0]|0;
       $91 = $90 & 1;
       $92 = ($91<<24>>24)==(0);
       if ($92) {
        $95 = (($__ky1$040$us) + 4|0);
        $97 = $95;
       } else {
        $93 = (($__ky1$040$us) + 8|0);
        $94 = HEAP32[$93>>2]|0;
        $97 = $94;
       }
       $96 = (($97) + ($__indx$0<<2)|0);
       $98 = HEAP32[$96>>2]|0;
       $99 = ($__c$0|0)==($98|0);
       if (!($99)) {
        HEAP8[$__st$137$us>>0] = 0;
        $100 = (($__n_might_match$335$us) + -1)|0;
        $__consume$1$off0$us = $__consume$0$off039$us;$__n_does_match$4$us = $__n_does_match$336$us;$__n_might_match$4$us = $100;
        break;
       }
       if ($92) {
        $103 = $90&255;
        $104 = $103 >>> 1;
        $106 = $104;
       } else {
        $101 = (($__ky1$040$us) + 4|0);
        $102 = HEAP32[$101>>2]|0;
        $106 = $102;
       }
       $105 = ($106|0)==($$pre|0);
       if ($105) {
        HEAP8[$__st$137$us>>0] = 2;
        $107 = (($__n_might_match$335$us) + -1)|0;
        $108 = (($__n_does_match$336$us) + 1)|0;
        $__consume$1$off0$us = 1;$__n_does_match$4$us = $108;$__n_might_match$4$us = $107;
       } else {
        $__consume$1$off0$us = 1;$__n_does_match$4$us = $__n_does_match$336$us;$__n_might_match$4$us = $__n_might_match$335$us;
       }
      } else {
       $__consume$1$off0$us = $__consume$0$off039$us;$__n_does_match$4$us = $__n_does_match$336$us;$__n_might_match$4$us = $__n_might_match$335$us;
      }
     } while(0);
     $109 = (($__ky1$040$us) + 12|0);
     $110 = ($109|0)==($__ke|0);
     if ($110) {
      $__consume$0$off0$lcssa = $__consume$1$off0$us;$__n_does_match$3$lcssa = $__n_does_match$4$us;$__n_might_match$3$lcssa = $__n_might_match$4$us;
      break L51;
     }
     $111 = (($__st$137$us) + 1|0);
     $__consume$0$off039$us = $__consume$1$off0$us;$__ky1$040$us = $109;$__n_does_match$336$us = $__n_does_match$4$us;$__n_might_match$335$us = $__n_might_match$4$us;$__st$137$us = $111;
    }
   } else {
    $__consume$0$off039 = 0;$__ky1$040 = $__kb;$__n_does_match$336 = $__n_does_match$2$ph;$__n_might_match$335 = $__n_might_match$2$ph;$__st$137 = $__status$0;
    while(1) {
     $112 = HEAP8[$__st$137>>0]|0;
     $113 = ($112<<24>>24)==(1);
     do {
      if ($113) {
       $114 = HEAP8[$__ky1$040>>0]|0;
       $115 = $114 & 1;
       $116 = ($115<<24>>24)==(0);
       if ($116) {
        $119 = (($__ky1$040) + 4|0);
        $121 = $119;
       } else {
        $117 = (($__ky1$040) + 8|0);
        $118 = HEAP32[$117>>2]|0;
        $121 = $118;
       }
       $120 = (($121) + ($__indx$0<<2)|0);
       $122 = HEAP32[$120>>2]|0;
       $123 = HEAP32[$__ct>>2]|0;
       $124 = (($123) + 28|0);
       $125 = HEAP32[$124>>2]|0;
       __THREW__ = 0;
       $126 = (invoke_iii($125|0,($__ct|0),($122|0))|0);
       $127 = __THREW__; __THREW__ = 0;
       $128 = $127&1;
       if ($128) {
        label = 6;
        break L21;
       }
       $129 = ($__c$0|0)==($126|0);
       if (!($129)) {
        HEAP8[$__st$137>>0] = 0;
        $141 = (($__n_might_match$335) + -1)|0;
        $__consume$1$off0 = $__consume$0$off039;$__n_does_match$4 = $__n_does_match$336;$__n_might_match$4 = $141;
        break;
       }
       $130 = HEAP8[$__ky1$040>>0]|0;
       $131 = $130 & 1;
       $132 = ($131<<24>>24)==(0);
       if ($132) {
        $135 = $130&255;
        $136 = $135 >>> 1;
        $138 = $136;
       } else {
        $133 = (($__ky1$040) + 4|0);
        $134 = HEAP32[$133>>2]|0;
        $138 = $134;
       }
       $137 = ($138|0)==($$pre|0);
       if ($137) {
        HEAP8[$__st$137>>0] = 2;
        $139 = (($__n_might_match$335) + -1)|0;
        $140 = (($__n_does_match$336) + 1)|0;
        $__consume$1$off0 = 1;$__n_does_match$4 = $140;$__n_might_match$4 = $139;
       } else {
        $__consume$1$off0 = 1;$__n_does_match$4 = $__n_does_match$336;$__n_might_match$4 = $__n_might_match$335;
       }
      } else {
       $__consume$1$off0 = $__consume$0$off039;$__n_does_match$4 = $__n_does_match$336;$__n_might_match$4 = $__n_might_match$335;
      }
     } while(0);
     $142 = (($__ky1$040) + 12|0);
     $143 = ($142|0)==($__ke|0);
     if ($143) {
      $__consume$0$off0$lcssa = $__consume$1$off0;$__n_does_match$3$lcssa = $__n_does_match$4;$__n_might_match$3$lcssa = $__n_might_match$4;
      break L51;
     }
     $144 = (($__st$137) + 1|0);
     $__consume$0$off039 = $__consume$1$off0;$__ky1$040 = $142;$__n_does_match$336 = $__n_does_match$4;$__n_might_match$335 = $__n_might_match$4;$__st$137 = $144;
    }
   }
  } while(0);
  if (!($__consume$0$off0$lcssa)) {
   $__e$sroa$0$0$ph = $__e$sroa$0$1;$__indx$0$ph = $$pre;$__n_does_match$2$ph = $__n_does_match$3$lcssa;$__n_might_match$2$ph = $__n_might_match$3$lcssa;
   continue;
  }
  $145 = HEAP32[$__b>>2]|0;
  $146 = (($145) + 12|0);
  $147 = HEAP32[$146>>2]|0;
  $148 = (($145) + 16|0);
  $149 = HEAP32[$148>>2]|0;
  $150 = ($147|0)==($149|0);
  if ($150) {
   $151 = HEAP32[$145>>2]|0;
   $152 = (($151) + 40|0);
   $153 = HEAP32[$152>>2]|0;
   __THREW__ = 0;
   (invoke_ii($153|0,($145|0))|0);
   $154 = __THREW__; __THREW__ = 0;
   $155 = $154&1;
   if ($155) {
    label = 8;
    break;
   }
  } else {
   $156 = (($147) + 4|0);
   HEAP32[$146>>2] = $156;
  }
  $157 = (($__n_might_match$3$lcssa) + ($__n_does_match$3$lcssa))|0;
  $$not = ($157>>>0)<(2);
  if ($$not) {
   $__e$sroa$0$0$ph = $__e$sroa$0$1;$__indx$0$ph = $$pre;$__n_does_match$2$ph = $__n_does_match$3$lcssa;$__n_might_match$2$ph = $__n_might_match$3$lcssa;
   continue;
  } else {
   $__ky2$051 = $__kb;$__n_does_match$549 = $__n_does_match$3$lcssa;$__st$250 = $__status$0;
  }
  while(1) {
   $158 = HEAP8[$__st$250>>0]|0;
   $159 = ($158<<24>>24)==(2);
   if ($159) {
    $160 = HEAP8[$__ky2$051>>0]|0;
    $161 = $160 & 1;
    $162 = ($161<<24>>24)==(0);
    if ($162) {
     $165 = $160&255;
     $166 = $165 >>> 1;
     $168 = $166;
    } else {
     $163 = (($__ky2$051) + 4|0);
     $164 = HEAP32[$163>>2]|0;
     $168 = $164;
    }
    $167 = ($168|0)==($$pre|0);
    if ($167) {
     $__n_does_match$6 = $__n_does_match$549;
    } else {
     HEAP8[$__st$250>>0] = 0;
     $169 = (($__n_does_match$549) + -1)|0;
     $__n_does_match$6 = $169;
    }
   } else {
    $__n_does_match$6 = $__n_does_match$549;
   }
   $170 = (($__ky2$051) + 12|0);
   $171 = (($__st$250) + 1|0);
   $172 = ($170|0)==($__ke|0);
   if ($172) {
    $__e$sroa$0$0$ph = $__e$sroa$0$1;$__indx$0$ph = $$pre;$__n_does_match$2$ph = $__n_does_match$6;$__n_might_match$2$ph = $__n_might_match$3$lcssa;
    continue L21;
   } else {
    $__ky2$051 = $170;$__n_does_match$549 = $__n_does_match$6;$__st$250 = $171;
   }
  }
 }
 if ((label|0) == 6) {
  $12 = ___cxa_find_matching_catch(-1,-1)|0;
  $13 = tempRet0;
  $lpad$phi$index = $12;$lpad$phi$index9 = $13;
 }
 else if ((label|0) == 7) {
  $14 = ___cxa_find_matching_catch(-1,-1)|0;
  $15 = tempRet0;
  $lpad$phi$index = $14;$lpad$phi$index9 = $15;
 }
 else if ((label|0) == 8) {
  $16 = ___cxa_find_matching_catch(-1,-1)|0;
  $17 = tempRet0;
  $lpad$phi$index = $16;$lpad$phi$index9 = $17;
 }
 else if ((label|0) == 82) {
  $173 = ($69|0)==(0|0);
  do {
   if ($173) {
    $213 = 1;
    label = 89;
   } else {
    $174 = (($69) + 12|0);
    $175 = HEAP32[$174>>2]|0;
    $176 = (($69) + 16|0);
    $177 = HEAP32[$176>>2]|0;
    $178 = ($175|0)==($177|0);
    if ($178) {
     $179 = HEAP32[$69>>2]|0;
     $180 = (($179) + 36|0);
     $181 = HEAP32[$180>>2]|0;
     __THREW__ = 0;
     $182 = (invoke_ii($181|0,($69|0))|0);
     $183 = __THREW__; __THREW__ = 0;
     $184 = $183&1;
     if ($184) {
      break;
     } else {
      $$0$i$i$i$i11 = $182;
     }
    } else {
     $185 = HEAP32[$175>>2]|0;
     $$0$i$i$i$i11 = $185;
    }
    $186 = ($$0$i$i$i$i11|0)==(-1);
    if ($186) {
     HEAP32[$__b>>2] = 0;
     $213 = 1;
     label = 89;
     break;
    } else {
     $$pre$i$i$i13 = HEAP32[$__b>>2]|0;
     $phitmp$i$i$i14 = ($$pre$i$i$i13|0)==(0|0);
     $213 = $phitmp$i$i$i14;
     label = 89;
     break;
    }
   }
  } while(0);
  do {
   if ((label|0) == 89) {
    $187 = ($$pre$i3$i$i19|0)==(0|0);
    if ($187) {
     label = 94;
    } else {
     $188 = (($$pre$i3$i$i19) + 12|0);
     $189 = HEAP32[$188>>2]|0;
     $190 = (($$pre$i3$i$i19) + 16|0);
     $191 = HEAP32[$190>>2]|0;
     $192 = ($189|0)==($191|0);
     if ($192) {
      $193 = HEAP32[$$pre$i3$i$i19>>2]|0;
      $194 = (($193) + 36|0);
      $195 = HEAP32[$194>>2]|0;
      __THREW__ = 0;
      $196 = (invoke_ii($195|0,($$pre$i3$i$i19|0))|0);
      $197 = __THREW__; __THREW__ = 0;
      $198 = $197&1;
      if ($198) {
       break;
      } else {
       $$0$i$i1$i$i17 = $196;
      }
     } else {
      $199 = HEAP32[$189>>2]|0;
      $$0$i$i1$i$i17 = $199;
     }
     $200 = ($$0$i$i1$i$i17|0)==(-1);
     if ($200) {
      label = 94;
     } else {
      if (!($213)) {
       label = 96;
      }
     }
    }
    if ((label|0) == 94) {
     if ($213) {
      label = 96;
     }
    }
    if ((label|0) == 96) {
     $201 = HEAP32[$__err>>2]|0;
     $202 = $201 | 2;
     HEAP32[$__err>>2] = $202;
    }
    L133: do {
     if ($22) {
      label = 101;
     } else {
      $203 = HEAP8[$__status$0>>0]|0;
      $204 = ($203<<24>>24)==(2);
      if ($204) {
       $$028 = $__kb;
      } else {
       $$03082 = $__kb;$__st$32983 = $__status$0;
       while(1) {
        $208 = (($$03082) + 12|0);
        $209 = ($208|0)==($__ke|0);
        $206 = (($__st$32983) + 1|0);
        if ($209) {
         label = 101;
         break L133;
        }
        $205 = HEAP8[$206>>0]|0;
        $207 = ($205<<24>>24)==(2);
        if ($207) {
         $$028 = $208;
         break;
        } else {
         $$03082 = $208;$__st$32983 = $206;
        }
       }
      }
     }
    } while(0);
    if ((label|0) == 101) {
     $210 = HEAP32[$__err>>2]|0;
     $211 = $210 | 4;
     HEAP32[$__err>>2] = $211;
     $$028 = $__ke;
    }
    $212 = ($21|0)==(0|0);
    if ($212) {
     STACKTOP = sp;return ($$028|0);
    }
    _free($21);
    STACKTOP = sp;return ($$028|0);
   }
  } while(0);
  $18 = ___cxa_find_matching_catch(-1,-1)|0;
  $19 = tempRet0;
  $lpad$phi$index = $18;$lpad$phi$index9 = $19;
 }
 $20 = ($21|0)==(0|0);
 if ($20) {
  $$index = $lpad$phi$index;$$index17 = $lpad$phi$index9;
  ___resumeException($$index|0);
  // unreachable;
 }
 _free($21);
 $$index = $lpad$phi$index;$$index17 = $lpad$phi$index9;
 ___resumeException($$index|0);
 // unreachable;
 return 0|0;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRl($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$ = 0, $$$pre$i$i$i5$i = 0, $$0$i$i = 0, $$0$i$i$i = 0, $$0$i$i$i$i$i = 0, $$0$i$i$i$i3$i = 0, $$0$i$i1$i$i$i = 0, $$0$i$i1$i$i9$i = 0, $$7 = 0, $$8 = 0, $$pre$i$i$i5$i = 0, $$pre$i3$i$i$i = 0, $$pre$phi34$iZ2D = 0, $$pre$phi36$iZ2D = 0, $$pre33$i = 0, $$pre35$i = 0, $$sroa$06$0 = 0, $$sroa$06$2 = 0, $0 = 0, $1 = 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $__a$0$i = 0, $__a$1$i = 0, $__a$2$i = 0, $__a_end$i = 0, $__atoms$i = 0, $__buf$i = 0, $__dc$i = 0, $__g$i = 0, $__g_end$i = 0, $__grouping$i = 0, $__thousands_sep$i = 0, $lpad$phi$i$index = 0, $lpad$phi$i$index10 = 0, $phitmp$i23$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0;
 $__atoms$i = sp + 200|0;
 $__thousands_sep$i = sp + 196|0;
 $__grouping$i = sp + 184|0;
 $__buf$i = sp + 172|0;
 $__a_end$i = sp + 168|0;
 $__g$i = sp + 8|0;
 $__g_end$i = sp + 4|0;
 $__dc$i = sp;
 $0 = HEAP32[$__b>>2]|0;
 $1 = HEAP32[$__e>>2]|0;
 $2 = (($__iob) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & 74;
 if ((($4|0) == 64)) {
  $$0$i$i = 8;
 } else if ((($4|0) == 8)) {
  $$0$i$i = 16;
 } else if ((($4|0) == 0)) {
  $$0$i$i = 0;
 } else {
  $$0$i$i = 10;
 }
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping$i,$__iob,$__atoms$i,$__thousands_sep$i);
 ;HEAP32[$__buf$i+0>>2]=0|0;HEAP32[$__buf$i+4>>2]=0|0;HEAP32[$__buf$i+8>>2]=0|0;
 __THREW__ = 0;
 invoke_vii(451,($__buf$i|0),10);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 do {
  if ($6) {
   label = 37;
  } else {
   $7 = HEAP8[$__buf$i>>0]|0;
   $8 = $7 & 1;
   $9 = ($8<<24>>24)==(0);
   if ($9) {
    $12 = (($__buf$i) + 1|0);
    $$pre35$i = (($__buf$i) + 8|0);
    $$pre$phi34$iZ2D = $12;$$pre$phi36$iZ2D = $$pre35$i;$13 = $12;
   } else {
    $10 = (($__buf$i) + 8|0);
    $11 = HEAP32[$10>>2]|0;
    $$pre33$i = (($__buf$i) + 1|0);
    $$pre$phi34$iZ2D = $$pre33$i;$$pre$phi36$iZ2D = $10;$13 = $11;
   }
   HEAP32[$__a_end$i>>2] = $13;
   HEAP32[$__g_end$i>>2] = $__g$i;
   HEAP32[$__dc$i>>2] = 0;
   $14 = (($__buf$i) + 4|0);
   $15 = HEAP32[$__thousands_sep$i>>2]|0;
   $$pre$i$i$i5$i = $0;$$sroa$06$0 = $1;$__a$0$i = $13;
   while(1) {
    $16 = ($$pre$i$i$i5$i|0)==(0|0);
    if ($16) {
     $181 = 1;$94 = 0;
    } else {
     $17 = (($$pre$i$i$i5$i) + 12|0);
     $18 = HEAP32[$17>>2]|0;
     $19 = (($$pre$i$i$i5$i) + 16|0);
     $20 = HEAP32[$19>>2]|0;
     $21 = ($18|0)==($20|0);
     if ($21) {
      $22 = HEAP32[$$pre$i$i$i5$i>>2]|0;
      $23 = (($22) + 36|0);
      $24 = HEAP32[$23>>2]|0;
      __THREW__ = 0;
      $25 = (invoke_ii($24|0,($$pre$i$i$i5$i|0))|0);
      $26 = __THREW__; __THREW__ = 0;
      $27 = $26&1;
      if ($27) {
       label = 36;
       break;
      } else {
       $$0$i$i$i$i3$i = $25;
      }
     } else {
      $28 = HEAP32[$18>>2]|0;
      $$0$i$i$i$i3$i = $28;
     }
     $29 = ($$0$i$i$i$i3$i|0)==(-1);
     $$$pre$i$i$i5$i = $29 ? 0 : $$pre$i$i$i5$i;
     $$ = $29 ? 1 : 0;
     $181 = $$;$94 = $$$pre$i$i$i5$i;
    }
    $30 = ($$sroa$06$0|0)==(0|0);
    if ($30) {
     label = 20;
    } else {
     $31 = (($$sroa$06$0) + 12|0);
     $32 = HEAP32[$31>>2]|0;
     $33 = (($$sroa$06$0) + 16|0);
     $34 = HEAP32[$33>>2]|0;
     $35 = ($32|0)==($34|0);
     if ($35) {
      $36 = HEAP32[$$sroa$06$0>>2]|0;
      $37 = (($36) + 36|0);
      $38 = HEAP32[$37>>2]|0;
      __THREW__ = 0;
      $39 = (invoke_ii($38|0,($$sroa$06$0|0))|0);
      $40 = __THREW__; __THREW__ = 0;
      $41 = $40&1;
      if ($41) {
       label = 36;
       break;
      } else {
       $$0$i$i1$i$i9$i = $39;
      }
     } else {
      $42 = HEAP32[$32>>2]|0;
      $$0$i$i1$i$i9$i = $42;
     }
     $43 = ($$0$i$i1$i$i9$i|0)==(-1);
     if ($43) {
      label = 20;
     } else {
      if ($181) {
       $$sroa$06$2 = $$sroa$06$0;
      } else {
       $$pre$i3$i$i$i = $$sroa$06$0;$__a$2$i = $__a$0$i;
       break;
      }
     }
    }
    if ((label|0) == 20) {
     label = 0;
     if ($181) {
      $$pre$i3$i$i$i = 0;$__a$2$i = $__a$0$i;
      break;
     } else {
      $$sroa$06$2 = 0;
     }
    }
    $44 = HEAP32[$__a_end$i>>2]|0;
    $45 = $44;
    $46 = $__a$0$i;
    $47 = (($45) - ($46))|0;
    $48 = HEAP8[$__buf$i>>0]|0;
    $49 = $48 & 1;
    $50 = ($49<<24>>24)==(0);
    if ($50) {
     $52 = $48&255;
     $53 = $52 >>> 1;
     $55 = $53;
    } else {
     $51 = HEAP32[$14>>2]|0;
     $55 = $51;
    }
    $54 = ($47|0)==($55|0);
    if ($54) {
     if ($50) {
      $57 = $48&255;
      $58 = $57 >>> 1;
      $60 = $58;
     } else {
      $56 = HEAP32[$14>>2]|0;
      $60 = $56;
     }
     $59 = $60 << 1;
     __THREW__ = 0;
     invoke_vii(451,($__buf$i|0),($59|0));
     $61 = __THREW__; __THREW__ = 0;
     $62 = $61&1;
     if ($62) {
      label = 36;
      break;
     }
     $63 = HEAP8[$__buf$i>>0]|0;
     $64 = $63 & 1;
     $65 = ($64<<24>>24)==(0);
     if ($65) {
      $68 = 10;
     } else {
      $66 = HEAP32[$__buf$i>>2]|0;
      $67 = $66 & -2;
      $phitmp$i23$i = (($67) + -1)|0;
      $68 = $phitmp$i23$i;
     }
     __THREW__ = 0;
     invoke_vii(451,($__buf$i|0),($68|0));
     $69 = __THREW__; __THREW__ = 0;
     $70 = $69&1;
     if ($70) {
      label = 36;
      break;
     }
     $71 = HEAP8[$__buf$i>>0]|0;
     $72 = $71 & 1;
     $73 = ($72<<24>>24)==(0);
     if ($73) {
      $76 = $$pre$phi34$iZ2D;
     } else {
      $74 = HEAP32[$$pre$phi36$iZ2D>>2]|0;
      $76 = $74;
     }
     $75 = (($76) + ($60)|0);
     HEAP32[$__a_end$i>>2] = $75;
     $__a$1$i = $76;
    } else {
     $__a$1$i = $__a$0$i;
    }
    $93 = (($94) + 12|0);
    $95 = HEAP32[$93>>2]|0;
    $96 = (($94) + 16|0);
    $97 = HEAP32[$96>>2]|0;
    $98 = ($95|0)==($97|0);
    if ($98) {
     $99 = HEAP32[$94>>2]|0;
     $100 = (($99) + 36|0);
     $101 = HEAP32[$100>>2]|0;
     __THREW__ = 0;
     $102 = (invoke_ii($101|0,($94|0))|0);
     $103 = __THREW__; __THREW__ = 0;
     $104 = $103&1;
     if ($104) {
      label = 36;
      break;
     } else {
      $$0$i$i$i = $102;
     }
    } else {
     $105 = HEAP32[$95>>2]|0;
     $$0$i$i$i = $105;
    }
    $106 = (__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i$i,$$0$i$i,$__a$1$i,$__a_end$i,$__dc$i,$15,$__grouping$i,$__g$i,$__g_end$i,$__atoms$i)|0);
    $107 = ($106|0)==(0);
    if (!($107)) {
     $$pre$i3$i$i$i = $$sroa$06$2;$__a$2$i = $__a$1$i;
     break;
    }
    $108 = HEAP32[$93>>2]|0;
    $109 = HEAP32[$96>>2]|0;
    $110 = ($108|0)==($109|0);
    if ($110) {
     $111 = HEAP32[$94>>2]|0;
     $112 = (($111) + 40|0);
     $113 = HEAP32[$112>>2]|0;
     __THREW__ = 0;
     (invoke_ii($113|0,($94|0))|0);
     $114 = __THREW__; __THREW__ = 0;
     $115 = $114&1;
     if ($115) {
      label = 36;
      break;
     } else {
      $$pre$i$i$i5$i = $94;$$sroa$06$0 = $$sroa$06$2;$__a$0$i = $__a$1$i;
      continue;
     }
    } else {
     $116 = (($108) + 4|0);
     HEAP32[$93>>2] = $116;
     $$pre$i$i$i5$i = $94;$$sroa$06$0 = $$sroa$06$2;$__a$0$i = $__a$1$i;
     continue;
    }
   }
   if ((label|0) == 36) {
    $77 = ___cxa_find_matching_catch(-1,-1)|0;
    $78 = tempRet0;
    $lpad$phi$i$index = $77;$lpad$phi$i$index10 = $78;
    break;
   }
   $117 = HEAP8[$__grouping$i>>0]|0;
   $118 = $117 & 1;
   $119 = ($118<<24>>24)==(0);
   if ($119) {
    $122 = $117&255;
    $123 = $122 >>> 1;
    $125 = $123;
   } else {
    $120 = (($__grouping$i) + 4|0);
    $121 = HEAP32[$120>>2]|0;
    $125 = $121;
   }
   $124 = ($125|0)==(0);
   if (!($124)) {
    $126 = HEAP32[$__g_end$i>>2]|0;
    $127 = $126;
    $128 = $__g$i;
    $129 = (($127) - ($128))|0;
    $130 = ($129|0)<(160);
    if ($130) {
     $131 = HEAP32[$__dc$i>>2]|0;
     $132 = (($126) + 4|0);
     HEAP32[$__g_end$i>>2] = $132;
     HEAP32[$126>>2] = $131;
    }
   }
   $133 = HEAP32[$__a_end$i>>2]|0;
   __THREW__ = 0;
   $134 = (invoke_iiiii(452,($__a$2$i|0),($133|0),($__err|0),($$0$i$i|0))|0);
   $135 = __THREW__; __THREW__ = 0;
   $136 = $135&1;
   if ($136) {
    label = 37;
   } else {
    HEAP32[$__v>>2] = $134;
    $137 = HEAP32[$__g_end$i>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping$i,$__g$i,$137,$__err);
    $138 = ($94|0)==(0|0);
    if ($138) {
     $168 = 0;$182 = 1;
    } else {
     $139 = (($94) + 12|0);
     $140 = HEAP32[$139>>2]|0;
     $141 = (($94) + 16|0);
     $142 = HEAP32[$141>>2]|0;
     $143 = ($140|0)==($142|0);
     if ($143) {
      $144 = HEAP32[$94>>2]|0;
      $145 = (($144) + 36|0);
      $146 = HEAP32[$145>>2]|0;
      __THREW__ = 0;
      $147 = (invoke_ii($146|0,($94|0))|0);
      $148 = __THREW__; __THREW__ = 0;
      $149 = $148&1;
      if ($149) {
       label = 37;
       break;
      } else {
       $$0$i$i$i$i$i = $147;
      }
     } else {
      $150 = HEAP32[$140>>2]|0;
      $$0$i$i$i$i$i = $150;
     }
     $151 = ($$0$i$i$i$i$i|0)==(-1);
     $$7 = $151 ? 0 : $94;
     $$8 = $151 ? 1 : 0;
     $168 = $$7;$182 = $$8;
    }
    $152 = ($$pre$i3$i$i$i|0)==(0|0);
    if ($152) {
     label = 69;
    } else {
     $153 = (($$pre$i3$i$i$i) + 12|0);
     $154 = HEAP32[$153>>2]|0;
     $155 = (($$pre$i3$i$i$i) + 16|0);
     $156 = HEAP32[$155>>2]|0;
     $157 = ($154|0)==($156|0);
     if ($157) {
      $158 = HEAP32[$$pre$i3$i$i$i>>2]|0;
      $159 = (($158) + 36|0);
      $160 = HEAP32[$159>>2]|0;
      __THREW__ = 0;
      $161 = (invoke_ii($160|0,($$pre$i3$i$i$i|0))|0);
      $162 = __THREW__; __THREW__ = 0;
      $163 = $162&1;
      if ($163) {
       label = 37;
       break;
      } else {
       $$0$i$i1$i$i$i = $161;
      }
     } else {
      $164 = HEAP32[$154>>2]|0;
      $$0$i$i1$i$i$i = $164;
     }
     $165 = ($$0$i$i1$i$i$i|0)==(-1);
     if ($165) {
      label = 69;
     } else {
      if (!($182)) {
       label = 71;
      }
     }
    }
    if ((label|0) == 69) {
     if ($182) {
      label = 71;
     }
    }
    if ((label|0) == 71) {
     $166 = HEAP32[$__err>>2]|0;
     $167 = $166 | 2;
     HEAP32[$__err>>2] = $167;
    }
    HEAP32[$agg$result>>2] = $168;
    $169 = HEAP8[$__buf$i>>0]|0;
    $170 = $169 & 1;
    $171 = ($170<<24>>24)==(0);
    if (!($171)) {
     $172 = (($__buf$i) + 8|0);
     $173 = HEAP32[$172>>2]|0;
     $174 = ($173|0)==(0|0);
     if (!($174)) {
      _free($173);
     }
    }
    $175 = HEAP8[$__grouping$i>>0]|0;
    $176 = $175 & 1;
    $177 = ($176<<24>>24)==(0);
    if ($177) {
     STACKTOP = sp;return;
    }
    $178 = (($__grouping$i) + 8|0);
    $179 = HEAP32[$178>>2]|0;
    $180 = ($179|0)==(0|0);
    if ($180) {
     STACKTOP = sp;return;
    }
    _free($179);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 37) {
  $79 = ___cxa_find_matching_catch(-1,-1)|0;
  $80 = tempRet0;
  $lpad$phi$i$index = $79;$lpad$phi$i$index10 = $80;
 }
 $81 = HEAP8[$__buf$i>>0]|0;
 $82 = $81 & 1;
 $83 = ($82<<24>>24)==(0);
 if (!($83)) {
  $84 = (($__buf$i) + 8|0);
  $85 = HEAP32[$84>>2]|0;
  $86 = ($85|0)==(0|0);
  if (!($86)) {
   _free($85);
  }
 }
 $87 = HEAP8[$__grouping$i>>0]|0;
 $88 = $87 & 1;
 $89 = ($88<<24>>24)==(0);
 if ($89) {
  ___resumeException($lpad$phi$i$index|0);
  // unreachable;
 }
 $90 = (($__grouping$i) + 8|0);
 $91 = HEAP32[$90>>2]|0;
 $92 = ($91|0)==(0|0);
 if ($92) {
  ___resumeException($lpad$phi$i$index|0);
  // unreachable;
 }
 _free($91);
 ___resumeException($lpad$phi$i$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRx($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$ = 0, $$$pre$i$i$i5$i = 0, $$0$i$i = 0, $$0$i$i$i = 0, $$0$i$i$i$i$i = 0, $$0$i$i$i$i3$i = 0, $$0$i$i1$i$i$i = 0, $$0$i$i1$i$i9$i = 0, $$7 = 0, $$8 = 0, $$pre$i$i$i5$i = 0, $$pre$i3$i$i$i = 0, $$pre$phi34$iZ2D = 0, $$pre$phi36$iZ2D = 0, $$pre33$i = 0, $$pre35$i = 0, $$sroa$06$0 = 0, $$sroa$06$2 = 0, $0 = 0, $1 = 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0$i = 0, $__a$1$i = 0, $__a$2$i = 0, $__a_end$i = 0, $__atoms$i = 0, $__buf$i = 0, $__dc$i = 0, $__g$i = 0, $__g_end$i = 0, $__grouping$i = 0, $__thousands_sep$i = 0, $lpad$phi$i$index = 0, $lpad$phi$i$index10 = 0, $phitmp$i23$i = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0;
 $__atoms$i = sp + 200|0;
 $__thousands_sep$i = sp + 196|0;
 $__grouping$i = sp + 184|0;
 $__buf$i = sp + 172|0;
 $__a_end$i = sp + 168|0;
 $__g$i = sp + 8|0;
 $__g_end$i = sp + 4|0;
 $__dc$i = sp;
 $0 = HEAP32[$__b>>2]|0;
 $1 = HEAP32[$__e>>2]|0;
 $2 = (($__iob) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & 74;
 if ((($4|0) == 64)) {
  $$0$i$i = 8;
 } else if ((($4|0) == 8)) {
  $$0$i$i = 16;
 } else if ((($4|0) == 0)) {
  $$0$i$i = 0;
 } else {
  $$0$i$i = 10;
 }
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping$i,$__iob,$__atoms$i,$__thousands_sep$i);
 ;HEAP32[$__buf$i+0>>2]=0|0;HEAP32[$__buf$i+4>>2]=0|0;HEAP32[$__buf$i+8>>2]=0|0;
 __THREW__ = 0;
 invoke_vii(451,($__buf$i|0),10);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 do {
  if ($6) {
   label = 37;
  } else {
   $7 = HEAP8[$__buf$i>>0]|0;
   $8 = $7 & 1;
   $9 = ($8<<24>>24)==(0);
   if ($9) {
    $12 = (($__buf$i) + 1|0);
    $$pre35$i = (($__buf$i) + 8|0);
    $$pre$phi34$iZ2D = $12;$$pre$phi36$iZ2D = $$pre35$i;$13 = $12;
   } else {
    $10 = (($__buf$i) + 8|0);
    $11 = HEAP32[$10>>2]|0;
    $$pre33$i = (($__buf$i) + 1|0);
    $$pre$phi34$iZ2D = $$pre33$i;$$pre$phi36$iZ2D = $10;$13 = $11;
   }
   HEAP32[$__a_end$i>>2] = $13;
   HEAP32[$__g_end$i>>2] = $__g$i;
   HEAP32[$__dc$i>>2] = 0;
   $14 = (($__buf$i) + 4|0);
   $15 = HEAP32[$__thousands_sep$i>>2]|0;
   $$pre$i$i$i5$i = $0;$$sroa$06$0 = $1;$__a$0$i = $13;
   while(1) {
    $16 = ($$pre$i$i$i5$i|0)==(0|0);
    if ($16) {
     $186 = 1;$94 = 0;
    } else {
     $17 = (($$pre$i$i$i5$i) + 12|0);
     $18 = HEAP32[$17>>2]|0;
     $19 = (($$pre$i$i$i5$i) + 16|0);
     $20 = HEAP32[$19>>2]|0;
     $21 = ($18|0)==($20|0);
     if ($21) {
      $22 = HEAP32[$$pre$i$i$i5$i>>2]|0;
      $23 = (($22) + 36|0);
      $24 = HEAP32[$23>>2]|0;
      __THREW__ = 0;
      $25 = (invoke_ii($24|0,($$pre$i$i$i5$i|0))|0);
      $26 = __THREW__; __THREW__ = 0;
      $27 = $26&1;
      if ($27) {
       label = 36;
       break;
      } else {
       $$0$i$i$i$i3$i = $25;
      }
     } else {
      $28 = HEAP32[$18>>2]|0;
      $$0$i$i$i$i3$i = $28;
     }
     $29 = ($$0$i$i$i$i3$i|0)==(-1);
     $$$pre$i$i$i5$i = $29 ? 0 : $$pre$i$i$i5$i;
     $$ = $29 ? 1 : 0;
     $186 = $$;$94 = $$$pre$i$i$i5$i;
    }
    $30 = ($$sroa$06$0|0)==(0|0);
    if ($30) {
     label = 20;
    } else {
     $31 = (($$sroa$06$0) + 12|0);
     $32 = HEAP32[$31>>2]|0;
     $33 = (($$sroa$06$0) + 16|0);
     $34 = HEAP32[$33>>2]|0;
     $35 = ($32|0)==($34|0);
     if ($35) {
      $36 = HEAP32[$$sroa$06$0>>2]|0;
      $37 = (($36) + 36|0);
      $38 = HEAP32[$37>>2]|0;
      __THREW__ = 0;
      $39 = (invoke_ii($38|0,($$sroa$06$0|0))|0);
      $40 = __THREW__; __THREW__ = 0;
      $41 = $40&1;
      if ($41) {
       label = 36;
       break;
      } else {
       $$0$i$i1$i$i9$i = $39;
      }
     } else {
      $42 = HEAP32[$32>>2]|0;
      $$0$i$i1$i$i9$i = $42;
     }
     $43 = ($$0$i$i1$i$i9$i|0)==(-1);
     if ($43) {
      label = 20;
     } else {
      if ($186) {
       $$sroa$06$2 = $$sroa$06$0;
      } else {
       $$pre$i3$i$i$i = $$sroa$06$0;$__a$2$i = $__a$0$i;
       break;
      }
     }
    }
    if ((label|0) == 20) {
     label = 0;
     if ($186) {
      $$pre$i3$i$i$i = 0;$__a$2$i = $__a$0$i;
      break;
     } else {
      $$sroa$06$2 = 0;
     }
    }
    $44 = HEAP32[$__a_end$i>>2]|0;
    $45 = $44;
    $46 = $__a$0$i;
    $47 = (($45) - ($46))|0;
    $48 = HEAP8[$__buf$i>>0]|0;
    $49 = $48 & 1;
    $50 = ($49<<24>>24)==(0);
    if ($50) {
     $52 = $48&255;
     $53 = $52 >>> 1;
     $55 = $53;
    } else {
     $51 = HEAP32[$14>>2]|0;
     $55 = $51;
    }
    $54 = ($47|0)==($55|0);
    if ($54) {
     if ($50) {
      $57 = $48&255;
      $58 = $57 >>> 1;
      $60 = $58;
     } else {
      $56 = HEAP32[$14>>2]|0;
      $60 = $56;
     }
     $59 = $60 << 1;
     __THREW__ = 0;
     invoke_vii(451,($__buf$i|0),($59|0));
     $61 = __THREW__; __THREW__ = 0;
     $62 = $61&1;
     if ($62) {
      label = 36;
      break;
     }
     $63 = HEAP8[$__buf$i>>0]|0;
     $64 = $63 & 1;
     $65 = ($64<<24>>24)==(0);
     if ($65) {
      $68 = 10;
     } else {
      $66 = HEAP32[$__buf$i>>2]|0;
      $67 = $66 & -2;
      $phitmp$i23$i = (($67) + -1)|0;
      $68 = $phitmp$i23$i;
     }
     __THREW__ = 0;
     invoke_vii(451,($__buf$i|0),($68|0));
     $69 = __THREW__; __THREW__ = 0;
     $70 = $69&1;
     if ($70) {
      label = 36;
      break;
     }
     $71 = HEAP8[$__buf$i>>0]|0;
     $72 = $71 & 1;
     $73 = ($72<<24>>24)==(0);
     if ($73) {
      $76 = $$pre$phi34$iZ2D;
     } else {
      $74 = HEAP32[$$pre$phi36$iZ2D>>2]|0;
      $76 = $74;
     }
     $75 = (($76) + ($60)|0);
     HEAP32[$__a_end$i>>2] = $75;
     $__a$1$i = $76;
    } else {
     $__a$1$i = $__a$0$i;
    }
    $93 = (($94) + 12|0);
    $95 = HEAP32[$93>>2]|0;
    $96 = (($94) + 16|0);
    $97 = HEAP32[$96>>2]|0;
    $98 = ($95|0)==($97|0);
    if ($98) {
     $99 = HEAP32[$94>>2]|0;
     $100 = (($99) + 36|0);
     $101 = HEAP32[$100>>2]|0;
     __THREW__ = 0;
     $102 = (invoke_ii($101|0,($94|0))|0);
     $103 = __THREW__; __THREW__ = 0;
     $104 = $103&1;
     if ($104) {
      label = 36;
      break;
     } else {
      $$0$i$i$i = $102;
     }
    } else {
     $105 = HEAP32[$95>>2]|0;
     $$0$i$i$i = $105;
    }
    $106 = (__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i$i,$$0$i$i,$__a$1$i,$__a_end$i,$__dc$i,$15,$__grouping$i,$__g$i,$__g_end$i,$__atoms$i)|0);
    $107 = ($106|0)==(0);
    if (!($107)) {
     $$pre$i3$i$i$i = $$sroa$06$2;$__a$2$i = $__a$1$i;
     break;
    }
    $108 = HEAP32[$93>>2]|0;
    $109 = HEAP32[$96>>2]|0;
    $110 = ($108|0)==($109|0);
    if ($110) {
     $111 = HEAP32[$94>>2]|0;
     $112 = (($111) + 40|0);
     $113 = HEAP32[$112>>2]|0;
     __THREW__ = 0;
     (invoke_ii($113|0,($94|0))|0);
     $114 = __THREW__; __THREW__ = 0;
     $115 = $114&1;
     if ($115) {
      label = 36;
      break;
     } else {
      $$pre$i$i$i5$i = $94;$$sroa$06$0 = $$sroa$06$2;$__a$0$i = $__a$1$i;
      continue;
     }
    } else {
     $116 = (($108) + 4|0);
     HEAP32[$93>>2] = $116;
     $$pre$i$i$i5$i = $94;$$sroa$06$0 = $$sroa$06$2;$__a$0$i = $__a$1$i;
     continue;
    }
   }
   if ((label|0) == 36) {
    $77 = ___cxa_find_matching_catch(-1,-1)|0;
    $78 = tempRet0;
    $lpad$phi$i$index = $77;$lpad$phi$i$index10 = $78;
    break;
   }
   $117 = HEAP8[$__grouping$i>>0]|0;
   $118 = $117 & 1;
   $119 = ($118<<24>>24)==(0);
   if ($119) {
    $122 = $117&255;
    $123 = $122 >>> 1;
    $125 = $123;
   } else {
    $120 = (($__grouping$i) + 4|0);
    $121 = HEAP32[$120>>2]|0;
    $125 = $121;
   }
   $124 = ($125|0)==(0);
   if (!($124)) {
    $126 = HEAP32[$__g_end$i>>2]|0;
    $127 = $126;
    $128 = $__g$i;
    $129 = (($127) - ($128))|0;
    $130 = ($129|0)<(160);
    if ($130) {
     $131 = HEAP32[$__dc$i>>2]|0;
     $132 = (($126) + 4|0);
     HEAP32[$__g_end$i>>2] = $132;
     HEAP32[$126>>2] = $131;
    }
   }
   $133 = HEAP32[$__a_end$i>>2]|0;
   __THREW__ = 0;
   $134 = (invoke_iiiii(453,($__a$2$i|0),($133|0),($__err|0),($$0$i$i|0))|0);
   $135 = tempRet0;
   $136 = __THREW__; __THREW__ = 0;
   $137 = $136&1;
   if ($137) {
    label = 37;
   } else {
    $138 = $__v;
    $139 = $138;
    HEAP32[$139>>2] = $134;
    $140 = (($138) + 4)|0;
    $141 = $140;
    HEAP32[$141>>2] = $135;
    $142 = HEAP32[$__g_end$i>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping$i,$__g$i,$142,$__err);
    $143 = ($94|0)==(0|0);
    if ($143) {
     $173 = 0;$187 = 1;
    } else {
     $144 = (($94) + 12|0);
     $145 = HEAP32[$144>>2]|0;
     $146 = (($94) + 16|0);
     $147 = HEAP32[$146>>2]|0;
     $148 = ($145|0)==($147|0);
     if ($148) {
      $149 = HEAP32[$94>>2]|0;
      $150 = (($149) + 36|0);
      $151 = HEAP32[$150>>2]|0;
      __THREW__ = 0;
      $152 = (invoke_ii($151|0,($94|0))|0);
      $153 = __THREW__; __THREW__ = 0;
      $154 = $153&1;
      if ($154) {
       label = 37;
       break;
      } else {
       $$0$i$i$i$i$i = $152;
      }
     } else {
      $155 = HEAP32[$145>>2]|0;
      $$0$i$i$i$i$i = $155;
     }
     $156 = ($$0$i$i$i$i$i|0)==(-1);
     $$7 = $156 ? 0 : $94;
     $$8 = $156 ? 1 : 0;
     $173 = $$7;$187 = $$8;
    }
    $157 = ($$pre$i3$i$i$i|0)==(0|0);
    if ($157) {
     label = 69;
    } else {
     $158 = (($$pre$i3$i$i$i) + 12|0);
     $159 = HEAP32[$158>>2]|0;
     $160 = (($$pre$i3$i$i$i) + 16|0);
     $161 = HEAP32[$160>>2]|0;
     $162 = ($159|0)==($161|0);
     if ($162) {
      $163 = HEAP32[$$pre$i3$i$i$i>>2]|0;
      $164 = (($163) + 36|0);
      $165 = HEAP32[$164>>2]|0;
      __THREW__ = 0;
      $166 = (invoke_ii($165|0,($$pre$i3$i$i$i|0))|0);
      $167 = __THREW__; __THREW__ = 0;
      $168 = $167&1;
      if ($168) {
       label = 37;
       break;
      } else {
       $$0$i$i1$i$i$i = $166;
      }
     } else {
      $169 = HEAP32[$159>>2]|0;
      $$0$i$i1$i$i$i = $169;
     }
     $170 = ($$0$i$i1$i$i$i|0)==(-1);
     if ($170) {
      label = 69;
     } else {
      if (!($187)) {
       label = 71;
      }
     }
    }
    if ((label|0) == 69) {
     if ($187) {
      label = 71;
     }
    }
    if ((label|0) == 71) {
     $171 = HEAP32[$__err>>2]|0;
     $172 = $171 | 2;
     HEAP32[$__err>>2] = $172;
    }
    HEAP32[$agg$result>>2] = $173;
    $174 = HEAP8[$__buf$i>>0]|0;
    $175 = $174 & 1;
    $176 = ($175<<24>>24)==(0);
    if (!($176)) {
     $177 = (($__buf$i) + 8|0);
     $178 = HEAP32[$177>>2]|0;
     $179 = ($178|0)==(0|0);
     if (!($179)) {
      _free($178);
     }
    }
    $180 = HEAP8[$__grouping$i>>0]|0;
    $181 = $180 & 1;
    $182 = ($181<<24>>24)==(0);
    if ($182) {
     STACKTOP = sp;return;
    }
    $183 = (($__grouping$i) + 8|0);
    $184 = HEAP32[$183>>2]|0;
    $185 = ($184|0)==(0|0);
    if ($185) {
     STACKTOP = sp;return;
    }
    _free($184);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 37) {
  $79 = ___cxa_find_matching_catch(-1,-1)|0;
  $80 = tempRet0;
  $lpad$phi$i$index = $79;$lpad$phi$i$index10 = $80;
 }
 $81 = HEAP8[$__buf$i>>0]|0;
 $82 = $81 & 1;
 $83 = ($82<<24>>24)==(0);
 if (!($83)) {
  $84 = (($__buf$i) + 8|0);
  $85 = HEAP32[$84>>2]|0;
  $86 = ($85|0)==(0|0);
  if (!($86)) {
   _free($85);
  }
 }
 $87 = HEAP8[$__grouping$i>>0]|0;
 $88 = $87 & 1;
 $89 = ($88<<24>>24)==(0);
 if ($89) {
  ___resumeException($lpad$phi$i$index|0);
  // unreachable;
 }
 $90 = (($__grouping$i) + 8|0);
 $91 = HEAP32[$90>>2]|0;
 $92 = ($91|0)==(0|0);
 if ($92) {
  ___resumeException($lpad$phi$i$index|0);
  // unreachable;
 }
 _free($91);
 ___resumeException($lpad$phi$i$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRt($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$ = 0, $$$pre$i$i$i5$i = 0, $$0$i$i = 0, $$0$i$i$i = 0, $$0$i$i$i$i$i = 0, $$0$i$i$i$i3$i = 0, $$0$i$i1$i$i$i = 0, $$0$i$i1$i$i9$i = 0, $$7 = 0, $$8 = 0, $$pre$i$i$i5$i = 0, $$pre$i3$i$i$i = 0, $$pre$phi34$iZ2D = 0, $$pre$phi36$iZ2D = 0, $$pre33$i = 0, $$pre35$i = 0, $$sroa$06$0 = 0, $$sroa$06$2 = 0, $0 = 0, $1 = 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $__a$0$i = 0, $__a$1$i = 0, $__a$2$i = 0, $__a_end$i = 0, $__atoms$i = 0, $__buf$i = 0, $__dc$i = 0, $__g$i = 0, $__g_end$i = 0, $__grouping$i = 0, $__thousands_sep$i = 0, $lpad$phi$i$index = 0, $lpad$phi$i$index10 = 0, $phitmp$i23$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0;
 $__atoms$i = sp + 200|0;
 $__thousands_sep$i = sp + 196|0;
 $__grouping$i = sp + 184|0;
 $__buf$i = sp + 172|0;
 $__a_end$i = sp + 168|0;
 $__g$i = sp + 8|0;
 $__g_end$i = sp + 4|0;
 $__dc$i = sp;
 $0 = HEAP32[$__b>>2]|0;
 $1 = HEAP32[$__e>>2]|0;
 $2 = (($__iob) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & 74;
 if ((($4|0) == 64)) {
  $$0$i$i = 8;
 } else if ((($4|0) == 8)) {
  $$0$i$i = 16;
 } else if ((($4|0) == 0)) {
  $$0$i$i = 0;
 } else {
  $$0$i$i = 10;
 }
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping$i,$__iob,$__atoms$i,$__thousands_sep$i);
 ;HEAP32[$__buf$i+0>>2]=0|0;HEAP32[$__buf$i+4>>2]=0|0;HEAP32[$__buf$i+8>>2]=0|0;
 __THREW__ = 0;
 invoke_vii(451,($__buf$i|0),10);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 do {
  if ($6) {
   label = 37;
  } else {
   $7 = HEAP8[$__buf$i>>0]|0;
   $8 = $7 & 1;
   $9 = ($8<<24>>24)==(0);
   if ($9) {
    $12 = (($__buf$i) + 1|0);
    $$pre35$i = (($__buf$i) + 8|0);
    $$pre$phi34$iZ2D = $12;$$pre$phi36$iZ2D = $$pre35$i;$13 = $12;
   } else {
    $10 = (($__buf$i) + 8|0);
    $11 = HEAP32[$10>>2]|0;
    $$pre33$i = (($__buf$i) + 1|0);
    $$pre$phi34$iZ2D = $$pre33$i;$$pre$phi36$iZ2D = $10;$13 = $11;
   }
   HEAP32[$__a_end$i>>2] = $13;
   HEAP32[$__g_end$i>>2] = $__g$i;
   HEAP32[$__dc$i>>2] = 0;
   $14 = (($__buf$i) + 4|0);
   $15 = HEAP32[$__thousands_sep$i>>2]|0;
   $$pre$i$i$i5$i = $0;$$sroa$06$0 = $1;$__a$0$i = $13;
   while(1) {
    $16 = ($$pre$i$i$i5$i|0)==(0|0);
    if ($16) {
     $181 = 1;$94 = 0;
    } else {
     $17 = (($$pre$i$i$i5$i) + 12|0);
     $18 = HEAP32[$17>>2]|0;
     $19 = (($$pre$i$i$i5$i) + 16|0);
     $20 = HEAP32[$19>>2]|0;
     $21 = ($18|0)==($20|0);
     if ($21) {
      $22 = HEAP32[$$pre$i$i$i5$i>>2]|0;
      $23 = (($22) + 36|0);
      $24 = HEAP32[$23>>2]|0;
      __THREW__ = 0;
      $25 = (invoke_ii($24|0,($$pre$i$i$i5$i|0))|0);
      $26 = __THREW__; __THREW__ = 0;
      $27 = $26&1;
      if ($27) {
       label = 36;
       break;
      } else {
       $$0$i$i$i$i3$i = $25;
      }
     } else {
      $28 = HEAP32[$18>>2]|0;
      $$0$i$i$i$i3$i = $28;
     }
     $29 = ($$0$i$i$i$i3$i|0)==(-1);
     $$$pre$i$i$i5$i = $29 ? 0 : $$pre$i$i$i5$i;
     $$ = $29 ? 1 : 0;
     $181 = $$;$94 = $$$pre$i$i$i5$i;
    }
    $30 = ($$sroa$06$0|0)==(0|0);
    if ($30) {
     label = 20;
    } else {
     $31 = (($$sroa$06$0) + 12|0);
     $32 = HEAP32[$31>>2]|0;
     $33 = (($$sroa$06$0) + 16|0);
     $34 = HEAP32[$33>>2]|0;
     $35 = ($32|0)==($34|0);
     if ($35) {
      $36 = HEAP32[$$sroa$06$0>>2]|0;
      $37 = (($36) + 36|0);
      $38 = HEAP32[$37>>2]|0;
      __THREW__ = 0;
      $39 = (invoke_ii($38|0,($$sroa$06$0|0))|0);
      $40 = __THREW__; __THREW__ = 0;
      $41 = $40&1;
      if ($41) {
       label = 36;
       break;
      } else {
       $$0$i$i1$i$i9$i = $39;
      }
     } else {
      $42 = HEAP32[$32>>2]|0;
      $$0$i$i1$i$i9$i = $42;
     }
     $43 = ($$0$i$i1$i$i9$i|0)==(-1);
     if ($43) {
      label = 20;
     } else {
      if ($181) {
       $$sroa$06$2 = $$sroa$06$0;
      } else {
       $$pre$i3$i$i$i = $$sroa$06$0;$__a$2$i = $__a$0$i;
       break;
      }
     }
    }
    if ((label|0) == 20) {
     label = 0;
     if ($181) {
      $$pre$i3$i$i$i = 0;$__a$2$i = $__a$0$i;
      break;
     } else {
      $$sroa$06$2 = 0;
     }
    }
    $44 = HEAP32[$__a_end$i>>2]|0;
    $45 = $44;
    $46 = $__a$0$i;
    $47 = (($45) - ($46))|0;
    $48 = HEAP8[$__buf$i>>0]|0;
    $49 = $48 & 1;
    $50 = ($49<<24>>24)==(0);
    if ($50) {
     $52 = $48&255;
     $53 = $52 >>> 1;
     $55 = $53;
    } else {
     $51 = HEAP32[$14>>2]|0;
     $55 = $51;
    }
    $54 = ($47|0)==($55|0);
    if ($54) {
     if ($50) {
      $57 = $48&255;
      $58 = $57 >>> 1;
      $60 = $58;
     } else {
      $56 = HEAP32[$14>>2]|0;
      $60 = $56;
     }
     $59 = $60 << 1;
     __THREW__ = 0;
     invoke_vii(451,($__buf$i|0),($59|0));
     $61 = __THREW__; __THREW__ = 0;
     $62 = $61&1;
     if ($62) {
      label = 36;
      break;
     }
     $63 = HEAP8[$__buf$i>>0]|0;
     $64 = $63 & 1;
     $65 = ($64<<24>>24)==(0);
     if ($65) {
      $68 = 10;
     } else {
      $66 = HEAP32[$__buf$i>>2]|0;
      $67 = $66 & -2;
      $phitmp$i23$i = (($67) + -1)|0;
      $68 = $phitmp$i23$i;
     }
     __THREW__ = 0;
     invoke_vii(451,($__buf$i|0),($68|0));
     $69 = __THREW__; __THREW__ = 0;
     $70 = $69&1;
     if ($70) {
      label = 36;
      break;
     }
     $71 = HEAP8[$__buf$i>>0]|0;
     $72 = $71 & 1;
     $73 = ($72<<24>>24)==(0);
     if ($73) {
      $76 = $$pre$phi34$iZ2D;
     } else {
      $74 = HEAP32[$$pre$phi36$iZ2D>>2]|0;
      $76 = $74;
     }
     $75 = (($76) + ($60)|0);
     HEAP32[$__a_end$i>>2] = $75;
     $__a$1$i = $76;
    } else {
     $__a$1$i = $__a$0$i;
    }
    $93 = (($94) + 12|0);
    $95 = HEAP32[$93>>2]|0;
    $96 = (($94) + 16|0);
    $97 = HEAP32[$96>>2]|0;
    $98 = ($95|0)==($97|0);
    if ($98) {
     $99 = HEAP32[$94>>2]|0;
     $100 = (($99) + 36|0);
     $101 = HEAP32[$100>>2]|0;
     __THREW__ = 0;
     $102 = (invoke_ii($101|0,($94|0))|0);
     $103 = __THREW__; __THREW__ = 0;
     $104 = $103&1;
     if ($104) {
      label = 36;
      break;
     } else {
      $$0$i$i$i = $102;
     }
    } else {
     $105 = HEAP32[$95>>2]|0;
     $$0$i$i$i = $105;
    }
    $106 = (__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i$i,$$0$i$i,$__a$1$i,$__a_end$i,$__dc$i,$15,$__grouping$i,$__g$i,$__g_end$i,$__atoms$i)|0);
    $107 = ($106|0)==(0);
    if (!($107)) {
     $$pre$i3$i$i$i = $$sroa$06$2;$__a$2$i = $__a$1$i;
     break;
    }
    $108 = HEAP32[$93>>2]|0;
    $109 = HEAP32[$96>>2]|0;
    $110 = ($108|0)==($109|0);
    if ($110) {
     $111 = HEAP32[$94>>2]|0;
     $112 = (($111) + 40|0);
     $113 = HEAP32[$112>>2]|0;
     __THREW__ = 0;
     (invoke_ii($113|0,($94|0))|0);
     $114 = __THREW__; __THREW__ = 0;
     $115 = $114&1;
     if ($115) {
      label = 36;
      break;
     } else {
      $$pre$i$i$i5$i = $94;$$sroa$06$0 = $$sroa$06$2;$__a$0$i = $__a$1$i;
      continue;
     }
    } else {
     $116 = (($108) + 4|0);
     HEAP32[$93>>2] = $116;
     $$pre$i$i$i5$i = $94;$$sroa$06$0 = $$sroa$06$2;$__a$0$i = $__a$1$i;
     continue;
    }
   }
   if ((label|0) == 36) {
    $77 = ___cxa_find_matching_catch(-1,-1)|0;
    $78 = tempRet0;
    $lpad$phi$i$index = $77;$lpad$phi$i$index10 = $78;
    break;
   }
   $117 = HEAP8[$__grouping$i>>0]|0;
   $118 = $117 & 1;
   $119 = ($118<<24>>24)==(0);
   if ($119) {
    $122 = $117&255;
    $123 = $122 >>> 1;
    $125 = $123;
   } else {
    $120 = (($__grouping$i) + 4|0);
    $121 = HEAP32[$120>>2]|0;
    $125 = $121;
   }
   $124 = ($125|0)==(0);
   if (!($124)) {
    $126 = HEAP32[$__g_end$i>>2]|0;
    $127 = $126;
    $128 = $__g$i;
    $129 = (($127) - ($128))|0;
    $130 = ($129|0)<(160);
    if ($130) {
     $131 = HEAP32[$__dc$i>>2]|0;
     $132 = (($126) + 4|0);
     HEAP32[$__g_end$i>>2] = $132;
     HEAP32[$126>>2] = $131;
    }
   }
   $133 = HEAP32[$__a_end$i>>2]|0;
   __THREW__ = 0;
   $134 = (invoke_iiiii(454,($__a$2$i|0),($133|0),($__err|0),($$0$i$i|0))|0);
   $135 = __THREW__; __THREW__ = 0;
   $136 = $135&1;
   if ($136) {
    label = 37;
   } else {
    HEAP16[$__v>>1] = $134;
    $137 = HEAP32[$__g_end$i>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping$i,$__g$i,$137,$__err);
    $138 = ($94|0)==(0|0);
    if ($138) {
     $168 = 0;$182 = 1;
    } else {
     $139 = (($94) + 12|0);
     $140 = HEAP32[$139>>2]|0;
     $141 = (($94) + 16|0);
     $142 = HEAP32[$141>>2]|0;
     $143 = ($140|0)==($142|0);
     if ($143) {
      $144 = HEAP32[$94>>2]|0;
      $145 = (($144) + 36|0);
      $146 = HEAP32[$145>>2]|0;
      __THREW__ = 0;
      $147 = (invoke_ii($146|0,($94|0))|0);
      $148 = __THREW__; __THREW__ = 0;
      $149 = $148&1;
      if ($149) {
       label = 37;
       break;
      } else {
       $$0$i$i$i$i$i = $147;
      }
     } else {
      $150 = HEAP32[$140>>2]|0;
      $$0$i$i$i$i$i = $150;
     }
     $151 = ($$0$i$i$i$i$i|0)==(-1);
     $$7 = $151 ? 0 : $94;
     $$8 = $151 ? 1 : 0;
     $168 = $$7;$182 = $$8;
    }
    $152 = ($$pre$i3$i$i$i|0)==(0|0);
    if ($152) {
     label = 69;
    } else {
     $153 = (($$pre$i3$i$i$i) + 12|0);
     $154 = HEAP32[$153>>2]|0;
     $155 = (($$pre$i3$i$i$i) + 16|0);
     $156 = HEAP32[$155>>2]|0;
     $157 = ($154|0)==($156|0);
     if ($157) {
      $158 = HEAP32[$$pre$i3$i$i$i>>2]|0;
      $159 = (($158) + 36|0);
      $160 = HEAP32[$159>>2]|0;
      __THREW__ = 0;
      $161 = (invoke_ii($160|0,($$pre$i3$i$i$i|0))|0);
      $162 = __THREW__; __THREW__ = 0;
      $163 = $162&1;
      if ($163) {
       label = 37;
       break;
      } else {
       $$0$i$i1$i$i$i = $161;
      }
     } else {
      $164 = HEAP32[$154>>2]|0;
      $$0$i$i1$i$i$i = $164;
     }
     $165 = ($$0$i$i1$i$i$i|0)==(-1);
     if ($165) {
      label = 69;
     } else {
      if (!($182)) {
       label = 71;
      }
     }
    }
    if ((label|0) == 69) {
     if ($182) {
      label = 71;
     }
    }
    if ((label|0) == 71) {
     $166 = HEAP32[$__err>>2]|0;
     $167 = $166 | 2;
     HEAP32[$__err>>2] = $167;
    }
    HEAP32[$agg$result>>2] = $168;
    $169 = HEAP8[$__buf$i>>0]|0;
    $170 = $169 & 1;
    $171 = ($170<<24>>24)==(0);
    if (!($171)) {
     $172 = (($__buf$i) + 8|0);
     $173 = HEAP32[$172>>2]|0;
     $174 = ($173|0)==(0|0);
     if (!($174)) {
      _free($173);
     }
    }
    $175 = HEAP8[$__grouping$i>>0]|0;
    $176 = $175 & 1;
    $177 = ($176<<24>>24)==(0);
    if ($177) {
     STACKTOP = sp;return;
    }
    $178 = (($__grouping$i) + 8|0);
    $179 = HEAP32[$178>>2]|0;
    $180 = ($179|0)==(0|0);
    if ($180) {
     STACKTOP = sp;return;
    }
    _free($179);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 37) {
  $79 = ___cxa_find_matching_catch(-1,-1)|0;
  $80 = tempRet0;
  $lpad$phi$i$index = $79;$lpad$phi$i$index10 = $80;
 }
 $81 = HEAP8[$__buf$i>>0]|0;
 $82 = $81 & 1;
 $83 = ($82<<24>>24)==(0);
 if (!($83)) {
  $84 = (($__buf$i) + 8|0);
  $85 = HEAP32[$84>>2]|0;
  $86 = ($85|0)==(0|0);
  if (!($86)) {
   _free($85);
  }
 }
 $87 = HEAP8[$__grouping$i>>0]|0;
 $88 = $87 & 1;
 $89 = ($88<<24>>24)==(0);
 if ($89) {
  ___resumeException($lpad$phi$i$index|0);
  // unreachable;
 }
 $90 = (($__grouping$i) + 8|0);
 $91 = HEAP32[$90>>2]|0;
 $92 = ($91|0)==(0|0);
 if ($92) {
  ___resumeException($lpad$phi$i$index|0);
  // unreachable;
 }
 _free($91);
 ___resumeException($lpad$phi$i$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$ = 0, $$$pre$i$i$i5$i = 0, $$0$i$i = 0, $$0$i$i$i = 0, $$0$i$i$i$i$i = 0, $$0$i$i$i$i3$i = 0, $$0$i$i1$i$i$i = 0, $$0$i$i1$i$i9$i = 0, $$7 = 0, $$8 = 0, $$pre$i$i$i5$i = 0, $$pre$i3$i$i$i = 0, $$pre$phi34$iZ2D = 0, $$pre$phi36$iZ2D = 0, $$pre33$i = 0, $$pre35$i = 0, $$sroa$06$0 = 0, $$sroa$06$2 = 0, $0 = 0, $1 = 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $__a$0$i = 0, $__a$1$i = 0, $__a$2$i = 0, $__a_end$i = 0, $__atoms$i = 0, $__buf$i = 0, $__dc$i = 0, $__g$i = 0, $__g_end$i = 0, $__grouping$i = 0, $__thousands_sep$i = 0, $lpad$phi$i$index = 0, $lpad$phi$i$index10 = 0, $phitmp$i23$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0;
 $__atoms$i = sp + 200|0;
 $__thousands_sep$i = sp + 196|0;
 $__grouping$i = sp + 184|0;
 $__buf$i = sp + 172|0;
 $__a_end$i = sp + 168|0;
 $__g$i = sp + 8|0;
 $__g_end$i = sp + 4|0;
 $__dc$i = sp;
 $0 = HEAP32[$__b>>2]|0;
 $1 = HEAP32[$__e>>2]|0;
 $2 = (($__iob) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & 74;
 if ((($4|0) == 64)) {
  $$0$i$i = 8;
 } else if ((($4|0) == 8)) {
  $$0$i$i = 16;
 } else if ((($4|0) == 0)) {
  $$0$i$i = 0;
 } else {
  $$0$i$i = 10;
 }
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping$i,$__iob,$__atoms$i,$__thousands_sep$i);
 ;HEAP32[$__buf$i+0>>2]=0|0;HEAP32[$__buf$i+4>>2]=0|0;HEAP32[$__buf$i+8>>2]=0|0;
 __THREW__ = 0;
 invoke_vii(451,($__buf$i|0),10);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 do {
  if ($6) {
   label = 37;
  } else {
   $7 = HEAP8[$__buf$i>>0]|0;
   $8 = $7 & 1;
   $9 = ($8<<24>>24)==(0);
   if ($9) {
    $12 = (($__buf$i) + 1|0);
    $$pre35$i = (($__buf$i) + 8|0);
    $$pre$phi34$iZ2D = $12;$$pre$phi36$iZ2D = $$pre35$i;$13 = $12;
   } else {
    $10 = (($__buf$i) + 8|0);
    $11 = HEAP32[$10>>2]|0;
    $$pre33$i = (($__buf$i) + 1|0);
    $$pre$phi34$iZ2D = $$pre33$i;$$pre$phi36$iZ2D = $10;$13 = $11;
   }
   HEAP32[$__a_end$i>>2] = $13;
   HEAP32[$__g_end$i>>2] = $__g$i;
   HEAP32[$__dc$i>>2] = 0;
   $14 = (($__buf$i) + 4|0);
   $15 = HEAP32[$__thousands_sep$i>>2]|0;
   $$pre$i$i$i5$i = $0;$$sroa$06$0 = $1;$__a$0$i = $13;
   while(1) {
    $16 = ($$pre$i$i$i5$i|0)==(0|0);
    if ($16) {
     $181 = 1;$94 = 0;
    } else {
     $17 = (($$pre$i$i$i5$i) + 12|0);
     $18 = HEAP32[$17>>2]|0;
     $19 = (($$pre$i$i$i5$i) + 16|0);
     $20 = HEAP32[$19>>2]|0;
     $21 = ($18|0)==($20|0);
     if ($21) {
      $22 = HEAP32[$$pre$i$i$i5$i>>2]|0;
      $23 = (($22) + 36|0);
      $24 = HEAP32[$23>>2]|0;
      __THREW__ = 0;
      $25 = (invoke_ii($24|0,($$pre$i$i$i5$i|0))|0);
      $26 = __THREW__; __THREW__ = 0;
      $27 = $26&1;
      if ($27) {
       label = 36;
       break;
      } else {
       $$0$i$i$i$i3$i = $25;
      }
     } else {
      $28 = HEAP32[$18>>2]|0;
      $$0$i$i$i$i3$i = $28;
     }
     $29 = ($$0$i$i$i$i3$i|0)==(-1);
     $$$pre$i$i$i5$i = $29 ? 0 : $$pre$i$i$i5$i;
     $$ = $29 ? 1 : 0;
     $181 = $$;$94 = $$$pre$i$i$i5$i;
    }
    $30 = ($$sroa$06$0|0)==(0|0);
    if ($30) {
     label = 20;
    } else {
     $31 = (($$sroa$06$0) + 12|0);
     $32 = HEAP32[$31>>2]|0;
     $33 = (($$sroa$06$0) + 16|0);
     $34 = HEAP32[$33>>2]|0;
     $35 = ($32|0)==($34|0);
     if ($35) {
      $36 = HEAP32[$$sroa$06$0>>2]|0;
      $37 = (($36) + 36|0);
      $38 = HEAP32[$37>>2]|0;
      __THREW__ = 0;
      $39 = (invoke_ii($38|0,($$sroa$06$0|0))|0);
      $40 = __THREW__; __THREW__ = 0;
      $41 = $40&1;
      if ($41) {
       label = 36;
       break;
      } else {
       $$0$i$i1$i$i9$i = $39;
      }
     } else {
      $42 = HEAP32[$32>>2]|0;
      $$0$i$i1$i$i9$i = $42;
     }
     $43 = ($$0$i$i1$i$i9$i|0)==(-1);
     if ($43) {
      label = 20;
     } else {
      if ($181) {
       $$sroa$06$2 = $$sroa$06$0;
      } else {
       $$pre$i3$i$i$i = $$sroa$06$0;$__a$2$i = $__a$0$i;
       break;
      }
     }
    }
    if ((label|0) == 20) {
     label = 0;
     if ($181) {
      $$pre$i3$i$i$i = 0;$__a$2$i = $__a$0$i;
      break;
     } else {
      $$sroa$06$2 = 0;
     }
    }
    $44 = HEAP32[$__a_end$i>>2]|0;
    $45 = $44;
    $46 = $__a$0$i;
    $47 = (($45) - ($46))|0;
    $48 = HEAP8[$__buf$i>>0]|0;
    $49 = $48 & 1;
    $50 = ($49<<24>>24)==(0);
    if ($50) {
     $52 = $48&255;
     $53 = $52 >>> 1;
     $55 = $53;
    } else {
     $51 = HEAP32[$14>>2]|0;
     $55 = $51;
    }
    $54 = ($47|0)==($55|0);
    if ($54) {
     if ($50) {
      $57 = $48&255;
      $58 = $57 >>> 1;
      $60 = $58;
     } else {
      $56 = HEAP32[$14>>2]|0;
      $60 = $56;
     }
     $59 = $60 << 1;
     __THREW__ = 0;
     invoke_vii(451,($__buf$i|0),($59|0));
     $61 = __THREW__; __THREW__ = 0;
     $62 = $61&1;
     if ($62) {
      label = 36;
      break;
     }
     $63 = HEAP8[$__buf$i>>0]|0;
     $64 = $63 & 1;
     $65 = ($64<<24>>24)==(0);
     if ($65) {
      $68 = 10;
     } else {
      $66 = HEAP32[$__buf$i>>2]|0;
      $67 = $66 & -2;
      $phitmp$i23$i = (($67) + -1)|0;
      $68 = $phitmp$i23$i;
     }
     __THREW__ = 0;
     invoke_vii(451,($__buf$i|0),($68|0));
     $69 = __THREW__; __THREW__ = 0;
     $70 = $69&1;
     if ($70) {
      label = 36;
      break;
     }
     $71 = HEAP8[$__buf$i>>0]|0;
     $72 = $71 & 1;
     $73 = ($72<<24>>24)==(0);
     if ($73) {
      $76 = $$pre$phi34$iZ2D;
     } else {
      $74 = HEAP32[$$pre$phi36$iZ2D>>2]|0;
      $76 = $74;
     }
     $75 = (($76) + ($60)|0);
     HEAP32[$__a_end$i>>2] = $75;
     $__a$1$i = $76;
    } else {
     $__a$1$i = $__a$0$i;
    }
    $93 = (($94) + 12|0);
    $95 = HEAP32[$93>>2]|0;
    $96 = (($94) + 16|0);
    $97 = HEAP32[$96>>2]|0;
    $98 = ($95|0)==($97|0);
    if ($98) {
     $99 = HEAP32[$94>>2]|0;
     $100 = (($99) + 36|0);
     $101 = HEAP32[$100>>2]|0;
     __THREW__ = 0;
     $102 = (invoke_ii($101|0,($94|0))|0);
     $103 = __THREW__; __THREW__ = 0;
     $104 = $103&1;
     if ($104) {
      label = 36;
      break;
     } else {
      $$0$i$i$i = $102;
     }
    } else {
     $105 = HEAP32[$95>>2]|0;
     $$0$i$i$i = $105;
    }
    $106 = (__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i$i,$$0$i$i,$__a$1$i,$__a_end$i,$__dc$i,$15,$__grouping$i,$__g$i,$__g_end$i,$__atoms$i)|0);
    $107 = ($106|0)==(0);
    if (!($107)) {
     $$pre$i3$i$i$i = $$sroa$06$2;$__a$2$i = $__a$1$i;
     break;
    }
    $108 = HEAP32[$93>>2]|0;
    $109 = HEAP32[$96>>2]|0;
    $110 = ($108|0)==($109|0);
    if ($110) {
     $111 = HEAP32[$94>>2]|0;
     $112 = (($111) + 40|0);
     $113 = HEAP32[$112>>2]|0;
     __THREW__ = 0;
     (invoke_ii($113|0,($94|0))|0);
     $114 = __THREW__; __THREW__ = 0;
     $115 = $114&1;
     if ($115) {
      label = 36;
      break;
     } else {
      $$pre$i$i$i5$i = $94;$$sroa$06$0 = $$sroa$06$2;$__a$0$i = $__a$1$i;
      continue;
     }
    } else {
     $116 = (($108) + 4|0);
     HEAP32[$93>>2] = $116;
     $$pre$i$i$i5$i = $94;$$sroa$06$0 = $$sroa$06$2;$__a$0$i = $__a$1$i;
     continue;
    }
   }
   if ((label|0) == 36) {
    $77 = ___cxa_find_matching_catch(-1,-1)|0;
    $78 = tempRet0;
    $lpad$phi$i$index = $77;$lpad$phi$i$index10 = $78;
    break;
   }
   $117 = HEAP8[$__grouping$i>>0]|0;
   $118 = $117 & 1;
   $119 = ($118<<24>>24)==(0);
   if ($119) {
    $122 = $117&255;
    $123 = $122 >>> 1;
    $125 = $123;
   } else {
    $120 = (($__grouping$i) + 4|0);
    $121 = HEAP32[$120>>2]|0;
    $125 = $121;
   }
   $124 = ($125|0)==(0);
   if (!($124)) {
    $126 = HEAP32[$__g_end$i>>2]|0;
    $127 = $126;
    $128 = $__g$i;
    $129 = (($127) - ($128))|0;
    $130 = ($129|0)<(160);
    if ($130) {
     $131 = HEAP32[$__dc$i>>2]|0;
     $132 = (($126) + 4|0);
     HEAP32[$__g_end$i>>2] = $132;
     HEAP32[$126>>2] = $131;
    }
   }
   $133 = HEAP32[$__a_end$i>>2]|0;
   __THREW__ = 0;
   $134 = (invoke_iiiii(455,($__a$2$i|0),($133|0),($__err|0),($$0$i$i|0))|0);
   $135 = __THREW__; __THREW__ = 0;
   $136 = $135&1;
   if ($136) {
    label = 37;
   } else {
    HEAP32[$__v>>2] = $134;
    $137 = HEAP32[$__g_end$i>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping$i,$__g$i,$137,$__err);
    $138 = ($94|0)==(0|0);
    if ($138) {
     $168 = 0;$182 = 1;
    } else {
     $139 = (($94) + 12|0);
     $140 = HEAP32[$139>>2]|0;
     $141 = (($94) + 16|0);
     $142 = HEAP32[$141>>2]|0;
     $143 = ($140|0)==($142|0);
     if ($143) {
      $144 = HEAP32[$94>>2]|0;
      $145 = (($144) + 36|0);
      $146 = HEAP32[$145>>2]|0;
      __THREW__ = 0;
      $147 = (invoke_ii($146|0,($94|0))|0);
      $148 = __THREW__; __THREW__ = 0;
      $149 = $148&1;
      if ($149) {
       label = 37;
       break;
      } else {
       $$0$i$i$i$i$i = $147;
      }
     } else {
      $150 = HEAP32[$140>>2]|0;
      $$0$i$i$i$i$i = $150;
     }
     $151 = ($$0$i$i$i$i$i|0)==(-1);
     $$7 = $151 ? 0 : $94;
     $$8 = $151 ? 1 : 0;
     $168 = $$7;$182 = $$8;
    }
    $152 = ($$pre$i3$i$i$i|0)==(0|0);
    if ($152) {
     label = 69;
    } else {
     $153 = (($$pre$i3$i$i$i) + 12|0);
     $154 = HEAP32[$153>>2]|0;
     $155 = (($$pre$i3$i$i$i) + 16|0);
     $156 = HEAP32[$155>>2]|0;
     $157 = ($154|0)==($156|0);
     if ($157) {
      $158 = HEAP32[$$pre$i3$i$i$i>>2]|0;
      $159 = (($158) + 36|0);
      $160 = HEAP32[$159>>2]|0;
      __THREW__ = 0;
      $161 = (invoke_ii($160|0,($$pre$i3$i$i$i|0))|0);
      $162 = __THREW__; __THREW__ = 0;
      $163 = $162&1;
      if ($163) {
       label = 37;
       break;
      } else {
       $$0$i$i1$i$i$i = $161;
      }
     } else {
      $164 = HEAP32[$154>>2]|0;
      $$0$i$i1$i$i$i = $164;
     }
     $165 = ($$0$i$i1$i$i$i|0)==(-1);
     if ($165) {
      label = 69;
     } else {
      if (!($182)) {
       label = 71;
      }
     }
    }
    if ((label|0) == 69) {
     if ($182) {
      label = 71;
     }
    }
    if ((label|0) == 71) {
     $166 = HEAP32[$__err>>2]|0;
     $167 = $166 | 2;
     HEAP32[$__err>>2] = $167;
    }
    HEAP32[$agg$result>>2] = $168;
    $169 = HEAP8[$__buf$i>>0]|0;
    $170 = $169 & 1;
    $171 = ($170<<24>>24)==(0);
    if (!($171)) {
     $172 = (($__buf$i) + 8|0);
     $173 = HEAP32[$172>>2]|0;
     $174 = ($173|0)==(0|0);
     if (!($174)) {
      _free($173);
     }
    }
    $175 = HEAP8[$__grouping$i>>0]|0;
    $176 = $175 & 1;
    $177 = ($176<<24>>24)==(0);
    if ($177) {
     STACKTOP = sp;return;
    }
    $178 = (($__grouping$i) + 8|0);
    $179 = HEAP32[$178>>2]|0;
    $180 = ($179|0)==(0|0);
    if ($180) {
     STACKTOP = sp;return;
    }
    _free($179);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 37) {
  $79 = ___cxa_find_matching_catch(-1,-1)|0;
  $80 = tempRet0;
  $lpad$phi$i$index = $79;$lpad$phi$i$index10 = $80;
 }
 $81 = HEAP8[$__buf$i>>0]|0;
 $82 = $81 & 1;
 $83 = ($82<<24>>24)==(0);
 if (!($83)) {
  $84 = (($__buf$i) + 8|0);
  $85 = HEAP32[$84>>2]|0;
  $86 = ($85|0)==(0|0);
  if (!($86)) {
   _free($85);
  }
 }
 $87 = HEAP8[$__grouping$i>>0]|0;
 $88 = $87 & 1;
 $89 = ($88<<24>>24)==(0);
 if ($89) {
  ___resumeException($lpad$phi$i$index|0);
  // unreachable;
 }
 $90 = (($__grouping$i) + 8|0);
 $91 = HEAP32[$90>>2]|0;
 $92 = ($91|0)==(0|0);
 if ($92) {
  ___resumeException($lpad$phi$i$index|0);
  // unreachable;
 }
 _free($91);
 ___resumeException($lpad$phi$i$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRm($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$ = 0, $$$pre$i$i$i5$i = 0, $$0$i$i = 0, $$0$i$i$i = 0, $$0$i$i$i$i$i = 0, $$0$i$i$i$i3$i = 0, $$0$i$i1$i$i$i = 0, $$0$i$i1$i$i9$i = 0, $$7 = 0, $$8 = 0, $$pre$i$i$i5$i = 0, $$pre$i3$i$i$i = 0, $$pre$phi34$iZ2D = 0, $$pre$phi36$iZ2D = 0, $$pre33$i = 0, $$pre35$i = 0, $$sroa$06$0 = 0, $$sroa$06$2 = 0, $0 = 0, $1 = 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $__a$0$i = 0, $__a$1$i = 0, $__a$2$i = 0, $__a_end$i = 0, $__atoms$i = 0, $__buf$i = 0, $__dc$i = 0, $__g$i = 0, $__g_end$i = 0, $__grouping$i = 0, $__thousands_sep$i = 0, $lpad$phi$i$index = 0, $lpad$phi$i$index10 = 0, $phitmp$i23$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0;
 $__atoms$i = sp + 200|0;
 $__thousands_sep$i = sp + 196|0;
 $__grouping$i = sp + 184|0;
 $__buf$i = sp + 172|0;
 $__a_end$i = sp + 168|0;
 $__g$i = sp + 8|0;
 $__g_end$i = sp + 4|0;
 $__dc$i = sp;
 $0 = HEAP32[$__b>>2]|0;
 $1 = HEAP32[$__e>>2]|0;
 $2 = (($__iob) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & 74;
 if ((($4|0) == 64)) {
  $$0$i$i = 8;
 } else if ((($4|0) == 8)) {
  $$0$i$i = 16;
 } else if ((($4|0) == 0)) {
  $$0$i$i = 0;
 } else {
  $$0$i$i = 10;
 }
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping$i,$__iob,$__atoms$i,$__thousands_sep$i);
 ;HEAP32[$__buf$i+0>>2]=0|0;HEAP32[$__buf$i+4>>2]=0|0;HEAP32[$__buf$i+8>>2]=0|0;
 __THREW__ = 0;
 invoke_vii(451,($__buf$i|0),10);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 do {
  if ($6) {
   label = 37;
  } else {
   $7 = HEAP8[$__buf$i>>0]|0;
   $8 = $7 & 1;
   $9 = ($8<<24>>24)==(0);
   if ($9) {
    $12 = (($__buf$i) + 1|0);
    $$pre35$i = (($__buf$i) + 8|0);
    $$pre$phi34$iZ2D = $12;$$pre$phi36$iZ2D = $$pre35$i;$13 = $12;
   } else {
    $10 = (($__buf$i) + 8|0);
    $11 = HEAP32[$10>>2]|0;
    $$pre33$i = (($__buf$i) + 1|0);
    $$pre$phi34$iZ2D = $$pre33$i;$$pre$phi36$iZ2D = $10;$13 = $11;
   }
   HEAP32[$__a_end$i>>2] = $13;
   HEAP32[$__g_end$i>>2] = $__g$i;
   HEAP32[$__dc$i>>2] = 0;
   $14 = (($__buf$i) + 4|0);
   $15 = HEAP32[$__thousands_sep$i>>2]|0;
   $$pre$i$i$i5$i = $0;$$sroa$06$0 = $1;$__a$0$i = $13;
   while(1) {
    $16 = ($$pre$i$i$i5$i|0)==(0|0);
    if ($16) {
     $181 = 1;$94 = 0;
    } else {
     $17 = (($$pre$i$i$i5$i) + 12|0);
     $18 = HEAP32[$17>>2]|0;
     $19 = (($$pre$i$i$i5$i) + 16|0);
     $20 = HEAP32[$19>>2]|0;
     $21 = ($18|0)==($20|0);
     if ($21) {
      $22 = HEAP32[$$pre$i$i$i5$i>>2]|0;
      $23 = (($22) + 36|0);
      $24 = HEAP32[$23>>2]|0;
      __THREW__ = 0;
      $25 = (invoke_ii($24|0,($$pre$i$i$i5$i|0))|0);
      $26 = __THREW__; __THREW__ = 0;
      $27 = $26&1;
      if ($27) {
       label = 36;
       break;
      } else {
       $$0$i$i$i$i3$i = $25;
      }
     } else {
      $28 = HEAP32[$18>>2]|0;
      $$0$i$i$i$i3$i = $28;
     }
     $29 = ($$0$i$i$i$i3$i|0)==(-1);
     $$$pre$i$i$i5$i = $29 ? 0 : $$pre$i$i$i5$i;
     $$ = $29 ? 1 : 0;
     $181 = $$;$94 = $$$pre$i$i$i5$i;
    }
    $30 = ($$sroa$06$0|0)==(0|0);
    if ($30) {
     label = 20;
    } else {
     $31 = (($$sroa$06$0) + 12|0);
     $32 = HEAP32[$31>>2]|0;
     $33 = (($$sroa$06$0) + 16|0);
     $34 = HEAP32[$33>>2]|0;
     $35 = ($32|0)==($34|0);
     if ($35) {
      $36 = HEAP32[$$sroa$06$0>>2]|0;
      $37 = (($36) + 36|0);
      $38 = HEAP32[$37>>2]|0;
      __THREW__ = 0;
      $39 = (invoke_ii($38|0,($$sroa$06$0|0))|0);
      $40 = __THREW__; __THREW__ = 0;
      $41 = $40&1;
      if ($41) {
       label = 36;
       break;
      } else {
       $$0$i$i1$i$i9$i = $39;
      }
     } else {
      $42 = HEAP32[$32>>2]|0;
      $$0$i$i1$i$i9$i = $42;
     }
     $43 = ($$0$i$i1$i$i9$i|0)==(-1);
     if ($43) {
      label = 20;
     } else {
      if ($181) {
       $$sroa$06$2 = $$sroa$06$0;
      } else {
       $$pre$i3$i$i$i = $$sroa$06$0;$__a$2$i = $__a$0$i;
       break;
      }
     }
    }
    if ((label|0) == 20) {
     label = 0;
     if ($181) {
      $$pre$i3$i$i$i = 0;$__a$2$i = $__a$0$i;
      break;
     } else {
      $$sroa$06$2 = 0;
     }
    }
    $44 = HEAP32[$__a_end$i>>2]|0;
    $45 = $44;
    $46 = $__a$0$i;
    $47 = (($45) - ($46))|0;
    $48 = HEAP8[$__buf$i>>0]|0;
    $49 = $48 & 1;
    $50 = ($49<<24>>24)==(0);
    if ($50) {
     $52 = $48&255;
     $53 = $52 >>> 1;
     $55 = $53;
    } else {
     $51 = HEAP32[$14>>2]|0;
     $55 = $51;
    }
    $54 = ($47|0)==($55|0);
    if ($54) {
     if ($50) {
      $57 = $48&255;
      $58 = $57 >>> 1;
      $60 = $58;
     } else {
      $56 = HEAP32[$14>>2]|0;
      $60 = $56;
     }
     $59 = $60 << 1;
     __THREW__ = 0;
     invoke_vii(451,($__buf$i|0),($59|0));
     $61 = __THREW__; __THREW__ = 0;
     $62 = $61&1;
     if ($62) {
      label = 36;
      break;
     }
     $63 = HEAP8[$__buf$i>>0]|0;
     $64 = $63 & 1;
     $65 = ($64<<24>>24)==(0);
     if ($65) {
      $68 = 10;
     } else {
      $66 = HEAP32[$__buf$i>>2]|0;
      $67 = $66 & -2;
      $phitmp$i23$i = (($67) + -1)|0;
      $68 = $phitmp$i23$i;
     }
     __THREW__ = 0;
     invoke_vii(451,($__buf$i|0),($68|0));
     $69 = __THREW__; __THREW__ = 0;
     $70 = $69&1;
     if ($70) {
      label = 36;
      break;
     }
     $71 = HEAP8[$__buf$i>>0]|0;
     $72 = $71 & 1;
     $73 = ($72<<24>>24)==(0);
     if ($73) {
      $76 = $$pre$phi34$iZ2D;
     } else {
      $74 = HEAP32[$$pre$phi36$iZ2D>>2]|0;
      $76 = $74;
     }
     $75 = (($76) + ($60)|0);
     HEAP32[$__a_end$i>>2] = $75;
     $__a$1$i = $76;
    } else {
     $__a$1$i = $__a$0$i;
    }
    $93 = (($94) + 12|0);
    $95 = HEAP32[$93>>2]|0;
    $96 = (($94) + 16|0);
    $97 = HEAP32[$96>>2]|0;
    $98 = ($95|0)==($97|0);
    if ($98) {
     $99 = HEAP32[$94>>2]|0;
     $100 = (($99) + 36|0);
     $101 = HEAP32[$100>>2]|0;
     __THREW__ = 0;
     $102 = (invoke_ii($101|0,($94|0))|0);
     $103 = __THREW__; __THREW__ = 0;
     $104 = $103&1;
     if ($104) {
      label = 36;
      break;
     } else {
      $$0$i$i$i = $102;
     }
    } else {
     $105 = HEAP32[$95>>2]|0;
     $$0$i$i$i = $105;
    }
    $106 = (__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i$i,$$0$i$i,$__a$1$i,$__a_end$i,$__dc$i,$15,$__grouping$i,$__g$i,$__g_end$i,$__atoms$i)|0);
    $107 = ($106|0)==(0);
    if (!($107)) {
     $$pre$i3$i$i$i = $$sroa$06$2;$__a$2$i = $__a$1$i;
     break;
    }
    $108 = HEAP32[$93>>2]|0;
    $109 = HEAP32[$96>>2]|0;
    $110 = ($108|0)==($109|0);
    if ($110) {
     $111 = HEAP32[$94>>2]|0;
     $112 = (($111) + 40|0);
     $113 = HEAP32[$112>>2]|0;
     __THREW__ = 0;
     (invoke_ii($113|0,($94|0))|0);
     $114 = __THREW__; __THREW__ = 0;
     $115 = $114&1;
     if ($115) {
      label = 36;
      break;
     } else {
      $$pre$i$i$i5$i = $94;$$sroa$06$0 = $$sroa$06$2;$__a$0$i = $__a$1$i;
      continue;
     }
    } else {
     $116 = (($108) + 4|0);
     HEAP32[$93>>2] = $116;
     $$pre$i$i$i5$i = $94;$$sroa$06$0 = $$sroa$06$2;$__a$0$i = $__a$1$i;
     continue;
    }
   }
   if ((label|0) == 36) {
    $77 = ___cxa_find_matching_catch(-1,-1)|0;
    $78 = tempRet0;
    $lpad$phi$i$index = $77;$lpad$phi$i$index10 = $78;
    break;
   }
   $117 = HEAP8[$__grouping$i>>0]|0;
   $118 = $117 & 1;
   $119 = ($118<<24>>24)==(0);
   if ($119) {
    $122 = $117&255;
    $123 = $122 >>> 1;
    $125 = $123;
   } else {
    $120 = (($__grouping$i) + 4|0);
    $121 = HEAP32[$120>>2]|0;
    $125 = $121;
   }
   $124 = ($125|0)==(0);
   if (!($124)) {
    $126 = HEAP32[$__g_end$i>>2]|0;
    $127 = $126;
    $128 = $__g$i;
    $129 = (($127) - ($128))|0;
    $130 = ($129|0)<(160);
    if ($130) {
     $131 = HEAP32[$__dc$i>>2]|0;
     $132 = (($126) + 4|0);
     HEAP32[$__g_end$i>>2] = $132;
     HEAP32[$126>>2] = $131;
    }
   }
   $133 = HEAP32[$__a_end$i>>2]|0;
   __THREW__ = 0;
   $134 = (invoke_iiiii(456,($__a$2$i|0),($133|0),($__err|0),($$0$i$i|0))|0);
   $135 = __THREW__; __THREW__ = 0;
   $136 = $135&1;
   if ($136) {
    label = 37;
   } else {
    HEAP32[$__v>>2] = $134;
    $137 = HEAP32[$__g_end$i>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping$i,$__g$i,$137,$__err);
    $138 = ($94|0)==(0|0);
    if ($138) {
     $168 = 0;$182 = 1;
    } else {
     $139 = (($94) + 12|0);
     $140 = HEAP32[$139>>2]|0;
     $141 = (($94) + 16|0);
     $142 = HEAP32[$141>>2]|0;
     $143 = ($140|0)==($142|0);
     if ($143) {
      $144 = HEAP32[$94>>2]|0;
      $145 = (($144) + 36|0);
      $146 = HEAP32[$145>>2]|0;
      __THREW__ = 0;
      $147 = (invoke_ii($146|0,($94|0))|0);
      $148 = __THREW__; __THREW__ = 0;
      $149 = $148&1;
      if ($149) {
       label = 37;
       break;
      } else {
       $$0$i$i$i$i$i = $147;
      }
     } else {
      $150 = HEAP32[$140>>2]|0;
      $$0$i$i$i$i$i = $150;
     }
     $151 = ($$0$i$i$i$i$i|0)==(-1);
     $$7 = $151 ? 0 : $94;
     $$8 = $151 ? 1 : 0;
     $168 = $$7;$182 = $$8;
    }
    $152 = ($$pre$i3$i$i$i|0)==(0|0);
    if ($152) {
     label = 69;
    } else {
     $153 = (($$pre$i3$i$i$i) + 12|0);
     $154 = HEAP32[$153>>2]|0;
     $155 = (($$pre$i3$i$i$i) + 16|0);
     $156 = HEAP32[$155>>2]|0;
     $157 = ($154|0)==($156|0);
     if ($157) {
      $158 = HEAP32[$$pre$i3$i$i$i>>2]|0;
      $159 = (($158) + 36|0);
      $160 = HEAP32[$159>>2]|0;
      __THREW__ = 0;
      $161 = (invoke_ii($160|0,($$pre$i3$i$i$i|0))|0);
      $162 = __THREW__; __THREW__ = 0;
      $163 = $162&1;
      if ($163) {
       label = 37;
       break;
      } else {
       $$0$i$i1$i$i$i = $161;
      }
     } else {
      $164 = HEAP32[$154>>2]|0;
      $$0$i$i1$i$i$i = $164;
     }
     $165 = ($$0$i$i1$i$i$i|0)==(-1);
     if ($165) {
      label = 69;
     } else {
      if (!($182)) {
       label = 71;
      }
     }
    }
    if ((label|0) == 69) {
     if ($182) {
      label = 71;
     }
    }
    if ((label|0) == 71) {
     $166 = HEAP32[$__err>>2]|0;
     $167 = $166 | 2;
     HEAP32[$__err>>2] = $167;
    }
    HEAP32[$agg$result>>2] = $168;
    $169 = HEAP8[$__buf$i>>0]|0;
    $170 = $169 & 1;
    $171 = ($170<<24>>24)==(0);
    if (!($171)) {
     $172 = (($__buf$i) + 8|0);
     $173 = HEAP32[$172>>2]|0;
     $174 = ($173|0)==(0|0);
     if (!($174)) {
      _free($173);
     }
    }
    $175 = HEAP8[$__grouping$i>>0]|0;
    $176 = $175 & 1;
    $177 = ($176<<24>>24)==(0);
    if ($177) {
     STACKTOP = sp;return;
    }
    $178 = (($__grouping$i) + 8|0);
    $179 = HEAP32[$178>>2]|0;
    $180 = ($179|0)==(0|0);
    if ($180) {
     STACKTOP = sp;return;
    }
    _free($179);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 37) {
  $79 = ___cxa_find_matching_catch(-1,-1)|0;
  $80 = tempRet0;
  $lpad$phi$i$index = $79;$lpad$phi$i$index10 = $80;
 }
 $81 = HEAP8[$__buf$i>>0]|0;
 $82 = $81 & 1;
 $83 = ($82<<24>>24)==(0);
 if (!($83)) {
  $84 = (($__buf$i) + 8|0);
  $85 = HEAP32[$84>>2]|0;
  $86 = ($85|0)==(0|0);
  if (!($86)) {
   _free($85);
  }
 }
 $87 = HEAP8[$__grouping$i>>0]|0;
 $88 = $87 & 1;
 $89 = ($88<<24>>24)==(0);
 if ($89) {
  ___resumeException($lpad$phi$i$index|0);
  // unreachable;
 }
 $90 = (($__grouping$i) + 8|0);
 $91 = HEAP32[$90>>2]|0;
 $92 = ($91|0)==(0|0);
 if ($92) {
  ___resumeException($lpad$phi$i$index|0);
  // unreachable;
 }
 _free($91);
 ___resumeException($lpad$phi$i$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRy($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$ = 0, $$$pre$i$i$i5$i = 0, $$0$i$i = 0, $$0$i$i$i = 0, $$0$i$i$i$i$i = 0, $$0$i$i$i$i3$i = 0, $$0$i$i1$i$i$i = 0, $$0$i$i1$i$i9$i = 0, $$7 = 0, $$8 = 0, $$pre$i$i$i5$i = 0, $$pre$i3$i$i$i = 0, $$pre$phi34$iZ2D = 0, $$pre$phi36$iZ2D = 0, $$pre33$i = 0, $$pre35$i = 0, $$sroa$06$0 = 0, $$sroa$06$2 = 0, $0 = 0, $1 = 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0$i = 0, $__a$1$i = 0, $__a$2$i = 0, $__a_end$i = 0, $__atoms$i = 0, $__buf$i = 0, $__dc$i = 0, $__g$i = 0, $__g_end$i = 0, $__grouping$i = 0, $__thousands_sep$i = 0, $lpad$phi$i$index = 0, $lpad$phi$i$index10 = 0, $phitmp$i23$i = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0;
 $__atoms$i = sp + 200|0;
 $__thousands_sep$i = sp + 196|0;
 $__grouping$i = sp + 184|0;
 $__buf$i = sp + 172|0;
 $__a_end$i = sp + 168|0;
 $__g$i = sp + 8|0;
 $__g_end$i = sp + 4|0;
 $__dc$i = sp;
 $0 = HEAP32[$__b>>2]|0;
 $1 = HEAP32[$__e>>2]|0;
 $2 = (($__iob) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & 74;
 if ((($4|0) == 64)) {
  $$0$i$i = 8;
 } else if ((($4|0) == 8)) {
  $$0$i$i = 16;
 } else if ((($4|0) == 0)) {
  $$0$i$i = 0;
 } else {
  $$0$i$i = 10;
 }
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping$i,$__iob,$__atoms$i,$__thousands_sep$i);
 ;HEAP32[$__buf$i+0>>2]=0|0;HEAP32[$__buf$i+4>>2]=0|0;HEAP32[$__buf$i+8>>2]=0|0;
 __THREW__ = 0;
 invoke_vii(451,($__buf$i|0),10);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 do {
  if ($6) {
   label = 37;
  } else {
   $7 = HEAP8[$__buf$i>>0]|0;
   $8 = $7 & 1;
   $9 = ($8<<24>>24)==(0);
   if ($9) {
    $12 = (($__buf$i) + 1|0);
    $$pre35$i = (($__buf$i) + 8|0);
    $$pre$phi34$iZ2D = $12;$$pre$phi36$iZ2D = $$pre35$i;$13 = $12;
   } else {
    $10 = (($__buf$i) + 8|0);
    $11 = HEAP32[$10>>2]|0;
    $$pre33$i = (($__buf$i) + 1|0);
    $$pre$phi34$iZ2D = $$pre33$i;$$pre$phi36$iZ2D = $10;$13 = $11;
   }
   HEAP32[$__a_end$i>>2] = $13;
   HEAP32[$__g_end$i>>2] = $__g$i;
   HEAP32[$__dc$i>>2] = 0;
   $14 = (($__buf$i) + 4|0);
   $15 = HEAP32[$__thousands_sep$i>>2]|0;
   $$pre$i$i$i5$i = $0;$$sroa$06$0 = $1;$__a$0$i = $13;
   while(1) {
    $16 = ($$pre$i$i$i5$i|0)==(0|0);
    if ($16) {
     $186 = 1;$94 = 0;
    } else {
     $17 = (($$pre$i$i$i5$i) + 12|0);
     $18 = HEAP32[$17>>2]|0;
     $19 = (($$pre$i$i$i5$i) + 16|0);
     $20 = HEAP32[$19>>2]|0;
     $21 = ($18|0)==($20|0);
     if ($21) {
      $22 = HEAP32[$$pre$i$i$i5$i>>2]|0;
      $23 = (($22) + 36|0);
      $24 = HEAP32[$23>>2]|0;
      __THREW__ = 0;
      $25 = (invoke_ii($24|0,($$pre$i$i$i5$i|0))|0);
      $26 = __THREW__; __THREW__ = 0;
      $27 = $26&1;
      if ($27) {
       label = 36;
       break;
      } else {
       $$0$i$i$i$i3$i = $25;
      }
     } else {
      $28 = HEAP32[$18>>2]|0;
      $$0$i$i$i$i3$i = $28;
     }
     $29 = ($$0$i$i$i$i3$i|0)==(-1);
     $$$pre$i$i$i5$i = $29 ? 0 : $$pre$i$i$i5$i;
     $$ = $29 ? 1 : 0;
     $186 = $$;$94 = $$$pre$i$i$i5$i;
    }
    $30 = ($$sroa$06$0|0)==(0|0);
    if ($30) {
     label = 20;
    } else {
     $31 = (($$sroa$06$0) + 12|0);
     $32 = HEAP32[$31>>2]|0;
     $33 = (($$sroa$06$0) + 16|0);
     $34 = HEAP32[$33>>2]|0;
     $35 = ($32|0)==($34|0);
     if ($35) {
      $36 = HEAP32[$$sroa$06$0>>2]|0;
      $37 = (($36) + 36|0);
      $38 = HEAP32[$37>>2]|0;
      __THREW__ = 0;
      $39 = (invoke_ii($38|0,($$sroa$06$0|0))|0);
      $40 = __THREW__; __THREW__ = 0;
      $41 = $40&1;
      if ($41) {
       label = 36;
       break;
      } else {
       $$0$i$i1$i$i9$i = $39;
      }
     } else {
      $42 = HEAP32[$32>>2]|0;
      $$0$i$i1$i$i9$i = $42;
     }
     $43 = ($$0$i$i1$i$i9$i|0)==(-1);
     if ($43) {
      label = 20;
     } else {
      if ($186) {
       $$sroa$06$2 = $$sroa$06$0;
      } else {
       $$pre$i3$i$i$i = $$sroa$06$0;$__a$2$i = $__a$0$i;
       break;
      }
     }
    }
    if ((label|0) == 20) {
     label = 0;
     if ($186) {
      $$pre$i3$i$i$i = 0;$__a$2$i = $__a$0$i;
      break;
     } else {
      $$sroa$06$2 = 0;
     }
    }
    $44 = HEAP32[$__a_end$i>>2]|0;
    $45 = $44;
    $46 = $__a$0$i;
    $47 = (($45) - ($46))|0;
    $48 = HEAP8[$__buf$i>>0]|0;
    $49 = $48 & 1;
    $50 = ($49<<24>>24)==(0);
    if ($50) {
     $52 = $48&255;
     $53 = $52 >>> 1;
     $55 = $53;
    } else {
     $51 = HEAP32[$14>>2]|0;
     $55 = $51;
    }
    $54 = ($47|0)==($55|0);
    if ($54) {
     if ($50) {
      $57 = $48&255;
      $58 = $57 >>> 1;
      $60 = $58;
     } else {
      $56 = HEAP32[$14>>2]|0;
      $60 = $56;
     }
     $59 = $60 << 1;
     __THREW__ = 0;
     invoke_vii(451,($__buf$i|0),($59|0));
     $61 = __THREW__; __THREW__ = 0;
     $62 = $61&1;
     if ($62) {
      label = 36;
      break;
     }
     $63 = HEAP8[$__buf$i>>0]|0;
     $64 = $63 & 1;
     $65 = ($64<<24>>24)==(0);
     if ($65) {
      $68 = 10;
     } else {
      $66 = HEAP32[$__buf$i>>2]|0;
      $67 = $66 & -2;
      $phitmp$i23$i = (($67) + -1)|0;
      $68 = $phitmp$i23$i;
     }
     __THREW__ = 0;
     invoke_vii(451,($__buf$i|0),($68|0));
     $69 = __THREW__; __THREW__ = 0;
     $70 = $69&1;
     if ($70) {
      label = 36;
      break;
     }
     $71 = HEAP8[$__buf$i>>0]|0;
     $72 = $71 & 1;
     $73 = ($72<<24>>24)==(0);
     if ($73) {
      $76 = $$pre$phi34$iZ2D;
     } else {
      $74 = HEAP32[$$pre$phi36$iZ2D>>2]|0;
      $76 = $74;
     }
     $75 = (($76) + ($60)|0);
     HEAP32[$__a_end$i>>2] = $75;
     $__a$1$i = $76;
    } else {
     $__a$1$i = $__a$0$i;
    }
    $93 = (($94) + 12|0);
    $95 = HEAP32[$93>>2]|0;
    $96 = (($94) + 16|0);
    $97 = HEAP32[$96>>2]|0;
    $98 = ($95|0)==($97|0);
    if ($98) {
     $99 = HEAP32[$94>>2]|0;
     $100 = (($99) + 36|0);
     $101 = HEAP32[$100>>2]|0;
     __THREW__ = 0;
     $102 = (invoke_ii($101|0,($94|0))|0);
     $103 = __THREW__; __THREW__ = 0;
     $104 = $103&1;
     if ($104) {
      label = 36;
      break;
     } else {
      $$0$i$i$i = $102;
     }
    } else {
     $105 = HEAP32[$95>>2]|0;
     $$0$i$i$i = $105;
    }
    $106 = (__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i$i,$$0$i$i,$__a$1$i,$__a_end$i,$__dc$i,$15,$__grouping$i,$__g$i,$__g_end$i,$__atoms$i)|0);
    $107 = ($106|0)==(0);
    if (!($107)) {
     $$pre$i3$i$i$i = $$sroa$06$2;$__a$2$i = $__a$1$i;
     break;
    }
    $108 = HEAP32[$93>>2]|0;
    $109 = HEAP32[$96>>2]|0;
    $110 = ($108|0)==($109|0);
    if ($110) {
     $111 = HEAP32[$94>>2]|0;
     $112 = (($111) + 40|0);
     $113 = HEAP32[$112>>2]|0;
     __THREW__ = 0;
     (invoke_ii($113|0,($94|0))|0);
     $114 = __THREW__; __THREW__ = 0;
     $115 = $114&1;
     if ($115) {
      label = 36;
      break;
     } else {
      $$pre$i$i$i5$i = $94;$$sroa$06$0 = $$sroa$06$2;$__a$0$i = $__a$1$i;
      continue;
     }
    } else {
     $116 = (($108) + 4|0);
     HEAP32[$93>>2] = $116;
     $$pre$i$i$i5$i = $94;$$sroa$06$0 = $$sroa$06$2;$__a$0$i = $__a$1$i;
     continue;
    }
   }
   if ((label|0) == 36) {
    $77 = ___cxa_find_matching_catch(-1,-1)|0;
    $78 = tempRet0;
    $lpad$phi$i$index = $77;$lpad$phi$i$index10 = $78;
    break;
   }
   $117 = HEAP8[$__grouping$i>>0]|0;
   $118 = $117 & 1;
   $119 = ($118<<24>>24)==(0);
   if ($119) {
    $122 = $117&255;
    $123 = $122 >>> 1;
    $125 = $123;
   } else {
    $120 = (($__grouping$i) + 4|0);
    $121 = HEAP32[$120>>2]|0;
    $125 = $121;
   }
   $124 = ($125|0)==(0);
   if (!($124)) {
    $126 = HEAP32[$__g_end$i>>2]|0;
    $127 = $126;
    $128 = $__g$i;
    $129 = (($127) - ($128))|0;
    $130 = ($129|0)<(160);
    if ($130) {
     $131 = HEAP32[$__dc$i>>2]|0;
     $132 = (($126) + 4|0);
     HEAP32[$__g_end$i>>2] = $132;
     HEAP32[$126>>2] = $131;
    }
   }
   $133 = HEAP32[$__a_end$i>>2]|0;
   __THREW__ = 0;
   $134 = (invoke_iiiii(457,($__a$2$i|0),($133|0),($__err|0),($$0$i$i|0))|0);
   $135 = tempRet0;
   $136 = __THREW__; __THREW__ = 0;
   $137 = $136&1;
   if ($137) {
    label = 37;
   } else {
    $138 = $__v;
    $139 = $138;
    HEAP32[$139>>2] = $134;
    $140 = (($138) + 4)|0;
    $141 = $140;
    HEAP32[$141>>2] = $135;
    $142 = HEAP32[$__g_end$i>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping$i,$__g$i,$142,$__err);
    $143 = ($94|0)==(0|0);
    if ($143) {
     $173 = 0;$187 = 1;
    } else {
     $144 = (($94) + 12|0);
     $145 = HEAP32[$144>>2]|0;
     $146 = (($94) + 16|0);
     $147 = HEAP32[$146>>2]|0;
     $148 = ($145|0)==($147|0);
     if ($148) {
      $149 = HEAP32[$94>>2]|0;
      $150 = (($149) + 36|0);
      $151 = HEAP32[$150>>2]|0;
      __THREW__ = 0;
      $152 = (invoke_ii($151|0,($94|0))|0);
      $153 = __THREW__; __THREW__ = 0;
      $154 = $153&1;
      if ($154) {
       label = 37;
       break;
      } else {
       $$0$i$i$i$i$i = $152;
      }
     } else {
      $155 = HEAP32[$145>>2]|0;
      $$0$i$i$i$i$i = $155;
     }
     $156 = ($$0$i$i$i$i$i|0)==(-1);
     $$7 = $156 ? 0 : $94;
     $$8 = $156 ? 1 : 0;
     $173 = $$7;$187 = $$8;
    }
    $157 = ($$pre$i3$i$i$i|0)==(0|0);
    if ($157) {
     label = 69;
    } else {
     $158 = (($$pre$i3$i$i$i) + 12|0);
     $159 = HEAP32[$158>>2]|0;
     $160 = (($$pre$i3$i$i$i) + 16|0);
     $161 = HEAP32[$160>>2]|0;
     $162 = ($159|0)==($161|0);
     if ($162) {
      $163 = HEAP32[$$pre$i3$i$i$i>>2]|0;
      $164 = (($163) + 36|0);
      $165 = HEAP32[$164>>2]|0;
      __THREW__ = 0;
      $166 = (invoke_ii($165|0,($$pre$i3$i$i$i|0))|0);
      $167 = __THREW__; __THREW__ = 0;
      $168 = $167&1;
      if ($168) {
       label = 37;
       break;
      } else {
       $$0$i$i1$i$i$i = $166;
      }
     } else {
      $169 = HEAP32[$159>>2]|0;
      $$0$i$i1$i$i$i = $169;
     }
     $170 = ($$0$i$i1$i$i$i|0)==(-1);
     if ($170) {
      label = 69;
     } else {
      if (!($187)) {
       label = 71;
      }
     }
    }
    if ((label|0) == 69) {
     if ($187) {
      label = 71;
     }
    }
    if ((label|0) == 71) {
     $171 = HEAP32[$__err>>2]|0;
     $172 = $171 | 2;
     HEAP32[$__err>>2] = $172;
    }
    HEAP32[$agg$result>>2] = $173;
    $174 = HEAP8[$__buf$i>>0]|0;
    $175 = $174 & 1;
    $176 = ($175<<24>>24)==(0);
    if (!($176)) {
     $177 = (($__buf$i) + 8|0);
     $178 = HEAP32[$177>>2]|0;
     $179 = ($178|0)==(0|0);
     if (!($179)) {
      _free($178);
     }
    }
    $180 = HEAP8[$__grouping$i>>0]|0;
    $181 = $180 & 1;
    $182 = ($181<<24>>24)==(0);
    if ($182) {
     STACKTOP = sp;return;
    }
    $183 = (($__grouping$i) + 8|0);
    $184 = HEAP32[$183>>2]|0;
    $185 = ($184|0)==(0|0);
    if ($185) {
     STACKTOP = sp;return;
    }
    _free($184);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 37) {
  $79 = ___cxa_find_matching_catch(-1,-1)|0;
  $80 = tempRet0;
  $lpad$phi$i$index = $79;$lpad$phi$i$index10 = $80;
 }
 $81 = HEAP8[$__buf$i>>0]|0;
 $82 = $81 & 1;
 $83 = ($82<<24>>24)==(0);
 if (!($83)) {
  $84 = (($__buf$i) + 8|0);
  $85 = HEAP32[$84>>2]|0;
  $86 = ($85|0)==(0|0);
  if (!($86)) {
   _free($85);
  }
 }
 $87 = HEAP8[$__grouping$i>>0]|0;
 $88 = $87 & 1;
 $89 = ($88<<24>>24)==(0);
 if ($89) {
  ___resumeException($lpad$phi$i$index|0);
  // unreachable;
 }
 $90 = (($__grouping$i) + 8|0);
 $91 = HEAP32[$90>>2]|0;
 $92 = ($91|0)==(0|0);
 if ($92) {
  ___resumeException($lpad$phi$i$index|0);
  // unreachable;
 }
 _free($91);
 ___resumeException($lpad$phi$i$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRf($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$ = 0, $$$pre$i$i$i5$i = 0, $$0$i$i$i = 0, $$0$i$i$i$i$i = 0, $$0$i$i$i$i3$i = 0, $$0$i$i1$i$i$i = 0, $$0$i$i1$i$i9$i = 0, $$8 = 0, $$9 = 0, $$pre$i$i$i5$i = 0, $$pre$i3$i$i$i = 0, $$pre$phi35$iZ2D = 0, $$pre$phi37$iZ2D = 0, $$pre34$i = 0, $$pre36$i = 0, $$sroa$06$0 = 0, $$sroa$06$2 = 0, $0 = 0, $1 = 0, $10 = 0;
 var $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0;
 var $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0.0, $135 = 0, $136 = 0;
 var $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0;
 var $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0;
 var $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $__a$0$i = 0, $__a$1$i = 0, $__a$2$i = 0, $__a_end$i = 0, $__atoms$i = 0, $__buf$i = 0, $__dc$i = 0, $__decimal_point$i = 0, $__exp$i = 0, $__g$i = 0, $__g_end$i = 0, $__grouping$i = 0, $__in_units$i = 0, $__thousands_sep$i = 0, $lpad$phi$i$index = 0, $lpad$phi$i$index11 = 0, $phitmp$i23$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0;
 $__atoms$i = sp + 208|0;
 $__decimal_point$i = sp + 200|0;
 $__thousands_sep$i = sp + 196|0;
 $__grouping$i = sp + 184|0;
 $__buf$i = sp + 172|0;
 $__a_end$i = sp + 168|0;
 $__g$i = sp + 8|0;
 $__g_end$i = sp + 4|0;
 $__dc$i = sp;
 $__in_units$i = sp + 337|0;
 $__exp$i = sp + 336|0;
 $0 = HEAP32[$__b>>2]|0;
 $1 = HEAP32[$__e>>2]|0;
 __ZNSt3__19__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($__grouping$i,$__iob,$__atoms$i,$__decimal_point$i,$__thousands_sep$i);
 ;HEAP32[$__buf$i+0>>2]=0|0;HEAP32[$__buf$i+4>>2]=0|0;HEAP32[$__buf$i+8>>2]=0|0;
 __THREW__ = 0;
 invoke_vii(451,($__buf$i|0),10);
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 do {
  if ($3) {
   label = 33;
  } else {
   $4 = HEAP8[$__buf$i>>0]|0;
   $5 = $4 & 1;
   $6 = ($5<<24>>24)==(0);
   if ($6) {
    $9 = (($__buf$i) + 1|0);
    $$pre36$i = (($__buf$i) + 8|0);
    $$pre$phi35$iZ2D = $9;$$pre$phi37$iZ2D = $$pre36$i;$10 = $9;
   } else {
    $7 = (($__buf$i) + 8|0);
    $8 = HEAP32[$7>>2]|0;
    $$pre34$i = (($__buf$i) + 1|0);
    $$pre$phi35$iZ2D = $$pre34$i;$$pre$phi37$iZ2D = $7;$10 = $8;
   }
   HEAP32[$__a_end$i>>2] = $10;
   HEAP32[$__g_end$i>>2] = $__g$i;
   HEAP32[$__dc$i>>2] = 0;
   HEAP8[$__in_units$i>>0] = 1;
   HEAP8[$__exp$i>>0] = 69;
   $11 = (($__buf$i) + 4|0);
   $12 = HEAP32[$__decimal_point$i>>2]|0;
   $13 = HEAP32[$__thousands_sep$i>>2]|0;
   $$pre$i$i$i5$i = $0;$$sroa$06$0 = $1;$__a$0$i = $10;
   while(1) {
    $14 = ($$pre$i$i$i5$i|0)==(0|0);
    if ($14) {
     $181 = 1;$92 = 0;
    } else {
     $15 = (($$pre$i$i$i5$i) + 12|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = (($$pre$i$i$i5$i) + 16|0);
     $18 = HEAP32[$17>>2]|0;
     $19 = ($16|0)==($18|0);
     if ($19) {
      $20 = HEAP32[$$pre$i$i$i5$i>>2]|0;
      $21 = (($20) + 36|0);
      $22 = HEAP32[$21>>2]|0;
      __THREW__ = 0;
      $23 = (invoke_ii($22|0,($$pre$i$i$i5$i|0))|0);
      $24 = __THREW__; __THREW__ = 0;
      $25 = $24&1;
      if ($25) {
       label = 32;
       break;
      } else {
       $$0$i$i$i$i3$i = $23;
      }
     } else {
      $26 = HEAP32[$16>>2]|0;
      $$0$i$i$i$i3$i = $26;
     }
     $27 = ($$0$i$i$i$i3$i|0)==(-1);
     $$$pre$i$i$i5$i = $27 ? 0 : $$pre$i$i$i5$i;
     $$ = $27 ? 1 : 0;
     $181 = $$;$92 = $$$pre$i$i$i5$i;
    }
    $28 = ($$sroa$06$0|0)==(0|0);
    if ($28) {
     label = 16;
    } else {
     $29 = (($$sroa$06$0) + 12|0);
     $30 = HEAP32[$29>>2]|0;
     $31 = (($$sroa$06$0) + 16|0);
     $32 = HEAP32[$31>>2]|0;
     $33 = ($30|0)==($32|0);
     if ($33) {
      $34 = HEAP32[$$sroa$06$0>>2]|0;
      $35 = (($34) + 36|0);
      $36 = HEAP32[$35>>2]|0;
      __THREW__ = 0;
      $37 = (invoke_ii($36|0,($$sroa$06$0|0))|0);
      $38 = __THREW__; __THREW__ = 0;
      $39 = $38&1;
      if ($39) {
       label = 32;
       break;
      } else {
       $$0$i$i1$i$i9$i = $37;
      }
     } else {
      $40 = HEAP32[$30>>2]|0;
      $$0$i$i1$i$i9$i = $40;
     }
     $41 = ($$0$i$i1$i$i9$i|0)==(-1);
     if ($41) {
      label = 16;
     } else {
      if ($181) {
       $$sroa$06$2 = $$sroa$06$0;
      } else {
       $$pre$i3$i$i$i = $$sroa$06$0;$__a$2$i = $__a$0$i;
       break;
      }
     }
    }
    if ((label|0) == 16) {
     label = 0;
     if ($181) {
      $$pre$i3$i$i$i = 0;$__a$2$i = $__a$0$i;
      break;
     } else {
      $$sroa$06$2 = 0;
     }
    }
    $42 = HEAP32[$__a_end$i>>2]|0;
    $43 = $42;
    $44 = $__a$0$i;
    $45 = (($43) - ($44))|0;
    $46 = HEAP8[$__buf$i>>0]|0;
    $47 = $46 & 1;
    $48 = ($47<<24>>24)==(0);
    if ($48) {
     $50 = $46&255;
     $51 = $50 >>> 1;
     $53 = $51;
    } else {
     $49 = HEAP32[$11>>2]|0;
     $53 = $49;
    }
    $52 = ($45|0)==($53|0);
    if ($52) {
     if ($48) {
      $55 = $46&255;
      $56 = $55 >>> 1;
      $58 = $56;
     } else {
      $54 = HEAP32[$11>>2]|0;
      $58 = $54;
     }
     $57 = $58 << 1;
     __THREW__ = 0;
     invoke_vii(451,($__buf$i|0),($57|0));
     $59 = __THREW__; __THREW__ = 0;
     $60 = $59&1;
     if ($60) {
      label = 32;
      break;
     }
     $61 = HEAP8[$__buf$i>>0]|0;
     $62 = $61 & 1;
     $63 = ($62<<24>>24)==(0);
     if ($63) {
      $66 = 10;
     } else {
      $64 = HEAP32[$__buf$i>>2]|0;
      $65 = $64 & -2;
      $phitmp$i23$i = (($65) + -1)|0;
      $66 = $phitmp$i23$i;
     }
     __THREW__ = 0;
     invoke_vii(451,($__buf$i|0),($66|0));
     $67 = __THREW__; __THREW__ = 0;
     $68 = $67&1;
     if ($68) {
      label = 32;
      break;
     }
     $69 = HEAP8[$__buf$i>>0]|0;
     $70 = $69 & 1;
     $71 = ($70<<24>>24)==(0);
     if ($71) {
      $74 = $$pre$phi35$iZ2D;
     } else {
      $72 = HEAP32[$$pre$phi37$iZ2D>>2]|0;
      $74 = $72;
     }
     $73 = (($74) + ($58)|0);
     HEAP32[$__a_end$i>>2] = $73;
     $__a$1$i = $74;
    } else {
     $__a$1$i = $__a$0$i;
    }
    $91 = (($92) + 12|0);
    $93 = HEAP32[$91>>2]|0;
    $94 = (($92) + 16|0);
    $95 = HEAP32[$94>>2]|0;
    $96 = ($93|0)==($95|0);
    if ($96) {
     $97 = HEAP32[$92>>2]|0;
     $98 = (($97) + 36|0);
     $99 = HEAP32[$98>>2]|0;
     __THREW__ = 0;
     $100 = (invoke_ii($99|0,($92|0))|0);
     $101 = __THREW__; __THREW__ = 0;
     $102 = $101&1;
     if ($102) {
      label = 32;
      break;
     } else {
      $$0$i$i$i = $100;
     }
    } else {
     $103 = HEAP32[$93>>2]|0;
     $$0$i$i$i = $103;
    }
    $104 = (__ZNSt3__19__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($$0$i$i$i,$__in_units$i,$__exp$i,$__a$1$i,$__a_end$i,$12,$13,$__grouping$i,$__g$i,$__g_end$i,$__dc$i,$__atoms$i)|0);
    $105 = ($104|0)==(0);
    if (!($105)) {
     $$pre$i3$i$i$i = $$sroa$06$2;$__a$2$i = $__a$1$i;
     break;
    }
    $106 = HEAP32[$91>>2]|0;
    $107 = HEAP32[$94>>2]|0;
    $108 = ($106|0)==($107|0);
    if ($108) {
     $109 = HEAP32[$92>>2]|0;
     $110 = (($109) + 40|0);
     $111 = HEAP32[$110>>2]|0;
     __THREW__ = 0;
     (invoke_ii($111|0,($92|0))|0);
     $112 = __THREW__; __THREW__ = 0;
     $113 = $112&1;
     if ($113) {
      label = 32;
      break;
     } else {
      $$pre$i$i$i5$i = $92;$$sroa$06$0 = $$sroa$06$2;$__a$0$i = $__a$1$i;
      continue;
     }
    } else {
     $114 = (($106) + 4|0);
     HEAP32[$91>>2] = $114;
     $$pre$i$i$i5$i = $92;$$sroa$06$0 = $$sroa$06$2;$__a$0$i = $__a$1$i;
     continue;
    }
   }
   if ((label|0) == 32) {
    $75 = ___cxa_find_matching_catch(-1,-1)|0;
    $76 = tempRet0;
    $lpad$phi$i$index = $75;$lpad$phi$i$index11 = $76;
    break;
   }
   $115 = HEAP8[$__grouping$i>>0]|0;
   $116 = $115 & 1;
   $117 = ($116<<24>>24)==(0);
   if ($117) {
    $120 = $115&255;
    $121 = $120 >>> 1;
    $123 = $121;
   } else {
    $118 = (($__grouping$i) + 4|0);
    $119 = HEAP32[$118>>2]|0;
    $123 = $119;
   }
   $122 = ($123|0)==(0);
   if (!($122)) {
    $124 = HEAP8[$__in_units$i>>0]|0;
    $125 = ($124<<24>>24)==(0);
    if (!($125)) {
     $126 = HEAP32[$__g_end$i>>2]|0;
     $127 = $126;
     $128 = $__g$i;
     $129 = (($127) - ($128))|0;
     $130 = ($129|0)<(160);
     if ($130) {
      $131 = HEAP32[$__dc$i>>2]|0;
      $132 = (($126) + 4|0);
      HEAP32[$__g_end$i>>2] = $132;
      HEAP32[$126>>2] = $131;
     }
    }
   }
   $133 = HEAP32[$__a_end$i>>2]|0;
   __THREW__ = 0;
   $134 = (+invoke_diii(458,($__a$2$i|0),($133|0),($__err|0)));
   $135 = __THREW__; __THREW__ = 0;
   $136 = $135&1;
   if ($136) {
    label = 33;
   } else {
    HEAPF32[$__v>>2] = $134;
    $137 = HEAP32[$__g_end$i>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping$i,$__g$i,$137,$__err);
    $138 = ($92|0)==(0|0);
    if ($138) {
     $168 = 0;$182 = 1;
    } else {
     $139 = (($92) + 12|0);
     $140 = HEAP32[$139>>2]|0;
     $141 = (($92) + 16|0);
     $142 = HEAP32[$141>>2]|0;
     $143 = ($140|0)==($142|0);
     if ($143) {
      $144 = HEAP32[$92>>2]|0;
      $145 = (($144) + 36|0);
      $146 = HEAP32[$145>>2]|0;
      __THREW__ = 0;
      $147 = (invoke_ii($146|0,($92|0))|0);
      $148 = __THREW__; __THREW__ = 0;
      $149 = $148&1;
      if ($149) {
       label = 33;
       break;
      } else {
       $$0$i$i$i$i$i = $147;
      }
     } else {
      $150 = HEAP32[$140>>2]|0;
      $$0$i$i$i$i$i = $150;
     }
     $151 = ($$0$i$i$i$i$i|0)==(-1);
     $$8 = $151 ? 0 : $92;
     $$9 = $151 ? 1 : 0;
     $168 = $$8;$182 = $$9;
    }
    $152 = ($$pre$i3$i$i$i|0)==(0|0);
    if ($152) {
     label = 66;
    } else {
     $153 = (($$pre$i3$i$i$i) + 12|0);
     $154 = HEAP32[$153>>2]|0;
     $155 = (($$pre$i3$i$i$i) + 16|0);
     $156 = HEAP32[$155>>2]|0;
     $157 = ($154|0)==($156|0);
     if ($157) {
      $158 = HEAP32[$$pre$i3$i$i$i>>2]|0;
      $159 = (($158) + 36|0);
      $160 = HEAP32[$159>>2]|0;
      __THREW__ = 0;
      $161 = (invoke_ii($160|0,($$pre$i3$i$i$i|0))|0);
      $162 = __THREW__; __THREW__ = 0;
      $163 = $162&1;
      if ($163) {
       label = 33;
       break;
      } else {
       $$0$i$i1$i$i$i = $161;
      }
     } else {
      $164 = HEAP32[$154>>2]|0;
      $$0$i$i1$i$i$i = $164;
     }
     $165 = ($$0$i$i1$i$i$i|0)==(-1);
     if ($165) {
      label = 66;
     } else {
      if (!($182)) {
       label = 68;
      }
     }
    }
    if ((label|0) == 66) {
     if ($182) {
      label = 68;
     }
    }
    if ((label|0) == 68) {
     $166 = HEAP32[$__err>>2]|0;
     $167 = $166 | 2;
     HEAP32[$__err>>2] = $167;
    }
    HEAP32[$agg$result>>2] = $168;
    $169 = HEAP8[$__buf$i>>0]|0;
    $170 = $169 & 1;
    $171 = ($170<<24>>24)==(0);
    if (!($171)) {
     $172 = (($__buf$i) + 8|0);
     $173 = HEAP32[$172>>2]|0;
     $174 = ($173|0)==(0|0);
     if (!($174)) {
      _free($173);
     }
    }
    $175 = HEAP8[$__grouping$i>>0]|0;
    $176 = $175 & 1;
    $177 = ($176<<24>>24)==(0);
    if ($177) {
     STACKTOP = sp;return;
    }
    $178 = (($__grouping$i) + 8|0);
    $179 = HEAP32[$178>>2]|0;
    $180 = ($179|0)==(0|0);
    if ($180) {
     STACKTOP = sp;return;
    }
    _free($179);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 33) {
  $77 = ___cxa_find_matching_catch(-1,-1)|0;
  $78 = tempRet0;
  $lpad$phi$i$index = $77;$lpad$phi$i$index11 = $78;
 }
 $79 = HEAP8[$__buf$i>>0]|0;
 $80 = $79 & 1;
 $81 = ($80<<24>>24)==(0);
 if (!($81)) {
  $82 = (($__buf$i) + 8|0);
  $83 = HEAP32[$82>>2]|0;
  $84 = ($83|0)==(0|0);
  if (!($84)) {
   _free($83);
  }
 }
 $85 = HEAP8[$__grouping$i>>0]|0;
 $86 = $85 & 1;
 $87 = ($86<<24>>24)==(0);
 if ($87) {
  ___resumeException($lpad$phi$i$index|0);
  // unreachable;
 }
 $88 = (($__grouping$i) + 8|0);
 $89 = HEAP32[$88>>2]|0;
 $90 = ($89|0)==(0|0);
 if ($90) {
  ___resumeException($lpad$phi$i$index|0);
  // unreachable;
 }
 _free($89);
 ___resumeException($lpad$phi$i$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRd($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$ = 0, $$$pre$i$i$i5$i = 0, $$0$i$i$i = 0, $$0$i$i$i$i$i = 0, $$0$i$i$i$i3$i = 0, $$0$i$i1$i$i$i = 0, $$0$i$i1$i$i9$i = 0, $$8 = 0, $$9 = 0, $$pre$i$i$i5$i = 0, $$pre$i3$i$i$i = 0, $$pre$phi35$iZ2D = 0, $$pre$phi37$iZ2D = 0, $$pre34$i = 0, $$pre36$i = 0, $$sroa$06$0 = 0, $$sroa$06$2 = 0, $0 = 0, $1 = 0, $10 = 0;
 var $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0;
 var $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0.0, $135 = 0, $136 = 0;
 var $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0;
 var $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0;
 var $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $__a$0$i = 0, $__a$1$i = 0, $__a$2$i = 0, $__a_end$i = 0, $__atoms$i = 0, $__buf$i = 0, $__dc$i = 0, $__decimal_point$i = 0, $__exp$i = 0, $__g$i = 0, $__g_end$i = 0, $__grouping$i = 0, $__in_units$i = 0, $__thousands_sep$i = 0, $lpad$phi$i$index = 0, $lpad$phi$i$index11 = 0, $phitmp$i23$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0;
 $__atoms$i = sp + 208|0;
 $__decimal_point$i = sp + 200|0;
 $__thousands_sep$i = sp + 196|0;
 $__grouping$i = sp + 184|0;
 $__buf$i = sp + 172|0;
 $__a_end$i = sp + 168|0;
 $__g$i = sp + 8|0;
 $__g_end$i = sp + 4|0;
 $__dc$i = sp;
 $__in_units$i = sp + 337|0;
 $__exp$i = sp + 336|0;
 $0 = HEAP32[$__b>>2]|0;
 $1 = HEAP32[$__e>>2]|0;
 __ZNSt3__19__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($__grouping$i,$__iob,$__atoms$i,$__decimal_point$i,$__thousands_sep$i);
 ;HEAP32[$__buf$i+0>>2]=0|0;HEAP32[$__buf$i+4>>2]=0|0;HEAP32[$__buf$i+8>>2]=0|0;
 __THREW__ = 0;
 invoke_vii(451,($__buf$i|0),10);
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 do {
  if ($3) {
   label = 33;
  } else {
   $4 = HEAP8[$__buf$i>>0]|0;
   $5 = $4 & 1;
   $6 = ($5<<24>>24)==(0);
   if ($6) {
    $9 = (($__buf$i) + 1|0);
    $$pre36$i = (($__buf$i) + 8|0);
    $$pre$phi35$iZ2D = $9;$$pre$phi37$iZ2D = $$pre36$i;$10 = $9;
   } else {
    $7 = (($__buf$i) + 8|0);
    $8 = HEAP32[$7>>2]|0;
    $$pre34$i = (($__buf$i) + 1|0);
    $$pre$phi35$iZ2D = $$pre34$i;$$pre$phi37$iZ2D = $7;$10 = $8;
   }
   HEAP32[$__a_end$i>>2] = $10;
   HEAP32[$__g_end$i>>2] = $__g$i;
   HEAP32[$__dc$i>>2] = 0;
   HEAP8[$__in_units$i>>0] = 1;
   HEAP8[$__exp$i>>0] = 69;
   $11 = (($__buf$i) + 4|0);
   $12 = HEAP32[$__decimal_point$i>>2]|0;
   $13 = HEAP32[$__thousands_sep$i>>2]|0;
   $$pre$i$i$i5$i = $0;$$sroa$06$0 = $1;$__a$0$i = $10;
   while(1) {
    $14 = ($$pre$i$i$i5$i|0)==(0|0);
    if ($14) {
     $181 = 1;$92 = 0;
    } else {
     $15 = (($$pre$i$i$i5$i) + 12|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = (($$pre$i$i$i5$i) + 16|0);
     $18 = HEAP32[$17>>2]|0;
     $19 = ($16|0)==($18|0);
     if ($19) {
      $20 = HEAP32[$$pre$i$i$i5$i>>2]|0;
      $21 = (($20) + 36|0);
      $22 = HEAP32[$21>>2]|0;
      __THREW__ = 0;
      $23 = (invoke_ii($22|0,($$pre$i$i$i5$i|0))|0);
      $24 = __THREW__; __THREW__ = 0;
      $25 = $24&1;
      if ($25) {
       label = 32;
       break;
      } else {
       $$0$i$i$i$i3$i = $23;
      }
     } else {
      $26 = HEAP32[$16>>2]|0;
      $$0$i$i$i$i3$i = $26;
     }
     $27 = ($$0$i$i$i$i3$i|0)==(-1);
     $$$pre$i$i$i5$i = $27 ? 0 : $$pre$i$i$i5$i;
     $$ = $27 ? 1 : 0;
     $181 = $$;$92 = $$$pre$i$i$i5$i;
    }
    $28 = ($$sroa$06$0|0)==(0|0);
    if ($28) {
     label = 16;
    } else {
     $29 = (($$sroa$06$0) + 12|0);
     $30 = HEAP32[$29>>2]|0;
     $31 = (($$sroa$06$0) + 16|0);
     $32 = HEAP32[$31>>2]|0;
     $33 = ($30|0)==($32|0);
     if ($33) {
      $34 = HEAP32[$$sroa$06$0>>2]|0;
      $35 = (($34) + 36|0);
      $36 = HEAP32[$35>>2]|0;
      __THREW__ = 0;
      $37 = (invoke_ii($36|0,($$sroa$06$0|0))|0);
      $38 = __THREW__; __THREW__ = 0;
      $39 = $38&1;
      if ($39) {
       label = 32;
       break;
      } else {
       $$0$i$i1$i$i9$i = $37;
      }
     } else {
      $40 = HEAP32[$30>>2]|0;
      $$0$i$i1$i$i9$i = $40;
     }
     $41 = ($$0$i$i1$i$i9$i|0)==(-1);
     if ($41) {
      label = 16;
     } else {
      if ($181) {
       $$sroa$06$2 = $$sroa$06$0;
      } else {
       $$pre$i3$i$i$i = $$sroa$06$0;$__a$2$i = $__a$0$i;
       break;
      }
     }
    }
    if ((label|0) == 16) {
     label = 0;
     if ($181) {
      $$pre$i3$i$i$i = 0;$__a$2$i = $__a$0$i;
      break;
     } else {
      $$sroa$06$2 = 0;
     }
    }
    $42 = HEAP32[$__a_end$i>>2]|0;
    $43 = $42;
    $44 = $__a$0$i;
    $45 = (($43) - ($44))|0;
    $46 = HEAP8[$__buf$i>>0]|0;
    $47 = $46 & 1;
    $48 = ($47<<24>>24)==(0);
    if ($48) {
     $50 = $46&255;
     $51 = $50 >>> 1;
     $53 = $51;
    } else {
     $49 = HEAP32[$11>>2]|0;
     $53 = $49;
    }
    $52 = ($45|0)==($53|0);
    if ($52) {
     if ($48) {
      $55 = $46&255;
      $56 = $55 >>> 1;
      $58 = $56;
     } else {
      $54 = HEAP32[$11>>2]|0;
      $58 = $54;
     }
     $57 = $58 << 1;
     __THREW__ = 0;
     invoke_vii(451,($__buf$i|0),($57|0));
     $59 = __THREW__; __THREW__ = 0;
     $60 = $59&1;
     if ($60) {
      label = 32;
      break;
     }
     $61 = HEAP8[$__buf$i>>0]|0;
     $62 = $61 & 1;
     $63 = ($62<<24>>24)==(0);
     if ($63) {
      $66 = 10;
     } else {
      $64 = HEAP32[$__buf$i>>2]|0;
      $65 = $64 & -2;
      $phitmp$i23$i = (($65) + -1)|0;
      $66 = $phitmp$i23$i;
     }
     __THREW__ = 0;
     invoke_vii(451,($__buf$i|0),($66|0));
     $67 = __THREW__; __THREW__ = 0;
     $68 = $67&1;
     if ($68) {
      label = 32;
      break;
     }
     $69 = HEAP8[$__buf$i>>0]|0;
     $70 = $69 & 1;
     $71 = ($70<<24>>24)==(0);
     if ($71) {
      $74 = $$pre$phi35$iZ2D;
     } else {
      $72 = HEAP32[$$pre$phi37$iZ2D>>2]|0;
      $74 = $72;
     }
     $73 = (($74) + ($58)|0);
     HEAP32[$__a_end$i>>2] = $73;
     $__a$1$i = $74;
    } else {
     $__a$1$i = $__a$0$i;
    }
    $91 = (($92) + 12|0);
    $93 = HEAP32[$91>>2]|0;
    $94 = (($92) + 16|0);
    $95 = HEAP32[$94>>2]|0;
    $96 = ($93|0)==($95|0);
    if ($96) {
     $97 = HEAP32[$92>>2]|0;
     $98 = (($97) + 36|0);
     $99 = HEAP32[$98>>2]|0;
     __THREW__ = 0;
     $100 = (invoke_ii($99|0,($92|0))|0);
     $101 = __THREW__; __THREW__ = 0;
     $102 = $101&1;
     if ($102) {
      label = 32;
      break;
     } else {
      $$0$i$i$i = $100;
     }
    } else {
     $103 = HEAP32[$93>>2]|0;
     $$0$i$i$i = $103;
    }
    $104 = (__ZNSt3__19__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($$0$i$i$i,$__in_units$i,$__exp$i,$__a$1$i,$__a_end$i,$12,$13,$__grouping$i,$__g$i,$__g_end$i,$__dc$i,$__atoms$i)|0);
    $105 = ($104|0)==(0);
    if (!($105)) {
     $$pre$i3$i$i$i = $$sroa$06$2;$__a$2$i = $__a$1$i;
     break;
    }
    $106 = HEAP32[$91>>2]|0;
    $107 = HEAP32[$94>>2]|0;
    $108 = ($106|0)==($107|0);
    if ($108) {
     $109 = HEAP32[$92>>2]|0;
     $110 = (($109) + 40|0);
     $111 = HEAP32[$110>>2]|0;
     __THREW__ = 0;
     (invoke_ii($111|0,($92|0))|0);
     $112 = __THREW__; __THREW__ = 0;
     $113 = $112&1;
     if ($113) {
      label = 32;
      break;
     } else {
      $$pre$i$i$i5$i = $92;$$sroa$06$0 = $$sroa$06$2;$__a$0$i = $__a$1$i;
      continue;
     }
    } else {
     $114 = (($106) + 4|0);
     HEAP32[$91>>2] = $114;
     $$pre$i$i$i5$i = $92;$$sroa$06$0 = $$sroa$06$2;$__a$0$i = $__a$1$i;
     continue;
    }
   }
   if ((label|0) == 32) {
    $75 = ___cxa_find_matching_catch(-1,-1)|0;
    $76 = tempRet0;
    $lpad$phi$i$index = $75;$lpad$phi$i$index11 = $76;
    break;
   }
   $115 = HEAP8[$__grouping$i>>0]|0;
   $116 = $115 & 1;
   $117 = ($116<<24>>24)==(0);
   if ($117) {
    $120 = $115&255;
    $121 = $120 >>> 1;
    $123 = $121;
   } else {
    $118 = (($__grouping$i) + 4|0);
    $119 = HEAP32[$118>>2]|0;
    $123 = $119;
   }
   $122 = ($123|0)==(0);
   if (!($122)) {
    $124 = HEAP8[$__in_units$i>>0]|0;
    $125 = ($124<<24>>24)==(0);
    if (!($125)) {
     $126 = HEAP32[$__g_end$i>>2]|0;
     $127 = $126;
     $128 = $__g$i;
     $129 = (($127) - ($128))|0;
     $130 = ($129|0)<(160);
     if ($130) {
      $131 = HEAP32[$__dc$i>>2]|0;
      $132 = (($126) + 4|0);
      HEAP32[$__g_end$i>>2] = $132;
      HEAP32[$126>>2] = $131;
     }
    }
   }
   $133 = HEAP32[$__a_end$i>>2]|0;
   __THREW__ = 0;
   $134 = (+invoke_diii(459,($__a$2$i|0),($133|0),($__err|0)));
   $135 = __THREW__; __THREW__ = 0;
   $136 = $135&1;
   if ($136) {
    label = 33;
   } else {
    HEAPF64[$__v>>3] = $134;
    $137 = HEAP32[$__g_end$i>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping$i,$__g$i,$137,$__err);
    $138 = ($92|0)==(0|0);
    if ($138) {
     $168 = 0;$182 = 1;
    } else {
     $139 = (($92) + 12|0);
     $140 = HEAP32[$139>>2]|0;
     $141 = (($92) + 16|0);
     $142 = HEAP32[$141>>2]|0;
     $143 = ($140|0)==($142|0);
     if ($143) {
      $144 = HEAP32[$92>>2]|0;
      $145 = (($144) + 36|0);
      $146 = HEAP32[$145>>2]|0;
      __THREW__ = 0;
      $147 = (invoke_ii($146|0,($92|0))|0);
      $148 = __THREW__; __THREW__ = 0;
      $149 = $148&1;
      if ($149) {
       label = 33;
       break;
      } else {
       $$0$i$i$i$i$i = $147;
      }
     } else {
      $150 = HEAP32[$140>>2]|0;
      $$0$i$i$i$i$i = $150;
     }
     $151 = ($$0$i$i$i$i$i|0)==(-1);
     $$8 = $151 ? 0 : $92;
     $$9 = $151 ? 1 : 0;
     $168 = $$8;$182 = $$9;
    }
    $152 = ($$pre$i3$i$i$i|0)==(0|0);
    if ($152) {
     label = 66;
    } else {
     $153 = (($$pre$i3$i$i$i) + 12|0);
     $154 = HEAP32[$153>>2]|0;
     $155 = (($$pre$i3$i$i$i) + 16|0);
     $156 = HEAP32[$155>>2]|0;
     $157 = ($154|0)==($156|0);
     if ($157) {
      $158 = HEAP32[$$pre$i3$i$i$i>>2]|0;
      $159 = (($158) + 36|0);
      $160 = HEAP32[$159>>2]|0;
      __THREW__ = 0;
      $161 = (invoke_ii($160|0,($$pre$i3$i$i$i|0))|0);
      $162 = __THREW__; __THREW__ = 0;
      $163 = $162&1;
      if ($163) {
       label = 33;
       break;
      } else {
       $$0$i$i1$i$i$i = $161;
      }
     } else {
      $164 = HEAP32[$154>>2]|0;
      $$0$i$i1$i$i$i = $164;
     }
     $165 = ($$0$i$i1$i$i$i|0)==(-1);
     if ($165) {
      label = 66;
     } else {
      if (!($182)) {
       label = 68;
      }
     }
    }
    if ((label|0) == 66) {
     if ($182) {
      label = 68;
     }
    }
    if ((label|0) == 68) {
     $166 = HEAP32[$__err>>2]|0;
     $167 = $166 | 2;
     HEAP32[$__err>>2] = $167;
    }
    HEAP32[$agg$result>>2] = $168;
    $169 = HEAP8[$__buf$i>>0]|0;
    $170 = $169 & 1;
    $171 = ($170<<24>>24)==(0);
    if (!($171)) {
     $172 = (($__buf$i) + 8|0);
     $173 = HEAP32[$172>>2]|0;
     $174 = ($173|0)==(0|0);
     if (!($174)) {
      _free($173);
     }
    }
    $175 = HEAP8[$__grouping$i>>0]|0;
    $176 = $175 & 1;
    $177 = ($176<<24>>24)==(0);
    if ($177) {
     STACKTOP = sp;return;
    }
    $178 = (($__grouping$i) + 8|0);
    $179 = HEAP32[$178>>2]|0;
    $180 = ($179|0)==(0|0);
    if ($180) {
     STACKTOP = sp;return;
    }
    _free($179);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 33) {
  $77 = ___cxa_find_matching_catch(-1,-1)|0;
  $78 = tempRet0;
  $lpad$phi$i$index = $77;$lpad$phi$i$index11 = $78;
 }
 $79 = HEAP8[$__buf$i>>0]|0;
 $80 = $79 & 1;
 $81 = ($80<<24>>24)==(0);
 if (!($81)) {
  $82 = (($__buf$i) + 8|0);
  $83 = HEAP32[$82>>2]|0;
  $84 = ($83|0)==(0|0);
  if (!($84)) {
   _free($83);
  }
 }
 $85 = HEAP8[$__grouping$i>>0]|0;
 $86 = $85 & 1;
 $87 = ($86<<24>>24)==(0);
 if ($87) {
  ___resumeException($lpad$phi$i$index|0);
  // unreachable;
 }
 $88 = (($__grouping$i) + 8|0);
 $89 = HEAP32[$88>>2]|0;
 $90 = ($89|0)==(0|0);
 if ($90) {
  ___resumeException($lpad$phi$i$index|0);
  // unreachable;
 }
 _free($89);
 ___resumeException($lpad$phi$i$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRe($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$ = 0, $$$pre$i$i$i5$i = 0, $$0$i$i$i = 0, $$0$i$i$i$i$i = 0, $$0$i$i$i$i3$i = 0, $$0$i$i1$i$i$i = 0, $$0$i$i1$i$i9$i = 0, $$8 = 0, $$9 = 0, $$pre$i$i$i5$i = 0, $$pre$i3$i$i$i = 0, $$pre$phi35$iZ2D = 0, $$pre$phi37$iZ2D = 0, $$pre34$i = 0, $$pre36$i = 0, $$sroa$06$0 = 0, $$sroa$06$2 = 0, $0 = 0, $1 = 0, $10 = 0;
 var $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0;
 var $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0.0, $135 = 0, $136 = 0;
 var $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0;
 var $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0;
 var $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $__a$0$i = 0, $__a$1$i = 0, $__a$2$i = 0, $__a_end$i = 0, $__atoms$i = 0, $__buf$i = 0, $__dc$i = 0, $__decimal_point$i = 0, $__exp$i = 0, $__g$i = 0, $__g_end$i = 0, $__grouping$i = 0, $__in_units$i = 0, $__thousands_sep$i = 0, $lpad$phi$i$index = 0, $lpad$phi$i$index11 = 0, $phitmp$i23$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0;
 $__atoms$i = sp + 208|0;
 $__decimal_point$i = sp + 200|0;
 $__thousands_sep$i = sp + 196|0;
 $__grouping$i = sp + 184|0;
 $__buf$i = sp + 172|0;
 $__a_end$i = sp + 168|0;
 $__g$i = sp + 8|0;
 $__g_end$i = sp + 4|0;
 $__dc$i = sp;
 $__in_units$i = sp + 337|0;
 $__exp$i = sp + 336|0;
 $0 = HEAP32[$__b>>2]|0;
 $1 = HEAP32[$__e>>2]|0;
 __ZNSt3__19__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($__grouping$i,$__iob,$__atoms$i,$__decimal_point$i,$__thousands_sep$i);
 ;HEAP32[$__buf$i+0>>2]=0|0;HEAP32[$__buf$i+4>>2]=0|0;HEAP32[$__buf$i+8>>2]=0|0;
 __THREW__ = 0;
 invoke_vii(451,($__buf$i|0),10);
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 do {
  if ($3) {
   label = 33;
  } else {
   $4 = HEAP8[$__buf$i>>0]|0;
   $5 = $4 & 1;
   $6 = ($5<<24>>24)==(0);
   if ($6) {
    $9 = (($__buf$i) + 1|0);
    $$pre36$i = (($__buf$i) + 8|0);
    $$pre$phi35$iZ2D = $9;$$pre$phi37$iZ2D = $$pre36$i;$10 = $9;
   } else {
    $7 = (($__buf$i) + 8|0);
    $8 = HEAP32[$7>>2]|0;
    $$pre34$i = (($__buf$i) + 1|0);
    $$pre$phi35$iZ2D = $$pre34$i;$$pre$phi37$iZ2D = $7;$10 = $8;
   }
   HEAP32[$__a_end$i>>2] = $10;
   HEAP32[$__g_end$i>>2] = $__g$i;
   HEAP32[$__dc$i>>2] = 0;
   HEAP8[$__in_units$i>>0] = 1;
   HEAP8[$__exp$i>>0] = 69;
   $11 = (($__buf$i) + 4|0);
   $12 = HEAP32[$__decimal_point$i>>2]|0;
   $13 = HEAP32[$__thousands_sep$i>>2]|0;
   $$pre$i$i$i5$i = $0;$$sroa$06$0 = $1;$__a$0$i = $10;
   while(1) {
    $14 = ($$pre$i$i$i5$i|0)==(0|0);
    if ($14) {
     $181 = 1;$92 = 0;
    } else {
     $15 = (($$pre$i$i$i5$i) + 12|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = (($$pre$i$i$i5$i) + 16|0);
     $18 = HEAP32[$17>>2]|0;
     $19 = ($16|0)==($18|0);
     if ($19) {
      $20 = HEAP32[$$pre$i$i$i5$i>>2]|0;
      $21 = (($20) + 36|0);
      $22 = HEAP32[$21>>2]|0;
      __THREW__ = 0;
      $23 = (invoke_ii($22|0,($$pre$i$i$i5$i|0))|0);
      $24 = __THREW__; __THREW__ = 0;
      $25 = $24&1;
      if ($25) {
       label = 32;
       break;
      } else {
       $$0$i$i$i$i3$i = $23;
      }
     } else {
      $26 = HEAP32[$16>>2]|0;
      $$0$i$i$i$i3$i = $26;
     }
     $27 = ($$0$i$i$i$i3$i|0)==(-1);
     $$$pre$i$i$i5$i = $27 ? 0 : $$pre$i$i$i5$i;
     $$ = $27 ? 1 : 0;
     $181 = $$;$92 = $$$pre$i$i$i5$i;
    }
    $28 = ($$sroa$06$0|0)==(0|0);
    if ($28) {
     label = 16;
    } else {
     $29 = (($$sroa$06$0) + 12|0);
     $30 = HEAP32[$29>>2]|0;
     $31 = (($$sroa$06$0) + 16|0);
     $32 = HEAP32[$31>>2]|0;
     $33 = ($30|0)==($32|0);
     if ($33) {
      $34 = HEAP32[$$sroa$06$0>>2]|0;
      $35 = (($34) + 36|0);
      $36 = HEAP32[$35>>2]|0;
      __THREW__ = 0;
      $37 = (invoke_ii($36|0,($$sroa$06$0|0))|0);
      $38 = __THREW__; __THREW__ = 0;
      $39 = $38&1;
      if ($39) {
       label = 32;
       break;
      } else {
       $$0$i$i1$i$i9$i = $37;
      }
     } else {
      $40 = HEAP32[$30>>2]|0;
      $$0$i$i1$i$i9$i = $40;
     }
     $41 = ($$0$i$i1$i$i9$i|0)==(-1);
     if ($41) {
      label = 16;
     } else {
      if ($181) {
       $$sroa$06$2 = $$sroa$06$0;
      } else {
       $$pre$i3$i$i$i = $$sroa$06$0;$__a$2$i = $__a$0$i;
       break;
      }
     }
    }
    if ((label|0) == 16) {
     label = 0;
     if ($181) {
      $$pre$i3$i$i$i = 0;$__a$2$i = $__a$0$i;
      break;
     } else {
      $$sroa$06$2 = 0;
     }
    }
    $42 = HEAP32[$__a_end$i>>2]|0;
    $43 = $42;
    $44 = $__a$0$i;
    $45 = (($43) - ($44))|0;
    $46 = HEAP8[$__buf$i>>0]|0;
    $47 = $46 & 1;
    $48 = ($47<<24>>24)==(0);
    if ($48) {
     $50 = $46&255;
     $51 = $50 >>> 1;
     $53 = $51;
    } else {
     $49 = HEAP32[$11>>2]|0;
     $53 = $49;
    }
    $52 = ($45|0)==($53|0);
    if ($52) {
     if ($48) {
      $55 = $46&255;
      $56 = $55 >>> 1;
      $58 = $56;
     } else {
      $54 = HEAP32[$11>>2]|0;
      $58 = $54;
     }
     $57 = $58 << 1;
     __THREW__ = 0;
     invoke_vii(451,($__buf$i|0),($57|0));
     $59 = __THREW__; __THREW__ = 0;
     $60 = $59&1;
     if ($60) {
      label = 32;
      break;
     }
     $61 = HEAP8[$__buf$i>>0]|0;
     $62 = $61 & 1;
     $63 = ($62<<24>>24)==(0);
     if ($63) {
      $66 = 10;
     } else {
      $64 = HEAP32[$__buf$i>>2]|0;
      $65 = $64 & -2;
      $phitmp$i23$i = (($65) + -1)|0;
      $66 = $phitmp$i23$i;
     }
     __THREW__ = 0;
     invoke_vii(451,($__buf$i|0),($66|0));
     $67 = __THREW__; __THREW__ = 0;
     $68 = $67&1;
     if ($68) {
      label = 32;
      break;
     }
     $69 = HEAP8[$__buf$i>>0]|0;
     $70 = $69 & 1;
     $71 = ($70<<24>>24)==(0);
     if ($71) {
      $74 = $$pre$phi35$iZ2D;
     } else {
      $72 = HEAP32[$$pre$phi37$iZ2D>>2]|0;
      $74 = $72;
     }
     $73 = (($74) + ($58)|0);
     HEAP32[$__a_end$i>>2] = $73;
     $__a$1$i = $74;
    } else {
     $__a$1$i = $__a$0$i;
    }
    $91 = (($92) + 12|0);
    $93 = HEAP32[$91>>2]|0;
    $94 = (($92) + 16|0);
    $95 = HEAP32[$94>>2]|0;
    $96 = ($93|0)==($95|0);
    if ($96) {
     $97 = HEAP32[$92>>2]|0;
     $98 = (($97) + 36|0);
     $99 = HEAP32[$98>>2]|0;
     __THREW__ = 0;
     $100 = (invoke_ii($99|0,($92|0))|0);
     $101 = __THREW__; __THREW__ = 0;
     $102 = $101&1;
     if ($102) {
      label = 32;
      break;
     } else {
      $$0$i$i$i = $100;
     }
    } else {
     $103 = HEAP32[$93>>2]|0;
     $$0$i$i$i = $103;
    }
    $104 = (__ZNSt3__19__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($$0$i$i$i,$__in_units$i,$__exp$i,$__a$1$i,$__a_end$i,$12,$13,$__grouping$i,$__g$i,$__g_end$i,$__dc$i,$__atoms$i)|0);
    $105 = ($104|0)==(0);
    if (!($105)) {
     $$pre$i3$i$i$i = $$sroa$06$2;$__a$2$i = $__a$1$i;
     break;
    }
    $106 = HEAP32[$91>>2]|0;
    $107 = HEAP32[$94>>2]|0;
    $108 = ($106|0)==($107|0);
    if ($108) {
     $109 = HEAP32[$92>>2]|0;
     $110 = (($109) + 40|0);
     $111 = HEAP32[$110>>2]|0;
     __THREW__ = 0;
     (invoke_ii($111|0,($92|0))|0);
     $112 = __THREW__; __THREW__ = 0;
     $113 = $112&1;
     if ($113) {
      label = 32;
      break;
     } else {
      $$pre$i$i$i5$i = $92;$$sroa$06$0 = $$sroa$06$2;$__a$0$i = $__a$1$i;
      continue;
     }
    } else {
     $114 = (($106) + 4|0);
     HEAP32[$91>>2] = $114;
     $$pre$i$i$i5$i = $92;$$sroa$06$0 = $$sroa$06$2;$__a$0$i = $__a$1$i;
     continue;
    }
   }
   if ((label|0) == 32) {
    $75 = ___cxa_find_matching_catch(-1,-1)|0;
    $76 = tempRet0;
    $lpad$phi$i$index = $75;$lpad$phi$i$index11 = $76;
    break;
   }
   $115 = HEAP8[$__grouping$i>>0]|0;
   $116 = $115 & 1;
   $117 = ($116<<24>>24)==(0);
   if ($117) {
    $120 = $115&255;
    $121 = $120 >>> 1;
    $123 = $121;
   } else {
    $118 = (($__grouping$i) + 4|0);
    $119 = HEAP32[$118>>2]|0;
    $123 = $119;
   }
   $122 = ($123|0)==(0);
   if (!($122)) {
    $124 = HEAP8[$__in_units$i>>0]|0;
    $125 = ($124<<24>>24)==(0);
    if (!($125)) {
     $126 = HEAP32[$__g_end$i>>2]|0;
     $127 = $126;
     $128 = $__g$i;
     $129 = (($127) - ($128))|0;
     $130 = ($129|0)<(160);
     if ($130) {
      $131 = HEAP32[$__dc$i>>2]|0;
      $132 = (($126) + 4|0);
      HEAP32[$__g_end$i>>2] = $132;
      HEAP32[$126>>2] = $131;
     }
    }
   }
   $133 = HEAP32[$__a_end$i>>2]|0;
   __THREW__ = 0;
   $134 = (+invoke_diii(460,($__a$2$i|0),($133|0),($__err|0)));
   $135 = __THREW__; __THREW__ = 0;
   $136 = $135&1;
   if ($136) {
    label = 33;
   } else {
    HEAPF64[$__v>>3] = $134;
    $137 = HEAP32[$__g_end$i>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping$i,$__g$i,$137,$__err);
    $138 = ($92|0)==(0|0);
    if ($138) {
     $168 = 0;$182 = 1;
    } else {
     $139 = (($92) + 12|0);
     $140 = HEAP32[$139>>2]|0;
     $141 = (($92) + 16|0);
     $142 = HEAP32[$141>>2]|0;
     $143 = ($140|0)==($142|0);
     if ($143) {
      $144 = HEAP32[$92>>2]|0;
      $145 = (($144) + 36|0);
      $146 = HEAP32[$145>>2]|0;
      __THREW__ = 0;
      $147 = (invoke_ii($146|0,($92|0))|0);
      $148 = __THREW__; __THREW__ = 0;
      $149 = $148&1;
      if ($149) {
       label = 33;
       break;
      } else {
       $$0$i$i$i$i$i = $147;
      }
     } else {
      $150 = HEAP32[$140>>2]|0;
      $$0$i$i$i$i$i = $150;
     }
     $151 = ($$0$i$i$i$i$i|0)==(-1);
     $$8 = $151 ? 0 : $92;
     $$9 = $151 ? 1 : 0;
     $168 = $$8;$182 = $$9;
    }
    $152 = ($$pre$i3$i$i$i|0)==(0|0);
    if ($152) {
     label = 66;
    } else {
     $153 = (($$pre$i3$i$i$i) + 12|0);
     $154 = HEAP32[$153>>2]|0;
     $155 = (($$pre$i3$i$i$i) + 16|0);
     $156 = HEAP32[$155>>2]|0;
     $157 = ($154|0)==($156|0);
     if ($157) {
      $158 = HEAP32[$$pre$i3$i$i$i>>2]|0;
      $159 = (($158) + 36|0);
      $160 = HEAP32[$159>>2]|0;
      __THREW__ = 0;
      $161 = (invoke_ii($160|0,($$pre$i3$i$i$i|0))|0);
      $162 = __THREW__; __THREW__ = 0;
      $163 = $162&1;
      if ($163) {
       label = 33;
       break;
      } else {
       $$0$i$i1$i$i$i = $161;
      }
     } else {
      $164 = HEAP32[$154>>2]|0;
      $$0$i$i1$i$i$i = $164;
     }
     $165 = ($$0$i$i1$i$i$i|0)==(-1);
     if ($165) {
      label = 66;
     } else {
      if (!($182)) {
       label = 68;
      }
     }
    }
    if ((label|0) == 66) {
     if ($182) {
      label = 68;
     }
    }
    if ((label|0) == 68) {
     $166 = HEAP32[$__err>>2]|0;
     $167 = $166 | 2;
     HEAP32[$__err>>2] = $167;
    }
    HEAP32[$agg$result>>2] = $168;
    $169 = HEAP8[$__buf$i>>0]|0;
    $170 = $169 & 1;
    $171 = ($170<<24>>24)==(0);
    if (!($171)) {
     $172 = (($__buf$i) + 8|0);
     $173 = HEAP32[$172>>2]|0;
     $174 = ($173|0)==(0|0);
     if (!($174)) {
      _free($173);
     }
    }
    $175 = HEAP8[$__grouping$i>>0]|0;
    $176 = $175 & 1;
    $177 = ($176<<24>>24)==(0);
    if ($177) {
     STACKTOP = sp;return;
    }
    $178 = (($__grouping$i) + 8|0);
    $179 = HEAP32[$178>>2]|0;
    $180 = ($179|0)==(0|0);
    if ($180) {
     STACKTOP = sp;return;
    }
    _free($179);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 33) {
  $77 = ___cxa_find_matching_catch(-1,-1)|0;
  $78 = tempRet0;
  $lpad$phi$i$index = $77;$lpad$phi$i$index11 = $78;
 }
 $79 = HEAP8[$__buf$i>>0]|0;
 $80 = $79 & 1;
 $81 = ($80<<24>>24)==(0);
 if (!($81)) {
  $82 = (($__buf$i) + 8|0);
  $83 = HEAP32[$82>>2]|0;
  $84 = ($83|0)==(0|0);
  if (!($84)) {
   _free($83);
  }
 }
 $85 = HEAP8[$__grouping$i>>0]|0;
 $86 = $85 & 1;
 $87 = ($86<<24>>24)==(0);
 if ($87) {
  ___resumeException($lpad$phi$i$index|0);
  // unreachable;
 }
 $88 = (($__grouping$i) + 8|0);
 $89 = HEAP32[$88>>2]|0;
 $90 = ($89|0)==(0|0);
 if ($90) {
  ___resumeException($lpad$phi$i$index|0);
  // unreachable;
 }
 _free($89);
 ___resumeException($lpad$phi$i$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i8 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i14 = 0, $$0$lcssa$i$i = 0, $$01 = 0, $$01$i$i = 0, $$ph = 0, $$ph35 = 0, $$pre = 0, $$pre$i$i$i10 = 0, $$pre$phi41Z2D = 0, $$pre$phi43Z2D = 0, $$pre40 = 0, $$pre42 = 0, $0 = 0, $1 = 0, $10 = 0;
 var $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0;
 var $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0;
 var $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0;
 var $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0;
 var $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0;
 var $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $243$phi = 0;
 var $244 = 0, $245 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__atoms = 0, $__buf = 0, $__g = 0, $__p$i$i$i$i = 0, $eh$lpad$body$index10Z2D = 0, $eh$lpad$body$indexZ2D = 0, $phitmp$i26 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0;
 $vararg_buffer = sp + 16|0;
 $__p$i$i$i$i = sp;
 $__atoms = sp + 200|0;
 $__buf = sp + 184|0;
 $__g = sp + 24|0;
 $0 = (($__iob) + 28|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 4|0);
 $3 = HEAP32[$2>>2]|0;HEAP32[$2>>2] = (($3+1)|0);
 $4 = HEAP32[6408>>2]|0;
 $5 = ($4|0)==(-1);
 if ($5) {
  label = 3;
 } else {
  HEAP32[$__p$i$i$i$i>>2] = 6408;
  $6 = (($__p$i$i$i$i) + 4|0);
  HEAP32[$6>>2] = (439);
  $7 = (($__p$i$i$i$i) + 8|0);
  HEAP32[$7>>2] = 0;
  __THREW__ = 0;
  invoke_vii(440,(6408|0),($__p$i$i$i$i|0));
  $8 = __THREW__; __THREW__ = 0;
  $9 = $8&1;
  if (!($9)) {
   label = 3;
  }
 }
 do {
  if ((label|0) == 3) {
   $10 = HEAP32[((6408 + 4|0))>>2]|0;
   $11 = (($10) + -1)|0;
   $12 = (($1) + 12|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = (($1) + 8|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = $13;
   $17 = $15;
   $18 = (($16) - ($17))|0;
   $19 = $18 >> 2;
   $20 = ($19>>>0)>($11>>>0);
   if ($20) {
    $21 = (($15) + ($11<<2)|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = ($22|0)==(0|0);
    if (!($23)) {
     $27 = HEAP32[$22>>2]|0;
     $28 = (($27) + 48|0);
     $29 = HEAP32[$28>>2]|0;
     __THREW__ = 0;
     (invoke_iiiii($29|0,($22|0),(4976|0),(((4976 + 26|0))|0),($__atoms|0))|0);
     $30 = __THREW__; __THREW__ = 0;
     $31 = $30&1;
     if ($31) {
      break;
     }
     $32 = (($1) + 4|0);
     $33 = HEAP32[$32>>2]|0;HEAP32[$32>>2] = (($33+-1)|0);
     $34 = ($33|0)==(0);
     if ($34) {
      $35 = HEAP32[$1>>2]|0;
      $36 = (($35) + 8|0);
      $37 = HEAP32[$36>>2]|0;
      FUNCTION_TABLE_vi[$37 & 511]($1);
     }
     ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
     __THREW__ = 0;
     invoke_vii(451,($__buf|0),10);
     $38 = __THREW__; __THREW__ = 0;
     $39 = $38&1;
     L12: do {
      if ($39) {
       label = 46;
      } else {
       $40 = HEAP8[$__buf>>0]|0;
       $41 = $40 & 1;
       $42 = ($41<<24>>24)==(0);
       if ($42) {
        $45 = (($__buf) + 1|0);
        $$pre42 = (($__buf) + 8|0);
        $$pre$phi41Z2D = $45;$$pre$phi43Z2D = $$pre42;$242 = $45;
       } else {
        $43 = (($__buf) + 8|0);
        $44 = HEAP32[$43>>2]|0;
        $$pre40 = (($__buf) + 1|0);
        $$pre$phi41Z2D = $$pre40;$$pre$phi43Z2D = $43;$242 = $44;
       }
       $46 = (($__buf) + 4|0);
       $47 = (($__atoms) + 96|0);
       $48 = (($__atoms) + 100|0);
       $49 = (($__atoms) + 104|0);
       $50 = $__atoms;
       $$pre = HEAP32[$__b>>2]|0;
       $$pre$i$i$i10 = $$pre;$175 = 0;$243 = $__g;$81 = $242;$__a$0 = $242;
       L18: while(1) {
        $51 = ($$pre$i$i$i10|0)==(0|0);
        if ($51) {
         $132 = 0;$244 = 1;
        } else {
         $52 = (($$pre$i$i$i10) + 12|0);
         $53 = HEAP32[$52>>2]|0;
         $54 = (($$pre$i$i$i10) + 16|0);
         $55 = HEAP32[$54>>2]|0;
         $56 = ($53|0)==($55|0);
         if ($56) {
          $57 = HEAP32[$$pre$i$i$i10>>2]|0;
          $58 = (($57) + 36|0);
          $59 = HEAP32[$58>>2]|0;
          __THREW__ = 0;
          $60 = (invoke_ii($59|0,($$pre$i$i$i10|0))|0);
          $61 = __THREW__; __THREW__ = 0;
          $62 = $61&1;
          if ($62) {
           label = 45;
           break;
          } else {
           $$0$i$i$i$i8 = $60;
          }
         } else {
          $63 = HEAP32[$53>>2]|0;
          $$0$i$i$i$i8 = $63;
         }
         $64 = ($$0$i$i$i$i8|0)==(-1);
         if ($64) {
          HEAP32[$__b>>2] = 0;
          $132 = 0;$244 = 1;
         } else {
          $132 = $$pre$i$i$i10;$244 = 0;
         }
        }
        $65 = HEAP32[$__e>>2]|0;
        $66 = ($65|0)==(0|0);
        do {
         if ($66) {
          label = 27;
         } else {
          $67 = (($65) + 12|0);
          $68 = HEAP32[$67>>2]|0;
          $69 = (($65) + 16|0);
          $70 = HEAP32[$69>>2]|0;
          $71 = ($68|0)==($70|0);
          if ($71) {
           $72 = HEAP32[$65>>2]|0;
           $73 = (($72) + 36|0);
           $74 = HEAP32[$73>>2]|0;
           __THREW__ = 0;
           $75 = (invoke_ii($74|0,($65|0))|0);
           $76 = __THREW__; __THREW__ = 0;
           $77 = $76&1;
           if ($77) {
            label = 45;
            break L18;
           } else {
            $$0$i$i1$i$i14 = $75;
           }
          } else {
           $78 = HEAP32[$68>>2]|0;
           $$0$i$i1$i$i14 = $78;
          }
          $79 = ($$0$i$i1$i$i14|0)==(-1);
          if ($79) {
           HEAP32[$__e>>2] = 0;
           label = 27;
           break;
          } else {
           if ($244) {
            break;
           } else {
            $__a$2 = $__a$0;
            break L18;
           }
          }
         }
        } while(0);
        if ((label|0) == 27) {
         label = 0;
         if ($244) {
          $__a$2 = $__a$0;
          break;
         }
        }
        $80 = $81;
        $82 = $__a$0;
        $83 = (($80) - ($82))|0;
        $84 = HEAP8[$__buf>>0]|0;
        $85 = $84 & 1;
        $86 = ($85<<24>>24)==(0);
        if ($86) {
         $88 = $84&255;
         $89 = $88 >>> 1;
         $91 = $89;
        } else {
         $87 = HEAP32[$46>>2]|0;
         $91 = $87;
        }
        $90 = ($83|0)==($91|0);
        if ($90) {
         if ($86) {
          $93 = $84&255;
          $94 = $93 >>> 1;
          $96 = $94;
         } else {
          $92 = HEAP32[$46>>2]|0;
          $96 = $92;
         }
         $95 = $96 << 1;
         __THREW__ = 0;
         invoke_vii(451,($__buf|0),($95|0));
         $97 = __THREW__; __THREW__ = 0;
         $98 = $97&1;
         if ($98) {
          label = 45;
          break;
         }
         $99 = HEAP8[$__buf>>0]|0;
         $100 = $99 & 1;
         $101 = ($100<<24>>24)==(0);
         if ($101) {
          $104 = 10;
         } else {
          $102 = HEAP32[$__buf>>2]|0;
          $103 = $102 & -2;
          $phitmp$i26 = (($103) + -1)|0;
          $104 = $phitmp$i26;
         }
         __THREW__ = 0;
         invoke_vii(451,($__buf|0),($104|0));
         $105 = __THREW__; __THREW__ = 0;
         $106 = $105&1;
         if ($106) {
          label = 45;
          break;
         }
         $107 = HEAP8[$__buf>>0]|0;
         $108 = $107 & 1;
         $109 = ($108<<24>>24)==(0);
         if ($109) {
          $112 = $$pre$phi41Z2D;
         } else {
          $110 = HEAP32[$$pre$phi43Z2D>>2]|0;
          $112 = $110;
         }
         $111 = (($112) + ($96)|0);
         $145 = $111;$__a$1 = $112;
        } else {
         $145 = $81;$__a$1 = $__a$0;
        }
        $131 = (($132) + 12|0);
        $133 = HEAP32[$131>>2]|0;
        $134 = (($132) + 16|0);
        $135 = HEAP32[$134>>2]|0;
        $136 = ($133|0)==($135|0);
        if ($136) {
         $137 = HEAP32[$132>>2]|0;
         $138 = (($137) + 36|0);
         $139 = HEAP32[$138>>2]|0;
         __THREW__ = 0;
         $140 = (invoke_ii($139|0,($132|0))|0);
         $141 = __THREW__; __THREW__ = 0;
         $142 = $141&1;
         if ($142) {
          label = 45;
          break;
         } else {
          $$0$i$i = $140;
         }
        } else {
         $143 = HEAP32[$133>>2]|0;
         $$0$i$i = $143;
        }
        $144 = ($145|0)==($__a$1|0);
        do {
         if ($144) {
          $146 = HEAP32[$47>>2]|0;
          $147 = ($146|0)==($$0$i$i|0);
          if (!($147)) {
           $148 = HEAP32[$48>>2]|0;
           $149 = ($148|0)==($$0$i$i|0);
           if (!($149)) {
            $$01$i$i = $__atoms;
            label = 58;
            break;
           }
          }
          $150 = $147 ? 43 : 45;
          $151 = (($145) + 1|0);
          HEAP8[$145>>0] = $150;
          $$ph = $151;$$ph35 = 0;
         } else {
          $$01$i$i = $__atoms;
          label = 58;
         }
        } while(0);
        do {
         if ((label|0) == 58) {
          while(1) {
           label = 0;
           $154 = HEAP32[$$01$i$i>>2]|0;
           $155 = ($154|0)==($$0$i$i|0);
           $153 = (($$01$i$i) + 4|0);
           if ($155) {
            $$0$lcssa$i$i = $$01$i$i;
            break;
           }
           $152 = ($153|0)==($49|0);
           if ($152) {
            $$0$lcssa$i$i = $49;
            break;
           } else {
            $$01$i$i = $153;
            label = 58;
           }
          }
          $156 = $$0$lcssa$i$i;
          $157 = (($156) - ($50))|0;
          $158 = $157 >> 2;
          $159 = ($157|0)>(92);
          if ($159) {
           $__a$2 = $__a$1;
           break L18;
          }
          $160 = ($157|0)<(88);
          if ($160) {
           $171 = (4976 + ($158)|0);
           $172 = HEAP8[$171>>0]|0;
           $173 = (($145) + 1|0);
           HEAP8[$145>>0] = $172;
           $174 = (($175) + 1)|0;
           $$ph = $173;$$ph35 = $174;
           break;
          }
          if ($144) {
           $__a$2 = $145;
           break L18;
          }
          $161 = $145;
          $162 = $__a$1;
          $163 = (($161) - ($162))|0;
          $164 = ($163|0)<(3);
          if (!($164)) {
           $__a$2 = $__a$1;
           break L18;
          }
          $165 = (($145) + -1|0);
          $166 = HEAP8[$165>>0]|0;
          $167 = ($166<<24>>24)==(48);
          if (!($167)) {
           $__a$2 = $__a$1;
           break L18;
          }
          $168 = (4976 + ($158)|0);
          $169 = HEAP8[$168>>0]|0;
          $170 = (($145) + 1|0);
          HEAP8[$145>>0] = $169;
          $$ph = $170;$$ph35 = 0;
         }
        } while(0);
        $176 = HEAP32[$__b>>2]|0;
        $177 = (($176) + 12|0);
        $178 = HEAP32[$177>>2]|0;
        $179 = (($176) + 16|0);
        $180 = HEAP32[$179>>2]|0;
        $181 = ($178|0)==($180|0);
        if ($181) {
         $182 = HEAP32[$176>>2]|0;
         $183 = (($182) + 40|0);
         $184 = HEAP32[$183>>2]|0;
         __THREW__ = 0;
         (invoke_ii($184|0,($176|0))|0);
         $185 = __THREW__; __THREW__ = 0;
         $186 = $185&1;
         if ($186) {
          label = 45;
          break;
         } else {
          $243$phi = $243;$$pre$i$i$i10 = $176;$175 = $$ph35;$81 = $$ph;$__a$0 = $__a$1;$243 = $243$phi;
          continue;
         }
        } else {
         $187 = (($178) + 4|0);
         HEAP32[$177>>2] = $187;
         $243$phi = $243;$$pre$i$i$i10 = $176;$175 = $$ph35;$81 = $$ph;$__a$0 = $__a$1;$243 = $243$phi;
         continue;
        }
       }
       if ((label|0) == 45) {
        $121 = ___cxa_find_matching_catch(-1,-1)|0;
        $122 = tempRet0;
        $eh$lpad$body$index10Z2D = $122;$eh$lpad$body$indexZ2D = $121;
        break;
       }
       $188 = (($__a$2) + 3|0);
       HEAP8[$188>>0] = 0;
       $189 = HEAP8[6328>>0]|0;
       $190 = ($189<<24>>24)==(0);
       do {
        if ($190) {
         $191 = (___cxa_guard_acquire((6328|0))|0);
         $192 = ($191|0)==(0);
         if (!($192)) {
          __THREW__ = 0;
          $193 = (invoke_iiii(461,2147483647,(6336|0),(0|0))|0);
          $194 = __THREW__; __THREW__ = 0;
          $195 = $194&1;
          if ($195) {
           $196 = ___cxa_find_matching_catch(-1,-1)|0;
           $197 = tempRet0;
           ___cxa_guard_abort((6328|0));
           $eh$lpad$body$index10Z2D = $197;$eh$lpad$body$indexZ2D = $196;
           break L12;
          } else {
           HEAP32[6320>>2] = $193;
           ___cxa_guard_release((6328|0));
           break;
          }
         }
        }
       } while(0);
       $198 = HEAP32[6320>>2]|0;
       __THREW__ = 0;
       HEAP32[$vararg_buffer>>2] = $__v;
       $199 = (invoke_iiii(462,($__a$2|0),($198|0),($vararg_buffer|0))|0);
       $200 = __THREW__; __THREW__ = 0;
       $201 = $200&1;
       if ($201) {
        label = 46;
       } else {
        $202 = ($199|0)==(1);
        if (!($202)) {
         HEAP32[$__err>>2] = 4;
        }
        $203 = HEAP32[$__b>>2]|0;
        $204 = ($203|0)==(0|0);
        if ($204) {
         $235 = 0;$245 = 1;
        } else {
         $205 = (($203) + 12|0);
         $206 = HEAP32[$205>>2]|0;
         $207 = (($203) + 16|0);
         $208 = HEAP32[$207>>2]|0;
         $209 = ($206|0)==($208|0);
         if ($209) {
          $210 = HEAP32[$203>>2]|0;
          $211 = (($210) + 36|0);
          $212 = HEAP32[$211>>2]|0;
          __THREW__ = 0;
          $213 = (invoke_ii($212|0,($203|0))|0);
          $214 = __THREW__; __THREW__ = 0;
          $215 = $214&1;
          if ($215) {
           label = 46;
           break;
          } else {
           $$0$i$i$i$i = $213;
          }
         } else {
          $216 = HEAP32[$206>>2]|0;
          $$0$i$i$i$i = $216;
         }
         $217 = ($$0$i$i$i$i|0)==(-1);
         if ($217) {
          HEAP32[$__b>>2] = 0;
          $235 = 0;$245 = 1;
         } else {
          $235 = $203;$245 = 0;
         }
        }
        $218 = HEAP32[$__e>>2]|0;
        $219 = ($218|0)==(0|0);
        do {
         if ($219) {
          label = 89;
         } else {
          $220 = (($218) + 12|0);
          $221 = HEAP32[$220>>2]|0;
          $222 = (($218) + 16|0);
          $223 = HEAP32[$222>>2]|0;
          $224 = ($221|0)==($223|0);
          if ($224) {
           $225 = HEAP32[$218>>2]|0;
           $226 = (($225) + 36|0);
           $227 = HEAP32[$226>>2]|0;
           __THREW__ = 0;
           $228 = (invoke_ii($227|0,($218|0))|0);
           $229 = __THREW__; __THREW__ = 0;
           $230 = $229&1;
           if ($230) {
            label = 46;
            break L12;
           } else {
            $$0$i$i1$i$i = $228;
           }
          } else {
           $231 = HEAP32[$221>>2]|0;
           $$0$i$i1$i$i = $231;
          }
          $232 = ($$0$i$i1$i$i|0)==(-1);
          if ($232) {
           HEAP32[$__e>>2] = 0;
           label = 89;
           break;
          } else {
           if ($245) {
            break;
           } else {
            label = 91;
            break;
           }
          }
         }
        } while(0);
        if ((label|0) == 89) {
         if ($245) {
          label = 91;
         }
        }
        if ((label|0) == 91) {
         $233 = HEAP32[$__err>>2]|0;
         $234 = $233 | 2;
         HEAP32[$__err>>2] = $234;
        }
        HEAP32[$agg$result>>2] = $235;
        $236 = HEAP8[$__buf>>0]|0;
        $237 = $236 & 1;
        $238 = ($237<<24>>24)==(0);
        if ($238) {
         STACKTOP = sp;return;
        }
        $239 = (($__buf) + 8|0);
        $240 = HEAP32[$239>>2]|0;
        $241 = ($240|0)==(0|0);
        if ($241) {
         STACKTOP = sp;return;
        }
        _free($240);
        STACKTOP = sp;return;
       }
      }
     } while(0);
     if ((label|0) == 46) {
      $123 = ___cxa_find_matching_catch(-1,-1)|0;
      $124 = tempRet0;
      $eh$lpad$body$index10Z2D = $124;$eh$lpad$body$indexZ2D = $123;
     }
     $125 = HEAP8[$__buf>>0]|0;
     $126 = $125 & 1;
     $127 = ($126<<24>>24)==(0);
     if ($127) {
      $$0 = $eh$lpad$body$indexZ2D;$$01 = $eh$lpad$body$index10Z2D;
      ___resumeException($$0|0);
      // unreachable;
     }
     $128 = (($__buf) + 8|0);
     $129 = HEAP32[$128>>2]|0;
     $130 = ($129|0)==(0|0);
     if ($130) {
      $$0 = $eh$lpad$body$indexZ2D;$$01 = $eh$lpad$body$index10Z2D;
      ___resumeException($$0|0);
      // unreachable;
     }
     _free($129);
     $$0 = $eh$lpad$body$indexZ2D;$$01 = $eh$lpad$body$index10Z2D;
     ___resumeException($$0|0);
     // unreachable;
    }
   }
   $24 = (___cxa_allocate_exception(4)|0);
   HEAP32[$24>>2] = ((14256 + 8|0));
   __THREW__ = 0;
   invoke_viii(379,($24|0),(14336|0),(351|0));
   $25 = __THREW__; __THREW__ = 0;
   $26 = $25&1;
   if (!($26)) {
    // unreachable;
   }
  }
 } while(0);
 $113 = ___cxa_find_matching_catch(-1,-1)|0;
 $114 = tempRet0;
 $115 = (($1) + 4|0);
 $116 = HEAP32[$115>>2]|0;HEAP32[$115>>2] = (($116+-1)|0);
 $117 = ($116|0)==(0);
 if (!($117)) {
  $$0 = $113;$$01 = $114;
  ___resumeException($$0|0);
  // unreachable;
 }
 $118 = HEAP32[$1>>2]|0;
 $119 = (($118) + 8|0);
 $120 = HEAP32[$119>>2]|0;
 FUNCTION_TABLE_vi[$120 & 511]($1);
 $$0 = $113;$$01 = $114;
 ___resumeException($$0|0);
 // unreachable;
}
function __ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($__ct,$__base,$__a,$__a_end,$__dc,$__thousands_sep,$__grouping,$__g,$__g_end,$__atoms) {
 $__ct = $__ct|0;
 $__base = $__base|0;
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__dc = $__dc|0;
 $__thousands_sep = $__thousands_sep|0;
 $__grouping = $__grouping|0;
 $__g = $__g|0;
 $__g_end = $__g_end|0;
 $__atoms = $__atoms|0;
 var $$0 = 0, $$0$lcssa$i = 0, $$01$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$__a_end>>2]|0;
 $1 = ($0|0)==($__a|0);
 do {
  if ($1) {
   $2 = (($__atoms) + 96|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = ($3|0)==($__ct|0);
   if (!($4)) {
    $5 = (($__atoms) + 100|0);
    $6 = HEAP32[$5>>2]|0;
    $7 = ($6|0)==($__ct|0);
    if (!($7)) {
     break;
    }
   }
   $8 = $4 ? 43 : 45;
   $9 = (($__a) + 1|0);
   HEAP32[$__a_end>>2] = $9;
   HEAP8[$__a>>0] = $8;
   HEAP32[$__dc>>2] = 0;
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 $10 = HEAP8[$__grouping>>0]|0;
 $11 = $10 & 1;
 $12 = ($11<<24>>24)==(0);
 if ($12) {
  $15 = $10&255;
  $16 = $15 >>> 1;
  $18 = $16;
 } else {
  $13 = (($__grouping) + 4|0);
  $14 = HEAP32[$13>>2]|0;
  $18 = $14;
 }
 $17 = ($18|0)!=(0);
 $19 = ($__ct|0)==($__thousands_sep|0);
 $or$cond = $17 & $19;
 if ($or$cond) {
  $20 = HEAP32[$__g_end>>2]|0;
  $21 = $20;
  $22 = $__g;
  $23 = (($21) - ($22))|0;
  $24 = ($23|0)<(160);
  if (!($24)) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  $25 = HEAP32[$__dc>>2]|0;
  $26 = (($20) + 4|0);
  HEAP32[$__g_end>>2] = $26;
  HEAP32[$20>>2] = $25;
  HEAP32[$__dc>>2] = 0;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $27 = (($__atoms) + 104|0);
 $$01$i = $__atoms;
 while(1) {
  $30 = HEAP32[$$01$i>>2]|0;
  $31 = ($30|0)==($__ct|0);
  $29 = (($$01$i) + 4|0);
  if ($31) {
   $$0$lcssa$i = $$01$i;
   break;
  }
  $28 = ($29|0)==($27|0);
  if ($28) {
   $$0$lcssa$i = $27;
   break;
  } else {
   $$01$i = $29;
  }
 }
 $32 = $$0$lcssa$i;
 $33 = $__atoms;
 $34 = (($32) - ($33))|0;
 $35 = $34 >> 2;
 $36 = ($34|0)>(92);
 if ($36) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 if ((($__base|0) == 10) | (($__base|0) == 8)) {
  $37 = ($35|0)<($__base|0);
  if (!($37)) {
   $$0 = -1;
   STACKTOP = sp;return ($$0|0);
  }
 } else if ((($__base|0) == 16)) {
  $38 = ($34|0)<(88);
  if (!($38)) {
   if ($1) {
    $$0 = -1;
    STACKTOP = sp;return ($$0|0);
   }
   $39 = $0;
   $40 = $__a;
   $41 = (($39) - ($40))|0;
   $42 = ($41|0)<(3);
   if (!($42)) {
    $$0 = -1;
    STACKTOP = sp;return ($$0|0);
   }
   $43 = (($0) + -1|0);
   $44 = HEAP8[$43>>0]|0;
   $45 = ($44<<24>>24)==(48);
   if (!($45)) {
    $$0 = -1;
    STACKTOP = sp;return ($$0|0);
   }
   HEAP32[$__dc>>2] = 0;
   $46 = (4976 + ($35)|0);
   $47 = HEAP8[$46>>0]|0;
   $48 = (($0) + 1|0);
   HEAP32[$__a_end>>2] = $48;
   HEAP8[$0>>0] = $47;
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $49 = (4976 + ($35)|0);
 $50 = HEAP8[$49>>0]|0;
 $51 = (($0) + 1|0);
 HEAP32[$__a_end>>2] = $51;
 HEAP8[$0>>0] = $50;
 $52 = HEAP32[$__dc>>2]|0;
 $53 = (($52) + 1)|0;
 HEAP32[$__dc>>2] = $53;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($agg$result,$__iob,$__atoms,$__thousands_sep) {
 $agg$result = $agg$result|0;
 $__iob = $__iob|0;
 $__atoms = $__atoms|0;
 $__thousands_sep = $__thousands_sep|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $8 = 0, $9 = 0, $__p$i$i$i$i = 0, $__p$i$i$i$i3 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $__p$i$i$i$i3 = sp + 16|0;
 $__p$i$i$i$i = sp;
 $0 = (($__iob) + 28|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 4|0);
 $3 = HEAP32[$2>>2]|0;HEAP32[$2>>2] = (($3+1)|0);
 $4 = HEAP32[6416>>2]|0;
 $5 = ($4|0)==(-1);
 if ($5) {
  label = 3;
 } else {
  HEAP32[$__p$i$i$i$i>>2] = 6416;
  $6 = (($__p$i$i$i$i) + 4|0);
  HEAP32[$6>>2] = (439);
  $7 = (($__p$i$i$i$i) + 8|0);
  HEAP32[$7>>2] = 0;
  __THREW__ = 0;
  invoke_vii(440,(6416|0),($__p$i$i$i$i|0));
  $8 = __THREW__; __THREW__ = 0;
  $9 = $8&1;
  if (!($9)) {
   label = 3;
  }
 }
 do {
  if ((label|0) == 3) {
   $10 = HEAP32[((6416 + 4|0))>>2]|0;
   $11 = (($10) + -1)|0;
   $12 = (($1) + 12|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = (($1) + 8|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = $13;
   $17 = $15;
   $18 = (($16) - ($17))|0;
   $19 = $18 >> 2;
   $20 = ($19>>>0)>($11>>>0);
   if ($20) {
    $21 = (($15) + ($11<<2)|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = ($22|0)==(0|0);
    if (!($23)) {
     $27 = HEAP32[$22>>2]|0;
     $28 = (($27) + 32|0);
     $29 = HEAP32[$28>>2]|0;
     __THREW__ = 0;
     (invoke_iiiii($29|0,($22|0),(4976|0),(((4976 + 26|0))|0),($__atoms|0))|0);
     $30 = __THREW__; __THREW__ = 0;
     $31 = $30&1;
     if ($31) {
      break;
     }
     $32 = HEAP32[6560>>2]|0;
     $33 = ($32|0)==(-1);
     if (!($33)) {
      HEAP32[$__p$i$i$i$i3>>2] = 6560;
      $34 = (($__p$i$i$i$i3) + 4|0);
      HEAP32[$34>>2] = (439);
      $35 = (($__p$i$i$i$i3) + 8|0);
      HEAP32[$35>>2] = 0;
      __THREW__ = 0;
      invoke_vii(440,(6560|0),($__p$i$i$i$i3|0));
      $36 = __THREW__; __THREW__ = 0;
      $37 = $36&1;
      if ($37) {
       break;
      }
     }
     $38 = HEAP32[((6560 + 4|0))>>2]|0;
     $39 = (($38) + -1)|0;
     $40 = HEAP32[$12>>2]|0;
     $41 = HEAP32[$14>>2]|0;
     $42 = $40;
     $43 = $41;
     $44 = (($42) - ($43))|0;
     $45 = $44 >> 2;
     $46 = ($45>>>0)>($39>>>0);
     if ($46) {
      $47 = (($41) + ($39<<2)|0);
      $48 = HEAP32[$47>>2]|0;
      $49 = ($48|0)==(0|0);
      if (!($49)) {
       $53 = HEAP32[$48>>2]|0;
       $54 = (($53) + 16|0);
       $55 = HEAP32[$54>>2]|0;
       __THREW__ = 0;
       $56 = (invoke_ii($55|0,($48|0))|0);
       $57 = __THREW__; __THREW__ = 0;
       $58 = $57&1;
       if ($58) {
        break;
       }
       HEAP8[$__thousands_sep>>0] = $56;
       $59 = HEAP32[$48>>2]|0;
       $60 = (($59) + 20|0);
       $61 = HEAP32[$60>>2]|0;
       __THREW__ = 0;
       invoke_vii($61|0,($agg$result|0),($48|0));
       $62 = __THREW__; __THREW__ = 0;
       $63 = $62&1;
       if ($63) {
        break;
       }
       $64 = (($1) + 4|0);
       $65 = HEAP32[$64>>2]|0;HEAP32[$64>>2] = (($65+-1)|0);
       $66 = ($65|0)==(0);
       if (!($66)) {
        STACKTOP = sp;return;
       }
       $67 = HEAP32[$1>>2]|0;
       $68 = (($67) + 8|0);
       $69 = HEAP32[$68>>2]|0;
       FUNCTION_TABLE_vi[$69 & 511]($1);
       STACKTOP = sp;return;
      }
     }
     $50 = (___cxa_allocate_exception(4)|0);
     HEAP32[$50>>2] = ((14256 + 8|0));
     __THREW__ = 0;
     invoke_viii(379,($50|0),(14336|0),(351|0));
     $51 = __THREW__; __THREW__ = 0;
     $52 = $51&1;
     if ($52) {
      break;
     }
     // unreachable;
    }
   }
   $24 = (___cxa_allocate_exception(4)|0);
   HEAP32[$24>>2] = ((14256 + 8|0));
   __THREW__ = 0;
   invoke_viii(379,($24|0),(14336|0),(351|0));
   $25 = __THREW__; __THREW__ = 0;
   $26 = $25&1;
   if (!($26)) {
    // unreachable;
   }
  }
 } while(0);
 $70 = ___cxa_find_matching_catch(-1,-1)|0;
 $71 = tempRet0;
 $72 = (($1) + 4|0);
 $73 = HEAP32[$72>>2]|0;HEAP32[$72>>2] = (($73+-1)|0);
 $74 = ($73|0)==(0);
 if (!($74)) {
  ___resumeException($70|0);
  // unreachable;
 }
 $75 = HEAP32[$1>>2]|0;
 $76 = (($75) + 8|0);
 $77 = HEAP32[$76>>2]|0;
 FUNCTION_TABLE_vi[$77 & 511]($1);
 ___resumeException($70|0);
 // unreachable;
}
function __ZNSt3__19__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($agg$result,$__iob,$__atoms,$__decimal_point,$__thousands_sep) {
 $agg$result = $agg$result|0;
 $__iob = $__iob|0;
 $__atoms = $__atoms|0;
 $__decimal_point = $__decimal_point|0;
 $__thousands_sep = $__thousands_sep|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $9 = 0, $__p$i$i$i$i = 0, $__p$i$i$i$i3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $__p$i$i$i$i3 = sp + 16|0;
 $__p$i$i$i$i = sp;
 $0 = (($__iob) + 28|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 4|0);
 $3 = HEAP32[$2>>2]|0;HEAP32[$2>>2] = (($3+1)|0);
 $4 = HEAP32[6416>>2]|0;
 $5 = ($4|0)==(-1);
 if ($5) {
  label = 3;
 } else {
  HEAP32[$__p$i$i$i$i>>2] = 6416;
  $6 = (($__p$i$i$i$i) + 4|0);
  HEAP32[$6>>2] = (439);
  $7 = (($__p$i$i$i$i) + 8|0);
  HEAP32[$7>>2] = 0;
  __THREW__ = 0;
  invoke_vii(440,(6416|0),($__p$i$i$i$i|0));
  $8 = __THREW__; __THREW__ = 0;
  $9 = $8&1;
  if (!($9)) {
   label = 3;
  }
 }
 do {
  if ((label|0) == 3) {
   $10 = HEAP32[((6416 + 4|0))>>2]|0;
   $11 = (($10) + -1)|0;
   $12 = (($1) + 12|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = (($1) + 8|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = $13;
   $17 = $15;
   $18 = (($16) - ($17))|0;
   $19 = $18 >> 2;
   $20 = ($19>>>0)>($11>>>0);
   if ($20) {
    $21 = (($15) + ($11<<2)|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = ($22|0)==(0|0);
    if (!($23)) {
     $27 = HEAP32[$22>>2]|0;
     $28 = (($27) + 32|0);
     $29 = HEAP32[$28>>2]|0;
     __THREW__ = 0;
     (invoke_iiiii($29|0,($22|0),(4976|0),(((4976 + 32|0))|0),($__atoms|0))|0);
     $30 = __THREW__; __THREW__ = 0;
     $31 = $30&1;
     if ($31) {
      break;
     }
     $32 = HEAP32[6560>>2]|0;
     $33 = ($32|0)==(-1);
     if (!($33)) {
      HEAP32[$__p$i$i$i$i3>>2] = 6560;
      $34 = (($__p$i$i$i$i3) + 4|0);
      HEAP32[$34>>2] = (439);
      $35 = (($__p$i$i$i$i3) + 8|0);
      HEAP32[$35>>2] = 0;
      __THREW__ = 0;
      invoke_vii(440,(6560|0),($__p$i$i$i$i3|0));
      $36 = __THREW__; __THREW__ = 0;
      $37 = $36&1;
      if ($37) {
       break;
      }
     }
     $38 = HEAP32[((6560 + 4|0))>>2]|0;
     $39 = (($38) + -1)|0;
     $40 = HEAP32[$12>>2]|0;
     $41 = HEAP32[$14>>2]|0;
     $42 = $40;
     $43 = $41;
     $44 = (($42) - ($43))|0;
     $45 = $44 >> 2;
     $46 = ($45>>>0)>($39>>>0);
     if ($46) {
      $47 = (($41) + ($39<<2)|0);
      $48 = HEAP32[$47>>2]|0;
      $49 = ($48|0)==(0|0);
      if (!($49)) {
       $53 = HEAP32[$48>>2]|0;
       $54 = (($53) + 12|0);
       $55 = HEAP32[$54>>2]|0;
       __THREW__ = 0;
       $56 = (invoke_ii($55|0,($48|0))|0);
       $57 = __THREW__; __THREW__ = 0;
       $58 = $57&1;
       if ($58) {
        break;
       }
       HEAP8[$__decimal_point>>0] = $56;
       $59 = HEAP32[$48>>2]|0;
       $60 = (($59) + 16|0);
       $61 = HEAP32[$60>>2]|0;
       __THREW__ = 0;
       $62 = (invoke_ii($61|0,($48|0))|0);
       $63 = __THREW__; __THREW__ = 0;
       $64 = $63&1;
       if ($64) {
        break;
       }
       HEAP8[$__thousands_sep>>0] = $62;
       $65 = HEAP32[$48>>2]|0;
       $66 = (($65) + 20|0);
       $67 = HEAP32[$66>>2]|0;
       __THREW__ = 0;
       invoke_vii($67|0,($agg$result|0),($48|0));
       $68 = __THREW__; __THREW__ = 0;
       $69 = $68&1;
       if ($69) {
        break;
       }
       $70 = (($1) + 4|0);
       $71 = HEAP32[$70>>2]|0;HEAP32[$70>>2] = (($71+-1)|0);
       $72 = ($71|0)==(0);
       if (!($72)) {
        STACKTOP = sp;return;
       }
       $73 = HEAP32[$1>>2]|0;
       $74 = (($73) + 8|0);
       $75 = HEAP32[$74>>2]|0;
       FUNCTION_TABLE_vi[$75 & 511]($1);
       STACKTOP = sp;return;
      }
     }
     $50 = (___cxa_allocate_exception(4)|0);
     HEAP32[$50>>2] = ((14256 + 8|0));
     __THREW__ = 0;
     invoke_viii(379,($50|0),(14336|0),(351|0));
     $51 = __THREW__; __THREW__ = 0;
     $52 = $51&1;
     if ($52) {
      break;
     }
     // unreachable;
    }
   }
   $24 = (___cxa_allocate_exception(4)|0);
   HEAP32[$24>>2] = ((14256 + 8|0));
   __THREW__ = 0;
   invoke_viii(379,($24|0),(14336|0),(351|0));
   $25 = __THREW__; __THREW__ = 0;
   $26 = $25&1;
   if (!($26)) {
    // unreachable;
   }
  }
 } while(0);
 $76 = ___cxa_find_matching_catch(-1,-1)|0;
 $77 = tempRet0;
 $78 = (($1) + 4|0);
 $79 = HEAP32[$78>>2]|0;HEAP32[$78>>2] = (($79+-1)|0);
 $80 = ($79|0)==(0);
 if (!($80)) {
  ___resumeException($76|0);
  // unreachable;
 }
 $81 = HEAP32[$1>>2]|0;
 $82 = (($81) + 8|0);
 $83 = HEAP32[$82>>2]|0;
 FUNCTION_TABLE_vi[$83 & 511]($1);
 ___resumeException($76|0);
 // unreachable;
}
function __ZNSt3__19__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($__ct,$__in_units,$__exp,$__a,$__a_end,$__decimal_point,$__thousands_sep,$__grouping,$__g,$__g_end,$__dc,$__atoms) {
 $__ct = $__ct|0;
 $__in_units = $__in_units|0;
 $__exp = $__exp|0;
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__decimal_point = $__decimal_point|0;
 $__thousands_sep = $__thousands_sep|0;
 $__grouping = $__grouping|0;
 $__g = $__g|0;
 $__g_end = $__g_end|0;
 $__dc = $__dc|0;
 $__atoms = $__atoms|0;
 var $$0 = 0, $$0$lcssa$i = 0, $$01$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__ct<<24>>24)==($__decimal_point<<24>>24);
 if ($0) {
  $1 = HEAP8[$__in_units>>0]|0;
  $2 = ($1<<24>>24)==(0);
  if ($2) {
   $$0 = -1;
   STACKTOP = sp;return ($$0|0);
  }
  HEAP8[$__in_units>>0] = 0;
  $3 = HEAP32[$__a_end>>2]|0;
  $4 = (($3) + 1|0);
  HEAP32[$__a_end>>2] = $4;
  HEAP8[$3>>0] = 46;
  $5 = HEAP8[$__grouping>>0]|0;
  $6 = $5 & 1;
  $7 = ($6<<24>>24)==(0);
  if ($7) {
   $10 = $5&255;
   $11 = $10 >>> 1;
   $13 = $11;
  } else {
   $8 = (($__grouping) + 4|0);
   $9 = HEAP32[$8>>2]|0;
   $13 = $9;
  }
  $12 = ($13|0)==(0);
  if ($12) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  $14 = HEAP32[$__g_end>>2]|0;
  $15 = $14;
  $16 = $__g;
  $17 = (($15) - ($16))|0;
  $18 = ($17|0)<(160);
  if (!($18)) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  $19 = HEAP32[$__dc>>2]|0;
  $20 = (($14) + 4|0);
  HEAP32[$__g_end>>2] = $20;
  HEAP32[$14>>2] = $19;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $21 = ($__ct<<24>>24)==($__thousands_sep<<24>>24);
 if ($21) {
  $22 = HEAP8[$__grouping>>0]|0;
  $23 = $22 & 1;
  $24 = ($23<<24>>24)==(0);
  if ($24) {
   $27 = $22&255;
   $28 = $27 >>> 1;
   $30 = $28;
  } else {
   $25 = (($__grouping) + 4|0);
   $26 = HEAP32[$25>>2]|0;
   $30 = $26;
  }
  $29 = ($30|0)==(0);
  if (!($29)) {
   $31 = HEAP8[$__in_units>>0]|0;
   $32 = ($31<<24>>24)==(0);
   if ($32) {
    $$0 = -1;
    STACKTOP = sp;return ($$0|0);
   }
   $33 = HEAP32[$__g_end>>2]|0;
   $34 = $33;
   $35 = $__g;
   $36 = (($34) - ($35))|0;
   $37 = ($36|0)<(160);
   if (!($37)) {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
   $38 = HEAP32[$__dc>>2]|0;
   $39 = (($33) + 4|0);
   HEAP32[$__g_end>>2] = $39;
   HEAP32[$33>>2] = $38;
   HEAP32[$__dc>>2] = 0;
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $40 = (($__atoms) + 32|0);
 $$01$i = $__atoms;
 while(1) {
  $43 = HEAP8[$$01$i>>0]|0;
  $44 = ($43<<24>>24)==($__ct<<24>>24);
  $42 = (($$01$i) + 1|0);
  if ($44) {
   $$0$lcssa$i = $$01$i;
   break;
  }
  $41 = ($42|0)==($40|0);
  if ($41) {
   $$0$lcssa$i = $40;
   break;
  } else {
   $$01$i = $42;
  }
 }
 $45 = $$0$lcssa$i;
 $46 = $__atoms;
 $47 = (($45) - ($46))|0;
 $48 = ($47|0)>(31);
 if ($48) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $49 = (4976 + ($47)|0);
 $50 = HEAP8[$49>>0]|0;
 if ((($47|0) == 24) | (($47|0) == 25)) {
  $51 = HEAP32[$__a_end>>2]|0;
  $52 = ($51|0)==($__a|0);
  if (!($52)) {
   $53 = (($51) + -1|0);
   $54 = HEAP8[$53>>0]|0;
   $55 = $54&255;
   $56 = $55 & 95;
   $57 = HEAP8[$__exp>>0]|0;
   $58 = $57&255;
   $59 = $58 & 127;
   $60 = ($56|0)==($59|0);
   if (!($60)) {
    $$0 = -1;
    STACKTOP = sp;return ($$0|0);
   }
  }
  $61 = (($51) + 1|0);
  HEAP32[$__a_end>>2] = $61;
  HEAP8[$51>>0] = $50;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 } else if ((($47|0) == 23) | (($47|0) == 22)) {
  HEAP8[$__exp>>0] = 80;
  $62 = HEAP32[$__a_end>>2]|0;
  $63 = (($62) + 1|0);
  HEAP32[$__a_end>>2] = $63;
  HEAP8[$62>>0] = $50;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 } else {
  $64 = $50&255;
  $65 = $64 & 95;
  $66 = HEAP8[$__exp>>0]|0;
  $67 = $66 << 24 >> 24;
  $68 = ($65|0)==($67|0);
  if ($68) {
   $69 = $65 | 128;
   $70 = $69&255;
   HEAP8[$__exp>>0] = $70;
   $71 = HEAP8[$__in_units>>0]|0;
   $72 = ($71<<24>>24)==(0);
   if (!($72)) {
    HEAP8[$__in_units>>0] = 0;
    $73 = HEAP8[$__grouping>>0]|0;
    $74 = $73 & 1;
    $75 = ($74<<24>>24)==(0);
    if ($75) {
     $78 = $73&255;
     $79 = $78 >>> 1;
     $81 = $79;
    } else {
     $76 = (($__grouping) + 4|0);
     $77 = HEAP32[$76>>2]|0;
     $81 = $77;
    }
    $80 = ($81|0)==(0);
    if (!($80)) {
     $82 = HEAP32[$__g_end>>2]|0;
     $83 = $82;
     $84 = $__g;
     $85 = (($83) - ($84))|0;
     $86 = ($85|0)<(160);
     if ($86) {
      $87 = HEAP32[$__dc>>2]|0;
      $88 = (($82) + 4|0);
      HEAP32[$__g_end>>2] = $88;
      HEAP32[$82>>2] = $87;
     }
    }
   }
  }
  $89 = HEAP32[$__a_end>>2]|0;
  $90 = (($89) + 1|0);
  HEAP32[$__a_end>>2] = $90;
  HEAP8[$89>>0] = $50;
  $91 = ($47|0)>(21);
  if ($91) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  $92 = HEAP32[$__dc>>2]|0;
  $93 = (($92) + 1)|0;
  HEAP32[$__dc>>2] = $93;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($agg$result,$__iob,$__atoms,$__thousands_sep) {
 $agg$result = $agg$result|0;
 $__iob = $__iob|0;
 $__atoms = $__atoms|0;
 $__thousands_sep = $__thousands_sep|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $8 = 0, $9 = 0, $__p$i$i$i$i = 0, $__p$i$i$i$i3 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $__p$i$i$i$i3 = sp + 16|0;
 $__p$i$i$i$i = sp;
 $0 = (($__iob) + 28|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 4|0);
 $3 = HEAP32[$2>>2]|0;HEAP32[$2>>2] = (($3+1)|0);
 $4 = HEAP32[6408>>2]|0;
 $5 = ($4|0)==(-1);
 if ($5) {
  label = 3;
 } else {
  HEAP32[$__p$i$i$i$i>>2] = 6408;
  $6 = (($__p$i$i$i$i) + 4|0);
  HEAP32[$6>>2] = (439);
  $7 = (($__p$i$i$i$i) + 8|0);
  HEAP32[$7>>2] = 0;
  __THREW__ = 0;
  invoke_vii(440,(6408|0),($__p$i$i$i$i|0));
  $8 = __THREW__; __THREW__ = 0;
  $9 = $8&1;
  if (!($9)) {
   label = 3;
  }
 }
 do {
  if ((label|0) == 3) {
   $10 = HEAP32[((6408 + 4|0))>>2]|0;
   $11 = (($10) + -1)|0;
   $12 = (($1) + 12|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = (($1) + 8|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = $13;
   $17 = $15;
   $18 = (($16) - ($17))|0;
   $19 = $18 >> 2;
   $20 = ($19>>>0)>($11>>>0);
   if ($20) {
    $21 = (($15) + ($11<<2)|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = ($22|0)==(0|0);
    if (!($23)) {
     $27 = HEAP32[$22>>2]|0;
     $28 = (($27) + 48|0);
     $29 = HEAP32[$28>>2]|0;
     __THREW__ = 0;
     (invoke_iiiii($29|0,($22|0),(4976|0),(((4976 + 26|0))|0),($__atoms|0))|0);
     $30 = __THREW__; __THREW__ = 0;
     $31 = $30&1;
     if ($31) {
      break;
     }
     $32 = HEAP32[6568>>2]|0;
     $33 = ($32|0)==(-1);
     if (!($33)) {
      HEAP32[$__p$i$i$i$i3>>2] = 6568;
      $34 = (($__p$i$i$i$i3) + 4|0);
      HEAP32[$34>>2] = (439);
      $35 = (($__p$i$i$i$i3) + 8|0);
      HEAP32[$35>>2] = 0;
      __THREW__ = 0;
      invoke_vii(440,(6568|0),($__p$i$i$i$i3|0));
      $36 = __THREW__; __THREW__ = 0;
      $37 = $36&1;
      if ($37) {
       break;
      }
     }
     $38 = HEAP32[((6568 + 4|0))>>2]|0;
     $39 = (($38) + -1)|0;
     $40 = HEAP32[$12>>2]|0;
     $41 = HEAP32[$14>>2]|0;
     $42 = $40;
     $43 = $41;
     $44 = (($42) - ($43))|0;
     $45 = $44 >> 2;
     $46 = ($45>>>0)>($39>>>0);
     if ($46) {
      $47 = (($41) + ($39<<2)|0);
      $48 = HEAP32[$47>>2]|0;
      $49 = ($48|0)==(0|0);
      if (!($49)) {
       $53 = HEAP32[$48>>2]|0;
       $54 = (($53) + 16|0);
       $55 = HEAP32[$54>>2]|0;
       __THREW__ = 0;
       $56 = (invoke_ii($55|0,($48|0))|0);
       $57 = __THREW__; __THREW__ = 0;
       $58 = $57&1;
       if ($58) {
        break;
       }
       HEAP32[$__thousands_sep>>2] = $56;
       $59 = HEAP32[$48>>2]|0;
       $60 = (($59) + 20|0);
       $61 = HEAP32[$60>>2]|0;
       __THREW__ = 0;
       invoke_vii($61|0,($agg$result|0),($48|0));
       $62 = __THREW__; __THREW__ = 0;
       $63 = $62&1;
       if ($63) {
        break;
       }
       $64 = (($1) + 4|0);
       $65 = HEAP32[$64>>2]|0;HEAP32[$64>>2] = (($65+-1)|0);
       $66 = ($65|0)==(0);
       if (!($66)) {
        STACKTOP = sp;return;
       }
       $67 = HEAP32[$1>>2]|0;
       $68 = (($67) + 8|0);
       $69 = HEAP32[$68>>2]|0;
       FUNCTION_TABLE_vi[$69 & 511]($1);
       STACKTOP = sp;return;
      }
     }
     $50 = (___cxa_allocate_exception(4)|0);
     HEAP32[$50>>2] = ((14256 + 8|0));
     __THREW__ = 0;
     invoke_viii(379,($50|0),(14336|0),(351|0));
     $51 = __THREW__; __THREW__ = 0;
     $52 = $51&1;
     if ($52) {
      break;
     }
     // unreachable;
    }
   }
   $24 = (___cxa_allocate_exception(4)|0);
   HEAP32[$24>>2] = ((14256 + 8|0));
   __THREW__ = 0;
   invoke_viii(379,($24|0),(14336|0),(351|0));
   $25 = __THREW__; __THREW__ = 0;
   $26 = $25&1;
   if (!($26)) {
    // unreachable;
   }
  }
 } while(0);
 $70 = ___cxa_find_matching_catch(-1,-1)|0;
 $71 = tempRet0;
 $72 = (($1) + 4|0);
 $73 = HEAP32[$72>>2]|0;HEAP32[$72>>2] = (($73+-1)|0);
 $74 = ($73|0)==(0);
 if (!($74)) {
  ___resumeException($70|0);
  // unreachable;
 }
 $75 = HEAP32[$1>>2]|0;
 $76 = (($75) + 8|0);
 $77 = HEAP32[$76>>2]|0;
 FUNCTION_TABLE_vi[$77 & 511]($1);
 ___resumeException($70|0);
 // unreachable;
}
function __ZNSt3__19__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($agg$result,$__iob,$__atoms,$__decimal_point,$__thousands_sep) {
 $agg$result = $agg$result|0;
 $__iob = $__iob|0;
 $__atoms = $__atoms|0;
 $__decimal_point = $__decimal_point|0;
 $__thousands_sep = $__thousands_sep|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $9 = 0, $__p$i$i$i$i = 0, $__p$i$i$i$i3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $__p$i$i$i$i3 = sp + 16|0;
 $__p$i$i$i$i = sp;
 $0 = (($__iob) + 28|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 4|0);
 $3 = HEAP32[$2>>2]|0;HEAP32[$2>>2] = (($3+1)|0);
 $4 = HEAP32[6408>>2]|0;
 $5 = ($4|0)==(-1);
 if ($5) {
  label = 3;
 } else {
  HEAP32[$__p$i$i$i$i>>2] = 6408;
  $6 = (($__p$i$i$i$i) + 4|0);
  HEAP32[$6>>2] = (439);
  $7 = (($__p$i$i$i$i) + 8|0);
  HEAP32[$7>>2] = 0;
  __THREW__ = 0;
  invoke_vii(440,(6408|0),($__p$i$i$i$i|0));
  $8 = __THREW__; __THREW__ = 0;
  $9 = $8&1;
  if (!($9)) {
   label = 3;
  }
 }
 do {
  if ((label|0) == 3) {
   $10 = HEAP32[((6408 + 4|0))>>2]|0;
   $11 = (($10) + -1)|0;
   $12 = (($1) + 12|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = (($1) + 8|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = $13;
   $17 = $15;
   $18 = (($16) - ($17))|0;
   $19 = $18 >> 2;
   $20 = ($19>>>0)>($11>>>0);
   if ($20) {
    $21 = (($15) + ($11<<2)|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = ($22|0)==(0|0);
    if (!($23)) {
     $27 = HEAP32[$22>>2]|0;
     $28 = (($27) + 48|0);
     $29 = HEAP32[$28>>2]|0;
     __THREW__ = 0;
     (invoke_iiiii($29|0,($22|0),(4976|0),(((4976 + 32|0))|0),($__atoms|0))|0);
     $30 = __THREW__; __THREW__ = 0;
     $31 = $30&1;
     if ($31) {
      break;
     }
     $32 = HEAP32[6568>>2]|0;
     $33 = ($32|0)==(-1);
     if (!($33)) {
      HEAP32[$__p$i$i$i$i3>>2] = 6568;
      $34 = (($__p$i$i$i$i3) + 4|0);
      HEAP32[$34>>2] = (439);
      $35 = (($__p$i$i$i$i3) + 8|0);
      HEAP32[$35>>2] = 0;
      __THREW__ = 0;
      invoke_vii(440,(6568|0),($__p$i$i$i$i3|0));
      $36 = __THREW__; __THREW__ = 0;
      $37 = $36&1;
      if ($37) {
       break;
      }
     }
     $38 = HEAP32[((6568 + 4|0))>>2]|0;
     $39 = (($38) + -1)|0;
     $40 = HEAP32[$12>>2]|0;
     $41 = HEAP32[$14>>2]|0;
     $42 = $40;
     $43 = $41;
     $44 = (($42) - ($43))|0;
     $45 = $44 >> 2;
     $46 = ($45>>>0)>($39>>>0);
     if ($46) {
      $47 = (($41) + ($39<<2)|0);
      $48 = HEAP32[$47>>2]|0;
      $49 = ($48|0)==(0|0);
      if (!($49)) {
       $53 = HEAP32[$48>>2]|0;
       $54 = (($53) + 12|0);
       $55 = HEAP32[$54>>2]|0;
       __THREW__ = 0;
       $56 = (invoke_ii($55|0,($48|0))|0);
       $57 = __THREW__; __THREW__ = 0;
       $58 = $57&1;
       if ($58) {
        break;
       }
       HEAP32[$__decimal_point>>2] = $56;
       $59 = HEAP32[$48>>2]|0;
       $60 = (($59) + 16|0);
       $61 = HEAP32[$60>>2]|0;
       __THREW__ = 0;
       $62 = (invoke_ii($61|0,($48|0))|0);
       $63 = __THREW__; __THREW__ = 0;
       $64 = $63&1;
       if ($64) {
        break;
       }
       HEAP32[$__thousands_sep>>2] = $62;
       $65 = HEAP32[$48>>2]|0;
       $66 = (($65) + 20|0);
       $67 = HEAP32[$66>>2]|0;
       __THREW__ = 0;
       invoke_vii($67|0,($agg$result|0),($48|0));
       $68 = __THREW__; __THREW__ = 0;
       $69 = $68&1;
       if ($69) {
        break;
       }
       $70 = (($1) + 4|0);
       $71 = HEAP32[$70>>2]|0;HEAP32[$70>>2] = (($71+-1)|0);
       $72 = ($71|0)==(0);
       if (!($72)) {
        STACKTOP = sp;return;
       }
       $73 = HEAP32[$1>>2]|0;
       $74 = (($73) + 8|0);
       $75 = HEAP32[$74>>2]|0;
       FUNCTION_TABLE_vi[$75 & 511]($1);
       STACKTOP = sp;return;
      }
     }
     $50 = (___cxa_allocate_exception(4)|0);
     HEAP32[$50>>2] = ((14256 + 8|0));
     __THREW__ = 0;
     invoke_viii(379,($50|0),(14336|0),(351|0));
     $51 = __THREW__; __THREW__ = 0;
     $52 = $51&1;
     if ($52) {
      break;
     }
     // unreachable;
    }
   }
   $24 = (___cxa_allocate_exception(4)|0);
   HEAP32[$24>>2] = ((14256 + 8|0));
   __THREW__ = 0;
   invoke_viii(379,($24|0),(14336|0),(351|0));
   $25 = __THREW__; __THREW__ = 0;
   $26 = $25&1;
   if (!($26)) {
    // unreachable;
   }
  }
 } while(0);
 $76 = ___cxa_find_matching_catch(-1,-1)|0;
 $77 = tempRet0;
 $78 = (($1) + 4|0);
 $79 = HEAP32[$78>>2]|0;HEAP32[$78>>2] = (($79+-1)|0);
 $80 = ($79|0)==(0);
 if (!($80)) {
  ___resumeException($76|0);
  // unreachable;
 }
 $81 = HEAP32[$1>>2]|0;
 $82 = (($81) + 8|0);
 $83 = HEAP32[$82>>2]|0;
 FUNCTION_TABLE_vi[$83 & 511]($1);
 ___resumeException($76|0);
 // unreachable;
}
function __ZNSt3__19__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($__ct,$__in_units,$__exp,$__a,$__a_end,$__decimal_point,$__thousands_sep,$__grouping,$__g,$__g_end,$__dc,$__atoms) {
 $__ct = $__ct|0;
 $__in_units = $__in_units|0;
 $__exp = $__exp|0;
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__decimal_point = $__decimal_point|0;
 $__thousands_sep = $__thousands_sep|0;
 $__grouping = $__grouping|0;
 $__g = $__g|0;
 $__g_end = $__g_end|0;
 $__dc = $__dc|0;
 $__atoms = $__atoms|0;
 var $$0 = 0, $$0$lcssa$i = 0, $$01$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__ct|0)==($__decimal_point|0);
 if ($0) {
  $1 = HEAP8[$__in_units>>0]|0;
  $2 = ($1<<24>>24)==(0);
  if ($2) {
   $$0 = -1;
   STACKTOP = sp;return ($$0|0);
  }
  HEAP8[$__in_units>>0] = 0;
  $3 = HEAP32[$__a_end>>2]|0;
  $4 = (($3) + 1|0);
  HEAP32[$__a_end>>2] = $4;
  HEAP8[$3>>0] = 46;
  $5 = HEAP8[$__grouping>>0]|0;
  $6 = $5 & 1;
  $7 = ($6<<24>>24)==(0);
  if ($7) {
   $10 = $5&255;
   $11 = $10 >>> 1;
   $13 = $11;
  } else {
   $8 = (($__grouping) + 4|0);
   $9 = HEAP32[$8>>2]|0;
   $13 = $9;
  }
  $12 = ($13|0)==(0);
  if ($12) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  $14 = HEAP32[$__g_end>>2]|0;
  $15 = $14;
  $16 = $__g;
  $17 = (($15) - ($16))|0;
  $18 = ($17|0)<(160);
  if (!($18)) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  $19 = HEAP32[$__dc>>2]|0;
  $20 = (($14) + 4|0);
  HEAP32[$__g_end>>2] = $20;
  HEAP32[$14>>2] = $19;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $21 = ($__ct|0)==($__thousands_sep|0);
 if ($21) {
  $22 = HEAP8[$__grouping>>0]|0;
  $23 = $22 & 1;
  $24 = ($23<<24>>24)==(0);
  if ($24) {
   $27 = $22&255;
   $28 = $27 >>> 1;
   $30 = $28;
  } else {
   $25 = (($__grouping) + 4|0);
   $26 = HEAP32[$25>>2]|0;
   $30 = $26;
  }
  $29 = ($30|0)==(0);
  if (!($29)) {
   $31 = HEAP8[$__in_units>>0]|0;
   $32 = ($31<<24>>24)==(0);
   if ($32) {
    $$0 = -1;
    STACKTOP = sp;return ($$0|0);
   }
   $33 = HEAP32[$__g_end>>2]|0;
   $34 = $33;
   $35 = $__g;
   $36 = (($34) - ($35))|0;
   $37 = ($36|0)<(160);
   if (!($37)) {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
   $38 = HEAP32[$__dc>>2]|0;
   $39 = (($33) + 4|0);
   HEAP32[$__g_end>>2] = $39;
   HEAP32[$33>>2] = $38;
   HEAP32[$__dc>>2] = 0;
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $40 = (($__atoms) + 128|0);
 $$01$i = $__atoms;
 while(1) {
  $43 = HEAP32[$$01$i>>2]|0;
  $44 = ($43|0)==($__ct|0);
  $42 = (($$01$i) + 4|0);
  if ($44) {
   $$0$lcssa$i = $$01$i;
   break;
  }
  $41 = ($42|0)==($40|0);
  if ($41) {
   $$0$lcssa$i = $40;
   break;
  } else {
   $$01$i = $42;
  }
 }
 $45 = $$0$lcssa$i;
 $46 = $__atoms;
 $47 = (($45) - ($46))|0;
 $48 = $47 >> 2;
 $49 = ($47|0)>(124);
 if ($49) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $50 = (4976 + ($48)|0);
 $51 = HEAP8[$50>>0]|0;
 if ((($48|0) == 24) | (($48|0) == 25)) {
  $52 = HEAP32[$__a_end>>2]|0;
  $53 = ($52|0)==($__a|0);
  if (!($53)) {
   $54 = (($52) + -1|0);
   $55 = HEAP8[$54>>0]|0;
   $56 = $55&255;
   $57 = $56 & 95;
   $58 = HEAP8[$__exp>>0]|0;
   $59 = $58&255;
   $60 = $59 & 127;
   $61 = ($57|0)==($60|0);
   if (!($61)) {
    $$0 = -1;
    STACKTOP = sp;return ($$0|0);
   }
  }
  $62 = (($52) + 1|0);
  HEAP32[$__a_end>>2] = $62;
  HEAP8[$52>>0] = $51;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 } else if ((($48|0) == 23) | (($48|0) == 22)) {
  HEAP8[$__exp>>0] = 80;
 } else {
  $63 = $51&255;
  $64 = $63 & 95;
  $65 = HEAP8[$__exp>>0]|0;
  $66 = $65 << 24 >> 24;
  $67 = ($64|0)==($66|0);
  if ($67) {
   $68 = $64 | 128;
   $69 = $68&255;
   HEAP8[$__exp>>0] = $69;
   $70 = HEAP8[$__in_units>>0]|0;
   $71 = ($70<<24>>24)==(0);
   if (!($71)) {
    HEAP8[$__in_units>>0] = 0;
    $72 = HEAP8[$__grouping>>0]|0;
    $73 = $72 & 1;
    $74 = ($73<<24>>24)==(0);
    if ($74) {
     $77 = $72&255;
     $78 = $77 >>> 1;
     $80 = $78;
    } else {
     $75 = (($__grouping) + 4|0);
     $76 = HEAP32[$75>>2]|0;
     $80 = $76;
    }
    $79 = ($80|0)==(0);
    if (!($79)) {
     $81 = HEAP32[$__g_end>>2]|0;
     $82 = $81;
     $83 = $__g;
     $84 = (($82) - ($83))|0;
     $85 = ($84|0)<(160);
     if ($85) {
      $86 = HEAP32[$__dc>>2]|0;
      $87 = (($81) + 4|0);
      HEAP32[$__g_end>>2] = $87;
      HEAP32[$81>>2] = $86;
     }
    }
   }
  }
 }
 $88 = HEAP32[$__a_end>>2]|0;
 $89 = (($88) + 1|0);
 HEAP32[$__a_end>>2] = $89;
 HEAP8[$88>>0] = $51;
 $90 = ($47|0)>(84);
 if ($90) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $91 = HEAP32[$__dc>>2]|0;
 $92 = (($91) + 1)|0;
 HEAP32[$__dc>>2] = $92;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($this|0)==(0|0);
 if (!($0)) {
  _free($this);
 }
 STACKTOP = sp;return;
}
function __ZNSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcb($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = $__v|0;
 var $$0 = 0, $$01 = 0, $$byval_copy = 0, $$ph = 0, $$pre = 0, $$pre$phi6Z2D = 0, $$pre$phi8Z2D = 0, $$pre5 = 0, $$pre7 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $11 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__nm = 0, $__p$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $$byval_copy = sp + 28|0;
 $__p$i$i$i$i = sp;
 $0 = sp + 24|0;
 $__nm = sp + 12|0;
 $1 = (($__iob) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & 1;
 $4 = ($3|0)==(0);
 if ($4) {
  $5 = HEAP32[$this>>2]|0;
  $6 = (($5) + 24|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = HEAP32[$__s>>2]|0;
  HEAP32[$0>>2] = $8;
  $9 = $__v&1;
  ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
  FUNCTION_TABLE_viiiiii[$7 & 511]($agg$result,$this,$$byval_copy,$__iob,$__fl,$9);
  STACKTOP = sp;return;
 }
 $10 = (($__iob) + 28|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($11) + 4|0);
 $13 = HEAP32[$12>>2]|0;HEAP32[$12>>2] = (($13+1)|0);
 $14 = HEAP32[6560>>2]|0;
 $15 = ($14|0)==(-1);
 if ($15) {
  label = 5;
 } else {
  HEAP32[$__p$i$i$i$i>>2] = 6560;
  $16 = (($__p$i$i$i$i) + 4|0);
  HEAP32[$16>>2] = (439);
  $17 = (($__p$i$i$i$i) + 8|0);
  HEAP32[$17>>2] = 0;
  __THREW__ = 0;
  invoke_vii(440,(6560|0),($__p$i$i$i$i|0));
  $18 = __THREW__; __THREW__ = 0;
  $19 = $18&1;
  if (!($19)) {
   label = 5;
  }
 }
 if ((label|0) == 5) {
  $20 = HEAP32[((6560 + 4|0))>>2]|0;
  $21 = (($20) + -1)|0;
  $22 = (($11) + 12|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = (($11) + 8|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = $23;
  $27 = $25;
  $28 = (($26) - ($27))|0;
  $29 = $28 >> 2;
  $30 = ($29>>>0)>($21>>>0);
  if ($30) {
   $31 = (($25) + ($21<<2)|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = ($32|0)==(0|0);
   if (!($33)) {
    $37 = (($11) + 4|0);
    $38 = HEAP32[$37>>2]|0;HEAP32[$37>>2] = (($38+-1)|0);
    $39 = ($38|0)==(0);
    if ($39) {
     $40 = HEAP32[$11>>2]|0;
     $41 = (($40) + 8|0);
     $42 = HEAP32[$41>>2]|0;
     FUNCTION_TABLE_vi[$42 & 511]($11);
    }
    $43 = HEAP32[$32>>2]|0;
    if ($__v) {
     $44 = (($43) + 24|0);
     $45 = HEAP32[$44>>2]|0;
     FUNCTION_TABLE_vii[$45 & 511]($__nm,$32);
    } else {
     $46 = (($43) + 28|0);
     $47 = HEAP32[$46>>2]|0;
     FUNCTION_TABLE_vii[$47 & 511]($__nm,$32);
    }
    $48 = HEAP8[$__nm>>0]|0;
    $49 = $48 & 1;
    $50 = ($49<<24>>24)==(0);
    if ($50) {
     $53 = (($__nm) + 1|0);
     $$pre7 = (($__nm) + 8|0);
     $$ph = $53;$$pre$phi6Z2D = $53;$$pre$phi8Z2D = $$pre7;
    } else {
     $51 = (($__nm) + 8|0);
     $52 = HEAP32[$51>>2]|0;
     $$pre5 = (($__nm) + 1|0);
     $$ph = $52;$$pre$phi6Z2D = $$pre5;$$pre$phi8Z2D = $51;
    }
    $54 = (($__nm) + 4|0);
    $56 = $48;$66 = $$ph;
    L23: while(1) {
     $55 = $56 & 1;
     $57 = ($55<<24>>24)==(0);
     if ($57) {
      $60 = $56&255;
      $61 = $60 >>> 1;
      $63 = $$pre$phi6Z2D;$64 = $61;
     } else {
      $58 = HEAP32[$$pre$phi8Z2D>>2]|0;
      $59 = HEAP32[$54>>2]|0;
      $63 = $58;$64 = $59;
     }
     $62 = (($63) + ($64)|0);
     $65 = ($66|0)==($62|0);
     if ($65) {
      label = 34;
      break;
     }
     $67 = HEAP8[$66>>0]|0;
     $68 = HEAP32[$__s>>2]|0;
     $69 = ($68|0)==(0|0);
     do {
      if (!($69)) {
       $70 = (($68) + 24|0);
       $71 = HEAP32[$70>>2]|0;
       $72 = (($68) + 28|0);
       $73 = HEAP32[$72>>2]|0;
       $74 = ($71|0)==($73|0);
       if (!($74)) {
        $75 = (($71) + 1|0);
        HEAP32[$70>>2] = $75;
        HEAP8[$71>>0] = $67;
        break;
       }
       $76 = HEAP32[$68>>2]|0;
       $77 = (($76) + 52|0);
       $78 = HEAP32[$77>>2]|0;
       $79 = $67&255;
       __THREW__ = 0;
       $80 = (invoke_iii($78|0,($68|0),($79|0))|0);
       $81 = __THREW__; __THREW__ = 0;
       $82 = $81&1;
       if ($82) {
        label = 31;
        break L23;
       }
       $83 = ($80|0)==(-1);
       if ($83) {
        HEAP32[$__s>>2] = 0;
       }
      }
     } while(0);
     $84 = (($66) + 1|0);
     $$pre = HEAP8[$__nm>>0]|0;
     $56 = $$pre;$66 = $84;
    }
    if ((label|0) == 31) {
     $93 = ___cxa_find_matching_catch(-1,-1)|0;
     $94 = tempRet0;
     $95 = HEAP8[$__nm>>0]|0;
     $96 = $95 & 1;
     $97 = ($96<<24>>24)==(0);
     if ($97) {
      $$0 = $93;$$01 = $94;
      ___resumeException($$0|0);
      // unreachable;
     }
     $98 = (($__nm) + 8|0);
     $99 = HEAP32[$98>>2]|0;
     $100 = ($99|0)==(0|0);
     if ($100) {
      $$0 = $93;$$01 = $94;
      ___resumeException($$0|0);
      // unreachable;
     }
     _free($99);
     $$0 = $93;$$01 = $94;
     ___resumeException($$0|0);
     // unreachable;
    }
    else if ((label|0) == 34) {
     $101 = HEAP32[$__s>>2]|0;
     HEAP32[$agg$result>>2] = $101;
     if ($57) {
      STACKTOP = sp;return;
     }
     $102 = (($__nm) + 8|0);
     $103 = HEAP32[$102>>2]|0;
     $104 = ($103|0)==(0|0);
     if ($104) {
      STACKTOP = sp;return;
     }
     _free($103);
     STACKTOP = sp;return;
    }
   }
  }
  $34 = (___cxa_allocate_exception(4)|0);
  HEAP32[$34>>2] = ((14256 + 8|0));
  __THREW__ = 0;
  invoke_viii(379,($34|0),(14336|0),(351|0));
  $35 = __THREW__; __THREW__ = 0;
  $36 = $35&1;
  if (!($36)) {
   // unreachable;
  }
 }
 $85 = ___cxa_find_matching_catch(-1,-1)|0;
 $86 = tempRet0;
 $87 = (($11) + 4|0);
 $88 = HEAP32[$87>>2]|0;HEAP32[$87>>2] = (($88+-1)|0);
 $89 = ($88|0)==(0);
 if (!($89)) {
  $$0 = $85;$$01 = $86;
  ___resumeException($$0|0);
  // unreachable;
 }
 $90 = HEAP32[$11>>2]|0;
 $91 = (($90) + 8|0);
 $92 = HEAP32[$91>>2]|0;
 FUNCTION_TABLE_vi[$92 & 511]($11);
 $$0 = $85;$$01 = $86;
 ___resumeException($$0|0);
 // unreachable;
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcl($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = $__v|0;
 var $$0$i = 0, $$0$i1 = 0, $$13$i$ph = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, $or$cond$i = 0, $scevgep = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $vararg_buffer = sp;
 $__fmt = sp + 52|0;
 $__nar = sp + 40|0;
 $__o = sp + 16|0;
 $__op = sp + 12|0;
 $__oe = sp + 8|0;
 $0 = sp + 4|0;
 ;HEAP8[$__fmt+0>>0]=HEAP8[5224+0>>0]|0;HEAP8[$__fmt+1>>0]=HEAP8[5224+1>>0]|0;HEAP8[$__fmt+2>>0]=HEAP8[5224+2>>0]|0;HEAP8[$__fmt+3>>0]=HEAP8[5224+3>>0]|0;HEAP8[$__fmt+4>>0]=HEAP8[5224+4>>0]|0;HEAP8[$__fmt+5>>0]=HEAP8[5224+5>>0]|0;
 $1 = (($__fmt) + 1|0);
 $2 = (($__iob) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & 2048;
 $5 = ($4|0)==(0);
 if ($5) {
  $$0$i = $1;
 } else {
  $6 = (($__fmt) + 2|0);
  HEAP8[$1>>0] = 43;
  $$0$i = $6;
 }
 $7 = $3 & 512;
 $8 = ($7|0)==(0);
 if ($8) {
  $$13$i$ph = $$0$i;
 } else {
  $9 = (($$0$i) + 1|0);
  HEAP8[$$0$i>>0] = 35;
  $$13$i$ph = $9;
 }
 HEAP8[$$13$i$ph>>0] = 108;
 $scevgep = (($$13$i$ph) + 1|0);
 $10 = $3 & 74;
 do {
  if ((($10|0) == 64)) {
   HEAP8[$scevgep>>0] = 111;
  } else if ((($10|0) == 8)) {
   $11 = $3 & 16384;
   $12 = ($11|0)==(0);
   if ($12) {
    HEAP8[$scevgep>>0] = 120;
    break;
   } else {
    HEAP8[$scevgep>>0] = 88;
    break;
   }
  } else {
   HEAP8[$scevgep>>0] = 100;
  }
 } while(0);
 $13 = HEAP8[6328>>0]|0;
 $14 = ($13<<24>>24)==(0);
 do {
  if ($14) {
   $15 = (___cxa_guard_acquire((6328|0))|0);
   $16 = ($15|0)==(0);
   if (!($16)) {
    __THREW__ = 0;
    $17 = (invoke_iiii(461,2147483647,(6336|0),(0|0))|0);
    $18 = __THREW__; __THREW__ = 0;
    $19 = $18&1;
    if ($19) {
     $20 = ___cxa_find_matching_catch(-1,-1)|0;
     $21 = tempRet0;
     ___cxa_guard_abort((6328|0));
     ___resumeException($20|0);
     // unreachable;
    } else {
     HEAP32[6320>>2] = $17;
     ___cxa_guard_release((6328|0));
     break;
    }
   }
  }
 } while(0);
 $22 = HEAP32[6320>>2]|0;
 HEAP32[$vararg_buffer>>2] = $__v;
 $23 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,12,$22,$__fmt,$vararg_buffer)|0);
 $24 = (($__nar) + ($23)|0);
 $25 = HEAP32[$2>>2]|0;
 $26 = $25 & 176;
 do {
  if ((($26|0) == 32)) {
   $$0$i1 = $24;
  } else if ((($26|0) == 16)) {
   $27 = HEAP8[$__nar>>0]|0;
   if ((($27<<24>>24) == 43) | (($27<<24>>24) == 45)) {
    $28 = (($__nar) + 1|0);
    $$0$i1 = $28;
    break;
   }
   $29 = ($23|0)>(1);
   $30 = ($27<<24>>24)==(48);
   $or$cond$i = $29 & $30;
   if ($or$cond$i) {
    $31 = (($__nar) + 1|0);
    $32 = HEAP8[$31>>0]|0;
    if ((($32<<24>>24) == 88) | (($32<<24>>24) == 120)) {
     $33 = (($__nar) + 2|0);
     $$0$i1 = $33;
    } else {
     label = 22;
    }
   } else {
    label = 22;
   }
  } else {
   label = 22;
  }
 } while(0);
 if ((label|0) == 22) {
  $$0$i1 = $__nar;
 }
 $34 = (($__iob) + 28|0);
 $35 = HEAP32[$34>>2]|0;
 HEAP32[$0>>2] = $35;
 $36 = (($35) + 4|0);
 $37 = HEAP32[$36>>2]|0;HEAP32[$36>>2] = (($37+1)|0);
 __THREW__ = 0;
 invoke_viiiiiii(465,($__nar|0),($$0$i1|0),($24|0),($__o|0),($__op|0),($__oe|0),($0|0));
 $38 = __THREW__; __THREW__ = 0;
 $39 = $38&1;
 if ($39) {
  $50 = ___cxa_find_matching_catch(-1,-1)|0;
  $51 = tempRet0;
  $52 = HEAP32[$0>>2]|0;
  $53 = (($52) + 4|0);
  $54 = HEAP32[$53>>2]|0;HEAP32[$53>>2] = (($54+-1)|0);
  $55 = ($54|0)==(0);
  if (!($55)) {
   ___resumeException($50|0);
   // unreachable;
  }
  $56 = HEAP32[$52>>2]|0;
  $57 = (($56) + 8|0);
  $58 = HEAP32[$57>>2]|0;
  FUNCTION_TABLE_vi[$58 & 511]($52);
  ___resumeException($50|0);
  // unreachable;
 } else {
  $40 = HEAP32[$0>>2]|0;
  $41 = (($40) + 4|0);
  $42 = HEAP32[$41>>2]|0;HEAP32[$41>>2] = (($42+-1)|0);
  $43 = ($42|0)==(0);
  if (!($43)) {
   $47 = HEAP32[$__s>>2]|0;
   $48 = HEAP32[$__op>>2]|0;
   $49 = HEAP32[$__oe>>2]|0;
   __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$47,$__o,$48,$49,$__iob,$__fl);
   STACKTOP = sp;return;
  }
  $44 = HEAP32[$40>>2]|0;
  $45 = (($44) + 8|0);
  $46 = HEAP32[$45>>2]|0;
  FUNCTION_TABLE_vi[$46 & 511]($40);
  $47 = HEAP32[$__s>>2]|0;
  $48 = HEAP32[$__op>>2]|0;
  $49 = HEAP32[$__oe>>2]|0;
  __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$47,$__o,$48,$49,$__iob,$__fl);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__s,$__n,$__l,$__format,$varargs) {
 $__s = $__s|0;
 $__n = $__n|0;
 $__l = $__l|0;
 $__format = $__format|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $__va = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $__va = sp;
 HEAP32[$__va>>2] = $varargs;
 $0 = (_uselocale(($__l|0))|0);
 $1 = (_vsnprintf($__s,$__n,$__format,$__va)|0);
 $2 = ($0|0)==(0|0);
 if ($2) {
  STACKTOP = sp;return ($1|0);
 }
 __THREW__ = 0;
 (invoke_ii(463,($0|0))|0);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $5 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
  $6 = tempRet0;
  ___clang_call_terminate($5);
  // unreachable;
 } else {
  STACKTOP = sp;return ($1|0);
 }
 return 0|0;
}
function __ZNSt3__19__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE($__nb,$__np,$__ne,$__ob,$__op,$__oe,$__loc) {
 $__nb = $__nb|0;
 $__np = $__np|0;
 $__ne = $__ne|0;
 $__ob = $__ob|0;
 $__op = $__op|0;
 $__oe = $__oe|0;
 $__loc = $__loc|0;
 var $$ = 0, $$012$i$i = 0, $$012$i$i10 = 0, $$__dg$0 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__dc$013 = 0, $__dc$1 = 0, $__dg$014 = 0, $__dg$1 = 0, $__grouping = 0, $__nf$0 = 0, $__nf$1 = 0, $__p$015 = 0, $__p$i$i$i$i = 0, $__p$i$i$i$i1 = 0, $lpad$phi$index = 0;
 var $lpad$phi$index5 = 0, $or$cond = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $__p$i$i$i$i1 = sp + 16|0;
 $__p$i$i$i$i = sp;
 $__grouping = sp + 28|0;
 $0 = HEAP32[$__loc>>2]|0;
 $1 = HEAP32[6416>>2]|0;
 $2 = ($1|0)==(-1);
 if (!($2)) {
  HEAP32[$__p$i$i$i$i>>2] = 6416;
  $3 = (($__p$i$i$i$i) + 4|0);
  HEAP32[$3>>2] = (439);
  $4 = (($__p$i$i$i$i) + 8|0);
  HEAP32[$4>>2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(6416,$__p$i$i$i$i);
 }
 $5 = HEAP32[((6416 + 4|0))>>2]|0;
 $6 = (($5) + -1)|0;
 $7 = (($0) + 12|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($0) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $8;
 $12 = $10;
 $13 = (($11) - ($12))|0;
 $14 = $13 >> 2;
 $15 = ($14>>>0)>($6>>>0);
 if (!($15)) {
  $19 = (___cxa_allocate_exception(4)|0);
  HEAP32[$19>>2] = ((14256 + 8|0));
  ___cxa_throw(($19|0),(14336|0),(351|0));
  // unreachable;
 }
 $16 = (($10) + ($6<<2)|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17|0)==(0|0);
 if ($18) {
  $19 = (___cxa_allocate_exception(4)|0);
  HEAP32[$19>>2] = ((14256 + 8|0));
  ___cxa_throw(($19|0),(14336|0),(351|0));
  // unreachable;
 }
 $20 = HEAP32[$__loc>>2]|0;
 $21 = HEAP32[6560>>2]|0;
 $22 = ($21|0)==(-1);
 if (!($22)) {
  HEAP32[$__p$i$i$i$i1>>2] = 6560;
  $23 = (($__p$i$i$i$i1) + 4|0);
  HEAP32[$23>>2] = (439);
  $24 = (($__p$i$i$i$i1) + 8|0);
  HEAP32[$24>>2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(6560,$__p$i$i$i$i1);
 }
 $25 = HEAP32[((6560 + 4|0))>>2]|0;
 $26 = (($25) + -1)|0;
 $27 = (($20) + 12|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = (($20) + 8|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = $28;
 $32 = $30;
 $33 = (($31) - ($32))|0;
 $34 = $33 >> 2;
 $35 = ($34>>>0)>($26>>>0);
 if (!($35)) {
  $39 = (___cxa_allocate_exception(4)|0);
  HEAP32[$39>>2] = ((14256 + 8|0));
  ___cxa_throw(($39|0),(14336|0),(351|0));
  // unreachable;
 }
 $36 = (($30) + ($26<<2)|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = ($37|0)==(0|0);
 if ($38) {
  $39 = (___cxa_allocate_exception(4)|0);
  HEAP32[$39>>2] = ((14256 + 8|0));
  ___cxa_throw(($39|0),(14336|0),(351|0));
  // unreachable;
 }
 $40 = HEAP32[$37>>2]|0;
 $41 = (($40) + 20|0);
 $42 = HEAP32[$41>>2]|0;
 FUNCTION_TABLE_vii[$42 & 511]($__grouping,$37);
 $43 = HEAP8[$__grouping>>0]|0;
 $44 = $43 & 1;
 $45 = ($44<<24>>24)==(0);
 if ($45) {
  $48 = $43&255;
  $49 = $48 >>> 1;
  $51 = $49;
 } else {
  $46 = (($__grouping) + 4|0);
  $47 = HEAP32[$46>>2]|0;
  $51 = $47;
 }
 $50 = ($51|0)==(0);
 L23: do {
  if ($50) {
   $52 = HEAP32[$17>>2]|0;
   $53 = (($52) + 32|0);
   $54 = HEAP32[$53>>2]|0;
   __THREW__ = 0;
   (invoke_iiiii($54|0,($17|0),($__nb|0),($__ne|0),($__ob|0))|0);
   $55 = __THREW__; __THREW__ = 0;
   $56 = $55&1;
   if ($56) {
    label = 18;
   } else {
    $57 = $__ne;
    $58 = $__nb;
    $59 = (($57) - ($58))|0;
    $60 = (($__ob) + ($59)|0);
    HEAP32[$__oe>>2] = $60;
    label = 48;
   }
  } else {
   HEAP32[$__oe>>2] = $__ob;
   $71 = HEAP8[$__nb>>0]|0;
   if ((($71<<24>>24) == 43) | (($71<<24>>24) == 45)) {
    $72 = HEAP32[$17>>2]|0;
    $73 = (($72) + 28|0);
    $74 = HEAP32[$73>>2]|0;
    __THREW__ = 0;
    $75 = (invoke_iii($74|0,($17|0),($71|0))|0);
    $76 = __THREW__; __THREW__ = 0;
    $77 = $76&1;
    if ($77) {
     label = 18;
     break;
    }
    $78 = (($__nb) + 1|0);
    $79 = HEAP32[$__oe>>2]|0;
    $80 = (($79) + 1|0);
    HEAP32[$__oe>>2] = $80;
    HEAP8[$79>>0] = $75;
    $__nf$0 = $78;
   } else {
    $__nf$0 = $__nb;
   }
   $81 = $__ne;
   $82 = $__nf$0;
   $83 = (($81) - ($82))|0;
   $84 = ($83|0)>(1);
   if ($84) {
    $85 = HEAP8[$__nf$0>>0]|0;
    $86 = ($85<<24>>24)==(48);
    if ($86) {
     $87 = (($__nf$0) + 1|0);
     $88 = HEAP8[$87>>0]|0;
     if ((($88<<24>>24) == 88) | (($88<<24>>24) == 120)) {
      $89 = HEAP32[$17>>2]|0;
      $90 = (($89) + 28|0);
      $91 = HEAP32[$90>>2]|0;
      __THREW__ = 0;
      $92 = (invoke_iii($91|0,($17|0),48)|0);
      $93 = __THREW__; __THREW__ = 0;
      $94 = $93&1;
      if ($94) {
       label = 18;
       break;
      }
      $95 = HEAP32[$__oe>>2]|0;
      $96 = (($95) + 1|0);
      HEAP32[$__oe>>2] = $96;
      HEAP8[$95>>0] = $92;
      $97 = HEAP8[$87>>0]|0;
      $98 = HEAP32[$17>>2]|0;
      $99 = (($98) + 28|0);
      $100 = HEAP32[$99>>2]|0;
      __THREW__ = 0;
      $101 = (invoke_iii($100|0,($17|0),($97|0))|0);
      $102 = __THREW__; __THREW__ = 0;
      $103 = $102&1;
      if ($103) {
       label = 18;
       break;
      }
      $104 = (($__nf$0) + 2|0);
      $105 = HEAP32[$__oe>>2]|0;
      $106 = (($105) + 1|0);
      HEAP32[$__oe>>2] = $106;
      HEAP8[$105>>0] = $101;
      $__nf$1 = $104;
     } else {
      $__nf$1 = $__nf$0;
     }
    } else {
     $__nf$1 = $__nf$0;
    }
   } else {
    $__nf$1 = $__nf$0;
   }
   $107 = ($__nf$1|0)==($__ne|0);
   if (!($107)) {
    $108 = (($__ne) + -1|0);
    $109 = ($108>>>0)>($__nf$1>>>0);
    if ($109) {
     $$012$i$i = $__nf$1;$112 = $108;
     while(1) {
      $110 = HEAP8[$$012$i$i>>0]|0;
      $111 = HEAP8[$112>>0]|0;
      HEAP8[$$012$i$i>>0] = $111;
      HEAP8[$112>>0] = $110;
      $113 = (($$012$i$i) + 1|0);
      $114 = (($112) + -1|0);
      $115 = ($113>>>0)<($114>>>0);
      if ($115) {
       $$012$i$i = $113;$112 = $114;
      } else {
       break;
      }
     }
    }
   }
   $116 = HEAP32[$37>>2]|0;
   $117 = (($116) + 16|0);
   $118 = HEAP32[$117>>2]|0;
   __THREW__ = 0;
   $119 = (invoke_ii($118|0,($37|0))|0);
   $120 = __THREW__; __THREW__ = 0;
   $121 = $120&1;
   if ($121) {
    label = 18;
   } else {
    $122 = ($__nf$1>>>0)<($__ne>>>0);
    L42: do {
     if ($122) {
      $123 = (($__grouping) + 1|0);
      $124 = (($__grouping) + 4|0);
      $125 = (($__grouping) + 8|0);
      $__dc$013 = 0;$__dg$014 = 0;$__p$015 = $__nf$1;
      while(1) {
       $126 = HEAP8[$__grouping>>0]|0;
       $127 = $126 & 1;
       $128 = ($127<<24>>24)==(0);
       $129 = HEAP32[$125>>2]|0;
       $$ = $128 ? $123 : $129;
       $130 = (($$) + ($__dg$014)|0);
       $131 = HEAP8[$130>>0]|0;
       $132 = ($131<<24>>24)!=(0);
       $133 = $131 << 24 >> 24;
       $134 = ($__dc$013|0)==($133|0);
       $or$cond = $132 & $134;
       if ($or$cond) {
        $135 = HEAP32[$__oe>>2]|0;
        $136 = (($135) + 1|0);
        HEAP32[$__oe>>2] = $136;
        HEAP8[$135>>0] = $119;
        $137 = HEAP8[$__grouping>>0]|0;
        $138 = $137 & 1;
        $139 = ($138<<24>>24)==(0);
        if ($139) {
         $141 = $137&255;
         $142 = $141 >>> 1;
         $144 = $142;
        } else {
         $140 = HEAP32[$124>>2]|0;
         $144 = $140;
        }
        $143 = (($144) + -1)|0;
        $145 = ($__dg$014>>>0)<($143>>>0);
        $146 = $145&1;
        $$__dg$0 = (($146) + ($__dg$014))|0;
        $__dc$1 = 0;$__dg$1 = $$__dg$0;
       } else {
        $__dc$1 = $__dc$013;$__dg$1 = $__dg$014;
       }
       $147 = HEAP8[$__p$015>>0]|0;
       $148 = HEAP32[$17>>2]|0;
       $149 = (($148) + 28|0);
       $150 = HEAP32[$149>>2]|0;
       __THREW__ = 0;
       $151 = (invoke_iii($150|0,($17|0),($147|0))|0);
       $152 = __THREW__; __THREW__ = 0;
       $153 = $152&1;
       if ($153) {
        break;
       }
       $154 = HEAP32[$__oe>>2]|0;
       $155 = (($154) + 1|0);
       HEAP32[$__oe>>2] = $155;
       HEAP8[$154>>0] = $151;
       $156 = (($__dc$1) + 1)|0;
       $157 = (($__p$015) + 1|0);
       $158 = ($157>>>0)<($__ne>>>0);
       if ($158) {
        $__dc$013 = $156;$__dg$014 = $__dg$1;$__p$015 = $157;
       } else {
        break L42;
       }
      }
      $61 = ___cxa_find_matching_catch(-1,-1)|0;
      $62 = tempRet0;
      $lpad$phi$index = $61;$lpad$phi$index5 = $62;
      break L23;
     }
    } while(0);
    $159 = $__nf$1;
    $160 = $__nb;
    $161 = (($159) - ($160))|0;
    $162 = (($__ob) + ($161)|0);
    $163 = HEAP32[$__oe>>2]|0;
    $164 = ($162|0)==($163|0);
    if ($164) {
     label = 48;
    } else {
     $165 = (($163) + -1|0);
     $166 = ($165>>>0)>($162>>>0);
     if ($166) {
      $$012$i$i10 = $162;$169 = $165;
      while(1) {
       $167 = HEAP8[$$012$i$i10>>0]|0;
       $168 = HEAP8[$169>>0]|0;
       HEAP8[$$012$i$i10>>0] = $168;
       HEAP8[$169>>0] = $167;
       $170 = (($$012$i$i10) + 1|0);
       $171 = (($169) + -1|0);
       $172 = ($170>>>0)<($171>>>0);
       if ($172) {
        $$012$i$i10 = $170;$169 = $171;
       } else {
        label = 48;
        break;
       }
      }
     } else {
      label = 48;
     }
    }
   }
  }
 } while(0);
 if ((label|0) == 18) {
  $63 = ___cxa_find_matching_catch(-1,-1)|0;
  $64 = tempRet0;
  $lpad$phi$index = $63;$lpad$phi$index5 = $64;
 }
 else if ((label|0) == 48) {
  $173 = ($__np|0)==($__ne|0);
  if ($173) {
   $174 = HEAP32[$__oe>>2]|0;
   $storemerge = $174;
  } else {
   $175 = $__np;
   $176 = $__nb;
   $177 = (($175) - ($176))|0;
   $178 = (($__ob) + ($177)|0);
   $storemerge = $178;
  }
  HEAP32[$__op>>2] = $storemerge;
  $179 = HEAP8[$__grouping>>0]|0;
  $180 = $179 & 1;
  $181 = ($180<<24>>24)==(0);
  if ($181) {
   STACKTOP = sp;return;
  }
  $182 = (($__grouping) + 8|0);
  $183 = HEAP32[$182>>2]|0;
  $184 = ($183|0)==(0|0);
  if ($184) {
   STACKTOP = sp;return;
  }
  _free($183);
  STACKTOP = sp;return;
 }
 $65 = HEAP8[$__grouping>>0]|0;
 $66 = $65 & 1;
 $67 = ($66<<24>>24)==(0);
 if ($67) {
  ___resumeException($lpad$phi$index|0);
  // unreachable;
 }
 $68 = (($__grouping) + 8|0);
 $69 = HEAP32[$68>>2]|0;
 $70 = ($69|0)==(0|0);
 if ($70) {
  ___resumeException($lpad$phi$index|0);
  // unreachable;
 }
 _free($69);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$__s$0,$__ob,$__op,$__oe,$__iob,$__fl) {
 $agg$result = $agg$result|0;
 $__s$0 = $__s$0|0;
 $__ob = $__ob|0;
 $__op = $__op|0;
 $__oe = $__oe|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 var $$pre$phiZ2D = 0, $$size$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $9 = 0, $__ns$0 = 0, $__p$0$i = 0, $__sp = 0, $lpad$phi$i$index = 0, $lpad$phi$i$index2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $__sp = sp;
 $0 = ($__s$0|0)==(0|0);
 if ($0) {
  HEAP32[$agg$result>>2] = 0;
  STACKTOP = sp;return;
 }
 $1 = $__oe;
 $2 = $__ob;
 $3 = (($1) - ($2))|0;
 $4 = (($__iob) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)>($3|0);
 $7 = (($5) - ($3))|0;
 $__ns$0 = $6 ? $7 : 0;
 $8 = $__op;
 $9 = (($8) - ($2))|0;
 $10 = ($9|0)>(0);
 if ($10) {
  $11 = HEAP32[$__s$0>>2]|0;
  $12 = (($11) + 48|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (FUNCTION_TABLE_iiii[$13 & 511]($__s$0,$__ob,$9)|0);
  $15 = ($14|0)==($9|0);
  if (!($15)) {
   HEAP32[$agg$result>>2] = 0;
   STACKTOP = sp;return;
  }
 }
 $16 = ($__ns$0|0)>(0);
 do {
  if ($16) {
   $17 = ($__ns$0>>>0)<(11);
   L12: do {
    if ($17) {
     $18 = $__ns$0 << 1;
     $19 = $18&255;
     HEAP8[$__sp>>0] = $19;
     $20 = (($__sp) + 1|0);
     $$pre$phiZ2D = $__sp;$__p$0$i = $20;
    } else {
     $21 = (($__ns$0) + 16)|0;
     $22 = $21 & -16;
     $23 = ($22|0)==(0);
     $$size$i = $23 ? 1 : $22;
     while(1) {
      $24 = (_malloc($$size$i)|0);
      $25 = ($24|0)==(0|0);
      if (!($25)) {
       label = 20;
       break;
      }
      $26 = HEAP32[15648>>2]|0;HEAP32[15648>>2] = (($26+0)|0);
      $27 = ($26|0)==(0);
      if ($27) {
       label = 17;
       break;
      }
      $28 = $26;
      __THREW__ = 0;
      invoke_v($28|0);
      $29 = __THREW__; __THREW__ = 0;
      $30 = $29&1;
      if ($30) {
       label = 13;
       break;
      }
     }
     do {
      if ((label|0) == 13) {
       $31 = ___cxa_find_matching_catch(-1,-1,15712|0)|0;
       $32 = tempRet0;
       $lpad$phi$i$index = $31;$lpad$phi$i$index2 = $32;
      }
      else if ((label|0) == 17) {
       $36 = (___cxa_allocate_exception(4)|0);
       HEAP32[$36>>2] = ((15656 + 8|0));
       __THREW__ = 0;
       invoke_viii(379,($36|0),(15712|0),(374|0));
       $37 = __THREW__; __THREW__ = 0;
       $38 = $37&1;
       if ($38) {
        $33 = ___cxa_find_matching_catch(-1,-1,15712|0)|0;
        $34 = tempRet0;
        $lpad$phi$i$index = $33;$lpad$phi$i$index2 = $34;
        break;
       } else {
        // unreachable;
       }
      }
      else if ((label|0) == 20) {
       $39 = (($__sp) + 8|0);
       HEAP32[$39>>2] = $24;
       $40 = $22 | 1;
       HEAP32[$__sp>>2] = $40;
       $41 = (($__sp) + 4|0);
       HEAP32[$41>>2] = $__ns$0;
       $$pre$phiZ2D = $__sp;$__p$0$i = $24;
       break L12;
      }
     } while(0);
     $35 = ($lpad$phi$i$index2|0)<(0);
     if ($35) {
      ___cxa_call_unexpected(($lpad$phi$i$index|0));
      // unreachable;
     } else {
      ___resumeException($lpad$phi$i$index|0);
      // unreachable;
     }
    }
   } while(0);
   _memset(($__p$0$i|0),($__fl|0),($__ns$0|0))|0;
   $42 = (($__p$0$i) + ($__ns$0)|0);
   HEAP8[$42>>0] = 0;
   $43 = HEAP8[$$pre$phiZ2D>>0]|0;
   $44 = $43 & 1;
   $45 = ($44<<24>>24)==(0);
   if ($45) {
    $48 = (($__sp) + 1|0);
    $52 = $48;
   } else {
    $46 = (($__sp) + 8|0);
    $47 = HEAP32[$46>>2]|0;
    $52 = $47;
   }
   $49 = HEAP32[$__s$0>>2]|0;
   $50 = (($49) + 48|0);
   $51 = HEAP32[$50>>2]|0;
   __THREW__ = 0;
   $53 = (invoke_iiii($51|0,($__s$0|0),($52|0),($__ns$0|0))|0);
   $54 = __THREW__; __THREW__ = 0;
   $55 = $54&1;
   if ($55) {
    $63 = ___cxa_find_matching_catch(-1,-1)|0;
    $64 = tempRet0;
    $65 = HEAP8[$$pre$phiZ2D>>0]|0;
    $66 = $65 & 1;
    $67 = ($66<<24>>24)==(0);
    if ($67) {
     ___resumeException($63|0);
     // unreachable;
    }
    $68 = (($__sp) + 8|0);
    $69 = HEAP32[$68>>2]|0;
    $70 = ($69|0)==(0|0);
    if ($70) {
     ___resumeException($63|0);
     // unreachable;
    }
    _free($69);
    ___resumeException($63|0);
    // unreachable;
   }
   $56 = ($53|0)==($__ns$0|0);
   if ($56) {
    $71 = HEAP8[$$pre$phiZ2D>>0]|0;
    $72 = $71 & 1;
    $73 = ($72<<24>>24)==(0);
    if ($73) {
     break;
    }
    $74 = (($__sp) + 8|0);
    $75 = HEAP32[$74>>2]|0;
    $76 = ($75|0)==(0|0);
    if ($76) {
     break;
    }
    _free($75);
    break;
   }
   HEAP32[$agg$result>>2] = 0;
   $57 = HEAP8[$$pre$phiZ2D>>0]|0;
   $58 = $57 & 1;
   $59 = ($58<<24>>24)==(0);
   if ($59) {
    STACKTOP = sp;return;
   }
   $60 = (($__sp) + 8|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = ($61|0)==(0|0);
   if ($62) {
    STACKTOP = sp;return;
   }
   _free($61);
   STACKTOP = sp;return;
  }
 } while(0);
 $77 = (($1) - ($8))|0;
 $78 = ($77|0)>(0);
 if ($78) {
  $79 = HEAP32[$__s$0>>2]|0;
  $80 = (($79) + 48|0);
  $81 = HEAP32[$80>>2]|0;
  $82 = (FUNCTION_TABLE_iiii[$81 & 511]($__s$0,$__op,$77)|0);
  $83 = ($82|0)==($77|0);
  if (!($83)) {
   HEAP32[$agg$result>>2] = 0;
   STACKTOP = sp;return;
  }
 }
 HEAP32[$4>>2] = 0;
 HEAP32[$agg$result>>2] = $__s$0;
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcx($agg$result,$this,$__s,$__iob,$__fl,$0,$1) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i = 0, $$0$i1 = 0, $$13$i$ph = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, $lftr$limit = 0, $or$cond$i = 0, $vararg_buffer = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0;
 $vararg_buffer = sp + 8|0;
 $__fmt = sp;
 $__nar = sp + 70|0;
 $__o = sp + 28|0;
 $__op = sp + 24|0;
 $__oe = sp + 20|0;
 $2 = sp + 16|0;
 $3 = $__fmt;
 $4 = $3;
 HEAP32[$4>>2] = 37;
 $5 = (($3) + 4)|0;
 $6 = $5;
 HEAP32[$6>>2] = 0;
 $7 = (($__fmt) + 1|0);
 $8 = (($__iob) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $9 & 2048;
 $11 = ($10|0)==(0);
 if ($11) {
  $$0$i = $7;
 } else {
  $12 = (($__fmt) + 2|0);
  HEAP8[$7>>0] = 43;
  $$0$i = $12;
 }
 $13 = $9 & 512;
 $14 = ($13|0)==(0);
 if ($14) {
  $$13$i$ph = $$0$i;
 } else {
  $15 = (($$0$i) + 1|0);
  HEAP8[$$0$i>>0] = 35;
  $$13$i$ph = $15;
 }
 $lftr$limit = (($$13$i$ph) + 2|0);
 $16 = (($$13$i$ph) + 1|0);
 HEAP8[$$13$i$ph>>0] = 108;
 HEAP8[$16>>0] = 108;
 $17 = $9 & 74;
 do {
  if ((($17|0) == 64)) {
   HEAP8[$lftr$limit>>0] = 111;
  } else if ((($17|0) == 8)) {
   $18 = $9 & 16384;
   $19 = ($18|0)==(0);
   if ($19) {
    HEAP8[$lftr$limit>>0] = 120;
    break;
   } else {
    HEAP8[$lftr$limit>>0] = 88;
    break;
   }
  } else {
   HEAP8[$lftr$limit>>0] = 100;
  }
 } while(0);
 $20 = HEAP8[6328>>0]|0;
 $21 = ($20<<24>>24)==(0);
 do {
  if ($21) {
   $22 = (___cxa_guard_acquire((6328|0))|0);
   $23 = ($22|0)==(0);
   if (!($23)) {
    __THREW__ = 0;
    $24 = (invoke_iiii(461,2147483647,(6336|0),(0|0))|0);
    $25 = __THREW__; __THREW__ = 0;
    $26 = $25&1;
    if ($26) {
     $27 = ___cxa_find_matching_catch(-1,-1)|0;
     $28 = tempRet0;
     ___cxa_guard_abort((6328|0));
     ___resumeException($27|0);
     // unreachable;
    } else {
     HEAP32[6320>>2] = $24;
     ___cxa_guard_release((6328|0));
     break;
    }
   }
  }
 } while(0);
 $29 = HEAP32[6320>>2]|0;
 $30 = $vararg_buffer;
 $31 = $30;
 HEAP32[$31>>2] = $0;
 $32 = (($30) + 4)|0;
 $33 = $32;
 HEAP32[$33>>2] = $1;
 $34 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,22,$29,$__fmt,$vararg_buffer)|0);
 $35 = (($__nar) + ($34)|0);
 $36 = HEAP32[$8>>2]|0;
 $37 = $36 & 176;
 do {
  if ((($37|0) == 32)) {
   $$0$i1 = $35;
  } else if ((($37|0) == 16)) {
   $38 = HEAP8[$__nar>>0]|0;
   if ((($38<<24>>24) == 43) | (($38<<24>>24) == 45)) {
    $39 = (($__nar) + 1|0);
    $$0$i1 = $39;
    break;
   }
   $40 = ($34|0)>(1);
   $41 = ($38<<24>>24)==(48);
   $or$cond$i = $40 & $41;
   if ($or$cond$i) {
    $42 = (($__nar) + 1|0);
    $43 = HEAP8[$42>>0]|0;
    if ((($43<<24>>24) == 88) | (($43<<24>>24) == 120)) {
     $44 = (($__nar) + 2|0);
     $$0$i1 = $44;
    } else {
     label = 22;
    }
   } else {
    label = 22;
   }
  } else {
   label = 22;
  }
 } while(0);
 if ((label|0) == 22) {
  $$0$i1 = $__nar;
 }
 $45 = (($__iob) + 28|0);
 $46 = HEAP32[$45>>2]|0;
 HEAP32[$2>>2] = $46;
 $47 = (($46) + 4|0);
 $48 = HEAP32[$47>>2]|0;HEAP32[$47>>2] = (($48+1)|0);
 __THREW__ = 0;
 invoke_viiiiiii(465,($__nar|0),($$0$i1|0),($35|0),($__o|0),($__op|0),($__oe|0),($2|0));
 $49 = __THREW__; __THREW__ = 0;
 $50 = $49&1;
 if ($50) {
  $61 = ___cxa_find_matching_catch(-1,-1)|0;
  $62 = tempRet0;
  $63 = HEAP32[$2>>2]|0;
  $64 = (($63) + 4|0);
  $65 = HEAP32[$64>>2]|0;HEAP32[$64>>2] = (($65+-1)|0);
  $66 = ($65|0)==(0);
  if (!($66)) {
   ___resumeException($61|0);
   // unreachable;
  }
  $67 = HEAP32[$63>>2]|0;
  $68 = (($67) + 8|0);
  $69 = HEAP32[$68>>2]|0;
  FUNCTION_TABLE_vi[$69 & 511]($63);
  ___resumeException($61|0);
  // unreachable;
 } else {
  $51 = HEAP32[$2>>2]|0;
  $52 = (($51) + 4|0);
  $53 = HEAP32[$52>>2]|0;HEAP32[$52>>2] = (($53+-1)|0);
  $54 = ($53|0)==(0);
  if (!($54)) {
   $58 = HEAP32[$__s>>2]|0;
   $59 = HEAP32[$__op>>2]|0;
   $60 = HEAP32[$__oe>>2]|0;
   __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$58,$__o,$59,$60,$__iob,$__fl);
   STACKTOP = sp;return;
  }
  $55 = HEAP32[$51>>2]|0;
  $56 = (($55) + 8|0);
  $57 = HEAP32[$56>>2]|0;
  FUNCTION_TABLE_vi[$57 & 511]($51);
  $58 = HEAP32[$__s>>2]|0;
  $59 = HEAP32[$__op>>2]|0;
  $60 = HEAP32[$__oe>>2]|0;
  __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$58,$__o,$59,$60,$__iob,$__fl);
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcm($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = $__v|0;
 var $$0$i = 0, $$0$i1 = 0, $$13$i$ph = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, $or$cond$i = 0, $scevgep = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $vararg_buffer = sp;
 $__fmt = sp + 52|0;
 $__nar = sp + 40|0;
 $__o = sp + 16|0;
 $__op = sp + 12|0;
 $__oe = sp + 8|0;
 $0 = sp + 4|0;
 ;HEAP8[$__fmt+0>>0]=HEAP8[5224+0>>0]|0;HEAP8[$__fmt+1>>0]=HEAP8[5224+1>>0]|0;HEAP8[$__fmt+2>>0]=HEAP8[5224+2>>0]|0;HEAP8[$__fmt+3>>0]=HEAP8[5224+3>>0]|0;HEAP8[$__fmt+4>>0]=HEAP8[5224+4>>0]|0;HEAP8[$__fmt+5>>0]=HEAP8[5224+5>>0]|0;
 $1 = (($__fmt) + 1|0);
 $2 = (($__iob) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & 2048;
 $5 = ($4|0)==(0);
 if ($5) {
  $$0$i = $1;
 } else {
  $6 = (($__fmt) + 2|0);
  HEAP8[$1>>0] = 43;
  $$0$i = $6;
 }
 $7 = $3 & 512;
 $8 = ($7|0)==(0);
 if ($8) {
  $$13$i$ph = $$0$i;
 } else {
  $9 = (($$0$i) + 1|0);
  HEAP8[$$0$i>>0] = 35;
  $$13$i$ph = $9;
 }
 HEAP8[$$13$i$ph>>0] = 108;
 $scevgep = (($$13$i$ph) + 1|0);
 $10 = $3 & 74;
 do {
  if ((($10|0) == 64)) {
   HEAP8[$scevgep>>0] = 111;
  } else if ((($10|0) == 8)) {
   $11 = $3 & 16384;
   $12 = ($11|0)==(0);
   if ($12) {
    HEAP8[$scevgep>>0] = 120;
    break;
   } else {
    HEAP8[$scevgep>>0] = 88;
    break;
   }
  } else {
   HEAP8[$scevgep>>0] = 117;
  }
 } while(0);
 $13 = HEAP8[6328>>0]|0;
 $14 = ($13<<24>>24)==(0);
 do {
  if ($14) {
   $15 = (___cxa_guard_acquire((6328|0))|0);
   $16 = ($15|0)==(0);
   if (!($16)) {
    __THREW__ = 0;
    $17 = (invoke_iiii(461,2147483647,(6336|0),(0|0))|0);
    $18 = __THREW__; __THREW__ = 0;
    $19 = $18&1;
    if ($19) {
     $20 = ___cxa_find_matching_catch(-1,-1)|0;
     $21 = tempRet0;
     ___cxa_guard_abort((6328|0));
     ___resumeException($20|0);
     // unreachable;
    } else {
     HEAP32[6320>>2] = $17;
     ___cxa_guard_release((6328|0));
     break;
    }
   }
  }
 } while(0);
 $22 = HEAP32[6320>>2]|0;
 HEAP32[$vararg_buffer>>2] = $__v;
 $23 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,12,$22,$__fmt,$vararg_buffer)|0);
 $24 = (($__nar) + ($23)|0);
 $25 = HEAP32[$2>>2]|0;
 $26 = $25 & 176;
 do {
  if ((($26|0) == 16)) {
   $27 = HEAP8[$__nar>>0]|0;
   if ((($27<<24>>24) == 43) | (($27<<24>>24) == 45)) {
    $28 = (($__nar) + 1|0);
    $$0$i1 = $28;
    break;
   }
   $29 = ($23|0)>(1);
   $30 = ($27<<24>>24)==(48);
   $or$cond$i = $29 & $30;
   if ($or$cond$i) {
    $31 = (($__nar) + 1|0);
    $32 = HEAP8[$31>>0]|0;
    if ((($32<<24>>24) == 88) | (($32<<24>>24) == 120)) {
     $33 = (($__nar) + 2|0);
     $$0$i1 = $33;
    } else {
     label = 22;
    }
   } else {
    label = 22;
   }
  } else if ((($26|0) == 32)) {
   $$0$i1 = $24;
  } else {
   label = 22;
  }
 } while(0);
 if ((label|0) == 22) {
  $$0$i1 = $__nar;
 }
 $34 = (($__iob) + 28|0);
 $35 = HEAP32[$34>>2]|0;
 HEAP32[$0>>2] = $35;
 $36 = (($35) + 4|0);
 $37 = HEAP32[$36>>2]|0;HEAP32[$36>>2] = (($37+1)|0);
 __THREW__ = 0;
 invoke_viiiiiii(465,($__nar|0),($$0$i1|0),($24|0),($__o|0),($__op|0),($__oe|0),($0|0));
 $38 = __THREW__; __THREW__ = 0;
 $39 = $38&1;
 if ($39) {
  $50 = ___cxa_find_matching_catch(-1,-1)|0;
  $51 = tempRet0;
  $52 = HEAP32[$0>>2]|0;
  $53 = (($52) + 4|0);
  $54 = HEAP32[$53>>2]|0;HEAP32[$53>>2] = (($54+-1)|0);
  $55 = ($54|0)==(0);
  if (!($55)) {
   ___resumeException($50|0);
   // unreachable;
  }
  $56 = HEAP32[$52>>2]|0;
  $57 = (($56) + 8|0);
  $58 = HEAP32[$57>>2]|0;
  FUNCTION_TABLE_vi[$58 & 511]($52);
  ___resumeException($50|0);
  // unreachable;
 } else {
  $40 = HEAP32[$0>>2]|0;
  $41 = (($40) + 4|0);
  $42 = HEAP32[$41>>2]|0;HEAP32[$41>>2] = (($42+-1)|0);
  $43 = ($42|0)==(0);
  if (!($43)) {
   $47 = HEAP32[$__s>>2]|0;
   $48 = HEAP32[$__op>>2]|0;
   $49 = HEAP32[$__oe>>2]|0;
   __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$47,$__o,$48,$49,$__iob,$__fl);
   STACKTOP = sp;return;
  }
  $44 = HEAP32[$40>>2]|0;
  $45 = (($44) + 8|0);
  $46 = HEAP32[$45>>2]|0;
  FUNCTION_TABLE_vi[$46 & 511]($40);
  $47 = HEAP32[$__s>>2]|0;
  $48 = HEAP32[$__op>>2]|0;
  $49 = HEAP32[$__oe>>2]|0;
  __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$47,$__o,$48,$49,$__iob,$__fl);
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcy($agg$result,$this,$__s,$__iob,$__fl,$0,$1) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i = 0, $$0$i1 = 0, $$13$i$ph = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, $lftr$limit = 0, $or$cond$i = 0, $vararg_buffer = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0;
 $vararg_buffer = sp + 8|0;
 $__fmt = sp;
 $__nar = sp + 71|0;
 $__o = sp + 28|0;
 $__op = sp + 24|0;
 $__oe = sp + 20|0;
 $2 = sp + 16|0;
 $3 = $__fmt;
 $4 = $3;
 HEAP32[$4>>2] = 37;
 $5 = (($3) + 4)|0;
 $6 = $5;
 HEAP32[$6>>2] = 0;
 $7 = (($__fmt) + 1|0);
 $8 = (($__iob) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $9 & 2048;
 $11 = ($10|0)==(0);
 if ($11) {
  $$0$i = $7;
 } else {
  $12 = (($__fmt) + 2|0);
  HEAP8[$7>>0] = 43;
  $$0$i = $12;
 }
 $13 = $9 & 512;
 $14 = ($13|0)==(0);
 if ($14) {
  $$13$i$ph = $$0$i;
 } else {
  $15 = (($$0$i) + 1|0);
  HEAP8[$$0$i>>0] = 35;
  $$13$i$ph = $15;
 }
 $lftr$limit = (($$13$i$ph) + 2|0);
 $16 = (($$13$i$ph) + 1|0);
 HEAP8[$$13$i$ph>>0] = 108;
 HEAP8[$16>>0] = 108;
 $17 = $9 & 74;
 do {
  if ((($17|0) == 64)) {
   HEAP8[$lftr$limit>>0] = 111;
  } else if ((($17|0) == 8)) {
   $18 = $9 & 16384;
   $19 = ($18|0)==(0);
   if ($19) {
    HEAP8[$lftr$limit>>0] = 120;
    break;
   } else {
    HEAP8[$lftr$limit>>0] = 88;
    break;
   }
  } else {
   HEAP8[$lftr$limit>>0] = 117;
  }
 } while(0);
 $20 = HEAP8[6328>>0]|0;
 $21 = ($20<<24>>24)==(0);
 do {
  if ($21) {
   $22 = (___cxa_guard_acquire((6328|0))|0);
   $23 = ($22|0)==(0);
   if (!($23)) {
    __THREW__ = 0;
    $24 = (invoke_iiii(461,2147483647,(6336|0),(0|0))|0);
    $25 = __THREW__; __THREW__ = 0;
    $26 = $25&1;
    if ($26) {
     $27 = ___cxa_find_matching_catch(-1,-1)|0;
     $28 = tempRet0;
     ___cxa_guard_abort((6328|0));
     ___resumeException($27|0);
     // unreachable;
    } else {
     HEAP32[6320>>2] = $24;
     ___cxa_guard_release((6328|0));
     break;
    }
   }
  }
 } while(0);
 $29 = HEAP32[6320>>2]|0;
 $30 = $vararg_buffer;
 $31 = $30;
 HEAP32[$31>>2] = $0;
 $32 = (($30) + 4)|0;
 $33 = $32;
 HEAP32[$33>>2] = $1;
 $34 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,23,$29,$__fmt,$vararg_buffer)|0);
 $35 = (($__nar) + ($34)|0);
 $36 = HEAP32[$8>>2]|0;
 $37 = $36 & 176;
 do {
  if ((($37|0) == 16)) {
   $38 = HEAP8[$__nar>>0]|0;
   if ((($38<<24>>24) == 43) | (($38<<24>>24) == 45)) {
    $39 = (($__nar) + 1|0);
    $$0$i1 = $39;
    break;
   }
   $40 = ($34|0)>(1);
   $41 = ($38<<24>>24)==(48);
   $or$cond$i = $40 & $41;
   if ($or$cond$i) {
    $42 = (($__nar) + 1|0);
    $43 = HEAP8[$42>>0]|0;
    if ((($43<<24>>24) == 88) | (($43<<24>>24) == 120)) {
     $44 = (($__nar) + 2|0);
     $$0$i1 = $44;
    } else {
     label = 22;
    }
   } else {
    label = 22;
   }
  } else if ((($37|0) == 32)) {
   $$0$i1 = $35;
  } else {
   label = 22;
  }
 } while(0);
 if ((label|0) == 22) {
  $$0$i1 = $__nar;
 }
 $45 = (($__iob) + 28|0);
 $46 = HEAP32[$45>>2]|0;
 HEAP32[$2>>2] = $46;
 $47 = (($46) + 4|0);
 $48 = HEAP32[$47>>2]|0;HEAP32[$47>>2] = (($48+1)|0);
 __THREW__ = 0;
 invoke_viiiiiii(465,($__nar|0),($$0$i1|0),($35|0),($__o|0),($__op|0),($__oe|0),($2|0));
 $49 = __THREW__; __THREW__ = 0;
 $50 = $49&1;
 if ($50) {
  $61 = ___cxa_find_matching_catch(-1,-1)|0;
  $62 = tempRet0;
  $63 = HEAP32[$2>>2]|0;
  $64 = (($63) + 4|0);
  $65 = HEAP32[$64>>2]|0;HEAP32[$64>>2] = (($65+-1)|0);
  $66 = ($65|0)==(0);
  if (!($66)) {
   ___resumeException($61|0);
   // unreachable;
  }
  $67 = HEAP32[$63>>2]|0;
  $68 = (($67) + 8|0);
  $69 = HEAP32[$68>>2]|0;
  FUNCTION_TABLE_vi[$69 & 511]($63);
  ___resumeException($61|0);
  // unreachable;
 } else {
  $51 = HEAP32[$2>>2]|0;
  $52 = (($51) + 4|0);
  $53 = HEAP32[$52>>2]|0;HEAP32[$52>>2] = (($53+-1)|0);
  $54 = ($53|0)==(0);
  if (!($54)) {
   $58 = HEAP32[$__s>>2]|0;
   $59 = HEAP32[$__op>>2]|0;
   $60 = HEAP32[$__oe>>2]|0;
   __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$58,$__o,$59,$60,$__iob,$__fl);
   STACKTOP = sp;return;
  }
  $55 = HEAP32[$51>>2]|0;
  $56 = (($55) + 8|0);
  $57 = HEAP32[$56>>2]|0;
  FUNCTION_TABLE_vi[$57 & 511]($51);
  $58 = HEAP32[$__s>>2]|0;
  $59 = HEAP32[$__op>>2]|0;
  $60 = HEAP32[$__oe>>2]|0;
  __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$58,$__o,$59,$60,$__iob,$__fl);
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcd($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = +$__v;
 var $$0 = 0, $$0$i = 0, $$0$i7 = 0, $$01 = 0, $$1$i = 0, $$118 = 0, $$1217 = 0, $$pre19 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $__fmt = 0, $__nar = 0, $__nb = 0, $__nc$0 = 0, $__nc$1 = 0, $__nc$2 = 0, $__o = 0, $__ob$0 = 0, $__oe = 0, $__op = 0, $eh$lpad$body$index7Z2D = 0, $eh$lpad$body$indexZ2D = 0, $or$cond$i = 0, $specify_precision$0$off0$ph$i12 = 0, $vararg_buffer = 0, $vararg_buffer13 = 0, $vararg_buffer16 = 0;
 var $vararg_buffer20 = 0, $vararg_ptr12 = 0, $vararg_ptr19 = 0, $vararg_ptr23 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0;
 $vararg_buffer20 = sp + 48|0;
 $vararg_buffer16 = sp + 32|0;
 $vararg_buffer13 = sp + 24|0;
 $vararg_buffer = sp + 8|0;
 $__fmt = sp;
 $__nar = sp + 138|0;
 $__nb = sp + 76|0;
 $__o = sp + 80|0;
 $__op = sp + 72|0;
 $__oe = sp + 68|0;
 $0 = sp + 64|0;
 $1 = sp + 60|0;
 $2 = $__fmt;
 $3 = $2;
 HEAP32[$3>>2] = 37;
 $4 = (($2) + 4)|0;
 $5 = $4;
 HEAP32[$5>>2] = 0;
 $6 = (($__fmt) + 1|0);
 $7 = (($__iob) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $8 & 2048;
 $10 = ($9|0)==(0);
 if ($10) {
  $$0$i = $6;
 } else {
  $11 = (($__fmt) + 2|0);
  HEAP8[$6>>0] = 43;
  $$0$i = $11;
 }
 $12 = $8 & 1024;
 $13 = ($12|0)==(0);
 if ($13) {
  $$1$i = $$0$i;
 } else {
  $14 = (($$0$i) + 1|0);
  HEAP8[$$0$i>>0] = 35;
  $$1$i = $14;
 }
 $15 = $8 & 260;
 $16 = $8 >>> 14;
 $17 = ($15|0)==(260);
 do {
  if ($17) {
   $24 = $16 & 1;
   $25 = ($24|0)==(0);
   if ($25) {
    HEAP8[$$1$i>>0] = 97;
    $specify_precision$0$off0$ph$i12 = 0;
    break;
   } else {
    HEAP8[$$1$i>>0] = 65;
    $specify_precision$0$off0$ph$i12 = 0;
    break;
   }
  } else {
   $18 = (($$1$i) + 1|0);
   HEAP8[$$1$i>>0] = 46;
   $19 = (($$1$i) + 2|0);
   HEAP8[$18>>0] = 42;
   if ((($15|0) == 256)) {
    $22 = $16 & 1;
    $23 = ($22|0)==(0);
    if ($23) {
     HEAP8[$19>>0] = 101;
     $specify_precision$0$off0$ph$i12 = 1;
     break;
    } else {
     HEAP8[$19>>0] = 69;
     $specify_precision$0$off0$ph$i12 = 1;
     break;
    }
   } else if ((($15|0) == 4)) {
    $20 = $16 & 1;
    $21 = ($20|0)==(0);
    if ($21) {
     HEAP8[$19>>0] = 102;
     $specify_precision$0$off0$ph$i12 = 1;
     break;
    } else {
     HEAP8[$19>>0] = 70;
     $specify_precision$0$off0$ph$i12 = 1;
     break;
    }
   } else {
    $26 = $16 & 1;
    $27 = ($26|0)==(0);
    if ($27) {
     HEAP8[$19>>0] = 103;
     $specify_precision$0$off0$ph$i12 = 1;
     break;
    } else {
     HEAP8[$19>>0] = 71;
     $specify_precision$0$off0$ph$i12 = 1;
     break;
    }
   }
  }
 } while(0);
 HEAP32[$__nb>>2] = $__nar;
 $28 = HEAP8[6328>>0]|0;
 $29 = ($28<<24>>24)==(0);
 do {
  if ($29) {
   $30 = (___cxa_guard_acquire((6328|0))|0);
   $31 = ($30|0)==(0);
   if (!($31)) {
    __THREW__ = 0;
    $32 = (invoke_iiii(461,2147483647,(6336|0),(0|0))|0);
    $33 = __THREW__; __THREW__ = 0;
    $34 = $33&1;
    if ($34) {
     $35 = ___cxa_find_matching_catch(-1,-1)|0;
     $36 = tempRet0;
     ___cxa_guard_abort((6328|0));
     ___resumeException($35|0);
     // unreachable;
    } else {
     HEAP32[6320>>2] = $32;
     ___cxa_guard_release((6328|0));
     break;
    }
   }
  }
 } while(0);
 $37 = HEAP32[6320>>2]|0;
 if ($specify_precision$0$off0$ph$i12) {
  $38 = (($__iob) + 8|0);
  $39 = HEAP32[$38>>2]|0;
  HEAP32[$vararg_buffer>>2] = $39;
  $vararg_ptr12 = (($vararg_buffer) + 4|0);
  HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_ptr12>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr12+4>>2]=HEAP32[tempDoublePtr+4>>2];
  $40 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,30,$37,$__fmt,$vararg_buffer)|0);
  $__nc$0 = $40;
 } else {
  HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_buffer13>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer13+4>>2]=HEAP32[tempDoublePtr+4>>2];
  $41 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,30,$37,$__fmt,$vararg_buffer13)|0);
  $__nc$0 = $41;
 }
 $42 = ($__nc$0|0)>(29);
 do {
  if ($42) {
   $43 = HEAP8[6328>>0]|0;
   $44 = ($43<<24>>24)==(0);
   L41: do {
    if ($specify_precision$0$off0$ph$i12) {
     do {
      if ($44) {
       $45 = (___cxa_guard_acquire((6328|0))|0);
       $46 = ($45|0)==(0);
       if (!($46)) {
        __THREW__ = 0;
        $47 = (invoke_iiii(461,2147483647,(6336|0),(0|0))|0);
        $48 = __THREW__; __THREW__ = 0;
        $49 = $48&1;
        if ($49) {
         $50 = ___cxa_find_matching_catch(-1,-1)|0;
         $51 = tempRet0;
         ___cxa_guard_abort((6328|0));
         $eh$lpad$body$index7Z2D = $51;$eh$lpad$body$indexZ2D = $50;
         break L41;
        } else {
         HEAP32[6320>>2] = $47;
         ___cxa_guard_release((6328|0));
         break;
        }
       }
      }
     } while(0);
     $52 = HEAP32[6320>>2]|0;
     $53 = (($__iob) + 8|0);
     $54 = HEAP32[$53>>2]|0;
     __THREW__ = 0;
     HEAP32[$vararg_buffer16>>2] = $54;
     $vararg_ptr19 = (($vararg_buffer16) + 4|0);
     HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_ptr19>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr19+4>>2]=HEAP32[tempDoublePtr+4>>2];
     $55 = (invoke_iiiii(466,($__nb|0),($52|0),($__fmt|0),($vararg_buffer16|0))|0);
     $56 = __THREW__; __THREW__ = 0;
     $57 = $56&1;
     if ($57) {
      label = 36;
     } else {
      $__nc$1 = $55;
      label = 44;
     }
    } else {
     do {
      if ($44) {
       $60 = (___cxa_guard_acquire((6328|0))|0);
       $61 = ($60|0)==(0);
       if (!($61)) {
        __THREW__ = 0;
        $62 = (invoke_iiii(461,2147483647,(6336|0),(0|0))|0);
        $63 = __THREW__; __THREW__ = 0;
        $64 = $63&1;
        if ($64) {
         $65 = ___cxa_find_matching_catch(-1,-1)|0;
         $66 = tempRet0;
         ___cxa_guard_abort((6328|0));
         $eh$lpad$body$index7Z2D = $66;$eh$lpad$body$indexZ2D = $65;
         break L41;
        } else {
         HEAP32[6320>>2] = $62;
         ___cxa_guard_release((6328|0));
         break;
        }
       }
      }
     } while(0);
     $67 = HEAP32[6320>>2]|0;
     $68 = (($__iob) + 8|0);
     $69 = HEAP32[$68>>2]|0;
     __THREW__ = 0;
     HEAP32[$vararg_buffer20>>2] = $69;
     $vararg_ptr23 = (($vararg_buffer20) + 4|0);
     HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_ptr23>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr23+4>>2]=HEAP32[tempDoublePtr+4>>2];
     $70 = (invoke_iiiii(466,($__nb|0),($67|0),($__fmt|0),($vararg_buffer20|0))|0);
     $71 = __THREW__; __THREW__ = 0;
     $72 = $71&1;
     if ($72) {
      label = 36;
     } else {
      $__nc$1 = $70;
      label = 44;
     }
    }
   } while(0);
   if ((label|0) == 44) {
    $73 = HEAP32[$__nb>>2]|0;
    $74 = ($73|0)==(0|0);
    if (!($74)) {
     $121 = $73;$79 = $73;$__nc$2 = $__nc$1;
     break;
    }
    $75 = (___cxa_allocate_exception(4)|0);
    HEAP32[$75>>2] = ((15656 + 8|0));
    __THREW__ = 0;
    invoke_viii(379,($75|0),(15712|0),(374|0));
    $76 = __THREW__; __THREW__ = 0;
    $77 = $76&1;
    if ($77) {
     label = 36;
    } else {
     // unreachable;
    }
   }
   if ((label|0) == 36) {
    $58 = ___cxa_find_matching_catch(-1,-1)|0;
    $59 = tempRet0;
    $eh$lpad$body$index7Z2D = $59;$eh$lpad$body$indexZ2D = $58;
   }
   $$118 = $eh$lpad$body$indexZ2D;$$1217 = $eh$lpad$body$index7Z2D;
   ___resumeException($$118|0);
   // unreachable;
  } else {
   $$pre19 = HEAP32[$__nb>>2]|0;
   $121 = 0;$79 = $$pre19;$__nc$2 = $__nc$0;
  }
 } while(0);
 $78 = (($79) + ($__nc$2)|0);
 $80 = HEAP32[$7>>2]|0;
 $81 = $80 & 176;
 do {
  if ((($81|0) == 32)) {
   $$0$i7 = $78;
  } else if ((($81|0) == 16)) {
   $82 = HEAP8[$79>>0]|0;
   if ((($82<<24>>24) == 43) | (($82<<24>>24) == 45)) {
    $83 = (($79) + 1|0);
    $$0$i7 = $83;
    break;
   }
   $84 = ($__nc$2|0)>(1);
   $85 = ($82<<24>>24)==(48);
   $or$cond$i = $84 & $85;
   if ($or$cond$i) {
    $86 = (($79) + 1|0);
    $87 = HEAP8[$86>>0]|0;
    if ((($87<<24>>24) == 88) | (($87<<24>>24) == 120)) {
     $88 = (($79) + 2|0);
     $$0$i7 = $88;
    } else {
     label = 53;
    }
   } else {
    label = 53;
   }
  } else {
   label = 53;
  }
 } while(0);
 if ((label|0) == 53) {
  $$0$i7 = $79;
 }
 $89 = ($79|0)==($__nar|0);
 if ($89) {
  $102 = $__nar;$119 = 0;$__ob$0 = $__o;
  label = 59;
 } else {
  $90 = $__nc$2 << 1;
  $91 = (_malloc($90)|0);
  $92 = ($91|0)==(0|0);
  if ($92) {
   $93 = (___cxa_allocate_exception(4)|0);
   HEAP32[$93>>2] = ((15656 + 8|0));
   __THREW__ = 0;
   invoke_viii(379,($93|0),(15712|0),(374|0));
   $94 = __THREW__; __THREW__ = 0;
   $95 = $94&1;
   if ($95) {
    $134 = 0;
    label = 58;
   } else {
    // unreachable;
   }
  } else {
   $102 = $79;$119 = $91;$__ob$0 = $91;
   label = 59;
  }
 }
 do {
  if ((label|0) == 59) {
   $98 = (($__iob) + 28|0);
   $99 = HEAP32[$98>>2]|0;
   HEAP32[$0>>2] = $99;
   $100 = (($99) + 4|0);
   $101 = HEAP32[$100>>2]|0;HEAP32[$100>>2] = (($101+1)|0);
   __THREW__ = 0;
   invoke_viiiiiii(467,($102|0),($$0$i7|0),($78|0),($__ob$0|0),($__op|0),($__oe|0),($0|0));
   $103 = __THREW__; __THREW__ = 0;
   $104 = $103&1;
   if ($104) {
    $122 = ___cxa_find_matching_catch(-1,-1)|0;
    $123 = tempRet0;
    $124 = HEAP32[$0>>2]|0;
    $125 = (($124) + 4|0);
    $126 = HEAP32[$125>>2]|0;HEAP32[$125>>2] = (($126+-1)|0);
    $127 = ($126|0)==(0);
    if (!($127)) {
     $$0 = $122;$$01 = $123;$132 = $119;
     break;
    }
    $128 = HEAP32[$124>>2]|0;
    $129 = (($128) + 8|0);
    $130 = HEAP32[$129>>2]|0;
    FUNCTION_TABLE_vi[$130 & 511]($124);
    $$0 = $122;$$01 = $123;$132 = $119;
    break;
   }
   $105 = HEAP32[$0>>2]|0;
   $106 = (($105) + 4|0);
   $107 = HEAP32[$106>>2]|0;HEAP32[$106>>2] = (($107+-1)|0);
   $108 = ($107|0)==(0);
   if ($108) {
    $109 = HEAP32[$105>>2]|0;
    $110 = (($109) + 8|0);
    $111 = HEAP32[$110>>2]|0;
    FUNCTION_TABLE_vi[$111 & 511]($105);
   }
   $112 = HEAP32[$__s>>2]|0;
   $113 = HEAP32[$__op>>2]|0;
   $114 = HEAP32[$__oe>>2]|0;
   __THREW__ = 0;
   invoke_viiiiiii(468,($1|0),($112|0),($__ob$0|0),($113|0),($114|0),($__iob|0),($__fl|0));
   $115 = __THREW__; __THREW__ = 0;
   $116 = $115&1;
   if ($116) {
    $134 = $119;
    label = 58;
   } else {
    $117 = HEAP32[$1>>2]|0;
    HEAP32[$__s>>2] = $117;
    HEAP32[$agg$result>>2] = $117;
    $118 = ($119|0)==(0|0);
    if (!($118)) {
     _free($119);
    }
    $120 = ($121|0)==(0|0);
    if ($120) {
     STACKTOP = sp;return;
    }
    _free($121);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 58) {
  $96 = ___cxa_find_matching_catch(-1,-1)|0;
  $97 = tempRet0;
  $$0 = $96;$$01 = $97;$132 = $134;
 }
 $131 = ($132|0)==(0|0);
 if (!($131)) {
  _free($132);
 }
 $133 = ($121|0)==(0|0);
 if ($133) {
  $$118 = $$0;$$1217 = $$01;
  ___resumeException($$118|0);
  // unreachable;
 }
 _free($121);
 $$118 = $$0;$$1217 = $$01;
 ___resumeException($$118|0);
 // unreachable;
}
function __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__s,$__l,$__format,$varargs) {
 $__s = $__s|0;
 $__l = $__l|0;
 $__format = $__format|0;
 $varargs = $varargs|0;
 var $$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $__va = 0, $ap2$i = 0, $vacopy_currentptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $ap2$i = sp + 16|0;
 $__va = sp;
 HEAP32[$__va>>2] = $varargs;
 $0 = (_uselocale(($__l|0))|0);
 $1 = (_malloc(240)|0);
 $2 = ($1|0)==(0|0);
 do {
  if ($2) {
   $$0$i = -1;
  } else {
   $vacopy_currentptr = HEAP32[$__va>>2]|0;
   HEAP32[$ap2$i>>2] = $vacopy_currentptr;
   $3 = (_vsnprintf($1,240,$__format,$ap2$i)|0);
   $4 = ($3>>>0)<(240);
   if ($4) {
    $5 = (($3) + 1)|0;
    $6 = (_realloc($1,$5)|0);
    $7 = ($6|0)!=(0|0);
    $8 = $7 ? $6 : $1;
    HEAP32[$__s>>2] = $8;
    $$0$i = $3;
    break;
   }
   _free($1);
   $9 = ($3|0)<(0);
   if ($9) {
    $$0$i = -1;
   } else {
    $10 = (($3) + 1)|0;
    $11 = (_malloc($10)|0);
    HEAP32[$__s>>2] = $11;
    $12 = ($11|0)==(0|0);
    if ($12) {
     $$0$i = -1;
    } else {
     $13 = (_vsnprintf($11,$10,$__format,$__va)|0);
     $$0$i = $13;
    }
   }
  }
 } while(0);
 $14 = ($0|0)==(0|0);
 if ($14) {
  STACKTOP = sp;return ($$0$i|0);
 }
 __THREW__ = 0;
 (invoke_ii(463,($0|0))|0);
 $15 = __THREW__; __THREW__ = 0;
 $16 = $15&1;
 if ($16) {
  $17 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
  $18 = tempRet0;
  ___clang_call_terminate($17);
  // unreachable;
 } else {
  STACKTOP = sp;return ($$0$i|0);
 }
 return 0|0;
}
function __ZNSt3__19__num_putIcE23__widen_and_group_floatEPcS2_S2_S2_RS2_S3_RKNS_6localeE($__nb,$__np,$__ne,$__ob,$__op,$__oe,$__loc) {
 $__nb = $__nb|0;
 $__np = $__np|0;
 $__ne = $__ne|0;
 $__ob = $__ob|0;
 $__op = $__op|0;
 $__oe = $__oe|0;
 $__loc = $__loc|0;
 var $$ = 0, $$012$i$i = 0, $$012$i$i13 = 0, $$__dg$0 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
 var $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0;
 var $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0;
 var $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0;
 var $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__dc$025 = 0, $__dc$1 = 0, $__dg$026 = 0, $__dg$1 = 0, $__grouping = 0;
 var $__nf$0 = 0, $__nf$1 = 0, $__nf$221 = 0, $__nf$3 = 0, $__ns$043 = 0, $__ns$134 = 0, $__ns$2 = 0, $__p$027 = 0, $__p$i$i$i$i = 0, $__p$i$i$i$i1 = 0, $eh$lpad$body$index10Z2D = 0, $eh$lpad$body$indexZ2D = 0, $isdigit$i = 0, $isdigit$i$i = 0, $isdigittmp$i = 0, $isdigittmp$i$i = 0, $or$cond = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $__p$i$i$i$i1 = sp + 16|0;
 $__p$i$i$i$i = sp;
 $__grouping = sp + 28|0;
 $0 = HEAP32[$__loc>>2]|0;
 $1 = HEAP32[6416>>2]|0;
 $2 = ($1|0)==(-1);
 if (!($2)) {
  HEAP32[$__p$i$i$i$i>>2] = 6416;
  $3 = (($__p$i$i$i$i) + 4|0);
  HEAP32[$3>>2] = (439);
  $4 = (($__p$i$i$i$i) + 8|0);
  HEAP32[$4>>2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(6416,$__p$i$i$i$i);
 }
 $5 = HEAP32[((6416 + 4|0))>>2]|0;
 $6 = (($5) + -1)|0;
 $7 = (($0) + 12|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($0) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $8;
 $12 = $10;
 $13 = (($11) - ($12))|0;
 $14 = $13 >> 2;
 $15 = ($14>>>0)>($6>>>0);
 if (!($15)) {
  $19 = (___cxa_allocate_exception(4)|0);
  HEAP32[$19>>2] = ((14256 + 8|0));
  ___cxa_throw(($19|0),(14336|0),(351|0));
  // unreachable;
 }
 $16 = (($10) + ($6<<2)|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17|0)==(0|0);
 if ($18) {
  $19 = (___cxa_allocate_exception(4)|0);
  HEAP32[$19>>2] = ((14256 + 8|0));
  ___cxa_throw(($19|0),(14336|0),(351|0));
  // unreachable;
 }
 $20 = HEAP32[$__loc>>2]|0;
 $21 = HEAP32[6560>>2]|0;
 $22 = ($21|0)==(-1);
 if (!($22)) {
  HEAP32[$__p$i$i$i$i1>>2] = 6560;
  $23 = (($__p$i$i$i$i1) + 4|0);
  HEAP32[$23>>2] = (439);
  $24 = (($__p$i$i$i$i1) + 8|0);
  HEAP32[$24>>2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(6560,$__p$i$i$i$i1);
 }
 $25 = HEAP32[((6560 + 4|0))>>2]|0;
 $26 = (($25) + -1)|0;
 $27 = (($20) + 12|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = (($20) + 8|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = $28;
 $32 = $30;
 $33 = (($31) - ($32))|0;
 $34 = $33 >> 2;
 $35 = ($34>>>0)>($26>>>0);
 if (!($35)) {
  $39 = (___cxa_allocate_exception(4)|0);
  HEAP32[$39>>2] = ((14256 + 8|0));
  ___cxa_throw(($39|0),(14336|0),(351|0));
  // unreachable;
 }
 $36 = (($30) + ($26<<2)|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = ($37|0)==(0|0);
 if ($38) {
  $39 = (___cxa_allocate_exception(4)|0);
  HEAP32[$39>>2] = ((14256 + 8|0));
  ___cxa_throw(($39|0),(14336|0),(351|0));
  // unreachable;
 }
 $40 = HEAP32[$37>>2]|0;
 $41 = (($40) + 20|0);
 $42 = HEAP32[$41>>2]|0;
 FUNCTION_TABLE_vii[$42 & 511]($__grouping,$37);
 HEAP32[$__oe>>2] = $__ob;
 $43 = HEAP8[$__nb>>0]|0;
 if ((($43<<24>>24) == 43) | (($43<<24>>24) == 45)) {
  $44 = HEAP32[$17>>2]|0;
  $45 = (($44) + 28|0);
  $46 = HEAP32[$45>>2]|0;
  __THREW__ = 0;
  $47 = (invoke_iii($46|0,($17|0),($43|0))|0);
  $48 = __THREW__; __THREW__ = 0;
  $49 = $48&1;
  if ($49) {
   label = 16;
  } else {
   $50 = (($__nb) + 1|0);
   $51 = HEAP32[$__oe>>2]|0;
   $52 = (($51) + 1|0);
   HEAP32[$__oe>>2] = $52;
   HEAP8[$51>>0] = $47;
   $__nf$0 = $50;
   label = 21;
  }
 } else {
  $__nf$0 = $__nb;
  label = 21;
 }
 L22: do {
  if ((label|0) == 21) {
   $65 = $__ne;
   $66 = $__nf$0;
   $67 = (($65) - ($66))|0;
   $68 = ($67|0)>(1);
   L24: do {
    if ($68) {
     $70 = HEAP8[$__nf$0>>0]|0;
     $71 = ($70<<24>>24)==(48);
     if ($71) {
      $72 = (($__nf$0) + 1|0);
      $73 = HEAP8[$72>>0]|0;
      if ((($73<<24>>24) == 88) | (($73<<24>>24) == 120)) {
       $74 = HEAP32[$17>>2]|0;
       $75 = (($74) + 28|0);
       $76 = HEAP32[$75>>2]|0;
       __THREW__ = 0;
       $77 = (invoke_iii($76|0,($17|0),48)|0);
       $78 = __THREW__; __THREW__ = 0;
       $79 = $78&1;
       if ($79) {
        label = 16;
        break L22;
       }
       $80 = HEAP32[$__oe>>2]|0;
       $81 = (($80) + 1|0);
       HEAP32[$__oe>>2] = $81;
       HEAP8[$80>>0] = $77;
       $82 = (($__nf$0) + 2|0);
       $83 = HEAP8[$72>>0]|0;
       $84 = HEAP32[$17>>2]|0;
       $85 = (($84) + 28|0);
       $86 = HEAP32[$85>>2]|0;
       __THREW__ = 0;
       $87 = (invoke_iii($86|0,($17|0),($83|0))|0);
       $88 = __THREW__; __THREW__ = 0;
       $89 = $88&1;
       if ($89) {
        label = 16;
        break L22;
       }
       $90 = HEAP32[$__oe>>2]|0;
       $91 = (($90) + 1|0);
       HEAP32[$__oe>>2] = $91;
       HEAP8[$90>>0] = $87;
       $92 = ($82>>>0)<($__ne>>>0);
       if ($92) {
        $__ns$043 = $82;
        while(1) {
         $95 = HEAP8[$__ns$043>>0]|0;
         $96 = HEAP8[6328>>0]|0;
         $97 = ($96<<24>>24)==(0);
         if ($97) {
          $98 = (___cxa_guard_acquire((6328|0))|0);
          $99 = ($98|0)==(0);
          if (!($99)) {
           __THREW__ = 0;
           $100 = (invoke_iiii(461,2147483647,(6336|0),(0|0))|0);
           $101 = __THREW__; __THREW__ = 0;
           $102 = $101&1;
           if ($102) {
            break;
           }
           HEAP32[6320>>2] = $100;
           ___cxa_guard_release((6328|0));
          }
         }
         $105 = $95 << 24 >> 24;
         $isdigittmp$i$i = (($105) + -48)|0;
         $isdigit$i$i = ($isdigittmp$i$i>>>0)<(10);
         if (!($isdigit$i$i)) {
          $106 = $105 | 32;
          $107 = (($106) + -97)|0;
          $108 = ($107>>>0)<(6);
          if (!($108)) {
           $__nf$1 = $82;$__ns$2 = $__ns$043;
           break L24;
          }
         }
         $93 = (($__ns$043) + 1|0);
         $94 = ($93>>>0)<($__ne>>>0);
         if ($94) {
          $__ns$043 = $93;
         } else {
          $__nf$1 = $82;$__ns$2 = $93;
          break L24;
         }
        }
        $103 = ___cxa_find_matching_catch(-1,-1)|0;
        $104 = tempRet0;
        ___cxa_guard_abort((6328|0));
        $eh$lpad$body$index10Z2D = $104;$eh$lpad$body$indexZ2D = $103;
        break L22;
       } else {
        $__nf$1 = $82;$__ns$2 = $82;
       }
      } else {
       label = 22;
      }
     } else {
      label = 22;
     }
    } else {
     label = 22;
    }
   } while(0);
   L41: do {
    if ((label|0) == 22) {
     $69 = ($__nf$0>>>0)<($__ne>>>0);
     if ($69) {
      $__ns$134 = $__nf$0;
      while(1) {
       $111 = HEAP8[$__ns$134>>0]|0;
       $112 = HEAP8[6328>>0]|0;
       $113 = ($112<<24>>24)==(0);
       if ($113) {
        $114 = (___cxa_guard_acquire((6328|0))|0);
        $115 = ($114|0)==(0);
        if (!($115)) {
         __THREW__ = 0;
         $116 = (invoke_iiii(461,2147483647,(6336|0),(0|0))|0);
         $117 = __THREW__; __THREW__ = 0;
         $118 = $117&1;
         if ($118) {
          break;
         }
         HEAP32[6320>>2] = $116;
         ___cxa_guard_release((6328|0));
        }
       }
       $121 = $111 << 24 >> 24;
       $isdigittmp$i = (($121) + -48)|0;
       $isdigit$i = ($isdigittmp$i>>>0)<(10);
       $110 = (($__ns$134) + 1|0);
       if (!($isdigit$i)) {
        $__nf$1 = $__nf$0;$__ns$2 = $__ns$134;
        break L41;
       }
       $109 = ($110>>>0)<($__ne>>>0);
       if ($109) {
        $__ns$134 = $110;
       } else {
        $__nf$1 = $__nf$0;$__ns$2 = $110;
        break L41;
       }
      }
      $119 = ___cxa_find_matching_catch(-1,-1)|0;
      $120 = tempRet0;
      ___cxa_guard_abort((6328|0));
      $eh$lpad$body$index10Z2D = $120;$eh$lpad$body$indexZ2D = $119;
      break L22;
     } else {
      $__nf$1 = $__nf$0;$__ns$2 = $__nf$0;
     }
    }
   } while(0);
   $122 = HEAP8[$__grouping>>0]|0;
   $123 = $122 & 1;
   $124 = ($123<<24>>24)==(0);
   if ($124) {
    $127 = $122&255;
    $128 = $127 >>> 1;
    $130 = $128;
   } else {
    $125 = (($__grouping) + 4|0);
    $126 = HEAP32[$125>>2]|0;
    $130 = $126;
   }
   $129 = ($130|0)==(0);
   if ($129) {
    $131 = HEAP32[$__oe>>2]|0;
    $132 = HEAP32[$17>>2]|0;
    $133 = (($132) + 32|0);
    $134 = HEAP32[$133>>2]|0;
    __THREW__ = 0;
    (invoke_iiiii($134|0,($17|0),($__nf$1|0),($__ns$2|0),($131|0))|0);
    $135 = __THREW__; __THREW__ = 0;
    $136 = $135&1;
    if ($136) {
     label = 16;
     break;
    }
    $137 = $__ns$2;
    $138 = $__nf$1;
    $139 = (($137) - ($138))|0;
    $140 = HEAP32[$__oe>>2]|0;
    $141 = (($140) + ($139)|0);
    HEAP32[$__oe>>2] = $141;
   } else {
    $142 = ($__nf$1|0)==($__ns$2|0);
    if (!($142)) {
     $143 = (($__ns$2) + -1|0);
     $144 = ($143>>>0)>($__nf$1>>>0);
     if ($144) {
      $$012$i$i = $__nf$1;$147 = $143;
      while(1) {
       $145 = HEAP8[$$012$i$i>>0]|0;
       $146 = HEAP8[$147>>0]|0;
       HEAP8[$$012$i$i>>0] = $146;
       HEAP8[$147>>0] = $145;
       $148 = (($$012$i$i) + 1|0);
       $149 = (($147) + -1|0);
       $150 = ($148>>>0)<($149>>>0);
       if ($150) {
        $$012$i$i = $148;$147 = $149;
       } else {
        break;
       }
      }
     }
    }
    $151 = HEAP32[$37>>2]|0;
    $152 = (($151) + 16|0);
    $153 = HEAP32[$152>>2]|0;
    __THREW__ = 0;
    $154 = (invoke_ii($153|0,($37|0))|0);
    $155 = __THREW__; __THREW__ = 0;
    $156 = $155&1;
    if ($156) {
     label = 16;
     break;
    }
    $157 = ($__nf$1>>>0)<($__ns$2>>>0);
    L67: do {
     if ($157) {
      $158 = (($__grouping) + 1|0);
      $159 = (($__grouping) + 4|0);
      $160 = (($__grouping) + 8|0);
      $__dc$025 = 0;$__dg$026 = 0;$__p$027 = $__nf$1;
      while(1) {
       $161 = HEAP8[$__grouping>>0]|0;
       $162 = $161 & 1;
       $163 = ($162<<24>>24)==(0);
       $164 = HEAP32[$160>>2]|0;
       $$ = $163 ? $158 : $164;
       $165 = (($$) + ($__dg$026)|0);
       $166 = HEAP8[$165>>0]|0;
       $167 = ($166<<24>>24)>(0);
       $168 = $166 << 24 >> 24;
       $169 = ($__dc$025|0)==($168|0);
       $or$cond = $167 & $169;
       if ($or$cond) {
        $170 = HEAP32[$__oe>>2]|0;
        $171 = (($170) + 1|0);
        HEAP32[$__oe>>2] = $171;
        HEAP8[$170>>0] = $154;
        $172 = HEAP8[$__grouping>>0]|0;
        $173 = $172 & 1;
        $174 = ($173<<24>>24)==(0);
        if ($174) {
         $176 = $172&255;
         $177 = $176 >>> 1;
         $179 = $177;
        } else {
         $175 = HEAP32[$159>>2]|0;
         $179 = $175;
        }
        $178 = (($179) + -1)|0;
        $180 = ($__dg$026>>>0)<($178>>>0);
        $181 = $180&1;
        $$__dg$0 = (($181) + ($__dg$026))|0;
        $__dc$1 = 0;$__dg$1 = $$__dg$0;
       } else {
        $__dc$1 = $__dc$025;$__dg$1 = $__dg$026;
       }
       $182 = HEAP8[$__p$027>>0]|0;
       $183 = HEAP32[$17>>2]|0;
       $184 = (($183) + 28|0);
       $185 = HEAP32[$184>>2]|0;
       __THREW__ = 0;
       $186 = (invoke_iii($185|0,($17|0),($182|0))|0);
       $187 = __THREW__; __THREW__ = 0;
       $188 = $187&1;
       if ($188) {
        break;
       }
       $189 = HEAP32[$__oe>>2]|0;
       $190 = (($189) + 1|0);
       HEAP32[$__oe>>2] = $190;
       HEAP8[$189>>0] = $186;
       $191 = (($__dc$1) + 1)|0;
       $192 = (($__p$027) + 1|0);
       $193 = ($192>>>0)<($__ns$2>>>0);
       if ($193) {
        $__dc$025 = $191;$__dg$026 = $__dg$1;$__p$027 = $192;
       } else {
        break L67;
       }
      }
      $55 = ___cxa_find_matching_catch(-1,-1)|0;
      $56 = tempRet0;
      $eh$lpad$body$index10Z2D = $56;$eh$lpad$body$indexZ2D = $55;
      break L22;
     }
    } while(0);
    $194 = $__nf$1;
    $195 = $__nb;
    $196 = (($194) - ($195))|0;
    $197 = (($__ob) + ($196)|0);
    $198 = HEAP32[$__oe>>2]|0;
    $199 = ($197|0)==($198|0);
    if (!($199)) {
     $200 = (($198) + -1|0);
     $201 = ($200>>>0)>($197>>>0);
     if ($201) {
      $$012$i$i13 = $197;$204 = $200;
      while(1) {
       $202 = HEAP8[$$012$i$i13>>0]|0;
       $203 = HEAP8[$204>>0]|0;
       HEAP8[$$012$i$i13>>0] = $203;
       HEAP8[$204>>0] = $202;
       $205 = (($$012$i$i13) + 1|0);
       $206 = (($204) + -1|0);
       $207 = ($205>>>0)<($206>>>0);
       if ($207) {
        $$012$i$i13 = $205;$204 = $206;
       } else {
        break;
       }
      }
     }
    }
   }
   $208 = ($__ns$2>>>0)<($__ne>>>0);
   L85: do {
    if ($208) {
     $__nf$221 = $__ns$2;
     while(1) {
      $209 = HEAP8[$__nf$221>>0]|0;
      $210 = ($209<<24>>24)==(46);
      if ($210) {
       break;
      }
      $220 = HEAP32[$17>>2]|0;
      $221 = (($220) + 28|0);
      $222 = HEAP32[$221>>2]|0;
      __THREW__ = 0;
      $223 = (invoke_iii($222|0,($17|0),($209|0))|0);
      $224 = __THREW__; __THREW__ = 0;
      $225 = $224&1;
      if ($225) {
       label = 14;
       break;
      }
      $226 = HEAP32[$__oe>>2]|0;
      $227 = (($226) + 1|0);
      HEAP32[$__oe>>2] = $227;
      HEAP8[$226>>0] = $223;
      $228 = (($__nf$221) + 1|0);
      $229 = ($228>>>0)<($__ne>>>0);
      if ($229) {
       $__nf$221 = $228;
      } else {
       $__nf$3 = $228;
       break L85;
      }
     }
     if ((label|0) == 14) {
      $53 = ___cxa_find_matching_catch(-1,-1)|0;
      $54 = tempRet0;
      $eh$lpad$body$index10Z2D = $54;$eh$lpad$body$indexZ2D = $53;
      break L22;
     }
     $211 = HEAP32[$37>>2]|0;
     $212 = (($211) + 12|0);
     $213 = HEAP32[$212>>2]|0;
     __THREW__ = 0;
     $214 = (invoke_ii($213|0,($37|0))|0);
     $215 = __THREW__; __THREW__ = 0;
     $216 = $215&1;
     if ($216) {
      label = 16;
      break L22;
     }
     $217 = HEAP32[$__oe>>2]|0;
     $218 = (($217) + 1|0);
     HEAP32[$__oe>>2] = $218;
     HEAP8[$217>>0] = $214;
     $219 = (($__nf$221) + 1|0);
     $__nf$3 = $219;
    } else {
     $__nf$3 = $__ns$2;
    }
   } while(0);
   $230 = HEAP32[$__oe>>2]|0;
   $231 = HEAP32[$17>>2]|0;
   $232 = (($231) + 32|0);
   $233 = HEAP32[$232>>2]|0;
   __THREW__ = 0;
   (invoke_iiiii($233|0,($17|0),($__nf$3|0),($__ne|0),($230|0))|0);
   $234 = __THREW__; __THREW__ = 0;
   $235 = $234&1;
   if ($235) {
    label = 16;
   } else {
    $236 = $__nf$3;
    $237 = (($65) - ($236))|0;
    $238 = HEAP32[$__oe>>2]|0;
    $239 = (($238) + ($237)|0);
    HEAP32[$__oe>>2] = $239;
    $240 = ($__np|0)==($__ne|0);
    if ($240) {
     $storemerge = $239;
    } else {
     $241 = $__np;
     $242 = $__nb;
     $243 = (($241) - ($242))|0;
     $244 = (($__ob) + ($243)|0);
     $storemerge = $244;
    }
    HEAP32[$__op>>2] = $storemerge;
    $245 = HEAP8[$__grouping>>0]|0;
    $246 = $245 & 1;
    $247 = ($246<<24>>24)==(0);
    if ($247) {
     STACKTOP = sp;return;
    }
    $248 = (($__grouping) + 8|0);
    $249 = HEAP32[$248>>2]|0;
    $250 = ($249|0)==(0|0);
    if ($250) {
     STACKTOP = sp;return;
    }
    _free($249);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 16) {
  $57 = ___cxa_find_matching_catch(-1,-1)|0;
  $58 = tempRet0;
  $eh$lpad$body$index10Z2D = $58;$eh$lpad$body$indexZ2D = $57;
 }
 $59 = HEAP8[$__grouping>>0]|0;
 $60 = $59 & 1;
 $61 = ($60<<24>>24)==(0);
 if ($61) {
  ___resumeException($eh$lpad$body$indexZ2D|0);
  // unreachable;
 }
 $62 = (($__grouping) + 8|0);
 $63 = HEAP32[$62>>2]|0;
 $64 = ($63|0)==(0|0);
 if ($64) {
  ___resumeException($eh$lpad$body$indexZ2D|0);
  // unreachable;
 }
 _free($63);
 ___resumeException($eh$lpad$body$indexZ2D|0);
 // unreachable;
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEce($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = +$__v;
 var $$0 = 0, $$0$i = 0, $$0$i7 = 0, $$01 = 0, $$1$i = 0, $$113 = 0, $$1212 = 0, $$pre14 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $__fmt = 0, $__nar = 0, $__nb = 0, $__nc$0 = 0, $__nc$1 = 0, $__nc$2 = 0, $__o = 0, $__ob$0 = 0, $__oe = 0, $__op = 0, $eh$lpad$body$index7Z2D = 0, $eh$lpad$body$indexZ2D = 0, $or$cond$i = 0, $scevgep = 0, $scevgep16 = 0, $specify_precision$0$off0$ph$i17 = 0, $vararg_buffer = 0, $vararg_buffer13 = 0, $vararg_buffer16 = 0;
 var $vararg_buffer20 = 0, $vararg_ptr12 = 0, $vararg_ptr19 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0;
 $vararg_buffer20 = sp + 48|0;
 $vararg_buffer16 = sp + 32|0;
 $vararg_buffer13 = sp + 24|0;
 $vararg_buffer = sp + 8|0;
 $__fmt = sp;
 $__nar = sp + 134|0;
 $__nb = sp + 72|0;
 $__o = sp + 76|0;
 $__op = sp + 68|0;
 $__oe = sp + 64|0;
 $0 = sp + 60|0;
 $1 = sp + 56|0;
 $2 = $__fmt;
 $3 = $2;
 HEAP32[$3>>2] = 37;
 $4 = (($2) + 4)|0;
 $5 = $4;
 HEAP32[$5>>2] = 0;
 $6 = (($__fmt) + 1|0);
 $7 = (($__iob) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $8 & 2048;
 $10 = ($9|0)==(0);
 if ($10) {
  $$0$i = $6;
 } else {
  $11 = (($__fmt) + 2|0);
  HEAP8[$6>>0] = 43;
  $$0$i = $11;
 }
 $12 = $8 & 1024;
 $13 = ($12|0)==(0);
 if ($13) {
  $$1$i = $$0$i;
 } else {
  $14 = (($$0$i) + 1|0);
  HEAP8[$$0$i>>0] = 35;
  $$1$i = $14;
 }
 $15 = $8 & 260;
 $16 = $8 >>> 14;
 $17 = ($15|0)==(260);
 do {
  if ($17) {
   HEAP8[$$1$i>>0] = 76;
   $scevgep16 = (($$1$i) + 1|0);
   $24 = $16 & 1;
   $25 = ($24|0)==(0);
   if ($25) {
    HEAP8[$scevgep16>>0] = 97;
    $specify_precision$0$off0$ph$i17 = 0;
    break;
   } else {
    HEAP8[$scevgep16>>0] = 65;
    $specify_precision$0$off0$ph$i17 = 0;
    break;
   }
  } else {
   $18 = (($$1$i) + 1|0);
   HEAP8[$$1$i>>0] = 46;
   $19 = (($$1$i) + 2|0);
   HEAP8[$18>>0] = 42;
   HEAP8[$19>>0] = 76;
   $scevgep = (($$1$i) + 3|0);
   if ((($15|0) == 256)) {
    $22 = $16 & 1;
    $23 = ($22|0)==(0);
    if ($23) {
     HEAP8[$scevgep>>0] = 101;
     $specify_precision$0$off0$ph$i17 = 1;
     break;
    } else {
     HEAP8[$scevgep>>0] = 69;
     $specify_precision$0$off0$ph$i17 = 1;
     break;
    }
   } else if ((($15|0) == 4)) {
    $20 = $16 & 1;
    $21 = ($20|0)==(0);
    if ($21) {
     HEAP8[$scevgep>>0] = 102;
     $specify_precision$0$off0$ph$i17 = 1;
     break;
    } else {
     HEAP8[$scevgep>>0] = 70;
     $specify_precision$0$off0$ph$i17 = 1;
     break;
    }
   } else {
    $26 = $16 & 1;
    $27 = ($26|0)==(0);
    if ($27) {
     HEAP8[$scevgep>>0] = 103;
     $specify_precision$0$off0$ph$i17 = 1;
     break;
    } else {
     HEAP8[$scevgep>>0] = 71;
     $specify_precision$0$off0$ph$i17 = 1;
     break;
    }
   }
  }
 } while(0);
 HEAP32[$__nb>>2] = $__nar;
 $28 = HEAP8[6328>>0]|0;
 $29 = ($28<<24>>24)==(0);
 do {
  if ($29) {
   $30 = (___cxa_guard_acquire((6328|0))|0);
   $31 = ($30|0)==(0);
   if (!($31)) {
    __THREW__ = 0;
    $32 = (invoke_iiii(461,2147483647,(6336|0),(0|0))|0);
    $33 = __THREW__; __THREW__ = 0;
    $34 = $33&1;
    if ($34) {
     $35 = ___cxa_find_matching_catch(-1,-1)|0;
     $36 = tempRet0;
     ___cxa_guard_abort((6328|0));
     ___resumeException($35|0);
     // unreachable;
    } else {
     HEAP32[6320>>2] = $32;
     ___cxa_guard_release((6328|0));
     break;
    }
   }
  }
 } while(0);
 $37 = HEAP32[6320>>2]|0;
 if ($specify_precision$0$off0$ph$i17) {
  $38 = (($__iob) + 8|0);
  $39 = HEAP32[$38>>2]|0;
  HEAP32[$vararg_buffer>>2] = $39;
  $vararg_ptr12 = (($vararg_buffer) + 4|0);
  HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_ptr12>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr12+4>>2]=HEAP32[tempDoublePtr+4>>2];
  $40 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,30,$37,$__fmt,$vararg_buffer)|0);
  $__nc$0 = $40;
 } else {
  HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_buffer13>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer13+4>>2]=HEAP32[tempDoublePtr+4>>2];
  $41 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,30,$37,$__fmt,$vararg_buffer13)|0);
  $__nc$0 = $41;
 }
 $42 = ($__nc$0|0)>(29);
 do {
  if ($42) {
   $43 = HEAP8[6328>>0]|0;
   $44 = ($43<<24>>24)==(0);
   L40: do {
    if ($specify_precision$0$off0$ph$i17) {
     do {
      if ($44) {
       $45 = (___cxa_guard_acquire((6328|0))|0);
       $46 = ($45|0)==(0);
       if (!($46)) {
        __THREW__ = 0;
        $47 = (invoke_iiii(461,2147483647,(6336|0),(0|0))|0);
        $48 = __THREW__; __THREW__ = 0;
        $49 = $48&1;
        if ($49) {
         $50 = ___cxa_find_matching_catch(-1,-1)|0;
         $51 = tempRet0;
         ___cxa_guard_abort((6328|0));
         $eh$lpad$body$index7Z2D = $51;$eh$lpad$body$indexZ2D = $50;
         break L40;
        } else {
         HEAP32[6320>>2] = $47;
         ___cxa_guard_release((6328|0));
         break;
        }
       }
      }
     } while(0);
     $52 = HEAP32[6320>>2]|0;
     $53 = (($__iob) + 8|0);
     $54 = HEAP32[$53>>2]|0;
     __THREW__ = 0;
     HEAP32[$vararg_buffer16>>2] = $54;
     $vararg_ptr19 = (($vararg_buffer16) + 4|0);
     HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_ptr19>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr19+4>>2]=HEAP32[tempDoublePtr+4>>2];
     $55 = (invoke_iiiii(466,($__nb|0),($52|0),($__fmt|0),($vararg_buffer16|0))|0);
     $56 = __THREW__; __THREW__ = 0;
     $57 = $56&1;
     if ($57) {
      label = 36;
     } else {
      $__nc$1 = $55;
      label = 44;
     }
    } else {
     do {
      if ($44) {
       $60 = (___cxa_guard_acquire((6328|0))|0);
       $61 = ($60|0)==(0);
       if (!($61)) {
        __THREW__ = 0;
        $62 = (invoke_iiii(461,2147483647,(6336|0),(0|0))|0);
        $63 = __THREW__; __THREW__ = 0;
        $64 = $63&1;
        if ($64) {
         $65 = ___cxa_find_matching_catch(-1,-1)|0;
         $66 = tempRet0;
         ___cxa_guard_abort((6328|0));
         $eh$lpad$body$index7Z2D = $66;$eh$lpad$body$indexZ2D = $65;
         break L40;
        } else {
         HEAP32[6320>>2] = $62;
         ___cxa_guard_release((6328|0));
         break;
        }
       }
      }
     } while(0);
     $67 = HEAP32[6320>>2]|0;
     __THREW__ = 0;
     HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_buffer20>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer20+4>>2]=HEAP32[tempDoublePtr+4>>2];
     $68 = (invoke_iiiii(466,($__nb|0),($67|0),($__fmt|0),($vararg_buffer20|0))|0);
     $69 = __THREW__; __THREW__ = 0;
     $70 = $69&1;
     if ($70) {
      label = 36;
     } else {
      $__nc$1 = $68;
      label = 44;
     }
    }
   } while(0);
   if ((label|0) == 44) {
    $71 = HEAP32[$__nb>>2]|0;
    $72 = ($71|0)==(0|0);
    if (!($72)) {
     $119 = $71;$77 = $71;$__nc$2 = $__nc$1;
     break;
    }
    $73 = (___cxa_allocate_exception(4)|0);
    HEAP32[$73>>2] = ((15656 + 8|0));
    __THREW__ = 0;
    invoke_viii(379,($73|0),(15712|0),(374|0));
    $74 = __THREW__; __THREW__ = 0;
    $75 = $74&1;
    if ($75) {
     label = 36;
    } else {
     // unreachable;
    }
   }
   if ((label|0) == 36) {
    $58 = ___cxa_find_matching_catch(-1,-1)|0;
    $59 = tempRet0;
    $eh$lpad$body$index7Z2D = $59;$eh$lpad$body$indexZ2D = $58;
   }
   $$113 = $eh$lpad$body$indexZ2D;$$1212 = $eh$lpad$body$index7Z2D;
   ___resumeException($$113|0);
   // unreachable;
  } else {
   $$pre14 = HEAP32[$__nb>>2]|0;
   $119 = 0;$77 = $$pre14;$__nc$2 = $__nc$0;
  }
 } while(0);
 $76 = (($77) + ($__nc$2)|0);
 $78 = HEAP32[$7>>2]|0;
 $79 = $78 & 176;
 do {
  if ((($79|0) == 16)) {
   $80 = HEAP8[$77>>0]|0;
   if ((($80<<24>>24) == 43) | (($80<<24>>24) == 45)) {
    $81 = (($77) + 1|0);
    $$0$i7 = $81;
    break;
   }
   $82 = ($__nc$2|0)>(1);
   $83 = ($80<<24>>24)==(48);
   $or$cond$i = $82 & $83;
   if ($or$cond$i) {
    $84 = (($77) + 1|0);
    $85 = HEAP8[$84>>0]|0;
    if ((($85<<24>>24) == 88) | (($85<<24>>24) == 120)) {
     $86 = (($77) + 2|0);
     $$0$i7 = $86;
    } else {
     label = 53;
    }
   } else {
    label = 53;
   }
  } else if ((($79|0) == 32)) {
   $$0$i7 = $76;
  } else {
   label = 53;
  }
 } while(0);
 if ((label|0) == 53) {
  $$0$i7 = $77;
 }
 $87 = ($77|0)==($__nar|0);
 if ($87) {
  $100 = $__nar;$117 = 0;$__ob$0 = $__o;
  label = 59;
 } else {
  $88 = $__nc$2 << 1;
  $89 = (_malloc($88)|0);
  $90 = ($89|0)==(0|0);
  if ($90) {
   $91 = (___cxa_allocate_exception(4)|0);
   HEAP32[$91>>2] = ((15656 + 8|0));
   __THREW__ = 0;
   invoke_viii(379,($91|0),(15712|0),(374|0));
   $92 = __THREW__; __THREW__ = 0;
   $93 = $92&1;
   if ($93) {
    $132 = 0;
    label = 58;
   } else {
    // unreachable;
   }
  } else {
   $100 = $77;$117 = $89;$__ob$0 = $89;
   label = 59;
  }
 }
 do {
  if ((label|0) == 59) {
   $96 = (($__iob) + 28|0);
   $97 = HEAP32[$96>>2]|0;
   HEAP32[$0>>2] = $97;
   $98 = (($97) + 4|0);
   $99 = HEAP32[$98>>2]|0;HEAP32[$98>>2] = (($99+1)|0);
   __THREW__ = 0;
   invoke_viiiiiii(467,($100|0),($$0$i7|0),($76|0),($__ob$0|0),($__op|0),($__oe|0),($0|0));
   $101 = __THREW__; __THREW__ = 0;
   $102 = $101&1;
   if ($102) {
    $120 = ___cxa_find_matching_catch(-1,-1)|0;
    $121 = tempRet0;
    $122 = HEAP32[$0>>2]|0;
    $123 = (($122) + 4|0);
    $124 = HEAP32[$123>>2]|0;HEAP32[$123>>2] = (($124+-1)|0);
    $125 = ($124|0)==(0);
    if (!($125)) {
     $$0 = $120;$$01 = $121;$130 = $117;
     break;
    }
    $126 = HEAP32[$122>>2]|0;
    $127 = (($126) + 8|0);
    $128 = HEAP32[$127>>2]|0;
    FUNCTION_TABLE_vi[$128 & 511]($122);
    $$0 = $120;$$01 = $121;$130 = $117;
    break;
   }
   $103 = HEAP32[$0>>2]|0;
   $104 = (($103) + 4|0);
   $105 = HEAP32[$104>>2]|0;HEAP32[$104>>2] = (($105+-1)|0);
   $106 = ($105|0)==(0);
   if ($106) {
    $107 = HEAP32[$103>>2]|0;
    $108 = (($107) + 8|0);
    $109 = HEAP32[$108>>2]|0;
    FUNCTION_TABLE_vi[$109 & 511]($103);
   }
   $110 = HEAP32[$__s>>2]|0;
   $111 = HEAP32[$__op>>2]|0;
   $112 = HEAP32[$__oe>>2]|0;
   __THREW__ = 0;
   invoke_viiiiiii(468,($1|0),($110|0),($__ob$0|0),($111|0),($112|0),($__iob|0),($__fl|0));
   $113 = __THREW__; __THREW__ = 0;
   $114 = $113&1;
   if ($114) {
    $132 = $117;
    label = 58;
   } else {
    $115 = HEAP32[$1>>2]|0;
    HEAP32[$__s>>2] = $115;
    HEAP32[$agg$result>>2] = $115;
    $116 = ($117|0)==(0|0);
    if (!($116)) {
     _free($117);
    }
    $118 = ($119|0)==(0|0);
    if ($118) {
     STACKTOP = sp;return;
    }
    _free($119);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 58) {
  $94 = ___cxa_find_matching_catch(-1,-1)|0;
  $95 = tempRet0;
  $$0 = $94;$$01 = $95;$130 = $132;
 }
 $129 = ($130|0)==(0|0);
 if (!($129)) {
  _free($130);
 }
 $131 = ($119|0)==(0|0);
 if ($131) {
  $$113 = $$0;$$1212 = $$01;
  ___resumeException($$113|0);
  // unreachable;
 }
 _free($119);
 $$113 = $$0;$$1212 = $$01;
 ___resumeException($$113|0);
 // unreachable;
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPKv($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = $__v|0;
 var $$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__op$0 = 0, $__p$i$i$i$i = 0, $or$cond$i = 0;
 var $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0;
 $vararg_buffer = sp + 16|0;
 $__p$i$i$i$i = sp;
 $__fmt = sp + 80|0;
 $__nar = sp + 60|0;
 $__o = sp + 20|0;
 ;HEAP8[$__fmt+0>>0]=HEAP8[5232+0>>0]|0;HEAP8[$__fmt+1>>0]=HEAP8[5232+1>>0]|0;HEAP8[$__fmt+2>>0]=HEAP8[5232+2>>0]|0;HEAP8[$__fmt+3>>0]=HEAP8[5232+3>>0]|0;HEAP8[$__fmt+4>>0]=HEAP8[5232+4>>0]|0;HEAP8[$__fmt+5>>0]=HEAP8[5232+5>>0]|0;
 $0 = HEAP8[6328>>0]|0;
 $1 = ($0<<24>>24)==(0);
 do {
  if ($1) {
   $2 = (___cxa_guard_acquire((6328|0))|0);
   $3 = ($2|0)==(0);
   if (!($3)) {
    __THREW__ = 0;
    $4 = (invoke_iiii(461,2147483647,(6336|0),(0|0))|0);
    $5 = __THREW__; __THREW__ = 0;
    $6 = $5&1;
    if ($6) {
     $7 = ___cxa_find_matching_catch(-1,-1)|0;
     $8 = tempRet0;
     ___cxa_guard_abort((6328|0));
     ___resumeException($7|0);
     // unreachable;
    } else {
     HEAP32[6320>>2] = $4;
     ___cxa_guard_release((6328|0));
     break;
    }
   }
  }
 } while(0);
 $9 = HEAP32[6320>>2]|0;
 HEAP32[$vararg_buffer>>2] = $__v;
 $10 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,20,$9,$__fmt,$vararg_buffer)|0);
 $11 = (($__nar) + ($10)|0);
 $12 = (($__iob) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $13 & 176;
 do {
  if ((($14|0) == 32)) {
   $$0$i = $11;
  } else if ((($14|0) == 16)) {
   $15 = HEAP8[$__nar>>0]|0;
   if ((($15<<24>>24) == 43) | (($15<<24>>24) == 45)) {
    $16 = (($__nar) + 1|0);
    $$0$i = $16;
    break;
   }
   $17 = ($10|0)>(1);
   $18 = ($15<<24>>24)==(48);
   $or$cond$i = $17 & $18;
   if ($or$cond$i) {
    $19 = (($__nar) + 1|0);
    $20 = HEAP8[$19>>0]|0;
    if ((($20<<24>>24) == 88) | (($20<<24>>24) == 120)) {
     $21 = (($__nar) + 2|0);
     $$0$i = $21;
    } else {
     label = 12;
    }
   } else {
    label = 12;
   }
  } else {
   label = 12;
  }
 } while(0);
 if ((label|0) == 12) {
  $$0$i = $__nar;
 }
 $22 = (($__iob) + 28|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = (($23) + 4|0);
 $25 = HEAP32[$24>>2]|0;HEAP32[$24>>2] = (($25+1)|0);
 $26 = HEAP32[6416>>2]|0;
 $27 = ($26|0)==(-1);
 if ($27) {
  label = 15;
 } else {
  HEAP32[$__p$i$i$i$i>>2] = 6416;
  $28 = (($__p$i$i$i$i) + 4|0);
  HEAP32[$28>>2] = (439);
  $29 = (($__p$i$i$i$i) + 8|0);
  HEAP32[$29>>2] = 0;
  __THREW__ = 0;
  invoke_vii(440,(6416|0),($__p$i$i$i$i|0));
  $30 = __THREW__; __THREW__ = 0;
  $31 = $30&1;
  if (!($31)) {
   label = 15;
  }
 }
 if ((label|0) == 15) {
  $32 = HEAP32[((6416 + 4|0))>>2]|0;
  $33 = (($32) + -1)|0;
  $34 = (($23) + 12|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = (($23) + 8|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = $35;
  $39 = $37;
  $40 = (($38) - ($39))|0;
  $41 = $40 >> 2;
  $42 = ($41>>>0)>($33>>>0);
  if ($42) {
   $43 = (($37) + ($33<<2)|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = ($44|0)==(0|0);
   if (!($45)) {
    $49 = (($23) + 4|0);
    $50 = HEAP32[$49>>2]|0;HEAP32[$49>>2] = (($50+-1)|0);
    $51 = ($50|0)==(0);
    if ($51) {
     $52 = HEAP32[$23>>2]|0;
     $53 = (($52) + 8|0);
     $54 = HEAP32[$53>>2]|0;
     FUNCTION_TABLE_vi[$54 & 511]($23);
    }
    $55 = HEAP32[$44>>2]|0;
    $56 = (($55) + 32|0);
    $57 = HEAP32[$56>>2]|0;
    (FUNCTION_TABLE_iiiii[$57 & 511]($44,$__nar,$11,$__o)|0);
    $58 = (($__o) + ($10)|0);
    $59 = ($$0$i|0)==($11|0);
    if ($59) {
     $__op$0 = $58;
     $72 = HEAP32[$__s>>2]|0;
     __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$72,$__o,$__op$0,$58,$__iob,$__fl);
     STACKTOP = sp;return;
    }
    $68 = $__nar;
    $69 = $$0$i;
    $70 = (($69) - ($68))|0;
    $71 = (($__o) + ($70)|0);
    $__op$0 = $71;
    $72 = HEAP32[$__s>>2]|0;
    __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$72,$__o,$__op$0,$58,$__iob,$__fl);
    STACKTOP = sp;return;
   }
  }
  $46 = (___cxa_allocate_exception(4)|0);
  HEAP32[$46>>2] = ((14256 + 8|0));
  __THREW__ = 0;
  invoke_viii(379,($46|0),(14336|0),(351|0));
  $47 = __THREW__; __THREW__ = 0;
  $48 = $47&1;
  if (!($48)) {
   // unreachable;
  }
 }
 $60 = ___cxa_find_matching_catch(-1,-1)|0;
 $61 = tempRet0;
 $62 = (($23) + 4|0);
 $63 = HEAP32[$62>>2]|0;HEAP32[$62>>2] = (($63+-1)|0);
 $64 = ($63|0)==(0);
 if (!($64)) {
  ___resumeException($60|0);
  // unreachable;
 }
 $65 = HEAP32[$23>>2]|0;
 $66 = (($65) + 8|0);
 $67 = HEAP32[$66>>2]|0;
 FUNCTION_TABLE_vi[$67 & 511]($23);
 ___resumeException($60|0);
 // unreachable;
}
function __ZNSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($this|0)==(0|0);
 if (!($0)) {
  _free($this);
 }
 STACKTOP = sp;return;
}
function __ZNSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwb($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = $__v|0;
 var $$0 = 0, $$0$i$i = 0, $$01 = 0, $$byval_copy = 0, $$ph = 0, $$pre = 0, $$pre$phi6Z2D = 0, $$pre$phiZ2D = 0, $$pre4 = 0, $$pre5 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__nm = 0, $__p$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $$byval_copy = sp + 28|0;
 $__p$i$i$i$i = sp;
 $0 = sp + 24|0;
 $__nm = sp + 12|0;
 $1 = (($__iob) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & 1;
 $4 = ($3|0)==(0);
 if ($4) {
  $5 = HEAP32[$this>>2]|0;
  $6 = (($5) + 24|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = HEAP32[$__s>>2]|0;
  HEAP32[$0>>2] = $8;
  $9 = $__v&1;
  ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
  FUNCTION_TABLE_viiiiii[$7 & 511]($agg$result,$this,$$byval_copy,$__iob,$__fl,$9);
  STACKTOP = sp;return;
 }
 $10 = (($__iob) + 28|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($11) + 4|0);
 $13 = HEAP32[$12>>2]|0;HEAP32[$12>>2] = (($13+1)|0);
 $14 = HEAP32[6568>>2]|0;
 $15 = ($14|0)==(-1);
 if ($15) {
  label = 5;
 } else {
  HEAP32[$__p$i$i$i$i>>2] = 6568;
  $16 = (($__p$i$i$i$i) + 4|0);
  HEAP32[$16>>2] = (439);
  $17 = (($__p$i$i$i$i) + 8|0);
  HEAP32[$17>>2] = 0;
  __THREW__ = 0;
  invoke_vii(440,(6568|0),($__p$i$i$i$i|0));
  $18 = __THREW__; __THREW__ = 0;
  $19 = $18&1;
  if (!($19)) {
   label = 5;
  }
 }
 if ((label|0) == 5) {
  $20 = HEAP32[((6568 + 4|0))>>2]|0;
  $21 = (($20) + -1)|0;
  $22 = (($11) + 12|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = (($11) + 8|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = $23;
  $27 = $25;
  $28 = (($26) - ($27))|0;
  $29 = $28 >> 2;
  $30 = ($29>>>0)>($21>>>0);
  if ($30) {
   $31 = (($25) + ($21<<2)|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = ($32|0)==(0|0);
   if (!($33)) {
    $37 = (($11) + 4|0);
    $38 = HEAP32[$37>>2]|0;HEAP32[$37>>2] = (($38+-1)|0);
    $39 = ($38|0)==(0);
    if ($39) {
     $40 = HEAP32[$11>>2]|0;
     $41 = (($40) + 8|0);
     $42 = HEAP32[$41>>2]|0;
     FUNCTION_TABLE_vi[$42 & 511]($11);
    }
    $43 = HEAP32[$32>>2]|0;
    if ($__v) {
     $44 = (($43) + 24|0);
     $45 = HEAP32[$44>>2]|0;
     FUNCTION_TABLE_vii[$45 & 511]($__nm,$32);
    } else {
     $46 = (($43) + 28|0);
     $47 = HEAP32[$46>>2]|0;
     FUNCTION_TABLE_vii[$47 & 511]($__nm,$32);
    }
    $48 = HEAP8[$__nm>>0]|0;
    $49 = $48 & 1;
    $50 = ($49<<24>>24)==(0);
    if ($50) {
     $53 = (($__nm) + 4|0);
     $$pre5 = (($__nm) + 8|0);
     $$ph = $53;$$pre$phi6Z2D = $$pre5;$$pre$phiZ2D = $53;
    } else {
     $51 = (($__nm) + 8|0);
     $52 = HEAP32[$51>>2]|0;
     $$pre4 = (($__nm) + 4|0);
     $$ph = $52;$$pre$phi6Z2D = $51;$$pre$phiZ2D = $$pre4;
    }
    $55 = $48;$65 = $$ph;
    while(1) {
     $54 = $55 & 1;
     $56 = ($54<<24>>24)==(0);
     if ($56) {
      $59 = $55&255;
      $60 = $59 >>> 1;
      $62 = $$pre$phiZ2D;$63 = $60;
     } else {
      $57 = HEAP32[$$pre$phi6Z2D>>2]|0;
      $58 = HEAP32[$$pre$phiZ2D>>2]|0;
      $62 = $57;$63 = $58;
     }
     $61 = (($62) + ($63<<2)|0);
     $64 = ($65|0)==($61|0);
     if ($64) {
      label = 34;
      break;
     }
     $66 = HEAP32[$65>>2]|0;
     $67 = HEAP32[$__s>>2]|0;
     $68 = ($67|0)==(0|0);
     if (!($68)) {
      $69 = (($67) + 24|0);
      $70 = HEAP32[$69>>2]|0;
      $71 = (($67) + 28|0);
      $72 = HEAP32[$71>>2]|0;
      $73 = ($70|0)==($72|0);
      if ($73) {
       $74 = HEAP32[$67>>2]|0;
       $75 = (($74) + 52|0);
       $76 = HEAP32[$75>>2]|0;
       __THREW__ = 0;
       $77 = (invoke_iii($76|0,($67|0),($66|0))|0);
       $78 = __THREW__; __THREW__ = 0;
       $79 = $78&1;
       if ($79) {
        label = 31;
        break;
       } else {
        $$0$i$i = $77;
       }
      } else {
       $80 = (($70) + 4|0);
       HEAP32[$69>>2] = $80;
       HEAP32[$70>>2] = $66;
       $$0$i$i = $66;
      }
      $81 = ($$0$i$i|0)==(-1);
      if ($81) {
       HEAP32[$__s>>2] = 0;
      }
     }
     $82 = (($65) + 4|0);
     $$pre = HEAP8[$__nm>>0]|0;
     $55 = $$pre;$65 = $82;
    }
    if ((label|0) == 31) {
     $91 = ___cxa_find_matching_catch(-1,-1)|0;
     $92 = tempRet0;
     $93 = HEAP8[$__nm>>0]|0;
     $94 = $93 & 1;
     $95 = ($94<<24>>24)==(0);
     if ($95) {
      $$0 = $91;$$01 = $92;
      ___resumeException($$0|0);
      // unreachable;
     }
     $96 = (($__nm) + 8|0);
     $97 = HEAP32[$96>>2]|0;
     $98 = ($97|0)==(0|0);
     if ($98) {
      $$0 = $91;$$01 = $92;
      ___resumeException($$0|0);
      // unreachable;
     }
     _free($97);
     $$0 = $91;$$01 = $92;
     ___resumeException($$0|0);
     // unreachable;
    }
    else if ((label|0) == 34) {
     $99 = HEAP32[$__s>>2]|0;
     HEAP32[$agg$result>>2] = $99;
     if ($56) {
      STACKTOP = sp;return;
     }
     $100 = (($__nm) + 8|0);
     $101 = HEAP32[$100>>2]|0;
     $102 = ($101|0)==(0|0);
     if ($102) {
      STACKTOP = sp;return;
     }
     _free($101);
     STACKTOP = sp;return;
    }
   }
  }
  $34 = (___cxa_allocate_exception(4)|0);
  HEAP32[$34>>2] = ((14256 + 8|0));
  __THREW__ = 0;
  invoke_viii(379,($34|0),(14336|0),(351|0));
  $35 = __THREW__; __THREW__ = 0;
  $36 = $35&1;
  if (!($36)) {
   // unreachable;
  }
 }
 $83 = ___cxa_find_matching_catch(-1,-1)|0;
 $84 = tempRet0;
 $85 = (($11) + 4|0);
 $86 = HEAP32[$85>>2]|0;HEAP32[$85>>2] = (($86+-1)|0);
 $87 = ($86|0)==(0);
 if (!($87)) {
  $$0 = $83;$$01 = $84;
  ___resumeException($$0|0);
  // unreachable;
 }
 $88 = HEAP32[$11>>2]|0;
 $89 = (($88) + 8|0);
 $90 = HEAP32[$89>>2]|0;
 FUNCTION_TABLE_vi[$90 & 511]($11);
 $$0 = $83;$$01 = $84;
 ___resumeException($$0|0);
 // unreachable;
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwl($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = $__v|0;
 var $$0$i = 0, $$0$i1 = 0, $$13$i$ph = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, $or$cond$i = 0, $scevgep = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0;
 $vararg_buffer = sp;
 $__fmt = sp + 112|0;
 $__nar = sp + 100|0;
 $__o = sp + 16|0;
 $__op = sp + 12|0;
 $__oe = sp + 8|0;
 $0 = sp + 4|0;
 ;HEAP8[$__fmt+0>>0]=HEAP8[5224+0>>0]|0;HEAP8[$__fmt+1>>0]=HEAP8[5224+1>>0]|0;HEAP8[$__fmt+2>>0]=HEAP8[5224+2>>0]|0;HEAP8[$__fmt+3>>0]=HEAP8[5224+3>>0]|0;HEAP8[$__fmt+4>>0]=HEAP8[5224+4>>0]|0;HEAP8[$__fmt+5>>0]=HEAP8[5224+5>>0]|0;
 $1 = (($__fmt) + 1|0);
 $2 = (($__iob) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & 2048;
 $5 = ($4|0)==(0);
 if ($5) {
  $$0$i = $1;
 } else {
  $6 = (($__fmt) + 2|0);
  HEAP8[$1>>0] = 43;
  $$0$i = $6;
 }
 $7 = $3 & 512;
 $8 = ($7|0)==(0);
 if ($8) {
  $$13$i$ph = $$0$i;
 } else {
  $9 = (($$0$i) + 1|0);
  HEAP8[$$0$i>>0] = 35;
  $$13$i$ph = $9;
 }
 HEAP8[$$13$i$ph>>0] = 108;
 $scevgep = (($$13$i$ph) + 1|0);
 $10 = $3 & 74;
 do {
  if ((($10|0) == 64)) {
   HEAP8[$scevgep>>0] = 111;
  } else if ((($10|0) == 8)) {
   $11 = $3 & 16384;
   $12 = ($11|0)==(0);
   if ($12) {
    HEAP8[$scevgep>>0] = 120;
    break;
   } else {
    HEAP8[$scevgep>>0] = 88;
    break;
   }
  } else {
   HEAP8[$scevgep>>0] = 100;
  }
 } while(0);
 $13 = HEAP8[6328>>0]|0;
 $14 = ($13<<24>>24)==(0);
 do {
  if ($14) {
   $15 = (___cxa_guard_acquire((6328|0))|0);
   $16 = ($15|0)==(0);
   if (!($16)) {
    __THREW__ = 0;
    $17 = (invoke_iiii(461,2147483647,(6336|0),(0|0))|0);
    $18 = __THREW__; __THREW__ = 0;
    $19 = $18&1;
    if ($19) {
     $20 = ___cxa_find_matching_catch(-1,-1)|0;
     $21 = tempRet0;
     ___cxa_guard_abort((6328|0));
     ___resumeException($20|0);
     // unreachable;
    } else {
     HEAP32[6320>>2] = $17;
     ___cxa_guard_release((6328|0));
     break;
    }
   }
  }
 } while(0);
 $22 = HEAP32[6320>>2]|0;
 HEAP32[$vararg_buffer>>2] = $__v;
 $23 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,12,$22,$__fmt,$vararg_buffer)|0);
 $24 = (($__nar) + ($23)|0);
 $25 = HEAP32[$2>>2]|0;
 $26 = $25 & 176;
 do {
  if ((($26|0) == 32)) {
   $$0$i1 = $24;
  } else if ((($26|0) == 16)) {
   $27 = HEAP8[$__nar>>0]|0;
   if ((($27<<24>>24) == 43) | (($27<<24>>24) == 45)) {
    $28 = (($__nar) + 1|0);
    $$0$i1 = $28;
    break;
   }
   $29 = ($23|0)>(1);
   $30 = ($27<<24>>24)==(48);
   $or$cond$i = $29 & $30;
   if ($or$cond$i) {
    $31 = (($__nar) + 1|0);
    $32 = HEAP8[$31>>0]|0;
    if ((($32<<24>>24) == 88) | (($32<<24>>24) == 120)) {
     $33 = (($__nar) + 2|0);
     $$0$i1 = $33;
    } else {
     label = 22;
    }
   } else {
    label = 22;
   }
  } else {
   label = 22;
  }
 } while(0);
 if ((label|0) == 22) {
  $$0$i1 = $__nar;
 }
 $34 = (($__iob) + 28|0);
 $35 = HEAP32[$34>>2]|0;
 HEAP32[$0>>2] = $35;
 $36 = (($35) + 4|0);
 $37 = HEAP32[$36>>2]|0;HEAP32[$36>>2] = (($37+1)|0);
 __THREW__ = 0;
 invoke_viiiiiii(469,($__nar|0),($$0$i1|0),($24|0),($__o|0),($__op|0),($__oe|0),($0|0));
 $38 = __THREW__; __THREW__ = 0;
 $39 = $38&1;
 if ($39) {
  $50 = ___cxa_find_matching_catch(-1,-1)|0;
  $51 = tempRet0;
  $52 = HEAP32[$0>>2]|0;
  $53 = (($52) + 4|0);
  $54 = HEAP32[$53>>2]|0;HEAP32[$53>>2] = (($54+-1)|0);
  $55 = ($54|0)==(0);
  if (!($55)) {
   ___resumeException($50|0);
   // unreachable;
  }
  $56 = HEAP32[$52>>2]|0;
  $57 = (($56) + 8|0);
  $58 = HEAP32[$57>>2]|0;
  FUNCTION_TABLE_vi[$58 & 511]($52);
  ___resumeException($50|0);
  // unreachable;
 } else {
  $40 = HEAP32[$0>>2]|0;
  $41 = (($40) + 4|0);
  $42 = HEAP32[$41>>2]|0;HEAP32[$41>>2] = (($42+-1)|0);
  $43 = ($42|0)==(0);
  if (!($43)) {
   $47 = HEAP32[$__s>>2]|0;
   $48 = HEAP32[$__op>>2]|0;
   $49 = HEAP32[$__oe>>2]|0;
   __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$47,$__o,$48,$49,$__iob,$__fl);
   STACKTOP = sp;return;
  }
  $44 = HEAP32[$40>>2]|0;
  $45 = (($44) + 8|0);
  $46 = HEAP32[$45>>2]|0;
  FUNCTION_TABLE_vi[$46 & 511]($40);
  $47 = HEAP32[$__s>>2]|0;
  $48 = HEAP32[$__op>>2]|0;
  $49 = HEAP32[$__oe>>2]|0;
  __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$47,$__o,$48,$49,$__iob,$__fl);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__19__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE($__nb,$__np,$__ne,$__ob,$__op,$__oe,$__loc) {
 $__nb = $__nb|0;
 $__np = $__np|0;
 $__ne = $__ne|0;
 $__ob = $__ob|0;
 $__op = $__op|0;
 $__oe = $__oe|0;
 $__loc = $__loc|0;
 var $$ = 0, $$012$i$i = 0, $$012$i$i10 = 0, $$__dg$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0;
 var $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0;
 var $184 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__dc$012 = 0, $__dc$1 = 0, $__dg$013 = 0, $__dg$1 = 0, $__grouping = 0, $__nf$0 = 0, $__nf$1 = 0, $__p$014 = 0, $__p$i$i$i$i = 0, $__p$i$i$i$i1 = 0;
 var $lpad$phi$index = 0, $lpad$phi$index5 = 0, $or$cond = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $__p$i$i$i$i1 = sp + 16|0;
 $__p$i$i$i$i = sp;
 $__grouping = sp + 28|0;
 $0 = HEAP32[$__loc>>2]|0;
 $1 = HEAP32[6408>>2]|0;
 $2 = ($1|0)==(-1);
 if (!($2)) {
  HEAP32[$__p$i$i$i$i>>2] = 6408;
  $3 = (($__p$i$i$i$i) + 4|0);
  HEAP32[$3>>2] = (439);
  $4 = (($__p$i$i$i$i) + 8|0);
  HEAP32[$4>>2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(6408,$__p$i$i$i$i);
 }
 $5 = HEAP32[((6408 + 4|0))>>2]|0;
 $6 = (($5) + -1)|0;
 $7 = (($0) + 12|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($0) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $8;
 $12 = $10;
 $13 = (($11) - ($12))|0;
 $14 = $13 >> 2;
 $15 = ($14>>>0)>($6>>>0);
 if (!($15)) {
  $19 = (___cxa_allocate_exception(4)|0);
  HEAP32[$19>>2] = ((14256 + 8|0));
  ___cxa_throw(($19|0),(14336|0),(351|0));
  // unreachable;
 }
 $16 = (($10) + ($6<<2)|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17|0)==(0|0);
 if ($18) {
  $19 = (___cxa_allocate_exception(4)|0);
  HEAP32[$19>>2] = ((14256 + 8|0));
  ___cxa_throw(($19|0),(14336|0),(351|0));
  // unreachable;
 }
 $20 = HEAP32[$__loc>>2]|0;
 $21 = HEAP32[6568>>2]|0;
 $22 = ($21|0)==(-1);
 if (!($22)) {
  HEAP32[$__p$i$i$i$i1>>2] = 6568;
  $23 = (($__p$i$i$i$i1) + 4|0);
  HEAP32[$23>>2] = (439);
  $24 = (($__p$i$i$i$i1) + 8|0);
  HEAP32[$24>>2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(6568,$__p$i$i$i$i1);
 }
 $25 = HEAP32[((6568 + 4|0))>>2]|0;
 $26 = (($25) + -1)|0;
 $27 = (($20) + 12|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = (($20) + 8|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = $28;
 $32 = $30;
 $33 = (($31) - ($32))|0;
 $34 = $33 >> 2;
 $35 = ($34>>>0)>($26>>>0);
 if (!($35)) {
  $39 = (___cxa_allocate_exception(4)|0);
  HEAP32[$39>>2] = ((14256 + 8|0));
  ___cxa_throw(($39|0),(14336|0),(351|0));
  // unreachable;
 }
 $36 = (($30) + ($26<<2)|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = ($37|0)==(0|0);
 if ($38) {
  $39 = (___cxa_allocate_exception(4)|0);
  HEAP32[$39>>2] = ((14256 + 8|0));
  ___cxa_throw(($39|0),(14336|0),(351|0));
  // unreachable;
 }
 $40 = HEAP32[$37>>2]|0;
 $41 = (($40) + 20|0);
 $42 = HEAP32[$41>>2]|0;
 FUNCTION_TABLE_vii[$42 & 511]($__grouping,$37);
 $43 = HEAP8[$__grouping>>0]|0;
 $44 = $43 & 1;
 $45 = ($44<<24>>24)==(0);
 if ($45) {
  $48 = $43&255;
  $49 = $48 >>> 1;
  $51 = $49;
 } else {
  $46 = (($__grouping) + 4|0);
  $47 = HEAP32[$46>>2]|0;
  $51 = $47;
 }
 $50 = ($51|0)==(0);
 L23: do {
  if ($50) {
   $52 = HEAP32[$17>>2]|0;
   $53 = (($52) + 48|0);
   $54 = HEAP32[$53>>2]|0;
   __THREW__ = 0;
   (invoke_iiiii($54|0,($17|0),($__nb|0),($__ne|0),($__ob|0))|0);
   $55 = __THREW__; __THREW__ = 0;
   $56 = $55&1;
   if ($56) {
    label = 18;
   } else {
    $57 = $__ne;
    $58 = $__nb;
    $59 = (($57) - ($58))|0;
    $60 = (($__ob) + ($59<<2)|0);
    HEAP32[$__oe>>2] = $60;
    $184 = $60;
    label = 49;
   }
  } else {
   HEAP32[$__oe>>2] = $__ob;
   $71 = HEAP8[$__nb>>0]|0;
   if ((($71<<24>>24) == 43) | (($71<<24>>24) == 45)) {
    $72 = HEAP32[$17>>2]|0;
    $73 = (($72) + 44|0);
    $74 = HEAP32[$73>>2]|0;
    __THREW__ = 0;
    $75 = (invoke_iii($74|0,($17|0),($71|0))|0);
    $76 = __THREW__; __THREW__ = 0;
    $77 = $76&1;
    if ($77) {
     label = 18;
     break;
    }
    $78 = (($__nb) + 1|0);
    $79 = HEAP32[$__oe>>2]|0;
    $80 = (($79) + 4|0);
    HEAP32[$__oe>>2] = $80;
    HEAP32[$79>>2] = $75;
    $__nf$0 = $78;
   } else {
    $__nf$0 = $__nb;
   }
   $81 = $__ne;
   $82 = $__nf$0;
   $83 = (($81) - ($82))|0;
   $84 = ($83|0)>(1);
   if ($84) {
    $85 = HEAP8[$__nf$0>>0]|0;
    $86 = ($85<<24>>24)==(48);
    if ($86) {
     $87 = (($__nf$0) + 1|0);
     $88 = HEAP8[$87>>0]|0;
     if ((($88<<24>>24) == 88) | (($88<<24>>24) == 120)) {
      $89 = HEAP32[$17>>2]|0;
      $90 = (($89) + 44|0);
      $91 = HEAP32[$90>>2]|0;
      __THREW__ = 0;
      $92 = (invoke_iii($91|0,($17|0),48)|0);
      $93 = __THREW__; __THREW__ = 0;
      $94 = $93&1;
      if ($94) {
       label = 18;
       break;
      }
      $95 = HEAP32[$__oe>>2]|0;
      $96 = (($95) + 4|0);
      HEAP32[$__oe>>2] = $96;
      HEAP32[$95>>2] = $92;
      $97 = HEAP8[$87>>0]|0;
      $98 = HEAP32[$17>>2]|0;
      $99 = (($98) + 44|0);
      $100 = HEAP32[$99>>2]|0;
      __THREW__ = 0;
      $101 = (invoke_iii($100|0,($17|0),($97|0))|0);
      $102 = __THREW__; __THREW__ = 0;
      $103 = $102&1;
      if ($103) {
       label = 18;
       break;
      }
      $104 = (($__nf$0) + 2|0);
      $105 = HEAP32[$__oe>>2]|0;
      $106 = (($105) + 4|0);
      HEAP32[$__oe>>2] = $106;
      HEAP32[$105>>2] = $101;
      $__nf$1 = $104;
     } else {
      $__nf$1 = $__nf$0;
     }
    } else {
     $__nf$1 = $__nf$0;
    }
   } else {
    $__nf$1 = $__nf$0;
   }
   $107 = ($__nf$1|0)==($__ne|0);
   if (!($107)) {
    $108 = (($__ne) + -1|0);
    $109 = ($108>>>0)>($__nf$1>>>0);
    if ($109) {
     $$012$i$i = $__nf$1;$112 = $108;
     while(1) {
      $110 = HEAP8[$$012$i$i>>0]|0;
      $111 = HEAP8[$112>>0]|0;
      HEAP8[$$012$i$i>>0] = $111;
      HEAP8[$112>>0] = $110;
      $113 = (($$012$i$i) + 1|0);
      $114 = (($112) + -1|0);
      $115 = ($113>>>0)<($114>>>0);
      if ($115) {
       $$012$i$i = $113;$112 = $114;
      } else {
       break;
      }
     }
    }
   }
   $116 = HEAP32[$37>>2]|0;
   $117 = (($116) + 16|0);
   $118 = HEAP32[$117>>2]|0;
   __THREW__ = 0;
   $119 = (invoke_ii($118|0,($37|0))|0);
   $120 = __THREW__; __THREW__ = 0;
   $121 = $120&1;
   if ($121) {
    label = 18;
   } else {
    $122 = ($__nf$1>>>0)<($__ne>>>0);
    L42: do {
     if ($122) {
      $123 = (($__grouping) + 1|0);
      $124 = (($__grouping) + 4|0);
      $125 = (($__grouping) + 8|0);
      $__dc$012 = 0;$__dg$013 = 0;$__p$014 = $__nf$1;
      while(1) {
       $126 = HEAP8[$__grouping>>0]|0;
       $127 = $126 & 1;
       $128 = ($127<<24>>24)==(0);
       $129 = HEAP32[$125>>2]|0;
       $$ = $128 ? $123 : $129;
       $130 = (($$) + ($__dg$013)|0);
       $131 = HEAP8[$130>>0]|0;
       $132 = ($131<<24>>24)!=(0);
       $133 = $131 << 24 >> 24;
       $134 = ($__dc$012|0)==($133|0);
       $or$cond = $132 & $134;
       if ($or$cond) {
        $135 = HEAP32[$__oe>>2]|0;
        $136 = (($135) + 4|0);
        HEAP32[$__oe>>2] = $136;
        HEAP32[$135>>2] = $119;
        $137 = HEAP8[$__grouping>>0]|0;
        $138 = $137 & 1;
        $139 = ($138<<24>>24)==(0);
        if ($139) {
         $141 = $137&255;
         $142 = $141 >>> 1;
         $144 = $142;
        } else {
         $140 = HEAP32[$124>>2]|0;
         $144 = $140;
        }
        $143 = (($144) + -1)|0;
        $145 = ($__dg$013>>>0)<($143>>>0);
        $146 = $145&1;
        $$__dg$0 = (($146) + ($__dg$013))|0;
        $__dc$1 = 0;$__dg$1 = $$__dg$0;
       } else {
        $__dc$1 = $__dc$012;$__dg$1 = $__dg$013;
       }
       $147 = HEAP8[$__p$014>>0]|0;
       $148 = HEAP32[$17>>2]|0;
       $149 = (($148) + 44|0);
       $150 = HEAP32[$149>>2]|0;
       __THREW__ = 0;
       $151 = (invoke_iii($150|0,($17|0),($147|0))|0);
       $152 = __THREW__; __THREW__ = 0;
       $153 = $152&1;
       if ($153) {
        break;
       }
       $154 = HEAP32[$__oe>>2]|0;
       $155 = (($154) + 4|0);
       HEAP32[$__oe>>2] = $155;
       HEAP32[$154>>2] = $151;
       $156 = (($__dc$1) + 1)|0;
       $157 = (($__p$014) + 1|0);
       $158 = ($157>>>0)<($__ne>>>0);
       if ($158) {
        $__dc$012 = $156;$__dg$013 = $__dg$1;$__p$014 = $157;
       } else {
        $164 = $155;
        break L42;
       }
      }
      $61 = ___cxa_find_matching_catch(-1,-1)|0;
      $62 = tempRet0;
      $lpad$phi$index = $61;$lpad$phi$index5 = $62;
      break L23;
     } else {
      $$pre = HEAP32[$__oe>>2]|0;
      $164 = $$pre;
     }
    } while(0);
    $159 = $__nf$1;
    $160 = $__nb;
    $161 = (($159) - ($160))|0;
    $162 = (($__ob) + ($161<<2)|0);
    $163 = ($162|0)==($164|0);
    if ($163) {
     $184 = $164;
     label = 49;
    } else {
     $165 = (($164) + -4|0);
     $166 = ($165>>>0)>($162>>>0);
     if ($166) {
      $$012$i$i10 = $162;$169 = $165;
      while(1) {
       $167 = HEAP32[$$012$i$i10>>2]|0;
       $168 = HEAP32[$169>>2]|0;
       HEAP32[$$012$i$i10>>2] = $168;
       HEAP32[$169>>2] = $167;
       $170 = (($$012$i$i10) + 4|0);
       $171 = (($169) + -4|0);
       $172 = ($170>>>0)<($171>>>0);
       if ($172) {
        $$012$i$i10 = $170;$169 = $171;
       } else {
        $184 = $164;
        label = 49;
        break;
       }
      }
     } else {
      $184 = $164;
      label = 49;
     }
    }
   }
  }
 } while(0);
 if ((label|0) == 18) {
  $63 = ___cxa_find_matching_catch(-1,-1)|0;
  $64 = tempRet0;
  $lpad$phi$index = $63;$lpad$phi$index5 = $64;
 }
 else if ((label|0) == 49) {
  $173 = ($__np|0)==($__ne|0);
  if ($173) {
   $storemerge = $184;
  } else {
   $174 = $__np;
   $175 = $__nb;
   $176 = (($174) - ($175))|0;
   $177 = (($__ob) + ($176<<2)|0);
   $storemerge = $177;
  }
  HEAP32[$__op>>2] = $storemerge;
  $178 = HEAP8[$__grouping>>0]|0;
  $179 = $178 & 1;
  $180 = ($179<<24>>24)==(0);
  if ($180) {
   STACKTOP = sp;return;
  }
  $181 = (($__grouping) + 8|0);
  $182 = HEAP32[$181>>2]|0;
  $183 = ($182|0)==(0|0);
  if ($183) {
   STACKTOP = sp;return;
  }
  _free($182);
  STACKTOP = sp;return;
 }
 $65 = HEAP8[$__grouping>>0]|0;
 $66 = $65 & 1;
 $67 = ($66<<24>>24)==(0);
 if ($67) {
  ___resumeException($lpad$phi$index|0);
  // unreachable;
 }
 $68 = (($__grouping) + 8|0);
 $69 = HEAP32[$68>>2]|0;
 $70 = ($69|0)==(0|0);
 if ($70) {
  ___resumeException($lpad$phi$index|0);
  // unreachable;
 }
 _free($69);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$__s$0,$__ob,$__op,$__oe,$__iob,$__fl) {
 $agg$result = $agg$result|0;
 $__s$0 = $__s$0|0;
 $__ob = $__ob|0;
 $__op = $__op|0;
 $__oe = $__oe|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 var $$012$i$i = 0, $$03$i$i = 0, $$size$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $__ns$0 = 0, $__p$0$i1$ph = 0, $__p$0$i2 = 0, $__sp = 0;
 var $lpad$phi$i$index = 0, $lpad$phi$i$index4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $__sp = sp;
 $0 = ($__s$0|0)==(0|0);
 if ($0) {
  HEAP32[$agg$result>>2] = 0;
  STACKTOP = sp;return;
 }
 $1 = $__oe;
 $2 = $__ob;
 $3 = (($1) - ($2))|0;
 $4 = $3 >> 2;
 $5 = (($__iob) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)>($4|0);
 $8 = (($6) - ($4))|0;
 $__ns$0 = $7 ? $8 : 0;
 $9 = $__op;
 $10 = (($9) - ($2))|0;
 $11 = $10 >> 2;
 $12 = ($10|0)>(0);
 if ($12) {
  $13 = HEAP32[$__s$0>>2]|0;
  $14 = (($13) + 48|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (FUNCTION_TABLE_iiii[$15 & 511]($__s$0,$__ob,$11)|0);
  $17 = ($16|0)==($11|0);
  if (!($17)) {
   HEAP32[$agg$result>>2] = 0;
   STACKTOP = sp;return;
  }
 }
 $18 = ($__ns$0|0)>(0);
 do {
  if ($18) {
   $19 = ($__ns$0>>>0)>(1073741807);
   if ($19) {
    __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
    // unreachable;
   }
   $20 = ($__ns$0>>>0)<(2);
   L15: do {
    if ($20) {
     $21 = $__ns$0 << 1;
     $22 = $21&255;
     HEAP8[$__sp>>0] = $22;
     $23 = (($__sp) + 4|0);
     $__p$0$i1$ph = $23;
     label = 23;
    } else {
     $24 = (($__ns$0) + 4)|0;
     $25 = $24 & -4;
     $26 = $25 << 2;
     $27 = ($26|0)==(0);
     $$size$i = $27 ? 1 : $26;
     while(1) {
      $28 = (_malloc($$size$i)|0);
      $29 = ($28|0)==(0|0);
      if (!($29)) {
       label = 22;
       break;
      }
      $30 = HEAP32[15648>>2]|0;HEAP32[15648>>2] = (($30+0)|0);
      $31 = ($30|0)==(0);
      if ($31) {
       label = 19;
       break;
      }
      $32 = $30;
      __THREW__ = 0;
      invoke_v($32|0);
      $33 = __THREW__; __THREW__ = 0;
      $34 = $33&1;
      if ($34) {
       label = 15;
       break;
      }
     }
     do {
      if ((label|0) == 15) {
       $35 = ___cxa_find_matching_catch(-1,-1,15712|0)|0;
       $36 = tempRet0;
       $lpad$phi$i$index = $35;$lpad$phi$i$index4 = $36;
      }
      else if ((label|0) == 19) {
       $40 = (___cxa_allocate_exception(4)|0);
       HEAP32[$40>>2] = ((15656 + 8|0));
       __THREW__ = 0;
       invoke_viii(379,($40|0),(15712|0),(374|0));
       $41 = __THREW__; __THREW__ = 0;
       $42 = $41&1;
       if ($42) {
        $37 = ___cxa_find_matching_catch(-1,-1,15712|0)|0;
        $38 = tempRet0;
        $lpad$phi$i$index = $37;$lpad$phi$i$index4 = $38;
        break;
       } else {
        // unreachable;
       }
      }
      else if ((label|0) == 22) {
       $43 = (($__sp) + 8|0);
       HEAP32[$43>>2] = $28;
       $44 = $25 | 1;
       HEAP32[$__sp>>2] = $44;
       $45 = (($__sp) + 4|0);
       HEAP32[$45>>2] = $__ns$0;
       $46 = ($__ns$0|0)==(0);
       if ($46) {
        $__p$0$i2 = $28;
        break L15;
       } else {
        $__p$0$i1$ph = $28;
        label = 23;
        break L15;
       }
      }
     } while(0);
     $39 = ($lpad$phi$i$index4|0)<(0);
     if ($39) {
      ___cxa_call_unexpected(($lpad$phi$i$index|0));
      // unreachable;
     } else {
      ___resumeException($lpad$phi$i$index|0);
      // unreachable;
     }
    }
   } while(0);
   if ((label|0) == 23) {
    $$012$i$i = $__ns$0;$$03$i$i = $__p$0$i1$ph;
    while(1) {
     $47 = (($$012$i$i) + -1)|0;
     $48 = (($$03$i$i) + 4|0);
     HEAP32[$$03$i$i>>2] = $__fl;
     $49 = ($47|0)==(0);
     if ($49) {
      $__p$0$i2 = $__p$0$i1$ph;
      break;
     } else {
      $$012$i$i = $47;$$03$i$i = $48;
     }
    }
   }
   $50 = (($__p$0$i2) + ($__ns$0<<2)|0);
   HEAP32[$50>>2] = 0;
   $51 = HEAP8[$__sp>>0]|0;
   $52 = $51 & 1;
   $53 = ($52<<24>>24)==(0);
   if ($53) {
    $56 = (($__sp) + 4|0);
    $60 = $56;
   } else {
    $54 = (($__sp) + 8|0);
    $55 = HEAP32[$54>>2]|0;
    $60 = $55;
   }
   $57 = HEAP32[$__s$0>>2]|0;
   $58 = (($57) + 48|0);
   $59 = HEAP32[$58>>2]|0;
   __THREW__ = 0;
   $61 = (invoke_iiii($59|0,($__s$0|0),($60|0),($__ns$0|0))|0);
   $62 = __THREW__; __THREW__ = 0;
   $63 = $62&1;
   if ($63) {
    $71 = ___cxa_find_matching_catch(-1,-1)|0;
    $72 = tempRet0;
    $73 = HEAP8[$__sp>>0]|0;
    $74 = $73 & 1;
    $75 = ($74<<24>>24)==(0);
    if ($75) {
     ___resumeException($71|0);
     // unreachable;
    }
    $76 = (($__sp) + 8|0);
    $77 = HEAP32[$76>>2]|0;
    $78 = ($77|0)==(0|0);
    if ($78) {
     ___resumeException($71|0);
     // unreachable;
    }
    _free($77);
    ___resumeException($71|0);
    // unreachable;
   }
   $64 = ($61|0)==($__ns$0|0);
   if ($64) {
    $79 = HEAP8[$__sp>>0]|0;
    $80 = $79 & 1;
    $81 = ($80<<24>>24)==(0);
    if ($81) {
     break;
    }
    $82 = (($__sp) + 8|0);
    $83 = HEAP32[$82>>2]|0;
    $84 = ($83|0)==(0|0);
    if ($84) {
     break;
    }
    _free($83);
    break;
   }
   HEAP32[$agg$result>>2] = 0;
   $65 = HEAP8[$__sp>>0]|0;
   $66 = $65 & 1;
   $67 = ($66<<24>>24)==(0);
   if ($67) {
    STACKTOP = sp;return;
   }
   $68 = (($__sp) + 8|0);
   $69 = HEAP32[$68>>2]|0;
   $70 = ($69|0)==(0|0);
   if ($70) {
    STACKTOP = sp;return;
   }
   _free($69);
   STACKTOP = sp;return;
  }
 } while(0);
 $85 = (($1) - ($9))|0;
 $86 = $85 >> 2;
 $87 = ($85|0)>(0);
 if ($87) {
  $88 = HEAP32[$__s$0>>2]|0;
  $89 = (($88) + 48|0);
  $90 = HEAP32[$89>>2]|0;
  $91 = (FUNCTION_TABLE_iiii[$90 & 511]($__s$0,$__op,$86)|0);
  $92 = ($91|0)==($86|0);
  if (!($92)) {
   HEAP32[$agg$result>>2] = 0;
   STACKTOP = sp;return;
  }
 }
 HEAP32[$5>>2] = 0;
 HEAP32[$agg$result>>2] = $__s$0;
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwx($agg$result,$this,$__s,$__iob,$__fl,$0,$1) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i = 0, $$0$i1 = 0, $$13$i$ph = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, $lftr$limit = 0, $or$cond$i = 0, $vararg_buffer = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0;
 $vararg_buffer = sp + 8|0;
 $__fmt = sp;
 $__nar = sp + 192|0;
 $__o = sp + 28|0;
 $__op = sp + 24|0;
 $__oe = sp + 20|0;
 $2 = sp + 16|0;
 $3 = $__fmt;
 $4 = $3;
 HEAP32[$4>>2] = 37;
 $5 = (($3) + 4)|0;
 $6 = $5;
 HEAP32[$6>>2] = 0;
 $7 = (($__fmt) + 1|0);
 $8 = (($__iob) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $9 & 2048;
 $11 = ($10|0)==(0);
 if ($11) {
  $$0$i = $7;
 } else {
  $12 = (($__fmt) + 2|0);
  HEAP8[$7>>0] = 43;
  $$0$i = $12;
 }
 $13 = $9 & 512;
 $14 = ($13|0)==(0);
 if ($14) {
  $$13$i$ph = $$0$i;
 } else {
  $15 = (($$0$i) + 1|0);
  HEAP8[$$0$i>>0] = 35;
  $$13$i$ph = $15;
 }
 $lftr$limit = (($$13$i$ph) + 2|0);
 $16 = (($$13$i$ph) + 1|0);
 HEAP8[$$13$i$ph>>0] = 108;
 HEAP8[$16>>0] = 108;
 $17 = $9 & 74;
 do {
  if ((($17|0) == 64)) {
   HEAP8[$lftr$limit>>0] = 111;
  } else if ((($17|0) == 8)) {
   $18 = $9 & 16384;
   $19 = ($18|0)==(0);
   if ($19) {
    HEAP8[$lftr$limit>>0] = 120;
    break;
   } else {
    HEAP8[$lftr$limit>>0] = 88;
    break;
   }
  } else {
   HEAP8[$lftr$limit>>0] = 100;
  }
 } while(0);
 $20 = HEAP8[6328>>0]|0;
 $21 = ($20<<24>>24)==(0);
 do {
  if ($21) {
   $22 = (___cxa_guard_acquire((6328|0))|0);
   $23 = ($22|0)==(0);
   if (!($23)) {
    __THREW__ = 0;
    $24 = (invoke_iiii(461,2147483647,(6336|0),(0|0))|0);
    $25 = __THREW__; __THREW__ = 0;
    $26 = $25&1;
    if ($26) {
     $27 = ___cxa_find_matching_catch(-1,-1)|0;
     $28 = tempRet0;
     ___cxa_guard_abort((6328|0));
     ___resumeException($27|0);
     // unreachable;
    } else {
     HEAP32[6320>>2] = $24;
     ___cxa_guard_release((6328|0));
     break;
    }
   }
  }
 } while(0);
 $29 = HEAP32[6320>>2]|0;
 $30 = $vararg_buffer;
 $31 = $30;
 HEAP32[$31>>2] = $0;
 $32 = (($30) + 4)|0;
 $33 = $32;
 HEAP32[$33>>2] = $1;
 $34 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,22,$29,$__fmt,$vararg_buffer)|0);
 $35 = (($__nar) + ($34)|0);
 $36 = HEAP32[$8>>2]|0;
 $37 = $36 & 176;
 do {
  if ((($37|0) == 32)) {
   $$0$i1 = $35;
  } else if ((($37|0) == 16)) {
   $38 = HEAP8[$__nar>>0]|0;
   if ((($38<<24>>24) == 43) | (($38<<24>>24) == 45)) {
    $39 = (($__nar) + 1|0);
    $$0$i1 = $39;
    break;
   }
   $40 = ($34|0)>(1);
   $41 = ($38<<24>>24)==(48);
   $or$cond$i = $40 & $41;
   if ($or$cond$i) {
    $42 = (($__nar) + 1|0);
    $43 = HEAP8[$42>>0]|0;
    if ((($43<<24>>24) == 88) | (($43<<24>>24) == 120)) {
     $44 = (($__nar) + 2|0);
     $$0$i1 = $44;
    } else {
     label = 22;
    }
   } else {
    label = 22;
   }
  } else {
   label = 22;
  }
 } while(0);
 if ((label|0) == 22) {
  $$0$i1 = $__nar;
 }
 $45 = (($__iob) + 28|0);
 $46 = HEAP32[$45>>2]|0;
 HEAP32[$2>>2] = $46;
 $47 = (($46) + 4|0);
 $48 = HEAP32[$47>>2]|0;HEAP32[$47>>2] = (($48+1)|0);
 __THREW__ = 0;
 invoke_viiiiiii(469,($__nar|0),($$0$i1|0),($35|0),($__o|0),($__op|0),($__oe|0),($2|0));
 $49 = __THREW__; __THREW__ = 0;
 $50 = $49&1;
 if ($50) {
  $61 = ___cxa_find_matching_catch(-1,-1)|0;
  $62 = tempRet0;
  $63 = HEAP32[$2>>2]|0;
  $64 = (($63) + 4|0);
  $65 = HEAP32[$64>>2]|0;HEAP32[$64>>2] = (($65+-1)|0);
  $66 = ($65|0)==(0);
  if (!($66)) {
   ___resumeException($61|0);
   // unreachable;
  }
  $67 = HEAP32[$63>>2]|0;
  $68 = (($67) + 8|0);
  $69 = HEAP32[$68>>2]|0;
  FUNCTION_TABLE_vi[$69 & 511]($63);
  ___resumeException($61|0);
  // unreachable;
 } else {
  $51 = HEAP32[$2>>2]|0;
  $52 = (($51) + 4|0);
  $53 = HEAP32[$52>>2]|0;HEAP32[$52>>2] = (($53+-1)|0);
  $54 = ($53|0)==(0);
  if (!($54)) {
   $58 = HEAP32[$__s>>2]|0;
   $59 = HEAP32[$__op>>2]|0;
   $60 = HEAP32[$__oe>>2]|0;
   __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$58,$__o,$59,$60,$__iob,$__fl);
   STACKTOP = sp;return;
  }
  $55 = HEAP32[$51>>2]|0;
  $56 = (($55) + 8|0);
  $57 = HEAP32[$56>>2]|0;
  FUNCTION_TABLE_vi[$57 & 511]($51);
  $58 = HEAP32[$__s>>2]|0;
  $59 = HEAP32[$__op>>2]|0;
  $60 = HEAP32[$__oe>>2]|0;
  __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$58,$__o,$59,$60,$__iob,$__fl);
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwm($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = $__v|0;
 var $$0$i = 0, $$0$i1 = 0, $$13$i$ph = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, $or$cond$i = 0, $scevgep = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0;
 $vararg_buffer = sp;
 $__fmt = sp + 112|0;
 $__nar = sp + 100|0;
 $__o = sp + 16|0;
 $__op = sp + 12|0;
 $__oe = sp + 8|0;
 $0 = sp + 4|0;
 ;HEAP8[$__fmt+0>>0]=HEAP8[5224+0>>0]|0;HEAP8[$__fmt+1>>0]=HEAP8[5224+1>>0]|0;HEAP8[$__fmt+2>>0]=HEAP8[5224+2>>0]|0;HEAP8[$__fmt+3>>0]=HEAP8[5224+3>>0]|0;HEAP8[$__fmt+4>>0]=HEAP8[5224+4>>0]|0;HEAP8[$__fmt+5>>0]=HEAP8[5224+5>>0]|0;
 $1 = (($__fmt) + 1|0);
 $2 = (($__iob) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & 2048;
 $5 = ($4|0)==(0);
 if ($5) {
  $$0$i = $1;
 } else {
  $6 = (($__fmt) + 2|0);
  HEAP8[$1>>0] = 43;
  $$0$i = $6;
 }
 $7 = $3 & 512;
 $8 = ($7|0)==(0);
 if ($8) {
  $$13$i$ph = $$0$i;
 } else {
  $9 = (($$0$i) + 1|0);
  HEAP8[$$0$i>>0] = 35;
  $$13$i$ph = $9;
 }
 HEAP8[$$13$i$ph>>0] = 108;
 $scevgep = (($$13$i$ph) + 1|0);
 $10 = $3 & 74;
 do {
  if ((($10|0) == 64)) {
   HEAP8[$scevgep>>0] = 111;
  } else if ((($10|0) == 8)) {
   $11 = $3 & 16384;
   $12 = ($11|0)==(0);
   if ($12) {
    HEAP8[$scevgep>>0] = 120;
    break;
   } else {
    HEAP8[$scevgep>>0] = 88;
    break;
   }
  } else {
   HEAP8[$scevgep>>0] = 117;
  }
 } while(0);
 $13 = HEAP8[6328>>0]|0;
 $14 = ($13<<24>>24)==(0);
 do {
  if ($14) {
   $15 = (___cxa_guard_acquire((6328|0))|0);
   $16 = ($15|0)==(0);
   if (!($16)) {
    __THREW__ = 0;
    $17 = (invoke_iiii(461,2147483647,(6336|0),(0|0))|0);
    $18 = __THREW__; __THREW__ = 0;
    $19 = $18&1;
    if ($19) {
     $20 = ___cxa_find_matching_catch(-1,-1)|0;
     $21 = tempRet0;
     ___cxa_guard_abort((6328|0));
     ___resumeException($20|0);
     // unreachable;
    } else {
     HEAP32[6320>>2] = $17;
     ___cxa_guard_release((6328|0));
     break;
    }
   }
  }
 } while(0);
 $22 = HEAP32[6320>>2]|0;
 HEAP32[$vararg_buffer>>2] = $__v;
 $23 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,12,$22,$__fmt,$vararg_buffer)|0);
 $24 = (($__nar) + ($23)|0);
 $25 = HEAP32[$2>>2]|0;
 $26 = $25 & 176;
 do {
  if ((($26|0) == 32)) {
   $$0$i1 = $24;
  } else if ((($26|0) == 16)) {
   $27 = HEAP8[$__nar>>0]|0;
   if ((($27<<24>>24) == 43) | (($27<<24>>24) == 45)) {
    $28 = (($__nar) + 1|0);
    $$0$i1 = $28;
    break;
   }
   $29 = ($23|0)>(1);
   $30 = ($27<<24>>24)==(48);
   $or$cond$i = $29 & $30;
   if ($or$cond$i) {
    $31 = (($__nar) + 1|0);
    $32 = HEAP8[$31>>0]|0;
    if ((($32<<24>>24) == 88) | (($32<<24>>24) == 120)) {
     $33 = (($__nar) + 2|0);
     $$0$i1 = $33;
    } else {
     label = 22;
    }
   } else {
    label = 22;
   }
  } else {
   label = 22;
  }
 } while(0);
 if ((label|0) == 22) {
  $$0$i1 = $__nar;
 }
 $34 = (($__iob) + 28|0);
 $35 = HEAP32[$34>>2]|0;
 HEAP32[$0>>2] = $35;
 $36 = (($35) + 4|0);
 $37 = HEAP32[$36>>2]|0;HEAP32[$36>>2] = (($37+1)|0);
 __THREW__ = 0;
 invoke_viiiiiii(469,($__nar|0),($$0$i1|0),($24|0),($__o|0),($__op|0),($__oe|0),($0|0));
 $38 = __THREW__; __THREW__ = 0;
 $39 = $38&1;
 if ($39) {
  $50 = ___cxa_find_matching_catch(-1,-1)|0;
  $51 = tempRet0;
  $52 = HEAP32[$0>>2]|0;
  $53 = (($52) + 4|0);
  $54 = HEAP32[$53>>2]|0;HEAP32[$53>>2] = (($54+-1)|0);
  $55 = ($54|0)==(0);
  if (!($55)) {
   ___resumeException($50|0);
   // unreachable;
  }
  $56 = HEAP32[$52>>2]|0;
  $57 = (($56) + 8|0);
  $58 = HEAP32[$57>>2]|0;
  FUNCTION_TABLE_vi[$58 & 511]($52);
  ___resumeException($50|0);
  // unreachable;
 } else {
  $40 = HEAP32[$0>>2]|0;
  $41 = (($40) + 4|0);
  $42 = HEAP32[$41>>2]|0;HEAP32[$41>>2] = (($42+-1)|0);
  $43 = ($42|0)==(0);
  if (!($43)) {
   $47 = HEAP32[$__s>>2]|0;
   $48 = HEAP32[$__op>>2]|0;
   $49 = HEAP32[$__oe>>2]|0;
   __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$47,$__o,$48,$49,$__iob,$__fl);
   STACKTOP = sp;return;
  }
  $44 = HEAP32[$40>>2]|0;
  $45 = (($44) + 8|0);
  $46 = HEAP32[$45>>2]|0;
  FUNCTION_TABLE_vi[$46 & 511]($40);
  $47 = HEAP32[$__s>>2]|0;
  $48 = HEAP32[$__op>>2]|0;
  $49 = HEAP32[$__oe>>2]|0;
  __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$47,$__o,$48,$49,$__iob,$__fl);
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwy($agg$result,$this,$__s,$__iob,$__fl,$0,$1) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i = 0, $$0$i1 = 0, $$13$i$ph = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, $lftr$limit = 0, $or$cond$i = 0, $vararg_buffer = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0;
 $vararg_buffer = sp + 8|0;
 $__fmt = sp;
 $__nar = sp + 200|0;
 $__o = sp + 28|0;
 $__op = sp + 24|0;
 $__oe = sp + 20|0;
 $2 = sp + 16|0;
 $3 = $__fmt;
 $4 = $3;
 HEAP32[$4>>2] = 37;
 $5 = (($3) + 4)|0;
 $6 = $5;
 HEAP32[$6>>2] = 0;
 $7 = (($__fmt) + 1|0);
 $8 = (($__iob) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $9 & 2048;
 $11 = ($10|0)==(0);
 if ($11) {
  $$0$i = $7;
 } else {
  $12 = (($__fmt) + 2|0);
  HEAP8[$7>>0] = 43;
  $$0$i = $12;
 }
 $13 = $9 & 512;
 $14 = ($13|0)==(0);
 if ($14) {
  $$13$i$ph = $$0$i;
 } else {
  $15 = (($$0$i) + 1|0);
  HEAP8[$$0$i>>0] = 35;
  $$13$i$ph = $15;
 }
 $lftr$limit = (($$13$i$ph) + 2|0);
 $16 = (($$13$i$ph) + 1|0);
 HEAP8[$$13$i$ph>>0] = 108;
 HEAP8[$16>>0] = 108;
 $17 = $9 & 74;
 do {
  if ((($17|0) == 64)) {
   HEAP8[$lftr$limit>>0] = 111;
  } else if ((($17|0) == 8)) {
   $18 = $9 & 16384;
   $19 = ($18|0)==(0);
   if ($19) {
    HEAP8[$lftr$limit>>0] = 120;
    break;
   } else {
    HEAP8[$lftr$limit>>0] = 88;
    break;
   }
  } else {
   HEAP8[$lftr$limit>>0] = 117;
  }
 } while(0);
 $20 = HEAP8[6328>>0]|0;
 $21 = ($20<<24>>24)==(0);
 do {
  if ($21) {
   $22 = (___cxa_guard_acquire((6328|0))|0);
   $23 = ($22|0)==(0);
   if (!($23)) {
    __THREW__ = 0;
    $24 = (invoke_iiii(461,2147483647,(6336|0),(0|0))|0);
    $25 = __THREW__; __THREW__ = 0;
    $26 = $25&1;
    if ($26) {
     $27 = ___cxa_find_matching_catch(-1,-1)|0;
     $28 = tempRet0;
     ___cxa_guard_abort((6328|0));
     ___resumeException($27|0);
     // unreachable;
    } else {
     HEAP32[6320>>2] = $24;
     ___cxa_guard_release((6328|0));
     break;
    }
   }
  }
 } while(0);
 $29 = HEAP32[6320>>2]|0;
 $30 = $vararg_buffer;
 $31 = $30;
 HEAP32[$31>>2] = $0;
 $32 = (($30) + 4)|0;
 $33 = $32;
 HEAP32[$33>>2] = $1;
 $34 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,23,$29,$__fmt,$vararg_buffer)|0);
 $35 = (($__nar) + ($34)|0);
 $36 = HEAP32[$8>>2]|0;
 $37 = $36 & 176;
 do {
  if ((($37|0) == 32)) {
   $$0$i1 = $35;
  } else if ((($37|0) == 16)) {
   $38 = HEAP8[$__nar>>0]|0;
   if ((($38<<24>>24) == 43) | (($38<<24>>24) == 45)) {
    $39 = (($__nar) + 1|0);
    $$0$i1 = $39;
    break;
   }
   $40 = ($34|0)>(1);
   $41 = ($38<<24>>24)==(48);
   $or$cond$i = $40 & $41;
   if ($or$cond$i) {
    $42 = (($__nar) + 1|0);
    $43 = HEAP8[$42>>0]|0;
    if ((($43<<24>>24) == 88) | (($43<<24>>24) == 120)) {
     $44 = (($__nar) + 2|0);
     $$0$i1 = $44;
    } else {
     label = 22;
    }
   } else {
    label = 22;
   }
  } else {
   label = 22;
  }
 } while(0);
 if ((label|0) == 22) {
  $$0$i1 = $__nar;
 }
 $45 = (($__iob) + 28|0);
 $46 = HEAP32[$45>>2]|0;
 HEAP32[$2>>2] = $46;
 $47 = (($46) + 4|0);
 $48 = HEAP32[$47>>2]|0;HEAP32[$47>>2] = (($48+1)|0);
 __THREW__ = 0;
 invoke_viiiiiii(469,($__nar|0),($$0$i1|0),($35|0),($__o|0),($__op|0),($__oe|0),($2|0));
 $49 = __THREW__; __THREW__ = 0;
 $50 = $49&1;
 if ($50) {
  $61 = ___cxa_find_matching_catch(-1,-1)|0;
  $62 = tempRet0;
  $63 = HEAP32[$2>>2]|0;
  $64 = (($63) + 4|0);
  $65 = HEAP32[$64>>2]|0;HEAP32[$64>>2] = (($65+-1)|0);
  $66 = ($65|0)==(0);
  if (!($66)) {
   ___resumeException($61|0);
   // unreachable;
  }
  $67 = HEAP32[$63>>2]|0;
  $68 = (($67) + 8|0);
  $69 = HEAP32[$68>>2]|0;
  FUNCTION_TABLE_vi[$69 & 511]($63);
  ___resumeException($61|0);
  // unreachable;
 } else {
  $51 = HEAP32[$2>>2]|0;
  $52 = (($51) + 4|0);
  $53 = HEAP32[$52>>2]|0;HEAP32[$52>>2] = (($53+-1)|0);
  $54 = ($53|0)==(0);
  if (!($54)) {
   $58 = HEAP32[$__s>>2]|0;
   $59 = HEAP32[$__op>>2]|0;
   $60 = HEAP32[$__oe>>2]|0;
   __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$58,$__o,$59,$60,$__iob,$__fl);
   STACKTOP = sp;return;
  }
  $55 = HEAP32[$51>>2]|0;
  $56 = (($55) + 8|0);
  $57 = HEAP32[$56>>2]|0;
  FUNCTION_TABLE_vi[$57 & 511]($51);
  $58 = HEAP32[$__s>>2]|0;
  $59 = HEAP32[$__op>>2]|0;
  $60 = HEAP32[$__oe>>2]|0;
  __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$58,$__o,$59,$60,$__iob,$__fl);
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwd($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = +$__v;
 var $$0 = 0, $$0$i = 0, $$0$i7 = 0, $$01 = 0, $$1$i = 0, $$116 = 0, $$1215 = 0, $$pre17 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $__fmt = 0, $__nar = 0, $__nb = 0, $__nc$0 = 0, $__nc$1 = 0, $__nc$2 = 0, $__o = 0, $__ob$0 = 0, $__oe = 0, $__op = 0, $eh$lpad$body$index7Z2D = 0, $eh$lpad$body$indexZ2D = 0, $or$cond$i = 0, $specify_precision$0$off0$ph$i10 = 0, $vararg_buffer = 0, $vararg_buffer13 = 0, $vararg_buffer16 = 0;
 var $vararg_buffer20 = 0, $vararg_ptr12 = 0, $vararg_ptr19 = 0, $vararg_ptr23 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0;
 $vararg_buffer20 = sp + 48|0;
 $vararg_buffer16 = sp + 32|0;
 $vararg_buffer13 = sp + 24|0;
 $vararg_buffer = sp + 8|0;
 $__fmt = sp;
 $__nar = sp + 308|0;
 $__nb = sp + 304|0;
 $__o = sp + 76|0;
 $__op = sp + 72|0;
 $__oe = sp + 68|0;
 $0 = sp + 64|0;
 $1 = sp + 60|0;
 $2 = $__fmt;
 $3 = $2;
 HEAP32[$3>>2] = 37;
 $4 = (($2) + 4)|0;
 $5 = $4;
 HEAP32[$5>>2] = 0;
 $6 = (($__fmt) + 1|0);
 $7 = (($__iob) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $8 & 2048;
 $10 = ($9|0)==(0);
 if ($10) {
  $$0$i = $6;
 } else {
  $11 = (($__fmt) + 2|0);
  HEAP8[$6>>0] = 43;
  $$0$i = $11;
 }
 $12 = $8 & 1024;
 $13 = ($12|0)==(0);
 if ($13) {
  $$1$i = $$0$i;
 } else {
  $14 = (($$0$i) + 1|0);
  HEAP8[$$0$i>>0] = 35;
  $$1$i = $14;
 }
 $15 = $8 & 260;
 $16 = $8 >>> 14;
 $17 = ($15|0)==(260);
 do {
  if ($17) {
   $24 = $16 & 1;
   $25 = ($24|0)==(0);
   if ($25) {
    HEAP8[$$1$i>>0] = 97;
    $specify_precision$0$off0$ph$i10 = 0;
    break;
   } else {
    HEAP8[$$1$i>>0] = 65;
    $specify_precision$0$off0$ph$i10 = 0;
    break;
   }
  } else {
   $18 = (($$1$i) + 1|0);
   HEAP8[$$1$i>>0] = 46;
   $19 = (($$1$i) + 2|0);
   HEAP8[$18>>0] = 42;
   if ((($15|0) == 256)) {
    $22 = $16 & 1;
    $23 = ($22|0)==(0);
    if ($23) {
     HEAP8[$19>>0] = 101;
     $specify_precision$0$off0$ph$i10 = 1;
     break;
    } else {
     HEAP8[$19>>0] = 69;
     $specify_precision$0$off0$ph$i10 = 1;
     break;
    }
   } else if ((($15|0) == 4)) {
    $20 = $16 & 1;
    $21 = ($20|0)==(0);
    if ($21) {
     HEAP8[$19>>0] = 102;
     $specify_precision$0$off0$ph$i10 = 1;
     break;
    } else {
     HEAP8[$19>>0] = 70;
     $specify_precision$0$off0$ph$i10 = 1;
     break;
    }
   } else {
    $26 = $16 & 1;
    $27 = ($26|0)==(0);
    if ($27) {
     HEAP8[$19>>0] = 103;
     $specify_precision$0$off0$ph$i10 = 1;
     break;
    } else {
     HEAP8[$19>>0] = 71;
     $specify_precision$0$off0$ph$i10 = 1;
     break;
    }
   }
  }
 } while(0);
 HEAP32[$__nb>>2] = $__nar;
 $28 = HEAP8[6328>>0]|0;
 $29 = ($28<<24>>24)==(0);
 do {
  if ($29) {
   $30 = (___cxa_guard_acquire((6328|0))|0);
   $31 = ($30|0)==(0);
   if (!($31)) {
    __THREW__ = 0;
    $32 = (invoke_iiii(461,2147483647,(6336|0),(0|0))|0);
    $33 = __THREW__; __THREW__ = 0;
    $34 = $33&1;
    if ($34) {
     $35 = ___cxa_find_matching_catch(-1,-1)|0;
     $36 = tempRet0;
     ___cxa_guard_abort((6328|0));
     ___resumeException($35|0);
     // unreachable;
    } else {
     HEAP32[6320>>2] = $32;
     ___cxa_guard_release((6328|0));
     break;
    }
   }
  }
 } while(0);
 $37 = HEAP32[6320>>2]|0;
 if ($specify_precision$0$off0$ph$i10) {
  $38 = (($__iob) + 8|0);
  $39 = HEAP32[$38>>2]|0;
  HEAP32[$vararg_buffer>>2] = $39;
  $vararg_ptr12 = (($vararg_buffer) + 4|0);
  HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_ptr12>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr12+4>>2]=HEAP32[tempDoublePtr+4>>2];
  $40 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,30,$37,$__fmt,$vararg_buffer)|0);
  $__nc$0 = $40;
 } else {
  HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_buffer13>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer13+4>>2]=HEAP32[tempDoublePtr+4>>2];
  $41 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,30,$37,$__fmt,$vararg_buffer13)|0);
  $__nc$0 = $41;
 }
 $42 = ($__nc$0|0)>(29);
 do {
  if ($42) {
   $43 = HEAP8[6328>>0]|0;
   $44 = ($43<<24>>24)==(0);
   L41: do {
    if ($specify_precision$0$off0$ph$i10) {
     do {
      if ($44) {
       $45 = (___cxa_guard_acquire((6328|0))|0);
       $46 = ($45|0)==(0);
       if (!($46)) {
        __THREW__ = 0;
        $47 = (invoke_iiii(461,2147483647,(6336|0),(0|0))|0);
        $48 = __THREW__; __THREW__ = 0;
        $49 = $48&1;
        if ($49) {
         $50 = ___cxa_find_matching_catch(-1,-1)|0;
         $51 = tempRet0;
         ___cxa_guard_abort((6328|0));
         $eh$lpad$body$index7Z2D = $51;$eh$lpad$body$indexZ2D = $50;
         break L41;
        } else {
         HEAP32[6320>>2] = $47;
         ___cxa_guard_release((6328|0));
         break;
        }
       }
      }
     } while(0);
     $52 = HEAP32[6320>>2]|0;
     $53 = (($__iob) + 8|0);
     $54 = HEAP32[$53>>2]|0;
     __THREW__ = 0;
     HEAP32[$vararg_buffer16>>2] = $54;
     $vararg_ptr19 = (($vararg_buffer16) + 4|0);
     HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_ptr19>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr19+4>>2]=HEAP32[tempDoublePtr+4>>2];
     $55 = (invoke_iiiii(466,($__nb|0),($52|0),($__fmt|0),($vararg_buffer16|0))|0);
     $56 = __THREW__; __THREW__ = 0;
     $57 = $56&1;
     if ($57) {
      label = 36;
     } else {
      $__nc$1 = $55;
      label = 44;
     }
    } else {
     do {
      if ($44) {
       $60 = (___cxa_guard_acquire((6328|0))|0);
       $61 = ($60|0)==(0);
       if (!($61)) {
        __THREW__ = 0;
        $62 = (invoke_iiii(461,2147483647,(6336|0),(0|0))|0);
        $63 = __THREW__; __THREW__ = 0;
        $64 = $63&1;
        if ($64) {
         $65 = ___cxa_find_matching_catch(-1,-1)|0;
         $66 = tempRet0;
         ___cxa_guard_abort((6328|0));
         $eh$lpad$body$index7Z2D = $66;$eh$lpad$body$indexZ2D = $65;
         break L41;
        } else {
         HEAP32[6320>>2] = $62;
         ___cxa_guard_release((6328|0));
         break;
        }
       }
      }
     } while(0);
     $67 = HEAP32[6320>>2]|0;
     $68 = (($__iob) + 8|0);
     $69 = HEAP32[$68>>2]|0;
     __THREW__ = 0;
     HEAP32[$vararg_buffer20>>2] = $69;
     $vararg_ptr23 = (($vararg_buffer20) + 4|0);
     HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_ptr23>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr23+4>>2]=HEAP32[tempDoublePtr+4>>2];
     $70 = (invoke_iiiii(466,($__nb|0),($67|0),($__fmt|0),($vararg_buffer20|0))|0);
     $71 = __THREW__; __THREW__ = 0;
     $72 = $71&1;
     if ($72) {
      label = 36;
     } else {
      $__nc$1 = $70;
      label = 44;
     }
    }
   } while(0);
   if ((label|0) == 44) {
    $73 = HEAP32[$__nb>>2]|0;
    $74 = ($73|0)==(0|0);
    if (!($74)) {
     $121 = $73;$79 = $73;$__nc$2 = $__nc$1;
     break;
    }
    $75 = (___cxa_allocate_exception(4)|0);
    HEAP32[$75>>2] = ((15656 + 8|0));
    __THREW__ = 0;
    invoke_viii(379,($75|0),(15712|0),(374|0));
    $76 = __THREW__; __THREW__ = 0;
    $77 = $76&1;
    if ($77) {
     label = 36;
    } else {
     // unreachable;
    }
   }
   if ((label|0) == 36) {
    $58 = ___cxa_find_matching_catch(-1,-1)|0;
    $59 = tempRet0;
    $eh$lpad$body$index7Z2D = $59;$eh$lpad$body$indexZ2D = $58;
   }
   $$116 = $eh$lpad$body$indexZ2D;$$1215 = $eh$lpad$body$index7Z2D;
   ___resumeException($$116|0);
   // unreachable;
  } else {
   $$pre17 = HEAP32[$__nb>>2]|0;
   $121 = 0;$79 = $$pre17;$__nc$2 = $__nc$0;
  }
 } while(0);
 $78 = (($79) + ($__nc$2)|0);
 $80 = HEAP32[$7>>2]|0;
 $81 = $80 & 176;
 do {
  if ((($81|0) == 16)) {
   $82 = HEAP8[$79>>0]|0;
   if ((($82<<24>>24) == 43) | (($82<<24>>24) == 45)) {
    $83 = (($79) + 1|0);
    $$0$i7 = $83;
    break;
   }
   $84 = ($__nc$2|0)>(1);
   $85 = ($82<<24>>24)==(48);
   $or$cond$i = $84 & $85;
   if ($or$cond$i) {
    $86 = (($79) + 1|0);
    $87 = HEAP8[$86>>0]|0;
    if ((($87<<24>>24) == 88) | (($87<<24>>24) == 120)) {
     $88 = (($79) + 2|0);
     $$0$i7 = $88;
    } else {
     label = 53;
    }
   } else {
    label = 53;
   }
  } else if ((($81|0) == 32)) {
   $$0$i7 = $78;
  } else {
   label = 53;
  }
 } while(0);
 if ((label|0) == 53) {
  $$0$i7 = $79;
 }
 $89 = ($79|0)==($__nar|0);
 if ($89) {
  $102 = $__nar;$119 = 0;$__ob$0 = $__o;
  label = 59;
 } else {
  $90 = $__nc$2 << 3;
  $91 = (_malloc($90)|0);
  $92 = ($91|0)==(0|0);
  if ($92) {
   $93 = (___cxa_allocate_exception(4)|0);
   HEAP32[$93>>2] = ((15656 + 8|0));
   __THREW__ = 0;
   invoke_viii(379,($93|0),(15712|0),(374|0));
   $94 = __THREW__; __THREW__ = 0;
   $95 = $94&1;
   if ($95) {
    $134 = 0;
    label = 58;
   } else {
    // unreachable;
   }
  } else {
   $102 = $79;$119 = $91;$__ob$0 = $91;
   label = 59;
  }
 }
 do {
  if ((label|0) == 59) {
   $98 = (($__iob) + 28|0);
   $99 = HEAP32[$98>>2]|0;
   HEAP32[$0>>2] = $99;
   $100 = (($99) + 4|0);
   $101 = HEAP32[$100>>2]|0;HEAP32[$100>>2] = (($101+1)|0);
   __THREW__ = 0;
   invoke_viiiiiii(470,($102|0),($$0$i7|0),($78|0),($__ob$0|0),($__op|0),($__oe|0),($0|0));
   $103 = __THREW__; __THREW__ = 0;
   $104 = $103&1;
   if ($104) {
    $122 = ___cxa_find_matching_catch(-1,-1)|0;
    $123 = tempRet0;
    $124 = HEAP32[$0>>2]|0;
    $125 = (($124) + 4|0);
    $126 = HEAP32[$125>>2]|0;HEAP32[$125>>2] = (($126+-1)|0);
    $127 = ($126|0)==(0);
    if (!($127)) {
     $$0 = $122;$$01 = $123;$132 = $119;
     break;
    }
    $128 = HEAP32[$124>>2]|0;
    $129 = (($128) + 8|0);
    $130 = HEAP32[$129>>2]|0;
    FUNCTION_TABLE_vi[$130 & 511]($124);
    $$0 = $122;$$01 = $123;$132 = $119;
    break;
   }
   $105 = HEAP32[$0>>2]|0;
   $106 = (($105) + 4|0);
   $107 = HEAP32[$106>>2]|0;HEAP32[$106>>2] = (($107+-1)|0);
   $108 = ($107|0)==(0);
   if ($108) {
    $109 = HEAP32[$105>>2]|0;
    $110 = (($109) + 8|0);
    $111 = HEAP32[$110>>2]|0;
    FUNCTION_TABLE_vi[$111 & 511]($105);
   }
   $112 = HEAP32[$__s>>2]|0;
   $113 = HEAP32[$__op>>2]|0;
   $114 = HEAP32[$__oe>>2]|0;
   __THREW__ = 0;
   invoke_viiiiiii(471,($1|0),($112|0),($__ob$0|0),($113|0),($114|0),($__iob|0),($__fl|0));
   $115 = __THREW__; __THREW__ = 0;
   $116 = $115&1;
   if ($116) {
    $134 = $119;
    label = 58;
   } else {
    $117 = HEAP32[$1>>2]|0;
    HEAP32[$__s>>2] = $117;
    HEAP32[$agg$result>>2] = $117;
    $118 = ($119|0)==(0|0);
    if (!($118)) {
     _free($119);
    }
    $120 = ($121|0)==(0|0);
    if ($120) {
     STACKTOP = sp;return;
    }
    _free($121);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 58) {
  $96 = ___cxa_find_matching_catch(-1,-1)|0;
  $97 = tempRet0;
  $$0 = $96;$$01 = $97;$132 = $134;
 }
 $131 = ($132|0)==(0|0);
 if (!($131)) {
  _free($132);
 }
 $133 = ($121|0)==(0|0);
 if ($133) {
  $$116 = $$0;$$1215 = $$01;
  ___resumeException($$116|0);
  // unreachable;
 }
 _free($121);
 $$116 = $$0;$$1215 = $$01;
 ___resumeException($$116|0);
 // unreachable;
}
function __ZNSt3__19__num_putIwE23__widen_and_group_floatEPcS2_S2_PwRS3_S4_RKNS_6localeE($__nb,$__np,$__ne,$__ob,$__op,$__oe,$__loc) {
 $__nb = $__nb|0;
 $__np = $__np|0;
 $__ne = $__ne|0;
 $__ob = $__ob|0;
 $__op = $__op|0;
 $__oe = $__oe|0;
 $__loc = $__loc|0;
 var $$ = 0, $$012$i$i = 0, $$012$i$i13 = 0, $$__dg$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0;
 var $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0;
 var $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0;
 var $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0;
 var $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0;
 var $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__dc$024 = 0, $__dc$1 = 0, $__dg$025 = 0;
 var $__dg$1 = 0, $__grouping = 0, $__nf$0 = 0, $__nf$1 = 0, $__nf$220 = 0, $__nf$3 = 0, $__ns$042 = 0, $__ns$133 = 0, $__ns$2 = 0, $__p$026 = 0, $__p$i$i$i$i = 0, $__p$i$i$i$i1 = 0, $eh$lpad$body$index10Z2D = 0, $eh$lpad$body$indexZ2D = 0, $isdigit$i = 0, $isdigit$i$i = 0, $isdigittmp$i = 0, $isdigittmp$i$i = 0, $or$cond = 0, $storemerge = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $__p$i$i$i$i1 = sp + 16|0;
 $__p$i$i$i$i = sp;
 $__grouping = sp + 28|0;
 $0 = HEAP32[$__loc>>2]|0;
 $1 = HEAP32[6408>>2]|0;
 $2 = ($1|0)==(-1);
 if (!($2)) {
  HEAP32[$__p$i$i$i$i>>2] = 6408;
  $3 = (($__p$i$i$i$i) + 4|0);
  HEAP32[$3>>2] = (439);
  $4 = (($__p$i$i$i$i) + 8|0);
  HEAP32[$4>>2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(6408,$__p$i$i$i$i);
 }
 $5 = HEAP32[((6408 + 4|0))>>2]|0;
 $6 = (($5) + -1)|0;
 $7 = (($0) + 12|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($0) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $8;
 $12 = $10;
 $13 = (($11) - ($12))|0;
 $14 = $13 >> 2;
 $15 = ($14>>>0)>($6>>>0);
 if (!($15)) {
  $19 = (___cxa_allocate_exception(4)|0);
  HEAP32[$19>>2] = ((14256 + 8|0));
  ___cxa_throw(($19|0),(14336|0),(351|0));
  // unreachable;
 }
 $16 = (($10) + ($6<<2)|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17|0)==(0|0);
 if ($18) {
  $19 = (___cxa_allocate_exception(4)|0);
  HEAP32[$19>>2] = ((14256 + 8|0));
  ___cxa_throw(($19|0),(14336|0),(351|0));
  // unreachable;
 }
 $20 = HEAP32[$__loc>>2]|0;
 $21 = HEAP32[6568>>2]|0;
 $22 = ($21|0)==(-1);
 if (!($22)) {
  HEAP32[$__p$i$i$i$i1>>2] = 6568;
  $23 = (($__p$i$i$i$i1) + 4|0);
  HEAP32[$23>>2] = (439);
  $24 = (($__p$i$i$i$i1) + 8|0);
  HEAP32[$24>>2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(6568,$__p$i$i$i$i1);
 }
 $25 = HEAP32[((6568 + 4|0))>>2]|0;
 $26 = (($25) + -1)|0;
 $27 = (($20) + 12|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = (($20) + 8|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = $28;
 $32 = $30;
 $33 = (($31) - ($32))|0;
 $34 = $33 >> 2;
 $35 = ($34>>>0)>($26>>>0);
 if (!($35)) {
  $39 = (___cxa_allocate_exception(4)|0);
  HEAP32[$39>>2] = ((14256 + 8|0));
  ___cxa_throw(($39|0),(14336|0),(351|0));
  // unreachable;
 }
 $36 = (($30) + ($26<<2)|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = ($37|0)==(0|0);
 if ($38) {
  $39 = (___cxa_allocate_exception(4)|0);
  HEAP32[$39>>2] = ((14256 + 8|0));
  ___cxa_throw(($39|0),(14336|0),(351|0));
  // unreachable;
 }
 $40 = HEAP32[$37>>2]|0;
 $41 = (($40) + 20|0);
 $42 = HEAP32[$41>>2]|0;
 FUNCTION_TABLE_vii[$42 & 511]($__grouping,$37);
 HEAP32[$__oe>>2] = $__ob;
 $43 = HEAP8[$__nb>>0]|0;
 if ((($43<<24>>24) == 43) | (($43<<24>>24) == 45)) {
  $44 = HEAP32[$17>>2]|0;
  $45 = (($44) + 44|0);
  $46 = HEAP32[$45>>2]|0;
  __THREW__ = 0;
  $47 = (invoke_iii($46|0,($17|0),($43|0))|0);
  $48 = __THREW__; __THREW__ = 0;
  $49 = $48&1;
  if ($49) {
   label = 16;
  } else {
   $50 = (($__nb) + 1|0);
   $51 = HEAP32[$__oe>>2]|0;
   $52 = (($51) + 4|0);
   HEAP32[$__oe>>2] = $52;
   HEAP32[$51>>2] = $47;
   $__nf$0 = $50;
   label = 21;
  }
 } else {
  $__nf$0 = $__nb;
  label = 21;
 }
 L22: do {
  if ((label|0) == 21) {
   $65 = $__ne;
   $66 = $__nf$0;
   $67 = (($65) - ($66))|0;
   $68 = ($67|0)>(1);
   L24: do {
    if ($68) {
     $70 = HEAP8[$__nf$0>>0]|0;
     $71 = ($70<<24>>24)==(48);
     if ($71) {
      $72 = (($__nf$0) + 1|0);
      $73 = HEAP8[$72>>0]|0;
      if ((($73<<24>>24) == 88) | (($73<<24>>24) == 120)) {
       $74 = HEAP32[$17>>2]|0;
       $75 = (($74) + 44|0);
       $76 = HEAP32[$75>>2]|0;
       __THREW__ = 0;
       $77 = (invoke_iii($76|0,($17|0),48)|0);
       $78 = __THREW__; __THREW__ = 0;
       $79 = $78&1;
       if ($79) {
        label = 16;
        break L22;
       }
       $80 = HEAP32[$__oe>>2]|0;
       $81 = (($80) + 4|0);
       HEAP32[$__oe>>2] = $81;
       HEAP32[$80>>2] = $77;
       $82 = (($__nf$0) + 2|0);
       $83 = HEAP8[$72>>0]|0;
       $84 = HEAP32[$17>>2]|0;
       $85 = (($84) + 44|0);
       $86 = HEAP32[$85>>2]|0;
       __THREW__ = 0;
       $87 = (invoke_iii($86|0,($17|0),($83|0))|0);
       $88 = __THREW__; __THREW__ = 0;
       $89 = $88&1;
       if ($89) {
        label = 16;
        break L22;
       }
       $90 = HEAP32[$__oe>>2]|0;
       $91 = (($90) + 4|0);
       HEAP32[$__oe>>2] = $91;
       HEAP32[$90>>2] = $87;
       $92 = ($82>>>0)<($__ne>>>0);
       if ($92) {
        $__ns$042 = $82;
        while(1) {
         $95 = HEAP8[$__ns$042>>0]|0;
         $96 = HEAP8[6328>>0]|0;
         $97 = ($96<<24>>24)==(0);
         if ($97) {
          $98 = (___cxa_guard_acquire((6328|0))|0);
          $99 = ($98|0)==(0);
          if (!($99)) {
           __THREW__ = 0;
           $100 = (invoke_iiii(461,2147483647,(6336|0),(0|0))|0);
           $101 = __THREW__; __THREW__ = 0;
           $102 = $101&1;
           if ($102) {
            break;
           }
           HEAP32[6320>>2] = $100;
           ___cxa_guard_release((6328|0));
          }
         }
         $105 = $95 << 24 >> 24;
         $isdigittmp$i$i = (($105) + -48)|0;
         $isdigit$i$i = ($isdigittmp$i$i>>>0)<(10);
         if (!($isdigit$i$i)) {
          $106 = $105 | 32;
          $107 = (($106) + -97)|0;
          $108 = ($107>>>0)<(6);
          if (!($108)) {
           $__nf$1 = $82;$__ns$2 = $__ns$042;
           break L24;
          }
         }
         $93 = (($__ns$042) + 1|0);
         $94 = ($93>>>0)<($__ne>>>0);
         if ($94) {
          $__ns$042 = $93;
         } else {
          $__nf$1 = $82;$__ns$2 = $93;
          break L24;
         }
        }
        $103 = ___cxa_find_matching_catch(-1,-1)|0;
        $104 = tempRet0;
        ___cxa_guard_abort((6328|0));
        $eh$lpad$body$index10Z2D = $104;$eh$lpad$body$indexZ2D = $103;
        break L22;
       } else {
        $__nf$1 = $82;$__ns$2 = $82;
       }
      } else {
       label = 22;
      }
     } else {
      label = 22;
     }
    } else {
     label = 22;
    }
   } while(0);
   L41: do {
    if ((label|0) == 22) {
     $69 = ($__nf$0>>>0)<($__ne>>>0);
     if ($69) {
      $__ns$133 = $__nf$0;
      while(1) {
       $111 = HEAP8[$__ns$133>>0]|0;
       $112 = HEAP8[6328>>0]|0;
       $113 = ($112<<24>>24)==(0);
       if ($113) {
        $114 = (___cxa_guard_acquire((6328|0))|0);
        $115 = ($114|0)==(0);
        if (!($115)) {
         __THREW__ = 0;
         $116 = (invoke_iiii(461,2147483647,(6336|0),(0|0))|0);
         $117 = __THREW__; __THREW__ = 0;
         $118 = $117&1;
         if ($118) {
          break;
         }
         HEAP32[6320>>2] = $116;
         ___cxa_guard_release((6328|0));
        }
       }
       $121 = $111 << 24 >> 24;
       $isdigittmp$i = (($121) + -48)|0;
       $isdigit$i = ($isdigittmp$i>>>0)<(10);
       $110 = (($__ns$133) + 1|0);
       if (!($isdigit$i)) {
        $__nf$1 = $__nf$0;$__ns$2 = $__ns$133;
        break L41;
       }
       $109 = ($110>>>0)<($__ne>>>0);
       if ($109) {
        $__ns$133 = $110;
       } else {
        $__nf$1 = $__nf$0;$__ns$2 = $110;
        break L41;
       }
      }
      $119 = ___cxa_find_matching_catch(-1,-1)|0;
      $120 = tempRet0;
      ___cxa_guard_abort((6328|0));
      $eh$lpad$body$index10Z2D = $120;$eh$lpad$body$indexZ2D = $119;
      break L22;
     } else {
      $__nf$1 = $__nf$0;$__ns$2 = $__nf$0;
     }
    }
   } while(0);
   $122 = HEAP8[$__grouping>>0]|0;
   $123 = $122 & 1;
   $124 = ($123<<24>>24)==(0);
   if ($124) {
    $127 = $122&255;
    $128 = $127 >>> 1;
    $130 = $128;
   } else {
    $125 = (($__grouping) + 4|0);
    $126 = HEAP32[$125>>2]|0;
    $130 = $126;
   }
   $129 = ($130|0)==(0);
   if ($129) {
    $131 = HEAP32[$__oe>>2]|0;
    $132 = HEAP32[$17>>2]|0;
    $133 = (($132) + 48|0);
    $134 = HEAP32[$133>>2]|0;
    __THREW__ = 0;
    (invoke_iiiii($134|0,($17|0),($__nf$1|0),($__ns$2|0),($131|0))|0);
    $135 = __THREW__; __THREW__ = 0;
    $136 = $135&1;
    if ($136) {
     label = 16;
     break;
    }
    $137 = $__ns$2;
    $138 = $__nf$1;
    $139 = (($137) - ($138))|0;
    $140 = HEAP32[$__oe>>2]|0;
    $141 = (($140) + ($139<<2)|0);
    HEAP32[$__oe>>2] = $141;
    $251 = $141;
   } else {
    $142 = ($__nf$1|0)==($__ns$2|0);
    if (!($142)) {
     $143 = (($__ns$2) + -1|0);
     $144 = ($143>>>0)>($__nf$1>>>0);
     if ($144) {
      $$012$i$i = $__nf$1;$147 = $143;
      while(1) {
       $145 = HEAP8[$$012$i$i>>0]|0;
       $146 = HEAP8[$147>>0]|0;
       HEAP8[$$012$i$i>>0] = $146;
       HEAP8[$147>>0] = $145;
       $148 = (($$012$i$i) + 1|0);
       $149 = (($147) + -1|0);
       $150 = ($148>>>0)<($149>>>0);
       if ($150) {
        $$012$i$i = $148;$147 = $149;
       } else {
        break;
       }
      }
     }
    }
    $151 = HEAP32[$37>>2]|0;
    $152 = (($151) + 16|0);
    $153 = HEAP32[$152>>2]|0;
    __THREW__ = 0;
    $154 = (invoke_ii($153|0,($37|0))|0);
    $155 = __THREW__; __THREW__ = 0;
    $156 = $155&1;
    if ($156) {
     label = 16;
     break;
    }
    $157 = ($__nf$1>>>0)<($__ns$2>>>0);
    L67: do {
     if ($157) {
      $158 = (($__grouping) + 1|0);
      $159 = (($__grouping) + 4|0);
      $160 = (($__grouping) + 8|0);
      $__dc$024 = 0;$__dg$025 = 0;$__p$026 = $__nf$1;
      while(1) {
       $161 = HEAP8[$__grouping>>0]|0;
       $162 = $161 & 1;
       $163 = ($162<<24>>24)==(0);
       $164 = HEAP32[$160>>2]|0;
       $$ = $163 ? $158 : $164;
       $165 = (($$) + ($__dg$025)|0);
       $166 = HEAP8[$165>>0]|0;
       $167 = ($166<<24>>24)>(0);
       $168 = $166 << 24 >> 24;
       $169 = ($__dc$024|0)==($168|0);
       $or$cond = $167 & $169;
       if ($or$cond) {
        $170 = HEAP32[$__oe>>2]|0;
        $171 = (($170) + 4|0);
        HEAP32[$__oe>>2] = $171;
        HEAP32[$170>>2] = $154;
        $172 = HEAP8[$__grouping>>0]|0;
        $173 = $172 & 1;
        $174 = ($173<<24>>24)==(0);
        if ($174) {
         $176 = $172&255;
         $177 = $176 >>> 1;
         $179 = $177;
        } else {
         $175 = HEAP32[$159>>2]|0;
         $179 = $175;
        }
        $178 = (($179) + -1)|0;
        $180 = ($__dg$025>>>0)<($178>>>0);
        $181 = $180&1;
        $$__dg$0 = (($181) + ($__dg$025))|0;
        $__dc$1 = 0;$__dg$1 = $$__dg$0;
       } else {
        $__dc$1 = $__dc$024;$__dg$1 = $__dg$025;
       }
       $182 = HEAP8[$__p$026>>0]|0;
       $183 = HEAP32[$17>>2]|0;
       $184 = (($183) + 44|0);
       $185 = HEAP32[$184>>2]|0;
       __THREW__ = 0;
       $186 = (invoke_iii($185|0,($17|0),($182|0))|0);
       $187 = __THREW__; __THREW__ = 0;
       $188 = $187&1;
       if ($188) {
        break;
       }
       $189 = HEAP32[$__oe>>2]|0;
       $190 = (($189) + 4|0);
       HEAP32[$__oe>>2] = $190;
       HEAP32[$189>>2] = $186;
       $191 = (($__dc$1) + 1)|0;
       $192 = (($__p$026) + 1|0);
       $193 = ($192>>>0)<($__ns$2>>>0);
       if ($193) {
        $__dc$024 = $191;$__dg$025 = $__dg$1;$__p$026 = $192;
       } else {
        $199 = $190;
        break L67;
       }
      }
      $55 = ___cxa_find_matching_catch(-1,-1)|0;
      $56 = tempRet0;
      $eh$lpad$body$index10Z2D = $56;$eh$lpad$body$indexZ2D = $55;
      break L22;
     } else {
      $$pre = HEAP32[$__oe>>2]|0;
      $199 = $$pre;
     }
    } while(0);
    $194 = $__nf$1;
    $195 = $__nb;
    $196 = (($194) - ($195))|0;
    $197 = (($__ob) + ($196<<2)|0);
    $198 = ($197|0)==($199|0);
    if ($198) {
     $251 = $199;
    } else {
     $200 = (($199) + -4|0);
     $201 = ($200>>>0)>($197>>>0);
     if ($201) {
      $$012$i$i13 = $197;$204 = $200;
      while(1) {
       $202 = HEAP32[$$012$i$i13>>2]|0;
       $203 = HEAP32[$204>>2]|0;
       HEAP32[$$012$i$i13>>2] = $203;
       HEAP32[$204>>2] = $202;
       $205 = (($$012$i$i13) + 4|0);
       $206 = (($204) + -4|0);
       $207 = ($205>>>0)<($206>>>0);
       if ($207) {
        $$012$i$i13 = $205;$204 = $206;
       } else {
        $251 = $199;
        break;
       }
      }
     } else {
      $251 = $199;
     }
    }
   }
   $208 = ($__ns$2>>>0)<($__ne>>>0);
   L86: do {
    if ($208) {
     $__nf$220 = $__ns$2;
     while(1) {
      $209 = HEAP8[$__nf$220>>0]|0;
      $210 = ($209<<24>>24)==(46);
      if ($210) {
       break;
      }
      $220 = HEAP32[$17>>2]|0;
      $221 = (($220) + 44|0);
      $222 = HEAP32[$221>>2]|0;
      __THREW__ = 0;
      $223 = (invoke_iii($222|0,($17|0),($209|0))|0);
      $224 = __THREW__; __THREW__ = 0;
      $225 = $224&1;
      if ($225) {
       label = 14;
       break;
      }
      $226 = HEAP32[$__oe>>2]|0;
      $227 = (($226) + 4|0);
      HEAP32[$__oe>>2] = $227;
      HEAP32[$226>>2] = $223;
      $228 = (($__nf$220) + 1|0);
      $229 = ($228>>>0)<($__ne>>>0);
      if ($229) {
       $__nf$220 = $228;
      } else {
       $233 = $227;$__nf$3 = $228;
       break L86;
      }
     }
     if ((label|0) == 14) {
      $53 = ___cxa_find_matching_catch(-1,-1)|0;
      $54 = tempRet0;
      $eh$lpad$body$index10Z2D = $54;$eh$lpad$body$indexZ2D = $53;
      break L22;
     }
     $211 = HEAP32[$37>>2]|0;
     $212 = (($211) + 12|0);
     $213 = HEAP32[$212>>2]|0;
     __THREW__ = 0;
     $214 = (invoke_ii($213|0,($37|0))|0);
     $215 = __THREW__; __THREW__ = 0;
     $216 = $215&1;
     if ($216) {
      label = 16;
      break L22;
     }
     $217 = HEAP32[$__oe>>2]|0;
     $218 = (($217) + 4|0);
     HEAP32[$__oe>>2] = $218;
     HEAP32[$217>>2] = $214;
     $219 = (($__nf$220) + 1|0);
     $233 = $218;$__nf$3 = $219;
    } else {
     $233 = $251;$__nf$3 = $__ns$2;
    }
   } while(0);
   $230 = HEAP32[$17>>2]|0;
   $231 = (($230) + 48|0);
   $232 = HEAP32[$231>>2]|0;
   __THREW__ = 0;
   (invoke_iiiii($232|0,($17|0),($__nf$3|0),($__ne|0),($233|0))|0);
   $234 = __THREW__; __THREW__ = 0;
   $235 = $234&1;
   if ($235) {
    label = 16;
   } else {
    $236 = $__nf$3;
    $237 = (($65) - ($236))|0;
    $238 = HEAP32[$__oe>>2]|0;
    $239 = (($238) + ($237<<2)|0);
    HEAP32[$__oe>>2] = $239;
    $240 = ($__np|0)==($__ne|0);
    if ($240) {
     $storemerge = $239;
    } else {
     $241 = $__np;
     $242 = $__nb;
     $243 = (($241) - ($242))|0;
     $244 = (($__ob) + ($243<<2)|0);
     $storemerge = $244;
    }
    HEAP32[$__op>>2] = $storemerge;
    $245 = HEAP8[$__grouping>>0]|0;
    $246 = $245 & 1;
    $247 = ($246<<24>>24)==(0);
    if ($247) {
     STACKTOP = sp;return;
    }
    $248 = (($__grouping) + 8|0);
    $249 = HEAP32[$248>>2]|0;
    $250 = ($249|0)==(0|0);
    if ($250) {
     STACKTOP = sp;return;
    }
    _free($249);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 16) {
  $57 = ___cxa_find_matching_catch(-1,-1)|0;
  $58 = tempRet0;
  $eh$lpad$body$index10Z2D = $58;$eh$lpad$body$indexZ2D = $57;
 }
 $59 = HEAP8[$__grouping>>0]|0;
 $60 = $59 & 1;
 $61 = ($60<<24>>24)==(0);
 if ($61) {
  ___resumeException($eh$lpad$body$indexZ2D|0);
  // unreachable;
 }
 $62 = (($__grouping) + 8|0);
 $63 = HEAP32[$62>>2]|0;
 $64 = ($63|0)==(0|0);
 if ($64) {
  ___resumeException($eh$lpad$body$indexZ2D|0);
  // unreachable;
 }
 _free($63);
 ___resumeException($eh$lpad$body$indexZ2D|0);
 // unreachable;
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwe($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = +$__v;
 var $$0 = 0, $$0$i = 0, $$0$i7 = 0, $$01 = 0, $$1$i = 0, $$111 = 0, $$1210 = 0, $$pre12 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $__fmt = 0, $__nar = 0, $__nb = 0, $__nc$0 = 0, $__nc$1 = 0, $__nc$2 = 0, $__o = 0, $__ob$0 = 0, $__oe = 0, $__op = 0, $eh$lpad$body$index7Z2D = 0, $eh$lpad$body$indexZ2D = 0, $or$cond$i = 0, $scevgep = 0, $scevgep14 = 0, $specify_precision$0$off0$ph$i15 = 0, $vararg_buffer = 0, $vararg_buffer13 = 0, $vararg_buffer16 = 0;
 var $vararg_buffer20 = 0, $vararg_ptr12 = 0, $vararg_ptr19 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 336|0;
 $vararg_buffer20 = sp + 48|0;
 $vararg_buffer16 = sp + 32|0;
 $vararg_buffer13 = sp + 24|0;
 $vararg_buffer = sp + 8|0;
 $__fmt = sp;
 $__nar = sp + 304|0;
 $__nb = sp + 300|0;
 $__o = sp + 72|0;
 $__op = sp + 68|0;
 $__oe = sp + 64|0;
 $0 = sp + 60|0;
 $1 = sp + 56|0;
 $2 = $__fmt;
 $3 = $2;
 HEAP32[$3>>2] = 37;
 $4 = (($2) + 4)|0;
 $5 = $4;
 HEAP32[$5>>2] = 0;
 $6 = (($__fmt) + 1|0);
 $7 = (($__iob) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $8 & 2048;
 $10 = ($9|0)==(0);
 if ($10) {
  $$0$i = $6;
 } else {
  $11 = (($__fmt) + 2|0);
  HEAP8[$6>>0] = 43;
  $$0$i = $11;
 }
 $12 = $8 & 1024;
 $13 = ($12|0)==(0);
 if ($13) {
  $$1$i = $$0$i;
 } else {
  $14 = (($$0$i) + 1|0);
  HEAP8[$$0$i>>0] = 35;
  $$1$i = $14;
 }
 $15 = $8 & 260;
 $16 = $8 >>> 14;
 $17 = ($15|0)==(260);
 do {
  if ($17) {
   HEAP8[$$1$i>>0] = 76;
   $scevgep14 = (($$1$i) + 1|0);
   $24 = $16 & 1;
   $25 = ($24|0)==(0);
   if ($25) {
    HEAP8[$scevgep14>>0] = 97;
    $specify_precision$0$off0$ph$i15 = 0;
    break;
   } else {
    HEAP8[$scevgep14>>0] = 65;
    $specify_precision$0$off0$ph$i15 = 0;
    break;
   }
  } else {
   $18 = (($$1$i) + 1|0);
   HEAP8[$$1$i>>0] = 46;
   $19 = (($$1$i) + 2|0);
   HEAP8[$18>>0] = 42;
   HEAP8[$19>>0] = 76;
   $scevgep = (($$1$i) + 3|0);
   if ((($15|0) == 256)) {
    $22 = $16 & 1;
    $23 = ($22|0)==(0);
    if ($23) {
     HEAP8[$scevgep>>0] = 101;
     $specify_precision$0$off0$ph$i15 = 1;
     break;
    } else {
     HEAP8[$scevgep>>0] = 69;
     $specify_precision$0$off0$ph$i15 = 1;
     break;
    }
   } else if ((($15|0) == 4)) {
    $20 = $16 & 1;
    $21 = ($20|0)==(0);
    if ($21) {
     HEAP8[$scevgep>>0] = 102;
     $specify_precision$0$off0$ph$i15 = 1;
     break;
    } else {
     HEAP8[$scevgep>>0] = 70;
     $specify_precision$0$off0$ph$i15 = 1;
     break;
    }
   } else {
    $26 = $16 & 1;
    $27 = ($26|0)==(0);
    if ($27) {
     HEAP8[$scevgep>>0] = 103;
     $specify_precision$0$off0$ph$i15 = 1;
     break;
    } else {
     HEAP8[$scevgep>>0] = 71;
     $specify_precision$0$off0$ph$i15 = 1;
     break;
    }
   }
  }
 } while(0);
 HEAP32[$__nb>>2] = $__nar;
 $28 = HEAP8[6328>>0]|0;
 $29 = ($28<<24>>24)==(0);
 do {
  if ($29) {
   $30 = (___cxa_guard_acquire((6328|0))|0);
   $31 = ($30|0)==(0);
   if (!($31)) {
    __THREW__ = 0;
    $32 = (invoke_iiii(461,2147483647,(6336|0),(0|0))|0);
    $33 = __THREW__; __THREW__ = 0;
    $34 = $33&1;
    if ($34) {
     $35 = ___cxa_find_matching_catch(-1,-1)|0;
     $36 = tempRet0;
     ___cxa_guard_abort((6328|0));
     ___resumeException($35|0);
     // unreachable;
    } else {
     HEAP32[6320>>2] = $32;
     ___cxa_guard_release((6328|0));
     break;
    }
   }
  }
 } while(0);
 $37 = HEAP32[6320>>2]|0;
 if ($specify_precision$0$off0$ph$i15) {
  $38 = (($__iob) + 8|0);
  $39 = HEAP32[$38>>2]|0;
  HEAP32[$vararg_buffer>>2] = $39;
  $vararg_ptr12 = (($vararg_buffer) + 4|0);
  HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_ptr12>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr12+4>>2]=HEAP32[tempDoublePtr+4>>2];
  $40 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,30,$37,$__fmt,$vararg_buffer)|0);
  $__nc$0 = $40;
 } else {
  HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_buffer13>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer13+4>>2]=HEAP32[tempDoublePtr+4>>2];
  $41 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,30,$37,$__fmt,$vararg_buffer13)|0);
  $__nc$0 = $41;
 }
 $42 = ($__nc$0|0)>(29);
 do {
  if ($42) {
   $43 = HEAP8[6328>>0]|0;
   $44 = ($43<<24>>24)==(0);
   L40: do {
    if ($specify_precision$0$off0$ph$i15) {
     do {
      if ($44) {
       $45 = (___cxa_guard_acquire((6328|0))|0);
       $46 = ($45|0)==(0);
       if (!($46)) {
        __THREW__ = 0;
        $47 = (invoke_iiii(461,2147483647,(6336|0),(0|0))|0);
        $48 = __THREW__; __THREW__ = 0;
        $49 = $48&1;
        if ($49) {
         $50 = ___cxa_find_matching_catch(-1,-1)|0;
         $51 = tempRet0;
         ___cxa_guard_abort((6328|0));
         $eh$lpad$body$index7Z2D = $51;$eh$lpad$body$indexZ2D = $50;
         break L40;
        } else {
         HEAP32[6320>>2] = $47;
         ___cxa_guard_release((6328|0));
         break;
        }
       }
      }
     } while(0);
     $52 = HEAP32[6320>>2]|0;
     $53 = (($__iob) + 8|0);
     $54 = HEAP32[$53>>2]|0;
     __THREW__ = 0;
     HEAP32[$vararg_buffer16>>2] = $54;
     $vararg_ptr19 = (($vararg_buffer16) + 4|0);
     HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_ptr19>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr19+4>>2]=HEAP32[tempDoublePtr+4>>2];
     $55 = (invoke_iiiii(466,($__nb|0),($52|0),($__fmt|0),($vararg_buffer16|0))|0);
     $56 = __THREW__; __THREW__ = 0;
     $57 = $56&1;
     if ($57) {
      label = 36;
     } else {
      $__nc$1 = $55;
      label = 44;
     }
    } else {
     do {
      if ($44) {
       $60 = (___cxa_guard_acquire((6328|0))|0);
       $61 = ($60|0)==(0);
       if (!($61)) {
        __THREW__ = 0;
        $62 = (invoke_iiii(461,2147483647,(6336|0),(0|0))|0);
        $63 = __THREW__; __THREW__ = 0;
        $64 = $63&1;
        if ($64) {
         $65 = ___cxa_find_matching_catch(-1,-1)|0;
         $66 = tempRet0;
         ___cxa_guard_abort((6328|0));
         $eh$lpad$body$index7Z2D = $66;$eh$lpad$body$indexZ2D = $65;
         break L40;
        } else {
         HEAP32[6320>>2] = $62;
         ___cxa_guard_release((6328|0));
         break;
        }
       }
      }
     } while(0);
     $67 = HEAP32[6320>>2]|0;
     __THREW__ = 0;
     HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_buffer20>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer20+4>>2]=HEAP32[tempDoublePtr+4>>2];
     $68 = (invoke_iiiii(466,($__nb|0),($67|0),($__fmt|0),($vararg_buffer20|0))|0);
     $69 = __THREW__; __THREW__ = 0;
     $70 = $69&1;
     if ($70) {
      label = 36;
     } else {
      $__nc$1 = $68;
      label = 44;
     }
    }
   } while(0);
   if ((label|0) == 44) {
    $71 = HEAP32[$__nb>>2]|0;
    $72 = ($71|0)==(0|0);
    if (!($72)) {
     $119 = $71;$77 = $71;$__nc$2 = $__nc$1;
     break;
    }
    $73 = (___cxa_allocate_exception(4)|0);
    HEAP32[$73>>2] = ((15656 + 8|0));
    __THREW__ = 0;
    invoke_viii(379,($73|0),(15712|0),(374|0));
    $74 = __THREW__; __THREW__ = 0;
    $75 = $74&1;
    if ($75) {
     label = 36;
    } else {
     // unreachable;
    }
   }
   if ((label|0) == 36) {
    $58 = ___cxa_find_matching_catch(-1,-1)|0;
    $59 = tempRet0;
    $eh$lpad$body$index7Z2D = $59;$eh$lpad$body$indexZ2D = $58;
   }
   $$111 = $eh$lpad$body$indexZ2D;$$1210 = $eh$lpad$body$index7Z2D;
   ___resumeException($$111|0);
   // unreachable;
  } else {
   $$pre12 = HEAP32[$__nb>>2]|0;
   $119 = 0;$77 = $$pre12;$__nc$2 = $__nc$0;
  }
 } while(0);
 $76 = (($77) + ($__nc$2)|0);
 $78 = HEAP32[$7>>2]|0;
 $79 = $78 & 176;
 do {
  if ((($79|0) == 16)) {
   $80 = HEAP8[$77>>0]|0;
   if ((($80<<24>>24) == 43) | (($80<<24>>24) == 45)) {
    $81 = (($77) + 1|0);
    $$0$i7 = $81;
    break;
   }
   $82 = ($__nc$2|0)>(1);
   $83 = ($80<<24>>24)==(48);
   $or$cond$i = $82 & $83;
   if ($or$cond$i) {
    $84 = (($77) + 1|0);
    $85 = HEAP8[$84>>0]|0;
    if ((($85<<24>>24) == 88) | (($85<<24>>24) == 120)) {
     $86 = (($77) + 2|0);
     $$0$i7 = $86;
    } else {
     label = 53;
    }
   } else {
    label = 53;
   }
  } else if ((($79|0) == 32)) {
   $$0$i7 = $76;
  } else {
   label = 53;
  }
 } while(0);
 if ((label|0) == 53) {
  $$0$i7 = $77;
 }
 $87 = ($77|0)==($__nar|0);
 if ($87) {
  $100 = $__nar;$117 = 0;$__ob$0 = $__o;
  label = 59;
 } else {
  $88 = $__nc$2 << 3;
  $89 = (_malloc($88)|0);
  $90 = ($89|0)==(0|0);
  if ($90) {
   $91 = (___cxa_allocate_exception(4)|0);
   HEAP32[$91>>2] = ((15656 + 8|0));
   __THREW__ = 0;
   invoke_viii(379,($91|0),(15712|0),(374|0));
   $92 = __THREW__; __THREW__ = 0;
   $93 = $92&1;
   if ($93) {
    $132 = 0;
    label = 58;
   } else {
    // unreachable;
   }
  } else {
   $100 = $77;$117 = $89;$__ob$0 = $89;
   label = 59;
  }
 }
 do {
  if ((label|0) == 59) {
   $96 = (($__iob) + 28|0);
   $97 = HEAP32[$96>>2]|0;
   HEAP32[$0>>2] = $97;
   $98 = (($97) + 4|0);
   $99 = HEAP32[$98>>2]|0;HEAP32[$98>>2] = (($99+1)|0);
   __THREW__ = 0;
   invoke_viiiiiii(470,($100|0),($$0$i7|0),($76|0),($__ob$0|0),($__op|0),($__oe|0),($0|0));
   $101 = __THREW__; __THREW__ = 0;
   $102 = $101&1;
   if ($102) {
    $120 = ___cxa_find_matching_catch(-1,-1)|0;
    $121 = tempRet0;
    $122 = HEAP32[$0>>2]|0;
    $123 = (($122) + 4|0);
    $124 = HEAP32[$123>>2]|0;HEAP32[$123>>2] = (($124+-1)|0);
    $125 = ($124|0)==(0);
    if (!($125)) {
     $$0 = $120;$$01 = $121;$130 = $117;
     break;
    }
    $126 = HEAP32[$122>>2]|0;
    $127 = (($126) + 8|0);
    $128 = HEAP32[$127>>2]|0;
    FUNCTION_TABLE_vi[$128 & 511]($122);
    $$0 = $120;$$01 = $121;$130 = $117;
    break;
   }
   $103 = HEAP32[$0>>2]|0;
   $104 = (($103) + 4|0);
   $105 = HEAP32[$104>>2]|0;HEAP32[$104>>2] = (($105+-1)|0);
   $106 = ($105|0)==(0);
   if ($106) {
    $107 = HEAP32[$103>>2]|0;
    $108 = (($107) + 8|0);
    $109 = HEAP32[$108>>2]|0;
    FUNCTION_TABLE_vi[$109 & 511]($103);
   }
   $110 = HEAP32[$__s>>2]|0;
   $111 = HEAP32[$__op>>2]|0;
   $112 = HEAP32[$__oe>>2]|0;
   __THREW__ = 0;
   invoke_viiiiiii(471,($1|0),($110|0),($__ob$0|0),($111|0),($112|0),($__iob|0),($__fl|0));
   $113 = __THREW__; __THREW__ = 0;
   $114 = $113&1;
   if ($114) {
    $132 = $117;
    label = 58;
   } else {
    $115 = HEAP32[$1>>2]|0;
    HEAP32[$__s>>2] = $115;
    HEAP32[$agg$result>>2] = $115;
    $116 = ($117|0)==(0|0);
    if (!($116)) {
     _free($117);
    }
    $118 = ($119|0)==(0|0);
    if ($118) {
     STACKTOP = sp;return;
    }
    _free($119);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 58) {
  $94 = ___cxa_find_matching_catch(-1,-1)|0;
  $95 = tempRet0;
  $$0 = $94;$$01 = $95;$130 = $132;
 }
 $129 = ($130|0)==(0|0);
 if (!($129)) {
  _free($130);
 }
 $131 = ($119|0)==(0|0);
 if ($131) {
  $$111 = $$0;$$1210 = $$01;
  ___resumeException($$111|0);
  // unreachable;
 }
 _free($119);
 $$111 = $$0;$$1210 = $$01;
 ___resumeException($$111|0);
 // unreachable;
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPKv($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = $__v|0;
 var $$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__op$0 = 0, $__p$i$i$i$i = 0, $or$cond$i = 0;
 var $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0;
 $vararg_buffer = sp + 16|0;
 $__p$i$i$i$i = sp;
 $__fmt = sp + 188|0;
 $__nar = sp + 168|0;
 $__o = sp + 20|0;
 ;HEAP8[$__fmt+0>>0]=HEAP8[5232+0>>0]|0;HEAP8[$__fmt+1>>0]=HEAP8[5232+1>>0]|0;HEAP8[$__fmt+2>>0]=HEAP8[5232+2>>0]|0;HEAP8[$__fmt+3>>0]=HEAP8[5232+3>>0]|0;HEAP8[$__fmt+4>>0]=HEAP8[5232+4>>0]|0;HEAP8[$__fmt+5>>0]=HEAP8[5232+5>>0]|0;
 $0 = HEAP8[6328>>0]|0;
 $1 = ($0<<24>>24)==(0);
 do {
  if ($1) {
   $2 = (___cxa_guard_acquire((6328|0))|0);
   $3 = ($2|0)==(0);
   if (!($3)) {
    __THREW__ = 0;
    $4 = (invoke_iiii(461,2147483647,(6336|0),(0|0))|0);
    $5 = __THREW__; __THREW__ = 0;
    $6 = $5&1;
    if ($6) {
     $7 = ___cxa_find_matching_catch(-1,-1)|0;
     $8 = tempRet0;
     ___cxa_guard_abort((6328|0));
     ___resumeException($7|0);
     // unreachable;
    } else {
     HEAP32[6320>>2] = $4;
     ___cxa_guard_release((6328|0));
     break;
    }
   }
  }
 } while(0);
 $9 = HEAP32[6320>>2]|0;
 HEAP32[$vararg_buffer>>2] = $__v;
 $10 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,20,$9,$__fmt,$vararg_buffer)|0);
 $11 = (($__nar) + ($10)|0);
 $12 = (($__iob) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $13 & 176;
 do {
  if ((($14|0) == 16)) {
   $15 = HEAP8[$__nar>>0]|0;
   if ((($15<<24>>24) == 43) | (($15<<24>>24) == 45)) {
    $16 = (($__nar) + 1|0);
    $$0$i = $16;
    break;
   }
   $17 = ($10|0)>(1);
   $18 = ($15<<24>>24)==(48);
   $or$cond$i = $17 & $18;
   if ($or$cond$i) {
    $19 = (($__nar) + 1|0);
    $20 = HEAP8[$19>>0]|0;
    if ((($20<<24>>24) == 88) | (($20<<24>>24) == 120)) {
     $21 = (($__nar) + 2|0);
     $$0$i = $21;
    } else {
     label = 12;
    }
   } else {
    label = 12;
   }
  } else if ((($14|0) == 32)) {
   $$0$i = $11;
  } else {
   label = 12;
  }
 } while(0);
 if ((label|0) == 12) {
  $$0$i = $__nar;
 }
 $22 = (($__iob) + 28|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = (($23) + 4|0);
 $25 = HEAP32[$24>>2]|0;HEAP32[$24>>2] = (($25+1)|0);
 $26 = HEAP32[6408>>2]|0;
 $27 = ($26|0)==(-1);
 if ($27) {
  label = 15;
 } else {
  HEAP32[$__p$i$i$i$i>>2] = 6408;
  $28 = (($__p$i$i$i$i) + 4|0);
  HEAP32[$28>>2] = (439);
  $29 = (($__p$i$i$i$i) + 8|0);
  HEAP32[$29>>2] = 0;
  __THREW__ = 0;
  invoke_vii(440,(6408|0),($__p$i$i$i$i|0));
  $30 = __THREW__; __THREW__ = 0;
  $31 = $30&1;
  if (!($31)) {
   label = 15;
  }
 }
 if ((label|0) == 15) {
  $32 = HEAP32[((6408 + 4|0))>>2]|0;
  $33 = (($32) + -1)|0;
  $34 = (($23) + 12|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = (($23) + 8|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = $35;
  $39 = $37;
  $40 = (($38) - ($39))|0;
  $41 = $40 >> 2;
  $42 = ($41>>>0)>($33>>>0);
  if ($42) {
   $43 = (($37) + ($33<<2)|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = ($44|0)==(0|0);
   if (!($45)) {
    $49 = (($23) + 4|0);
    $50 = HEAP32[$49>>2]|0;HEAP32[$49>>2] = (($50+-1)|0);
    $51 = ($50|0)==(0);
    if ($51) {
     $52 = HEAP32[$23>>2]|0;
     $53 = (($52) + 8|0);
     $54 = HEAP32[$53>>2]|0;
     FUNCTION_TABLE_vi[$54 & 511]($23);
    }
    $55 = HEAP32[$44>>2]|0;
    $56 = (($55) + 48|0);
    $57 = HEAP32[$56>>2]|0;
    (FUNCTION_TABLE_iiiii[$57 & 511]($44,$__nar,$11,$__o)|0);
    $58 = (($__o) + ($10<<2)|0);
    $59 = ($$0$i|0)==($11|0);
    if ($59) {
     $__op$0 = $58;
     $72 = HEAP32[$__s>>2]|0;
     __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$72,$__o,$__op$0,$58,$__iob,$__fl);
     STACKTOP = sp;return;
    }
    $68 = $__nar;
    $69 = $$0$i;
    $70 = (($69) - ($68))|0;
    $71 = (($__o) + ($70<<2)|0);
    $__op$0 = $71;
    $72 = HEAP32[$__s>>2]|0;
    __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$72,$__o,$__op$0,$58,$__iob,$__fl);
    STACKTOP = sp;return;
   }
  }
  $46 = (___cxa_allocate_exception(4)|0);
  HEAP32[$46>>2] = ((14256 + 8|0));
  __THREW__ = 0;
  invoke_viii(379,($46|0),(14336|0),(351|0));
  $47 = __THREW__; __THREW__ = 0;
  $48 = $47&1;
  if (!($48)) {
   // unreachable;
  }
 }
 $60 = ___cxa_find_matching_catch(-1,-1)|0;
 $61 = tempRet0;
 $62 = (($23) + 4|0);
 $63 = HEAP32[$62>>2]|0;HEAP32[$62>>2] = (($63+-1)|0);
 $64 = ($63|0)==(0);
 if (!($64)) {
  ___resumeException($60|0);
  // unreachable;
 }
 $65 = HEAP32[$23>>2]|0;
 $66 = (($65) + 8|0);
 $67 = HEAP32[$66>>2]|0;
 FUNCTION_TABLE_vi[$67 & 511]($23);
 ___resumeException($60|0);
 // unreachable;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($agg$result,$this,$__b$0,$__e$0,$__iob,$__err,$__tm,$__fmtb,$__fmte) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b$0 = $__b$0|0;
 $__e$0 = $__e$0|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 $__fmtb = $__fmtb|0;
 $__fmte = $__fmte|0;
 var $$$pre$i$i$i20 = 0, $$$pre$i$i$i7 = 0, $$0$i$i = 0, $$0$i$i16 = 0, $$0$ph$be = 0, $$0$ph38 = 0, $$0$pn = 0, $$1 = 0, $$2 = 0, $$2$lcssa = 0, $$__b$sroa$0$1 = 0, $$__b$sroa$0$13 = 0, $$__b$sroa$0$4 = 0, $$byval_copy = 0, $$byval_copy4 = 0, $$pre$i$i$i20 = 0, $$pre$i$i$i7 = 0, $$pre$i2$i$i11 = 0, $$pre$i2$i$i1140 = 0, $$pre$i2$i$i1141 = 0;
 var $$pre39 = 0, $$pre39$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0;
 var $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
 var $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $__b$sroa$0$0 = 0, $__b$sroa$0$1 = 0, $__b$sroa$0$2 = 0, $__b$sroa$0$3 = 0, $__b$sroa$0$4 = 0, $__b$sroa$0$5 = 0, $__cmd$0 = 0, $__e$sroa$0$0 = 0, $__e$sroa$0$1 = 0, $__e$sroa$0$10 = 0, $__e$sroa$0$3 = 0, $__e$sroa$0$4 = 0, $__e$sroa$0$5 = 0, $__e$sroa$0$6 = 0, $__e$sroa$0$7 = 0, $__e$sroa$0$8 = 0, $__opt$0 = 0, $__p$i$i$i$i = 0;
 var $isascii1$i = 0, $isascii1$i14 = 0, $isascii1$i4 = 0, $sext = 0, $tmp$i$i13 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $$byval_copy4 = sp + 28|0;
 $$byval_copy = sp + 24|0;
 $__p$i$i$i$i = sp;
 $0 = sp + 20|0;
 $1 = sp + 16|0;
 $2 = sp + 12|0;
 $3 = (($__iob) + 28|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + 4|0);
 $6 = HEAP32[$5>>2]|0;HEAP32[$5>>2] = (($6+1)|0);
 $7 = HEAP32[6416>>2]|0;
 $8 = ($7|0)==(-1);
 if ($8) {
  label = 3;
 } else {
  HEAP32[$__p$i$i$i$i>>2] = 6416;
  $9 = (($__p$i$i$i$i) + 4|0);
  HEAP32[$9>>2] = (439);
  $10 = (($__p$i$i$i$i) + 8|0);
  HEAP32[$10>>2] = 0;
  __THREW__ = 0;
  invoke_vii(440,(6416|0),($__p$i$i$i$i|0));
  $11 = __THREW__; __THREW__ = 0;
  $12 = $11&1;
  if (!($12)) {
   label = 3;
  }
 }
 if ((label|0) == 3) {
  $13 = HEAP32[((6416 + 4|0))>>2]|0;
  $14 = (($13) + -1)|0;
  $15 = (($4) + 12|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = (($4) + 8|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = $16;
  $20 = $18;
  $21 = (($19) - ($20))|0;
  $22 = $21 >> 2;
  $23 = ($22>>>0)>($14>>>0);
  if ($23) {
   $24 = (($18) + ($14<<2)|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = ($25|0)==(0|0);
   if (!($26)) {
    $30 = (($4) + 4|0);
    $31 = HEAP32[$30>>2]|0;HEAP32[$30>>2] = (($31+-1)|0);
    $32 = ($31|0)==(0);
    if ($32) {
     $33 = HEAP32[$4>>2]|0;
     $34 = (($33) + 8|0);
     $35 = HEAP32[$34>>2]|0;
     FUNCTION_TABLE_vi[$35 & 511]($4);
    }
    HEAP32[$__err>>2] = 0;
    $36 = ($__fmtb|0)==($__fmte|0);
    L11: do {
     if ($36) {
      $$pre$i$i$i20 = $__b$0;$__e$sroa$0$10 = $__e$0;
     } else {
      $37 = (($25) + 8|0);
      $$0$ph38 = $__fmtb;$$pre39 = 0;$__b$sroa$0$0 = $__b$0;$__e$sroa$0$0 = $__e$0;
      L13: while(1) {
       $39 = $$pre39;$__b$sroa$0$1 = $__b$sroa$0$0;$__e$sroa$0$1 = $__e$sroa$0$0;
       while(1) {
        $38 = ($39|0)==(0);
        if (!($38)) {
         $$pre$i$i$i20 = $__b$sroa$0$1;$__e$sroa$0$10 = $__e$sroa$0$1;
         break L11;
        }
        $40 = ($__b$sroa$0$1|0)==(0|0);
        if ($40) {
         $52 = 0;$__b$sroa$0$2 = 0;
        } else {
         $41 = (($__b$sroa$0$1) + 12|0);
         $42 = HEAP32[$41>>2]|0;
         $43 = (($__b$sroa$0$1) + 16|0);
         $44 = HEAP32[$43>>2]|0;
         $45 = ($42|0)==($44|0);
         if ($45) {
          $46 = HEAP32[$__b$sroa$0$1>>2]|0;
          $47 = (($46) + 36|0);
          $48 = HEAP32[$47>>2]|0;
          $49 = (FUNCTION_TABLE_ii[$48 & 511]($__b$sroa$0$1)|0);
          $50 = ($49|0)==(-1);
          $$__b$sroa$0$1 = $50 ? 0 : $__b$sroa$0$1;
          $$__b$sroa$0$13 = $50 ? 0 : $__b$sroa$0$1;
          $52 = $$__b$sroa$0$13;$__b$sroa$0$2 = $$__b$sroa$0$1;
         } else {
          $52 = $__b$sroa$0$1;$__b$sroa$0$2 = $__b$sroa$0$1;
         }
        }
        $51 = ($52|0)==(0|0);
        $53 = ($__e$sroa$0$1|0)==(0|0);
        do {
         if ($53) {
          label = 20;
         } else {
          $54 = (($__e$sroa$0$1) + 12|0);
          $55 = HEAP32[$54>>2]|0;
          $56 = (($__e$sroa$0$1) + 16|0);
          $57 = HEAP32[$56>>2]|0;
          $58 = ($55|0)==($57|0);
          if ($58) {
           $59 = HEAP32[$__e$sroa$0$1>>2]|0;
           $60 = (($59) + 36|0);
           $61 = HEAP32[$60>>2]|0;
           $62 = (FUNCTION_TABLE_ii[$61 & 511]($__e$sroa$0$1)|0);
           $63 = ($62|0)==(-1);
           if ($63) {
            label = 20;
            break;
           }
          }
          if ($51) {
           $__e$sroa$0$4 = $__e$sroa$0$1;
          } else {
           $__e$sroa$0$3 = $__e$sroa$0$1;
           label = 21;
           break L13;
          }
         }
        } while(0);
        if ((label|0) == 20) {
         label = 0;
         if ($51) {
          $__e$sroa$0$3 = 0;
          label = 21;
          break L13;
         } else {
          $__e$sroa$0$4 = 0;
         }
        }
        $72 = HEAP8[$$0$ph38>>0]|0;
        $73 = HEAP32[$25>>2]|0;
        $74 = (($73) + 36|0);
        $75 = HEAP32[$74>>2]|0;
        $76 = (FUNCTION_TABLE_iiii[$75 & 511]($25,$72,0)|0);
        $77 = ($76<<24>>24)==(37);
        if ($77) {
         label = 26;
         break;
        }
        $98 = HEAP8[$$0$ph38>>0]|0;
        $isascii1$i = ($98<<24>>24)>(-1);
        if ($isascii1$i) {
         $99 = $98 << 24 >> 24;
         $100 = HEAP32[$37>>2]|0;
         $101 = (($100) + ($99<<1)|0);
         $102 = HEAP16[$101>>1]|0;
         $103 = $102 & 8192;
         $104 = ($103<<16>>16)==(0);
         if (!($104)) {
          $$0$pn = $$0$ph38;
          label = 37;
          break;
         }
        }
        $163 = (($52) + 12|0);
        $164 = HEAP32[$163>>2]|0;
        $165 = (($52) + 16|0);
        $166 = HEAP32[$165>>2]|0;
        $167 = ($164|0)==($166|0);
        if ($167) {
         $168 = HEAP32[$52>>2]|0;
         $169 = (($168) + 36|0);
         $170 = HEAP32[$169>>2]|0;
         $171 = (FUNCTION_TABLE_ii[$170 & 511]($52)|0);
         $$0$i$i16 = $171;
        } else {
         $172 = HEAP8[$164>>0]|0;
         $173 = $172&255;
         $$0$i$i16 = $173;
        }
        $174 = $$0$i$i16&255;
        $175 = HEAP32[$25>>2]|0;
        $176 = (($175) + 12|0);
        $177 = HEAP32[$176>>2]|0;
        $178 = (FUNCTION_TABLE_iii[$177 & 511]($25,$174)|0);
        $179 = HEAP8[$$0$ph38>>0]|0;
        $180 = HEAP32[$25>>2]|0;
        $181 = (($180) + 12|0);
        $182 = HEAP32[$181>>2]|0;
        $183 = (FUNCTION_TABLE_iii[$182 & 511]($25,$179)|0);
        $184 = ($178<<24>>24)==($183<<24>>24);
        if ($184) {
         label = 62;
         break;
        }
        HEAP32[$__err>>2] = 4;
        $39 = 4;$__b$sroa$0$1 = $__b$sroa$0$2;$__e$sroa$0$1 = $__e$sroa$0$4;
       }
       L39: do {
        if ((label|0) == 26) {
         label = 0;
         $78 = (($$0$ph38) + 1|0);
         $79 = ($78|0)==($__fmte|0);
         if ($79) {
          label = 27;
          break L13;
         }
         $80 = HEAP8[$78>>0]|0;
         $81 = HEAP32[$25>>2]|0;
         $82 = (($81) + 36|0);
         $83 = HEAP32[$82>>2]|0;
         $84 = (FUNCTION_TABLE_iiii[$83 & 511]($25,$80,0)|0);
         if ((($84<<24>>24) == 48) | (($84<<24>>24) == 69)) {
          $85 = (($$0$ph38) + 2|0);
          $86 = ($85|0)==($__fmte|0);
          if ($86) {
           label = 30;
           break L13;
          }
          $87 = HEAP8[$85>>0]|0;
          $88 = HEAP32[$25>>2]|0;
          $89 = (($88) + 36|0);
          $90 = HEAP32[$89>>2]|0;
          $91 = (FUNCTION_TABLE_iiii[$90 & 511]($25,$87,0)|0);
          $$1 = $85;$__cmd$0 = $91;$__opt$0 = $84;
         } else {
          $$1 = $78;$__cmd$0 = $84;$__opt$0 = 0;
         }
         $92 = HEAP32[$this>>2]|0;
         $93 = (($92) + 36|0);
         $94 = HEAP32[$93>>2]|0;
         HEAP32[$1>>2] = $52;
         HEAP32[$2>>2] = $__e$sroa$0$4;
         ;HEAP32[$$byval_copy+0>>2]=HEAP32[$1+0>>2]|0;
         ;HEAP32[$$byval_copy4+0>>2]=HEAP32[$2+0>>2]|0;
         FUNCTION_TABLE_viiiiiiiii[$94 & 255]($0,$this,$$byval_copy,$$byval_copy4,$__iob,$__err,$__tm,$__cmd$0,$__opt$0);
         $95 = HEAP32[$0>>2]|0;
         $96 = (($$1) + 1|0);
         $$0$ph$be = $96;$__b$sroa$0$3 = $95;$__e$sroa$0$5 = $__e$sroa$0$4;
        }
        else if ((label|0) == 37) {
         while(1) {
          label = 0;
          $$2 = (($$0$pn) + 1|0);
          $105 = ($$2|0)==($__fmte|0);
          if ($105) {
           $$2$lcssa = $__fmte;
           break;
          }
          $106 = HEAP8[$$2>>0]|0;
          $isascii1$i4 = ($106<<24>>24)>(-1);
          if (!($isascii1$i4)) {
           $$2$lcssa = $$2;
           break;
          }
          $107 = $106 << 24 >> 24;
          $108 = (($100) + ($107<<1)|0);
          $109 = HEAP16[$108>>1]|0;
          $110 = $109 & 8192;
          $111 = ($110<<16>>16)==(0);
          if ($111) {
           $$2$lcssa = $$2;
           break;
          } else {
           $$0$pn = $$2;
           label = 37;
          }
         }
         $$pre$i$i$i7 = $52;$$pre$i2$i$i11 = $__e$sroa$0$4;$126 = $__e$sroa$0$4;$__b$sroa$0$4 = $__b$sroa$0$2;$__e$sroa$0$6 = $__e$sroa$0$4;
         while(1) {
          $112 = ($$pre$i$i$i7|0)==(0|0);
          if ($112) {
           $124 = 0;$__b$sroa$0$5 = $__b$sroa$0$4;
          } else {
           $113 = (($$pre$i$i$i7) + 12|0);
           $114 = HEAP32[$113>>2]|0;
           $115 = (($$pre$i$i$i7) + 16|0);
           $116 = HEAP32[$115>>2]|0;
           $117 = ($114|0)==($116|0);
           if ($117) {
            $118 = HEAP32[$$pre$i$i$i7>>2]|0;
            $119 = (($118) + 36|0);
            $120 = HEAP32[$119>>2]|0;
            $121 = (FUNCTION_TABLE_ii[$120 & 511]($$pre$i$i$i7)|0);
            $122 = ($121|0)==(-1);
            $$__b$sroa$0$4 = $122 ? 0 : $__b$sroa$0$4;
            $$$pre$i$i$i7 = $122 ? 0 : $$pre$i$i$i7;
            $124 = $$$pre$i$i$i7;$__b$sroa$0$5 = $$__b$sroa$0$4;
           } else {
            $124 = $$pre$i$i$i7;$__b$sroa$0$5 = $__b$sroa$0$4;
           }
          }
          $123 = ($124|0)==(0|0);
          $125 = ($126|0)==(0|0);
          do {
           if ($125) {
            $$pre$i2$i$i1141 = $$pre$i2$i$i11;$__e$sroa$0$7 = $__e$sroa$0$6;
            label = 48;
           } else {
            $127 = (($126) + 12|0);
            $128 = HEAP32[$127>>2]|0;
            $129 = (($126) + 16|0);
            $130 = HEAP32[$129>>2]|0;
            $131 = ($128|0)==($130|0);
            if (!($131)) {
             if ($123) {
              $$pre$i2$i$i1140 = $$pre$i2$i$i11;$219 = $126;$__e$sroa$0$8 = $__e$sroa$0$6;
              break;
             } else {
              $$0$ph$be = $$2$lcssa;$__b$sroa$0$3 = $__b$sroa$0$5;$__e$sroa$0$5 = $__e$sroa$0$6;
              break L39;
             }
            }
            $132 = HEAP32[$126>>2]|0;
            $133 = (($132) + 36|0);
            $134 = HEAP32[$133>>2]|0;
            $135 = (FUNCTION_TABLE_ii[$134 & 511]($126)|0);
            $136 = ($135|0)==(-1);
            if ($136) {
             $$pre$i2$i$i1141 = 0;$__e$sroa$0$7 = 0;
             label = 48;
            } else {
             $137 = ($$pre$i2$i$i11|0)==(0|0);
             $tmp$i$i13 = $123 ^ $137;
             if ($tmp$i$i13) {
              $$pre$i2$i$i1140 = $$pre$i2$i$i11;$219 = $$pre$i2$i$i11;$__e$sroa$0$8 = $__e$sroa$0$6;
             } else {
              $$0$ph$be = $$2$lcssa;$__b$sroa$0$3 = $__b$sroa$0$5;$__e$sroa$0$5 = $__e$sroa$0$6;
              break L39;
             }
            }
           }
          } while(0);
          if ((label|0) == 48) {
           label = 0;
           if ($123) {
            $$0$ph$be = $$2$lcssa;$__b$sroa$0$3 = $__b$sroa$0$5;$__e$sroa$0$5 = $__e$sroa$0$7;
            break L39;
           } else {
            $$pre$i2$i$i1140 = $$pre$i2$i$i1141;$219 = 0;$__e$sroa$0$8 = $__e$sroa$0$7;
           }
          }
          $138 = (($124) + 12|0);
          $139 = HEAP32[$138>>2]|0;
          $140 = (($124) + 16|0);
          $141 = HEAP32[$140>>2]|0;
          $142 = ($139|0)==($141|0);
          if ($142) {
           $143 = HEAP32[$124>>2]|0;
           $144 = (($143) + 36|0);
           $145 = HEAP32[$144>>2]|0;
           $146 = (FUNCTION_TABLE_ii[$145 & 511]($124)|0);
           $$0$i$i = $146;
          } else {
           $147 = HEAP8[$139>>0]|0;
           $148 = $147&255;
           $$0$i$i = $148;
          }
          $149 = $$0$i$i&255;
          $isascii1$i14 = ($149<<24>>24)>(-1);
          if (!($isascii1$i14)) {
           $$0$ph$be = $$2$lcssa;$__b$sroa$0$3 = $__b$sroa$0$5;$__e$sroa$0$5 = $__e$sroa$0$8;
           break L39;
          }
          $sext = $$0$i$i << 24;
          $150 = $sext >> 24;
          $151 = HEAP32[$37>>2]|0;
          $152 = (($151) + ($150<<1)|0);
          $153 = HEAP16[$152>>1]|0;
          $154 = $153 & 8192;
          $155 = ($154<<16>>16)==(0);
          if ($155) {
           $$0$ph$be = $$2$lcssa;$__b$sroa$0$3 = $__b$sroa$0$5;$__e$sroa$0$5 = $__e$sroa$0$8;
           break L39;
          }
          $156 = HEAP32[$138>>2]|0;
          $157 = HEAP32[$140>>2]|0;
          $158 = ($156|0)==($157|0);
          if ($158) {
           $159 = HEAP32[$124>>2]|0;
           $160 = (($159) + 40|0);
           $161 = HEAP32[$160>>2]|0;
           (FUNCTION_TABLE_ii[$161 & 511]($124)|0);
           $$pre$i$i$i7 = $124;$$pre$i2$i$i11 = $$pre$i2$i$i1140;$126 = $219;$__b$sroa$0$4 = $__b$sroa$0$5;$__e$sroa$0$6 = $__e$sroa$0$8;
           continue;
          } else {
           $162 = (($156) + 1|0);
           HEAP32[$138>>2] = $162;
           $$pre$i$i$i7 = $124;$$pre$i2$i$i11 = $$pre$i2$i$i1140;$126 = $219;$__b$sroa$0$4 = $__b$sroa$0$5;$__e$sroa$0$6 = $__e$sroa$0$8;
           continue;
          }
         }
        }
        else if ((label|0) == 62) {
         label = 0;
         $185 = HEAP32[$163>>2]|0;
         $186 = HEAP32[$165>>2]|0;
         $187 = ($185|0)==($186|0);
         if ($187) {
          $188 = HEAP32[$52>>2]|0;
          $189 = (($188) + 40|0);
          $190 = HEAP32[$189>>2]|0;
          (FUNCTION_TABLE_ii[$190 & 511]($52)|0);
         } else {
          $191 = (($185) + 1|0);
          HEAP32[$163>>2] = $191;
         }
         $192 = (($$0$ph38) + 1|0);
         $$0$ph$be = $192;$__b$sroa$0$3 = $__b$sroa$0$2;$__e$sroa$0$5 = $__e$sroa$0$4;
        }
       } while(0);
       $97 = ($$0$ph$be|0)==($__fmte|0);
       if ($97) {
        $$pre$i$i$i20 = $__b$sroa$0$3;$__e$sroa$0$10 = $__e$sroa$0$5;
        break L11;
       }
       $$pre39$pre = HEAP32[$__err>>2]|0;
       $$0$ph38 = $$0$ph$be;$$pre39 = $$pre39$pre;$__b$sroa$0$0 = $__b$sroa$0$3;$__e$sroa$0$0 = $__e$sroa$0$5;
      }
      if ((label|0) == 21) {
       HEAP32[$__err>>2] = 4;
       $$pre$i$i$i20 = $52;$__e$sroa$0$10 = $__e$sroa$0$3;
       break;
      }
      else if ((label|0) == 27) {
       HEAP32[$__err>>2] = 4;
       $$pre$i$i$i20 = $52;$__e$sroa$0$10 = $__e$sroa$0$4;
       break;
      }
      else if ((label|0) == 30) {
       HEAP32[$__err>>2] = 4;
       $$pre$i$i$i20 = $52;$__e$sroa$0$10 = $__e$sroa$0$4;
       break;
      }
     }
    } while(0);
    $193 = ($$pre$i$i$i20|0)==(0|0);
    if ($193) {
     $205 = 0;
    } else {
     $194 = (($$pre$i$i$i20) + 12|0);
     $195 = HEAP32[$194>>2]|0;
     $196 = (($$pre$i$i$i20) + 16|0);
     $197 = HEAP32[$196>>2]|0;
     $198 = ($195|0)==($197|0);
     if ($198) {
      $199 = HEAP32[$$pre$i$i$i20>>2]|0;
      $200 = (($199) + 36|0);
      $201 = HEAP32[$200>>2]|0;
      $202 = (FUNCTION_TABLE_ii[$201 & 511]($$pre$i$i$i20)|0);
      $203 = ($202|0)==(-1);
      $$$pre$i$i$i20 = $203 ? 0 : $$pre$i$i$i20;
      $205 = $$$pre$i$i$i20;
     } else {
      $205 = $$pre$i$i$i20;
     }
    }
    $204 = ($205|0)==(0|0);
    $206 = ($__e$sroa$0$10|0)==(0|0);
    do {
     if ($206) {
      label = 74;
     } else {
      $207 = (($__e$sroa$0$10) + 12|0);
      $208 = HEAP32[$207>>2]|0;
      $209 = (($__e$sroa$0$10) + 16|0);
      $210 = HEAP32[$209>>2]|0;
      $211 = ($208|0)==($210|0);
      if ($211) {
       $212 = HEAP32[$__e$sroa$0$10>>2]|0;
       $213 = (($212) + 36|0);
       $214 = HEAP32[$213>>2]|0;
       $215 = (FUNCTION_TABLE_ii[$214 & 511]($__e$sroa$0$10)|0);
       $216 = ($215|0)==(-1);
       if ($216) {
        label = 74;
        break;
       }
      }
      if ($204) {
       HEAP32[$agg$result>>2] = $205;
       STACKTOP = sp;return;
      }
     }
    } while(0);
    if ((label|0) == 74) {
     if (!($204)) {
      HEAP32[$agg$result>>2] = $205;
      STACKTOP = sp;return;
     }
    }
    $217 = HEAP32[$__err>>2]|0;
    $218 = $217 | 2;
    HEAP32[$__err>>2] = $218;
    HEAP32[$agg$result>>2] = $205;
    STACKTOP = sp;return;
   }
  }
  $27 = (___cxa_allocate_exception(4)|0);
  HEAP32[$27>>2] = ((14256 + 8|0));
  __THREW__ = 0;
  invoke_viii(379,($27|0),(14336|0),(351|0));
  $28 = __THREW__; __THREW__ = 0;
  $29 = $28&1;
  if (!($29)) {
   // unreachable;
  }
 }
 $64 = ___cxa_find_matching_catch(-1,-1)|0;
 $65 = tempRet0;
 $66 = (($4) + 4|0);
 $67 = HEAP32[$66>>2]|0;HEAP32[$66>>2] = (($67+-1)|0);
 $68 = ($67|0)==(0);
 if (!($68)) {
  ___resumeException($64|0);
  // unreachable;
 }
 $69 = HEAP32[$4>>2]|0;
 $70 = (($69) + 8|0);
 $71 = HEAP32[$70>>2]|0;
 FUNCTION_TABLE_vi[$71 & 511]($4);
 ___resumeException($64|0);
 // unreachable;
}
function __ZNSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($this|0)==(0|0);
 if (!($0)) {
  _free($this);
 }
 STACKTOP = sp;return;
}
function __ZNSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13do_date_orderEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 2;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$__b>>2]|0;
 $1 = HEAP32[$__e>>2]|0;
 __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($agg$result,$this,$0,$1,$__iob,$__err,$__tm,5336,((5336 + 8|0)));
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 20|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (FUNCTION_TABLE_ii[$3 & 511]($0)|0);
 $5 = HEAP32[$__b>>2]|0;
 $6 = HEAP32[$__e>>2]|0;
 $7 = HEAP8[$4>>0]|0;
 $8 = $7 & 1;
 $9 = ($8<<24>>24)==(0);
 if ($9) {
  $14 = (($4) + 1|0);
  $15 = $7&255;
  $16 = $15 >>> 1;
  $18 = $14;$19 = $16;
 } else {
  $10 = (($4) + 8|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = (($4) + 4|0);
  $13 = HEAP32[$12>>2]|0;
  $18 = $11;$19 = $13;
 }
 $17 = (($18) + ($19)|0);
 __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($agg$result,$this,$5,$6,$__iob,$__err,$__tm,$18,$17);
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $__p$i$i$i$i = sp;
 $0 = (($__iob) + 28|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 4|0);
 $3 = HEAP32[$2>>2]|0;HEAP32[$2>>2] = (($3+1)|0);
 $4 = HEAP32[6416>>2]|0;
 $5 = ($4|0)==(-1);
 if ($5) {
  label = 3;
 } else {
  HEAP32[$__p$i$i$i$i>>2] = 6416;
  $6 = (($__p$i$i$i$i) + 4|0);
  HEAP32[$6>>2] = (439);
  $7 = (($__p$i$i$i$i) + 8|0);
  HEAP32[$7>>2] = 0;
  __THREW__ = 0;
  invoke_vii(440,(6416|0),($__p$i$i$i$i|0));
  $8 = __THREW__; __THREW__ = 0;
  $9 = $8&1;
  if (!($9)) {
   label = 3;
  }
 }
 if ((label|0) == 3) {
  $10 = HEAP32[((6416 + 4|0))>>2]|0;
  $11 = (($10) + -1)|0;
  $12 = (($1) + 12|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (($1) + 8|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = $13;
  $17 = $15;
  $18 = (($16) - ($17))|0;
  $19 = $18 >> 2;
  $20 = ($19>>>0)>($11>>>0);
  if ($20) {
   $21 = (($15) + ($11<<2)|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = ($22|0)==(0|0);
   if (!($23)) {
    $27 = (($1) + 4|0);
    $28 = HEAP32[$27>>2]|0;HEAP32[$27>>2] = (($28+-1)|0);
    $29 = ($28|0)==(0);
    if ($29) {
     $30 = HEAP32[$1>>2]|0;
     $31 = (($30) + 8|0);
     $32 = HEAP32[$31>>2]|0;
     FUNCTION_TABLE_vi[$32 & 511]($1);
    }
    $33 = HEAP32[$__e>>2]|0;
    $34 = (($this) + 8|0);
    $35 = HEAP32[$34>>2]|0;
    $36 = HEAP32[$35>>2]|0;
    $37 = (FUNCTION_TABLE_ii[$36 & 511]($34)|0);
    $38 = (($37) + 168|0);
    $39 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$33,$37,$38,$22,$__err,0)|0);
    $40 = $39;
    $41 = $37;
    $42 = (($40) - ($41))|0;
    $43 = ($42|0)<(168);
    if (!($43)) {
     $47 = HEAP32[$__b>>2]|0;
     HEAP32[$agg$result>>2] = $47;
     STACKTOP = sp;return;
    }
    $44 = (($__tm) + 24|0);
    $45 = (($42|0) / 12)&-1;
    $46 = (($45|0) % 7)&-1;
    HEAP32[$44>>2] = $46;
    $47 = HEAP32[$__b>>2]|0;
    HEAP32[$agg$result>>2] = $47;
    STACKTOP = sp;return;
   }
  }
  $24 = (___cxa_allocate_exception(4)|0);
  HEAP32[$24>>2] = ((14256 + 8|0));
  __THREW__ = 0;
  invoke_viii(379,($24|0),(14336|0),(351|0));
  $25 = __THREW__; __THREW__ = 0;
  $26 = $25&1;
  if (!($26)) {
   // unreachable;
  }
 }
 $48 = ___cxa_find_matching_catch(-1,-1)|0;
 $49 = tempRet0;
 $50 = (($1) + 4|0);
 $51 = HEAP32[$50>>2]|0;HEAP32[$50>>2] = (($51+-1)|0);
 $52 = ($51|0)==(0);
 if (!($52)) {
  ___resumeException($48|0);
  // unreachable;
 }
 $53 = HEAP32[$1>>2]|0;
 $54 = (($53) + 8|0);
 $55 = HEAP32[$54>>2]|0;
 FUNCTION_TABLE_vi[$55 & 511]($1);
 ___resumeException($48|0);
 // unreachable;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $__p$i$i$i$i = sp;
 $0 = (($__iob) + 28|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 4|0);
 $3 = HEAP32[$2>>2]|0;HEAP32[$2>>2] = (($3+1)|0);
 $4 = HEAP32[6416>>2]|0;
 $5 = ($4|0)==(-1);
 if ($5) {
  label = 3;
 } else {
  HEAP32[$__p$i$i$i$i>>2] = 6416;
  $6 = (($__p$i$i$i$i) + 4|0);
  HEAP32[$6>>2] = (439);
  $7 = (($__p$i$i$i$i) + 8|0);
  HEAP32[$7>>2] = 0;
  __THREW__ = 0;
  invoke_vii(440,(6416|0),($__p$i$i$i$i|0));
  $8 = __THREW__; __THREW__ = 0;
  $9 = $8&1;
  if (!($9)) {
   label = 3;
  }
 }
 if ((label|0) == 3) {
  $10 = HEAP32[((6416 + 4|0))>>2]|0;
  $11 = (($10) + -1)|0;
  $12 = (($1) + 12|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (($1) + 8|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = $13;
  $17 = $15;
  $18 = (($16) - ($17))|0;
  $19 = $18 >> 2;
  $20 = ($19>>>0)>($11>>>0);
  if ($20) {
   $21 = (($15) + ($11<<2)|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = ($22|0)==(0|0);
   if (!($23)) {
    $27 = (($1) + 4|0);
    $28 = HEAP32[$27>>2]|0;HEAP32[$27>>2] = (($28+-1)|0);
    $29 = ($28|0)==(0);
    if ($29) {
     $30 = HEAP32[$1>>2]|0;
     $31 = (($30) + 8|0);
     $32 = HEAP32[$31>>2]|0;
     FUNCTION_TABLE_vi[$32 & 511]($1);
    }
    $33 = HEAP32[$__e>>2]|0;
    $34 = (($this) + 8|0);
    $35 = HEAP32[$34>>2]|0;
    $36 = (($35) + 4|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = (FUNCTION_TABLE_ii[$37 & 511]($34)|0);
    $39 = (($38) + 288|0);
    $40 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$33,$38,$39,$22,$__err,0)|0);
    $41 = $40;
    $42 = $38;
    $43 = (($41) - ($42))|0;
    $44 = ($43|0)<(288);
    if (!($44)) {
     $48 = HEAP32[$__b>>2]|0;
     HEAP32[$agg$result>>2] = $48;
     STACKTOP = sp;return;
    }
    $45 = (($__tm) + 16|0);
    $46 = (($43|0) / 12)&-1;
    $47 = (($46|0) % 12)&-1;
    HEAP32[$45>>2] = $47;
    $48 = HEAP32[$__b>>2]|0;
    HEAP32[$agg$result>>2] = $48;
    STACKTOP = sp;return;
   }
  }
  $24 = (___cxa_allocate_exception(4)|0);
  HEAP32[$24>>2] = ((14256 + 8|0));
  __THREW__ = 0;
  invoke_viii(379,($24|0),(14336|0),(351|0));
  $25 = __THREW__; __THREW__ = 0;
  $26 = $25&1;
  if (!($26)) {
   // unreachable;
  }
 }
 $49 = ___cxa_find_matching_catch(-1,-1)|0;
 $50 = tempRet0;
 $51 = (($1) + 4|0);
 $52 = HEAP32[$51>>2]|0;HEAP32[$51>>2] = (($52+-1)|0);
 $53 = ($52|0)==(0);
 if (!($53)) {
  ___resumeException($49|0);
  // unreachable;
 }
 $54 = HEAP32[$1>>2]|0;
 $55 = (($54) + 8|0);
 $56 = HEAP32[$55>>2]|0;
 FUNCTION_TABLE_vi[$56 & 511]($1);
 ___resumeException($49|0);
 // unreachable;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $$$i = 0, $$off$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$i$i$i$i = 0, $__t$0$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $__p$i$i$i$i = sp;
 $0 = (($__iob) + 28|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 4|0);
 $3 = HEAP32[$2>>2]|0;HEAP32[$2>>2] = (($3+1)|0);
 $4 = HEAP32[6416>>2]|0;
 $5 = ($4|0)==(-1);
 if ($5) {
  label = 3;
 } else {
  HEAP32[$__p$i$i$i$i>>2] = 6416;
  $6 = (($__p$i$i$i$i) + 4|0);
  HEAP32[$6>>2] = (439);
  $7 = (($__p$i$i$i$i) + 8|0);
  HEAP32[$7>>2] = 0;
  __THREW__ = 0;
  invoke_vii(440,(6416|0),($__p$i$i$i$i|0));
  $8 = __THREW__; __THREW__ = 0;
  $9 = $8&1;
  if (!($9)) {
   label = 3;
  }
 }
 if ((label|0) == 3) {
  $10 = HEAP32[((6416 + 4|0))>>2]|0;
  $11 = (($10) + -1)|0;
  $12 = (($1) + 12|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (($1) + 8|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = $13;
  $17 = $15;
  $18 = (($16) - ($17))|0;
  $19 = $18 >> 2;
  $20 = ($19>>>0)>($11>>>0);
  if ($20) {
   $21 = (($15) + ($11<<2)|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = ($22|0)==(0|0);
   if (!($23)) {
    $27 = (($1) + 4|0);
    $28 = HEAP32[$27>>2]|0;HEAP32[$27>>2] = (($28+-1)|0);
    $29 = ($28|0)==(0);
    if ($29) {
     $30 = HEAP32[$1>>2]|0;
     $31 = (($30) + 8|0);
     $32 = HEAP32[$31>>2]|0;
     FUNCTION_TABLE_vi[$32 & 511]($1);
    }
    $33 = (($__tm) + 20|0);
    $34 = HEAP32[$__e>>2]|0;
    $35 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$34,$__err,$22,4)|0);
    $36 = HEAP32[$__err>>2]|0;
    $37 = $36 & 4;
    $38 = ($37|0)==(0);
    if (!($38)) {
     $44 = HEAP32[$__b>>2]|0;
     HEAP32[$agg$result>>2] = $44;
     STACKTOP = sp;return;
    }
    $39 = ($35|0)<(69);
    if ($39) {
     $40 = (($35) + 2000)|0;
     $__t$0$i = $40;
    } else {
     $$off$i = (($35) + -69)|0;
     $41 = ($$off$i>>>0)<(31);
     $42 = (($35) + 1900)|0;
     $$$i = $41 ? $42 : $35;
     $__t$0$i = $$$i;
    }
    $43 = (($__t$0$i) + -1900)|0;
    HEAP32[$33>>2] = $43;
    $44 = HEAP32[$__b>>2]|0;
    HEAP32[$agg$result>>2] = $44;
    STACKTOP = sp;return;
   }
  }
  $24 = (___cxa_allocate_exception(4)|0);
  HEAP32[$24>>2] = ((14256 + 8|0));
  __THREW__ = 0;
  invoke_viii(379,($24|0),(14336|0),(351|0));
  $25 = __THREW__; __THREW__ = 0;
  $26 = $25&1;
  if (!($26)) {
   // unreachable;
  }
 }
 $45 = ___cxa_find_matching_catch(-1,-1)|0;
 $46 = tempRet0;
 $47 = (($1) + 4|0);
 $48 = HEAP32[$47>>2]|0;HEAP32[$47>>2] = (($48+-1)|0);
 $49 = ($48|0)==(0);
 if (!($49)) {
  ___resumeException($45|0);
  // unreachable;
 }
 $50 = HEAP32[$1>>2]|0;
 $51 = (($50) + 8|0);
 $52 = HEAP32[$51>>2]|0;
 FUNCTION_TABLE_vi[$52 & 511]($1);
 ___resumeException($45|0);
 // unreachable;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm,$__fmt,$0) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 $__fmt = $__fmt|0;
 $0 = $0|0;
 var $$$i = 0, $$0$i$i$i = 0, $$0$i$i$i11 = 0, $$byval_copy = 0, $$byval_copy57 = 0, $$off$i = 0, $$off$i12 = 0, $$off$i35 = 0, $$pre$i$i$i$i = 0, $$pre$i$i$i$i7 = 0, $$pre$i$i$i2$i = 0, $$pre$i$i$i2$i14 = 0, $$pre$i2$i$i6$i = 0, $$pre$i2$i$i611$i = 0, $$sroa$051$0 = 0, $$sroa$051$2 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0;
 var $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
 var $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0;
 var $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0;
 var $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0;
 var $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0;
 var $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0;
 var $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0;
 var $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0;
 var $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0;
 var $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0;
 var $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0;
 var $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0;
 var $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0;
 var $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0;
 var $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0;
 var $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0;
 var $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0;
 var $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__p$i$i$i$i = 0, $__t$0$i = 0, $isascii1$i$i = 0, $or$cond$i = 0, $or$cond$i15 = 0, $or$cond$i18 = 0, $or$cond$i21 = 0, $or$cond$i26 = 0, $or$cond$i29 = 0;
 var $sext$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $$byval_copy57 = sp + 52|0;
 $$byval_copy = sp + 48|0;
 $__p$i$i$i$i = sp;
 $1 = sp + 44|0;
 $2 = sp + 40|0;
 $3 = sp + 36|0;
 $4 = sp + 32|0;
 $5 = sp + 28|0;
 $6 = sp + 24|0;
 $7 = sp + 20|0;
 $8 = sp + 16|0;
 $9 = sp + 12|0;
 HEAP32[$__err>>2] = 0;
 $10 = (($__iob) + 28|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($11) + 4|0);
 $13 = HEAP32[$12>>2]|0;HEAP32[$12>>2] = (($13+1)|0);
 $14 = HEAP32[6416>>2]|0;
 $15 = ($14|0)==(-1);
 if ($15) {
  label = 3;
 } else {
  HEAP32[$__p$i$i$i$i>>2] = 6416;
  $16 = (($__p$i$i$i$i) + 4|0);
  HEAP32[$16>>2] = (439);
  $17 = (($__p$i$i$i$i) + 8|0);
  HEAP32[$17>>2] = 0;
  __THREW__ = 0;
  invoke_vii(440,(6416|0),($__p$i$i$i$i|0));
  $18 = __THREW__; __THREW__ = 0;
  $19 = $18&1;
  if (!($19)) {
   label = 3;
  }
 }
 if ((label|0) == 3) {
  $20 = HEAP32[((6416 + 4|0))>>2]|0;
  $21 = (($20) + -1)|0;
  $22 = (($11) + 12|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = (($11) + 8|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = $23;
  $27 = $25;
  $28 = (($26) - ($27))|0;
  $29 = $28 >> 2;
  $30 = ($29>>>0)>($21>>>0);
  if ($30) {
   $31 = (($25) + ($21<<2)|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = ($32|0)==(0|0);
   if (!($33)) {
    $37 = (($11) + 4|0);
    $38 = HEAP32[$37>>2]|0;HEAP32[$37>>2] = (($38+-1)|0);
    $39 = ($38|0)==(0);
    if ($39) {
     $40 = HEAP32[$11>>2]|0;
     $41 = (($40) + 8|0);
     $42 = HEAP32[$41>>2]|0;
     FUNCTION_TABLE_vi[$42 & 511]($11);
    }
    $43 = $__fmt << 24 >> 24;
    L11: do {
     switch ($43|0) {
     case 72:  {
      $116 = HEAP32[$__e>>2]|0;
      $117 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$116,$__err,$32,2)|0);
      $118 = HEAP32[$__err>>2]|0;
      $119 = $118 & 4;
      $120 = ($119|0)==(0);
      $121 = ($117|0)<(24);
      $or$cond$i = $120 & $121;
      if ($or$cond$i) {
       $122 = (($__tm) + 8|0);
       HEAP32[$122>>2] = $117;
       break L11;
      } else {
       $123 = $118 | 4;
       HEAP32[$__err>>2] = $123;
       break L11;
      }
      break;
     }
     case 109:  {
      $140 = HEAP32[$__e>>2]|0;
      $141 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$140,$__err,$32,2)|0);
      $142 = HEAP32[$__err>>2]|0;
      $143 = $142 & 4;
      $144 = ($143|0)==(0);
      $145 = ($141|0)<(13);
      $or$cond$i18 = $144 & $145;
      if ($or$cond$i18) {
       $146 = (($__tm) + 16|0);
       $147 = (($141) + -1)|0;
       HEAP32[$146>>2] = $147;
       break L11;
      } else {
       $148 = $142 | 4;
       HEAP32[$__err>>2] = $148;
       break L11;
      }
      break;
     }
     case 99:  {
      $81 = (($this) + 8|0);
      $82 = HEAP32[$81>>2]|0;
      $83 = (($82) + 12|0);
      $84 = HEAP32[$83>>2]|0;
      $85 = (FUNCTION_TABLE_ii[$84 & 511]($81)|0);
      $86 = HEAP32[$__b>>2]|0;
      $87 = HEAP32[$__e>>2]|0;
      $88 = HEAP8[$85>>0]|0;
      $89 = $88 & 1;
      $90 = ($89<<24>>24)==(0);
      if ($90) {
       $95 = (($85) + 1|0);
       $96 = $88&255;
       $97 = $96 >>> 1;
       $100 = $97;$99 = $95;
      } else {
       $91 = (($85) + 8|0);
       $92 = HEAP32[$91>>2]|0;
       $93 = (($85) + 4|0);
       $94 = HEAP32[$93>>2]|0;
       $100 = $94;$99 = $92;
      }
      $98 = (($99) + ($100)|0);
      __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($1,$this,$86,$87,$__iob,$__err,$__tm,$99,$98);
      $101 = HEAP32[$1>>2]|0;
      HEAP32[$__b>>2] = $101;
      break;
     }
     case 101: case 100:  {
      $102 = (($__tm) + 12|0);
      $103 = HEAP32[$__e>>2]|0;
      $104 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$103,$__err,$32,2)|0);
      $105 = HEAP32[$__err>>2]|0;
      $106 = $105 & 4;
      $107 = ($106|0)==(0);
      if ($107) {
       $$off$i = (($104) + -1)|0;
       $108 = ($$off$i>>>0)<(31);
       if ($108) {
        HEAP32[$102>>2] = $104;
        break L11;
       }
      }
      $109 = $105 | 4;
      HEAP32[$__err>>2] = $109;
      break;
     }
     case 68:  {
      $110 = HEAP32[$__b>>2]|0;
      $111 = HEAP32[$__e>>2]|0;
      __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($2,$this,$110,$111,$__iob,$__err,$__tm,5344,((5344 + 8|0)));
      $112 = HEAP32[$2>>2]|0;
      HEAP32[$__b>>2] = $112;
      break;
     }
     case 73:  {
      $124 = (($__tm) + 8|0);
      $125 = HEAP32[$__e>>2]|0;
      $126 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$125,$__err,$32,2)|0);
      $127 = HEAP32[$__err>>2]|0;
      $128 = $127 & 4;
      $129 = ($128|0)==(0);
      if ($129) {
       $$off$i12 = (($126) + -1)|0;
       $130 = ($$off$i12>>>0)<(12);
       if ($130) {
        HEAP32[$124>>2] = $126;
        break L11;
       }
      }
      $131 = $127 | 4;
      HEAP32[$__err>>2] = $131;
      break;
     }
     case 104: case 66: case 98:  {
      $66 = HEAP32[$__e>>2]|0;
      $67 = (($this) + 8|0);
      $68 = HEAP32[$67>>2]|0;
      $69 = (($68) + 4|0);
      $70 = HEAP32[$69>>2]|0;
      $71 = (FUNCTION_TABLE_ii[$70 & 511]($67)|0);
      $72 = (($71) + 288|0);
      $73 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$66,$71,$72,$32,$__err,0)|0);
      $74 = $73;
      $75 = $71;
      $76 = (($74) - ($75))|0;
      $77 = ($76|0)<(288);
      if ($77) {
       $78 = (($__tm) + 16|0);
       $79 = (($76|0) / 12)&-1;
       $80 = (($79|0) % 12)&-1;
       HEAP32[$78>>2] = $80;
      }
      break;
     }
     case 116: case 110:  {
      $157 = HEAP32[$__e>>2]|0;
      $158 = (($32) + 8|0);
      $$sroa$051$0 = $157;
      L39: while(1) {
       $159 = HEAP32[$__b>>2]|0;
       $160 = ($159|0)==(0|0);
       do {
        if ($160) {
         $172 = 0;
        } else {
         $161 = (($159) + 12|0);
         $162 = HEAP32[$161>>2]|0;
         $163 = (($159) + 16|0);
         $164 = HEAP32[$163>>2]|0;
         $165 = ($162|0)==($164|0);
         if ($165) {
          $166 = HEAP32[$159>>2]|0;
          $167 = (($166) + 36|0);
          $168 = HEAP32[$167>>2]|0;
          $169 = (FUNCTION_TABLE_ii[$168 & 511]($159)|0);
          $170 = ($169|0)==(-1);
          if ($170) {
           HEAP32[$__b>>2] = 0;
           $172 = 0;
           break;
          } else {
           $$pre$i$i$i$i7 = HEAP32[$__b>>2]|0;
           $172 = $$pre$i$i$i$i7;
           break;
          }
         } else {
          $172 = $159;
         }
        }
       } while(0);
       $171 = ($172|0)==(0|0);
       $173 = ($$sroa$051$0|0)==(0|0);
       do {
        if ($173) {
         label = 53;
        } else {
         $174 = (($$sroa$051$0) + 12|0);
         $175 = HEAP32[$174>>2]|0;
         $176 = (($$sroa$051$0) + 16|0);
         $177 = HEAP32[$176>>2]|0;
         $178 = ($175|0)==($177|0);
         if (!($178)) {
          if ($171) {
           $$sroa$051$2 = $$sroa$051$0;
           break;
          } else {
           $$pre$i2$i$i6$i = $$sroa$051$0;
           break L39;
          }
         }
         $179 = HEAP32[$$sroa$051$0>>2]|0;
         $180 = (($179) + 36|0);
         $181 = HEAP32[$180>>2]|0;
         $182 = (FUNCTION_TABLE_ii[$181 & 511]($$sroa$051$0)|0);
         $183 = ($182|0)==(-1);
         if ($183) {
          label = 53;
         } else {
          if ($171) {
           $$sroa$051$2 = $$sroa$051$0;
          } else {
           $$pre$i2$i$i6$i = $$sroa$051$0;
           break L39;
          }
         }
        }
       } while(0);
       if ((label|0) == 53) {
        label = 0;
        if ($171) {
         $$pre$i2$i$i6$i = 0;
         break;
        } else {
         $$sroa$051$2 = 0;
        }
       }
       $184 = HEAP32[$__b>>2]|0;
       $185 = (($184) + 12|0);
       $186 = HEAP32[$185>>2]|0;
       $187 = (($184) + 16|0);
       $188 = HEAP32[$187>>2]|0;
       $189 = ($186|0)==($188|0);
       if ($189) {
        $190 = HEAP32[$184>>2]|0;
        $191 = (($190) + 36|0);
        $192 = HEAP32[$191>>2]|0;
        $193 = (FUNCTION_TABLE_ii[$192 & 511]($184)|0);
        $$0$i$i$i11 = $193;
       } else {
        $194 = HEAP8[$186>>0]|0;
        $195 = $194&255;
        $$0$i$i$i11 = $195;
       }
       $196 = $$0$i$i$i11&255;
       $isascii1$i$i = ($196<<24>>24)>(-1);
       if (!($isascii1$i$i)) {
        $$pre$i2$i$i6$i = $$sroa$051$2;
        break;
       }
       $sext$i = $$0$i$i$i11 << 24;
       $197 = $sext$i >> 24;
       $198 = HEAP32[$158>>2]|0;
       $199 = (($198) + ($197<<1)|0);
       $200 = HEAP16[$199>>1]|0;
       $201 = $200 & 8192;
       $202 = ($201<<16>>16)==(0);
       if ($202) {
        $$pre$i2$i$i6$i = $$sroa$051$2;
        break;
       }
       $203 = HEAP32[$__b>>2]|0;
       $204 = (($203) + 12|0);
       $205 = HEAP32[$204>>2]|0;
       $206 = (($203) + 16|0);
       $207 = HEAP32[$206>>2]|0;
       $208 = ($205|0)==($207|0);
       if ($208) {
        $209 = HEAP32[$203>>2]|0;
        $210 = (($209) + 40|0);
        $211 = HEAP32[$210>>2]|0;
        (FUNCTION_TABLE_ii[$211 & 511]($203)|0);
        $$sroa$051$0 = $$sroa$051$2;
        continue;
       } else {
        $212 = (($205) + 1|0);
        HEAP32[$204>>2] = $212;
        $$sroa$051$0 = $$sroa$051$2;
        continue;
       }
      }
      $213 = HEAP32[$__b>>2]|0;
      $214 = ($213|0)==(0|0);
      do {
       if ($214) {
        $226 = 0;
       } else {
        $215 = (($213) + 12|0);
        $216 = HEAP32[$215>>2]|0;
        $217 = (($213) + 16|0);
        $218 = HEAP32[$217>>2]|0;
        $219 = ($216|0)==($218|0);
        if ($219) {
         $220 = HEAP32[$213>>2]|0;
         $221 = (($220) + 36|0);
         $222 = HEAP32[$221>>2]|0;
         $223 = (FUNCTION_TABLE_ii[$222 & 511]($213)|0);
         $224 = ($223|0)==(-1);
         if ($224) {
          HEAP32[$__b>>2] = 0;
          $226 = 0;
          break;
         } else {
          $$pre$i$i$i2$i14 = HEAP32[$__b>>2]|0;
          $226 = $$pre$i$i$i2$i14;
          break;
         }
        } else {
         $226 = $213;
        }
       }
      } while(0);
      $225 = ($226|0)==(0|0);
      $227 = ($$pre$i2$i$i6$i|0)==(0|0);
      do {
       if ($227) {
        label = 72;
       } else {
        $228 = (($$pre$i2$i$i6$i) + 12|0);
        $229 = HEAP32[$228>>2]|0;
        $230 = (($$pre$i2$i$i6$i) + 16|0);
        $231 = HEAP32[$230>>2]|0;
        $232 = ($229|0)==($231|0);
        if ($232) {
         $233 = HEAP32[$$pre$i2$i$i6$i>>2]|0;
         $234 = (($233) + 36|0);
         $235 = HEAP32[$234>>2]|0;
         $236 = (FUNCTION_TABLE_ii[$235 & 511]($$pre$i2$i$i6$i)|0);
         $237 = ($236|0)==(-1);
         if ($237) {
          label = 72;
          break;
         }
        }
        if ($225) {
         break L11;
        }
       }
      } while(0);
      if ((label|0) == 72) {
       if (!($225)) {
        break L11;
       }
      }
      $238 = HEAP32[$__err>>2]|0;
      $239 = $238 | 2;
      HEAP32[$__err>>2] = $239;
      break;
     }
     case 70:  {
      $113 = HEAP32[$__b>>2]|0;
      $114 = HEAP32[$__e>>2]|0;
      __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($3,$this,$113,$114,$__iob,$__err,$__tm,5352,((5352 + 8|0)));
      $115 = HEAP32[$3>>2]|0;
      HEAP32[$__b>>2] = $115;
      break;
     }
     case 65: case 97:  {
      $52 = HEAP32[$__e>>2]|0;
      $53 = (($this) + 8|0);
      $54 = HEAP32[$53>>2]|0;
      $55 = HEAP32[$54>>2]|0;
      $56 = (FUNCTION_TABLE_ii[$55 & 511]($53)|0);
      $57 = (($56) + 168|0);
      $58 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$52,$56,$57,$32,$__err,0)|0);
      $59 = $58;
      $60 = $56;
      $61 = (($59) - ($60))|0;
      $62 = ($61|0)<(168);
      if ($62) {
       $63 = (($__tm) + 24|0);
       $64 = (($61|0) / 12)&-1;
       $65 = (($64|0) % 7)&-1;
       HEAP32[$63>>2] = $65;
      }
      break;
     }
     case 77:  {
      $149 = HEAP32[$__e>>2]|0;
      $150 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$149,$__err,$32,2)|0);
      $151 = HEAP32[$__err>>2]|0;
      $152 = $151 & 4;
      $153 = ($152|0)==(0);
      $154 = ($150|0)<(60);
      $or$cond$i21 = $153 & $154;
      if ($or$cond$i21) {
       $155 = (($__tm) + 4|0);
       HEAP32[$155>>2] = $150;
       break L11;
      } else {
       $156 = $151 | 4;
       HEAP32[$__err>>2] = $156;
       break L11;
      }
      break;
     }
     case 106:  {
      $132 = HEAP32[$__e>>2]|0;
      $133 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$132,$__err,$32,3)|0);
      $134 = HEAP32[$__err>>2]|0;
      $135 = $134 & 4;
      $136 = ($135|0)==(0);
      $137 = ($133|0)<(366);
      $or$cond$i15 = $136 & $137;
      if ($or$cond$i15) {
       $138 = (($__tm) + 28|0);
       HEAP32[$138>>2] = $133;
       break L11;
      } else {
       $139 = $134 | 4;
       HEAP32[$__err>>2] = $139;
       break L11;
      }
      break;
     }
     case 112:  {
      $240 = (($__tm) + 8|0);
      $241 = HEAP32[$__e>>2]|0;
      $242 = (($this) + 8|0);
      $243 = HEAP32[$242>>2]|0;
      $244 = (($243) + 8|0);
      $245 = HEAP32[$244>>2]|0;
      $246 = (FUNCTION_TABLE_ii[$245 & 511]($242)|0);
      $247 = HEAP8[$246>>0]|0;
      $248 = $247 & 1;
      $249 = ($248<<24>>24)==(0);
      if ($249) {
       $252 = $247&255;
       $253 = $252 >>> 1;
       $265 = $253;
      } else {
       $250 = (($246) + 4|0);
       $251 = HEAP32[$250>>2]|0;
       $265 = $251;
      }
      $254 = (($246) + 12|0);
      $255 = HEAP8[$254>>0]|0;
      $256 = $255 & 1;
      $257 = ($256<<24>>24)==(0);
      if ($257) {
       $260 = $255&255;
       $261 = $260 >>> 1;
       $263 = $261;
      } else {
       $258 = (($246) + 16|0);
       $259 = HEAP32[$258>>2]|0;
       $263 = $259;
      }
      $262 = (0 - ($263))|0;
      $264 = ($265|0)==($262|0);
      if ($264) {
       $266 = HEAP32[$__err>>2]|0;
       $267 = $266 | 4;
       HEAP32[$__err>>2] = $267;
       break L11;
      }
      $268 = (($246) + 24|0);
      $269 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$241,$246,$268,$32,$__err,0)|0);
      $270 = $269;
      $271 = $246;
      $272 = (($270) - ($271))|0;
      $273 = ($269|0)==($246|0);
      if ($273) {
       $274 = HEAP32[$240>>2]|0;
       $275 = ($274|0)==(12);
       if ($275) {
        HEAP32[$240>>2] = 0;
        break L11;
       }
      }
      $276 = ($272|0)==(12);
      if ($276) {
       $277 = HEAP32[$240>>2]|0;
       $278 = ($277|0)<(12);
       if ($278) {
        $279 = (($277) + 12)|0;
        HEAP32[$240>>2] = $279;
       }
      }
      break;
     }
     case 114:  {
      $280 = HEAP32[$__b>>2]|0;
      $281 = HEAP32[$__e>>2]|0;
      __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($4,$this,$280,$281,$__iob,$__err,$__tm,5360,((5360 + 11|0)));
      $282 = HEAP32[$4>>2]|0;
      HEAP32[$__b>>2] = $282;
      break;
     }
     case 82:  {
      $283 = HEAP32[$__b>>2]|0;
      $284 = HEAP32[$__e>>2]|0;
      __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($5,$this,$283,$284,$__iob,$__err,$__tm,5376,((5376 + 5|0)));
      $285 = HEAP32[$5>>2]|0;
      HEAP32[$__b>>2] = $285;
      break;
     }
     case 83:  {
      $286 = HEAP32[$__e>>2]|0;
      $287 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$286,$__err,$32,2)|0);
      $288 = HEAP32[$__err>>2]|0;
      $289 = $288 & 4;
      $290 = ($289|0)==(0);
      $291 = ($287|0)<(61);
      $or$cond$i26 = $290 & $291;
      if ($or$cond$i26) {
       HEAP32[$__tm>>2] = $287;
       break L11;
      } else {
       $292 = $288 | 4;
       HEAP32[$__err>>2] = $292;
       break L11;
      }
      break;
     }
     case 121:  {
      $330 = (($__tm) + 20|0);
      $331 = HEAP32[$__e>>2]|0;
      $332 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$331,$__err,$32,4)|0);
      $333 = HEAP32[$__err>>2]|0;
      $334 = $333 & 4;
      $335 = ($334|0)==(0);
      if ($335) {
       $336 = ($332|0)<(69);
       if ($336) {
        $337 = (($332) + 2000)|0;
        $__t$0$i = $337;
       } else {
        $$off$i35 = (($332) + -69)|0;
        $338 = ($$off$i35>>>0)<(31);
        $339 = (($332) + 1900)|0;
        $$$i = $338 ? $339 : $332;
        $__t$0$i = $$$i;
       }
       $340 = (($__t$0$i) + -1900)|0;
       HEAP32[$330>>2] = $340;
      }
      break;
     }
     case 89:  {
      $341 = HEAP32[$__e>>2]|0;
      $342 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$341,$__err,$32,4)|0);
      $343 = HEAP32[$__err>>2]|0;
      $344 = $343 & 4;
      $345 = ($344|0)==(0);
      if ($345) {
       $346 = (($__tm) + 20|0);
       $347 = (($342) + -1900)|0;
       HEAP32[$346>>2] = $347;
      }
      break;
     }
     case 84:  {
      $293 = HEAP32[$__b>>2]|0;
      $294 = HEAP32[$__e>>2]|0;
      __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($6,$this,$293,$294,$__iob,$__err,$__tm,5384,((5384 + 8|0)));
      $295 = HEAP32[$6>>2]|0;
      HEAP32[$__b>>2] = $295;
      break;
     }
     case 119:  {
      $296 = HEAP32[$__e>>2]|0;
      $297 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$296,$__err,$32,1)|0);
      $298 = HEAP32[$__err>>2]|0;
      $299 = $298 & 4;
      $300 = ($299|0)==(0);
      $301 = ($297|0)<(7);
      $or$cond$i29 = $300 & $301;
      if ($or$cond$i29) {
       $302 = (($__tm) + 24|0);
       HEAP32[$302>>2] = $297;
       break L11;
      } else {
       $303 = $298 | 4;
       HEAP32[$__err>>2] = $303;
       break L11;
      }
      break;
     }
     case 120:  {
      $304 = HEAP32[$this>>2]|0;
      $305 = (($304) + 20|0);
      $306 = HEAP32[$305>>2]|0;
      $307 = HEAP32[$__b>>2]|0;
      HEAP32[$7>>2] = $307;
      $308 = HEAP32[$__e>>2]|0;
      HEAP32[$8>>2] = $308;
      ;HEAP32[$$byval_copy+0>>2]=HEAP32[$7+0>>2]|0;
      ;HEAP32[$$byval_copy57+0>>2]=HEAP32[$8+0>>2]|0;
      FUNCTION_TABLE_viiiiiii[$306 & 511]($agg$result,$this,$$byval_copy,$$byval_copy57,$__iob,$__err,$__tm);
      STACKTOP = sp;return;
      break;
     }
     case 88:  {
      $309 = (($this) + 8|0);
      $310 = HEAP32[$309>>2]|0;
      $311 = (($310) + 24|0);
      $312 = HEAP32[$311>>2]|0;
      $313 = (FUNCTION_TABLE_ii[$312 & 511]($309)|0);
      $314 = HEAP32[$__b>>2]|0;
      $315 = HEAP32[$__e>>2]|0;
      $316 = HEAP8[$313>>0]|0;
      $317 = $316 & 1;
      $318 = ($317<<24>>24)==(0);
      if ($318) {
       $323 = (($313) + 1|0);
       $324 = $316&255;
       $325 = $324 >>> 1;
       $327 = $323;$328 = $325;
      } else {
       $319 = (($313) + 8|0);
       $320 = HEAP32[$319>>2]|0;
       $321 = (($313) + 4|0);
       $322 = HEAP32[$321>>2]|0;
       $327 = $320;$328 = $322;
      }
      $326 = (($327) + ($328)|0);
      __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($9,$this,$314,$315,$__iob,$__err,$__tm,$327,$326);
      $329 = HEAP32[$9>>2]|0;
      HEAP32[$__b>>2] = $329;
      break;
     }
     case 37:  {
      $348 = HEAP32[$__e>>2]|0;
      $349 = HEAP32[$__b>>2]|0;
      $350 = ($349|0)==(0|0);
      do {
       if ($350) {
        $362 = 0;
       } else {
        $351 = (($349) + 12|0);
        $352 = HEAP32[$351>>2]|0;
        $353 = (($349) + 16|0);
        $354 = HEAP32[$353>>2]|0;
        $355 = ($352|0)==($354|0);
        if ($355) {
         $356 = HEAP32[$349>>2]|0;
         $357 = (($356) + 36|0);
         $358 = HEAP32[$357>>2]|0;
         $359 = (FUNCTION_TABLE_ii[$358 & 511]($349)|0);
         $360 = ($359|0)==(-1);
         if ($360) {
          HEAP32[$__b>>2] = 0;
          $362 = 0;
          break;
         } else {
          $$pre$i$i$i$i = HEAP32[$__b>>2]|0;
          $362 = $$pre$i$i$i$i;
          break;
         }
        } else {
         $362 = $349;
        }
       }
      } while(0);
      $361 = ($362|0)==(0|0);
      $363 = ($348|0)==(0|0);
      do {
       if ($363) {
        label = 118;
       } else {
        $364 = (($348) + 12|0);
        $365 = HEAP32[$364>>2]|0;
        $366 = (($348) + 16|0);
        $367 = HEAP32[$366>>2]|0;
        $368 = ($365|0)==($367|0);
        if ($368) {
         $369 = HEAP32[$348>>2]|0;
         $370 = (($369) + 36|0);
         $371 = HEAP32[$370>>2]|0;
         $372 = (FUNCTION_TABLE_ii[$371 & 511]($348)|0);
         $373 = ($372|0)==(-1);
         if ($373) {
          label = 118;
          break;
         }
        }
        if ($361) {
         $$pre$i2$i$i611$i = $348;
        } else {
         label = 119;
        }
       }
      } while(0);
      if ((label|0) == 118) {
       if ($361) {
        label = 119;
       } else {
        $$pre$i2$i$i611$i = 0;
       }
      }
      if ((label|0) == 119) {
       $374 = HEAP32[$__err>>2]|0;
       $375 = $374 | 6;
       HEAP32[$__err>>2] = $375;
       break L11;
      }
      $376 = HEAP32[$__b>>2]|0;
      $377 = (($376) + 12|0);
      $378 = HEAP32[$377>>2]|0;
      $379 = (($376) + 16|0);
      $380 = HEAP32[$379>>2]|0;
      $381 = ($378|0)==($380|0);
      if ($381) {
       $382 = HEAP32[$376>>2]|0;
       $383 = (($382) + 36|0);
       $384 = HEAP32[$383>>2]|0;
       $385 = (FUNCTION_TABLE_ii[$384 & 511]($376)|0);
       $$0$i$i$i = $385;
      } else {
       $386 = HEAP8[$378>>0]|0;
       $387 = $386&255;
       $$0$i$i$i = $387;
      }
      $388 = $$0$i$i$i&255;
      $389 = HEAP32[$32>>2]|0;
      $390 = (($389) + 36|0);
      $391 = HEAP32[$390>>2]|0;
      $392 = (FUNCTION_TABLE_iiii[$391 & 511]($32,$388,0)|0);
      $393 = ($392<<24>>24)==(37);
      if (!($393)) {
       $394 = HEAP32[$__err>>2]|0;
       $395 = $394 | 4;
       HEAP32[$__err>>2] = $395;
       break L11;
      }
      $396 = HEAP32[$__b>>2]|0;
      $397 = (($396) + 12|0);
      $398 = HEAP32[$397>>2]|0;
      $399 = (($396) + 16|0);
      $400 = HEAP32[$399>>2]|0;
      $401 = ($398|0)==($400|0);
      if ($401) {
       $402 = HEAP32[$396>>2]|0;
       $403 = (($402) + 40|0);
       $404 = HEAP32[$403>>2]|0;
       (FUNCTION_TABLE_ii[$404 & 511]($396)|0);
      } else {
       $405 = (($398) + 1|0);
       HEAP32[$397>>2] = $405;
      }
      $406 = HEAP32[$__b>>2]|0;
      $407 = ($406|0)==(0|0);
      do {
       if ($407) {
        $419 = 0;
       } else {
        $408 = (($406) + 12|0);
        $409 = HEAP32[$408>>2]|0;
        $410 = (($406) + 16|0);
        $411 = HEAP32[$410>>2]|0;
        $412 = ($409|0)==($411|0);
        if ($412) {
         $413 = HEAP32[$406>>2]|0;
         $414 = (($413) + 36|0);
         $415 = HEAP32[$414>>2]|0;
         $416 = (FUNCTION_TABLE_ii[$415 & 511]($406)|0);
         $417 = ($416|0)==(-1);
         if ($417) {
          HEAP32[$__b>>2] = 0;
          $419 = 0;
          break;
         } else {
          $$pre$i$i$i2$i = HEAP32[$__b>>2]|0;
          $419 = $$pre$i$i$i2$i;
          break;
         }
        } else {
         $419 = $406;
        }
       }
      } while(0);
      $418 = ($419|0)==(0|0);
      $420 = ($$pre$i2$i$i611$i|0)==(0|0);
      do {
       if ($420) {
        label = 137;
       } else {
        $421 = (($$pre$i2$i$i611$i) + 12|0);
        $422 = HEAP32[$421>>2]|0;
        $423 = (($$pre$i2$i$i611$i) + 16|0);
        $424 = HEAP32[$423>>2]|0;
        $425 = ($422|0)==($424|0);
        if ($425) {
         $426 = HEAP32[$$pre$i2$i$i611$i>>2]|0;
         $427 = (($426) + 36|0);
         $428 = HEAP32[$427>>2]|0;
         $429 = (FUNCTION_TABLE_ii[$428 & 511]($$pre$i2$i$i611$i)|0);
         $430 = ($429|0)==(-1);
         if ($430) {
          label = 137;
          break;
         }
        }
        if ($418) {
         break L11;
        }
       }
      } while(0);
      if ((label|0) == 137) {
       if (!($418)) {
        break L11;
       }
      }
      $431 = HEAP32[$__err>>2]|0;
      $432 = $431 | 2;
      HEAP32[$__err>>2] = $432;
      break;
     }
     default: {
      $433 = HEAP32[$__err>>2]|0;
      $434 = $433 | 4;
      HEAP32[$__err>>2] = $434;
     }
     }
    } while(0);
    $435 = HEAP32[$__b>>2]|0;
    HEAP32[$agg$result>>2] = $435;
    STACKTOP = sp;return;
   }
  }
  $34 = (___cxa_allocate_exception(4)|0);
  HEAP32[$34>>2] = ((14256 + 8|0));
  __THREW__ = 0;
  invoke_viii(379,($34|0),(14336|0),(351|0));
  $35 = __THREW__; __THREW__ = 0;
  $36 = $35&1;
  if (!($36)) {
   // unreachable;
  }
 }
 $44 = ___cxa_find_matching_catch(-1,-1)|0;
 $45 = tempRet0;
 $46 = (($11) + 4|0);
 $47 = HEAP32[$46>>2]|0;HEAP32[$46>>2] = (($47+-1)|0);
 $48 = ($47|0)==(0);
 if (!($48)) {
  ___resumeException($44|0);
  // unreachable;
 }
 $49 = HEAP32[$11>>2]|0;
 $50 = (($49) + 8|0);
 $51 = HEAP32[$50>>2]|0;
 FUNCTION_TABLE_vi[$51 & 511]($11);
 ___resumeException($44|0);
 // unreachable;
}
function __ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$__e$0,$__err,$__ct,$__n) {
 $__b = $__b|0;
 $__e$0 = $__e$0|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 $__n = $__n|0;
 var $$ = 0, $$$pre$i2$i$i7 = 0, $$$pre$i2$i$i73 = 0, $$0 = 0, $$0$i$i = 0, $$0$i$i10 = 0, $$0$in = 0, $$01 = 0, $$pre$i$i$i = 0, $$pre$i$i$i16 = 0, $$pre$i$i$i3 = 0, $$pre$i2$i$i20 = 0, $$pre$i2$i$i7 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0;
 var $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0;
 var $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__r$0 = 0, $__r$0$in = 0, $isascii1$i = 0, $isascii1$i12 = 0, $sext = 0, $sext24 = 0, $tmp$i$i9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$__b>>2]|0;
 $1 = ($0|0)==(0|0);
 do {
  if ($1) {
   $13 = 0;
  } else {
   $2 = (($0) + 12|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = (($0) + 16|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = ($3|0)==($5|0);
   if ($6) {
    $7 = HEAP32[$0>>2]|0;
    $8 = (($7) + 36|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = (FUNCTION_TABLE_ii[$9 & 511]($0)|0);
    $11 = ($10|0)==(-1);
    if ($11) {
     HEAP32[$__b>>2] = 0;
     $13 = 0;
     break;
    } else {
     $$pre$i$i$i = HEAP32[$__b>>2]|0;
     $13 = $$pre$i$i$i;
     break;
    }
   } else {
    $13 = $0;
   }
  }
 } while(0);
 $12 = ($13|0)==(0|0);
 $14 = ($__e$0|0)==(0|0);
 do {
  if ($14) {
   label = 10;
  } else {
   $15 = (($__e$0) + 12|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = (($__e$0) + 16|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = ($16|0)==($18|0);
   if ($19) {
    $20 = HEAP32[$__e$0>>2]|0;
    $21 = (($20) + 36|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = (FUNCTION_TABLE_ii[$22 & 511]($__e$0)|0);
    $24 = ($23|0)==(-1);
    if ($24) {
     label = 10;
     break;
    }
   }
   if ($12) {
    $155 = $__e$0;
   } else {
    label = 11;
   }
  }
 } while(0);
 if ((label|0) == 10) {
  if ($12) {
   label = 11;
  } else {
   $155 = 0;
  }
 }
 if ((label|0) == 11) {
  $25 = HEAP32[$__err>>2]|0;
  $26 = $25 | 6;
  HEAP32[$__err>>2] = $26;
  $$01 = 0;
  STACKTOP = sp;return ($$01|0);
 }
 $27 = HEAP32[$__b>>2]|0;
 $28 = (($27) + 12|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = (($27) + 16|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = ($29|0)==($31|0);
 if ($32) {
  $33 = HEAP32[$27>>2]|0;
  $34 = (($33) + 36|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = (FUNCTION_TABLE_ii[$35 & 511]($27)|0);
  $$0$i$i = $36;
 } else {
  $37 = HEAP8[$29>>0]|0;
  $38 = $37&255;
  $$0$i$i = $38;
 }
 $39 = $$0$i$i&255;
 $isascii1$i = ($39<<24>>24)>(-1);
 if ($isascii1$i) {
  $sext = $$0$i$i << 24;
  $40 = $sext >> 24;
  $41 = (($__ct) + 8|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = (($42) + ($40<<1)|0);
  $44 = HEAP16[$43>>1]|0;
  $45 = $44 & 2048;
  $46 = ($45<<16>>16)==(0);
  if (!($46)) {
   $49 = HEAP32[$__ct>>2]|0;
   $50 = (($49) + 36|0);
   $51 = HEAP32[$50>>2]|0;
   $52 = (FUNCTION_TABLE_iiii[$51 & 511]($__ct,$39,0)|0);
   $53 = $52 << 24 >> 24;
   $54 = HEAP32[$__b>>2]|0;
   $55 = (($54) + 12|0);
   $56 = HEAP32[$55>>2]|0;
   $57 = (($54) + 16|0);
   $58 = HEAP32[$57>>2]|0;
   $59 = ($56|0)==($58|0);
   if ($59) {
    $60 = HEAP32[$54>>2]|0;
    $61 = (($60) + 40|0);
    $62 = HEAP32[$61>>2]|0;
    (FUNCTION_TABLE_ii[$62 & 511]($54)|0);
    $$0$in = $__n;$$pre$i2$i$i7 = $155;$79 = $155;$__r$0$in = $53;
   } else {
    $63 = (($56) + 1|0);
    HEAP32[$55>>2] = $63;
    $$0$in = $__n;$$pre$i2$i$i7 = $155;$79 = $155;$__r$0$in = $53;
   }
   while(1) {
    $__r$0 = (($__r$0$in) + -48)|0;
    $$0 = (($$0$in) + -1)|0;
    $64 = HEAP32[$__b>>2]|0;
    $65 = ($64|0)==(0|0);
    do {
     if ($65) {
      $77 = 0;
     } else {
      $66 = (($64) + 12|0);
      $67 = HEAP32[$66>>2]|0;
      $68 = (($64) + 16|0);
      $69 = HEAP32[$68>>2]|0;
      $70 = ($67|0)==($69|0);
      if ($70) {
       $71 = HEAP32[$64>>2]|0;
       $72 = (($71) + 36|0);
       $73 = HEAP32[$72>>2]|0;
       $74 = (FUNCTION_TABLE_ii[$73 & 511]($64)|0);
       $75 = ($74|0)==(-1);
       if ($75) {
        HEAP32[$__b>>2] = 0;
        $77 = 0;
        break;
       } else {
        $$pre$i$i$i3 = HEAP32[$__b>>2]|0;
        $77 = $$pre$i$i$i3;
        break;
       }
      } else {
       $77 = $64;
      }
     }
    } while(0);
    $76 = ($77|0)==(0|0);
    $78 = ($79|0)==(0|0);
    if ($78) {
     $$pre$i2$i$i20 = $$pre$i2$i$i7;$91 = 0;
    } else {
     $80 = (($79) + 12|0);
     $81 = HEAP32[$80>>2]|0;
     $82 = (($79) + 16|0);
     $83 = HEAP32[$82>>2]|0;
     $84 = ($81|0)==($83|0);
     if ($84) {
      $85 = HEAP32[$79>>2]|0;
      $86 = (($85) + 36|0);
      $87 = HEAP32[$86>>2]|0;
      $88 = (FUNCTION_TABLE_ii[$87 & 511]($79)|0);
      $89 = ($88|0)==(-1);
      $$$pre$i2$i$i7 = $89 ? 0 : $$pre$i2$i$i7;
      $$$pre$i2$i$i73 = $89 ? 0 : $$pre$i2$i$i7;
      $$pre$i2$i$i20 = $$$pre$i2$i$i7;$91 = $$$pre$i2$i$i73;
     } else {
      $$pre$i2$i$i20 = $$pre$i2$i$i7;$91 = $79;
     }
    }
    $90 = ($91|0)==(0|0);
    $tmp$i$i9 = $76 ^ $90;
    $92 = ($$0|0)>(0);
    $$ = $tmp$i$i9 & $92;
    $93 = HEAP32[$__b>>2]|0;
    if (!($$)) {
     label = 38;
     break;
    }
    $94 = (($93) + 12|0);
    $95 = HEAP32[$94>>2]|0;
    $96 = (($93) + 16|0);
    $97 = HEAP32[$96>>2]|0;
    $98 = ($95|0)==($97|0);
    if ($98) {
     $99 = HEAP32[$93>>2]|0;
     $100 = (($99) + 36|0);
     $101 = HEAP32[$100>>2]|0;
     $102 = (FUNCTION_TABLE_ii[$101 & 511]($93)|0);
     $$0$i$i10 = $102;
    } else {
     $103 = HEAP8[$95>>0]|0;
     $104 = $103&255;
     $$0$i$i10 = $104;
    }
    $105 = $$0$i$i10&255;
    $isascii1$i12 = ($105<<24>>24)>(-1);
    if (!($isascii1$i12)) {
     $$01 = $__r$0;
     label = 49;
     break;
    }
    $sext24 = $$0$i$i10 << 24;
    $106 = $sext24 >> 24;
    $107 = HEAP32[$41>>2]|0;
    $108 = (($107) + ($106<<1)|0);
    $109 = HEAP16[$108>>1]|0;
    $110 = $109 & 2048;
    $111 = ($110<<16>>16)==(0);
    if ($111) {
     $$01 = $__r$0;
     label = 49;
     break;
    }
    $112 = ($__r$0*10)|0;
    $113 = HEAP32[$__ct>>2]|0;
    $114 = (($113) + 36|0);
    $115 = HEAP32[$114>>2]|0;
    $116 = (FUNCTION_TABLE_iiii[$115 & 511]($__ct,$105,0)|0);
    $117 = $116 << 24 >> 24;
    $118 = (($117) + ($112))|0;
    $119 = HEAP32[$__b>>2]|0;
    $120 = (($119) + 12|0);
    $121 = HEAP32[$120>>2]|0;
    $122 = (($119) + 16|0);
    $123 = HEAP32[$122>>2]|0;
    $124 = ($121|0)==($123|0);
    if ($124) {
     $125 = HEAP32[$119>>2]|0;
     $126 = (($125) + 40|0);
     $127 = HEAP32[$126>>2]|0;
     (FUNCTION_TABLE_ii[$127 & 511]($119)|0);
     $$0$in = $$0;$$pre$i2$i$i7 = $$pre$i2$i$i20;$79 = $91;$__r$0$in = $118;
     continue;
    } else {
     $128 = (($121) + 1|0);
     HEAP32[$120>>2] = $128;
     $$0$in = $$0;$$pre$i2$i$i7 = $$pre$i2$i$i20;$79 = $91;$__r$0$in = $118;
     continue;
    }
   }
   if ((label|0) == 38) {
    $129 = ($93|0)==(0|0);
    do {
     if ($129) {
      $141 = 0;
     } else {
      $130 = (($93) + 12|0);
      $131 = HEAP32[$130>>2]|0;
      $132 = (($93) + 16|0);
      $133 = HEAP32[$132>>2]|0;
      $134 = ($131|0)==($133|0);
      if ($134) {
       $135 = HEAP32[$93>>2]|0;
       $136 = (($135) + 36|0);
       $137 = HEAP32[$136>>2]|0;
       $138 = (FUNCTION_TABLE_ii[$137 & 511]($93)|0);
       $139 = ($138|0)==(-1);
       if ($139) {
        HEAP32[$__b>>2] = 0;
        $141 = 0;
        break;
       } else {
        $$pre$i$i$i16 = HEAP32[$__b>>2]|0;
        $141 = $$pre$i$i$i16;
        break;
       }
      } else {
       $141 = $93;
      }
     }
    } while(0);
    $140 = ($141|0)==(0|0);
    $142 = ($$pre$i2$i$i20|0)==(0|0);
    do {
     if ($142) {
      label = 47;
     } else {
      $143 = (($$pre$i2$i$i20) + 12|0);
      $144 = HEAP32[$143>>2]|0;
      $145 = (($$pre$i2$i$i20) + 16|0);
      $146 = HEAP32[$145>>2]|0;
      $147 = ($144|0)==($146|0);
      if ($147) {
       $148 = HEAP32[$$pre$i2$i$i20>>2]|0;
       $149 = (($148) + 36|0);
       $150 = HEAP32[$149>>2]|0;
       $151 = (FUNCTION_TABLE_ii[$150 & 511]($$pre$i2$i$i20)|0);
       $152 = ($151|0)==(-1);
       if ($152) {
        label = 47;
        break;
       }
      }
      if ($140) {
       $$01 = $__r$0;
       STACKTOP = sp;return ($$01|0);
      }
     }
    } while(0);
    if ((label|0) == 47) {
     if (!($140)) {
      $$01 = $__r$0;
      STACKTOP = sp;return ($$01|0);
     }
    }
    $153 = HEAP32[$__err>>2]|0;
    $154 = $153 | 2;
    HEAP32[$__err>>2] = $154;
    $$01 = $__r$0;
    STACKTOP = sp;return ($$01|0);
   }
   else if ((label|0) == 49) {
    STACKTOP = sp;return ($$01|0);
   }
  }
 }
 $47 = HEAP32[$__err>>2]|0;
 $48 = $47 | 4;
 HEAP32[$__err>>2] = $48;
 $$01 = 0;
 STACKTOP = sp;return ($$01|0);
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($agg$result,$this,$__b$0,$__e$0,$__iob,$__err,$__tm,$__fmtb,$__fmte) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b$0 = $__b$0|0;
 $__e$0 = $__e$0|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 $__fmtb = $__fmtb|0;
 $__fmte = $__fmte|0;
 var $$ = 0, $$$pre$i$i$i21 = 0, $$$pre$i$i$i6 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i19 = 0, $$0$i$i$i$i4 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i10 = 0, $$0$i$i1$i$i25 = 0, $$0$i$i16 = 0, $$0$ph$be = 0, $$0$ph43 = 0, $$0$pn = 0, $$1 = 0, $$2 = 0, $$2$lcssa = 0, $$4 = 0, $$5 = 0, $$__b$sroa$0$1 = 0;
 var $$__b$sroa$0$13 = 0, $$__b$sroa$0$4 = 0, $$byval_copy = 0, $$byval_copy6 = 0, $$pre$i$i$i21 = 0, $$pre$i$i$i6 = 0, $$pre$i3$i$i12 = 0, $$pre$i3$i$i1245 = 0, $$pre$i3$i$i1246 = 0, $$pre44 = 0, $$pre44$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0;
 var $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0;
 var $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0;
 var $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0;
 var $214 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__b$sroa$0$0 = 0, $__b$sroa$0$1 = 0, $__b$sroa$0$2 = 0, $__b$sroa$0$3 = 0, $__b$sroa$0$4 = 0, $__b$sroa$0$5 = 0, $__cmd$0 = 0, $__e$sroa$0$0 = 0, $__e$sroa$0$1 = 0, $__e$sroa$0$10 = 0, $__e$sroa$0$3 = 0, $__e$sroa$0$4 = 0, $__e$sroa$0$5 = 0, $__e$sroa$0$6 = 0;
 var $__e$sroa$0$7 = 0, $__e$sroa$0$8 = 0, $__opt$0 = 0, $__p$i$i$i$i = 0, $phitmp$i4$i$i13 = 0, $tmp$i$i15 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $$byval_copy6 = sp + 28|0;
 $$byval_copy = sp + 24|0;
 $__p$i$i$i$i = sp;
 $0 = sp + 20|0;
 $1 = sp + 16|0;
 $2 = sp + 12|0;
 $3 = (($__iob) + 28|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + 4|0);
 $6 = HEAP32[$5>>2]|0;HEAP32[$5>>2] = (($6+1)|0);
 $7 = HEAP32[6408>>2]|0;
 $8 = ($7|0)==(-1);
 if ($8) {
  label = 3;
 } else {
  HEAP32[$__p$i$i$i$i>>2] = 6408;
  $9 = (($__p$i$i$i$i) + 4|0);
  HEAP32[$9>>2] = (439);
  $10 = (($__p$i$i$i$i) + 8|0);
  HEAP32[$10>>2] = 0;
  __THREW__ = 0;
  invoke_vii(440,(6408|0),($__p$i$i$i$i|0));
  $11 = __THREW__; __THREW__ = 0;
  $12 = $11&1;
  if (!($12)) {
   label = 3;
  }
 }
 if ((label|0) == 3) {
  $13 = HEAP32[((6408 + 4|0))>>2]|0;
  $14 = (($13) + -1)|0;
  $15 = (($4) + 12|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = (($4) + 8|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = $16;
  $20 = $18;
  $21 = (($19) - ($20))|0;
  $22 = $21 >> 2;
  $23 = ($22>>>0)>($14>>>0);
  if ($23) {
   $24 = (($18) + ($14<<2)|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = ($25|0)==(0|0);
   if (!($26)) {
    $30 = (($4) + 4|0);
    $31 = HEAP32[$30>>2]|0;HEAP32[$30>>2] = (($31+-1)|0);
    $32 = ($31|0)==(0);
    if ($32) {
     $33 = HEAP32[$4>>2]|0;
     $34 = (($33) + 8|0);
     $35 = HEAP32[$34>>2]|0;
     FUNCTION_TABLE_vi[$35 & 511]($4);
    }
    HEAP32[$__err>>2] = 0;
    $36 = ($__fmtb|0)==($__fmte|0);
    L11: do {
     if ($36) {
      $$pre$i$i$i21 = $__b$0;$__e$sroa$0$10 = $__e$0;
     } else {
      $$0$ph43 = $__fmtb;$$pre44 = 0;$__b$sroa$0$0 = $__b$0;$__e$sroa$0$0 = $__e$0;
      L13: while(1) {
       $38 = $$pre44;$__b$sroa$0$1 = $__b$sroa$0$0;$__e$sroa$0$1 = $__e$sroa$0$0;
       while(1) {
        $37 = ($38|0)==(0);
        if (!($37)) {
         $$pre$i$i$i21 = $__b$sroa$0$1;$__e$sroa$0$10 = $__e$sroa$0$1;
         break L11;
        }
        $39 = ($__b$sroa$0$1|0)==(0|0);
        if ($39) {
         $212 = 1;$94 = 0;$__b$sroa$0$2 = 0;
        } else {
         $40 = (($__b$sroa$0$1) + 12|0);
         $41 = HEAP32[$40>>2]|0;
         $42 = (($__b$sroa$0$1) + 16|0);
         $43 = HEAP32[$42>>2]|0;
         $44 = ($41|0)==($43|0);
         if ($44) {
          $45 = HEAP32[$__b$sroa$0$1>>2]|0;
          $46 = (($45) + 36|0);
          $47 = HEAP32[$46>>2]|0;
          $48 = (FUNCTION_TABLE_ii[$47 & 511]($__b$sroa$0$1)|0);
          $$0$i$i$i$i = $48;
         } else {
          $49 = HEAP32[$41>>2]|0;
          $$0$i$i$i$i = $49;
         }
         $50 = ($$0$i$i$i$i|0)==(-1);
         $$__b$sroa$0$1 = $50 ? 0 : $__b$sroa$0$1;
         $$__b$sroa$0$13 = $50 ? 0 : $__b$sroa$0$1;
         $$ = $50 ? 1 : 0;
         $212 = $$;$94 = $$__b$sroa$0$13;$__b$sroa$0$2 = $$__b$sroa$0$1;
        }
        $51 = ($__e$sroa$0$1|0)==(0|0);
        if ($51) {
         label = 23;
        } else {
         $52 = (($__e$sroa$0$1) + 12|0);
         $53 = HEAP32[$52>>2]|0;
         $54 = (($__e$sroa$0$1) + 16|0);
         $55 = HEAP32[$54>>2]|0;
         $56 = ($53|0)==($55|0);
         if ($56) {
          $57 = HEAP32[$__e$sroa$0$1>>2]|0;
          $58 = (($57) + 36|0);
          $59 = HEAP32[$58>>2]|0;
          $60 = (FUNCTION_TABLE_ii[$59 & 511]($__e$sroa$0$1)|0);
          $$0$i$i1$i$i = $60;
         } else {
          $61 = HEAP32[$53>>2]|0;
          $$0$i$i1$i$i = $61;
         }
         $62 = ($$0$i$i1$i$i|0)==(-1);
         if ($62) {
          label = 23;
         } else {
          if ($212) {
           $__e$sroa$0$4 = $__e$sroa$0$1;
          } else {
           $__e$sroa$0$3 = $__e$sroa$0$1;
           label = 25;
           break L13;
          }
         }
        }
        if ((label|0) == 23) {
         label = 0;
         if ($212) {
          $__e$sroa$0$3 = 0;
          label = 25;
          break L13;
         } else {
          $__e$sroa$0$4 = 0;
         }
        }
        $71 = HEAP32[$$0$ph43>>2]|0;
        $72 = HEAP32[$25>>2]|0;
        $73 = (($72) + 52|0);
        $74 = HEAP32[$73>>2]|0;
        $75 = (FUNCTION_TABLE_iiii[$74 & 511]($25,$71,0)|0);
        $76 = ($75<<24>>24)==(37);
        if ($76) {
         label = 30;
         break;
        }
        $98 = HEAP32[$$0$ph43>>2]|0;
        $99 = HEAP32[$25>>2]|0;
        $100 = (($99) + 12|0);
        $101 = HEAP32[$100>>2]|0;
        $102 = (FUNCTION_TABLE_iiii[$101 & 511]($25,8192,$98)|0);
        if ($102) {
         $$0$pn = $$0$ph43;
         label = 40;
         break;
        }
        $157 = (($94) + 12|0);
        $158 = HEAP32[$157>>2]|0;
        $159 = (($94) + 16|0);
        $160 = HEAP32[$159>>2]|0;
        $161 = ($158|0)==($160|0);
        if ($161) {
         $162 = HEAP32[$94>>2]|0;
         $163 = (($162) + 36|0);
         $164 = HEAP32[$163>>2]|0;
         $165 = (FUNCTION_TABLE_ii[$164 & 511]($94)|0);
         $$0$i$i16 = $165;
        } else {
         $166 = HEAP32[$158>>2]|0;
         $$0$i$i16 = $166;
        }
        $167 = HEAP32[$25>>2]|0;
        $168 = (($167) + 28|0);
        $169 = HEAP32[$168>>2]|0;
        $170 = (FUNCTION_TABLE_iii[$169 & 511]($25,$$0$i$i16)|0);
        $171 = HEAP32[$$0$ph43>>2]|0;
        $172 = HEAP32[$25>>2]|0;
        $173 = (($172) + 28|0);
        $174 = HEAP32[$173>>2]|0;
        $175 = (FUNCTION_TABLE_iii[$174 & 511]($25,$171)|0);
        $176 = ($170|0)==($175|0);
        if ($176) {
         label = 66;
         break;
        }
        HEAP32[$__err>>2] = 4;
        $38 = 4;$__b$sroa$0$1 = $__b$sroa$0$2;$__e$sroa$0$1 = $__e$sroa$0$4;
       }
       L42: do {
        if ((label|0) == 30) {
         label = 0;
         $77 = (($$0$ph43) + 4|0);
         $78 = ($77|0)==($__fmte|0);
         if ($78) {
          label = 31;
          break L13;
         }
         $79 = HEAP32[$77>>2]|0;
         $80 = HEAP32[$25>>2]|0;
         $81 = (($80) + 52|0);
         $82 = HEAP32[$81>>2]|0;
         $83 = (FUNCTION_TABLE_iiii[$82 & 511]($25,$79,0)|0);
         if ((($83<<24>>24) == 48) | (($83<<24>>24) == 69)) {
          $84 = (($$0$ph43) + 8|0);
          $85 = ($84|0)==($__fmte|0);
          if ($85) {
           label = 34;
           break L13;
          }
          $86 = HEAP32[$84>>2]|0;
          $87 = HEAP32[$25>>2]|0;
          $88 = (($87) + 52|0);
          $89 = HEAP32[$88>>2]|0;
          $90 = (FUNCTION_TABLE_iiii[$89 & 511]($25,$86,0)|0);
          $$1 = $84;$__cmd$0 = $90;$__opt$0 = $83;
         } else {
          $$1 = $77;$__cmd$0 = $83;$__opt$0 = 0;
         }
         $91 = HEAP32[$this>>2]|0;
         $92 = (($91) + 36|0);
         $93 = HEAP32[$92>>2]|0;
         HEAP32[$1>>2] = $94;
         HEAP32[$2>>2] = $__e$sroa$0$4;
         ;HEAP32[$$byval_copy+0>>2]=HEAP32[$1+0>>2]|0;
         ;HEAP32[$$byval_copy6+0>>2]=HEAP32[$2+0>>2]|0;
         FUNCTION_TABLE_viiiiiiiii[$93 & 255]($0,$this,$$byval_copy,$$byval_copy6,$__iob,$__err,$__tm,$__cmd$0,$__opt$0);
         $95 = HEAP32[$0>>2]|0;
         $96 = (($$1) + 4|0);
         $$0$ph$be = $96;$__b$sroa$0$3 = $95;$__e$sroa$0$5 = $__e$sroa$0$4;
        }
        else if ((label|0) == 40) {
         while(1) {
          label = 0;
          $$2 = (($$0$pn) + 4|0);
          $103 = ($$2|0)==($__fmte|0);
          if ($103) {
           $$2$lcssa = $__fmte;
           break;
          }
          $104 = HEAP32[$$2>>2]|0;
          $105 = HEAP32[$25>>2]|0;
          $106 = (($105) + 12|0);
          $107 = HEAP32[$106>>2]|0;
          $108 = (FUNCTION_TABLE_iiii[$107 & 511]($25,8192,$104)|0);
          if ($108) {
           $$0$pn = $$2;
           label = 40;
          } else {
           $$2$lcssa = $$2;
           break;
          }
         }
         $$pre$i$i$i6 = $94;$$pre$i3$i$i12 = $__e$sroa$0$4;$122 = $__e$sroa$0$4;$__b$sroa$0$4 = $__b$sroa$0$2;$__e$sroa$0$6 = $__e$sroa$0$4;
         while(1) {
          $109 = ($$pre$i$i$i6|0)==(0|0);
          if ($109) {
           $134 = 1;$136 = 0;$__b$sroa$0$5 = $__b$sroa$0$4;
          } else {
           $110 = (($$pre$i$i$i6) + 12|0);
           $111 = HEAP32[$110>>2]|0;
           $112 = (($$pre$i$i$i6) + 16|0);
           $113 = HEAP32[$112>>2]|0;
           $114 = ($111|0)==($113|0);
           if ($114) {
            $115 = HEAP32[$$pre$i$i$i6>>2]|0;
            $116 = (($115) + 36|0);
            $117 = HEAP32[$116>>2]|0;
            $118 = (FUNCTION_TABLE_ii[$117 & 511]($$pre$i$i$i6)|0);
            $$0$i$i$i$i4 = $118;
           } else {
            $119 = HEAP32[$111>>2]|0;
            $$0$i$i$i$i4 = $119;
           }
           $120 = ($$0$i$i$i$i4|0)==(-1);
           $$__b$sroa$0$4 = $120 ? 0 : $__b$sroa$0$4;
           $$$pre$i$i$i6 = $120 ? 0 : $$pre$i$i$i6;
           $$4 = $120 ? 1 : 0;
           $134 = $$4;$136 = $$$pre$i$i$i6;$__b$sroa$0$5 = $$__b$sroa$0$4;
          }
          $121 = ($122|0)==(0|0);
          if ($121) {
           $$pre$i3$i$i1246 = $$pre$i3$i$i12;$__e$sroa$0$7 = $__e$sroa$0$6;
           label = 53;
          } else {
           $123 = (($122) + 12|0);
           $124 = HEAP32[$123>>2]|0;
           $125 = (($122) + 16|0);
           $126 = HEAP32[$125>>2]|0;
           $127 = ($124|0)==($126|0);
           if ($127) {
            $128 = HEAP32[$122>>2]|0;
            $129 = (($128) + 36|0);
            $130 = HEAP32[$129>>2]|0;
            $131 = (FUNCTION_TABLE_ii[$130 & 511]($122)|0);
            $$0$i$i1$i$i10 = $131;
           } else {
            $132 = HEAP32[$124>>2]|0;
            $$0$i$i1$i$i10 = $132;
           }
           $133 = ($$0$i$i1$i$i10|0)==(-1);
           if ($133) {
            $$pre$i3$i$i1246 = 0;$__e$sroa$0$7 = 0;
            label = 53;
           } else {
            $phitmp$i4$i$i13 = ($$pre$i3$i$i12|0)==(0|0);
            $tmp$i$i15 = $134 ^ $phitmp$i4$i$i13;
            if ($tmp$i$i15) {
             $$pre$i3$i$i1245 = $$pre$i3$i$i12;$213 = $$pre$i3$i$i12;$__e$sroa$0$8 = $__e$sroa$0$6;
            } else {
             $$0$ph$be = $$2$lcssa;$__b$sroa$0$3 = $__b$sroa$0$5;$__e$sroa$0$5 = $__e$sroa$0$6;
             break L42;
            }
           }
          }
          if ((label|0) == 53) {
           label = 0;
           if ($134) {
            $$0$ph$be = $$2$lcssa;$__b$sroa$0$3 = $__b$sroa$0$5;$__e$sroa$0$5 = $__e$sroa$0$7;
            break L42;
           } else {
            $$pre$i3$i$i1245 = $$pre$i3$i$i1246;$213 = 0;$__e$sroa$0$8 = $__e$sroa$0$7;
           }
          }
          $135 = (($136) + 12|0);
          $137 = HEAP32[$135>>2]|0;
          $138 = (($136) + 16|0);
          $139 = HEAP32[$138>>2]|0;
          $140 = ($137|0)==($139|0);
          if ($140) {
           $141 = HEAP32[$136>>2]|0;
           $142 = (($141) + 36|0);
           $143 = HEAP32[$142>>2]|0;
           $144 = (FUNCTION_TABLE_ii[$143 & 511]($136)|0);
           $$0$i$i = $144;
          } else {
           $145 = HEAP32[$137>>2]|0;
           $$0$i$i = $145;
          }
          $146 = HEAP32[$25>>2]|0;
          $147 = (($146) + 12|0);
          $148 = HEAP32[$147>>2]|0;
          $149 = (FUNCTION_TABLE_iiii[$148 & 511]($25,8192,$$0$i$i)|0);
          if (!($149)) {
           $$0$ph$be = $$2$lcssa;$__b$sroa$0$3 = $__b$sroa$0$5;$__e$sroa$0$5 = $__e$sroa$0$8;
           break L42;
          }
          $150 = HEAP32[$135>>2]|0;
          $151 = HEAP32[$138>>2]|0;
          $152 = ($150|0)==($151|0);
          if ($152) {
           $153 = HEAP32[$136>>2]|0;
           $154 = (($153) + 40|0);
           $155 = HEAP32[$154>>2]|0;
           (FUNCTION_TABLE_ii[$155 & 511]($136)|0);
           $$pre$i$i$i6 = $136;$$pre$i3$i$i12 = $$pre$i3$i$i1245;$122 = $213;$__b$sroa$0$4 = $__b$sroa$0$5;$__e$sroa$0$6 = $__e$sroa$0$8;
           continue;
          } else {
           $156 = (($150) + 4|0);
           HEAP32[$135>>2] = $156;
           $$pre$i$i$i6 = $136;$$pre$i3$i$i12 = $$pre$i3$i$i1245;$122 = $213;$__b$sroa$0$4 = $__b$sroa$0$5;$__e$sroa$0$6 = $__e$sroa$0$8;
           continue;
          }
         }
        }
        else if ((label|0) == 66) {
         label = 0;
         $177 = HEAP32[$157>>2]|0;
         $178 = HEAP32[$159>>2]|0;
         $179 = ($177|0)==($178|0);
         if ($179) {
          $180 = HEAP32[$94>>2]|0;
          $181 = (($180) + 40|0);
          $182 = HEAP32[$181>>2]|0;
          (FUNCTION_TABLE_ii[$182 & 511]($94)|0);
         } else {
          $183 = (($177) + 4|0);
          HEAP32[$157>>2] = $183;
         }
         $184 = (($$0$ph43) + 4|0);
         $$0$ph$be = $184;$__b$sroa$0$3 = $__b$sroa$0$2;$__e$sroa$0$5 = $__e$sroa$0$4;
        }
       } while(0);
       $97 = ($$0$ph$be|0)==($__fmte|0);
       if ($97) {
        $$pre$i$i$i21 = $__b$sroa$0$3;$__e$sroa$0$10 = $__e$sroa$0$5;
        break L11;
       }
       $$pre44$pre = HEAP32[$__err>>2]|0;
       $$0$ph43 = $$0$ph$be;$$pre44 = $$pre44$pre;$__b$sroa$0$0 = $__b$sroa$0$3;$__e$sroa$0$0 = $__e$sroa$0$5;
      }
      if ((label|0) == 25) {
       HEAP32[$__err>>2] = 4;
       $$pre$i$i$i21 = $94;$__e$sroa$0$10 = $__e$sroa$0$3;
       break;
      }
      else if ((label|0) == 31) {
       HEAP32[$__err>>2] = 4;
       $$pre$i$i$i21 = $94;$__e$sroa$0$10 = $__e$sroa$0$4;
       break;
      }
      else if ((label|0) == 34) {
       HEAP32[$__err>>2] = 4;
       $$pre$i$i$i21 = $94;$__e$sroa$0$10 = $__e$sroa$0$4;
       break;
      }
     }
    } while(0);
    $185 = ($$pre$i$i$i21|0)==(0|0);
    if ($185) {
     $211 = 0;$214 = 1;
    } else {
     $186 = (($$pre$i$i$i21) + 12|0);
     $187 = HEAP32[$186>>2]|0;
     $188 = (($$pre$i$i$i21) + 16|0);
     $189 = HEAP32[$188>>2]|0;
     $190 = ($187|0)==($189|0);
     if ($190) {
      $191 = HEAP32[$$pre$i$i$i21>>2]|0;
      $192 = (($191) + 36|0);
      $193 = HEAP32[$192>>2]|0;
      $194 = (FUNCTION_TABLE_ii[$193 & 511]($$pre$i$i$i21)|0);
      $$0$i$i$i$i19 = $194;
     } else {
      $195 = HEAP32[$187>>2]|0;
      $$0$i$i$i$i19 = $195;
     }
     $196 = ($$0$i$i$i$i19|0)==(-1);
     $$$pre$i$i$i21 = $196 ? 0 : $$pre$i$i$i21;
     $$5 = $196 ? 1 : 0;
     $211 = $$$pre$i$i$i21;$214 = $$5;
    }
    $197 = ($__e$sroa$0$10|0)==(0|0);
    if ($197) {
     label = 81;
    } else {
     $198 = (($__e$sroa$0$10) + 12|0);
     $199 = HEAP32[$198>>2]|0;
     $200 = (($__e$sroa$0$10) + 16|0);
     $201 = HEAP32[$200>>2]|0;
     $202 = ($199|0)==($201|0);
     if ($202) {
      $203 = HEAP32[$__e$sroa$0$10>>2]|0;
      $204 = (($203) + 36|0);
      $205 = HEAP32[$204>>2]|0;
      $206 = (FUNCTION_TABLE_ii[$205 & 511]($__e$sroa$0$10)|0);
      $$0$i$i1$i$i25 = $206;
     } else {
      $207 = HEAP32[$199>>2]|0;
      $$0$i$i1$i$i25 = $207;
     }
     $208 = ($$0$i$i1$i$i25|0)==(-1);
     if ($208) {
      label = 81;
     } else {
      if ($214) {
       HEAP32[$agg$result>>2] = $211;
       STACKTOP = sp;return;
      }
     }
    }
    if ((label|0) == 81) {
     if (!($214)) {
      HEAP32[$agg$result>>2] = $211;
      STACKTOP = sp;return;
     }
    }
    $209 = HEAP32[$__err>>2]|0;
    $210 = $209 | 2;
    HEAP32[$__err>>2] = $210;
    HEAP32[$agg$result>>2] = $211;
    STACKTOP = sp;return;
   }
  }
  $27 = (___cxa_allocate_exception(4)|0);
  HEAP32[$27>>2] = ((14256 + 8|0));
  __THREW__ = 0;
  invoke_viii(379,($27|0),(14336|0),(351|0));
  $28 = __THREW__; __THREW__ = 0;
  $29 = $28&1;
  if (!($29)) {
   // unreachable;
  }
 }
 $63 = ___cxa_find_matching_catch(-1,-1)|0;
 $64 = tempRet0;
 $65 = (($4) + 4|0);
 $66 = HEAP32[$65>>2]|0;HEAP32[$65>>2] = (($66+-1)|0);
 $67 = ($66|0)==(0);
 if (!($67)) {
  ___resumeException($63|0);
  // unreachable;
 }
 $68 = HEAP32[$4>>2]|0;
 $69 = (($68) + 8|0);
 $70 = HEAP32[$69>>2]|0;
 FUNCTION_TABLE_vi[$70 & 511]($4);
 ___resumeException($63|0);
 // unreachable;
}
function __ZNSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($this|0)==(0|0);
 if (!($0)) {
  _free($this);
 }
 STACKTOP = sp;return;
}
function __ZNSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13do_date_orderEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 2;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$__b>>2]|0;
 $1 = HEAP32[$__e>>2]|0;
 __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($agg$result,$this,$0,$1,$__iob,$__err,$__tm,5488,((5488 + 32|0)));
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 20|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (FUNCTION_TABLE_ii[$3 & 511]($0)|0);
 $5 = HEAP32[$__b>>2]|0;
 $6 = HEAP32[$__e>>2]|0;
 $7 = HEAP8[$4>>0]|0;
 $8 = $7 & 1;
 $9 = ($8<<24>>24)==(0);
 if ($9) {
  $14 = (($4) + 4|0);
  $15 = $7&255;
  $16 = $15 >>> 1;
  $18 = $14;$19 = $16;
 } else {
  $10 = (($4) + 8|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = (($4) + 4|0);
  $13 = HEAP32[$12>>2]|0;
  $18 = $11;$19 = $13;
 }
 $17 = (($18) + ($19<<2)|0);
 __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($agg$result,$this,$5,$6,$__iob,$__err,$__tm,$18,$17);
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $__p$i$i$i$i = sp;
 $0 = (($__iob) + 28|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 4|0);
 $3 = HEAP32[$2>>2]|0;HEAP32[$2>>2] = (($3+1)|0);
 $4 = HEAP32[6408>>2]|0;
 $5 = ($4|0)==(-1);
 if ($5) {
  label = 3;
 } else {
  HEAP32[$__p$i$i$i$i>>2] = 6408;
  $6 = (($__p$i$i$i$i) + 4|0);
  HEAP32[$6>>2] = (439);
  $7 = (($__p$i$i$i$i) + 8|0);
  HEAP32[$7>>2] = 0;
  __THREW__ = 0;
  invoke_vii(440,(6408|0),($__p$i$i$i$i|0));
  $8 = __THREW__; __THREW__ = 0;
  $9 = $8&1;
  if (!($9)) {
   label = 3;
  }
 }
 if ((label|0) == 3) {
  $10 = HEAP32[((6408 + 4|0))>>2]|0;
  $11 = (($10) + -1)|0;
  $12 = (($1) + 12|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (($1) + 8|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = $13;
  $17 = $15;
  $18 = (($16) - ($17))|0;
  $19 = $18 >> 2;
  $20 = ($19>>>0)>($11>>>0);
  if ($20) {
   $21 = (($15) + ($11<<2)|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = ($22|0)==(0|0);
   if (!($23)) {
    $27 = (($1) + 4|0);
    $28 = HEAP32[$27>>2]|0;HEAP32[$27>>2] = (($28+-1)|0);
    $29 = ($28|0)==(0);
    if ($29) {
     $30 = HEAP32[$1>>2]|0;
     $31 = (($30) + 8|0);
     $32 = HEAP32[$31>>2]|0;
     FUNCTION_TABLE_vi[$32 & 511]($1);
    }
    $33 = HEAP32[$__e>>2]|0;
    $34 = (($this) + 8|0);
    $35 = HEAP32[$34>>2]|0;
    $36 = HEAP32[$35>>2]|0;
    $37 = (FUNCTION_TABLE_ii[$36 & 511]($34)|0);
    $38 = (($37) + 168|0);
    $39 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$33,$37,$38,$22,$__err,0)|0);
    $40 = $39;
    $41 = $37;
    $42 = (($40) - ($41))|0;
    $43 = ($42|0)<(168);
    if (!($43)) {
     $47 = HEAP32[$__b>>2]|0;
     HEAP32[$agg$result>>2] = $47;
     STACKTOP = sp;return;
    }
    $44 = (($__tm) + 24|0);
    $45 = (($42|0) / 12)&-1;
    $46 = (($45|0) % 7)&-1;
    HEAP32[$44>>2] = $46;
    $47 = HEAP32[$__b>>2]|0;
    HEAP32[$agg$result>>2] = $47;
    STACKTOP = sp;return;
   }
  }
  $24 = (___cxa_allocate_exception(4)|0);
  HEAP32[$24>>2] = ((14256 + 8|0));
  __THREW__ = 0;
  invoke_viii(379,($24|0),(14336|0),(351|0));
  $25 = __THREW__; __THREW__ = 0;
  $26 = $25&1;
  if (!($26)) {
   // unreachable;
  }
 }
 $48 = ___cxa_find_matching_catch(-1,-1)|0;
 $49 = tempRet0;
 $50 = (($1) + 4|0);
 $51 = HEAP32[$50>>2]|0;HEAP32[$50>>2] = (($51+-1)|0);
 $52 = ($51|0)==(0);
 if (!($52)) {
  ___resumeException($48|0);
  // unreachable;
 }
 $53 = HEAP32[$1>>2]|0;
 $54 = (($53) + 8|0);
 $55 = HEAP32[$54>>2]|0;
 FUNCTION_TABLE_vi[$55 & 511]($1);
 ___resumeException($48|0);
 // unreachable;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $__p$i$i$i$i = sp;
 $0 = (($__iob) + 28|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 4|0);
 $3 = HEAP32[$2>>2]|0;HEAP32[$2>>2] = (($3+1)|0);
 $4 = HEAP32[6408>>2]|0;
 $5 = ($4|0)==(-1);
 if ($5) {
  label = 3;
 } else {
  HEAP32[$__p$i$i$i$i>>2] = 6408;
  $6 = (($__p$i$i$i$i) + 4|0);
  HEAP32[$6>>2] = (439);
  $7 = (($__p$i$i$i$i) + 8|0);
  HEAP32[$7>>2] = 0;
  __THREW__ = 0;
  invoke_vii(440,(6408|0),($__p$i$i$i$i|0));
  $8 = __THREW__; __THREW__ = 0;
  $9 = $8&1;
  if (!($9)) {
   label = 3;
  }
 }
 if ((label|0) == 3) {
  $10 = HEAP32[((6408 + 4|0))>>2]|0;
  $11 = (($10) + -1)|0;
  $12 = (($1) + 12|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (($1) + 8|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = $13;
  $17 = $15;
  $18 = (($16) - ($17))|0;
  $19 = $18 >> 2;
  $20 = ($19>>>0)>($11>>>0);
  if ($20) {
   $21 = (($15) + ($11<<2)|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = ($22|0)==(0|0);
   if (!($23)) {
    $27 = (($1) + 4|0);
    $28 = HEAP32[$27>>2]|0;HEAP32[$27>>2] = (($28+-1)|0);
    $29 = ($28|0)==(0);
    if ($29) {
     $30 = HEAP32[$1>>2]|0;
     $31 = (($30) + 8|0);
     $32 = HEAP32[$31>>2]|0;
     FUNCTION_TABLE_vi[$32 & 511]($1);
    }
    $33 = HEAP32[$__e>>2]|0;
    $34 = (($this) + 8|0);
    $35 = HEAP32[$34>>2]|0;
    $36 = (($35) + 4|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = (FUNCTION_TABLE_ii[$37 & 511]($34)|0);
    $39 = (($38) + 288|0);
    $40 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$33,$38,$39,$22,$__err,0)|0);
    $41 = $40;
    $42 = $38;
    $43 = (($41) - ($42))|0;
    $44 = ($43|0)<(288);
    if (!($44)) {
     $48 = HEAP32[$__b>>2]|0;
     HEAP32[$agg$result>>2] = $48;
     STACKTOP = sp;return;
    }
    $45 = (($__tm) + 16|0);
    $46 = (($43|0) / 12)&-1;
    $47 = (($46|0) % 12)&-1;
    HEAP32[$45>>2] = $47;
    $48 = HEAP32[$__b>>2]|0;
    HEAP32[$agg$result>>2] = $48;
    STACKTOP = sp;return;
   }
  }
  $24 = (___cxa_allocate_exception(4)|0);
  HEAP32[$24>>2] = ((14256 + 8|0));
  __THREW__ = 0;
  invoke_viii(379,($24|0),(14336|0),(351|0));
  $25 = __THREW__; __THREW__ = 0;
  $26 = $25&1;
  if (!($26)) {
   // unreachable;
  }
 }
 $49 = ___cxa_find_matching_catch(-1,-1)|0;
 $50 = tempRet0;
 $51 = (($1) + 4|0);
 $52 = HEAP32[$51>>2]|0;HEAP32[$51>>2] = (($52+-1)|0);
 $53 = ($52|0)==(0);
 if (!($53)) {
  ___resumeException($49|0);
  // unreachable;
 }
 $54 = HEAP32[$1>>2]|0;
 $55 = (($54) + 8|0);
 $56 = HEAP32[$55>>2]|0;
 FUNCTION_TABLE_vi[$56 & 511]($1);
 ___resumeException($49|0);
 // unreachable;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $$$i = 0, $$off$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$i$i$i$i = 0, $__t$0$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $__p$i$i$i$i = sp;
 $0 = (($__iob) + 28|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 4|0);
 $3 = HEAP32[$2>>2]|0;HEAP32[$2>>2] = (($3+1)|0);
 $4 = HEAP32[6408>>2]|0;
 $5 = ($4|0)==(-1);
 if ($5) {
  label = 3;
 } else {
  HEAP32[$__p$i$i$i$i>>2] = 6408;
  $6 = (($__p$i$i$i$i) + 4|0);
  HEAP32[$6>>2] = (439);
  $7 = (($__p$i$i$i$i) + 8|0);
  HEAP32[$7>>2] = 0;
  __THREW__ = 0;
  invoke_vii(440,(6408|0),($__p$i$i$i$i|0));
  $8 = __THREW__; __THREW__ = 0;
  $9 = $8&1;
  if (!($9)) {
   label = 3;
  }
 }
 if ((label|0) == 3) {
  $10 = HEAP32[((6408 + 4|0))>>2]|0;
  $11 = (($10) + -1)|0;
  $12 = (($1) + 12|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (($1) + 8|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = $13;
  $17 = $15;
  $18 = (($16) - ($17))|0;
  $19 = $18 >> 2;
  $20 = ($19>>>0)>($11>>>0);
  if ($20) {
   $21 = (($15) + ($11<<2)|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = ($22|0)==(0|0);
   if (!($23)) {
    $27 = (($1) + 4|0);
    $28 = HEAP32[$27>>2]|0;HEAP32[$27>>2] = (($28+-1)|0);
    $29 = ($28|0)==(0);
    if ($29) {
     $30 = HEAP32[$1>>2]|0;
     $31 = (($30) + 8|0);
     $32 = HEAP32[$31>>2]|0;
     FUNCTION_TABLE_vi[$32 & 511]($1);
    }
    $33 = (($__tm) + 20|0);
    $34 = HEAP32[$__e>>2]|0;
    $35 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$34,$__err,$22,4)|0);
    $36 = HEAP32[$__err>>2]|0;
    $37 = $36 & 4;
    $38 = ($37|0)==(0);
    if (!($38)) {
     $44 = HEAP32[$__b>>2]|0;
     HEAP32[$agg$result>>2] = $44;
     STACKTOP = sp;return;
    }
    $39 = ($35|0)<(69);
    if ($39) {
     $40 = (($35) + 2000)|0;
     $__t$0$i = $40;
    } else {
     $$off$i = (($35) + -69)|0;
     $41 = ($$off$i>>>0)<(31);
     $42 = (($35) + 1900)|0;
     $$$i = $41 ? $42 : $35;
     $__t$0$i = $$$i;
    }
    $43 = (($__t$0$i) + -1900)|0;
    HEAP32[$33>>2] = $43;
    $44 = HEAP32[$__b>>2]|0;
    HEAP32[$agg$result>>2] = $44;
    STACKTOP = sp;return;
   }
  }
  $24 = (___cxa_allocate_exception(4)|0);
  HEAP32[$24>>2] = ((14256 + 8|0));
  __THREW__ = 0;
  invoke_viii(379,($24|0),(14336|0),(351|0));
  $25 = __THREW__; __THREW__ = 0;
  $26 = $25&1;
  if (!($26)) {
   // unreachable;
  }
 }
 $45 = ___cxa_find_matching_catch(-1,-1)|0;
 $46 = tempRet0;
 $47 = (($1) + 4|0);
 $48 = HEAP32[$47>>2]|0;HEAP32[$47>>2] = (($48+-1)|0);
 $49 = ($48|0)==(0);
 if (!($49)) {
  ___resumeException($45|0);
  // unreachable;
 }
 $50 = HEAP32[$1>>2]|0;
 $51 = (($50) + 8|0);
 $52 = HEAP32[$51>>2]|0;
 FUNCTION_TABLE_vi[$52 & 511]($1);
 ___resumeException($45|0);
 // unreachable;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm,$__fmt,$0) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 $__fmt = $__fmt|0;
 $0 = $0|0;
 var $$$i = 0, $$0$i$i$i = 0, $$0$i$i$i$i$i = 0, $$0$i$i$i$i$i6 = 0, $$0$i$i$i$i1$i = 0, $$0$i$i$i$i1$i16 = 0, $$0$i$i$i14 = 0, $$0$i$i1$i$i$i = 0, $$0$i$i1$i$i$i12 = 0, $$0$i$i1$i$i7$i = 0, $$0$i$i1$i$i7$i22 = 0, $$byval_copy = 0, $$byval_copy63 = 0, $$off$i = 0, $$off$i12 = 0, $$off$i35 = 0, $$pre$i$i$i$i = 0, $$pre$i$i$i$i8 = 0, $$pre$i$i$i3$i = 0, $$pre$i$i$i3$i18 = 0;
 var $$pre$i3$i$i9$i = 0, $$pre$i3$i$i915$i = 0, $$sroa$057$0 = 0, $$sroa$057$2 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
 var $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0;
 var $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
 var $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0;
 var $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0;
 var $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0;
 var $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0;
 var $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0;
 var $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0;
 var $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0;
 var $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0;
 var $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0;
 var $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0;
 var $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0;
 var $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0;
 var $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__p$i$i$i$i = 0, $__t$0$i = 0, $or$cond$i = 0, $or$cond$i15 = 0;
 var $or$cond$i18 = 0, $or$cond$i21 = 0, $or$cond$i26 = 0, $or$cond$i29 = 0, $phitmp$i$i$i$i = 0, $phitmp$i$i$i$i9 = 0, $phitmp$i$i$i4$i = 0, $phitmp$i$i$i4$i19 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $$byval_copy63 = sp + 52|0;
 $$byval_copy = sp + 48|0;
 $__p$i$i$i$i = sp;
 $1 = sp + 44|0;
 $2 = sp + 40|0;
 $3 = sp + 36|0;
 $4 = sp + 32|0;
 $5 = sp + 28|0;
 $6 = sp + 24|0;
 $7 = sp + 20|0;
 $8 = sp + 16|0;
 $9 = sp + 12|0;
 HEAP32[$__err>>2] = 0;
 $10 = (($__iob) + 28|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($11) + 4|0);
 $13 = HEAP32[$12>>2]|0;HEAP32[$12>>2] = (($13+1)|0);
 $14 = HEAP32[6408>>2]|0;
 $15 = ($14|0)==(-1);
 if ($15) {
  label = 3;
 } else {
  HEAP32[$__p$i$i$i$i>>2] = 6408;
  $16 = (($__p$i$i$i$i) + 4|0);
  HEAP32[$16>>2] = (439);
  $17 = (($__p$i$i$i$i) + 8|0);
  HEAP32[$17>>2] = 0;
  __THREW__ = 0;
  invoke_vii(440,(6408|0),($__p$i$i$i$i|0));
  $18 = __THREW__; __THREW__ = 0;
  $19 = $18&1;
  if (!($19)) {
   label = 3;
  }
 }
 if ((label|0) == 3) {
  $20 = HEAP32[((6408 + 4|0))>>2]|0;
  $21 = (($20) + -1)|0;
  $22 = (($11) + 12|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = (($11) + 8|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = $23;
  $27 = $25;
  $28 = (($26) - ($27))|0;
  $29 = $28 >> 2;
  $30 = ($29>>>0)>($21>>>0);
  if ($30) {
   $31 = (($25) + ($21<<2)|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = ($32|0)==(0|0);
   if (!($33)) {
    $37 = (($11) + 4|0);
    $38 = HEAP32[$37>>2]|0;HEAP32[$37>>2] = (($38+-1)|0);
    $39 = ($38|0)==(0);
    if ($39) {
     $40 = HEAP32[$11>>2]|0;
     $41 = (($40) + 8|0);
     $42 = HEAP32[$41>>2]|0;
     FUNCTION_TABLE_vi[$42 & 511]($11);
    }
    $43 = $__fmt << 24 >> 24;
    L11: do {
     switch ($43|0) {
     case 73:  {
      $124 = (($__tm) + 8|0);
      $125 = HEAP32[$__e>>2]|0;
      $126 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$125,$__err,$32,2)|0);
      $127 = HEAP32[$__err>>2]|0;
      $128 = $127 & 4;
      $129 = ($128|0)==(0);
      if ($129) {
       $$off$i12 = (($126) + -1)|0;
       $130 = ($$off$i12>>>0)<(12);
       if ($130) {
        HEAP32[$124>>2] = $126;
        break L11;
       }
      }
      $131 = $127 | 4;
      HEAP32[$__err>>2] = $131;
      break;
     }
     case 99:  {
      $81 = (($this) + 8|0);
      $82 = HEAP32[$81>>2]|0;
      $83 = (($82) + 12|0);
      $84 = HEAP32[$83>>2]|0;
      $85 = (FUNCTION_TABLE_ii[$84 & 511]($81)|0);
      $86 = HEAP32[$__b>>2]|0;
      $87 = HEAP32[$__e>>2]|0;
      $88 = HEAP8[$85>>0]|0;
      $89 = $88 & 1;
      $90 = ($89<<24>>24)==(0);
      if ($90) {
       $95 = (($85) + 4|0);
       $96 = $88&255;
       $97 = $96 >>> 1;
       $100 = $97;$99 = $95;
      } else {
       $91 = (($85) + 8|0);
       $92 = HEAP32[$91>>2]|0;
       $93 = (($85) + 4|0);
       $94 = HEAP32[$93>>2]|0;
       $100 = $94;$99 = $92;
      }
      $98 = (($99) + ($100<<2)|0);
      __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($1,$this,$86,$87,$__iob,$__err,$__tm,$99,$98);
      $101 = HEAP32[$1>>2]|0;
      HEAP32[$__b>>2] = $101;
      break;
     }
     case 101: case 100:  {
      $102 = (($__tm) + 12|0);
      $103 = HEAP32[$__e>>2]|0;
      $104 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$103,$__err,$32,2)|0);
      $105 = HEAP32[$__err>>2]|0;
      $106 = $105 & 4;
      $107 = ($106|0)==(0);
      if ($107) {
       $$off$i = (($104) + -1)|0;
       $108 = ($$off$i>>>0)<(31);
       if ($108) {
        HEAP32[$102>>2] = $104;
        break L11;
       }
      }
      $109 = $105 | 4;
      HEAP32[$__err>>2] = $109;
      break;
     }
     case 106:  {
      $132 = HEAP32[$__e>>2]|0;
      $133 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$132,$__err,$32,3)|0);
      $134 = HEAP32[$__err>>2]|0;
      $135 = $134 & 4;
      $136 = ($135|0)==(0);
      $137 = ($133|0)<(366);
      $or$cond$i15 = $136 & $137;
      if ($or$cond$i15) {
       $138 = (($__tm) + 28|0);
       HEAP32[$138>>2] = $133;
       break L11;
      } else {
       $139 = $134 | 4;
       HEAP32[$__err>>2] = $139;
       break L11;
      }
      break;
     }
     case 104: case 66: case 98:  {
      $66 = HEAP32[$__e>>2]|0;
      $67 = (($this) + 8|0);
      $68 = HEAP32[$67>>2]|0;
      $69 = (($68) + 4|0);
      $70 = HEAP32[$69>>2]|0;
      $71 = (FUNCTION_TABLE_ii[$70 & 511]($67)|0);
      $72 = (($71) + 288|0);
      $73 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$66,$71,$72,$32,$__err,0)|0);
      $74 = $73;
      $75 = $71;
      $76 = (($74) - ($75))|0;
      $77 = ($76|0)<(288);
      if ($77) {
       $78 = (($__tm) + 16|0);
       $79 = (($76|0) / 12)&-1;
       $80 = (($79|0) % 12)&-1;
       HEAP32[$78>>2] = $80;
      }
      break;
     }
     case 116: case 110:  {
      $157 = HEAP32[$__e>>2]|0;
      $$sroa$057$0 = $157;
      while(1) {
       $158 = HEAP32[$__b>>2]|0;
       $159 = ($158|0)==(0|0);
       do {
        if ($159) {
         $429 = 1;
        } else {
         $160 = (($158) + 12|0);
         $161 = HEAP32[$160>>2]|0;
         $162 = (($158) + 16|0);
         $163 = HEAP32[$162>>2]|0;
         $164 = ($161|0)==($163|0);
         if ($164) {
          $165 = HEAP32[$158>>2]|0;
          $166 = (($165) + 36|0);
          $167 = HEAP32[$166>>2]|0;
          $168 = (FUNCTION_TABLE_ii[$167 & 511]($158)|0);
          $$0$i$i$i$i$i6 = $168;
         } else {
          $169 = HEAP32[$161>>2]|0;
          $$0$i$i$i$i$i6 = $169;
         }
         $170 = ($$0$i$i$i$i$i6|0)==(-1);
         if ($170) {
          HEAP32[$__b>>2] = 0;
          $429 = 1;
          break;
         } else {
          $$pre$i$i$i$i8 = HEAP32[$__b>>2]|0;
          $phitmp$i$i$i$i9 = ($$pre$i$i$i$i8|0)==(0|0);
          $429 = $phitmp$i$i$i$i9;
          break;
         }
        }
       } while(0);
       $171 = ($$sroa$057$0|0)==(0|0);
       if ($171) {
        label = 56;
       } else {
        $172 = (($$sroa$057$0) + 12|0);
        $173 = HEAP32[$172>>2]|0;
        $174 = (($$sroa$057$0) + 16|0);
        $175 = HEAP32[$174>>2]|0;
        $176 = ($173|0)==($175|0);
        if ($176) {
         $177 = HEAP32[$$sroa$057$0>>2]|0;
         $178 = (($177) + 36|0);
         $179 = HEAP32[$178>>2]|0;
         $180 = (FUNCTION_TABLE_ii[$179 & 511]($$sroa$057$0)|0);
         $$0$i$i1$i$i$i12 = $180;
        } else {
         $181 = HEAP32[$173>>2]|0;
         $$0$i$i1$i$i$i12 = $181;
        }
        $182 = ($$0$i$i1$i$i$i12|0)==(-1);
        if ($182) {
         label = 56;
        } else {
         if ($429) {
          $$sroa$057$2 = $$sroa$057$0;
         } else {
          $$pre$i3$i$i9$i = $$sroa$057$0;
          break;
         }
        }
       }
       if ((label|0) == 56) {
        label = 0;
        if ($429) {
         $$pre$i3$i$i9$i = 0;
         break;
        } else {
         $$sroa$057$2 = 0;
        }
       }
       $183 = HEAP32[$__b>>2]|0;
       $184 = (($183) + 12|0);
       $185 = HEAP32[$184>>2]|0;
       $186 = (($183) + 16|0);
       $187 = HEAP32[$186>>2]|0;
       $188 = ($185|0)==($187|0);
       if ($188) {
        $189 = HEAP32[$183>>2]|0;
        $190 = (($189) + 36|0);
        $191 = HEAP32[$190>>2]|0;
        $192 = (FUNCTION_TABLE_ii[$191 & 511]($183)|0);
        $$0$i$i$i14 = $192;
       } else {
        $193 = HEAP32[$185>>2]|0;
        $$0$i$i$i14 = $193;
       }
       $194 = HEAP32[$32>>2]|0;
       $195 = (($194) + 12|0);
       $196 = HEAP32[$195>>2]|0;
       $197 = (FUNCTION_TABLE_iiii[$196 & 511]($32,8192,$$0$i$i$i14)|0);
       if (!($197)) {
        $$pre$i3$i$i9$i = $$sroa$057$2;
        break;
       }
       $198 = HEAP32[$__b>>2]|0;
       $199 = (($198) + 12|0);
       $200 = HEAP32[$199>>2]|0;
       $201 = (($198) + 16|0);
       $202 = HEAP32[$201>>2]|0;
       $203 = ($200|0)==($202|0);
       if ($203) {
        $204 = HEAP32[$198>>2]|0;
        $205 = (($204) + 40|0);
        $206 = HEAP32[$205>>2]|0;
        (FUNCTION_TABLE_ii[$206 & 511]($198)|0);
        $$sroa$057$0 = $$sroa$057$2;
        continue;
       } else {
        $207 = (($200) + 4|0);
        HEAP32[$199>>2] = $207;
        $$sroa$057$0 = $$sroa$057$2;
        continue;
       }
      }
      $208 = HEAP32[$__b>>2]|0;
      $209 = ($208|0)==(0|0);
      do {
       if ($209) {
        $430 = 1;
       } else {
        $210 = (($208) + 12|0);
        $211 = HEAP32[$210>>2]|0;
        $212 = (($208) + 16|0);
        $213 = HEAP32[$212>>2]|0;
        $214 = ($211|0)==($213|0);
        if ($214) {
         $215 = HEAP32[$208>>2]|0;
         $216 = (($215) + 36|0);
         $217 = HEAP32[$216>>2]|0;
         $218 = (FUNCTION_TABLE_ii[$217 & 511]($208)|0);
         $$0$i$i$i$i1$i16 = $218;
        } else {
         $219 = HEAP32[$211>>2]|0;
         $$0$i$i$i$i1$i16 = $219;
        }
        $220 = ($$0$i$i$i$i1$i16|0)==(-1);
        if ($220) {
         HEAP32[$__b>>2] = 0;
         $430 = 1;
         break;
        } else {
         $$pre$i$i$i3$i18 = HEAP32[$__b>>2]|0;
         $phitmp$i$i$i4$i19 = ($$pre$i$i$i3$i18|0)==(0|0);
         $430 = $phitmp$i$i$i4$i19;
         break;
        }
       }
      } while(0);
      $221 = ($$pre$i3$i$i9$i|0)==(0|0);
      if ($221) {
       label = 77;
      } else {
       $222 = (($$pre$i3$i$i9$i) + 12|0);
       $223 = HEAP32[$222>>2]|0;
       $224 = (($$pre$i3$i$i9$i) + 16|0);
       $225 = HEAP32[$224>>2]|0;
       $226 = ($223|0)==($225|0);
       if ($226) {
        $227 = HEAP32[$$pre$i3$i$i9$i>>2]|0;
        $228 = (($227) + 36|0);
        $229 = HEAP32[$228>>2]|0;
        $230 = (FUNCTION_TABLE_ii[$229 & 511]($$pre$i3$i$i9$i)|0);
        $$0$i$i1$i$i7$i22 = $230;
       } else {
        $231 = HEAP32[$223>>2]|0;
        $$0$i$i1$i$i7$i22 = $231;
       }
       $232 = ($$0$i$i1$i$i7$i22|0)==(-1);
       if ($232) {
        label = 77;
       } else {
        if ($430) {
         break L11;
        }
       }
      }
      if ((label|0) == 77) {
       if (!($430)) {
        break L11;
       }
      }
      $233 = HEAP32[$__err>>2]|0;
      $234 = $233 | 2;
      HEAP32[$__err>>2] = $234;
      break;
     }
     case 70:  {
      $113 = HEAP32[$__b>>2]|0;
      $114 = HEAP32[$__e>>2]|0;
      __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($3,$this,$113,$114,$__iob,$__err,$__tm,5552,((5552 + 32|0)));
      $115 = HEAP32[$3>>2]|0;
      HEAP32[$__b>>2] = $115;
      break;
     }
     case 77:  {
      $149 = HEAP32[$__e>>2]|0;
      $150 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$149,$__err,$32,2)|0);
      $151 = HEAP32[$__err>>2]|0;
      $152 = $151 & 4;
      $153 = ($152|0)==(0);
      $154 = ($150|0)<(60);
      $or$cond$i21 = $153 & $154;
      if ($or$cond$i21) {
       $155 = (($__tm) + 4|0);
       HEAP32[$155>>2] = $150;
       break L11;
      } else {
       $156 = $151 | 4;
       HEAP32[$__err>>2] = $156;
       break L11;
      }
      break;
     }
     case 65: case 97:  {
      $52 = HEAP32[$__e>>2]|0;
      $53 = (($this) + 8|0);
      $54 = HEAP32[$53>>2]|0;
      $55 = HEAP32[$54>>2]|0;
      $56 = (FUNCTION_TABLE_ii[$55 & 511]($53)|0);
      $57 = (($56) + 168|0);
      $58 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$52,$56,$57,$32,$__err,0)|0);
      $59 = $58;
      $60 = $56;
      $61 = (($59) - ($60))|0;
      $62 = ($61|0)<(168);
      if ($62) {
       $63 = (($__tm) + 24|0);
       $64 = (($61|0) / 12)&-1;
       $65 = (($64|0) % 7)&-1;
       HEAP32[$63>>2] = $65;
      }
      break;
     }
     case 72:  {
      $116 = HEAP32[$__e>>2]|0;
      $117 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$116,$__err,$32,2)|0);
      $118 = HEAP32[$__err>>2]|0;
      $119 = $118 & 4;
      $120 = ($119|0)==(0);
      $121 = ($117|0)<(24);
      $or$cond$i = $120 & $121;
      if ($or$cond$i) {
       $122 = (($__tm) + 8|0);
       HEAP32[$122>>2] = $117;
       break L11;
      } else {
       $123 = $118 | 4;
       HEAP32[$__err>>2] = $123;
       break L11;
      }
      break;
     }
     case 68:  {
      $110 = HEAP32[$__b>>2]|0;
      $111 = HEAP32[$__e>>2]|0;
      __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($2,$this,$110,$111,$__iob,$__err,$__tm,5520,((5520 + 32|0)));
      $112 = HEAP32[$2>>2]|0;
      HEAP32[$__b>>2] = $112;
      break;
     }
     case 109:  {
      $140 = HEAP32[$__e>>2]|0;
      $141 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$140,$__err,$32,2)|0);
      $142 = HEAP32[$__err>>2]|0;
      $143 = $142 & 4;
      $144 = ($143|0)==(0);
      $145 = ($141|0)<(13);
      $or$cond$i18 = $144 & $145;
      if ($or$cond$i18) {
       $146 = (($__tm) + 16|0);
       $147 = (($141) + -1)|0;
       HEAP32[$146>>2] = $147;
       break L11;
      } else {
       $148 = $142 | 4;
       HEAP32[$__err>>2] = $148;
       break L11;
      }
      break;
     }
     case 112:  {
      $235 = (($__tm) + 8|0);
      $236 = HEAP32[$__e>>2]|0;
      $237 = (($this) + 8|0);
      $238 = HEAP32[$237>>2]|0;
      $239 = (($238) + 8|0);
      $240 = HEAP32[$239>>2]|0;
      $241 = (FUNCTION_TABLE_ii[$240 & 511]($237)|0);
      $242 = HEAP8[$241>>0]|0;
      $243 = $242 & 1;
      $244 = ($243<<24>>24)==(0);
      if ($244) {
       $247 = $242&255;
       $248 = $247 >>> 1;
       $260 = $248;
      } else {
       $245 = (($241) + 4|0);
       $246 = HEAP32[$245>>2]|0;
       $260 = $246;
      }
      $249 = (($241) + 12|0);
      $250 = HEAP8[$249>>0]|0;
      $251 = $250 & 1;
      $252 = ($251<<24>>24)==(0);
      if ($252) {
       $255 = $250&255;
       $256 = $255 >>> 1;
       $258 = $256;
      } else {
       $253 = (($241) + 16|0);
       $254 = HEAP32[$253>>2]|0;
       $258 = $254;
      }
      $257 = (0 - ($258))|0;
      $259 = ($260|0)==($257|0);
      if ($259) {
       $261 = HEAP32[$__err>>2]|0;
       $262 = $261 | 4;
       HEAP32[$__err>>2] = $262;
       break L11;
      }
      $263 = (($241) + 24|0);
      $264 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$236,$241,$263,$32,$__err,0)|0);
      $265 = $264;
      $266 = $241;
      $267 = (($265) - ($266))|0;
      $268 = ($264|0)==($241|0);
      if ($268) {
       $269 = HEAP32[$235>>2]|0;
       $270 = ($269|0)==(12);
       if ($270) {
        HEAP32[$235>>2] = 0;
        break L11;
       }
      }
      $271 = ($267|0)==(12);
      if ($271) {
       $272 = HEAP32[$235>>2]|0;
       $273 = ($272|0)<(12);
       if ($273) {
        $274 = (($272) + 12)|0;
        HEAP32[$235>>2] = $274;
       }
      }
      break;
     }
     case 82:  {
      $278 = HEAP32[$__b>>2]|0;
      $279 = HEAP32[$__e>>2]|0;
      __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($5,$this,$278,$279,$__iob,$__err,$__tm,5632,((5632 + 20|0)));
      $280 = HEAP32[$5>>2]|0;
      HEAP32[$__b>>2] = $280;
      break;
     }
     case 83:  {
      $281 = HEAP32[$__e>>2]|0;
      $282 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$281,$__err,$32,2)|0);
      $283 = HEAP32[$__err>>2]|0;
      $284 = $283 & 4;
      $285 = ($284|0)==(0);
      $286 = ($282|0)<(61);
      $or$cond$i26 = $285 & $286;
      if ($or$cond$i26) {
       HEAP32[$__tm>>2] = $282;
       break L11;
      } else {
       $287 = $283 | 4;
       HEAP32[$__err>>2] = $287;
       break L11;
      }
      break;
     }
     case 89:  {
      $336 = HEAP32[$__e>>2]|0;
      $337 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$336,$__err,$32,4)|0);
      $338 = HEAP32[$__err>>2]|0;
      $339 = $338 & 4;
      $340 = ($339|0)==(0);
      if ($340) {
       $341 = (($__tm) + 20|0);
       $342 = (($337) + -1900)|0;
       HEAP32[$341>>2] = $342;
      }
      break;
     }
     case 37:  {
      $343 = HEAP32[$__e>>2]|0;
      $344 = HEAP32[$__b>>2]|0;
      $345 = ($344|0)==(0|0);
      do {
       if ($345) {
        $431 = 1;
       } else {
        $346 = (($344) + 12|0);
        $347 = HEAP32[$346>>2]|0;
        $348 = (($344) + 16|0);
        $349 = HEAP32[$348>>2]|0;
        $350 = ($347|0)==($349|0);
        if ($350) {
         $351 = HEAP32[$344>>2]|0;
         $352 = (($351) + 36|0);
         $353 = HEAP32[$352>>2]|0;
         $354 = (FUNCTION_TABLE_ii[$353 & 511]($344)|0);
         $$0$i$i$i$i$i = $354;
        } else {
         $355 = HEAP32[$347>>2]|0;
         $$0$i$i$i$i$i = $355;
        }
        $356 = ($$0$i$i$i$i$i|0)==(-1);
        if ($356) {
         HEAP32[$__b>>2] = 0;
         $431 = 1;
         break;
        } else {
         $$pre$i$i$i$i = HEAP32[$__b>>2]|0;
         $phitmp$i$i$i$i = ($$pre$i$i$i$i|0)==(0|0);
         $431 = $phitmp$i$i$i$i;
         break;
        }
       }
      } while(0);
      $357 = ($343|0)==(0|0);
      if ($357) {
       label = 127;
      } else {
       $358 = (($343) + 12|0);
       $359 = HEAP32[$358>>2]|0;
       $360 = (($343) + 16|0);
       $361 = HEAP32[$360>>2]|0;
       $362 = ($359|0)==($361|0);
       if ($362) {
        $363 = HEAP32[$343>>2]|0;
        $364 = (($363) + 36|0);
        $365 = HEAP32[$364>>2]|0;
        $366 = (FUNCTION_TABLE_ii[$365 & 511]($343)|0);
        $$0$i$i1$i$i$i = $366;
       } else {
        $367 = HEAP32[$359>>2]|0;
        $$0$i$i1$i$i$i = $367;
       }
       $368 = ($$0$i$i1$i$i$i|0)==(-1);
       if ($368) {
        label = 127;
       } else {
        if ($431) {
         $$pre$i3$i$i915$i = $343;
        } else {
         label = 129;
        }
       }
      }
      if ((label|0) == 127) {
       if ($431) {
        label = 129;
       } else {
        $$pre$i3$i$i915$i = 0;
       }
      }
      if ((label|0) == 129) {
       $369 = HEAP32[$__err>>2]|0;
       $370 = $369 | 6;
       HEAP32[$__err>>2] = $370;
       break L11;
      }
      $371 = HEAP32[$__b>>2]|0;
      $372 = (($371) + 12|0);
      $373 = HEAP32[$372>>2]|0;
      $374 = (($371) + 16|0);
      $375 = HEAP32[$374>>2]|0;
      $376 = ($373|0)==($375|0);
      if ($376) {
       $377 = HEAP32[$371>>2]|0;
       $378 = (($377) + 36|0);
       $379 = HEAP32[$378>>2]|0;
       $380 = (FUNCTION_TABLE_ii[$379 & 511]($371)|0);
       $$0$i$i$i = $380;
      } else {
       $381 = HEAP32[$373>>2]|0;
       $$0$i$i$i = $381;
      }
      $382 = HEAP32[$32>>2]|0;
      $383 = (($382) + 52|0);
      $384 = HEAP32[$383>>2]|0;
      $385 = (FUNCTION_TABLE_iiii[$384 & 511]($32,$$0$i$i$i,0)|0);
      $386 = ($385<<24>>24)==(37);
      if (!($386)) {
       $387 = HEAP32[$__err>>2]|0;
       $388 = $387 | 4;
       HEAP32[$__err>>2] = $388;
       break L11;
      }
      $389 = HEAP32[$__b>>2]|0;
      $390 = (($389) + 12|0);
      $391 = HEAP32[$390>>2]|0;
      $392 = (($389) + 16|0);
      $393 = HEAP32[$392>>2]|0;
      $394 = ($391|0)==($393|0);
      if ($394) {
       $395 = HEAP32[$389>>2]|0;
       $396 = (($395) + 40|0);
       $397 = HEAP32[$396>>2]|0;
       (FUNCTION_TABLE_ii[$397 & 511]($389)|0);
      } else {
       $398 = (($391) + 4|0);
       HEAP32[$390>>2] = $398;
      }
      $399 = HEAP32[$__b>>2]|0;
      $400 = ($399|0)==(0|0);
      do {
       if ($400) {
        $432 = 1;
       } else {
        $401 = (($399) + 12|0);
        $402 = HEAP32[$401>>2]|0;
        $403 = (($399) + 16|0);
        $404 = HEAP32[$403>>2]|0;
        $405 = ($402|0)==($404|0);
        if ($405) {
         $406 = HEAP32[$399>>2]|0;
         $407 = (($406) + 36|0);
         $408 = HEAP32[$407>>2]|0;
         $409 = (FUNCTION_TABLE_ii[$408 & 511]($399)|0);
         $$0$i$i$i$i1$i = $409;
        } else {
         $410 = HEAP32[$402>>2]|0;
         $$0$i$i$i$i1$i = $410;
        }
        $411 = ($$0$i$i$i$i1$i|0)==(-1);
        if ($411) {
         HEAP32[$__b>>2] = 0;
         $432 = 1;
         break;
        } else {
         $$pre$i$i$i3$i = HEAP32[$__b>>2]|0;
         $phitmp$i$i$i4$i = ($$pre$i$i$i3$i|0)==(0|0);
         $432 = $phitmp$i$i$i4$i;
         break;
        }
       }
      } while(0);
      $412 = ($$pre$i3$i$i915$i|0)==(0|0);
      if ($412) {
       label = 150;
      } else {
       $413 = (($$pre$i3$i$i915$i) + 12|0);
       $414 = HEAP32[$413>>2]|0;
       $415 = (($$pre$i3$i$i915$i) + 16|0);
       $416 = HEAP32[$415>>2]|0;
       $417 = ($414|0)==($416|0);
       if ($417) {
        $418 = HEAP32[$$pre$i3$i$i915$i>>2]|0;
        $419 = (($418) + 36|0);
        $420 = HEAP32[$419>>2]|0;
        $421 = (FUNCTION_TABLE_ii[$420 & 511]($$pre$i3$i$i915$i)|0);
        $$0$i$i1$i$i7$i = $421;
       } else {
        $422 = HEAP32[$414>>2]|0;
        $$0$i$i1$i$i7$i = $422;
       }
       $423 = ($$0$i$i1$i$i7$i|0)==(-1);
       if ($423) {
        label = 150;
       } else {
        if ($432) {
         break L11;
        }
       }
      }
      if ((label|0) == 150) {
       if (!($432)) {
        break L11;
       }
      }
      $424 = HEAP32[$__err>>2]|0;
      $425 = $424 | 2;
      HEAP32[$__err>>2] = $425;
      break;
     }
     case 88:  {
      $304 = (($this) + 8|0);
      $305 = HEAP32[$304>>2]|0;
      $306 = (($305) + 24|0);
      $307 = HEAP32[$306>>2]|0;
      $308 = (FUNCTION_TABLE_ii[$307 & 511]($304)|0);
      $309 = HEAP32[$__b>>2]|0;
      $310 = HEAP32[$__e>>2]|0;
      $311 = HEAP8[$308>>0]|0;
      $312 = $311 & 1;
      $313 = ($312<<24>>24)==(0);
      if ($313) {
       $318 = (($308) + 4|0);
       $319 = $311&255;
       $320 = $319 >>> 1;
       $322 = $318;$323 = $320;
      } else {
       $314 = (($308) + 8|0);
       $315 = HEAP32[$314>>2]|0;
       $316 = (($308) + 4|0);
       $317 = HEAP32[$316>>2]|0;
       $322 = $315;$323 = $317;
      }
      $321 = (($322) + ($323<<2)|0);
      __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($9,$this,$309,$310,$__iob,$__err,$__tm,$322,$321);
      $324 = HEAP32[$9>>2]|0;
      HEAP32[$__b>>2] = $324;
      break;
     }
     case 121:  {
      $325 = (($__tm) + 20|0);
      $326 = HEAP32[$__e>>2]|0;
      $327 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$326,$__err,$32,4)|0);
      $328 = HEAP32[$__err>>2]|0;
      $329 = $328 & 4;
      $330 = ($329|0)==(0);
      if ($330) {
       $331 = ($327|0)<(69);
       if ($331) {
        $332 = (($327) + 2000)|0;
        $__t$0$i = $332;
       } else {
        $$off$i35 = (($327) + -69)|0;
        $333 = ($$off$i35>>>0)<(31);
        $334 = (($327) + 1900)|0;
        $$$i = $333 ? $334 : $327;
        $__t$0$i = $$$i;
       }
       $335 = (($__t$0$i) + -1900)|0;
       HEAP32[$325>>2] = $335;
      }
      break;
     }
     case 114:  {
      $275 = HEAP32[$__b>>2]|0;
      $276 = HEAP32[$__e>>2]|0;
      __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($4,$this,$275,$276,$__iob,$__err,$__tm,5584,((5584 + 44|0)));
      $277 = HEAP32[$4>>2]|0;
      HEAP32[$__b>>2] = $277;
      break;
     }
     case 84:  {
      $288 = HEAP32[$__b>>2]|0;
      $289 = HEAP32[$__e>>2]|0;
      __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($6,$this,$288,$289,$__iob,$__err,$__tm,5656,((5656 + 32|0)));
      $290 = HEAP32[$6>>2]|0;
      HEAP32[$__b>>2] = $290;
      break;
     }
     case 119:  {
      $291 = HEAP32[$__e>>2]|0;
      $292 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$291,$__err,$32,1)|0);
      $293 = HEAP32[$__err>>2]|0;
      $294 = $293 & 4;
      $295 = ($294|0)==(0);
      $296 = ($292|0)<(7);
      $or$cond$i29 = $295 & $296;
      if ($or$cond$i29) {
       $297 = (($__tm) + 24|0);
       HEAP32[$297>>2] = $292;
       break L11;
      } else {
       $298 = $293 | 4;
       HEAP32[$__err>>2] = $298;
       break L11;
      }
      break;
     }
     case 120:  {
      $299 = HEAP32[$this>>2]|0;
      $300 = (($299) + 20|0);
      $301 = HEAP32[$300>>2]|0;
      $302 = HEAP32[$__b>>2]|0;
      HEAP32[$7>>2] = $302;
      $303 = HEAP32[$__e>>2]|0;
      HEAP32[$8>>2] = $303;
      ;HEAP32[$$byval_copy+0>>2]=HEAP32[$7+0>>2]|0;
      ;HEAP32[$$byval_copy63+0>>2]=HEAP32[$8+0>>2]|0;
      FUNCTION_TABLE_viiiiiii[$301 & 511]($agg$result,$this,$$byval_copy,$$byval_copy63,$__iob,$__err,$__tm);
      STACKTOP = sp;return;
      break;
     }
     default: {
      $426 = HEAP32[$__err>>2]|0;
      $427 = $426 | 4;
      HEAP32[$__err>>2] = $427;
     }
     }
    } while(0);
    $428 = HEAP32[$__b>>2]|0;
    HEAP32[$agg$result>>2] = $428;
    STACKTOP = sp;return;
   }
  }
  $34 = (___cxa_allocate_exception(4)|0);
  HEAP32[$34>>2] = ((14256 + 8|0));
  __THREW__ = 0;
  invoke_viii(379,($34|0),(14336|0),(351|0));
  $35 = __THREW__; __THREW__ = 0;
  $36 = $35&1;
  if (!($36)) {
   // unreachable;
  }
 }
 $44 = ___cxa_find_matching_catch(-1,-1)|0;
 $45 = tempRet0;
 $46 = (($11) + 4|0);
 $47 = HEAP32[$46>>2]|0;HEAP32[$46>>2] = (($47+-1)|0);
 $48 = ($47|0)==(0);
 if (!($48)) {
  ___resumeException($44|0);
  // unreachable;
 }
 $49 = HEAP32[$11>>2]|0;
 $50 = (($49) + 8|0);
 $51 = HEAP32[$50>>2]|0;
 FUNCTION_TABLE_vi[$51 & 511]($11);
 ___resumeException($44|0);
 // unreachable;
}
function __ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$__e$0,$__err,$__ct,$__n) {
 $__b = $__b|0;
 $__e$0 = $__e$0|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 $__n = $__n|0;
 var $$ = 0, $$$pre$i3$i$i10 = 0, $$$pre$i3$i$i103 = 0, $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i17 = 0, $$0$i$i$i$i2 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i23 = 0, $$0$i$i1$i$i8 = 0, $$0$i$i14 = 0, $$0$in = 0, $$01 = 0, $$phitmp$i4$i$i11 = 0, $$pre$i$i$i = 0, $$pre$i$i$i19 = 0, $$pre$i$i$i4 = 0, $$pre$i3$i$i10 = 0, $$pre$i3$i$i25 = 0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__r$0 = 0, $__r$0$in = 0, $phitmp$i$i$i = 0, $phitmp$i$i$i20 = 0, $phitmp$i$i$i5 = 0, $phitmp$i4$i$i11 = 0, $tmp$i$i13 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$__b>>2]|0;
 $1 = ($0|0)==(0|0);
 do {
  if ($1) {
   $146 = 1;
  } else {
   $2 = (($0) + 12|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = (($0) + 16|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = ($3|0)==($5|0);
   if ($6) {
    $7 = HEAP32[$0>>2]|0;
    $8 = (($7) + 36|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = (FUNCTION_TABLE_ii[$9 & 511]($0)|0);
    $$0$i$i$i$i = $10;
   } else {
    $11 = HEAP32[$3>>2]|0;
    $$0$i$i$i$i = $11;
   }
   $12 = ($$0$i$i$i$i|0)==(-1);
   if ($12) {
    HEAP32[$__b>>2] = 0;
    $146 = 1;
    break;
   } else {
    $$pre$i$i$i = HEAP32[$__b>>2]|0;
    $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
    $146 = $phitmp$i$i$i;
    break;
   }
  }
 } while(0);
 $13 = ($__e$0|0)==(0|0);
 if ($13) {
  label = 13;
 } else {
  $14 = (($__e$0) + 12|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (($__e$0) + 16|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ($15|0)==($17|0);
  if ($18) {
   $19 = HEAP32[$__e$0>>2]|0;
   $20 = (($19) + 36|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = (FUNCTION_TABLE_ii[$21 & 511]($__e$0)|0);
   $$0$i$i1$i$i = $22;
  } else {
   $23 = HEAP32[$15>>2]|0;
   $$0$i$i1$i$i = $23;
  }
  $24 = ($$0$i$i1$i$i|0)==(-1);
  if ($24) {
   label = 13;
  } else {
   if ($146) {
    $147 = $__e$0;
   } else {
    label = 15;
   }
  }
 }
 if ((label|0) == 13) {
  if ($146) {
   label = 15;
  } else {
   $147 = 0;
  }
 }
 if ((label|0) == 15) {
  $25 = HEAP32[$__err>>2]|0;
  $26 = $25 | 6;
  HEAP32[$__err>>2] = $26;
  $$01 = 0;
  STACKTOP = sp;return ($$01|0);
 }
 $27 = HEAP32[$__b>>2]|0;
 $28 = (($27) + 12|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = (($27) + 16|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = ($29|0)==($31|0);
 if ($32) {
  $33 = HEAP32[$27>>2]|0;
  $34 = (($33) + 36|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = (FUNCTION_TABLE_ii[$35 & 511]($27)|0);
  $$0$i$i = $36;
 } else {
  $37 = HEAP32[$29>>2]|0;
  $$0$i$i = $37;
 }
 $38 = HEAP32[$__ct>>2]|0;
 $39 = (($38) + 12|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = (FUNCTION_TABLE_iiii[$40 & 511]($__ct,2048,$$0$i$i)|0);
 if (!($41)) {
  $42 = HEAP32[$__err>>2]|0;
  $43 = $42 | 4;
  HEAP32[$__err>>2] = $43;
  $$01 = 0;
  STACKTOP = sp;return ($$01|0);
 }
 $44 = HEAP32[$__ct>>2]|0;
 $45 = (($44) + 52|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = (FUNCTION_TABLE_iiii[$46 & 511]($__ct,$$0$i$i,0)|0);
 $48 = $47 << 24 >> 24;
 $49 = HEAP32[$__b>>2]|0;
 $50 = (($49) + 12|0);
 $51 = HEAP32[$50>>2]|0;
 $52 = (($49) + 16|0);
 $53 = HEAP32[$52>>2]|0;
 $54 = ($51|0)==($53|0);
 if ($54) {
  $55 = HEAP32[$49>>2]|0;
  $56 = (($55) + 40|0);
  $57 = HEAP32[$56>>2]|0;
  (FUNCTION_TABLE_ii[$57 & 511]($49)|0);
  $$0$in = $__n;$$pre$i3$i$i10 = $147;$73 = $147;$__r$0$in = $48;
 } else {
  $58 = (($51) + 4|0);
  HEAP32[$50>>2] = $58;
  $$0$in = $__n;$$pre$i3$i$i10 = $147;$73 = $147;$__r$0$in = $48;
 }
 while(1) {
  $__r$0 = (($__r$0$in) + -48)|0;
  $$0 = (($$0$in) + -1)|0;
  $59 = HEAP32[$__b>>2]|0;
  $60 = ($59|0)==(0|0);
  do {
   if ($60) {
    $85 = 1;
   } else {
    $61 = (($59) + 12|0);
    $62 = HEAP32[$61>>2]|0;
    $63 = (($59) + 16|0);
    $64 = HEAP32[$63>>2]|0;
    $65 = ($62|0)==($64|0);
    if ($65) {
     $66 = HEAP32[$59>>2]|0;
     $67 = (($66) + 36|0);
     $68 = HEAP32[$67>>2]|0;
     $69 = (FUNCTION_TABLE_ii[$68 & 511]($59)|0);
     $$0$i$i$i$i2 = $69;
    } else {
     $70 = HEAP32[$62>>2]|0;
     $$0$i$i$i$i2 = $70;
    }
    $71 = ($$0$i$i$i$i2|0)==(-1);
    if ($71) {
     HEAP32[$__b>>2] = 0;
     $85 = 1;
     break;
    } else {
     $$pre$i$i$i4 = HEAP32[$__b>>2]|0;
     $phitmp$i$i$i5 = ($$pre$i$i$i4|0)==(0|0);
     $85 = $phitmp$i$i$i5;
     break;
    }
   }
  } while(0);
  $72 = ($73|0)==(0|0);
  if ($72) {
   $$pre$i3$i$i25 = $$pre$i3$i$i10;$148 = 0;$86 = 1;
  } else {
   $74 = (($73) + 12|0);
   $75 = HEAP32[$74>>2]|0;
   $76 = (($73) + 16|0);
   $77 = HEAP32[$76>>2]|0;
   $78 = ($75|0)==($77|0);
   if ($78) {
    $79 = HEAP32[$73>>2]|0;
    $80 = (($79) + 36|0);
    $81 = HEAP32[$80>>2]|0;
    $82 = (FUNCTION_TABLE_ii[$81 & 511]($73)|0);
    $$0$i$i1$i$i8 = $82;
   } else {
    $83 = HEAP32[$75>>2]|0;
    $$0$i$i1$i$i8 = $83;
   }
   $84 = ($$0$i$i1$i$i8|0)==(-1);
   $phitmp$i4$i$i11 = ($$pre$i3$i$i10|0)==(0|0);
   $$$pre$i3$i$i10 = $84 ? 0 : $$pre$i3$i$i10;
   $$$pre$i3$i$i103 = $84 ? 0 : $$pre$i3$i$i10;
   $$phitmp$i4$i$i11 = $84 ? 1 : $phitmp$i4$i$i11;
   $$pre$i3$i$i25 = $$$pre$i3$i$i10;$148 = $$$pre$i3$i$i103;$86 = $$phitmp$i4$i$i11;
  }
  $tmp$i$i13 = $85 ^ $86;
  $87 = ($$0|0)>(0);
  $$ = $tmp$i$i13 & $87;
  $88 = HEAP32[$__b>>2]|0;
  if (!($$)) {
   break;
  }
  $89 = (($88) + 12|0);
  $90 = HEAP32[$89>>2]|0;
  $91 = (($88) + 16|0);
  $92 = HEAP32[$91>>2]|0;
  $93 = ($90|0)==($92|0);
  if ($93) {
   $94 = HEAP32[$88>>2]|0;
   $95 = (($94) + 36|0);
   $96 = HEAP32[$95>>2]|0;
   $97 = (FUNCTION_TABLE_ii[$96 & 511]($88)|0);
   $$0$i$i14 = $97;
  } else {
   $98 = HEAP32[$90>>2]|0;
   $$0$i$i14 = $98;
  }
  $99 = HEAP32[$__ct>>2]|0;
  $100 = (($99) + 12|0);
  $101 = HEAP32[$100>>2]|0;
  $102 = (FUNCTION_TABLE_iiii[$101 & 511]($__ct,2048,$$0$i$i14)|0);
  if (!($102)) {
   $$01 = $__r$0;
   label = 59;
   break;
  }
  $103 = ($__r$0*10)|0;
  $104 = HEAP32[$__ct>>2]|0;
  $105 = (($104) + 52|0);
  $106 = HEAP32[$105>>2]|0;
  $107 = (FUNCTION_TABLE_iiii[$106 & 511]($__ct,$$0$i$i14,0)|0);
  $108 = $107 << 24 >> 24;
  $109 = (($108) + ($103))|0;
  $110 = HEAP32[$__b>>2]|0;
  $111 = (($110) + 12|0);
  $112 = HEAP32[$111>>2]|0;
  $113 = (($110) + 16|0);
  $114 = HEAP32[$113>>2]|0;
  $115 = ($112|0)==($114|0);
  if ($115) {
   $116 = HEAP32[$110>>2]|0;
   $117 = (($116) + 40|0);
   $118 = HEAP32[$117>>2]|0;
   (FUNCTION_TABLE_ii[$118 & 511]($110)|0);
   $$0$in = $$0;$$pre$i3$i$i10 = $$pre$i3$i$i25;$73 = $148;$__r$0$in = $109;
   continue;
  } else {
   $119 = (($112) + 4|0);
   HEAP32[$111>>2] = $119;
   $$0$in = $$0;$$pre$i3$i$i10 = $$pre$i3$i$i25;$73 = $148;$__r$0$in = $109;
   continue;
  }
 }
 if ((label|0) == 59) {
  STACKTOP = sp;return ($$01|0);
 }
 $120 = ($88|0)==(0|0);
 do {
  if ($120) {
   $149 = 1;
  } else {
   $121 = (($88) + 12|0);
   $122 = HEAP32[$121>>2]|0;
   $123 = (($88) + 16|0);
   $124 = HEAP32[$123>>2]|0;
   $125 = ($122|0)==($124|0);
   if ($125) {
    $126 = HEAP32[$88>>2]|0;
    $127 = (($126) + 36|0);
    $128 = HEAP32[$127>>2]|0;
    $129 = (FUNCTION_TABLE_ii[$128 & 511]($88)|0);
    $$0$i$i$i$i17 = $129;
   } else {
    $130 = HEAP32[$122>>2]|0;
    $$0$i$i$i$i17 = $130;
   }
   $131 = ($$0$i$i$i$i17|0)==(-1);
   if ($131) {
    HEAP32[$__b>>2] = 0;
    $149 = 1;
    break;
   } else {
    $$pre$i$i$i19 = HEAP32[$__b>>2]|0;
    $phitmp$i$i$i20 = ($$pre$i$i$i19|0)==(0|0);
    $149 = $phitmp$i$i$i20;
    break;
   }
  }
 } while(0);
 $132 = ($$pre$i3$i$i25|0)==(0|0);
 if ($132) {
  label = 56;
 } else {
  $133 = (($$pre$i3$i$i25) + 12|0);
  $134 = HEAP32[$133>>2]|0;
  $135 = (($$pre$i3$i$i25) + 16|0);
  $136 = HEAP32[$135>>2]|0;
  $137 = ($134|0)==($136|0);
  if ($137) {
   $138 = HEAP32[$$pre$i3$i$i25>>2]|0;
   $139 = (($138) + 36|0);
   $140 = HEAP32[$139>>2]|0;
   $141 = (FUNCTION_TABLE_ii[$140 & 511]($$pre$i3$i$i25)|0);
   $$0$i$i1$i$i23 = $141;
  } else {
   $142 = HEAP32[$134>>2]|0;
   $$0$i$i1$i$i23 = $142;
  }
  $143 = ($$0$i$i1$i$i23|0)==(-1);
  if ($143) {
   label = 56;
  } else {
   if ($149) {
    $$01 = $__r$0;
    STACKTOP = sp;return ($$01|0);
   }
  }
 }
 if ((label|0) == 56) {
  if (!($149)) {
   $$01 = $__r$0;
   STACKTOP = sp;return ($$01|0);
  }
 }
 $144 = HEAP32[$__err>>2]|0;
 $145 = $144 | 2;
 HEAP32[$__err>>2] = $145;
 $$01 = $__r$0;
 STACKTOP = sp;return ($$01|0);
}
function __ZNSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $eh$lpad$body$i$i$i$indexZ2D = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP8[6328>>0]|0;
 $3 = ($2<<24>>24)==(0);
 do {
  if ($3) {
   $4 = (___cxa_guard_acquire((6328|0))|0);
   $5 = ($4|0)==(0);
   if (!($5)) {
    __THREW__ = 0;
    $6 = (invoke_iiii(461,2147483647,(6336|0),(0|0))|0);
    $7 = __THREW__; __THREW__ = 0;
    $8 = $7&1;
    if (!($8)) {
     HEAP32[6320>>2] = $6;
     ___cxa_guard_release((6328|0));
     break;
    }
    $9 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
    $10 = tempRet0;
    ___cxa_guard_abort((6328|0));
    $eh$lpad$body$i$i$i$indexZ2D = $9;
    ___clang_call_terminate($eh$lpad$body$i$i$i$indexZ2D);
    // unreachable;
   }
  }
 } while(0);
 $11 = HEAP32[6320>>2]|0;
 $12 = ($1|0)==($11|0);
 if (!($12)) {
  $13 = HEAP32[$0>>2]|0;
  __THREW__ = 0;
  invoke_vi(472,($13|0));
  $14 = __THREW__; __THREW__ = 0;
  $15 = $14&1;
  if ($15) {
   $16 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
   $17 = tempRet0;
   $eh$lpad$body$i$i$i$indexZ2D = $16;
   ___clang_call_terminate($eh$lpad$body$i$i$i$indexZ2D);
   // unreachable;
  }
 }
 $18 = ($this|0)==(0|0);
 if ($18) {
  STACKTOP = sp;return;
 }
 _free($this);
 STACKTOP = sp;return;
}
function __ZNSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $eh$lpad$body$i$i$indexZ2D = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP8[6328>>0]|0;
 $3 = ($2<<24>>24)==(0);
 do {
  if ($3) {
   $4 = (___cxa_guard_acquire((6328|0))|0);
   $5 = ($4|0)==(0);
   if (!($5)) {
    __THREW__ = 0;
    $6 = (invoke_iiii(461,2147483647,(6336|0),(0|0))|0);
    $7 = __THREW__; __THREW__ = 0;
    $8 = $7&1;
    if (!($8)) {
     HEAP32[6320>>2] = $6;
     ___cxa_guard_release((6328|0));
     break;
    }
    $9 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
    $10 = tempRet0;
    ___cxa_guard_abort((6328|0));
    $eh$lpad$body$i$i$indexZ2D = $9;
    ___clang_call_terminate($eh$lpad$body$i$i$indexZ2D);
    // unreachable;
   }
  }
 } while(0);
 $11 = HEAP32[6320>>2]|0;
 $12 = ($1|0)==($11|0);
 if ($12) {
  STACKTOP = sp;return;
 }
 $13 = HEAP32[$0>>2]|0;
 __THREW__ = 0;
 invoke_vi(472,($13|0));
 $14 = __THREW__; __THREW__ = 0;
 $15 = $14&1;
 if (!($15)) {
  STACKTOP = sp;return;
 }
 $16 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
 $17 = tempRet0;
 $eh$lpad$body$i$i$indexZ2D = $16;
 ___clang_call_terminate($eh$lpad$body$i$i$indexZ2D);
 // unreachable;
}
function __ZNKSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPK2tmcc($agg$result,$this,$__s,$0,$1,$__tm,$__fmt,$__mod) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $0 = $0|0;
 $1 = $1|0;
 $__tm = $__tm|0;
 $__fmt = $__fmt|0;
 $__mod = $__mod|0;
 var $$$i = 0, $$01$i$i = 0, $$7$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__nar = 0, $fmt$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $fmt$i = sp + 100|0;
 $__nar = sp;
 HEAP8[$fmt$i>>0] = 37;
 $2 = (($fmt$i) + 1|0);
 HEAP8[$2>>0] = $__fmt;
 $3 = (($fmt$i) + 2|0);
 HEAP8[$3>>0] = $__mod;
 $4 = (($fmt$i) + 3|0);
 HEAP8[$4>>0] = 0;
 $5 = ($__mod<<24>>24)==(0);
 if (!($5)) {
  HEAP8[$2>>0] = $__mod;
  HEAP8[$3>>0] = $__fmt;
 }
 $6 = (($this) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (_strftime_l(($__nar|0),100,($fmt$i|0),($__tm|0),($7|0))|0);
 $9 = (($__nar) + ($8)|0);
 $10 = HEAP32[$__s>>2]|0;
 $11 = ($8|0)==(0);
 if ($11) {
  $30 = $10;
  HEAP32[$agg$result>>2] = $30;
  STACKTOP = sp;return;
 } else {
  $$01$i$i = $__nar;$14 = $10;$27 = $10;
 }
 while(1) {
  $12 = HEAP8[$$01$i$i>>0]|0;
  $13 = ($14|0)==(0|0);
  do {
   if ($13) {
    $31 = $27;$32 = 0;
   } else {
    $15 = (($14) + 24|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = (($14) + 28|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ($16|0)==($18|0);
    if ($19) {
     $21 = HEAP32[$14>>2]|0;
     $22 = (($21) + 52|0);
     $23 = HEAP32[$22>>2]|0;
     $24 = $12&255;
     $25 = (FUNCTION_TABLE_iii[$23 & 511]($14,$24)|0);
     $26 = ($25|0)==(-1);
     $$$i = $26 ? 0 : $27;
     $$7$i = $26 ? 0 : $14;
     $31 = $$$i;$32 = $$7$i;
     break;
    } else {
     $20 = (($16) + 1|0);
     HEAP32[$15>>2] = $20;
     HEAP8[$16>>0] = $12;
     $31 = $27;$32 = $14;
     break;
    }
   }
  } while(0);
  $28 = (($$01$i$i) + 1|0);
  $29 = ($28|0)==($9|0);
  if ($29) {
   $30 = $31;
   break;
  } else {
   $$01$i$i = $28;$14 = $32;$27 = $31;
  }
 }
 HEAP32[$agg$result>>2] = $30;
 STACKTOP = sp;return;
}
function __ZNSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $eh$lpad$body$i$i$i$indexZ2D = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP8[6328>>0]|0;
 $3 = ($2<<24>>24)==(0);
 do {
  if ($3) {
   $4 = (___cxa_guard_acquire((6328|0))|0);
   $5 = ($4|0)==(0);
   if (!($5)) {
    __THREW__ = 0;
    $6 = (invoke_iiii(461,2147483647,(6336|0),(0|0))|0);
    $7 = __THREW__; __THREW__ = 0;
    $8 = $7&1;
    if (!($8)) {
     HEAP32[6320>>2] = $6;
     ___cxa_guard_release((6328|0));
     break;
    }
    $9 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
    $10 = tempRet0;
    ___cxa_guard_abort((6328|0));
    $eh$lpad$body$i$i$i$indexZ2D = $9;
    ___clang_call_terminate($eh$lpad$body$i$i$i$indexZ2D);
    // unreachable;
   }
  }
 } while(0);
 $11 = HEAP32[6320>>2]|0;
 $12 = ($1|0)==($11|0);
 if (!($12)) {
  $13 = HEAP32[$0>>2]|0;
  __THREW__ = 0;
  invoke_vi(472,($13|0));
  $14 = __THREW__; __THREW__ = 0;
  $15 = $14&1;
  if ($15) {
   $16 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
   $17 = tempRet0;
   $eh$lpad$body$i$i$i$indexZ2D = $16;
   ___clang_call_terminate($eh$lpad$body$i$i$i$indexZ2D);
   // unreachable;
  }
 }
 $18 = ($this|0)==(0|0);
 if ($18) {
  STACKTOP = sp;return;
 }
 _free($this);
 STACKTOP = sp;return;
}
function __ZNSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $eh$lpad$body$i$i$indexZ2D = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP8[6328>>0]|0;
 $3 = ($2<<24>>24)==(0);
 do {
  if ($3) {
   $4 = (___cxa_guard_acquire((6328|0))|0);
   $5 = ($4|0)==(0);
   if (!($5)) {
    __THREW__ = 0;
    $6 = (invoke_iiii(461,2147483647,(6336|0),(0|0))|0);
    $7 = __THREW__; __THREW__ = 0;
    $8 = $7&1;
    if (!($8)) {
     HEAP32[6320>>2] = $6;
     ___cxa_guard_release((6328|0));
     break;
    }
    $9 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
    $10 = tempRet0;
    ___cxa_guard_abort((6328|0));
    $eh$lpad$body$i$i$indexZ2D = $9;
    ___clang_call_terminate($eh$lpad$body$i$i$indexZ2D);
    // unreachable;
   }
  }
 } while(0);
 $11 = HEAP32[6320>>2]|0;
 $12 = ($1|0)==($11|0);
 if ($12) {
  STACKTOP = sp;return;
 }
 $13 = HEAP32[$0>>2]|0;
 __THREW__ = 0;
 invoke_vi(472,($13|0));
 $14 = __THREW__; __THREW__ = 0;
 $15 = $14&1;
 if (!($15)) {
  STACKTOP = sp;return;
 }
 $16 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
 $17 = tempRet0;
 $eh$lpad$body$i$i$indexZ2D = $16;
 ___clang_call_terminate($eh$lpad$body$i$i$indexZ2D);
 // unreachable;
}
function __ZNKSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPK2tmcc($agg$result,$this,$__s,$0,$1,$__tm,$__fmt,$__mod) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $0 = $0|0;
 $1 = $1|0;
 $__tm = $__tm|0;
 $__fmt = $__fmt|0;
 $__mod = $__mod|0;
 var $$$i = 0, $$0$i$i$i$i = 0, $$01$i$i = 0, $$7$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__nar = 0, $__nar$i = 0, $__nb$i = 0, $fmt$i$i = 0, $mb$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 528|0;
 $fmt$i$i = sp + 512|0;
 $__nar$i = sp + 412|0;
 $mb$i = sp;
 $__nb$i = sp + 408|0;
 $__nar = sp + 8|0;
 HEAP8[$fmt$i$i>>0] = 37;
 $2 = (($fmt$i$i) + 1|0);
 HEAP8[$2>>0] = $__fmt;
 $3 = (($fmt$i$i) + 2|0);
 HEAP8[$3>>0] = $__mod;
 $4 = (($fmt$i$i) + 3|0);
 HEAP8[$4>>0] = 0;
 $5 = ($__mod<<24>>24)==(0);
 if (!($5)) {
  HEAP8[$2>>0] = $__mod;
  HEAP8[$3>>0] = $__fmt;
 }
 $6 = (($this) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 (_strftime_l(($__nar$i|0),100,($fmt$i$i|0),($__tm|0),($7|0))|0);
 $8 = $mb$i;
 $9 = $8;
 HEAP32[$9>>2] = 0;
 $10 = (($8) + 4)|0;
 $11 = $10;
 HEAP32[$11>>2] = 0;
 HEAP32[$__nb$i>>2] = $__nar$i;
 $12 = HEAP32[$6>>2]|0;
 $13 = (_uselocale(($12|0))|0);
 $14 = (_mbsrtowcs($__nar,$__nb$i,100,$mb$i)|0);
 $15 = ($13|0)==(0|0);
 if (!($15)) {
  __THREW__ = 0;
  (invoke_ii(463,($13|0))|0);
  $16 = __THREW__; __THREW__ = 0;
  $17 = $16&1;
  if ($17) {
   $18 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
   $19 = tempRet0;
   ___clang_call_terminate($18);
   // unreachable;
  }
 }
 $20 = ($14|0)==(-1);
 if ($20) {
  __ZNSt3__121__throw_runtime_errorEPKc(7256);
  // unreachable;
 }
 $21 = (($__nar) + ($14<<2)|0);
 $22 = HEAP32[$__s>>2]|0;
 $23 = ($14|0)==(0);
 if ($23) {
  $41 = $22;
  HEAP32[$agg$result>>2] = $41;
  STACKTOP = sp;return;
 } else {
  $$01$i$i = $__nar;$26 = $22;$38 = $22;
 }
 while(1) {
  $24 = HEAP32[$$01$i$i>>2]|0;
  $25 = ($26|0)==(0|0);
  if ($25) {
   $42 = $38;$43 = 0;
  } else {
   $27 = (($26) + 24|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = (($26) + 28|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = ($28|0)==($30|0);
   if ($31) {
    $32 = HEAP32[$26>>2]|0;
    $33 = (($32) + 52|0);
    $34 = HEAP32[$33>>2]|0;
    $35 = (FUNCTION_TABLE_iii[$34 & 511]($26,$24)|0);
    $$0$i$i$i$i = $35;
   } else {
    $36 = (($28) + 4|0);
    HEAP32[$27>>2] = $36;
    HEAP32[$28>>2] = $24;
    $$0$i$i$i$i = $24;
   }
   $37 = ($$0$i$i$i$i|0)==(-1);
   $$$i = $37 ? 0 : $38;
   $$7$i = $37 ? 0 : $26;
   $42 = $$$i;$43 = $$7$i;
  }
  $39 = (($$01$i$i) + 4|0);
  $40 = ($39|0)==($21|0);
  if ($40) {
   $41 = $42;
   break;
  } else {
   $$01$i$i = $39;$26 = $43;$38 = $42;
  }
 }
 HEAP32[$agg$result>>2] = $41;
 STACKTOP = sp;return;
}
function __ZNSt3__110moneypunctIcLb0EED0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($this|0)==(0|0);
 if (!($0)) {
  _free($this);
 }
 STACKTOP = sp;return;
}
function __ZNSt3__110moneypunctIcLb0EED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIcLb0EE16do_decimal_pointEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 127;
}
function __ZNKSt3__110moneypunctIcLb0EE16do_thousands_sepEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 127;
}
function __ZNKSt3__110moneypunctIcLb0EE11do_groupingEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIcLb0EE14do_curr_symbolEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIcLb0EE16do_positive_signEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIcLb0EE16do_negative_signEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$agg$result>>0] = 2;
 $0 = (($agg$result) + 1|0);
 HEAP8[$0>>0] = 45;
 $1 = (($agg$result) + 2|0);
 HEAP8[$1>>0] = 0;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIcLb0EE14do_frac_digitsEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function __ZNKSt3__110moneypunctIcLb0EE13do_pos_formatEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$agg$result>>0]=67109634&255;HEAP8[$agg$result+1>>0]=(67109634>>8)&255;HEAP8[$agg$result+2>>0]=(67109634>>16)&255;HEAP8[$agg$result+3>>0]=67109634>>24;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIcLb0EE13do_neg_formatEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$agg$result>>0]=67109634&255;HEAP8[$agg$result+1>>0]=(67109634>>8)&255;HEAP8[$agg$result+2>>0]=(67109634>>16)&255;HEAP8[$agg$result+3>>0]=67109634>>24;
 STACKTOP = sp;return;
}
function __ZNSt3__110moneypunctIcLb1EED0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($this|0)==(0|0);
 if (!($0)) {
  _free($this);
 }
 STACKTOP = sp;return;
}
function __ZNSt3__110moneypunctIcLb1EED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIcLb1EE16do_decimal_pointEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 127;
}
function __ZNKSt3__110moneypunctIcLb1EE16do_thousands_sepEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 127;
}
function __ZNKSt3__110moneypunctIcLb1EE11do_groupingEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIcLb1EE14do_curr_symbolEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIcLb1EE16do_positive_signEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIcLb1EE16do_negative_signEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$agg$result>>0] = 2;
 $0 = (($agg$result) + 1|0);
 HEAP8[$0>>0] = 45;
 $1 = (($agg$result) + 2|0);
 HEAP8[$1>>0] = 0;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIcLb1EE14do_frac_digitsEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function __ZNKSt3__110moneypunctIcLb1EE13do_pos_formatEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$agg$result>>0]=67109634&255;HEAP8[$agg$result+1>>0]=(67109634>>8)&255;HEAP8[$agg$result+2>>0]=(67109634>>16)&255;HEAP8[$agg$result+3>>0]=67109634>>24;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIcLb1EE13do_neg_formatEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$agg$result>>0]=67109634&255;HEAP8[$agg$result+1>>0]=(67109634>>8)&255;HEAP8[$agg$result+2>>0]=(67109634>>16)&255;HEAP8[$agg$result+3>>0]=67109634>>24;
 STACKTOP = sp;return;
}
function __ZNSt3__110moneypunctIwLb0EED0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($this|0)==(0|0);
 if (!($0)) {
  _free($this);
 }
 STACKTOP = sp;return;
}
function __ZNSt3__110moneypunctIwLb0EED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIwLb0EE16do_decimal_pointEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 2147483647;
}
function __ZNKSt3__110moneypunctIwLb0EE16do_thousands_sepEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 2147483647;
}
function __ZNKSt3__110moneypunctIwLb0EE11do_groupingEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIwLb0EE14do_curr_symbolEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIwLb0EE16do_positive_signEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIwLb0EE16do_negative_signEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $$012$i$i = 0, $$03$i$i = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$agg$result>>0] = 2;
 $0 = (($agg$result) + 4|0);
 $$012$i$i = 1;$$03$i$i = $0;
 while(1) {
  $1 = (($$012$i$i) + -1)|0;
  $2 = (($$03$i$i) + 4|0);
  HEAP32[$$03$i$i>>2] = 45;
  $3 = ($1|0)==(0);
  if ($3) {
   break;
  } else {
   $$012$i$i = $1;$$03$i$i = $2;
  }
 }
 $4 = (($0) + 4|0);
 HEAP32[$4>>2] = 0;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIwLb0EE14do_frac_digitsEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function __ZNKSt3__110moneypunctIwLb0EE13do_pos_formatEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$agg$result>>0]=67109634&255;HEAP8[$agg$result+1>>0]=(67109634>>8)&255;HEAP8[$agg$result+2>>0]=(67109634>>16)&255;HEAP8[$agg$result+3>>0]=67109634>>24;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIwLb0EE13do_neg_formatEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$agg$result>>0]=67109634&255;HEAP8[$agg$result+1>>0]=(67109634>>8)&255;HEAP8[$agg$result+2>>0]=(67109634>>16)&255;HEAP8[$agg$result+3>>0]=67109634>>24;
 STACKTOP = sp;return;
}
function __ZNSt3__110moneypunctIwLb1EED0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($this|0)==(0|0);
 if (!($0)) {
  _free($this);
 }
 STACKTOP = sp;return;
}
function __ZNSt3__110moneypunctIwLb1EED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIwLb1EE16do_decimal_pointEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 2147483647;
}
function __ZNKSt3__110moneypunctIwLb1EE16do_thousands_sepEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 2147483647;
}
function __ZNKSt3__110moneypunctIwLb1EE11do_groupingEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIwLb1EE14do_curr_symbolEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIwLb1EE16do_positive_signEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIwLb1EE16do_negative_signEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $$012$i$i = 0, $$03$i$i = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$agg$result>>0] = 2;
 $0 = (($agg$result) + 4|0);
 $$012$i$i = 1;$$03$i$i = $0;
 while(1) {
  $1 = (($$012$i$i) + -1)|0;
  $2 = (($$03$i$i) + 4|0);
  HEAP32[$$03$i$i>>2] = 45;
  $3 = ($1|0)==(0);
  if ($3) {
   break;
  } else {
   $$012$i$i = $1;$$03$i$i = $2;
  }
 }
 $4 = (($0) + 4|0);
 HEAP32[$4>>2] = 0;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIwLb1EE14do_frac_digitsEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function __ZNKSt3__110moneypunctIwLb1EE13do_pos_formatEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$agg$result>>0]=67109634&255;HEAP8[$agg$result+1>>0]=(67109634>>8)&255;HEAP8[$agg$result+2>>0]=(67109634>>16)&255;HEAP8[$agg$result+3>>0]=67109634>>24;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIwLb1EE13do_neg_formatEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$agg$result>>0]=67109634&255;HEAP8[$agg$result+1>>0]=(67109634>>8)&255;HEAP8[$agg$result+2>>0]=(67109634>>16)&255;HEAP8[$agg$result+3>>0]=67109634>>24;
 STACKTOP = sp;return;
}
function __ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($this|0)==(0|0);
 if (!($0)) {
  _free($this);
 }
 STACKTOP = sp;return;
}
function __ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe($agg$result,$this,$__b,$__e,$__intl,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__intl = $__intl|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0 = 0, $$0$lcssa$i = 0, $$01 = 0, $$01$i = 0, $$pre = 0, $$pre20 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0;
 var $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0;
 var $165 = 0, $166 = 0, $167 = 0, $168 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__atoms = 0, $__nbuf = 0, $__nc$0 = 0, $__nc$1 = 0, $__nc$2$lcssa = 0;
 var $__nc$211 = 0, $__neg = 0, $__p$i$i$i$i = 0, $__w$012 = 0, $__wb = 0, $__wbuf = 0, $__wn = 0, $eh$lpad$body$i$index25Z2D = 0, $eh$lpad$body$i$indexZ2D = 0, $eh$lpad$body$index10Z2D = 0, $eh$lpad$body$indexZ2D = 0, $eh$lpad$body6$index20Z2D = 0, $eh$lpad$body6$indexZ2D = 0, $lpad$phi$i$index = 0, $lpad$phi$i$index15 = 0, $vararg_buffer = 0, dest = 0, label = 0, sp = 0, src = 0;
 var stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0;
 $vararg_buffer = sp + 16|0;
 $__p$i$i$i$i = sp;
 $__wbuf = sp + 144|0;
 $__wb = sp + 24|0;
 $__wn = sp + 20|0;
 $__neg = sp + 142|0;
 $__atoms = sp + 132|0;
 $__nbuf = sp + 32|0;
 HEAP32[$__wb>>2] = $__wbuf;
 $0 = (($__wb) + 4|0);
 HEAP32[$0>>2] = 473;
 $1 = (($__wbuf) + 100|0);
 $2 = (($__iob) + 28|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + 4|0);
 $5 = HEAP32[$4>>2]|0;HEAP32[$4>>2] = (($5+1)|0);
 $6 = HEAP32[6416>>2]|0;
 $7 = ($6|0)==(-1);
 if ($7) {
  label = 3;
 } else {
  HEAP32[$__p$i$i$i$i>>2] = 6416;
  $8 = (($__p$i$i$i$i) + 4|0);
  HEAP32[$8>>2] = (439);
  $9 = (($__p$i$i$i$i) + 8|0);
  HEAP32[$9>>2] = 0;
  __THREW__ = 0;
  invoke_vii(440,(6416|0),($__p$i$i$i$i|0));
  $10 = __THREW__; __THREW__ = 0;
  $11 = $10&1;
  if ($11) {
   label = 14;
  } else {
   label = 3;
  }
 }
 L3: do {
  if ((label|0) == 3) {
   $12 = HEAP32[((6416 + 4|0))>>2]|0;
   $13 = (($12) + -1)|0;
   $14 = (($3) + 12|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = (($3) + 8|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = $15;
   $19 = $17;
   $20 = (($18) - ($19))|0;
   $21 = $20 >> 2;
   $22 = ($21>>>0)>($13>>>0);
   if ($22) {
    $23 = (($17) + ($13<<2)|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = ($24|0)==(0|0);
    if (!($25)) {
     HEAP8[$__neg>>0] = 0;
     $29 = HEAP32[$__e>>2]|0;
     $30 = (($__iob) + 4|0);
     $31 = HEAP32[$30>>2]|0;
     __THREW__ = 0;
     $32 = (invoke_iiiiiiiiiiii(474,($__b|0),($29|0),($__intl|0),($3|0),($31|0),($__err|0),($__neg|0),($24|0),($__wb|0),($__wn|0),($1|0))|0);
     $33 = __THREW__; __THREW__ = 0;
     $34 = $33&1;
     if ($34) {
      label = 14;
      break;
     }
     L9: do {
      if ($32) {
       $35 = HEAP32[$24>>2]|0;
       $36 = (($35) + 32|0);
       $37 = HEAP32[$36>>2]|0;
       __THREW__ = 0;
       (invoke_iiiii($37|0,($24|0),(6048|0),(((6048 + 10|0))|0),($__atoms|0))|0);
       $38 = __THREW__; __THREW__ = 0;
       $39 = $38&1;
       if ($39) {
        label = 14;
        break L3;
       }
       $40 = HEAP32[$__wn>>2]|0;
       $41 = HEAP32[$__wb>>2]|0;
       $42 = $40;
       $43 = $41;
       $44 = (($42) - ($43))|0;
       $45 = ($44|0)>(98);
       if ($45) {
        $46 = (($44) + 2)|0;
        $47 = (_malloc($46)|0);
        $48 = ($47|0)==(0|0);
        if ($48) {
         $49 = (___cxa_allocate_exception(4)|0);
         HEAP32[$49>>2] = ((15656 + 8|0));
         __THREW__ = 0;
         invoke_viii(379,($49|0),(15712|0),(374|0));
         $50 = __THREW__; __THREW__ = 0;
         $51 = $50&1;
         if ($51) {
          $168 = 0;
          label = 15;
         } else {
          // unreachable;
         }
        } else {
         $111 = $47;$__nc$0 = $47;
         label = 18;
        }
       } else {
        $111 = 0;$__nc$0 = $__nbuf;
        label = 18;
       }
       L16: do {
        if ((label|0) == 18) {
         $58 = HEAP8[$__neg>>0]|0;
         $59 = ($58<<24>>24)==(0);
         if ($59) {
          $__nc$1 = $__nc$0;
         } else {
          $60 = (($__nc$0) + 1|0);
          HEAP8[$__nc$0>>0] = 45;
          $__nc$1 = $60;
         }
         $61 = ($41>>>0)<($40>>>0);
         if ($61) {
          $62 = (($__atoms) + 10|0);
          $63 = $__atoms;
          $__nc$211 = $__nc$1;$__w$012 = $41;
          while(1) {
           $64 = HEAP8[$__w$012>>0]|0;
           $$01$i = $__atoms;
           while(1) {
            $67 = HEAP8[$$01$i>>0]|0;
            $68 = ($67<<24>>24)==($64<<24>>24);
            $66 = (($$01$i) + 1|0);
            if ($68) {
             $$0$lcssa$i = $$01$i;
             break;
            }
            $65 = ($66|0)==($62|0);
            if ($65) {
             $$0$lcssa$i = $62;
             break;
            } else {
             $$01$i = $66;
            }
           }
           $69 = $$0$lcssa$i;
           $70 = (($69) - ($63))|0;
           $71 = (6048 + ($70)|0);
           $72 = HEAP8[$71>>0]|0;
           HEAP8[$__nc$211>>0] = $72;
           $73 = (($__w$012) + 1|0);
           $74 = (($__nc$211) + 1|0);
           $75 = HEAP32[$__wn>>2]|0;
           $76 = ($73>>>0)<($75>>>0);
           if ($76) {
            $__nc$211 = $74;$__w$012 = $73;
           } else {
            $__nc$2$lcssa = $74;
            break;
           }
          }
         } else {
          $__nc$2$lcssa = $__nc$1;
         }
         HEAP8[$__nc$2$lcssa>>0] = 0;
         HEAP32[$vararg_buffer>>2] = $__v;
         $77 = (_sscanf($__nbuf,6064,$vararg_buffer)|0);
         $78 = ($77|0)==(1);
         if ($78) {
          $110 = ($111|0)==(0|0);
          if ($110) {
           break L9;
          }
          _free($111);
          break L9;
         }
         $79 = (___cxa_allocate_exception(8)|0);
         HEAP32[$79>>2] = ((3296 + 8|0));
         while(1) {
          $80 = (_malloc(28)|0);
          $81 = ($80|0)==(0|0);
          if (!($81)) {
           label = 43;
           break;
          }
          $82 = HEAP32[15648>>2]|0;HEAP32[15648>>2] = (($82+0)|0);
          $83 = ($82|0)==(0);
          if ($83) {
           label = 36;
           break;
          }
          $84 = $82;
          __THREW__ = 0;
          invoke_v($84|0);
          $85 = __THREW__; __THREW__ = 0;
          $86 = $85&1;
          if ($86) {
           label = 31;
           break;
          }
         }
         do {
          if ((label|0) == 31) {
           $87 = ___cxa_find_matching_catch(-1,-1,15712|0)|0;
           $88 = tempRet0;
           $lpad$phi$i$index = $87;$lpad$phi$i$index15 = $88;
          }
          else if ((label|0) == 36) {
           $94 = (___cxa_allocate_exception(4)|0);
           HEAP32[$94>>2] = ((15656 + 8|0));
           __THREW__ = 0;
           invoke_viii(379,($94|0),(15712|0),(374|0));
           $95 = __THREW__; __THREW__ = 0;
           $96 = $95&1;
           if ($96) {
            $89 = ___cxa_find_matching_catch(-1,-1,15712|0)|0;
            $90 = tempRet0;
            $lpad$phi$i$index = $89;$lpad$phi$i$index15 = $90;
            break;
           } else {
            // unreachable;
           }
          }
          else if ((label|0) == 43) {
           $104 = (($79) + 4|0);
           $105 = (($80) + 4|0);
           HEAP32[$105>>2] = 15;
           HEAP32[$80>>2] = 15;
           $106 = (($80) + 12|0);
           HEAP32[$104>>2] = $106;
           $107 = (($80) + 8|0);
           HEAP32[$107>>2] = 0;
           dest=$106+0|0; src=6072+0|0; stop=dest+16|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
           __THREW__ = 0;
           invoke_viii(379,($79|0),(3440|0),(71|0));
           $108 = __THREW__; __THREW__ = 0;
           $109 = $108&1;
           if ($109) {
            $168 = $111;
            label = 15;
            break L16;
           }
           // unreachable;
          }
         } while(0);
         $91 = ($lpad$phi$i$index15|0)<(0);
         do {
          if ($91) {
           __THREW__ = 0;
           invoke_vi(380,($lpad$phi$i$index|0));
           $92 = __THREW__; __THREW__ = 0;
           $93 = $92&1;
           if ($93) {
            $97 = ___cxa_find_matching_catch(-1,-1,15712|0)|0;
            $98 = tempRet0;
            $eh$lpad$body6$index20Z2D = $98;$eh$lpad$body6$indexZ2D = $97;
            break;
           } else {
            // unreachable;
           }
          } else {
           $eh$lpad$body6$index20Z2D = $lpad$phi$i$index15;$eh$lpad$body6$indexZ2D = $lpad$phi$i$index;
          }
         } while(0);
         $99 = ($eh$lpad$body6$index20Z2D|0)<(0);
         do {
          if ($99) {
           __THREW__ = 0;
           invoke_vi(380,($eh$lpad$body6$indexZ2D|0));
           $100 = __THREW__; __THREW__ = 0;
           $101 = $100&1;
           if ($101) {
            $102 = ___cxa_find_matching_catch(-1,-1)|0;
            $103 = tempRet0;
            $eh$lpad$body$i$index25Z2D = $103;$eh$lpad$body$i$indexZ2D = $102;
            break;
           } else {
            // unreachable;
           }
          } else {
           $eh$lpad$body$i$index25Z2D = $eh$lpad$body6$index20Z2D;$eh$lpad$body$i$indexZ2D = $eh$lpad$body6$indexZ2D;
          }
         } while(0);
         __ZNSt9exceptionD2Ev(($79|0));
         ___cxa_free_exception(($79|0));
         $57 = $111;$eh$lpad$body$index10Z2D = $eh$lpad$body$i$index25Z2D;$eh$lpad$body$indexZ2D = $eh$lpad$body$i$indexZ2D;
        }
       } while(0);
       if ((label|0) == 15) {
        $54 = ___cxa_find_matching_catch(-1,-1)|0;
        $55 = tempRet0;
        $57 = $168;$eh$lpad$body$index10Z2D = $55;$eh$lpad$body$indexZ2D = $54;
       }
       $56 = ($57|0)==(0|0);
       if ($56) {
        $$0 = $eh$lpad$body$indexZ2D;$$01 = $eh$lpad$body$index10Z2D;
        break L3;
       }
       _free($57);
       $$0 = $eh$lpad$body$indexZ2D;$$01 = $eh$lpad$body$index10Z2D;
       break L3;
      }
     } while(0);
     $112 = HEAP32[$__b>>2]|0;
     $113 = ($112|0)==(0|0);
     if ($113) {
      $127 = 0;
     } else {
      $114 = (($112) + 12|0);
      $115 = HEAP32[$114>>2]|0;
      $116 = (($112) + 16|0);
      $117 = HEAP32[$116>>2]|0;
      $118 = ($115|0)==($117|0);
      if ($118) {
       $119 = HEAP32[$112>>2]|0;
       $120 = (($119) + 36|0);
       $121 = HEAP32[$120>>2]|0;
       __THREW__ = 0;
       $122 = (invoke_ii($121|0,($112|0))|0);
       $123 = __THREW__; __THREW__ = 0;
       $124 = $123&1;
       if ($124) {
        label = 14;
        break;
       }
       $125 = ($122|0)==(-1);
       if ($125) {
        HEAP32[$__b>>2] = 0;
        $127 = 0;
       } else {
        $127 = $112;
       }
      } else {
       $127 = $112;
      }
     }
     $126 = ($127|0)==(0|0);
     $128 = HEAP32[$__e>>2]|0;
     $129 = ($128|0)==(0|0);
     do {
      if ($129) {
       label = 59;
      } else {
       $130 = (($128) + 12|0);
       $131 = HEAP32[$130>>2]|0;
       $132 = (($128) + 16|0);
       $133 = HEAP32[$132>>2]|0;
       $134 = ($131|0)==($133|0);
       if (!($134)) {
        if ($126) {
         break;
        } else {
         label = 61;
         break;
        }
       }
       $135 = HEAP32[$128>>2]|0;
       $136 = (($135) + 36|0);
       $137 = HEAP32[$136>>2]|0;
       __THREW__ = 0;
       $138 = (invoke_ii($137|0,($128|0))|0);
       $139 = __THREW__; __THREW__ = 0;
       $140 = $139&1;
       if ($140) {
        label = 14;
        break L3;
       }
       $141 = ($138|0)==(-1);
       if ($141) {
        HEAP32[$__e>>2] = 0;
        label = 59;
        break;
       } else {
        if ($126) {
         break;
        } else {
         label = 61;
         break;
        }
       }
      }
     } while(0);
     if ((label|0) == 59) {
      if ($126) {
       label = 61;
      }
     }
     if ((label|0) == 61) {
      $142 = HEAP32[$__err>>2]|0;
      $143 = $142 | 2;
      HEAP32[$__err>>2] = $143;
     }
     HEAP32[$agg$result>>2] = $127;
     $144 = (($3) + 4|0);
     $145 = HEAP32[$144>>2]|0;HEAP32[$144>>2] = (($145+-1)|0);
     $146 = ($145|0)==(0);
     if ($146) {
      $147 = HEAP32[$3>>2]|0;
      $148 = (($147) + 8|0);
      $149 = HEAP32[$148>>2]|0;
      FUNCTION_TABLE_vi[$149 & 511]($3);
     }
     $150 = HEAP32[$__wb>>2]|0;
     HEAP32[$__wb>>2] = 0;
     $151 = ($150|0)==(0|0);
     if ($151) {
      STACKTOP = sp;return;
     }
     $152 = HEAP32[$0>>2]|0;
     __THREW__ = 0;
     invoke_vi($152|0,($150|0));
     $153 = __THREW__; __THREW__ = 0;
     $154 = $153&1;
     if ($154) {
      $155 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
      $156 = tempRet0;
      ___clang_call_terminate($155);
      // unreachable;
     } else {
      STACKTOP = sp;return;
     }
    }
   }
   $26 = (___cxa_allocate_exception(4)|0);
   HEAP32[$26>>2] = ((14256 + 8|0));
   __THREW__ = 0;
   invoke_viii(379,($26|0),(14336|0),(351|0));
   $27 = __THREW__; __THREW__ = 0;
   $28 = $27&1;
   if ($28) {
    label = 14;
   } else {
    // unreachable;
   }
  }
 } while(0);
 if ((label|0) == 14) {
  $52 = ___cxa_find_matching_catch(-1,-1)|0;
  $53 = tempRet0;
  $$0 = $52;$$01 = $53;
 }
 $157 = (($3) + 4|0);
 $158 = HEAP32[$157>>2]|0;HEAP32[$157>>2] = (($158+-1)|0);
 $159 = ($158|0)==(0);
 if ($159) {
  $160 = HEAP32[$3>>2]|0;
  $161 = (($160) + 8|0);
  $162 = HEAP32[$161>>2]|0;
  FUNCTION_TABLE_vi[$162 & 511]($3);
 }
 $$pre = HEAP32[$__wb>>2]|0;
 HEAP32[$__wb>>2] = 0;
 $163 = ($$pre|0)==(0|0);
 if ($163) {
  ___resumeException($$0|0);
  // unreachable;
 }
 $$pre20 = HEAP32[$0>>2]|0;
 __THREW__ = 0;
 invoke_vi($$pre20|0,($$pre|0));
 $164 = __THREW__; __THREW__ = 0;
 $165 = $164&1;
 if ($165) {
  $166 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
  $167 = tempRet0;
  ___clang_call_terminate($166);
  // unreachable;
 } else {
  ___resumeException($$0|0);
  // unreachable;
 }
}
function __ZNSt3__112__do_nothingEPv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIcEERNS_10unique_ptrIcPFvPvEEERPcSM_($__b,$__e$0,$__intl,$__loc$0$0$val,$__flags,$__err,$__neg,$__ct,$__wb,$__wn,$__we) {
 $__b = $__b|0;
 $__e$0 = $__e$0|0;
 $__intl = $__intl|0;
 $__loc$0$0$val = $__loc$0$0$val|0;
 $__flags = $__flags|0;
 $__err = $__err|0;
 $__neg = $__neg|0;
 $__ct = $__ct|0;
 $__wb = $__wb|0;
 $__wn = $__wn|0;
 $__we = $__we|0;
 var $$ = 0, $$$i = 0, $$$i118 = 0, $$$i128 = 0, $$$i140 = 0, $$0 = 0, $$0$i$i = 0, $$0$i$i114 = 0, $$0$i$i151 = 0, $$0$i$i172 = 0, $$0$i$i29 = 0, $$0$i$i32 = 0, $$0$i$i45 = 0, $$0$i$i50 = 0, $$0$i$i53 = 0, $$0$i$i64 = 0, $$0$i$i67 = 0, $$0$i$i84 = 0, $$0$i$i93 = 0, $$0$i$i96 = 0;
 var $$462 = 0, $$463 = 0, $$464 = 0, $$465 = 0, $$467 = 0, $$lcssa293 = 0, $$lcssa309 = 0, $$lcssa535 = 0, $$ph$ph$ph = 0, $$ph$ph235$ph$ph$ph$ph$ph = 0, $$phi$trans$insert = 0, $$phi$trans$insert576 = 0, $$pn$i = 0, $$pn$i35 = 0, $$pr$i = 0, $$pr$i142 = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i$i = 0, $$pre$i$i$i101 = 0;
 var $$pre$i$i$i156 = 0, $$pre$i$i$i176 = 0, $$pre$i$i$i19 = 0, $$pre$i$i$i35 = 0, $$pre$i$i$i71 = 0, $$pre$i143 = 0, $$pre$i2$i$i180 = 0, $$pre$i2$i$i180427 = 0, $$pre$i2$i$i180428 = 0, $$pre$i2$i$i39 = 0, $$pre$i2$i$i39424 = 0, $$pre$i2$i$i39426 = 0, $$pre$i2$i$i75 = 0, $$pre$i2$i$i75431$ph = 0, $$pre$i2$i$i75431458 = 0, $$pre450 = 0, $$pre451 = 0, $$pre452 = 0, $$pre453 = 0, $$pre574 = 0;
 var $$pre575 = 0, $$pre577 = 0, $$sum = 0, $$sum454 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0;
 var $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0;
 var $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0;
 var $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0;
 var $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0;
 var $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0, $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0;
 var $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0, $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0;
 var $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0, $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0;
 var $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0, $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0;
 var $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0, $116 = 0, $1160 = 0, $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0;
 var $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0, $1178 = 0, $1179 = 0, $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0;
 var $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0, $1196 = 0, $1197 = 0, $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0;
 var $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0, $1213 = 0, $1214 = 0, $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0;
 var $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0, $1231 = 0, $1232 = 0, $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0;
 var $1246 = 0, $1247 = 0, $1248 = 0, $1249 = 0, $125 = 0, $1250 = 0, $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0, $1257 = 0, $1258 = 0, $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0;
 var $1264 = 0, $1265 = 0, $1266 = 0, $1267 = 0, $1268 = 0, $1269 = 0, $127 = 0, $1270 = 0, $1271 = 0, $1272 = 0, $1273 = 0, $1274 = 0, $1275 = 0, $1276 = 0, $1277 = 0, $1278 = 0, $1279 = 0, $128 = 0, $1280 = 0, $1281 = 0;
 var $1282 = 0, $1283 = 0, $1284 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0;
 var $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0;
 var $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0;
 var $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0;
 var $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0;
 var $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0;
 var $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0;
 var $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0;
 var $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0;
 var $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0;
 var $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0;
 var $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0;
 var $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0;
 var $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0;
 var $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0;
 var $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0;
 var $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0;
 var $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0;
 var $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0;
 var $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0;
 var $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0;
 var $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0;
 var $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0;
 var $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0;
 var $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0;
 var $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0;
 var $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0;
 var $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0;
 var $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0;
 var $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0;
 var $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0;
 var $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0;
 var $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0;
 var $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0;
 var $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0;
 var $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0;
 var $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0;
 var $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0;
 var $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0;
 var $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0;
 var $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0;
 var $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0;
 var $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0;
 var $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0;
 var $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0;
 var $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0;
 var $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0;
 var $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $__cap$0$i = 0, $__cap$0$i31 = 0, $__dp$0 = 0, $__e$sroa$0$0 = 0, $__e$sroa$0$10 = 0, $__e$sroa$0$12 = 0, $__e$sroa$0$13 = 0, $__e$sroa$0$15 = 0, $__e$sroa$0$16 = 0, $__e$sroa$0$17 = 0, $__e$sroa$0$18 = 0;
 var $__e$sroa$0$19 = 0, $__e$sroa$0$2 = 0, $__e$sroa$0$20 = 0, $__e$sroa$0$21 = 0, $__e$sroa$0$22 = 0, $__e$sroa$0$24 = 0, $__e$sroa$0$3 = 0, $__e$sroa$0$4 = 0, $__e$sroa$0$5 = 0, $__e$sroa$0$6 = 0, $__e$sroa$0$7 = 0, $__e$sroa$0$8 = 0, $__e$sroa$0$9 = 0, $__et = 0, $__fd$0 = 0, $__fd$1 = 0, $__fd$2 = 0, $__gbuf = 0, $__grp = 0, $__i$0 = 0;
 var $__ng$0 = 0, $__ng$1 = 0, $__nsn = 0, $__nsn$__trailing_sign$0 = 0, $__nsn$__trailing_sign$06 = 0, $__p$0$i = 0, $__p$0$i36 = 0, $__p$0$sum$pre$i = 0, $__p$0$sum$pre$i33 = 0, $__p$0$sum$pre$phi$i34ZZZ2D = 0, $__p$0$sum$pre$phi$iZZZ2D = 0, $__p$0353 = 0, $__p$i$i$i$i$i = 0, $__p$i$i$i$i8$i = 0, $__pat = 0, $__psn = 0, $__psn$__trailing_sign$0 = 0, $__psn$__trailing_sign$05 = 0, $__spaces = 0, $__sym = 0;
 var $__sz$0$i = 0, $__sz$0$i32 = 0, $__trailing_sign$0$lcssa = 0, $__trailing_sign$0355 = 0, $__trailing_sign$1 = 0, $__ts$0 = 0, $brmerge = 0, $cond = 0, $free = 0, $free200 = 0, $free201 = 0, $free202$lcssa = 0, $free202349 = 0, $free203 = 0, $free204 = 0, $free205 = 0, $free206 = 0, $free206$ph$ph$ph = 0, $free206$ph$ph234$ph$ph$ph$ph$ph = 0, $free208 = 0;
 var $isascii1$i = 0, $isascii1$i136 = 0, $isascii1$i149 = 0, $isascii1$i48 = 0, $isascii1$i62 = 0, $lpad$phi$index = 0, $lpad$phi$index24 = 0, $or$cond = 0, $or$cond14 = 0, $or$cond7 = 0, $or$cond7$not = 0, $or$cond8 = 0, $sext = 0, $sext230 = 0, $sext231 = 0, $sext232 = 0, $storemerge$i = 0, $switch = 0, $tmp$i$i182 = 0, $tmp$i$i41 = 0;
 var $tmp$i$i77 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 608|0;
 $__p$i$i$i$i8$i = sp + 16|0;
 $__p$i$i$i$i$i = sp;
 $0 = sp + 596|0;
 $1 = sp + 584|0;
 $2 = sp + 572|0;
 $3 = sp + 560|0;
 $4 = sp + 548|0;
 $5 = sp + 544|0;
 $6 = sp + 532|0;
 $7 = sp + 520|0;
 $8 = sp + 508|0;
 $9 = sp + 496|0;
 $__gbuf = sp + 96|0;
 $__pat = sp + 92|0;
 $__grp = sp + 80|0;
 $__sym = sp + 68|0;
 $__psn = sp + 56|0;
 $__nsn = sp + 44|0;
 $__spaces = sp + 32|0;
 $__et = sp + 28|0;
 HEAP32[$__pat>>2] = 0;
 ;HEAP32[$__grp+0>>2]=0|0;HEAP32[$__grp+4>>2]=0|0;HEAP32[$__grp+8>>2]=0|0;
 ;HEAP32[$__sym+0>>2]=0|0;HEAP32[$__sym+4>>2]=0|0;HEAP32[$__sym+8>>2]=0|0;
 ;HEAP32[$__psn+0>>2]=0|0;HEAP32[$__psn+4>>2]=0|0;HEAP32[$__psn+8>>2]=0|0;
 ;HEAP32[$__nsn+0>>2]=0|0;HEAP32[$__nsn+4>>2]=0|0;HEAP32[$__nsn+8>>2]=0|0;
 ;HEAP32[$__spaces+0>>2]=0|0;HEAP32[$__spaces+4>>2]=0|0;HEAP32[$__spaces+8>>2]=0|0;
 do {
  if ($__intl) {
   $10 = HEAP32[5872>>2]|0;
   $11 = ($10|0)==(-1);
   if (!($11)) {
    HEAP32[$__p$i$i$i$i$i>>2] = 5872;
    $12 = (($__p$i$i$i$i$i) + 4|0);
    HEAP32[$12>>2] = (439);
    $13 = (($__p$i$i$i$i$i) + 8|0);
    HEAP32[$13>>2] = 0;
    __THREW__ = 0;
    invoke_vii(440,(5872|0),($__p$i$i$i$i$i|0));
    $14 = __THREW__; __THREW__ = 0;
    $15 = $14&1;
    if ($15) {
     label = 94;
     break;
    }
   }
   $16 = HEAP32[((5872 + 4|0))>>2]|0;
   $17 = (($16) + -1)|0;
   $18 = (($__loc$0$0$val) + 12|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = (($__loc$0$0$val) + 8|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = $19;
   $23 = $21;
   $24 = (($22) - ($23))|0;
   $25 = $24 >> 2;
   $26 = ($25>>>0)>($17>>>0);
   if ($26) {
    $27 = (($21) + ($17<<2)|0);
    $28 = HEAP32[$27>>2]|0;
    $29 = ($28|0)==(0|0);
    if (!($29)) {
     $33 = HEAP32[$28>>2]|0;
     $34 = (($33) + 44|0);
     $35 = HEAP32[$34>>2]|0;
     __THREW__ = 0;
     invoke_vii($35|0,($0|0),($28|0));
     $36 = __THREW__; __THREW__ = 0;
     $37 = $36&1;
     if ($37) {
      label = 94;
      break;
     }
     $38 = HEAP32[$0>>2]|0;
     HEAP32[$__pat>>2] = $38;
     $39 = HEAP32[$28>>2]|0;
     $40 = (($39) + 32|0);
     $41 = HEAP32[$40>>2]|0;
     __THREW__ = 0;
     invoke_vii($41|0,($1|0),($28|0));
     $42 = __THREW__; __THREW__ = 0;
     $43 = $42&1;
     if ($43) {
      label = 94;
      break;
     }
     $44 = HEAP8[$__nsn>>0]|0;
     $45 = $44 & 1;
     $46 = ($45<<24>>24)==(0);
     if ($46) {
      $50 = (($__nsn) + 1|0);
      HEAP8[$50>>0] = 0;
      HEAP8[$__nsn>>0] = 0;
     } else {
      $47 = (($__nsn) + 8|0);
      $48 = HEAP32[$47>>2]|0;
      HEAP8[$48>>0] = 0;
      $49 = (($__nsn) + 4|0);
      HEAP32[$49>>2] = 0;
     }
     __THREW__ = 0;
     invoke_vi(475,($__nsn|0));
     $51 = __THREW__; __THREW__ = 0;
     $52 = $51&1;
     if ($52) {
      $53 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
      $54 = tempRet0;
      ___clang_call_terminate($53);
      // unreachable;
     }
     ;HEAP32[$__nsn+0>>2]=HEAP32[$1+0>>2]|0;HEAP32[$__nsn+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$__nsn+8>>2]=HEAP32[$1+8>>2]|0;
     ;HEAP32[$1+0>>2]=0|0;HEAP32[$1+4>>2]=0|0;HEAP32[$1+8>>2]=0|0;
     $55 = HEAP32[$28>>2]|0;
     $56 = (($55) + 28|0);
     $57 = HEAP32[$56>>2]|0;
     __THREW__ = 0;
     invoke_vii($57|0,($2|0),($28|0));
     $58 = __THREW__; __THREW__ = 0;
     $59 = $58&1;
     if ($59) {
      label = 94;
      break;
     }
     $60 = HEAP8[$__psn>>0]|0;
     $61 = $60 & 1;
     $62 = ($61<<24>>24)==(0);
     if ($62) {
      $66 = (($__psn) + 1|0);
      HEAP8[$66>>0] = 0;
      HEAP8[$__psn>>0] = 0;
     } else {
      $63 = (($__psn) + 8|0);
      $64 = HEAP32[$63>>2]|0;
      HEAP8[$64>>0] = 0;
      $65 = (($__psn) + 4|0);
      HEAP32[$65>>2] = 0;
     }
     __THREW__ = 0;
     invoke_vi(475,($__psn|0));
     $67 = __THREW__; __THREW__ = 0;
     $68 = $67&1;
     if ($68) {
      $69 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
      $70 = tempRet0;
      ___clang_call_terminate($69);
      // unreachable;
     }
     ;HEAP32[$__psn+0>>2]=HEAP32[$2+0>>2]|0;HEAP32[$__psn+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$__psn+8>>2]=HEAP32[$2+8>>2]|0;
     ;HEAP32[$2+0>>2]=0|0;HEAP32[$2+4>>2]=0|0;HEAP32[$2+8>>2]=0|0;
     $71 = HEAP32[$28>>2]|0;
     $72 = (($71) + 12|0);
     $73 = HEAP32[$72>>2]|0;
     __THREW__ = 0;
     $74 = (invoke_ii($73|0,($28|0))|0);
     $75 = __THREW__; __THREW__ = 0;
     $76 = $75&1;
     if ($76) {
      label = 94;
      break;
     }
     $77 = HEAP32[$28>>2]|0;
     $78 = (($77) + 16|0);
     $79 = HEAP32[$78>>2]|0;
     __THREW__ = 0;
     $80 = (invoke_ii($79|0,($28|0))|0);
     $81 = __THREW__; __THREW__ = 0;
     $82 = $81&1;
     if ($82) {
      label = 94;
      break;
     }
     $83 = HEAP32[$28>>2]|0;
     $84 = (($83) + 20|0);
     $85 = HEAP32[$84>>2]|0;
     __THREW__ = 0;
     invoke_vii($85|0,($3|0),($28|0));
     $86 = __THREW__; __THREW__ = 0;
     $87 = $86&1;
     if ($87) {
      label = 94;
      break;
     }
     $88 = HEAP8[$__grp>>0]|0;
     $89 = $88 & 1;
     $90 = ($89<<24>>24)==(0);
     if ($90) {
      $94 = (($__grp) + 1|0);
      HEAP8[$94>>0] = 0;
      HEAP8[$__grp>>0] = 0;
     } else {
      $91 = (($__grp) + 8|0);
      $92 = HEAP32[$91>>2]|0;
      HEAP8[$92>>0] = 0;
      $93 = (($__grp) + 4|0);
      HEAP32[$93>>2] = 0;
     }
     __THREW__ = 0;
     invoke_vi(475,($__grp|0));
     $95 = __THREW__; __THREW__ = 0;
     $96 = $95&1;
     if ($96) {
      $97 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
      $98 = tempRet0;
      ___clang_call_terminate($97);
      // unreachable;
     }
     ;HEAP32[$__grp+0>>2]=HEAP32[$3+0>>2]|0;HEAP32[$__grp+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$__grp+8>>2]=HEAP32[$3+8>>2]|0;
     ;HEAP32[$3+0>>2]=0|0;HEAP32[$3+4>>2]=0|0;HEAP32[$3+8>>2]=0|0;
     $99 = HEAP32[$28>>2]|0;
     $100 = (($99) + 24|0);
     $101 = HEAP32[$100>>2]|0;
     __THREW__ = 0;
     invoke_vii($101|0,($4|0),($28|0));
     $102 = __THREW__; __THREW__ = 0;
     $103 = $102&1;
     if ($103) {
      label = 94;
      break;
     }
     $104 = HEAP8[$__sym>>0]|0;
     $105 = $104 & 1;
     $106 = ($105<<24>>24)==(0);
     if ($106) {
      $110 = (($__sym) + 1|0);
      HEAP8[$110>>0] = 0;
      HEAP8[$__sym>>0] = 0;
     } else {
      $107 = (($__sym) + 8|0);
      $108 = HEAP32[$107>>2]|0;
      HEAP8[$108>>0] = 0;
      $109 = (($__sym) + 4|0);
      HEAP32[$109>>2] = 0;
     }
     __THREW__ = 0;
     invoke_vi(475,($__sym|0));
     $111 = __THREW__; __THREW__ = 0;
     $112 = $111&1;
     if ($112) {
      $113 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
      $114 = tempRet0;
      ___clang_call_terminate($113);
      // unreachable;
     } else {
      ;HEAP32[$__sym+0>>2]=HEAP32[$4+0>>2]|0;HEAP32[$__sym+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$__sym+8>>2]=HEAP32[$4+8>>2]|0;
      ;HEAP32[$4+0>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;
      $115 = HEAP32[$28>>2]|0;
      $116 = (($115) + 36|0);
      $117 = HEAP32[$116>>2]|0;
      __THREW__ = 0;
      $118 = (invoke_ii($117|0,($28|0))|0);
      $119 = __THREW__; __THREW__ = 0;
      $120 = $119&1;
      if ($120) {
       label = 94;
       break;
      } else {
       $__dp$0 = $74;$__ts$0 = $80;$storemerge$i = $118;
       label = 70;
       break;
      }
     }
    }
   }
   $30 = (___cxa_allocate_exception(4)|0);
   HEAP32[$30>>2] = ((14256 + 8|0));
   __THREW__ = 0;
   invoke_viii(379,($30|0),(14336|0),(351|0));
   $31 = __THREW__; __THREW__ = 0;
   $32 = $31&1;
   if ($32) {
    label = 94;
   } else {
    // unreachable;
   }
  } else {
   $121 = HEAP32[5808>>2]|0;
   $122 = ($121|0)==(-1);
   if (!($122)) {
    HEAP32[$__p$i$i$i$i8$i>>2] = 5808;
    $123 = (($__p$i$i$i$i8$i) + 4|0);
    HEAP32[$123>>2] = (439);
    $124 = (($__p$i$i$i$i8$i) + 8|0);
    HEAP32[$124>>2] = 0;
    __THREW__ = 0;
    invoke_vii(440,(5808|0),($__p$i$i$i$i8$i|0));
    $125 = __THREW__; __THREW__ = 0;
    $126 = $125&1;
    if ($126) {
     label = 94;
     break;
    }
   }
   $127 = HEAP32[((5808 + 4|0))>>2]|0;
   $128 = (($127) + -1)|0;
   $129 = (($__loc$0$0$val) + 12|0);
   $130 = HEAP32[$129>>2]|0;
   $131 = (($__loc$0$0$val) + 8|0);
   $132 = HEAP32[$131>>2]|0;
   $133 = $130;
   $134 = $132;
   $135 = (($133) - ($134))|0;
   $136 = $135 >> 2;
   $137 = ($136>>>0)>($128>>>0);
   if ($137) {
    $138 = (($132) + ($128<<2)|0);
    $139 = HEAP32[$138>>2]|0;
    $140 = ($139|0)==(0|0);
    if (!($140)) {
     $144 = HEAP32[$139>>2]|0;
     $145 = (($144) + 44|0);
     $146 = HEAP32[$145>>2]|0;
     __THREW__ = 0;
     invoke_vii($146|0,($5|0),($139|0));
     $147 = __THREW__; __THREW__ = 0;
     $148 = $147&1;
     if ($148) {
      label = 94;
      break;
     }
     $149 = HEAP32[$5>>2]|0;
     HEAP32[$__pat>>2] = $149;
     $150 = HEAP32[$139>>2]|0;
     $151 = (($150) + 32|0);
     $152 = HEAP32[$151>>2]|0;
     __THREW__ = 0;
     invoke_vii($152|0,($6|0),($139|0));
     $153 = __THREW__; __THREW__ = 0;
     $154 = $153&1;
     if ($154) {
      label = 94;
      break;
     }
     $155 = HEAP8[$__nsn>>0]|0;
     $156 = $155 & 1;
     $157 = ($156<<24>>24)==(0);
     if ($157) {
      $161 = (($__nsn) + 1|0);
      HEAP8[$161>>0] = 0;
      HEAP8[$__nsn>>0] = 0;
     } else {
      $158 = (($__nsn) + 8|0);
      $159 = HEAP32[$158>>2]|0;
      HEAP8[$159>>0] = 0;
      $160 = (($__nsn) + 4|0);
      HEAP32[$160>>2] = 0;
     }
     __THREW__ = 0;
     invoke_vi(475,($__nsn|0));
     $162 = __THREW__; __THREW__ = 0;
     $163 = $162&1;
     if ($163) {
      $164 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
      $165 = tempRet0;
      ___clang_call_terminate($164);
      // unreachable;
     }
     ;HEAP32[$__nsn+0>>2]=HEAP32[$6+0>>2]|0;HEAP32[$__nsn+4>>2]=HEAP32[$6+4>>2]|0;HEAP32[$__nsn+8>>2]=HEAP32[$6+8>>2]|0;
     ;HEAP32[$6+0>>2]=0|0;HEAP32[$6+4>>2]=0|0;HEAP32[$6+8>>2]=0|0;
     $166 = HEAP32[$139>>2]|0;
     $167 = (($166) + 28|0);
     $168 = HEAP32[$167>>2]|0;
     __THREW__ = 0;
     invoke_vii($168|0,($7|0),($139|0));
     $169 = __THREW__; __THREW__ = 0;
     $170 = $169&1;
     if ($170) {
      label = 94;
      break;
     }
     $171 = HEAP8[$__psn>>0]|0;
     $172 = $171 & 1;
     $173 = ($172<<24>>24)==(0);
     if ($173) {
      $177 = (($__psn) + 1|0);
      HEAP8[$177>>0] = 0;
      HEAP8[$__psn>>0] = 0;
     } else {
      $174 = (($__psn) + 8|0);
      $175 = HEAP32[$174>>2]|0;
      HEAP8[$175>>0] = 0;
      $176 = (($__psn) + 4|0);
      HEAP32[$176>>2] = 0;
     }
     __THREW__ = 0;
     invoke_vi(475,($__psn|0));
     $178 = __THREW__; __THREW__ = 0;
     $179 = $178&1;
     if ($179) {
      $180 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
      $181 = tempRet0;
      ___clang_call_terminate($180);
      // unreachable;
     }
     ;HEAP32[$__psn+0>>2]=HEAP32[$7+0>>2]|0;HEAP32[$__psn+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$__psn+8>>2]=HEAP32[$7+8>>2]|0;
     ;HEAP32[$7+0>>2]=0|0;HEAP32[$7+4>>2]=0|0;HEAP32[$7+8>>2]=0|0;
     $182 = HEAP32[$139>>2]|0;
     $183 = (($182) + 12|0);
     $184 = HEAP32[$183>>2]|0;
     __THREW__ = 0;
     $185 = (invoke_ii($184|0,($139|0))|0);
     $186 = __THREW__; __THREW__ = 0;
     $187 = $186&1;
     if ($187) {
      label = 94;
      break;
     }
     $188 = HEAP32[$139>>2]|0;
     $189 = (($188) + 16|0);
     $190 = HEAP32[$189>>2]|0;
     __THREW__ = 0;
     $191 = (invoke_ii($190|0,($139|0))|0);
     $192 = __THREW__; __THREW__ = 0;
     $193 = $192&1;
     if ($193) {
      label = 94;
      break;
     }
     $194 = HEAP32[$139>>2]|0;
     $195 = (($194) + 20|0);
     $196 = HEAP32[$195>>2]|0;
     __THREW__ = 0;
     invoke_vii($196|0,($8|0),($139|0));
     $197 = __THREW__; __THREW__ = 0;
     $198 = $197&1;
     if ($198) {
      label = 94;
      break;
     }
     $199 = HEAP8[$__grp>>0]|0;
     $200 = $199 & 1;
     $201 = ($200<<24>>24)==(0);
     if ($201) {
      $205 = (($__grp) + 1|0);
      HEAP8[$205>>0] = 0;
      HEAP8[$__grp>>0] = 0;
     } else {
      $202 = (($__grp) + 8|0);
      $203 = HEAP32[$202>>2]|0;
      HEAP8[$203>>0] = 0;
      $204 = (($__grp) + 4|0);
      HEAP32[$204>>2] = 0;
     }
     __THREW__ = 0;
     invoke_vi(475,($__grp|0));
     $206 = __THREW__; __THREW__ = 0;
     $207 = $206&1;
     if ($207) {
      $208 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
      $209 = tempRet0;
      ___clang_call_terminate($208);
      // unreachable;
     }
     ;HEAP32[$__grp+0>>2]=HEAP32[$8+0>>2]|0;HEAP32[$__grp+4>>2]=HEAP32[$8+4>>2]|0;HEAP32[$__grp+8>>2]=HEAP32[$8+8>>2]|0;
     ;HEAP32[$8+0>>2]=0|0;HEAP32[$8+4>>2]=0|0;HEAP32[$8+8>>2]=0|0;
     $210 = HEAP32[$139>>2]|0;
     $211 = (($210) + 24|0);
     $212 = HEAP32[$211>>2]|0;
     __THREW__ = 0;
     invoke_vii($212|0,($9|0),($139|0));
     $213 = __THREW__; __THREW__ = 0;
     $214 = $213&1;
     if ($214) {
      label = 94;
      break;
     }
     $215 = HEAP8[$__sym>>0]|0;
     $216 = $215 & 1;
     $217 = ($216<<24>>24)==(0);
     if ($217) {
      $221 = (($__sym) + 1|0);
      HEAP8[$221>>0] = 0;
      HEAP8[$__sym>>0] = 0;
     } else {
      $218 = (($__sym) + 8|0);
      $219 = HEAP32[$218>>2]|0;
      HEAP8[$219>>0] = 0;
      $220 = (($__sym) + 4|0);
      HEAP32[$220>>2] = 0;
     }
     __THREW__ = 0;
     invoke_vi(475,($__sym|0));
     $222 = __THREW__; __THREW__ = 0;
     $223 = $222&1;
     if ($223) {
      $224 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
      $225 = tempRet0;
      ___clang_call_terminate($224);
      // unreachable;
     } else {
      ;HEAP32[$__sym+0>>2]=HEAP32[$9+0>>2]|0;HEAP32[$__sym+4>>2]=HEAP32[$9+4>>2]|0;HEAP32[$__sym+8>>2]=HEAP32[$9+8>>2]|0;
      ;HEAP32[$9+0>>2]=0|0;HEAP32[$9+4>>2]=0|0;HEAP32[$9+8>>2]=0|0;
      $226 = HEAP32[$139>>2]|0;
      $227 = (($226) + 36|0);
      $228 = HEAP32[$227>>2]|0;
      __THREW__ = 0;
      $229 = (invoke_ii($228|0,($139|0))|0);
      $230 = __THREW__; __THREW__ = 0;
      $231 = $230&1;
      if ($231) {
       label = 94;
       break;
      } else {
       $__dp$0 = $185;$__ts$0 = $191;$storemerge$i = $229;
       label = 70;
       break;
      }
     }
    }
   }
   $141 = (___cxa_allocate_exception(4)|0);
   HEAP32[$141>>2] = ((14256 + 8|0));
   __THREW__ = 0;
   invoke_viii(379,($141|0),(14336|0),(351|0));
   $142 = __THREW__; __THREW__ = 0;
   $143 = $142&1;
   if ($143) {
    label = 94;
   } else {
    // unreachable;
   }
  }
 } while(0);
 L90: do {
  if ((label|0) == 70) {
   $232 = (($__gbuf) + 400|0);
   $233 = HEAP32[$__wb>>2]|0;
   HEAP32[$__wn>>2] = $233;
   $234 = (($__ct) + 8|0);
   $235 = (($__nsn) + 1|0);
   $236 = (($__nsn) + 4|0);
   $237 = (($__nsn) + 8|0);
   $238 = (($__psn) + 1|0);
   $239 = (($__psn) + 4|0);
   $240 = (($__psn) + 8|0);
   $241 = $__flags & 512;
   $242 = ($241|0)!=(0);
   $243 = (($__sym) + 1|0);
   $244 = (($__sym) + 8|0);
   $245 = (($__sym) + 4|0);
   $246 = (($__spaces) + 1|0);
   $247 = (($__spaces) + 8|0);
   $248 = (($__spaces) + 4|0);
   $249 = (($__pat) + 3|0);
   $250 = (($__wb) + 4|0);
   $251 = (($__grp) + 4|0);
   $1259 = $232;$1260 = $__gbuf;$1261 = $__gbuf;$1262 = $__we;$__e$sroa$0$0 = $__e$0;$__fd$0 = $storemerge$i;$__p$0353 = 0;$__trailing_sign$0355 = 0;$free202349 = 473;
   L93: while(1) {
    $252 = HEAP32[$__b>>2]|0;
    $253 = ($252|0)==(0|0);
    do {
     if ($253) {
      $267 = 0;
     } else {
      $254 = (($252) + 12|0);
      $255 = HEAP32[$254>>2]|0;
      $256 = (($252) + 16|0);
      $257 = HEAP32[$256>>2]|0;
      $258 = ($255|0)==($257|0);
      if ($258) {
       $259 = HEAP32[$252>>2]|0;
       $260 = (($259) + 36|0);
       $261 = HEAP32[$260>>2]|0;
       __THREW__ = 0;
       $262 = (invoke_ii($261|0,($252|0))|0);
       $263 = __THREW__; __THREW__ = 0;
       $264 = $263&1;
       if ($264) {
        $$ph$ph235$ph$ph$ph$ph$ph = $1261;$free206$ph$ph234$ph$ph$ph$ph$ph = $free202349;
        label = 92;
        break L93;
       }
       $265 = ($262|0)==(-1);
       if ($265) {
        HEAP32[$__b>>2] = 0;
        $267 = 0;
        break;
       } else {
        $$pre$i$i$i19 = HEAP32[$__b>>2]|0;
        $267 = $$pre$i$i$i19;
        break;
       }
      } else {
       $267 = $252;
      }
     }
    } while(0);
    $266 = ($267|0)==(0|0);
    $268 = ($__e$sroa$0$0|0)==(0|0);
    do {
     if ($268) {
      label = 82;
     } else {
      $269 = (($__e$sroa$0$0) + 12|0);
      $270 = HEAP32[$269>>2]|0;
      $271 = (($__e$sroa$0$0) + 16|0);
      $272 = HEAP32[$271>>2]|0;
      $273 = ($270|0)==($272|0);
      if (!($273)) {
       if ($266) {
        $__e$sroa$0$2 = $__e$sroa$0$0;
        break;
       } else {
        $$lcssa293 = $1261;$$lcssa309 = $1260;$__e$sroa$0$21 = $__e$sroa$0$0;$__trailing_sign$0$lcssa = $__trailing_sign$0355;$free202$lcssa = $free202349;
        label = 402;
        break L93;
       }
      }
      $274 = HEAP32[$__e$sroa$0$0>>2]|0;
      $275 = (($274) + 36|0);
      $276 = HEAP32[$275>>2]|0;
      __THREW__ = 0;
      $277 = (invoke_ii($276|0,($__e$sroa$0$0|0))|0);
      $278 = __THREW__; __THREW__ = 0;
      $279 = $278&1;
      if ($279) {
       $$ph$ph235$ph$ph$ph$ph$ph = $1261;$free206$ph$ph234$ph$ph$ph$ph$ph = $free202349;
       label = 92;
       break L93;
      }
      $280 = ($277|0)==(-1);
      if ($280) {
       label = 82;
      } else {
       if ($266) {
        $__e$sroa$0$2 = $__e$sroa$0$0;
       } else {
        $$lcssa293 = $1261;$$lcssa309 = $1260;$__e$sroa$0$21 = $__e$sroa$0$0;$__trailing_sign$0$lcssa = $__trailing_sign$0355;$free202$lcssa = $free202349;
        label = 402;
        break L93;
       }
      }
     }
    } while(0);
    if ((label|0) == 82) {
     label = 0;
     if ($266) {
      $$lcssa293 = $1261;$$lcssa309 = $1260;$__e$sroa$0$21 = 0;$__trailing_sign$0$lcssa = $__trailing_sign$0355;$free202$lcssa = $free202349;
      label = 402;
      break;
     } else {
      $__e$sroa$0$2 = 0;
     }
    }
    $281 = (($__pat) + ($__p$0353)|0);
    $282 = HEAP8[$281>>0]|0;
    $283 = $282 << 24 >> 24;
    L113: do {
     switch ($283|0) {
     case 1:  {
      $cond = ($__p$0353|0)==(3);
      if ($cond) {
       $$lcssa293 = $1261;$$lcssa309 = $1260;$__e$sroa$0$21 = $__e$sroa$0$2;$__trailing_sign$0$lcssa = $__trailing_sign$0355;$free202$lcssa = $free202349;
       label = 402;
       break L93;
      }
      $340 = HEAP32[$__b>>2]|0;
      $341 = (($340) + 12|0);
      $342 = HEAP32[$341>>2]|0;
      $343 = (($340) + 16|0);
      $344 = HEAP32[$343>>2]|0;
      $345 = ($342|0)==($344|0);
      if ($345) {
       $346 = HEAP32[$340>>2]|0;
       $347 = (($346) + 36|0);
       $348 = HEAP32[$347>>2]|0;
       __THREW__ = 0;
       $349 = (invoke_ii($348|0,($340|0))|0);
       $350 = __THREW__; __THREW__ = 0;
       $351 = $350&1;
       if ($351) {
        $$ph$ph235$ph$ph$ph$ph$ph = $1261;$free206$ph$ph234$ph$ph$ph$ph$ph = $free202349;
        label = 92;
        break L93;
       } else {
        $$0$i$i29 = $349;
       }
      } else {
       $352 = HEAP8[$342>>0]|0;
       $353 = $352&255;
       $$0$i$i29 = $353;
      }
      $354 = $$0$i$i29&255;
      $isascii1$i = ($354<<24>>24)>(-1);
      if (!($isascii1$i)) {
       label = 133;
       break L93;
      }
      $sext232 = $$0$i$i29 << 24;
      $355 = $sext232 >> 24;
      $356 = HEAP32[$234>>2]|0;
      $357 = (($356) + ($355<<1)|0);
      $358 = HEAP16[$357>>1]|0;
      $359 = $358 & 8192;
      $360 = ($359<<16>>16)==(0);
      if ($360) {
       label = 133;
       break L93;
      }
      $361 = HEAP32[$__b>>2]|0;
      $362 = (($361) + 12|0);
      $363 = HEAP32[$362>>2]|0;
      $364 = (($361) + 16|0);
      $365 = HEAP32[$364>>2]|0;
      $366 = ($363|0)==($365|0);
      if ($366) {
       $367 = HEAP32[$361>>2]|0;
       $368 = (($367) + 40|0);
       $369 = HEAP32[$368>>2]|0;
       __THREW__ = 0;
       $370 = (invoke_ii($369|0,($361|0))|0);
       $371 = __THREW__; __THREW__ = 0;
       $372 = $371&1;
       if ($372) {
        $$ph$ph235$ph$ph$ph$ph$ph = $1261;$free206$ph$ph234$ph$ph$ph$ph$ph = $free202349;
        label = 92;
        break L93;
       } else {
        $$0$i$i32 = $370;
       }
      } else {
       $373 = (($363) + 1|0);
       HEAP32[$362>>2] = $373;
       $374 = HEAP8[$363>>0]|0;
       $375 = $374&255;
       $$0$i$i32 = $375;
      }
      $376 = $$0$i$i32&255;
      $377 = HEAP8[$__spaces>>0]|0;
      $378 = $377 & 1;
      $379 = ($378<<24>>24)!=(0);
      if ($379) {
       $382 = HEAP32[$__spaces>>2]|0;
       $383 = $382 & -2;
       $384 = (($383) + -1)|0;
       $385 = HEAP32[$248>>2]|0;
       $__cap$0$i = $384;$__sz$0$i = $385;
      } else {
       $380 = $377&255;
       $381 = $380 >>> 1;
       $__cap$0$i = 10;$__sz$0$i = $381;
      }
      $386 = ($__sz$0$i|0)==($__cap$0$i|0);
      if ($386) {
       __THREW__ = 0;
       invoke_viiiiii(476,($__spaces|0),($__cap$0$i|0),1,($__cap$0$i|0),($__cap$0$i|0),0);
       $387 = __THREW__; __THREW__ = 0;
       $388 = $387&1;
       if ($388) {
        $$ph$ph235$ph$ph$ph$ph$ph = $1261;$free206$ph$ph234$ph$ph$ph$ph$ph = $free202349;
        label = 92;
        break L93;
       }
       $389 = HEAP8[$__spaces>>0]|0;
       $390 = $389 & 1;
       $391 = ($390<<24>>24)==(0);
       if ($391) {
        label = 130;
       } else {
        label = 131;
       }
      } else {
       if ($379) {
        label = 131;
       } else {
        label = 130;
       }
      }
      if ((label|0) == 130) {
       label = 0;
       $392 = $__sz$0$i << 1;
       $393 = (($392) + 2)|0;
       $394 = $393&255;
       HEAP8[$__spaces>>0] = $394;
       $__p$0$sum$pre$i = (($__sz$0$i) + 1)|0;
       $$pn$i = $246;$__p$0$sum$pre$phi$iZZZ2D = $__p$0$sum$pre$i;
      }
      else if ((label|0) == 131) {
       label = 0;
       $395 = HEAP32[$247>>2]|0;
       $396 = (($__sz$0$i) + 1)|0;
       HEAP32[$248>>2] = $396;
       $$pn$i = $395;$__p$0$sum$pre$phi$iZZZ2D = $396;
      }
      $__p$0$i = (($$pn$i) + ($__sz$0$i)|0);
      HEAP8[$__p$0$i>>0] = $376;
      $397 = (($$pn$i) + ($__p$0$sum$pre$phi$iZZZ2D)|0);
      HEAP8[$397>>0] = 0;
      label = 134;
      break;
     }
     case 0:  {
      label = 134;
      break;
     }
     case 3:  {
      $490 = HEAP8[$__psn>>0]|0;
      $491 = $490 & 1;
      $492 = ($491<<24>>24)==(0);
      if ($492) {
       $494 = $490&255;
       $495 = $494 >>> 1;
       $505 = $495;
      } else {
       $493 = HEAP32[$239>>2]|0;
       $505 = $493;
      }
      $496 = HEAP8[$__nsn>>0]|0;
      $497 = $496 & 1;
      $498 = ($497<<24>>24)==(0);
      if ($498) {
       $500 = $496&255;
       $501 = $500 >>> 1;
       $503 = $501;
      } else {
       $499 = HEAP32[$236>>2]|0;
       $503 = $499;
      }
      $502 = (0 - ($503))|0;
      $504 = ($505|0)==($502|0);
      if ($504) {
       $1263 = $1262;$1264 = $1261;$1265 = $1260;$1266 = $1259;$__e$sroa$0$20 = $__e$sroa$0$2;$__fd$2 = $__fd$0;$__trailing_sign$1 = $__trailing_sign$0355;$free203 = $free202349;
      } else {
       if ($492) {
        $507 = $490&255;
        $508 = $507 >>> 1;
        $510 = $508;
       } else {
        $506 = HEAP32[$239>>2]|0;
        $510 = $506;
       }
       $509 = ($510|0)==(0);
       if (!($509)) {
        if ($498) {
         $512 = $496&255;
         $513 = $512 >>> 1;
         $515 = $513;
        } else {
         $511 = HEAP32[$236>>2]|0;
         $515 = $511;
        }
        $514 = ($515|0)==(0);
        if (!($514)) {
         $597 = HEAP32[$__b>>2]|0;
         $598 = (($597) + 12|0);
         $599 = HEAP32[$598>>2]|0;
         $600 = (($597) + 16|0);
         $601 = HEAP32[$600>>2]|0;
         $602 = ($599|0)==($601|0);
         if ($602) {
          $603 = HEAP32[$597>>2]|0;
          $604 = (($603) + 36|0);
          $605 = HEAP32[$604>>2]|0;
          __THREW__ = 0;
          $606 = (invoke_ii($605|0,($597|0))|0);
          $607 = __THREW__; __THREW__ = 0;
          $608 = $607&1;
          if ($608) {
           $$ph$ph235$ph$ph$ph$ph$ph = $1261;$free206$ph$ph234$ph$ph$ph$ph$ph = $free202349;
           label = 92;
           break L93;
          }
          $$pre452 = HEAP8[$__psn>>0]|0;
          $$pre574 = HEAP32[$__b>>2]|0;
          $$phi$trans$insert = (($$pre574) + 12|0);
          $$pre575 = HEAP32[$$phi$trans$insert>>2]|0;
          $$phi$trans$insert576 = (($$pre574) + 16|0);
          $$pre577 = HEAP32[$$phi$trans$insert576>>2]|0;
          $$0$i$i96 = $606;$613 = $$pre452;$619 = $$pre574;$621 = $$pre575;$622 = $$pre577;
         } else {
          $609 = HEAP8[$599>>0]|0;
          $610 = $609&255;
          $$0$i$i96 = $610;$613 = $490;$619 = $597;$621 = $599;$622 = $601;
         }
         $611 = $$0$i$i96&255;
         $612 = $613 & 1;
         $614 = ($612<<24>>24)==(0);
         $615 = HEAP32[$240>>2]|0;
         $$463 = $614 ? $238 : $615;
         $616 = HEAP8[$$463>>0]|0;
         $617 = ($611<<24>>24)==($616<<24>>24);
         $618 = (($619) + 12|0);
         $620 = ($621|0)==($622|0);
         if ($617) {
          if ($620) {
           $623 = HEAP32[$619>>2]|0;
           $624 = (($623) + 40|0);
           $625 = HEAP32[$624>>2]|0;
           __THREW__ = 0;
           (invoke_ii($625|0,($619|0))|0);
           $626 = __THREW__; __THREW__ = 0;
           $627 = $626&1;
           if ($627) {
            $$ph$ph235$ph$ph$ph$ph$ph = $1261;$free206$ph$ph234$ph$ph$ph$ph$ph = $free202349;
            label = 92;
            break L93;
           }
          } else {
           $628 = (($621) + 1|0);
           HEAP32[$618>>2] = $628;
          }
          $629 = HEAP8[$__psn>>0]|0;
          $630 = $629 & 1;
          $631 = ($630<<24>>24)==(0);
          if ($631) {
           $633 = $629&255;
           $634 = $633 >>> 1;
           $636 = $634;
          } else {
           $632 = HEAP32[$239>>2]|0;
           $636 = $632;
          }
          $635 = ($636>>>0)>(1);
          $__psn$__trailing_sign$05 = $635 ? $__psn : $__trailing_sign$0355;
          $1263 = $1262;$1264 = $1261;$1265 = $1260;$1266 = $1259;$__e$sroa$0$20 = $__e$sroa$0$2;$__fd$2 = $__fd$0;$__trailing_sign$1 = $__psn$__trailing_sign$05;$free203 = $free202349;
          break L113;
         }
         if ($620) {
          $637 = HEAP32[$619>>2]|0;
          $638 = (($637) + 36|0);
          $639 = HEAP32[$638>>2]|0;
          __THREW__ = 0;
          $640 = (invoke_ii($639|0,($619|0))|0);
          $641 = __THREW__; __THREW__ = 0;
          $642 = $641&1;
          if ($642) {
           $$ph$ph235$ph$ph$ph$ph$ph = $1261;$free206$ph$ph234$ph$ph$ph$ph$ph = $free202349;
           label = 92;
           break L93;
          } else {
           $$0$i$i114 = $640;
          }
         } else {
          $643 = HEAP8[$621>>0]|0;
          $644 = $643&255;
          $$0$i$i114 = $644;
         }
         $645 = $$0$i$i114&255;
         $646 = HEAP8[$__nsn>>0]|0;
         $647 = $646 & 1;
         $648 = ($647<<24>>24)==(0);
         $649 = HEAP32[$237>>2]|0;
         $$464 = $648 ? $235 : $649;
         $650 = HEAP8[$$464>>0]|0;
         $651 = ($645<<24>>24)==($650<<24>>24);
         if (!($651)) {
          label = 233;
          break L93;
         }
         $652 = HEAP32[$__b>>2]|0;
         $653 = (($652) + 12|0);
         $654 = HEAP32[$653>>2]|0;
         $655 = (($652) + 16|0);
         $656 = HEAP32[$655>>2]|0;
         $657 = ($654|0)==($656|0);
         if ($657) {
          $658 = HEAP32[$652>>2]|0;
          $659 = (($658) + 40|0);
          $660 = HEAP32[$659>>2]|0;
          __THREW__ = 0;
          (invoke_ii($660|0,($652|0))|0);
          $661 = __THREW__; __THREW__ = 0;
          $662 = $661&1;
          if ($662) {
           $$ph$ph235$ph$ph$ph$ph$ph = $1261;$free206$ph$ph234$ph$ph$ph$ph$ph = $free202349;
           label = 92;
           break L93;
          }
         } else {
          $663 = (($654) + 1|0);
          HEAP32[$653>>2] = $663;
         }
         HEAP8[$__neg>>0] = 1;
         $664 = HEAP8[$__nsn>>0]|0;
         $665 = $664 & 1;
         $666 = ($665<<24>>24)==(0);
         if ($666) {
          $668 = $664&255;
          $669 = $668 >>> 1;
          $671 = $669;
         } else {
          $667 = HEAP32[$236>>2]|0;
          $671 = $667;
         }
         $670 = ($671>>>0)>(1);
         $__nsn$__trailing_sign$06 = $670 ? $__nsn : $__trailing_sign$0355;
         $1263 = $1262;$1264 = $1261;$1265 = $1260;$1266 = $1259;$__e$sroa$0$20 = $__e$sroa$0$2;$__fd$2 = $__fd$0;$__trailing_sign$1 = $__nsn$__trailing_sign$06;$free203 = $free202349;
         break L113;
        }
       }
       if ($492) {
        $517 = $490&255;
        $518 = $517 >>> 1;
        $520 = $518;
       } else {
        $516 = HEAP32[$239>>2]|0;
        $520 = $516;
       }
       $519 = ($520|0)==(0);
       $521 = HEAP32[$__b>>2]|0;
       $522 = (($521) + 12|0);
       $523 = HEAP32[$522>>2]|0;
       $524 = (($521) + 16|0);
       $525 = HEAP32[$524>>2]|0;
       $526 = ($523|0)==($525|0);
       if ($519) {
        if ($526) {
         $562 = HEAP32[$521>>2]|0;
         $563 = (($562) + 36|0);
         $564 = HEAP32[$563>>2]|0;
         __THREW__ = 0;
         $565 = (invoke_ii($564|0,($521|0))|0);
         $566 = __THREW__; __THREW__ = 0;
         $567 = $566&1;
         if ($567) {
          $$ph$ph235$ph$ph$ph$ph$ph = $1261;$free206$ph$ph234$ph$ph$ph$ph$ph = $free202349;
          label = 92;
          break L93;
         }
         $$pre450 = HEAP8[$__nsn>>0]|0;
         $$0$i$i84 = $565;$572 = $$pre450;
        } else {
         $568 = HEAP8[$523>>0]|0;
         $569 = $568&255;
         $$0$i$i84 = $569;$572 = $496;
        }
        $570 = $$0$i$i84&255;
        $571 = $572 & 1;
        $573 = ($571<<24>>24)==(0);
        $574 = HEAP32[$237>>2]|0;
        $$462 = $573 ? $235 : $574;
        $575 = HEAP8[$$462>>0]|0;
        $576 = ($570<<24>>24)==($575<<24>>24);
        if (!($576)) {
         $1263 = $1262;$1264 = $1261;$1265 = $1260;$1266 = $1259;$__e$sroa$0$20 = $__e$sroa$0$2;$__fd$2 = $__fd$0;$__trailing_sign$1 = $__trailing_sign$0355;$free203 = $free202349;
         break L113;
        }
        $577 = HEAP32[$__b>>2]|0;
        $578 = (($577) + 12|0);
        $579 = HEAP32[$578>>2]|0;
        $580 = (($577) + 16|0);
        $581 = HEAP32[$580>>2]|0;
        $582 = ($579|0)==($581|0);
        if ($582) {
         $583 = HEAP32[$577>>2]|0;
         $584 = (($583) + 40|0);
         $585 = HEAP32[$584>>2]|0;
         __THREW__ = 0;
         (invoke_ii($585|0,($577|0))|0);
         $586 = __THREW__; __THREW__ = 0;
         $587 = $586&1;
         if ($587) {
          $$ph$ph235$ph$ph$ph$ph$ph = $1261;$free206$ph$ph234$ph$ph$ph$ph$ph = $free202349;
          label = 92;
          break L93;
         }
        } else {
         $588 = (($579) + 1|0);
         HEAP32[$578>>2] = $588;
        }
        HEAP8[$__neg>>0] = 1;
        $589 = HEAP8[$__nsn>>0]|0;
        $590 = $589 & 1;
        $591 = ($590<<24>>24)==(0);
        if ($591) {
         $593 = $589&255;
         $594 = $593 >>> 1;
         $596 = $594;
        } else {
         $592 = HEAP32[$236>>2]|0;
         $596 = $592;
        }
        $595 = ($596>>>0)>(1);
        $__nsn$__trailing_sign$0 = $595 ? $__nsn : $__trailing_sign$0355;
        $1263 = $1262;$1264 = $1261;$1265 = $1260;$1266 = $1259;$__e$sroa$0$20 = $__e$sroa$0$2;$__fd$2 = $__fd$0;$__trailing_sign$1 = $__nsn$__trailing_sign$0;$free203 = $free202349;
        break L113;
       }
       if ($526) {
        $527 = HEAP32[$521>>2]|0;
        $528 = (($527) + 36|0);
        $529 = HEAP32[$528>>2]|0;
        __THREW__ = 0;
        $530 = (invoke_ii($529|0,($521|0))|0);
        $531 = __THREW__; __THREW__ = 0;
        $532 = $531&1;
        if ($532) {
         $$ph$ph235$ph$ph$ph$ph$ph = $1261;$free206$ph$ph234$ph$ph$ph$ph$ph = $free202349;
         label = 92;
         break L93;
        }
        $$pre451 = HEAP8[$__psn>>0]|0;
        $$0$i$i67 = $530;$537 = $$pre451;
       } else {
        $533 = HEAP8[$523>>0]|0;
        $534 = $533&255;
        $$0$i$i67 = $534;$537 = $490;
       }
       $535 = $$0$i$i67&255;
       $536 = $537 & 1;
       $538 = ($536<<24>>24)==(0);
       $539 = HEAP32[$240>>2]|0;
       $$ = $538 ? $238 : $539;
       $540 = HEAP8[$$>>0]|0;
       $541 = ($535<<24>>24)==($540<<24>>24);
       if (!($541)) {
        HEAP8[$__neg>>0] = 1;
        $1263 = $1262;$1264 = $1261;$1265 = $1260;$1266 = $1259;$__e$sroa$0$20 = $__e$sroa$0$2;$__fd$2 = $__fd$0;$__trailing_sign$1 = $__trailing_sign$0355;$free203 = $free202349;
        break L113;
       }
       $542 = HEAP32[$__b>>2]|0;
       $543 = (($542) + 12|0);
       $544 = HEAP32[$543>>2]|0;
       $545 = (($542) + 16|0);
       $546 = HEAP32[$545>>2]|0;
       $547 = ($544|0)==($546|0);
       if ($547) {
        $548 = HEAP32[$542>>2]|0;
        $549 = (($548) + 40|0);
        $550 = HEAP32[$549>>2]|0;
        __THREW__ = 0;
        (invoke_ii($550|0,($542|0))|0);
        $551 = __THREW__; __THREW__ = 0;
        $552 = $551&1;
        if ($552) {
         $$ph$ph235$ph$ph$ph$ph$ph = $1261;$free206$ph$ph234$ph$ph$ph$ph$ph = $free202349;
         label = 92;
         break L93;
        }
       } else {
        $553 = (($544) + 1|0);
        HEAP32[$543>>2] = $553;
       }
       $554 = HEAP8[$__psn>>0]|0;
       $555 = $554 & 1;
       $556 = ($555<<24>>24)==(0);
       if ($556) {
        $558 = $554&255;
        $559 = $558 >>> 1;
        $561 = $559;
       } else {
        $557 = HEAP32[$239>>2]|0;
        $561 = $557;
       }
       $560 = ($561>>>0)>(1);
       $__psn$__trailing_sign$0 = $560 ? $__psn : $__trailing_sign$0355;
       $1263 = $1262;$1264 = $1261;$1265 = $1260;$1266 = $1259;$__e$sroa$0$20 = $__e$sroa$0$2;$__fd$2 = $__fd$0;$__trailing_sign$1 = $__psn$__trailing_sign$0;$free203 = $free202349;
      }
      break;
     }
     case 2:  {
      $674 = ($__trailing_sign$0355|0)!=(0|0);
      $675 = ($__p$0353>>>0)<(2);
      $or$cond = $674 | $675;
      if (!($or$cond)) {
       $676 = ($__p$0353|0)==(2);
       if ($676) {
        $677 = HEAP8[$249>>0]|0;
        $678 = ($677<<24>>24)!=(0);
        $679 = $678;
       } else {
        $679 = 0;
       }
       $brmerge = $242 | $679;
       if (!($brmerge)) {
        $1263 = $1262;$1264 = $1261;$1265 = $1260;$1266 = $1259;$__e$sroa$0$20 = $__e$sroa$0$2;$__fd$2 = $__fd$0;$__trailing_sign$1 = 0;$free203 = $free202349;
        break L113;
       }
      }
      $680 = HEAP8[$__sym>>0]|0;
      $681 = $680 & 1;
      $682 = ($681<<24>>24)==(0);
      $683 = HEAP32[$244>>2]|0;
      $$465 = $682 ? $243 : $683;
      $684 = ($__p$0353|0)==(0);
      L233: do {
       if ($684) {
        $$pre$i2$i$i180 = $__e$sroa$0$2;$733 = $680;$743 = $$465;$761 = $__e$sroa$0$2;$__e$sroa$0$6 = $__e$sroa$0$2;
       } else {
        $685 = (($__p$0353) + -1)|0;
        $686 = (($__pat) + ($685)|0);
        $687 = HEAP8[$686>>0]|0;
        $switch = ($687&255)<(2);
        if ($switch) {
         $688 = $680&255;
         $689 = $688 >>> 1;
         $690 = HEAP32[$245>>2]|0;
         $$467 = $682 ? $689 : $690;
         $691 = (($$465) + ($$467)|0);
         $693 = $$465;
         while(1) {
          $692 = ($693|0)==($691|0);
          if ($692) {
           $$lcssa535 = $691;
           break;
          }
          $694 = HEAP8[$693>>0]|0;
          $isascii1$i136 = ($694<<24>>24)>(-1);
          if (!($isascii1$i136)) {
           $$lcssa535 = $693;
           break;
          }
          $695 = $694 << 24 >> 24;
          $696 = HEAP32[$234>>2]|0;
          $697 = (($696) + ($695<<1)|0);
          $698 = HEAP16[$697>>1]|0;
          $699 = $698 & 8192;
          $700 = ($699<<16>>16)==(0);
          $701 = (($693) + 1|0);
          if ($700) {
           $$lcssa535 = $693;
           break;
          } else {
           $693 = $701;
          }
         }
         $702 = $$lcssa535;
         $703 = $$465;
         $704 = (($702) - ($703))|0;
         $705 = HEAP8[$__spaces>>0]|0;
         $706 = $705 & 1;
         $707 = ($706<<24>>24)==(0);
         if ($707) {
          $709 = $705&255;
          $710 = $709 >>> 1;
          $712 = $710;
         } else {
          $708 = HEAP32[$248>>2]|0;
          $712 = $708;
         }
         $711 = ($704>>>0)>($712>>>0);
         if ($711) {
          $$pre$i2$i$i180 = $__e$sroa$0$2;$733 = $680;$743 = $$465;$761 = $__e$sroa$0$2;$__e$sroa$0$6 = $__e$sroa$0$2;
         } else {
          if ($707) {
           $716 = $705&255;
           $717 = $716 >>> 1;
           $$sum454 = (($717) - ($704))|0;
           $718 = ((($__spaces) + ($$sum454)|0) + 1|0);
           $720 = $246;$721 = $717;$723 = $718;
          } else {
           $713 = HEAP32[$247>>2]|0;
           $714 = HEAP32[$248>>2]|0;
           $$sum = (($714) - ($704))|0;
           $715 = (($713) + ($$sum)|0);
           $720 = $713;$721 = $714;$723 = $715;
          }
          $719 = (($720) + ($721)|0);
          $722 = ($723|0)==($719|0);
          if ($722) {
           $$pre$i2$i$i180 = $__e$sroa$0$2;$733 = $680;$743 = $$lcssa535;$761 = $__e$sroa$0$2;$__e$sroa$0$6 = $__e$sroa$0$2;
          } else {
           $725 = $723;$727 = $$465;
           while(1) {
            $724 = HEAP8[$725>>0]|0;
            $726 = HEAP8[$727>>0]|0;
            $728 = ($724<<24>>24)==($726<<24>>24);
            if (!($728)) {
             $$pre$i2$i$i180 = $__e$sroa$0$2;$733 = $680;$743 = $$465;$761 = $__e$sroa$0$2;$__e$sroa$0$6 = $__e$sroa$0$2;
             break L233;
            }
            $729 = (($725) + 1|0);
            $730 = (($727) + 1|0);
            $731 = ($729|0)==($719|0);
            if ($731) {
             $$pre$i2$i$i180 = $__e$sroa$0$2;$733 = $680;$743 = $$lcssa535;$761 = $__e$sroa$0$2;$__e$sroa$0$6 = $__e$sroa$0$2;
             break;
            } else {
             $725 = $729;$727 = $730;
            }
           }
          }
         }
        } else {
         $$pre$i2$i$i180 = $__e$sroa$0$2;$733 = $680;$743 = $$465;$761 = $__e$sroa$0$2;$__e$sroa$0$6 = $__e$sroa$0$2;
        }
       }
      } while(0);
      L253: while(1) {
       $732 = $733 & 1;
       $734 = ($732<<24>>24)==(0);
       if ($734) {
        $737 = $733&255;
        $738 = $737 >>> 1;
        $740 = $243;$741 = $738;
       } else {
        $735 = HEAP32[$244>>2]|0;
        $736 = HEAP32[$245>>2]|0;
        $740 = $735;$741 = $736;
       }
       $739 = (($740) + ($741)|0);
       $742 = ($743|0)==($739|0);
       if ($742) {
        $__e$sroa$0$9 = $__e$sroa$0$6;
        break;
       }
       $744 = HEAP32[$__b>>2]|0;
       $745 = ($744|0)==(0|0);
       do {
        if ($745) {
         $759 = 0;
        } else {
         $746 = (($744) + 12|0);
         $747 = HEAP32[$746>>2]|0;
         $748 = (($744) + 16|0);
         $749 = HEAP32[$748>>2]|0;
         $750 = ($747|0)==($749|0);
         if ($750) {
          $751 = HEAP32[$744>>2]|0;
          $752 = (($751) + 36|0);
          $753 = HEAP32[$752>>2]|0;
          __THREW__ = 0;
          $754 = (invoke_ii($753|0,($744|0))|0);
          $755 = __THREW__; __THREW__ = 0;
          $756 = $755&1;
          if ($756) {
           label = 90;
           break L93;
          }
          $757 = ($754|0)==(-1);
          if ($757) {
           HEAP32[$__b>>2] = 0;
           $759 = 0;
           break;
          } else {
           $$pre$i$i$i176 = HEAP32[$__b>>2]|0;
           $759 = $$pre$i$i$i176;
           break;
          }
         } else {
          $759 = $744;
         }
        }
       } while(0);
       $758 = ($759|0)==(0|0);
       $760 = ($761|0)==(0|0);
       do {
        if ($760) {
         $$pre$i2$i$i180428 = $$pre$i2$i$i180;$__e$sroa$0$7 = $__e$sroa$0$6;
         label = 269;
        } else {
         $762 = (($761) + 12|0);
         $763 = HEAP32[$762>>2]|0;
         $764 = (($761) + 16|0);
         $765 = HEAP32[$764>>2]|0;
         $766 = ($763|0)==($765|0);
         if (!($766)) {
          if ($758) {
           $$pre$i2$i$i180427 = $$pre$i2$i$i180;$1269 = $761;$__e$sroa$0$8 = $__e$sroa$0$6;
           break;
          } else {
           $__e$sroa$0$9 = $__e$sroa$0$6;
           break L253;
          }
         }
         $767 = HEAP32[$761>>2]|0;
         $768 = (($767) + 36|0);
         $769 = HEAP32[$768>>2]|0;
         __THREW__ = 0;
         $770 = (invoke_ii($769|0,($761|0))|0);
         $771 = __THREW__; __THREW__ = 0;
         $772 = $771&1;
         if ($772) {
          label = 90;
          break L93;
         }
         $773 = ($770|0)==(-1);
         if ($773) {
          $$pre$i2$i$i180428 = 0;$__e$sroa$0$7 = 0;
          label = 269;
         } else {
          $774 = ($$pre$i2$i$i180|0)==(0|0);
          $tmp$i$i182 = $758 ^ $774;
          if ($tmp$i$i182) {
           $$pre$i2$i$i180427 = $$pre$i2$i$i180;$1269 = $$pre$i2$i$i180;$__e$sroa$0$8 = $__e$sroa$0$6;
          } else {
           $__e$sroa$0$9 = $__e$sroa$0$6;
           break L253;
          }
         }
        }
       } while(0);
       if ((label|0) == 269) {
        label = 0;
        if ($758) {
         $__e$sroa$0$9 = $__e$sroa$0$7;
         break;
        } else {
         $$pre$i2$i$i180427 = $$pre$i2$i$i180428;$1269 = 0;$__e$sroa$0$8 = $__e$sroa$0$7;
        }
       }
       $775 = HEAP32[$__b>>2]|0;
       $776 = (($775) + 12|0);
       $777 = HEAP32[$776>>2]|0;
       $778 = (($775) + 16|0);
       $779 = HEAP32[$778>>2]|0;
       $780 = ($777|0)==($779|0);
       if ($780) {
        $781 = HEAP32[$775>>2]|0;
        $782 = (($781) + 36|0);
        $783 = HEAP32[$782>>2]|0;
        __THREW__ = 0;
        $784 = (invoke_ii($783|0,($775|0))|0);
        $785 = __THREW__; __THREW__ = 0;
        $786 = $785&1;
        if ($786) {
         label = 90;
         break L93;
        } else {
         $$0$i$i172 = $784;
        }
       } else {
        $787 = HEAP8[$777>>0]|0;
        $788 = $787&255;
        $$0$i$i172 = $788;
       }
       $789 = $$0$i$i172&255;
       $790 = HEAP8[$743>>0]|0;
       $791 = ($789<<24>>24)==($790<<24>>24);
       if (!($791)) {
        $__e$sroa$0$9 = $__e$sroa$0$8;
        break;
       }
       $792 = HEAP32[$__b>>2]|0;
       $793 = (($792) + 12|0);
       $794 = HEAP32[$793>>2]|0;
       $795 = (($792) + 16|0);
       $796 = HEAP32[$795>>2]|0;
       $797 = ($794|0)==($796|0);
       if ($797) {
        $798 = HEAP32[$792>>2]|0;
        $799 = (($798) + 40|0);
        $800 = HEAP32[$799>>2]|0;
        __THREW__ = 0;
        (invoke_ii($800|0,($792|0))|0);
        $801 = __THREW__; __THREW__ = 0;
        $802 = $801&1;
        if ($802) {
         label = 90;
         break L93;
        }
       } else {
        $803 = (($794) + 1|0);
        HEAP32[$793>>2] = $803;
       }
       $804 = (($743) + 1|0);
       $$pre = HEAP8[$__sym>>0]|0;
       $$pre$i2$i$i180 = $$pre$i2$i$i180427;$733 = $$pre;$743 = $804;$761 = $1269;$__e$sroa$0$6 = $__e$sroa$0$8;
      }
      if ($242) {
       $805 = HEAP8[$__sym>>0]|0;
       $806 = $805 & 1;
       $807 = ($806<<24>>24)==(0);
       if ($807) {
        $810 = $805&255;
        $811 = $810 >>> 1;
        $813 = $243;$814 = $811;
       } else {
        $808 = HEAP32[$244>>2]|0;
        $809 = HEAP32[$245>>2]|0;
        $813 = $808;$814 = $809;
       }
       $812 = (($813) + ($814)|0);
       $815 = ($743|0)==($812|0);
       if ($815) {
        $1263 = $1262;$1264 = $1261;$1265 = $1260;$1266 = $1259;$__e$sroa$0$20 = $__e$sroa$0$9;$__fd$2 = $__fd$0;$__trailing_sign$1 = $__trailing_sign$0355;$free203 = $free202349;
       } else {
        label = 284;
        break L93;
       }
      } else {
       $1263 = $1262;$1264 = $1261;$1265 = $1260;$1266 = $1259;$__e$sroa$0$20 = $__e$sroa$0$9;$__fd$2 = $__fd$0;$__trailing_sign$1 = $__trailing_sign$0355;$free203 = $free202349;
      }
      break;
     }
     case 4:  {
      $870 = $1262;$909 = $1260;$910 = $1259;$914 = $1261;$__e$sroa$0$10 = $__e$sroa$0$2;$__ng$0 = 0;$free201 = $free202349;
      L293: while(1) {
       $818 = HEAP32[$__b>>2]|0;
       $819 = ($818|0)==(0|0);
       do {
        if ($819) {
         $833 = 0;
        } else {
         $820 = (($818) + 12|0);
         $821 = HEAP32[$820>>2]|0;
         $822 = (($818) + 16|0);
         $823 = HEAP32[$822>>2]|0;
         $824 = ($821|0)==($823|0);
         if ($824) {
          $825 = HEAP32[$818>>2]|0;
          $826 = (($825) + 36|0);
          $827 = HEAP32[$826>>2]|0;
          __THREW__ = 0;
          $828 = (invoke_ii($827|0,($818|0))|0);
          $829 = __THREW__; __THREW__ = 0;
          $830 = $829&1;
          if ($830) {
           $$ph$ph$ph = $914;$free206$ph$ph$ph = $free201;
           label = 86;
           break L93;
          }
          $831 = ($828|0)==(-1);
          if ($831) {
           HEAP32[$__b>>2] = 0;
           $833 = 0;
           break;
          } else {
           $$pre$i$i$i156 = HEAP32[$__b>>2]|0;
           $833 = $$pre$i$i$i156;
           break;
          }
         } else {
          $833 = $818;
         }
        }
       } while(0);
       $832 = ($833|0)==(0|0);
       $834 = ($__e$sroa$0$10|0)==(0|0);
       do {
        if ($834) {
         label = 296;
        } else {
         $835 = (($__e$sroa$0$10) + 12|0);
         $836 = HEAP32[$835>>2]|0;
         $837 = (($__e$sroa$0$10) + 16|0);
         $838 = HEAP32[$837>>2]|0;
         $839 = ($836|0)==($838|0);
         if (!($839)) {
          if ($832) {
           $__e$sroa$0$12 = $__e$sroa$0$10;
           break;
          } else {
           $__e$sroa$0$13 = $__e$sroa$0$10;
           break L293;
          }
         }
         $840 = HEAP32[$__e$sroa$0$10>>2]|0;
         $841 = (($840) + 36|0);
         $842 = HEAP32[$841>>2]|0;
         __THREW__ = 0;
         $843 = (invoke_ii($842|0,($__e$sroa$0$10|0))|0);
         $844 = __THREW__; __THREW__ = 0;
         $845 = $844&1;
         if ($845) {
          $$ph$ph$ph = $914;$free206$ph$ph$ph = $free201;
          label = 86;
          break L93;
         }
         $846 = ($843|0)==(-1);
         if ($846) {
          label = 296;
         } else {
          if ($832) {
           $__e$sroa$0$12 = $__e$sroa$0$10;
          } else {
           $__e$sroa$0$13 = $__e$sroa$0$10;
           break L293;
          }
         }
        }
       } while(0);
       if ((label|0) == 296) {
        label = 0;
        if ($832) {
         $__e$sroa$0$13 = 0;
         break;
        } else {
         $__e$sroa$0$12 = 0;
        }
       }
       $847 = HEAP32[$__b>>2]|0;
       $848 = (($847) + 12|0);
       $849 = HEAP32[$848>>2]|0;
       $850 = (($847) + 16|0);
       $851 = HEAP32[$850>>2]|0;
       $852 = ($849|0)==($851|0);
       if ($852) {
        $853 = HEAP32[$847>>2]|0;
        $854 = (($853) + 36|0);
        $855 = HEAP32[$854>>2]|0;
        __THREW__ = 0;
        $856 = (invoke_ii($855|0,($847|0))|0);
        $857 = __THREW__; __THREW__ = 0;
        $858 = $857&1;
        if ($858) {
         $$ph$ph$ph = $914;$free206$ph$ph$ph = $free201;
         label = 86;
         break L93;
        } else {
         $$0$i$i151 = $856;
        }
       } else {
        $859 = HEAP8[$849>>0]|0;
        $860 = $859&255;
        $$0$i$i151 = $860;
       }
       $861 = $$0$i$i151&255;
       $isascii1$i149 = ($861<<24>>24)>(-1);
       if ($isascii1$i149) {
        $sext230 = $$0$i$i151 << 24;
        $862 = $sext230 >> 24;
        $863 = HEAP32[$234>>2]|0;
        $864 = (($863) + ($862<<1)|0);
        $865 = HEAP16[$864>>1]|0;
        $866 = $865 & 2048;
        $867 = ($866<<16>>16)==(0);
        if ($867) {
         label = 315;
        } else {
         $868 = HEAP32[$__wn>>2]|0;
         $869 = ($868|0)==($870|0);
         if ($869) {
          $871 = HEAP32[$250>>2]|0;
          $872 = ($871|0)!=(473|0);
          $873 = HEAP32[$__wb>>2]|0;
          $874 = $870;
          $875 = $873;
          $876 = (($874) - ($875))|0;
          $877 = ($876>>>0)<(2147483647);
          $878 = $876 << 1;
          $$$i140 = $877 ? $878 : -1;
          $879 = $872 ? $873 : 0;
          $880 = (_realloc($879,$$$i140)|0);
          $881 = ($880|0)==(0|0);
          if ($881) {
           label = 305;
           break L93;
          }
          if ($872) {
           HEAP32[$__wb>>2] = $880;
           $892 = $880;
          } else {
           $$pr$i142 = HEAP32[$__wb>>2]|0;
           HEAP32[$__wb>>2] = $880;
           $885 = ($$pr$i142|0)==(0|0);
           if ($885) {
            $892 = $880;
           } else {
            $886 = HEAP32[$250>>2]|0;
            __THREW__ = 0;
            invoke_vi($886|0,($$pr$i142|0));
            $887 = __THREW__; __THREW__ = 0;
            $888 = $887&1;
            if ($888) {
             label = 312;
             break L93;
            }
            $$pre$i143 = HEAP32[$__wb>>2]|0;
            $892 = $$pre$i143;
           }
          }
          HEAP32[$250>>2] = 477;
          $891 = (($892) + ($876)|0);
          HEAP32[$__wn>>2] = $891;
          $893 = HEAP32[$__wb>>2]|0;
          $894 = (($893) + ($$$i140)|0);
          $1270 = $894;$896 = $891;
         } else {
          $1270 = $870;$896 = $868;
         }
         $895 = (($896) + 1|0);
         HEAP32[$__wn>>2] = $895;
         HEAP8[$896>>0] = $861;
         $897 = (($__ng$0) + 1)|0;
         $1271 = $1270;$1272 = $914;$1273 = $909;$1274 = $910;$__ng$1 = $897;$free = $free201;
        }
       } else {
        label = 315;
       }
       if ((label|0) == 315) {
        label = 0;
        $898 = HEAP8[$__grp>>0]|0;
        $899 = $898 & 1;
        $900 = ($899<<24>>24)==(0);
        if ($900) {
         $902 = $898&255;
         $903 = $902 >>> 1;
         $905 = $903;
        } else {
         $901 = HEAP32[$251>>2]|0;
         $905 = $901;
        }
        $904 = ($905|0)==(0);
        $906 = ($__ng$0|0)==(0);
        $or$cond7 = $904 | $906;
        $or$cond7$not = $or$cond7 ^ 1;
        $907 = ($861<<24>>24)==($__ts$0<<24>>24);
        $or$cond14 = $or$cond7$not & $907;
        if (!($or$cond14)) {
         $__e$sroa$0$13 = $__e$sroa$0$12;
         break;
        }
        $908 = ($909|0)==($910|0);
        if ($908) {
         $911 = ($free201|0)==(473|0);
         $912 = $909;
         $913 = $914;
         $915 = (($912) - ($913))|0;
         $916 = ($915>>>0)<(2147483647);
         $917 = $915 << 1;
         $$$i128 = $916 ? $917 : -1;
         $918 = $915 >> 2;
         if ($911) {
          $919 = 0;
         } else {
          $919 = $914;
         }
         $920 = (_realloc($919,$$$i128)|0);
         $921 = ($920|0)==(0|0);
         if ($921) {
          label = 323;
          break L93;
         }
         $925 = $$$i128 >>> 2;
         $926 = (($920) + ($918<<2)|0);
         $927 = (($920) + ($925<<2)|0);
         $1275 = $920;$1276 = $927;$929 = $926;$free200 = 477;
        } else {
         $1275 = $914;$1276 = $910;$929 = $909;$free200 = $free201;
        }
        $928 = (($929) + 4|0);
        HEAP32[$929>>2] = $__ng$0;
        $1271 = $870;$1272 = $1275;$1273 = $928;$1274 = $1276;$__ng$1 = 0;$free = $free200;
       }
       $930 = HEAP32[$__b>>2]|0;
       $931 = (($930) + 12|0);
       $932 = HEAP32[$931>>2]|0;
       $933 = (($930) + 16|0);
       $934 = HEAP32[$933>>2]|0;
       $935 = ($932|0)==($934|0);
       if ($935) {
        $936 = HEAP32[$930>>2]|0;
        $937 = (($936) + 40|0);
        $938 = HEAP32[$937>>2]|0;
        __THREW__ = 0;
        (invoke_ii($938|0,($930|0))|0);
        $939 = __THREW__; __THREW__ = 0;
        $940 = $939&1;
        if ($940) {
         $$ph$ph$ph = $1272;$free206$ph$ph$ph = $free;
         label = 86;
         break L93;
        } else {
         $870 = $1271;$909 = $1273;$910 = $1274;$914 = $1272;$__e$sroa$0$10 = $__e$sroa$0$12;$__ng$0 = $__ng$1;$free201 = $free;
         continue;
        }
       } else {
        $941 = (($932) + 1|0);
        HEAP32[$931>>2] = $941;
        $870 = $1271;$909 = $1273;$910 = $1274;$914 = $1272;$__e$sroa$0$10 = $__e$sroa$0$12;$__ng$0 = $__ng$1;$free201 = $free;
        continue;
       }
      }
      $942 = ($914|0)==($909|0);
      $943 = ($__ng$0|0)==(0);
      $or$cond8 = $942 | $943;
      if ($or$cond8) {
       $1267 = $914;$1277 = $909;$1278 = $910;$free204 = $free201;
      } else {
       $944 = ($909|0)==($910|0);
       if ($944) {
        $945 = ($free201|0)==(473|0);
        $946 = $909;
        $947 = $914;
        $948 = (($946) - ($947))|0;
        $949 = ($948>>>0)<(2147483647);
        $950 = $948 << 1;
        $$$i118 = $949 ? $950 : -1;
        $951 = $948 >> 2;
        if ($945) {
         $952 = 0;
        } else {
         $952 = $914;
        }
        $953 = (_realloc($952,$$$i118)|0);
        $954 = ($953|0)==(0|0);
        if ($954) {
         label = 335;
         break L93;
        }
        $958 = $$$i118 >>> 2;
        $959 = (($953) + ($951<<2)|0);
        $960 = (($953) + ($958<<2)|0);
        $1279 = $953;$1280 = $960;$962 = $959;$free205 = 477;
       } else {
        $1279 = $914;$1280 = $910;$962 = $909;$free205 = $free201;
       }
       $961 = (($962) + 4|0);
       HEAP32[$962>>2] = $__ng$0;
       $1267 = $1279;$1277 = $961;$1278 = $1280;$free204 = $free205;
      }
      $963 = ($__fd$0|0)>(0);
      if ($963) {
       $964 = HEAP32[$__b>>2]|0;
       $965 = ($964|0)==(0|0);
       do {
        if ($965) {
         $979 = 0;
        } else {
         $966 = (($964) + 12|0);
         $967 = HEAP32[$966>>2]|0;
         $968 = (($964) + 16|0);
         $969 = HEAP32[$968>>2]|0;
         $970 = ($967|0)==($969|0);
         if ($970) {
          $971 = HEAP32[$964>>2]|0;
          $972 = (($971) + 36|0);
          $973 = HEAP32[$972>>2]|0;
          __THREW__ = 0;
          $974 = (invoke_ii($973|0,($964|0))|0);
          $975 = __THREW__; __THREW__ = 0;
          $976 = $975&1;
          if ($976) {
           $$ph$ph235$ph$ph$ph$ph$ph = $1267;$free206$ph$ph234$ph$ph$ph$ph$ph = $free204;
           label = 92;
           break L93;
          }
          $977 = ($974|0)==(-1);
          if ($977) {
           HEAP32[$__b>>2] = 0;
           $979 = 0;
           break;
          } else {
           $$pre$i$i$i101 = HEAP32[$__b>>2]|0;
           $979 = $$pre$i$i$i101;
           break;
          }
         } else {
          $979 = $964;
         }
        }
       } while(0);
       $978 = ($979|0)==(0|0);
       $980 = ($__e$sroa$0$13|0)==(0|0);
       do {
        if ($980) {
         label = 351;
        } else {
         $981 = (($__e$sroa$0$13) + 12|0);
         $982 = HEAP32[$981>>2]|0;
         $983 = (($__e$sroa$0$13) + 16|0);
         $984 = HEAP32[$983>>2]|0;
         $985 = ($982|0)==($984|0);
         if (!($985)) {
          if ($978) {
           $__e$sroa$0$15 = $__e$sroa$0$13;
           break;
          } else {
           label = 357;
           break L93;
          }
         }
         $986 = HEAP32[$__e$sroa$0$13>>2]|0;
         $987 = (($986) + 36|0);
         $988 = HEAP32[$987>>2]|0;
         __THREW__ = 0;
         $989 = (invoke_ii($988|0,($__e$sroa$0$13|0))|0);
         $990 = __THREW__; __THREW__ = 0;
         $991 = $990&1;
         if ($991) {
          $$ph$ph235$ph$ph$ph$ph$ph = $1267;$free206$ph$ph234$ph$ph$ph$ph$ph = $free204;
          label = 92;
          break L93;
         }
         $992 = ($989|0)==(-1);
         if ($992) {
          label = 351;
         } else {
          if ($978) {
           $__e$sroa$0$15 = $__e$sroa$0$13;
          } else {
           label = 357;
           break L93;
          }
         }
        }
       } while(0);
       if ((label|0) == 351) {
        label = 0;
        if ($978) {
         label = 357;
         break L93;
        } else {
         $__e$sroa$0$15 = 0;
        }
       }
       $993 = HEAP32[$__b>>2]|0;
       $994 = (($993) + 12|0);
       $995 = HEAP32[$994>>2]|0;
       $996 = (($993) + 16|0);
       $997 = HEAP32[$996>>2]|0;
       $998 = ($995|0)==($997|0);
       if ($998) {
        $999 = HEAP32[$993>>2]|0;
        $1000 = (($999) + 36|0);
        $1001 = HEAP32[$1000>>2]|0;
        __THREW__ = 0;
        $1002 = (invoke_ii($1001|0,($993|0))|0);
        $1003 = __THREW__; __THREW__ = 0;
        $1004 = $1003&1;
        if ($1004) {
         $$ph$ph235$ph$ph$ph$ph$ph = $1267;$free206$ph$ph234$ph$ph$ph$ph$ph = $free204;
         label = 92;
         break L93;
        } else {
         $$0$i$i93 = $1002;
        }
       } else {
        $1005 = HEAP8[$995>>0]|0;
        $1006 = $1005&255;
        $$0$i$i93 = $1006;
       }
       $1007 = $$0$i$i93&255;
       $1008 = ($1007<<24>>24)==($__dp$0<<24>>24);
       if (!($1008)) {
        label = 357;
        break L93;
       }
       $1011 = HEAP32[$__b>>2]|0;
       $1012 = (($1011) + 12|0);
       $1013 = HEAP32[$1012>>2]|0;
       $1014 = (($1011) + 16|0);
       $1015 = HEAP32[$1014>>2]|0;
       $1016 = ($1013|0)==($1015|0);
       if ($1016) {
        $1017 = HEAP32[$1011>>2]|0;
        $1018 = (($1017) + 40|0);
        $1019 = HEAP32[$1018>>2]|0;
        __THREW__ = 0;
        (invoke_ii($1019|0,($1011|0))|0);
        $1020 = __THREW__; __THREW__ = 0;
        $1021 = $1020&1;
        if ($1021) {
         $$ph$ph235$ph$ph$ph$ph$ph = $1267;$free206$ph$ph234$ph$ph$ph$ph$ph = $free204;
         label = 92;
         break L93;
        } else {
         $$pre$i2$i$i75 = $__e$sroa$0$15;$1040 = $__e$sroa$0$15;$1079 = $870;$1122 = $__fd$0;$__e$sroa$0$16 = $__e$sroa$0$15;
        }
       } else {
        $1022 = (($1013) + 1|0);
        HEAP32[$1012>>2] = $1022;
        $$pre$i2$i$i75 = $__e$sroa$0$15;$1040 = $__e$sroa$0$15;$1079 = $870;$1122 = $__fd$0;$__e$sroa$0$16 = $__e$sroa$0$15;
       }
       while(1) {
        $1023 = HEAP32[$__b>>2]|0;
        $1024 = ($1023|0)==(0|0);
        do {
         if ($1024) {
          $1038 = 0;
         } else {
          $1025 = (($1023) + 12|0);
          $1026 = HEAP32[$1025>>2]|0;
          $1027 = (($1023) + 16|0);
          $1028 = HEAP32[$1027>>2]|0;
          $1029 = ($1026|0)==($1028|0);
          if ($1029) {
           $1030 = HEAP32[$1023>>2]|0;
           $1031 = (($1030) + 36|0);
           $1032 = HEAP32[$1031>>2]|0;
           __THREW__ = 0;
           $1033 = (invoke_ii($1032|0,($1023|0))|0);
           $1034 = __THREW__; __THREW__ = 0;
           $1035 = $1034&1;
           if ($1035) {
            label = 88;
            break L93;
           }
           $1036 = ($1033|0)==(-1);
           if ($1036) {
            HEAP32[$__b>>2] = 0;
            $1038 = 0;
            break;
           } else {
            $$pre$i$i$i71 = HEAP32[$__b>>2]|0;
            $1038 = $$pre$i$i$i71;
            break;
           }
          } else {
           $1038 = $1023;
          }
         }
        } while(0);
        $1037 = ($1038|0)==(0|0);
        $1039 = ($1040|0)==(0|0);
        do {
         if ($1039) {
          $$pre$i2$i$i75431$ph = $$pre$i2$i$i75;$__e$sroa$0$17 = $__e$sroa$0$16;
          label = 372;
         } else {
          $1041 = (($1040) + 12|0);
          $1042 = HEAP32[$1041>>2]|0;
          $1043 = (($1040) + 16|0);
          $1044 = HEAP32[$1043>>2]|0;
          $1045 = ($1042|0)==($1044|0);
          if (!($1045)) {
           if ($1037) {
            $$pre$i2$i$i75431458 = $$pre$i2$i$i75;$1282 = $1040;$__e$sroa$0$18 = $__e$sroa$0$16;
            break;
           } else {
            label = 379;
            break L93;
           }
          }
          $1046 = HEAP32[$1040>>2]|0;
          $1047 = (($1046) + 36|0);
          $1048 = HEAP32[$1047>>2]|0;
          __THREW__ = 0;
          $1049 = (invoke_ii($1048|0,($1040|0))|0);
          $1050 = __THREW__; __THREW__ = 0;
          $1051 = $1050&1;
          if ($1051) {
           label = 88;
           break L93;
          }
          $1052 = ($1049|0)==(-1);
          if ($1052) {
           $$pre$i2$i$i75431$ph = 0;$__e$sroa$0$17 = 0;
           label = 372;
           break;
          }
          $1053 = ($$pre$i2$i$i75|0)==(0|0);
          $tmp$i$i77 = $1037 ^ $1053;
          if ($tmp$i$i77) {
           $$pre$i2$i$i75431458 = $$pre$i2$i$i75;$1282 = $$pre$i2$i$i75;$__e$sroa$0$18 = $__e$sroa$0$16;
          } else {
           label = 379;
           break L93;
          }
         }
        } while(0);
        if ((label|0) == 372) {
         label = 0;
         if ($1037) {
          label = 379;
          break L93;
         } else {
          $$pre$i2$i$i75431458 = $$pre$i2$i$i75431$ph;$1282 = 0;$__e$sroa$0$18 = $__e$sroa$0$17;
         }
        }
        $1054 = HEAP32[$__b>>2]|0;
        $1055 = (($1054) + 12|0);
        $1056 = HEAP32[$1055>>2]|0;
        $1057 = (($1054) + 16|0);
        $1058 = HEAP32[$1057>>2]|0;
        $1059 = ($1056|0)==($1058|0);
        if ($1059) {
         $1060 = HEAP32[$1054>>2]|0;
         $1061 = (($1060) + 36|0);
         $1062 = HEAP32[$1061>>2]|0;
         __THREW__ = 0;
         $1063 = (invoke_ii($1062|0,($1054|0))|0);
         $1064 = __THREW__; __THREW__ = 0;
         $1065 = $1064&1;
         if ($1065) {
          label = 88;
          break L93;
         } else {
          $$0$i$i64 = $1063;
         }
        } else {
         $1066 = HEAP8[$1056>>0]|0;
         $1067 = $1066&255;
         $$0$i$i64 = $1067;
        }
        $1068 = $$0$i$i64&255;
        $isascii1$i62 = ($1068<<24>>24)>(-1);
        if (!($isascii1$i62)) {
         label = 379;
         break L93;
        }
        $sext = $$0$i$i64 << 24;
        $1069 = $sext >> 24;
        $1070 = HEAP32[$234>>2]|0;
        $1071 = (($1070) + ($1069<<1)|0);
        $1072 = HEAP16[$1071>>1]|0;
        $1073 = $1072 & 2048;
        $1074 = ($1073<<16>>16)==(0);
        if ($1074) {
         label = 379;
         break L93;
        }
        $1077 = HEAP32[$__wn>>2]|0;
        $1078 = ($1077|0)==($1079|0);
        if ($1078) {
         $1080 = HEAP32[$250>>2]|0;
         $1081 = ($1080|0)!=(473|0);
         $1082 = HEAP32[$__wb>>2]|0;
         $1083 = $1079;
         $1084 = $1082;
         $1085 = (($1083) - ($1084))|0;
         $1086 = ($1085>>>0)<(2147483647);
         $1087 = $1085 << 1;
         $$$i = $1086 ? $1087 : -1;
         $1088 = $1081 ? $1082 : 0;
         $1089 = (_realloc($1088,$$$i)|0);
         $1090 = ($1089|0)==(0|0);
         if ($1090) {
          label = 382;
          break L93;
         }
         do {
          if ($1081) {
           HEAP32[$__wb>>2] = $1089;
           $1101 = $1089;
          } else {
           $$pr$i = HEAP32[$__wb>>2]|0;
           HEAP32[$__wb>>2] = $1089;
           $1094 = ($$pr$i|0)==(0|0);
           if ($1094) {
            $1101 = $1089;
            break;
           }
           $1095 = HEAP32[$250>>2]|0;
           __THREW__ = 0;
           invoke_vi($1095|0,($$pr$i|0));
           $1096 = __THREW__; __THREW__ = 0;
           $1097 = $1096&1;
           if ($1097) {
            label = 389;
            break L93;
           }
           $$pre$i = HEAP32[$__wb>>2]|0;
           $1101 = $$pre$i;
          }
         } while(0);
         HEAP32[$250>>2] = 477;
         $1100 = (($1101) + ($1085)|0);
         HEAP32[$__wn>>2] = $1100;
         $1102 = HEAP32[$__wb>>2]|0;
         $1103 = (($1102) + ($$$i)|0);
         $1283 = $1100;$1284 = $1103;
        } else {
         $1283 = $1077;$1284 = $1079;
        }
        $1104 = HEAP32[$__b>>2]|0;
        $1105 = (($1104) + 12|0);
        $1106 = HEAP32[$1105>>2]|0;
        $1107 = (($1104) + 16|0);
        $1108 = HEAP32[$1107>>2]|0;
        $1109 = ($1106|0)==($1108|0);
        if ($1109) {
         $1110 = HEAP32[$1104>>2]|0;
         $1111 = (($1110) + 36|0);
         $1112 = HEAP32[$1111>>2]|0;
         __THREW__ = 0;
         $1113 = (invoke_ii($1112|0,($1104|0))|0);
         $1114 = __THREW__; __THREW__ = 0;
         $1115 = $1114&1;
         if ($1115) {
          label = 88;
          break L93;
         }
         $$pre453 = HEAP32[$__wn>>2]|0;
         $$0$i$i53 = $1113;$1120 = $$pre453;
        } else {
         $1116 = HEAP8[$1106>>0]|0;
         $1117 = $1116&255;
         $$0$i$i53 = $1117;$1120 = $1283;
        }
        $1118 = $$0$i$i53&255;
        $1119 = (($1120) + 1|0);
        HEAP32[$__wn>>2] = $1119;
        HEAP8[$1120>>0] = $1118;
        $1121 = (($1122) + -1)|0;
        $1123 = HEAP32[$__b>>2]|0;
        $1124 = (($1123) + 12|0);
        $1125 = HEAP32[$1124>>2]|0;
        $1126 = (($1123) + 16|0);
        $1127 = HEAP32[$1126>>2]|0;
        $1128 = ($1125|0)==($1127|0);
        if ($1128) {
         $1129 = HEAP32[$1123>>2]|0;
         $1130 = (($1129) + 40|0);
         $1131 = HEAP32[$1130>>2]|0;
         __THREW__ = 0;
         (invoke_ii($1131|0,($1123|0))|0);
         $1132 = __THREW__; __THREW__ = 0;
         $1133 = $1132&1;
         if ($1133) {
          label = 88;
          break L93;
         }
        } else {
         $1135 = (($1125) + 1|0);
         HEAP32[$1124>>2] = $1135;
        }
        $1134 = ($1121|0)>(0);
        if ($1134) {
         $$pre$i2$i$i75 = $$pre$i2$i$i75431458;$1040 = $1282;$1079 = $1284;$1122 = $1121;$__e$sroa$0$16 = $__e$sroa$0$18;
        } else {
         $1281 = $1284;$__e$sroa$0$19 = $__e$sroa$0$18;$__fd$1 = $1121;
         break;
        }
       }
      } else {
       $1281 = $870;$__e$sroa$0$19 = $__e$sroa$0$13;$__fd$1 = $__fd$0;
      }
      $1136 = HEAP32[$__wn>>2]|0;
      $1137 = HEAP32[$__wb>>2]|0;
      $1138 = ($1136|0)==($1137|0);
      if ($1138) {
       label = 400;
       break L93;
      } else {
       $1263 = $1281;$1264 = $1267;$1265 = $1277;$1266 = $1278;$__e$sroa$0$20 = $__e$sroa$0$19;$__fd$2 = $__fd$1;$__trailing_sign$1 = $__trailing_sign$0355;$free203 = $free204;
      }
      break;
     }
     default: {
      $1263 = $1262;$1264 = $1261;$1265 = $1260;$1266 = $1259;$__e$sroa$0$20 = $__e$sroa$0$2;$__fd$2 = $__fd$0;$__trailing_sign$1 = $__trailing_sign$0355;$free203 = $free202349;
     }
     }
    } while(0);
    L433: do {
     if ((label|0) == 134) {
      label = 0;
      $400 = ($__p$0353|0)==(3);
      if ($400) {
       $$lcssa293 = $1261;$$lcssa309 = $1260;$__e$sroa$0$21 = $__e$sroa$0$2;$__trailing_sign$0$lcssa = $__trailing_sign$0355;$free202$lcssa = $free202349;
       label = 402;
       break L93;
      } else {
       $$pre$i2$i$i39 = $__e$sroa$0$2;$418 = $__e$sroa$0$2;$__e$sroa$0$3 = $__e$sroa$0$2;
      }
      while(1) {
       $401 = HEAP32[$__b>>2]|0;
       $402 = ($401|0)==(0|0);
       do {
        if ($402) {
         $416 = 0;
        } else {
         $403 = (($401) + 12|0);
         $404 = HEAP32[$403>>2]|0;
         $405 = (($401) + 16|0);
         $406 = HEAP32[$405>>2]|0;
         $407 = ($404|0)==($406|0);
         if ($407) {
          $408 = HEAP32[$401>>2]|0;
          $409 = (($408) + 36|0);
          $410 = HEAP32[$409>>2]|0;
          __THREW__ = 0;
          $411 = (invoke_ii($410|0,($401|0))|0);
          $412 = __THREW__; __THREW__ = 0;
          $413 = $412&1;
          if ($413) {
           label = 91;
           break L93;
          }
          $414 = ($411|0)==(-1);
          if ($414) {
           HEAP32[$__b>>2] = 0;
           $416 = 0;
           break;
          } else {
           $$pre$i$i$i35 = HEAP32[$__b>>2]|0;
           $416 = $$pre$i$i$i35;
           break;
          }
         } else {
          $416 = $401;
         }
        }
       } while(0);
       $415 = ($416|0)==(0|0);
       $417 = ($418|0)==(0|0);
       do {
        if ($417) {
         $$pre$i2$i$i39424 = $$pre$i2$i$i39;$__e$sroa$0$4 = $__e$sroa$0$3;
         label = 146;
        } else {
         $419 = (($418) + 12|0);
         $420 = HEAP32[$419>>2]|0;
         $421 = (($418) + 16|0);
         $422 = HEAP32[$421>>2]|0;
         $423 = ($420|0)==($422|0);
         if (!($423)) {
          if ($415) {
           $$pre$i2$i$i39426 = $$pre$i2$i$i39;$1268 = $418;$__e$sroa$0$5 = $__e$sroa$0$3;
           break;
          } else {
           $1263 = $1262;$1264 = $1261;$1265 = $1260;$1266 = $1259;$__e$sroa$0$20 = $__e$sroa$0$3;$__fd$2 = $__fd$0;$__trailing_sign$1 = $__trailing_sign$0355;$free203 = $free202349;
           break L433;
          }
         }
         $424 = HEAP32[$418>>2]|0;
         $425 = (($424) + 36|0);
         $426 = HEAP32[$425>>2]|0;
         __THREW__ = 0;
         $427 = (invoke_ii($426|0,($418|0))|0);
         $428 = __THREW__; __THREW__ = 0;
         $429 = $428&1;
         if ($429) {
          label = 91;
          break L93;
         }
         $430 = ($427|0)==(-1);
         if ($430) {
          $$pre$i2$i$i39424 = 0;$__e$sroa$0$4 = 0;
          label = 146;
         } else {
          $431 = ($$pre$i2$i$i39|0)==(0|0);
          $tmp$i$i41 = $415 ^ $431;
          if ($tmp$i$i41) {
           $$pre$i2$i$i39426 = $$pre$i2$i$i39;$1268 = $$pre$i2$i$i39;$__e$sroa$0$5 = $__e$sroa$0$3;
          } else {
           $1263 = $1262;$1264 = $1261;$1265 = $1260;$1266 = $1259;$__e$sroa$0$20 = $__e$sroa$0$3;$__fd$2 = $__fd$0;$__trailing_sign$1 = $__trailing_sign$0355;$free203 = $free202349;
           break L433;
          }
         }
        }
       } while(0);
       if ((label|0) == 146) {
        label = 0;
        if ($415) {
         $1263 = $1262;$1264 = $1261;$1265 = $1260;$1266 = $1259;$__e$sroa$0$20 = $__e$sroa$0$4;$__fd$2 = $__fd$0;$__trailing_sign$1 = $__trailing_sign$0355;$free203 = $free202349;
         break L433;
        } else {
         $$pre$i2$i$i39426 = $$pre$i2$i$i39424;$1268 = 0;$__e$sroa$0$5 = $__e$sroa$0$4;
        }
       }
       $432 = HEAP32[$__b>>2]|0;
       $433 = (($432) + 12|0);
       $434 = HEAP32[$433>>2]|0;
       $435 = (($432) + 16|0);
       $436 = HEAP32[$435>>2]|0;
       $437 = ($434|0)==($436|0);
       if ($437) {
        $438 = HEAP32[$432>>2]|0;
        $439 = (($438) + 36|0);
        $440 = HEAP32[$439>>2]|0;
        __THREW__ = 0;
        $441 = (invoke_ii($440|0,($432|0))|0);
        $442 = __THREW__; __THREW__ = 0;
        $443 = $442&1;
        if ($443) {
         label = 91;
         break L93;
        } else {
         $$0$i$i45 = $441;
        }
       } else {
        $444 = HEAP8[$434>>0]|0;
        $445 = $444&255;
        $$0$i$i45 = $445;
       }
       $446 = $$0$i$i45&255;
       $isascii1$i48 = ($446<<24>>24)>(-1);
       if (!($isascii1$i48)) {
        $1263 = $1262;$1264 = $1261;$1265 = $1260;$1266 = $1259;$__e$sroa$0$20 = $__e$sroa$0$5;$__fd$2 = $__fd$0;$__trailing_sign$1 = $__trailing_sign$0355;$free203 = $free202349;
        break L433;
       }
       $sext231 = $$0$i$i45 << 24;
       $447 = $sext231 >> 24;
       $448 = HEAP32[$234>>2]|0;
       $449 = (($448) + ($447<<1)|0);
       $450 = HEAP16[$449>>1]|0;
       $451 = $450 & 8192;
       $452 = ($451<<16>>16)==(0);
       if ($452) {
        $1263 = $1262;$1264 = $1261;$1265 = $1260;$1266 = $1259;$__e$sroa$0$20 = $__e$sroa$0$5;$__fd$2 = $__fd$0;$__trailing_sign$1 = $__trailing_sign$0355;$free203 = $free202349;
        break L433;
       }
       $453 = HEAP32[$__b>>2]|0;
       $454 = (($453) + 12|0);
       $455 = HEAP32[$454>>2]|0;
       $456 = (($453) + 16|0);
       $457 = HEAP32[$456>>2]|0;
       $458 = ($455|0)==($457|0);
       if ($458) {
        $459 = HEAP32[$453>>2]|0;
        $460 = (($459) + 40|0);
        $461 = HEAP32[$460>>2]|0;
        __THREW__ = 0;
        $462 = (invoke_ii($461|0,($453|0))|0);
        $463 = __THREW__; __THREW__ = 0;
        $464 = $463&1;
        if ($464) {
         label = 91;
         break L93;
        } else {
         $$0$i$i50 = $462;
        }
       } else {
        $465 = (($455) + 1|0);
        HEAP32[$454>>2] = $465;
        $466 = HEAP8[$455>>0]|0;
        $467 = $466&255;
        $$0$i$i50 = $467;
       }
       $468 = $$0$i$i50&255;
       $469 = HEAP8[$__spaces>>0]|0;
       $470 = $469 & 1;
       $471 = ($470<<24>>24)!=(0);
       if ($471) {
        $474 = HEAP32[$__spaces>>2]|0;
        $475 = $474 & -2;
        $476 = (($475) + -1)|0;
        $477 = HEAP32[$248>>2]|0;
        $__cap$0$i31 = $476;$__sz$0$i32 = $477;
       } else {
        $472 = $469&255;
        $473 = $472 >>> 1;
        $__cap$0$i31 = 10;$__sz$0$i32 = $473;
       }
       $478 = ($__sz$0$i32|0)==($__cap$0$i31|0);
       if ($478) {
        __THREW__ = 0;
        invoke_viiiiii(476,($__spaces|0),($__cap$0$i31|0),1,($__cap$0$i31|0),($__cap$0$i31|0),0);
        $479 = __THREW__; __THREW__ = 0;
        $480 = $479&1;
        if ($480) {
         label = 91;
         break L93;
        }
        $481 = HEAP8[$__spaces>>0]|0;
        $482 = $481 & 1;
        $483 = ($482<<24>>24)==(0);
        if ($483) {
         label = 163;
        } else {
         label = 164;
        }
       } else {
        if ($471) {
         label = 164;
        } else {
         label = 163;
        }
       }
       if ((label|0) == 163) {
        label = 0;
        $484 = $__sz$0$i32 << 1;
        $485 = (($484) + 2)|0;
        $486 = $485&255;
        HEAP8[$__spaces>>0] = $486;
        $__p$0$sum$pre$i33 = (($__sz$0$i32) + 1)|0;
        $$pn$i35 = $246;$__p$0$sum$pre$phi$i34ZZZ2D = $__p$0$sum$pre$i33;
       }
       else if ((label|0) == 164) {
        label = 0;
        $487 = HEAP32[$247>>2]|0;
        $488 = (($__sz$0$i32) + 1)|0;
        HEAP32[$248>>2] = $488;
        $$pn$i35 = $487;$__p$0$sum$pre$phi$i34ZZZ2D = $488;
       }
       $__p$0$i36 = (($$pn$i35) + ($__sz$0$i32)|0);
       HEAP8[$__p$0$i36>>0] = $468;
       $489 = (($$pn$i35) + ($__p$0$sum$pre$phi$i34ZZZ2D)|0);
       HEAP8[$489>>0] = 0;
       $$pre$i2$i$i39 = $$pre$i2$i$i39426;$418 = $1268;$__e$sroa$0$3 = $__e$sroa$0$5;
      }
     }
    } while(0);
    $1141 = (($__p$0353) + 1)|0;
    $1142 = ($1141>>>0)<(4);
    if ($1142) {
     $1259 = $1266;$1260 = $1265;$1261 = $1264;$1262 = $1263;$__e$sroa$0$0 = $__e$sroa$0$20;$__fd$0 = $__fd$2;$__p$0353 = $1141;$__trailing_sign$0355 = $__trailing_sign$1;$free202349 = $free203;
    } else {
     $$lcssa293 = $1264;$$lcssa309 = $1265;$__e$sroa$0$21 = $__e$sroa$0$20;$__trailing_sign$0$lcssa = $__trailing_sign$1;$free202$lcssa = $free203;
     label = 402;
     break;
    }
   }
   L478:    switch (label|0) {
    case 86: {
     $286 = ___cxa_find_matching_catch(-1,-1)|0;
     $287 = tempRet0;
     $335 = $$ph$ph$ph;$free206 = $free206$ph$ph$ph;$lpad$phi$index = $286;$lpad$phi$index24 = $287;
     break L90;
     break;
    }
    case 88: {
     $290 = ___cxa_find_matching_catch(-1,-1)|0;
     $291 = tempRet0;
     $335 = $1267;$free206 = $free204;$lpad$phi$index = $290;$lpad$phi$index24 = $291;
     break L90;
     break;
    }
    case 90: {
     $294 = ___cxa_find_matching_catch(-1,-1)|0;
     $295 = tempRet0;
     $335 = $1261;$free206 = $free202349;$lpad$phi$index = $294;$lpad$phi$index24 = $295;
     break L90;
     break;
    }
    case 91: {
     $296 = ___cxa_find_matching_catch(-1,-1)|0;
     $297 = tempRet0;
     $335 = $1261;$free206 = $free202349;$lpad$phi$index = $296;$lpad$phi$index24 = $297;
     break L90;
     break;
    }
    case 92: {
     $298 = ___cxa_find_matching_catch(-1,-1)|0;
     $299 = tempRet0;
     $335 = $$ph$ph235$ph$ph$ph$ph$ph;$free206 = $free206$ph$ph234$ph$ph$ph$ph$ph;$lpad$phi$index = $298;$lpad$phi$index24 = $299;
     break L90;
     break;
    }
    case 133: {
     $398 = HEAP32[$__err>>2]|0;
     $399 = $398 | 4;
     HEAP32[$__err>>2] = $399;
     $$0 = 0;$1254 = $1261;$free208 = $free202349;
     break;
    }
    case 233: {
     $672 = HEAP32[$__err>>2]|0;
     $673 = $672 | 4;
     HEAP32[$__err>>2] = $673;
     $$0 = 0;$1254 = $1261;$free208 = $free202349;
     break;
    }
    case 284: {
     $816 = HEAP32[$__err>>2]|0;
     $817 = $816 | 4;
     HEAP32[$__err>>2] = $817;
     $$0 = 0;$1254 = $1261;$free208 = $free202349;
     break;
    }
    case 305: {
     $882 = (___cxa_allocate_exception(4)|0);
     HEAP32[$882>>2] = ((15656 + 8|0));
     __THREW__ = 0;
     invoke_viii(379,($882|0),(15712|0),(374|0));
     $883 = __THREW__; __THREW__ = 0;
     $884 = $883&1;
     if ($884) {
      label = 87;
     } else {
      // unreachable;
     }
     break;
    }
    case 312: {
     $889 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
     $890 = tempRet0;
     ___clang_call_terminate($889);
     // unreachable;
     break;
    }
    case 323: {
     $922 = (___cxa_allocate_exception(4)|0);
     HEAP32[$922>>2] = ((15656 + 8|0));
     __THREW__ = 0;
     invoke_viii(379,($922|0),(15712|0),(374|0));
     $923 = __THREW__; __THREW__ = 0;
     $924 = $923&1;
     if ($924) {
      label = 87;
     } else {
      // unreachable;
     }
     break;
    }
    case 335: {
     $955 = (___cxa_allocate_exception(4)|0);
     HEAP32[$955>>2] = ((15656 + 8|0));
     __THREW__ = 0;
     invoke_viii(379,($955|0),(15712|0),(374|0));
     $956 = __THREW__; __THREW__ = 0;
     $957 = $956&1;
     if ($957) {
      $300 = ___cxa_find_matching_catch(-1,-1)|0;
      $301 = tempRet0;
      $335 = $914;$free206 = $free201;$lpad$phi$index = $300;$lpad$phi$index24 = $301;
      break L90;
     } else {
      // unreachable;
     }
     break;
    }
    case 357: {
     $1009 = HEAP32[$__err>>2]|0;
     $1010 = $1009 | 4;
     HEAP32[$__err>>2] = $1010;
     $$0 = 0;$1254 = $1267;$free208 = $free204;
     break;
    }
    case 379: {
     $1075 = HEAP32[$__err>>2]|0;
     $1076 = $1075 | 4;
     HEAP32[$__err>>2] = $1076;
     $$0 = 0;$1254 = $1267;$free208 = $free204;
     break;
    }
    case 382: {
     $1091 = (___cxa_allocate_exception(4)|0);
     HEAP32[$1091>>2] = ((15656 + 8|0));
     __THREW__ = 0;
     invoke_viii(379,($1091|0),(15712|0),(374|0));
     $1092 = __THREW__; __THREW__ = 0;
     $1093 = $1092&1;
     if ($1093) {
      $292 = ___cxa_find_matching_catch(-1,-1)|0;
      $293 = tempRet0;
      $335 = $1267;$free206 = $free204;$lpad$phi$index = $292;$lpad$phi$index24 = $293;
      break L90;
     } else {
      // unreachable;
     }
     break;
    }
    case 389: {
     $1098 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
     $1099 = tempRet0;
     ___clang_call_terminate($1098);
     // unreachable;
     break;
    }
    case 400: {
     $1139 = HEAP32[$__err>>2]|0;
     $1140 = $1139 | 4;
     HEAP32[$__err>>2] = $1140;
     $$0 = 0;$1254 = $1267;$free208 = $free204;
     break;
    }
    case 402: {
     $1143 = ($__trailing_sign$0$lcssa|0)==(0|0);
     L505: do {
      if (!($1143)) {
       $1144 = (($__trailing_sign$0$lcssa) + 1|0);
       $1145 = (($__trailing_sign$0$lcssa) + 8|0);
       $1146 = (($__trailing_sign$0$lcssa) + 4|0);
       $__e$sroa$0$22 = $__e$sroa$0$21;$__i$0 = 1;
       L507: while(1) {
        $1147 = HEAP8[$__trailing_sign$0$lcssa>>0]|0;
        $1148 = $1147 & 1;
        $1149 = ($1148<<24>>24)==(0);
        if ($1149) {
         $1151 = $1147&255;
         $1152 = $1151 >>> 1;
         $1154 = $1152;
        } else {
         $1150 = HEAP32[$1146>>2]|0;
         $1154 = $1150;
        }
        $1153 = ($__i$0>>>0)<($1154>>>0);
        if (!($1153)) {
         break L505;
        }
        $1155 = HEAP32[$__b>>2]|0;
        $1156 = ($1155|0)==(0|0);
        do {
         if ($1156) {
          $1170 = 0;
         } else {
          $1157 = (($1155) + 12|0);
          $1158 = HEAP32[$1157>>2]|0;
          $1159 = (($1155) + 16|0);
          $1160 = HEAP32[$1159>>2]|0;
          $1161 = ($1158|0)==($1160|0);
          if ($1161) {
           $1162 = HEAP32[$1155>>2]|0;
           $1163 = (($1162) + 36|0);
           $1164 = HEAP32[$1163>>2]|0;
           __THREW__ = 0;
           $1165 = (invoke_ii($1164|0,($1155|0))|0);
           $1166 = __THREW__; __THREW__ = 0;
           $1167 = $1166&1;
           if ($1167) {
            label = 85;
            break L507;
           }
           $1168 = ($1165|0)==(-1);
           if ($1168) {
            HEAP32[$__b>>2] = 0;
            $1170 = 0;
            break;
           } else {
            $$pre$i$i$i = HEAP32[$__b>>2]|0;
            $1170 = $$pre$i$i$i;
            break;
           }
          } else {
           $1170 = $1155;
          }
         }
        } while(0);
        $1169 = ($1170|0)==(0|0);
        $1171 = ($__e$sroa$0$22|0)==(0|0);
        do {
         if ($1171) {
          label = 419;
         } else {
          $1172 = (($__e$sroa$0$22) + 12|0);
          $1173 = HEAP32[$1172>>2]|0;
          $1174 = (($__e$sroa$0$22) + 16|0);
          $1175 = HEAP32[$1174>>2]|0;
          $1176 = ($1173|0)==($1175|0);
          if (!($1176)) {
           if ($1169) {
            $__e$sroa$0$24 = $__e$sroa$0$22;
            break;
           } else {
            label = 427;
            break L507;
           }
          }
          $1177 = HEAP32[$__e$sroa$0$22>>2]|0;
          $1178 = (($1177) + 36|0);
          $1179 = HEAP32[$1178>>2]|0;
          __THREW__ = 0;
          $1180 = (invoke_ii($1179|0,($__e$sroa$0$22|0))|0);
          $1181 = __THREW__; __THREW__ = 0;
          $1182 = $1181&1;
          if ($1182) {
           label = 85;
           break L507;
          }
          $1183 = ($1180|0)==(-1);
          if ($1183) {
           label = 419;
          } else {
           if ($1169) {
            $__e$sroa$0$24 = $__e$sroa$0$22;
           } else {
            label = 427;
            break L507;
           }
          }
         }
        } while(0);
        if ((label|0) == 419) {
         label = 0;
         if ($1169) {
          label = 427;
          break;
         } else {
          $__e$sroa$0$24 = 0;
         }
        }
        $1184 = HEAP32[$__b>>2]|0;
        $1185 = (($1184) + 12|0);
        $1186 = HEAP32[$1185>>2]|0;
        $1187 = (($1184) + 16|0);
        $1188 = HEAP32[$1187>>2]|0;
        $1189 = ($1186|0)==($1188|0);
        if ($1189) {
         $1190 = HEAP32[$1184>>2]|0;
         $1191 = (($1190) + 36|0);
         $1192 = HEAP32[$1191>>2]|0;
         __THREW__ = 0;
         $1193 = (invoke_ii($1192|0,($1184|0))|0);
         $1194 = __THREW__; __THREW__ = 0;
         $1195 = $1194&1;
         if ($1195) {
          label = 85;
          break;
         } else {
          $$0$i$i = $1193;
         }
        } else {
         $1196 = HEAP8[$1186>>0]|0;
         $1197 = $1196&255;
         $$0$i$i = $1197;
        }
        $1198 = $$0$i$i&255;
        $1199 = HEAP8[$__trailing_sign$0$lcssa>>0]|0;
        $1200 = $1199 & 1;
        $1201 = ($1200<<24>>24)==(0);
        if ($1201) {
         $1204 = $1144;
        } else {
         $1202 = HEAP32[$1145>>2]|0;
         $1204 = $1202;
        }
        $1203 = (($1204) + ($__i$0)|0);
        $1205 = HEAP8[$1203>>0]|0;
        $1206 = ($1198<<24>>24)==($1205<<24>>24);
        if (!($1206)) {
         label = 427;
         break;
        }
        $1209 = (($__i$0) + 1)|0;
        $1210 = HEAP32[$__b>>2]|0;
        $1211 = (($1210) + 12|0);
        $1212 = HEAP32[$1211>>2]|0;
        $1213 = (($1210) + 16|0);
        $1214 = HEAP32[$1213>>2]|0;
        $1215 = ($1212|0)==($1214|0);
        if ($1215) {
         $1216 = HEAP32[$1210>>2]|0;
         $1217 = (($1216) + 40|0);
         $1218 = HEAP32[$1217>>2]|0;
         __THREW__ = 0;
         (invoke_ii($1218|0,($1210|0))|0);
         $1219 = __THREW__; __THREW__ = 0;
         $1220 = $1219&1;
         if ($1220) {
          label = 85;
          break;
         } else {
          $__e$sroa$0$22 = $__e$sroa$0$24;$__i$0 = $1209;
          continue;
         }
        } else {
         $1221 = (($1212) + 1|0);
         HEAP32[$1211>>2] = $1221;
         $__e$sroa$0$22 = $__e$sroa$0$24;$__i$0 = $1209;
         continue;
        }
       }
       if ((label|0) == 85) {
        $284 = ___cxa_find_matching_catch(-1,-1)|0;
        $285 = tempRet0;
        $335 = $$lcssa293;$free206 = $free202$lcssa;$lpad$phi$index = $284;$lpad$phi$index24 = $285;
        break L90;
       }
       else if ((label|0) == 427) {
        $1207 = HEAP32[$__err>>2]|0;
        $1208 = $1207 | 4;
        HEAP32[$__err>>2] = $1208;
        $$0 = 0;$1254 = $$lcssa293;$free208 = $free202$lcssa;
        break L478;
       }
      }
     } while(0);
     $1222 = ($$lcssa293|0)==($$lcssa309|0);
     if ($1222) {
      $$0 = 1;$1254 = $$lcssa309;$free208 = $free202$lcssa;
     } else {
      HEAP32[$__et>>2] = 0;
      __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grp,$$lcssa293,$$lcssa309,$__et);
      $1223 = HEAP32[$__et>>2]|0;
      $1224 = ($1223|0)==(0);
      if ($1224) {
       $$0 = 1;$1254 = $$lcssa293;$free208 = $free202$lcssa;
      } else {
       $1225 = HEAP32[$__err>>2]|0;
       $1226 = $1225 | 4;
       HEAP32[$__err>>2] = $1226;
       $$0 = 0;$1254 = $$lcssa293;$free208 = $free202$lcssa;
      }
     }
     break;
    }
   }
   if ((label|0) == 87) {
    $288 = ___cxa_find_matching_catch(-1,-1)|0;
    $289 = tempRet0;
    $335 = $914;$free206 = $free201;$lpad$phi$index = $288;$lpad$phi$index24 = $289;
    break;
   }
   $1227 = HEAP8[$__spaces>>0]|0;
   $1228 = $1227 & 1;
   $1229 = ($1228<<24>>24)==(0);
   if (!($1229)) {
    $1230 = HEAP32[$247>>2]|0;
    $1231 = ($1230|0)==(0|0);
    if (!($1231)) {
     _free($1230);
    }
   }
   $1232 = HEAP8[$__nsn>>0]|0;
   $1233 = $1232 & 1;
   $1234 = ($1233<<24>>24)==(0);
   if (!($1234)) {
    $1235 = HEAP32[$237>>2]|0;
    $1236 = ($1235|0)==(0|0);
    if (!($1236)) {
     _free($1235);
    }
   }
   $1237 = HEAP8[$__psn>>0]|0;
   $1238 = $1237 & 1;
   $1239 = ($1238<<24>>24)==(0);
   if (!($1239)) {
    $1240 = HEAP32[$240>>2]|0;
    $1241 = ($1240|0)==(0|0);
    if (!($1241)) {
     _free($1240);
    }
   }
   $1242 = HEAP8[$__sym>>0]|0;
   $1243 = $1242 & 1;
   $1244 = ($1243<<24>>24)==(0);
   if (!($1244)) {
    $1245 = HEAP32[$244>>2]|0;
    $1246 = ($1245|0)==(0|0);
    if (!($1246)) {
     _free($1245);
    }
   }
   $1247 = HEAP8[$__grp>>0]|0;
   $1248 = $1247 & 1;
   $1249 = ($1248<<24>>24)==(0);
   if (!($1249)) {
    $1250 = (($__grp) + 8|0);
    $1251 = HEAP32[$1250>>2]|0;
    $1252 = ($1251|0)==(0|0);
    if (!($1252)) {
     _free($1251);
    }
   }
   $1253 = ($1254|0)==(0|0);
   if ($1253) {
    STACKTOP = sp;return ($$0|0);
   }
   __THREW__ = 0;
   invoke_vi($free208|0,($1254|0));
   $1255 = __THREW__; __THREW__ = 0;
   $1256 = $1255&1;
   if ($1256) {
    $1257 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
    $1258 = tempRet0;
    ___clang_call_terminate($1257);
    // unreachable;
   } else {
    STACKTOP = sp;return ($$0|0);
   }
  }
  else if ((label|0) == 94) {
   $302 = ___cxa_find_matching_catch(-1,-1)|0;
   $303 = tempRet0;
   $335 = $__gbuf;$free206 = 473;$lpad$phi$index = $302;$lpad$phi$index24 = $303;
  }
 } while(0);
 $304 = HEAP8[$__spaces>>0]|0;
 $305 = $304 & 1;
 $306 = ($305<<24>>24)==(0);
 if (!($306)) {
  $307 = (($__spaces) + 8|0);
  $308 = HEAP32[$307>>2]|0;
  $309 = ($308|0)==(0|0);
  if (!($309)) {
   _free($308);
  }
 }
 $310 = HEAP8[$__nsn>>0]|0;
 $311 = $310 & 1;
 $312 = ($311<<24>>24)==(0);
 if (!($312)) {
  $313 = (($__nsn) + 8|0);
  $314 = HEAP32[$313>>2]|0;
  $315 = ($314|0)==(0|0);
  if (!($315)) {
   _free($314);
  }
 }
 $316 = HEAP8[$__psn>>0]|0;
 $317 = $316 & 1;
 $318 = ($317<<24>>24)==(0);
 if (!($318)) {
  $319 = (($__psn) + 8|0);
  $320 = HEAP32[$319>>2]|0;
  $321 = ($320|0)==(0|0);
  if (!($321)) {
   _free($320);
  }
 }
 $322 = HEAP8[$__sym>>0]|0;
 $323 = $322 & 1;
 $324 = ($323<<24>>24)==(0);
 if (!($324)) {
  $325 = (($__sym) + 8|0);
  $326 = HEAP32[$325>>2]|0;
  $327 = ($326|0)==(0|0);
  if (!($327)) {
   _free($326);
  }
 }
 $328 = HEAP8[$__grp>>0]|0;
 $329 = $328 & 1;
 $330 = ($329<<24>>24)==(0);
 if (!($330)) {
  $331 = (($__grp) + 8|0);
  $332 = HEAP32[$331>>2]|0;
  $333 = ($332|0)==(0|0);
  if (!($333)) {
   _free($332);
  }
 }
 $334 = ($335|0)==(0|0);
 if ($334) {
  ___resumeException($lpad$phi$index|0);
  // unreachable;
 }
 __THREW__ = 0;
 invoke_vi($free206|0,($335|0));
 $336 = __THREW__; __THREW__ = 0;
 $337 = $336&1;
 if ($337) {
  $338 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
  $339 = tempRet0;
  ___clang_call_terminate($338);
  // unreachable;
 } else {
  ___resumeException($lpad$phi$index|0);
  // unreachable;
 }
 return 0|0;
}
function __ZNSt3__121__throw_runtime_errorEPKc($msg) {
 $msg = $msg|0;
 var $$size$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $eh$lpad$body$i$index14Z2D = 0, $eh$lpad$body$i$indexZ2D = 0, $eh$lpad$body2$index9Z2D = 0, $eh$lpad$body2$indexZ2D = 0, $lpad$phi$i$index = 0, $lpad$phi$i$index4 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___cxa_allocate_exception(8)|0);
 HEAP32[$0>>2] = ((3296 + 8|0));
 $1 = (_strlen(($msg|0))|0);
 $2 = (($1) + 13)|0;
 $3 = ($2|0)==(0);
 $$size$i = $3 ? 1 : $2;
 while(1) {
  $4 = (_malloc($$size$i)|0);
  $5 = ($4|0)==(0|0);
  if (!($5)) {
   label = 17;
   break;
  }
  $6 = HEAP32[15648>>2]|0;HEAP32[15648>>2] = (($6+0)|0);
  $7 = ($6|0)==(0);
  if ($7) {
   label = 10;
   break;
  }
  $8 = $6;
  __THREW__ = 0;
  invoke_v($8|0);
  $9 = __THREW__; __THREW__ = 0;
  $10 = $9&1;
  if ($10) {
   label = 5;
   break;
  }
 }
 do {
  if ((label|0) == 5) {
   $11 = ___cxa_find_matching_catch(-1,-1,15712|0)|0;
   $12 = tempRet0;
   $lpad$phi$i$index = $11;$lpad$phi$i$index4 = $12;
  }
  else if ((label|0) == 10) {
   $18 = (___cxa_allocate_exception(4)|0);
   HEAP32[$18>>2] = ((15656 + 8|0));
   __THREW__ = 0;
   invoke_viii(379,($18|0),(15712|0),(374|0));
   $19 = __THREW__; __THREW__ = 0;
   $20 = $19&1;
   if ($20) {
    $13 = ___cxa_find_matching_catch(-1,-1,15712|0)|0;
    $14 = tempRet0;
    $lpad$phi$i$index = $13;$lpad$phi$i$index4 = $14;
    break;
   } else {
    // unreachable;
   }
  }
  else if ((label|0) == 17) {
   $28 = (($0) + 4|0);
   $29 = (($1) + 1)|0;
   $30 = (($4) + 4|0);
   HEAP32[$30>>2] = $1;
   HEAP32[$4>>2] = $1;
   $31 = (($4) + 12|0);
   HEAP32[$28>>2] = $31;
   $32 = (($4) + 8|0);
   HEAP32[$32>>2] = 0;
   _memcpy(($31|0),($msg|0),($29|0))|0;
   ___cxa_throw(($0|0),(3440|0),(71|0));
   // unreachable;
  }
 } while(0);
 $15 = ($lpad$phi$i$index4|0)<(0);
 do {
  if ($15) {
   __THREW__ = 0;
   invoke_vi(380,($lpad$phi$i$index|0));
   $16 = __THREW__; __THREW__ = 0;
   $17 = $16&1;
   if ($17) {
    $21 = ___cxa_find_matching_catch(-1,-1,15712|0)|0;
    $22 = tempRet0;
    $eh$lpad$body2$index9Z2D = $22;$eh$lpad$body2$indexZ2D = $21;
    break;
   } else {
    // unreachable;
   }
  } else {
   $eh$lpad$body2$index9Z2D = $lpad$phi$i$index4;$eh$lpad$body2$indexZ2D = $lpad$phi$i$index;
  }
 } while(0);
 $23 = ($eh$lpad$body2$index9Z2D|0)<(0);
 if (!($23)) {
  $eh$lpad$body$i$index14Z2D = $eh$lpad$body2$index9Z2D;$eh$lpad$body$i$indexZ2D = $eh$lpad$body2$indexZ2D;
  __ZNSt9exceptionD2Ev(($0|0));
  ___cxa_free_exception(($0|0));
  ___resumeException($eh$lpad$body$i$indexZ2D|0);
  // unreachable;
 }
 __THREW__ = 0;
 invoke_vi(380,($eh$lpad$body2$indexZ2D|0));
 $24 = __THREW__; __THREW__ = 0;
 $25 = $24&1;
 if (!($25)) {
  // unreachable;
 }
 $26 = ___cxa_find_matching_catch(-1,-1)|0;
 $27 = tempRet0;
 $eh$lpad$body$i$index14Z2D = $27;$eh$lpad$body$i$indexZ2D = $26;
 __ZNSt9exceptionD2Ev(($0|0));
 ___cxa_free_exception(($0|0));
 ___resumeException($eh$lpad$body$i$indexZ2D|0);
 // unreachable;
}
function __ZNKSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIcS3_NS_9allocatorIcEEEE($agg$result,$this,$__b,$__e,$__intl,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__intl = $__intl|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$01$i = 0, $$pn$i = 0, $$pre = 0, $$pre$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
 var $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__cap$0$i = 0, $__neg = 0, $__p$0$i = 0, $__p$0$sum$pre$i = 0, $__p$0$sum$pre$phi$iZZZ2D = 0, $__p$02$i = 0;
 var $__p$i$i$i$i = 0, $__sz$0$i = 0, $__w$0$lcssa = 0, $__w$09 = 0, $__wb = 0, $__wbuf = 0, $__wn = 0, $phitmp$i$i = 0, $scevgep$i = 0, $scevgep3$i = 0, $scevgep4$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0;
 $__p$i$i$i$i = sp;
 $__wbuf = sp + 28|0;
 $__wb = sp + 16|0;
 $__wn = sp + 12|0;
 $__neg = sp + 24|0;
 HEAP32[$__wb>>2] = $__wbuf;
 $0 = (($__wb) + 4|0);
 HEAP32[$0>>2] = 473;
 $1 = (($__wbuf) + 100|0);
 $2 = (($__iob) + 28|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + 4|0);
 $5 = HEAP32[$4>>2]|0;HEAP32[$4>>2] = (($5+1)|0);
 $6 = HEAP32[6416>>2]|0;
 $7 = ($6|0)==(-1);
 if ($7) {
  label = 3;
 } else {
  HEAP32[$__p$i$i$i$i>>2] = 6416;
  $8 = (($__p$i$i$i$i) + 4|0);
  HEAP32[$8>>2] = (439);
  $9 = (($__p$i$i$i$i) + 8|0);
  HEAP32[$9>>2] = 0;
  __THREW__ = 0;
  invoke_vii(440,(6416|0),($__p$i$i$i$i|0));
  $10 = __THREW__; __THREW__ = 0;
  $11 = $10&1;
  if (!($11)) {
   label = 3;
  }
 }
 L3: do {
  if ((label|0) == 3) {
   $12 = HEAP32[((6416 + 4|0))>>2]|0;
   $13 = (($12) + -1)|0;
   $14 = (($3) + 12|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = (($3) + 8|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = $15;
   $19 = $17;
   $20 = (($18) - ($19))|0;
   $21 = $20 >> 2;
   $22 = ($21>>>0)>($13>>>0);
   if ($22) {
    $23 = (($17) + ($13<<2)|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = ($24|0)==(0|0);
    if (!($25)) {
     HEAP8[$__neg>>0] = 0;
     $29 = HEAP32[$__e>>2]|0;
     $30 = (($__iob) + 4|0);
     $31 = HEAP32[$30>>2]|0;
     __THREW__ = 0;
     $32 = (invoke_iiiiiiiiiiii(474,($__b|0),($29|0),($__intl|0),($3|0),($31|0),($__err|0),($__neg|0),($24|0),($__wb|0),($__wn|0),($1|0))|0);
     $33 = __THREW__; __THREW__ = 0;
     $34 = $33&1;
     if ($34) {
      break;
     }
     do {
      if ($32) {
       $35 = HEAP8[$__v>>0]|0;
       $36 = $35 & 1;
       $37 = ($36<<24>>24)==(0);
       if ($37) {
        $41 = (($__v) + 1|0);
        HEAP8[$41>>0] = 0;
        HEAP8[$__v>>0] = 0;
       } else {
        $38 = (($__v) + 8|0);
        $39 = HEAP32[$38>>2]|0;
        HEAP8[$39>>0] = 0;
        $40 = (($__v) + 4|0);
        HEAP32[$40>>2] = 0;
       }
       $42 = HEAP8[$__neg>>0]|0;
       $43 = ($42<<24>>24)==(0);
       if (!($43)) {
        $44 = HEAP32[$24>>2]|0;
        $45 = (($44) + 28|0);
        $46 = HEAP32[$45>>2]|0;
        __THREW__ = 0;
        $47 = (invoke_iii($46|0,($24|0),45)|0);
        $48 = __THREW__; __THREW__ = 0;
        $49 = $48&1;
        if ($49) {
         break L3;
        }
        $50 = HEAP8[$__v>>0]|0;
        $51 = $50 & 1;
        $52 = ($51<<24>>24)!=(0);
        if ($52) {
         $55 = HEAP32[$__v>>2]|0;
         $56 = $55 & -2;
         $57 = (($56) + -1)|0;
         $58 = (($__v) + 4|0);
         $59 = HEAP32[$58>>2]|0;
         $__cap$0$i = $57;$__sz$0$i = $59;
        } else {
         $53 = $50&255;
         $54 = $53 >>> 1;
         $__cap$0$i = 10;$__sz$0$i = $54;
        }
        $60 = ($__sz$0$i|0)==($__cap$0$i|0);
        if ($60) {
         __THREW__ = 0;
         invoke_viiiiii(476,($__v|0),($__cap$0$i|0),1,($__cap$0$i|0),($__cap$0$i|0),0);
         $61 = __THREW__; __THREW__ = 0;
         $62 = $61&1;
         if ($62) {
          break L3;
         }
         $63 = HEAP8[$__v>>0]|0;
         $64 = $63 & 1;
         $65 = ($64<<24>>24)==(0);
         if ($65) {
          label = 21;
         } else {
          label = 22;
         }
        } else {
         if ($52) {
          label = 22;
         } else {
          label = 21;
         }
        }
        if ((label|0) == 21) {
         $66 = (($__v) + 1|0);
         $67 = $__sz$0$i << 1;
         $68 = (($67) + 2)|0;
         $69 = $68&255;
         HEAP8[$__v>>0] = $69;
         $__p$0$sum$pre$i = (($__sz$0$i) + 1)|0;
         $$pn$i = $66;$__p$0$sum$pre$phi$iZZZ2D = $__p$0$sum$pre$i;
        }
        else if ((label|0) == 22) {
         $70 = (($__v) + 8|0);
         $71 = HEAP32[$70>>2]|0;
         $72 = (($__sz$0$i) + 1)|0;
         $73 = (($__v) + 4|0);
         HEAP32[$73>>2] = $72;
         $$pn$i = $71;$__p$0$sum$pre$phi$iZZZ2D = $72;
        }
        $__p$0$i = (($$pn$i) + ($__sz$0$i)|0);
        HEAP8[$__p$0$i>>0] = $47;
        $74 = (($$pn$i) + ($__p$0$sum$pre$phi$iZZZ2D)|0);
        HEAP8[$74>>0] = 0;
       }
       $75 = HEAP32[$24>>2]|0;
       $76 = (($75) + 28|0);
       $77 = HEAP32[$76>>2]|0;
       __THREW__ = 0;
       $78 = (invoke_iii($77|0,($24|0),48)|0);
       $79 = __THREW__; __THREW__ = 0;
       $80 = $79&1;
       if ($80) {
        break L3;
       }
       $81 = HEAP32[$__wb>>2]|0;
       $82 = HEAP32[$__wn>>2]|0;
       $83 = (($82) + -1|0);
       $84 = ($81>>>0)<($83>>>0);
       L32: do {
        if ($84) {
         $__w$09 = $81;
         while(1) {
          $87 = HEAP8[$__w$09>>0]|0;
          $88 = ($87<<24>>24)==($78<<24>>24);
          $86 = (($__w$09) + 1|0);
          if (!($88)) {
           $__w$0$lcssa = $__w$09;
           break L32;
          }
          $85 = ($86>>>0)<($83>>>0);
          if ($85) {
           $__w$09 = $86;
          } else {
           $__w$0$lcssa = $86;
           break;
          }
         }
        } else {
         $__w$0$lcssa = $81;
        }
       } while(0);
       $89 = $__w$0$lcssa;
       $90 = HEAP8[$__v>>0]|0;
       $91 = $90 & 1;
       $92 = ($91<<24>>24)==(0);
       if ($92) {
        $93 = $90&255;
        $94 = $93 >>> 1;
        $104 = 10;$105 = $94;$189 = $90;
       } else {
        $95 = (($__v) + 4|0);
        $96 = HEAP32[$95>>2]|0;
        $97 = HEAP32[$__v>>2]|0;
        $98 = $97 & -2;
        $phitmp$i$i = (($98) + -1)|0;
        $99 = $97&255;
        $104 = $phitmp$i$i;$105 = $96;$189 = $99;
       }
       $100 = $82;
       $101 = (($100) - ($89))|0;
       $102 = ($82|0)==($__w$0$lcssa|0);
       if (!($102)) {
        $103 = (($104) - ($105))|0;
        $106 = ($103>>>0)<($101>>>0);
        if ($106) {
         $107 = (($105) + ($101))|0;
         $108 = (($107) - ($104))|0;
         __THREW__ = 0;
         invoke_viiiiii(476,($__v|0),($104|0),($108|0),($105|0),($105|0),0);
         $109 = __THREW__; __THREW__ = 0;
         $110 = $109&1;
         if ($110) {
          break L3;
         }
         $$pre$i = HEAP8[$__v>>0]|0;
         $112 = $$pre$i;
        } else {
         $112 = $189;
        }
        $111 = $112 & 1;
        $113 = ($111<<24>>24)==(0);
        if ($113) {
         $116 = (($__v) + 1|0);
         $118 = $116;
        } else {
         $114 = (($__v) + 8|0);
         $115 = HEAP32[$114>>2]|0;
         $118 = $115;
        }
        $117 = (($118) + ($105)|0);
        $119 = (($105) - ($89))|0;
        $scevgep$i = (($82) + ($119)|0);
        $scevgep3$i = $scevgep$i;
        $$01$i = $__w$0$lcssa;$__p$02$i = $117;
        while(1) {
         $120 = HEAP8[$$01$i>>0]|0;
         HEAP8[$__p$02$i>>0] = $120;
         $121 = (($$01$i) + 1|0);
         $122 = ($121|0)==($82|0);
         if ($122) {
          break;
         }
         $123 = (($__p$02$i) + 1|0);
         $$01$i = $121;$__p$02$i = $123;
        }
        $scevgep4$i = (($118) + ($scevgep3$i)|0);
        HEAP8[$scevgep4$i>>0] = 0;
        $124 = (($105) + ($101))|0;
        $125 = HEAP8[$__v>>0]|0;
        $126 = $125 & 1;
        $127 = ($126<<24>>24)==(0);
        if ($127) {
         $129 = $124 << 1;
         $130 = $129&255;
         HEAP8[$__v>>0] = $130;
         break;
        } else {
         $128 = (($__v) + 4|0);
         HEAP32[$128>>2] = $124;
         break;
        }
       }
      }
     } while(0);
     $131 = HEAP32[$__b>>2]|0;
     $132 = ($131|0)==(0|0);
     if ($132) {
      $146 = 0;
     } else {
      $133 = (($131) + 12|0);
      $134 = HEAP32[$133>>2]|0;
      $135 = (($131) + 16|0);
      $136 = HEAP32[$135>>2]|0;
      $137 = ($134|0)==($136|0);
      if ($137) {
       $138 = HEAP32[$131>>2]|0;
       $139 = (($138) + 36|0);
       $140 = HEAP32[$139>>2]|0;
       __THREW__ = 0;
       $141 = (invoke_ii($140|0,($131|0))|0);
       $142 = __THREW__; __THREW__ = 0;
       $143 = $142&1;
       if ($143) {
        break;
       }
       $144 = ($141|0)==(-1);
       if ($144) {
        HEAP32[$__b>>2] = 0;
        $146 = 0;
       } else {
        $146 = $131;
       }
      } else {
       $146 = $131;
      }
     }
     $145 = ($146|0)==(0|0);
     $147 = ($29|0)==(0|0);
     do {
      if ($147) {
       label = 55;
      } else {
       $148 = (($29) + 12|0);
       $149 = HEAP32[$148>>2]|0;
       $150 = (($29) + 16|0);
       $151 = HEAP32[$150>>2]|0;
       $152 = ($149|0)==($151|0);
       if (!($152)) {
        if ($145) {
         break;
        } else {
         label = 57;
         break;
        }
       }
       $153 = HEAP32[$29>>2]|0;
       $154 = (($153) + 36|0);
       $155 = HEAP32[$154>>2]|0;
       __THREW__ = 0;
       $156 = (invoke_ii($155|0,($29|0))|0);
       $157 = __THREW__; __THREW__ = 0;
       $158 = $157&1;
       if ($158) {
        break L3;
       }
       $159 = ($156|0)==(-1);
       if ($159) {
        HEAP32[$__e>>2] = 0;
        label = 55;
        break;
       } else {
        if ($145) {
         break;
        } else {
         label = 57;
         break;
        }
       }
      }
     } while(0);
     if ((label|0) == 55) {
      if ($145) {
       label = 57;
      }
     }
     if ((label|0) == 57) {
      $160 = HEAP32[$__err>>2]|0;
      $161 = $160 | 2;
      HEAP32[$__err>>2] = $161;
     }
     HEAP32[$agg$result>>2] = $146;
     $162 = (($3) + 4|0);
     $163 = HEAP32[$162>>2]|0;HEAP32[$162>>2] = (($163+-1)|0);
     $164 = ($163|0)==(0);
     if ($164) {
      $165 = HEAP32[$3>>2]|0;
      $166 = (($165) + 8|0);
      $167 = HEAP32[$166>>2]|0;
      FUNCTION_TABLE_vi[$167 & 511]($3);
     }
     $168 = HEAP32[$__wb>>2]|0;
     HEAP32[$__wb>>2] = 0;
     $169 = ($168|0)==(0|0);
     if ($169) {
      STACKTOP = sp;return;
     }
     $170 = HEAP32[$0>>2]|0;
     __THREW__ = 0;
     invoke_vi($170|0,($168|0));
     $171 = __THREW__; __THREW__ = 0;
     $172 = $171&1;
     if ($172) {
      $173 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
      $174 = tempRet0;
      ___clang_call_terminate($173);
      // unreachable;
     } else {
      STACKTOP = sp;return;
     }
    }
   }
   $26 = (___cxa_allocate_exception(4)|0);
   HEAP32[$26>>2] = ((14256 + 8|0));
   __THREW__ = 0;
   invoke_viii(379,($26|0),(14336|0),(351|0));
   $27 = __THREW__; __THREW__ = 0;
   $28 = $27&1;
   if (!($28)) {
    // unreachable;
   }
  }
 } while(0);
 $175 = ___cxa_find_matching_catch(-1,-1)|0;
 $176 = tempRet0;
 $177 = (($3) + 4|0);
 $178 = HEAP32[$177>>2]|0;HEAP32[$177>>2] = (($178+-1)|0);
 $179 = ($178|0)==(0);
 if ($179) {
  $180 = HEAP32[$3>>2]|0;
  $181 = (($180) + 8|0);
  $182 = HEAP32[$181>>2]|0;
  FUNCTION_TABLE_vi[$182 & 511]($3);
 }
 $$pre = HEAP32[$__wb>>2]|0;
 HEAP32[$__wb>>2] = 0;
 $183 = ($$pre|0)==(0|0);
 if ($183) {
  ___resumeException($175|0);
  // unreachable;
 }
 $184 = HEAP32[$0>>2]|0;
 __THREW__ = 0;
 invoke_vi($184|0,($$pre|0));
 $185 = __THREW__; __THREW__ = 0;
 $186 = $185&1;
 if ($186) {
  $187 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
  $188 = tempRet0;
  ___clang_call_terminate($187);
  // unreachable;
 } else {
  ___resumeException($175|0);
  // unreachable;
 }
}
function __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$__g_end,$__err) {
 $__grouping = $__grouping|0;
 $__g = $__g|0;
 $__g_end = $__g_end|0;
 $__err = $__err|0;
 var $$012$i$i = 0, $$__ig$0 = 0, $$lcssa6 = 0, $$not = 0, $$not9 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__ig$011 = 0, $__r$012 = 0;
 var $or$cond = 0, $or$cond2 = 0, $or$cond2$lcssa = 0, $or$cond210 = 0, $or$cond213 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$__grouping>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $5 = $0&255;
  $6 = $5 >>> 1;
  $8 = $6;
 } else {
  $3 = (($__grouping) + 4|0);
  $4 = HEAP32[$3>>2]|0;
  $8 = $4;
 }
 $7 = ($8|0)==(0);
 if ($7) {
  STACKTOP = sp;return;
 }
 $9 = ($__g|0)==($__g_end|0);
 if ($9) {
  $19 = $0;
 } else {
  $10 = (($__g_end) + -4|0);
  $11 = ($10>>>0)>($__g>>>0);
  if ($11) {
   $$012$i$i = $__g;$14 = $10;
   while(1) {
    $12 = HEAP32[$$012$i$i>>2]|0;
    $13 = HEAP32[$14>>2]|0;
    HEAP32[$$012$i$i>>2] = $13;
    HEAP32[$14>>2] = $12;
    $15 = (($$012$i$i) + 4|0);
    $16 = (($14) + -4|0);
    $17 = ($15>>>0)<($16>>>0);
    if ($17) {
     $$012$i$i = $15;$14 = $16;
    } else {
     break;
    }
   }
   $$pre = HEAP8[$__grouping>>0]|0;
   $19 = $$pre;
  } else {
   $19 = $0;
  }
 }
 $18 = $19 & 1;
 $20 = ($18<<24>>24)==(0);
 if ($20) {
  $25 = (($__grouping) + 1|0);
  $26 = $19&255;
  $27 = $26 >>> 1;
  $31 = $25;$34 = $27;
 } else {
  $21 = (($__grouping) + 8|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($__grouping) + 4|0);
  $24 = HEAP32[$23>>2]|0;
  $31 = $22;$34 = $24;
 }
 $28 = (($__g_end) + -4|0);
 $29 = ($28>>>0)>($__g>>>0);
 $30 = HEAP8[$31>>0]|0;
 $$not9 = ($30<<24>>24)<(1);
 $32 = ($30<<24>>24)==(127);
 $or$cond210 = $$not9 | $32;
 L18: do {
  if ($29) {
   $33 = (($31) + ($34)|0);
   $35 = $33;
   $37 = $30;$__ig$011 = $31;$__r$012 = $__g;$or$cond213 = $or$cond210;
   while(1) {
    if (!($or$cond213)) {
     $36 = $37 << 24 >> 24;
     $38 = HEAP32[$__r$012>>2]|0;
     $39 = ($36|0)==($38|0);
     if (!($39)) {
      break;
     }
    }
    $40 = $__ig$011;
    $41 = (($35) - ($40))|0;
    $42 = ($41|0)>(1);
    $43 = (($__ig$011) + 1|0);
    $$__ig$0 = $42 ? $43 : $__ig$011;
    $44 = (($__r$012) + 4|0);
    $45 = ($44>>>0)<($28>>>0);
    $46 = HEAP8[$$__ig$0>>0]|0;
    $$not = ($46<<24>>24)<(1);
    $47 = ($46<<24>>24)==(127);
    $or$cond2 = $$not | $47;
    if ($45) {
     $37 = $46;$__ig$011 = $$__ig$0;$__r$012 = $44;$or$cond213 = $or$cond2;
    } else {
     $$lcssa6 = $46;$or$cond2$lcssa = $or$cond2;
     break L18;
    }
   }
   HEAP32[$__err>>2] = 4;
   STACKTOP = sp;return;
  } else {
   $$lcssa6 = $30;$or$cond2$lcssa = $or$cond210;
  }
 } while(0);
 if ($or$cond2$lcssa) {
  STACKTOP = sp;return;
 }
 $48 = $$lcssa6 << 24 >> 24;
 $49 = HEAP32[$28>>2]|0;
 $50 = ($48>>>0)<($49>>>0);
 $51 = ($49|0)==(0);
 $or$cond = $50 | $51;
 if (!($or$cond)) {
  STACKTOP = sp;return;
 }
 HEAP32[$__err>>2] = 4;
 STACKTOP = sp;return;
}
function __ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($this|0)==(0|0);
 if (!($0)) {
  _free($this);
 }
 STACKTOP = sp;return;
}
function __ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe($agg$result,$this,$__b,$__e,$__intl,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__intl = $__intl|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0 = 0, $$0$i$i$i$i = 0, $$0$i$i1$i$i = 0, $$0$lcssa$i = 0, $$01 = 0, $$01$i = 0, $$pre = 0, $$pre19 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0;
 var $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0;
 var $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $__atoms = 0, $__nbuf = 0, $__nc$0 = 0, $__nc$1 = 0, $__nc$2$lcssa = 0, $__nc$210 = 0, $__neg = 0, $__p$i$i$i$i = 0, $__w$011 = 0, $__wb = 0, $__wbuf = 0, $__wn = 0, $eh$lpad$body$i$index25Z2D = 0, $eh$lpad$body$i$indexZ2D = 0, $eh$lpad$body$index10Z2D = 0, $eh$lpad$body$indexZ2D = 0, $eh$lpad$body6$index20Z2D = 0, $eh$lpad$body6$indexZ2D = 0, $lpad$phi$i$index = 0;
 var $lpad$phi$i$index15 = 0, $vararg_buffer = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 592|0;
 $vararg_buffer = sp + 16|0;
 $__p$i$i$i$i = sp;
 $__wbuf = sp + 80|0;
 $__wb = sp + 72|0;
 $__wn = sp + 64|0;
 $__neg = sp + 580|0;
 $__atoms = sp + 24|0;
 $__nbuf = sp + 480|0;
 HEAP32[$__wb>>2] = $__wbuf;
 $0 = (($__wb) + 4|0);
 HEAP32[$0>>2] = 473;
 $1 = (($__wbuf) + 400|0);
 $2 = (($__iob) + 28|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + 4|0);
 $5 = HEAP32[$4>>2]|0;HEAP32[$4>>2] = (($5+1)|0);
 $6 = HEAP32[6408>>2]|0;
 $7 = ($6|0)==(-1);
 if ($7) {
  label = 3;
 } else {
  HEAP32[$__p$i$i$i$i>>2] = 6408;
  $8 = (($__p$i$i$i$i) + 4|0);
  HEAP32[$8>>2] = (439);
  $9 = (($__p$i$i$i$i) + 8|0);
  HEAP32[$9>>2] = 0;
  __THREW__ = 0;
  invoke_vii(440,(6408|0),($__p$i$i$i$i|0));
  $10 = __THREW__; __THREW__ = 0;
  $11 = $10&1;
  if ($11) {
   label = 14;
  } else {
   label = 3;
  }
 }
 L3: do {
  if ((label|0) == 3) {
   $12 = HEAP32[((6408 + 4|0))>>2]|0;
   $13 = (($12) + -1)|0;
   $14 = (($3) + 12|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = (($3) + 8|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = $15;
   $19 = $17;
   $20 = (($18) - ($19))|0;
   $21 = $20 >> 2;
   $22 = ($21>>>0)>($13>>>0);
   if ($22) {
    $23 = (($17) + ($13<<2)|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = ($24|0)==(0|0);
    if (!($25)) {
     HEAP8[$__neg>>0] = 0;
     $29 = HEAP32[$__e>>2]|0;
     $30 = (($__iob) + 4|0);
     $31 = HEAP32[$30>>2]|0;
     __THREW__ = 0;
     $32 = (invoke_iiiiiiiiiiii(478,($__b|0),($29|0),($__intl|0),($3|0),($31|0),($__err|0),($__neg|0),($24|0),($__wb|0),($__wn|0),($1|0))|0);
     $33 = __THREW__; __THREW__ = 0;
     $34 = $33&1;
     if ($34) {
      label = 14;
      break;
     }
     L9: do {
      if ($32) {
       $35 = HEAP32[$24>>2]|0;
       $36 = (($35) + 48|0);
       $37 = HEAP32[$36>>2]|0;
       __THREW__ = 0;
       (invoke_iiiii($37|0,($24|0),(6128|0),(((6128 + 10|0))|0),($__atoms|0))|0);
       $38 = __THREW__; __THREW__ = 0;
       $39 = $38&1;
       if ($39) {
        label = 14;
        break L3;
       }
       $40 = HEAP32[$__wn>>2]|0;
       $41 = HEAP32[$__wb>>2]|0;
       $42 = $40;
       $43 = $41;
       $44 = (($42) - ($43))|0;
       $45 = ($44|0)>(392);
       if ($45) {
        $46 = $44 >> 2;
        $47 = (($46) + 2)|0;
        $48 = (_malloc($47)|0);
        $49 = ($48|0)==(0|0);
        if ($49) {
         $50 = (___cxa_allocate_exception(4)|0);
         HEAP32[$50>>2] = ((15656 + 8|0));
         __THREW__ = 0;
         invoke_viii(379,($50|0),(15712|0),(374|0));
         $51 = __THREW__; __THREW__ = 0;
         $52 = $51&1;
         if ($52) {
          $171 = 0;
          label = 15;
         } else {
          // unreachable;
         }
        } else {
         $113 = $48;$__nc$0 = $48;
         label = 18;
        }
       } else {
        $113 = 0;$__nc$0 = $__nbuf;
        label = 18;
       }
       L16: do {
        if ((label|0) == 18) {
         $59 = HEAP8[$__neg>>0]|0;
         $60 = ($59<<24>>24)==(0);
         if ($60) {
          $__nc$1 = $__nc$0;
         } else {
          $61 = (($__nc$0) + 1|0);
          HEAP8[$__nc$0>>0] = 45;
          $__nc$1 = $61;
         }
         $62 = ($41>>>0)<($40>>>0);
         if ($62) {
          $63 = (($__atoms) + 40|0);
          $64 = $__atoms;
          $__nc$210 = $__nc$1;$__w$011 = $41;
          while(1) {
           $65 = HEAP32[$__w$011>>2]|0;
           $$01$i = $__atoms;
           while(1) {
            $68 = HEAP32[$$01$i>>2]|0;
            $69 = ($68|0)==($65|0);
            $67 = (($$01$i) + 4|0);
            if ($69) {
             $$0$lcssa$i = $$01$i;
             break;
            }
            $66 = ($67|0)==($63|0);
            if ($66) {
             $$0$lcssa$i = $63;
             break;
            } else {
             $$01$i = $67;
            }
           }
           $70 = $$0$lcssa$i;
           $71 = (($70) - ($64))|0;
           $72 = $71 >> 2;
           $73 = (6128 + ($72)|0);
           $74 = HEAP8[$73>>0]|0;
           HEAP8[$__nc$210>>0] = $74;
           $75 = (($__w$011) + 4|0);
           $76 = (($__nc$210) + 1|0);
           $77 = HEAP32[$__wn>>2]|0;
           $78 = ($75>>>0)<($77>>>0);
           if ($78) {
            $__nc$210 = $76;$__w$011 = $75;
           } else {
            $__nc$2$lcssa = $76;
            break;
           }
          }
         } else {
          $__nc$2$lcssa = $__nc$1;
         }
         HEAP8[$__nc$2$lcssa>>0] = 0;
         HEAP32[$vararg_buffer>>2] = $__v;
         $79 = (_sscanf($__nbuf,6064,$vararg_buffer)|0);
         $80 = ($79|0)==(1);
         if ($80) {
          $112 = ($113|0)==(0|0);
          if ($112) {
           break L9;
          }
          _free($113);
          break L9;
         }
         $81 = (___cxa_allocate_exception(8)|0);
         HEAP32[$81>>2] = ((3296 + 8|0));
         while(1) {
          $82 = (_malloc(28)|0);
          $83 = ($82|0)==(0|0);
          if (!($83)) {
           label = 43;
           break;
          }
          $84 = HEAP32[15648>>2]|0;HEAP32[15648>>2] = (($84+0)|0);
          $85 = ($84|0)==(0);
          if ($85) {
           label = 36;
           break;
          }
          $86 = $84;
          __THREW__ = 0;
          invoke_v($86|0);
          $87 = __THREW__; __THREW__ = 0;
          $88 = $87&1;
          if ($88) {
           label = 31;
           break;
          }
         }
         do {
          if ((label|0) == 31) {
           $89 = ___cxa_find_matching_catch(-1,-1,15712|0)|0;
           $90 = tempRet0;
           $lpad$phi$i$index = $89;$lpad$phi$i$index15 = $90;
          }
          else if ((label|0) == 36) {
           $96 = (___cxa_allocate_exception(4)|0);
           HEAP32[$96>>2] = ((15656 + 8|0));
           __THREW__ = 0;
           invoke_viii(379,($96|0),(15712|0),(374|0));
           $97 = __THREW__; __THREW__ = 0;
           $98 = $97&1;
           if ($98) {
            $91 = ___cxa_find_matching_catch(-1,-1,15712|0)|0;
            $92 = tempRet0;
            $lpad$phi$i$index = $91;$lpad$phi$i$index15 = $92;
            break;
           } else {
            // unreachable;
           }
          }
          else if ((label|0) == 43) {
           $106 = (($81) + 4|0);
           $107 = (($82) + 4|0);
           HEAP32[$107>>2] = 15;
           HEAP32[$82>>2] = 15;
           $108 = (($82) + 12|0);
           HEAP32[$106>>2] = $108;
           $109 = (($82) + 8|0);
           HEAP32[$109>>2] = 0;
           dest=$108+0|0; src=6072+0|0; stop=dest+16|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
           __THREW__ = 0;
           invoke_viii(379,($81|0),(3440|0),(71|0));
           $110 = __THREW__; __THREW__ = 0;
           $111 = $110&1;
           if ($111) {
            $171 = $113;
            label = 15;
            break L16;
           }
           // unreachable;
          }
         } while(0);
         $93 = ($lpad$phi$i$index15|0)<(0);
         do {
          if ($93) {
           __THREW__ = 0;
           invoke_vi(380,($lpad$phi$i$index|0));
           $94 = __THREW__; __THREW__ = 0;
           $95 = $94&1;
           if ($95) {
            $99 = ___cxa_find_matching_catch(-1,-1,15712|0)|0;
            $100 = tempRet0;
            $eh$lpad$body6$index20Z2D = $100;$eh$lpad$body6$indexZ2D = $99;
            break;
           } else {
            // unreachable;
           }
          } else {
           $eh$lpad$body6$index20Z2D = $lpad$phi$i$index15;$eh$lpad$body6$indexZ2D = $lpad$phi$i$index;
          }
         } while(0);
         $101 = ($eh$lpad$body6$index20Z2D|0)<(0);
         do {
          if ($101) {
           __THREW__ = 0;
           invoke_vi(380,($eh$lpad$body6$indexZ2D|0));
           $102 = __THREW__; __THREW__ = 0;
           $103 = $102&1;
           if ($103) {
            $104 = ___cxa_find_matching_catch(-1,-1)|0;
            $105 = tempRet0;
            $eh$lpad$body$i$index25Z2D = $105;$eh$lpad$body$i$indexZ2D = $104;
            break;
           } else {
            // unreachable;
           }
          } else {
           $eh$lpad$body$i$index25Z2D = $eh$lpad$body6$index20Z2D;$eh$lpad$body$i$indexZ2D = $eh$lpad$body6$indexZ2D;
          }
         } while(0);
         __ZNSt9exceptionD2Ev(($81|0));
         ___cxa_free_exception(($81|0));
         $58 = $113;$eh$lpad$body$index10Z2D = $eh$lpad$body$i$index25Z2D;$eh$lpad$body$indexZ2D = $eh$lpad$body$i$indexZ2D;
        }
       } while(0);
       if ((label|0) == 15) {
        $55 = ___cxa_find_matching_catch(-1,-1)|0;
        $56 = tempRet0;
        $58 = $171;$eh$lpad$body$index10Z2D = $56;$eh$lpad$body$indexZ2D = $55;
       }
       $57 = ($58|0)==(0|0);
       if ($57) {
        $$0 = $eh$lpad$body$indexZ2D;$$01 = $eh$lpad$body$index10Z2D;
        break L3;
       }
       _free($58);
       $$0 = $eh$lpad$body$indexZ2D;$$01 = $eh$lpad$body$index10Z2D;
       break L3;
      }
     } while(0);
     $114 = HEAP32[$__b>>2]|0;
     $115 = ($114|0)==(0|0);
     if ($115) {
      $146 = 0;$172 = 1;
     } else {
      $116 = (($114) + 12|0);
      $117 = HEAP32[$116>>2]|0;
      $118 = (($114) + 16|0);
      $119 = HEAP32[$118>>2]|0;
      $120 = ($117|0)==($119|0);
      if ($120) {
       $121 = HEAP32[$114>>2]|0;
       $122 = (($121) + 36|0);
       $123 = HEAP32[$122>>2]|0;
       __THREW__ = 0;
       $124 = (invoke_ii($123|0,($114|0))|0);
       $125 = __THREW__; __THREW__ = 0;
       $126 = $125&1;
       if ($126) {
        label = 14;
        break;
       } else {
        $$0$i$i$i$i = $124;
       }
      } else {
       $127 = HEAP32[$117>>2]|0;
       $$0$i$i$i$i = $127;
      }
      $128 = ($$0$i$i$i$i|0)==(-1);
      if ($128) {
       HEAP32[$__b>>2] = 0;
       $146 = 0;$172 = 1;
      } else {
       $146 = $114;$172 = 0;
      }
     }
     $129 = HEAP32[$__e>>2]|0;
     $130 = ($129|0)==(0|0);
     do {
      if ($130) {
       label = 60;
      } else {
       $131 = (($129) + 12|0);
       $132 = HEAP32[$131>>2]|0;
       $133 = (($129) + 16|0);
       $134 = HEAP32[$133>>2]|0;
       $135 = ($132|0)==($134|0);
       if ($135) {
        $136 = HEAP32[$129>>2]|0;
        $137 = (($136) + 36|0);
        $138 = HEAP32[$137>>2]|0;
        __THREW__ = 0;
        $139 = (invoke_ii($138|0,($129|0))|0);
        $140 = __THREW__; __THREW__ = 0;
        $141 = $140&1;
        if ($141) {
         label = 14;
         break L3;
        } else {
         $$0$i$i1$i$i = $139;
        }
       } else {
        $142 = HEAP32[$132>>2]|0;
        $$0$i$i1$i$i = $142;
       }
       $143 = ($$0$i$i1$i$i|0)==(-1);
       if ($143) {
        HEAP32[$__e>>2] = 0;
        label = 60;
        break;
       } else {
        if ($172) {
         break;
        } else {
         label = 62;
         break;
        }
       }
      }
     } while(0);
     if ((label|0) == 60) {
      if ($172) {
       label = 62;
      }
     }
     if ((label|0) == 62) {
      $144 = HEAP32[$__err>>2]|0;
      $145 = $144 | 2;
      HEAP32[$__err>>2] = $145;
     }
     HEAP32[$agg$result>>2] = $146;
     $147 = (($3) + 4|0);
     $148 = HEAP32[$147>>2]|0;HEAP32[$147>>2] = (($148+-1)|0);
     $149 = ($148|0)==(0);
     if ($149) {
      $150 = HEAP32[$3>>2]|0;
      $151 = (($150) + 8|0);
      $152 = HEAP32[$151>>2]|0;
      FUNCTION_TABLE_vi[$152 & 511]($3);
     }
     $153 = HEAP32[$__wb>>2]|0;
     HEAP32[$__wb>>2] = 0;
     $154 = ($153|0)==(0|0);
     if ($154) {
      STACKTOP = sp;return;
     }
     $155 = HEAP32[$0>>2]|0;
     __THREW__ = 0;
     invoke_vi($155|0,($153|0));
     $156 = __THREW__; __THREW__ = 0;
     $157 = $156&1;
     if ($157) {
      $158 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
      $159 = tempRet0;
      ___clang_call_terminate($158);
      // unreachable;
     } else {
      STACKTOP = sp;return;
     }
    }
   }
   $26 = (___cxa_allocate_exception(4)|0);
   HEAP32[$26>>2] = ((14256 + 8|0));
   __THREW__ = 0;
   invoke_viii(379,($26|0),(14336|0),(351|0));
   $27 = __THREW__; __THREW__ = 0;
   $28 = $27&1;
   if ($28) {
    label = 14;
   } else {
    // unreachable;
   }
  }
 } while(0);
 if ((label|0) == 14) {
  $53 = ___cxa_find_matching_catch(-1,-1)|0;
  $54 = tempRet0;
  $$0 = $53;$$01 = $54;
 }
 $160 = (($3) + 4|0);
 $161 = HEAP32[$160>>2]|0;HEAP32[$160>>2] = (($161+-1)|0);
 $162 = ($161|0)==(0);
 if ($162) {
  $163 = HEAP32[$3>>2]|0;
  $164 = (($163) + 8|0);
  $165 = HEAP32[$164>>2]|0;
  FUNCTION_TABLE_vi[$165 & 511]($3);
 }
 $$pre = HEAP32[$__wb>>2]|0;
 HEAP32[$__wb>>2] = 0;
 $166 = ($$pre|0)==(0|0);
 if ($166) {
  ___resumeException($$0|0);
  // unreachable;
 }
 $$pre19 = HEAP32[$0>>2]|0;
 __THREW__ = 0;
 invoke_vi($$pre19|0,($$pre|0));
 $167 = __THREW__; __THREW__ = 0;
 $168 = $167&1;
 if ($168) {
  $169 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
  $170 = tempRet0;
  ___clang_call_terminate($169);
  // unreachable;
 } else {
  ___resumeException($$0|0);
  // unreachable;
 }
}
function __ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIwEERNS_10unique_ptrIwPFvPvEEERPwSM_($__b,$__e$0,$__intl,$__loc$0$0$val,$__flags,$__err,$__neg,$__ct,$__wb,$__wn,$__we) {
 $__b = $__b|0;
 $__e$0 = $__e$0|0;
 $__intl = $__intl|0;
 $__loc$0$0$val = $__loc$0$0$val|0;
 $__flags = $__flags|0;
 $__err = $__err|0;
 $__neg = $__neg|0;
 $__ct = $__ct|0;
 $__wb = $__wb|0;
 $__wn = $__wn|0;
 $__we = $__we|0;
 var $$ = 0, $$$i = 0, $$$i138 = 0, $$$i149 = 0, $$$i159 = 0, $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i123 = 0, $$0$i$i$i$i177 = 0, $$0$i$i$i$i18 = 0, $$0$i$i$i$i192 = 0, $$0$i$i$i$i39 = 0, $$0$i$i$i$i89 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i129 = 0, $$0$i$i1$i$i183 = 0, $$0$i$i1$i$i198 = 0, $$0$i$i1$i$i24 = 0, $$0$i$i1$i$i45 = 0;
 var $$0$i$i1$i$i95 = 0, $$0$i$i104 = 0, $$0$i$i113 = 0, $$0$i$i117 = 0, $$0$i$i173 = 0, $$0$i$i207 = 0, $$0$i$i33 = 0, $$0$i$i37 = 0, $$0$i$i54 = 0, $$0$i$i59 = 0, $$0$i$i64 = 0, $$0$i$i71 = 0, $$0$i$i79 = 0, $$0$i$i83 = 0, $$477 = 0, $$478 = 0, $$479 = 0, $$480 = 0, $$481 = 0, $$lcssa313 = 0;
 var $$lcssa330 = 0, $$ph$ph$ph = 0, $$ph$ph251$ph$ph$ph$ph$ph$ph = 0, $$phi$trans$insert = 0, $$phi$trans$insert14 = 0, $$pn$i = 0, $$pn$i32 = 0, $$pr$i = 0, $$pr$i162 = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i$i = 0, $$pre$i$i$i125 = 0, $$pre$i$i$i179 = 0, $$pre$i$i$i194 = 0, $$pre$i$i$i20 = 0, $$pre$i$i$i41 = 0, $$pre$i$i$i91 = 0, $$pre$i163 = 0, $$pre$i3$i$i200 = 0;
 var $$pre$i3$i$i200455 = 0, $$pre$i3$i$i200456 = 0, $$pre$i3$i$i47 = 0, $$pre$i3$i$i47452 = 0, $$pre$i3$i$i47454 = 0, $$pre$i3$i$i97 = 0, $$pre$i3$i$i97459$ph = 0, $$pre$i3$i$i97459475 = 0, $$pre12 = 0, $$pre13 = 0, $$pre15 = 0, $$pre465 = 0, $$pre466 = 0, $$pre467 = 0, $$pre468 = 0, $$pre469 = 0, $$pre470 = 0, $$sum = 0, $$sum471 = 0, $0 = 0;
 var $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0;
 var $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0;
 var $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0;
 var $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0;
 var $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0, $1088 = 0;
 var $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0, $1105 = 0;
 var $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0, $1123 = 0;
 var $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0, $1141 = 0;
 var $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0, $116 = 0;
 var $1160 = 0, $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0, $1178 = 0;
 var $1179 = 0, $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0, $1196 = 0;
 var $1197 = 0, $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0, $1213 = 0;
 var $1214 = 0, $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0, $1231 = 0;
 var $1232 = 0, $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0, $1249 = 0, $125 = 0;
 var $1250 = 0, $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0, $1257 = 0, $1258 = 0, $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0, $1266 = 0, $1267 = 0, $1268 = 0;
 var $1269 = 0, $127 = 0, $1270 = 0, $1271 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0;
 var $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0;
 var $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0;
 var $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0;
 var $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0;
 var $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0;
 var $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0;
 var $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0;
 var $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0;
 var $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0;
 var $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0;
 var $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0;
 var $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0;
 var $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0;
 var $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0;
 var $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0;
 var $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0;
 var $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0;
 var $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0;
 var $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0;
 var $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0;
 var $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0;
 var $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0;
 var $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0;
 var $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0;
 var $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0;
 var $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0;
 var $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0;
 var $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0;
 var $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0;
 var $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0;
 var $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0;
 var $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0;
 var $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0;
 var $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0;
 var $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0;
 var $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0;
 var $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0;
 var $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0;
 var $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0;
 var $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0;
 var $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0;
 var $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0;
 var $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0;
 var $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0;
 var $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0;
 var $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0;
 var $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $__cap$0$i = 0, $__cap$0$i28 = 0, $__dp$0 = 0, $__e$sroa$0$0 = 0, $__e$sroa$0$10 = 0, $__e$sroa$0$12 = 0, $__e$sroa$0$13 = 0, $__e$sroa$0$15 = 0, $__e$sroa$0$16 = 0;
 var $__e$sroa$0$17 = 0, $__e$sroa$0$18 = 0, $__e$sroa$0$19 = 0, $__e$sroa$0$2 = 0, $__e$sroa$0$20 = 0, $__e$sroa$0$21 = 0, $__e$sroa$0$22 = 0, $__e$sroa$0$24 = 0, $__e$sroa$0$3 = 0, $__e$sroa$0$4 = 0, $__e$sroa$0$5 = 0, $__e$sroa$0$6 = 0, $__e$sroa$0$7 = 0, $__e$sroa$0$8 = 0, $__e$sroa$0$9 = 0, $__et = 0, $__fd$0 = 0, $__fd$1 = 0, $__fd$2 = 0, $__gbuf = 0;
 var $__grp = 0, $__i$0 = 0, $__ng$0 = 0, $__ng$1 = 0, $__nsn = 0, $__nsn$__trailing_sign$0 = 0, $__nsn$__trailing_sign$06 = 0, $__p$0$i = 0, $__p$0$i33 = 0, $__p$0$sum$pre$i = 0, $__p$0$sum$pre$i30 = 0, $__p$0$sum$pre$phi$i31ZZZ2D = 0, $__p$0$sum$pre$phi$iZZZ2D = 0, $__p$0377 = 0, $__p$i$i$i$i$i = 0, $__p$i$i$i$i6$i = 0, $__pat = 0, $__psn = 0, $__psn$__trailing_sign$0 = 0, $__psn$__trailing_sign$05 = 0;
 var $__spaces = 0, $__sym = 0, $__sz$0$i = 0, $__sz$0$i29 = 0, $__trailing_sign$0$lcssa = 0, $__trailing_sign$0379 = 0, $__trailing_sign$1 = 0, $__ts$0 = 0, $brmerge = 0, $cond = 0, $free = 0, $free226 = 0, $free227 = 0, $free228$lcssa = 0, $free228372 = 0, $free229 = 0, $free230 = 0, $free231 = 0, $free232 = 0, $free232$ph$ph$ph = 0;
 var $free232$ph$ph250$ph$ph$ph$ph$ph$ph = 0, $free234 = 0, $lpad$phi$index = 0, $lpad$phi$index30 = 0, $or$cond = 0, $or$cond19 = 0, $or$cond7 = 0, $or$cond7$not = 0, $or$cond8 = 0, $phitmp$i$i$i = 0, $phitmp$i$i$i126 = 0, $phitmp$i$i$i180 = 0, $phitmp$i$i$i195 = 0, $phitmp$i$i$i21 = 0, $phitmp$i$i$i42 = 0, $phitmp$i$i$i92 = 0, $phitmp$i4$i$i201 = 0, $phitmp$i4$i$i48 = 0, $phitmp$i4$i$i98 = 0, $storemerge$i = 0;
 var $switch = 0, $tmp$i$i100 = 0, $tmp$i$i203 = 0, $tmp$i$i50 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 608|0;
 $__p$i$i$i$i6$i = sp + 16|0;
 $__p$i$i$i$i$i = sp;
 $0 = sp + 596|0;
 $1 = sp + 584|0;
 $2 = sp + 572|0;
 $3 = sp + 560|0;
 $4 = sp + 548|0;
 $5 = sp + 544|0;
 $6 = sp + 532|0;
 $7 = sp + 520|0;
 $8 = sp + 508|0;
 $9 = sp + 496|0;
 $__gbuf = sp + 96|0;
 $__pat = sp + 92|0;
 $__grp = sp + 80|0;
 $__sym = sp + 68|0;
 $__psn = sp + 56|0;
 $__nsn = sp + 44|0;
 $__spaces = sp + 32|0;
 $__et = sp + 28|0;
 HEAP32[$__pat>>2] = 0;
 ;HEAP32[$__grp+0>>2]=0|0;HEAP32[$__grp+4>>2]=0|0;HEAP32[$__grp+8>>2]=0|0;
 ;HEAP32[$__sym+0>>2]=0|0;HEAP32[$__sym+4>>2]=0|0;HEAP32[$__sym+8>>2]=0|0;
 ;HEAP32[$__psn+0>>2]=0|0;HEAP32[$__psn+4>>2]=0|0;HEAP32[$__psn+8>>2]=0|0;
 ;HEAP32[$__nsn+0>>2]=0|0;HEAP32[$__nsn+4>>2]=0|0;HEAP32[$__nsn+8>>2]=0|0;
 ;HEAP32[$__spaces+0>>2]=0|0;HEAP32[$__spaces+4>>2]=0|0;HEAP32[$__spaces+8>>2]=0|0;
 do {
  if ($__intl) {
   $10 = HEAP32[6000>>2]|0;
   $11 = ($10|0)==(-1);
   if (!($11)) {
    HEAP32[$__p$i$i$i$i$i>>2] = 6000;
    $12 = (($__p$i$i$i$i$i) + 4|0);
    HEAP32[$12>>2] = (439);
    $13 = (($__p$i$i$i$i$i) + 8|0);
    HEAP32[$13>>2] = 0;
    __THREW__ = 0;
    invoke_vii(440,(6000|0),($__p$i$i$i$i$i|0));
    $14 = __THREW__; __THREW__ = 0;
    $15 = $14&1;
    if ($15) {
     label = 96;
     break;
    }
   }
   $16 = HEAP32[((6000 + 4|0))>>2]|0;
   $17 = (($16) + -1)|0;
   $18 = (($__loc$0$0$val) + 12|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = (($__loc$0$0$val) + 8|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = $19;
   $23 = $21;
   $24 = (($22) - ($23))|0;
   $25 = $24 >> 2;
   $26 = ($25>>>0)>($17>>>0);
   if ($26) {
    $27 = (($21) + ($17<<2)|0);
    $28 = HEAP32[$27>>2]|0;
    $29 = ($28|0)==(0|0);
    if (!($29)) {
     $33 = HEAP32[$28>>2]|0;
     $34 = (($33) + 44|0);
     $35 = HEAP32[$34>>2]|0;
     __THREW__ = 0;
     invoke_vii($35|0,($0|0),($28|0));
     $36 = __THREW__; __THREW__ = 0;
     $37 = $36&1;
     if ($37) {
      label = 96;
      break;
     }
     $38 = HEAP32[$0>>2]|0;
     HEAP32[$__pat>>2] = $38;
     $39 = HEAP32[$28>>2]|0;
     $40 = (($39) + 32|0);
     $41 = HEAP32[$40>>2]|0;
     __THREW__ = 0;
     invoke_vii($41|0,($1|0),($28|0));
     $42 = __THREW__; __THREW__ = 0;
     $43 = $42&1;
     if ($43) {
      label = 96;
      break;
     }
     $44 = HEAP8[$__nsn>>0]|0;
     $45 = $44 & 1;
     $46 = ($45<<24>>24)==(0);
     if ($46) {
      $50 = (($__nsn) + 4|0);
      HEAP32[$50>>2] = 0;
      HEAP8[$__nsn>>0] = 0;
     } else {
      $47 = (($__nsn) + 8|0);
      $48 = HEAP32[$47>>2]|0;
      HEAP32[$48>>2] = 0;
      $49 = (($__nsn) + 4|0);
      HEAP32[$49>>2] = 0;
     }
     __THREW__ = 0;
     invoke_vi(479,($__nsn|0));
     $51 = __THREW__; __THREW__ = 0;
     $52 = $51&1;
     if ($52) {
      $53 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
      $54 = tempRet0;
      ___clang_call_terminate($53);
      // unreachable;
     }
     ;HEAP32[$__nsn+0>>2]=HEAP32[$1+0>>2]|0;HEAP32[$__nsn+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$__nsn+8>>2]=HEAP32[$1+8>>2]|0;
     ;HEAP32[$1+0>>2]=0|0;HEAP32[$1+4>>2]=0|0;HEAP32[$1+8>>2]=0|0;
     $55 = HEAP32[$28>>2]|0;
     $56 = (($55) + 28|0);
     $57 = HEAP32[$56>>2]|0;
     __THREW__ = 0;
     invoke_vii($57|0,($2|0),($28|0));
     $58 = __THREW__; __THREW__ = 0;
     $59 = $58&1;
     if ($59) {
      label = 96;
      break;
     }
     $60 = HEAP8[$__psn>>0]|0;
     $61 = $60 & 1;
     $62 = ($61<<24>>24)==(0);
     if ($62) {
      $66 = (($__psn) + 4|0);
      HEAP32[$66>>2] = 0;
      HEAP8[$__psn>>0] = 0;
     } else {
      $63 = (($__psn) + 8|0);
      $64 = HEAP32[$63>>2]|0;
      HEAP32[$64>>2] = 0;
      $65 = (($__psn) + 4|0);
      HEAP32[$65>>2] = 0;
     }
     __THREW__ = 0;
     invoke_vi(479,($__psn|0));
     $67 = __THREW__; __THREW__ = 0;
     $68 = $67&1;
     if ($68) {
      $69 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
      $70 = tempRet0;
      ___clang_call_terminate($69);
      // unreachable;
     }
     ;HEAP32[$__psn+0>>2]=HEAP32[$2+0>>2]|0;HEAP32[$__psn+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$__psn+8>>2]=HEAP32[$2+8>>2]|0;
     ;HEAP32[$2+0>>2]=0|0;HEAP32[$2+4>>2]=0|0;HEAP32[$2+8>>2]=0|0;
     $71 = HEAP32[$28>>2]|0;
     $72 = (($71) + 12|0);
     $73 = HEAP32[$72>>2]|0;
     __THREW__ = 0;
     $74 = (invoke_ii($73|0,($28|0))|0);
     $75 = __THREW__; __THREW__ = 0;
     $76 = $75&1;
     if ($76) {
      label = 96;
      break;
     }
     $77 = HEAP32[$28>>2]|0;
     $78 = (($77) + 16|0);
     $79 = HEAP32[$78>>2]|0;
     __THREW__ = 0;
     $80 = (invoke_ii($79|0,($28|0))|0);
     $81 = __THREW__; __THREW__ = 0;
     $82 = $81&1;
     if ($82) {
      label = 96;
      break;
     }
     $83 = HEAP32[$28>>2]|0;
     $84 = (($83) + 20|0);
     $85 = HEAP32[$84>>2]|0;
     __THREW__ = 0;
     invoke_vii($85|0,($3|0),($28|0));
     $86 = __THREW__; __THREW__ = 0;
     $87 = $86&1;
     if ($87) {
      label = 96;
      break;
     }
     $88 = HEAP8[$__grp>>0]|0;
     $89 = $88 & 1;
     $90 = ($89<<24>>24)==(0);
     if ($90) {
      $94 = (($__grp) + 1|0);
      HEAP8[$94>>0] = 0;
      HEAP8[$__grp>>0] = 0;
     } else {
      $91 = (($__grp) + 8|0);
      $92 = HEAP32[$91>>2]|0;
      HEAP8[$92>>0] = 0;
      $93 = (($__grp) + 4|0);
      HEAP32[$93>>2] = 0;
     }
     __THREW__ = 0;
     invoke_vi(475,($__grp|0));
     $95 = __THREW__; __THREW__ = 0;
     $96 = $95&1;
     if ($96) {
      $97 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
      $98 = tempRet0;
      ___clang_call_terminate($97);
      // unreachable;
     }
     ;HEAP32[$__grp+0>>2]=HEAP32[$3+0>>2]|0;HEAP32[$__grp+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$__grp+8>>2]=HEAP32[$3+8>>2]|0;
     ;HEAP32[$3+0>>2]=0|0;HEAP32[$3+4>>2]=0|0;HEAP32[$3+8>>2]=0|0;
     $99 = HEAP32[$28>>2]|0;
     $100 = (($99) + 24|0);
     $101 = HEAP32[$100>>2]|0;
     __THREW__ = 0;
     invoke_vii($101|0,($4|0),($28|0));
     $102 = __THREW__; __THREW__ = 0;
     $103 = $102&1;
     if ($103) {
      label = 96;
      break;
     }
     $104 = HEAP8[$__sym>>0]|0;
     $105 = $104 & 1;
     $106 = ($105<<24>>24)==(0);
     if ($106) {
      $110 = (($__sym) + 4|0);
      HEAP32[$110>>2] = 0;
      HEAP8[$__sym>>0] = 0;
     } else {
      $107 = (($__sym) + 8|0);
      $108 = HEAP32[$107>>2]|0;
      HEAP32[$108>>2] = 0;
      $109 = (($__sym) + 4|0);
      HEAP32[$109>>2] = 0;
     }
     __THREW__ = 0;
     invoke_vi(479,($__sym|0));
     $111 = __THREW__; __THREW__ = 0;
     $112 = $111&1;
     if ($112) {
      $113 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
      $114 = tempRet0;
      ___clang_call_terminate($113);
      // unreachable;
     } else {
      ;HEAP32[$__sym+0>>2]=HEAP32[$4+0>>2]|0;HEAP32[$__sym+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$__sym+8>>2]=HEAP32[$4+8>>2]|0;
      ;HEAP32[$4+0>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;
      $115 = HEAP32[$28>>2]|0;
      $116 = (($115) + 36|0);
      $117 = HEAP32[$116>>2]|0;
      __THREW__ = 0;
      $118 = (invoke_ii($117|0,($28|0))|0);
      $119 = __THREW__; __THREW__ = 0;
      $120 = $119&1;
      if ($120) {
       label = 96;
       break;
      } else {
       $__dp$0 = $74;$__ts$0 = $80;$storemerge$i = $118;
       label = 70;
       break;
      }
     }
    }
   }
   $30 = (___cxa_allocate_exception(4)|0);
   HEAP32[$30>>2] = ((14256 + 8|0));
   __THREW__ = 0;
   invoke_viii(379,($30|0),(14336|0),(351|0));
   $31 = __THREW__; __THREW__ = 0;
   $32 = $31&1;
   if ($32) {
    label = 96;
   } else {
    // unreachable;
   }
  } else {
   $121 = HEAP32[5936>>2]|0;
   $122 = ($121|0)==(-1);
   if (!($122)) {
    HEAP32[$__p$i$i$i$i6$i>>2] = 5936;
    $123 = (($__p$i$i$i$i6$i) + 4|0);
    HEAP32[$123>>2] = (439);
    $124 = (($__p$i$i$i$i6$i) + 8|0);
    HEAP32[$124>>2] = 0;
    __THREW__ = 0;
    invoke_vii(440,(5936|0),($__p$i$i$i$i6$i|0));
    $125 = __THREW__; __THREW__ = 0;
    $126 = $125&1;
    if ($126) {
     label = 96;
     break;
    }
   }
   $127 = HEAP32[((5936 + 4|0))>>2]|0;
   $128 = (($127) + -1)|0;
   $129 = (($__loc$0$0$val) + 12|0);
   $130 = HEAP32[$129>>2]|0;
   $131 = (($__loc$0$0$val) + 8|0);
   $132 = HEAP32[$131>>2]|0;
   $133 = $130;
   $134 = $132;
   $135 = (($133) - ($134))|0;
   $136 = $135 >> 2;
   $137 = ($136>>>0)>($128>>>0);
   if ($137) {
    $138 = (($132) + ($128<<2)|0);
    $139 = HEAP32[$138>>2]|0;
    $140 = ($139|0)==(0|0);
    if (!($140)) {
     $144 = HEAP32[$139>>2]|0;
     $145 = (($144) + 44|0);
     $146 = HEAP32[$145>>2]|0;
     __THREW__ = 0;
     invoke_vii($146|0,($5|0),($139|0));
     $147 = __THREW__; __THREW__ = 0;
     $148 = $147&1;
     if ($148) {
      label = 96;
      break;
     }
     $149 = HEAP32[$5>>2]|0;
     HEAP32[$__pat>>2] = $149;
     $150 = HEAP32[$139>>2]|0;
     $151 = (($150) + 32|0);
     $152 = HEAP32[$151>>2]|0;
     __THREW__ = 0;
     invoke_vii($152|0,($6|0),($139|0));
     $153 = __THREW__; __THREW__ = 0;
     $154 = $153&1;
     if ($154) {
      label = 96;
      break;
     }
     $155 = HEAP8[$__nsn>>0]|0;
     $156 = $155 & 1;
     $157 = ($156<<24>>24)==(0);
     if ($157) {
      $161 = (($__nsn) + 4|0);
      HEAP32[$161>>2] = 0;
      HEAP8[$__nsn>>0] = 0;
     } else {
      $158 = (($__nsn) + 8|0);
      $159 = HEAP32[$158>>2]|0;
      HEAP32[$159>>2] = 0;
      $160 = (($__nsn) + 4|0);
      HEAP32[$160>>2] = 0;
     }
     __THREW__ = 0;
     invoke_vi(479,($__nsn|0));
     $162 = __THREW__; __THREW__ = 0;
     $163 = $162&1;
     if ($163) {
      $164 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
      $165 = tempRet0;
      ___clang_call_terminate($164);
      // unreachable;
     }
     ;HEAP32[$__nsn+0>>2]=HEAP32[$6+0>>2]|0;HEAP32[$__nsn+4>>2]=HEAP32[$6+4>>2]|0;HEAP32[$__nsn+8>>2]=HEAP32[$6+8>>2]|0;
     ;HEAP32[$6+0>>2]=0|0;HEAP32[$6+4>>2]=0|0;HEAP32[$6+8>>2]=0|0;
     $166 = HEAP32[$139>>2]|0;
     $167 = (($166) + 28|0);
     $168 = HEAP32[$167>>2]|0;
     __THREW__ = 0;
     invoke_vii($168|0,($7|0),($139|0));
     $169 = __THREW__; __THREW__ = 0;
     $170 = $169&1;
     if ($170) {
      label = 96;
      break;
     }
     $171 = HEAP8[$__psn>>0]|0;
     $172 = $171 & 1;
     $173 = ($172<<24>>24)==(0);
     if ($173) {
      $177 = (($__psn) + 4|0);
      HEAP32[$177>>2] = 0;
      HEAP8[$__psn>>0] = 0;
     } else {
      $174 = (($__psn) + 8|0);
      $175 = HEAP32[$174>>2]|0;
      HEAP32[$175>>2] = 0;
      $176 = (($__psn) + 4|0);
      HEAP32[$176>>2] = 0;
     }
     __THREW__ = 0;
     invoke_vi(479,($__psn|0));
     $178 = __THREW__; __THREW__ = 0;
     $179 = $178&1;
     if ($179) {
      $180 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
      $181 = tempRet0;
      ___clang_call_terminate($180);
      // unreachable;
     }
     ;HEAP32[$__psn+0>>2]=HEAP32[$7+0>>2]|0;HEAP32[$__psn+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$__psn+8>>2]=HEAP32[$7+8>>2]|0;
     ;HEAP32[$7+0>>2]=0|0;HEAP32[$7+4>>2]=0|0;HEAP32[$7+8>>2]=0|0;
     $182 = HEAP32[$139>>2]|0;
     $183 = (($182) + 12|0);
     $184 = HEAP32[$183>>2]|0;
     __THREW__ = 0;
     $185 = (invoke_ii($184|0,($139|0))|0);
     $186 = __THREW__; __THREW__ = 0;
     $187 = $186&1;
     if ($187) {
      label = 96;
      break;
     }
     $188 = HEAP32[$139>>2]|0;
     $189 = (($188) + 16|0);
     $190 = HEAP32[$189>>2]|0;
     __THREW__ = 0;
     $191 = (invoke_ii($190|0,($139|0))|0);
     $192 = __THREW__; __THREW__ = 0;
     $193 = $192&1;
     if ($193) {
      label = 96;
      break;
     }
     $194 = HEAP32[$139>>2]|0;
     $195 = (($194) + 20|0);
     $196 = HEAP32[$195>>2]|0;
     __THREW__ = 0;
     invoke_vii($196|0,($8|0),($139|0));
     $197 = __THREW__; __THREW__ = 0;
     $198 = $197&1;
     if ($198) {
      label = 96;
      break;
     }
     $199 = HEAP8[$__grp>>0]|0;
     $200 = $199 & 1;
     $201 = ($200<<24>>24)==(0);
     if ($201) {
      $205 = (($__grp) + 1|0);
      HEAP8[$205>>0] = 0;
      HEAP8[$__grp>>0] = 0;
     } else {
      $202 = (($__grp) + 8|0);
      $203 = HEAP32[$202>>2]|0;
      HEAP8[$203>>0] = 0;
      $204 = (($__grp) + 4|0);
      HEAP32[$204>>2] = 0;
     }
     __THREW__ = 0;
     invoke_vi(475,($__grp|0));
     $206 = __THREW__; __THREW__ = 0;
     $207 = $206&1;
     if ($207) {
      $208 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
      $209 = tempRet0;
      ___clang_call_terminate($208);
      // unreachable;
     }
     ;HEAP32[$__grp+0>>2]=HEAP32[$8+0>>2]|0;HEAP32[$__grp+4>>2]=HEAP32[$8+4>>2]|0;HEAP32[$__grp+8>>2]=HEAP32[$8+8>>2]|0;
     ;HEAP32[$8+0>>2]=0|0;HEAP32[$8+4>>2]=0|0;HEAP32[$8+8>>2]=0|0;
     $210 = HEAP32[$139>>2]|0;
     $211 = (($210) + 24|0);
     $212 = HEAP32[$211>>2]|0;
     __THREW__ = 0;
     invoke_vii($212|0,($9|0),($139|0));
     $213 = __THREW__; __THREW__ = 0;
     $214 = $213&1;
     if ($214) {
      label = 96;
      break;
     }
     $215 = HEAP8[$__sym>>0]|0;
     $216 = $215 & 1;
     $217 = ($216<<24>>24)==(0);
     if ($217) {
      $221 = (($__sym) + 4|0);
      HEAP32[$221>>2] = 0;
      HEAP8[$__sym>>0] = 0;
     } else {
      $218 = (($__sym) + 8|0);
      $219 = HEAP32[$218>>2]|0;
      HEAP32[$219>>2] = 0;
      $220 = (($__sym) + 4|0);
      HEAP32[$220>>2] = 0;
     }
     __THREW__ = 0;
     invoke_vi(479,($__sym|0));
     $222 = __THREW__; __THREW__ = 0;
     $223 = $222&1;
     if ($223) {
      $224 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
      $225 = tempRet0;
      ___clang_call_terminate($224);
      // unreachable;
     } else {
      ;HEAP32[$__sym+0>>2]=HEAP32[$9+0>>2]|0;HEAP32[$__sym+4>>2]=HEAP32[$9+4>>2]|0;HEAP32[$__sym+8>>2]=HEAP32[$9+8>>2]|0;
      ;HEAP32[$9+0>>2]=0|0;HEAP32[$9+4>>2]=0|0;HEAP32[$9+8>>2]=0|0;
      $226 = HEAP32[$139>>2]|0;
      $227 = (($226) + 36|0);
      $228 = HEAP32[$227>>2]|0;
      __THREW__ = 0;
      $229 = (invoke_ii($228|0,($139|0))|0);
      $230 = __THREW__; __THREW__ = 0;
      $231 = $230&1;
      if ($231) {
       label = 96;
       break;
      } else {
       $__dp$0 = $185;$__ts$0 = $191;$storemerge$i = $229;
       label = 70;
       break;
      }
     }
    }
   }
   $141 = (___cxa_allocate_exception(4)|0);
   HEAP32[$141>>2] = ((14256 + 8|0));
   __THREW__ = 0;
   invoke_viii(379,($141|0),(14336|0),(351|0));
   $142 = __THREW__; __THREW__ = 0;
   $143 = $142&1;
   if ($143) {
    label = 96;
   } else {
    // unreachable;
   }
  }
 } while(0);
 L90: do {
  if ((label|0) == 70) {
   $232 = (($__gbuf) + 400|0);
   $233 = HEAP32[$__wb>>2]|0;
   HEAP32[$__wn>>2] = $233;
   $234 = (($__nsn) + 4|0);
   $235 = (($__nsn) + 8|0);
   $236 = (($__psn) + 4|0);
   $237 = (($__psn) + 8|0);
   $238 = $__flags & 512;
   $239 = ($238|0)!=(0);
   $240 = (($__sym) + 4|0);
   $241 = (($__sym) + 8|0);
   $242 = (($__spaces) + 4|0);
   $243 = (($__spaces) + 8|0);
   $244 = (($__pat) + 3|0);
   $245 = (($__wb) + 4|0);
   $246 = (($__grp) + 4|0);
   $1242 = $232;$1243 = $__gbuf;$1244 = $__gbuf;$1245 = $__we;$__e$sroa$0$0 = $__e$0;$__fd$0 = $storemerge$i;$__p$0377 = 0;$__trailing_sign$0379 = 0;$free228372 = 473;
   L93: while(1) {
    $247 = HEAP32[$__b>>2]|0;
    $248 = ($247|0)==(0|0);
    do {
     if ($248) {
      $1246 = 1;
     } else {
      $249 = (($247) + 12|0);
      $250 = HEAP32[$249>>2]|0;
      $251 = (($247) + 16|0);
      $252 = HEAP32[$251>>2]|0;
      $253 = ($250|0)==($252|0);
      if ($253) {
       $254 = HEAP32[$247>>2]|0;
       $255 = (($254) + 36|0);
       $256 = HEAP32[$255>>2]|0;
       __THREW__ = 0;
       $257 = (invoke_ii($256|0,($247|0))|0);
       $258 = __THREW__; __THREW__ = 0;
       $259 = $258&1;
       if ($259) {
        $$ph$ph251$ph$ph$ph$ph$ph$ph = $1244;$free232$ph$ph250$ph$ph$ph$ph$ph$ph = $free228372;
        label = 94;
        break L93;
       } else {
        $$0$i$i$i$i18 = $257;
       }
      } else {
       $260 = HEAP32[$250>>2]|0;
       $$0$i$i$i$i18 = $260;
      }
      $261 = ($$0$i$i$i$i18|0)==(-1);
      if ($261) {
       HEAP32[$__b>>2] = 0;
       $1246 = 1;
       break;
      } else {
       $$pre$i$i$i20 = HEAP32[$__b>>2]|0;
       $phitmp$i$i$i21 = ($$pre$i$i$i20|0)==(0|0);
       $1246 = $phitmp$i$i$i21;
       break;
      }
     }
    } while(0);
    $262 = ($__e$sroa$0$0|0)==(0|0);
    if ($262) {
     label = 83;
    } else {
     $263 = (($__e$sroa$0$0) + 12|0);
     $264 = HEAP32[$263>>2]|0;
     $265 = (($__e$sroa$0$0) + 16|0);
     $266 = HEAP32[$265>>2]|0;
     $267 = ($264|0)==($266|0);
     if ($267) {
      $268 = HEAP32[$__e$sroa$0$0>>2]|0;
      $269 = (($268) + 36|0);
      $270 = HEAP32[$269>>2]|0;
      __THREW__ = 0;
      $271 = (invoke_ii($270|0,($__e$sroa$0$0|0))|0);
      $272 = __THREW__; __THREW__ = 0;
      $273 = $272&1;
      if ($273) {
       $$ph$ph251$ph$ph$ph$ph$ph$ph = $1244;$free232$ph$ph250$ph$ph$ph$ph$ph$ph = $free228372;
       label = 94;
       break;
      } else {
       $$0$i$i1$i$i24 = $271;
      }
     } else {
      $274 = HEAP32[$264>>2]|0;
      $$0$i$i1$i$i24 = $274;
     }
     $275 = ($$0$i$i1$i$i24|0)==(-1);
     if ($275) {
      label = 83;
     } else {
      if ($1246) {
       $__e$sroa$0$2 = $__e$sroa$0$0;
      } else {
       $$lcssa313 = $1244;$$lcssa330 = $1243;$__e$sroa$0$21 = $__e$sroa$0$0;$__trailing_sign$0$lcssa = $__trailing_sign$0379;$free228$lcssa = $free228372;
       label = 418;
       break;
      }
     }
    }
    if ((label|0) == 83) {
     label = 0;
     if ($1246) {
      $$lcssa313 = $1244;$$lcssa330 = $1243;$__e$sroa$0$21 = 0;$__trailing_sign$0$lcssa = $__trailing_sign$0379;$free228$lcssa = $free228372;
      label = 418;
      break;
     } else {
      $__e$sroa$0$2 = 0;
     }
    }
    $276 = (($__pat) + ($__p$0377)|0);
    $277 = HEAP8[$276>>0]|0;
    $278 = $277 << 24 >> 24;
    L115: do {
     switch ($278|0) {
     case 1:  {
      $cond = ($__p$0377|0)==(3);
      if ($cond) {
       $$lcssa313 = $1244;$$lcssa330 = $1243;$__e$sroa$0$21 = $__e$sroa$0$2;$__trailing_sign$0$lcssa = $__trailing_sign$0379;$free228$lcssa = $free228372;
       label = 418;
       break L93;
      }
      $337 = HEAP32[$__b>>2]|0;
      $338 = (($337) + 12|0);
      $339 = HEAP32[$338>>2]|0;
      $340 = (($337) + 16|0);
      $341 = HEAP32[$340>>2]|0;
      $342 = ($339|0)==($341|0);
      if ($342) {
       $343 = HEAP32[$337>>2]|0;
       $344 = (($343) + 36|0);
       $345 = HEAP32[$344>>2]|0;
       __THREW__ = 0;
       $346 = (invoke_ii($345|0,($337|0))|0);
       $347 = __THREW__; __THREW__ = 0;
       $348 = $347&1;
       if ($348) {
        $$ph$ph251$ph$ph$ph$ph$ph$ph = $1244;$free232$ph$ph250$ph$ph$ph$ph$ph$ph = $free228372;
        label = 94;
        break L93;
       } else {
        $$0$i$i33 = $346;
       }
      } else {
       $349 = HEAP32[$339>>2]|0;
       $$0$i$i33 = $349;
      }
      $350 = HEAP32[$__ct>>2]|0;
      $351 = (($350) + 12|0);
      $352 = HEAP32[$351>>2]|0;
      __THREW__ = 0;
      $353 = (invoke_iiii($352|0,($__ct|0),8192,($$0$i$i33|0))|0);
      $354 = __THREW__; __THREW__ = 0;
      $355 = $354&1;
      if ($355) {
       $$ph$ph251$ph$ph$ph$ph$ph$ph = $1244;$free232$ph$ph250$ph$ph$ph$ph$ph$ph = $free228372;
       label = 94;
       break L93;
      }
      if (!($353)) {
       label = 135;
       break L93;
      }
      $356 = HEAP32[$__b>>2]|0;
      $357 = (($356) + 12|0);
      $358 = HEAP32[$357>>2]|0;
      $359 = (($356) + 16|0);
      $360 = HEAP32[$359>>2]|0;
      $361 = ($358|0)==($360|0);
      if ($361) {
       $362 = HEAP32[$356>>2]|0;
       $363 = (($362) + 40|0);
       $364 = HEAP32[$363>>2]|0;
       __THREW__ = 0;
       $365 = (invoke_ii($364|0,($356|0))|0);
       $366 = __THREW__; __THREW__ = 0;
       $367 = $366&1;
       if ($367) {
        $$ph$ph251$ph$ph$ph$ph$ph$ph = $1244;$free232$ph$ph250$ph$ph$ph$ph$ph$ph = $free228372;
        label = 94;
        break L93;
       } else {
        $$0$i$i37 = $365;
       }
      } else {
       $368 = (($358) + 4|0);
       HEAP32[$357>>2] = $368;
       $369 = HEAP32[$358>>2]|0;
       $$0$i$i37 = $369;
      }
      $370 = HEAP8[$__spaces>>0]|0;
      $371 = $370 & 1;
      $372 = ($371<<24>>24)!=(0);
      if ($372) {
       $375 = HEAP32[$__spaces>>2]|0;
       $376 = $375 & -2;
       $377 = (($376) + -1)|0;
       $378 = HEAP32[$242>>2]|0;
       $__cap$0$i = $377;$__sz$0$i = $378;
      } else {
       $373 = $370&255;
       $374 = $373 >>> 1;
       $__cap$0$i = 1;$__sz$0$i = $374;
      }
      $379 = ($__sz$0$i|0)==($__cap$0$i|0);
      if ($379) {
       __THREW__ = 0;
       invoke_viiiiiii(480,($__spaces|0),($__cap$0$i|0),1,($__cap$0$i|0),($__cap$0$i|0),0,0);
       $380 = __THREW__; __THREW__ = 0;
       $381 = $380&1;
       if ($381) {
        $$ph$ph251$ph$ph$ph$ph$ph$ph = $1244;$free232$ph$ph250$ph$ph$ph$ph$ph$ph = $free228372;
        label = 94;
        break L93;
       }
       $382 = HEAP8[$__spaces>>0]|0;
       $383 = $382 & 1;
       $384 = ($383<<24>>24)==(0);
       if ($384) {
        label = 132;
       } else {
        label = 133;
       }
      } else {
       if ($372) {
        label = 133;
       } else {
        label = 132;
       }
      }
      if ((label|0) == 132) {
       label = 0;
       $385 = $__sz$0$i << 1;
       $386 = (($385) + 2)|0;
       $387 = $386&255;
       HEAP8[$__spaces>>0] = $387;
       $__p$0$sum$pre$i = (($__sz$0$i) + 1)|0;
       $$pn$i = $242;$__p$0$sum$pre$phi$iZZZ2D = $__p$0$sum$pre$i;
      }
      else if ((label|0) == 133) {
       label = 0;
       $388 = HEAP32[$243>>2]|0;
       $389 = (($__sz$0$i) + 1)|0;
       HEAP32[$242>>2] = $389;
       $$pn$i = $388;$__p$0$sum$pre$phi$iZZZ2D = $389;
      }
      $__p$0$i = (($$pn$i) + ($__sz$0$i<<2)|0);
      HEAP32[$__p$0$i>>2] = $$0$i$i37;
      $390 = (($$pn$i) + ($__p$0$sum$pre$phi$iZZZ2D<<2)|0);
      HEAP32[$390>>2] = 0;
      label = 136;
      break;
     }
     case 0:  {
      label = 136;
      break;
     }
     case 2:  {
      $655 = ($__trailing_sign$0379|0)!=(0|0);
      $656 = ($__p$0377>>>0)<(2);
      $or$cond = $655 | $656;
      if (!($or$cond)) {
       $657 = ($__p$0377|0)==(2);
       if ($657) {
        $658 = HEAP8[$244>>0]|0;
        $659 = ($658<<24>>24)!=(0);
        $660 = $659;
       } else {
        $660 = 0;
       }
       $brmerge = $239 | $660;
       if (!($brmerge)) {
        $1247 = $1245;$1248 = $1244;$1249 = $1243;$1250 = $1242;$__e$sroa$0$20 = $__e$sroa$0$2;$__fd$2 = $__fd$0;$__trailing_sign$1 = 0;$free229 = $free228372;
        break L115;
       }
      }
      $661 = HEAP8[$__sym>>0]|0;
      $662 = $661 & 1;
      $663 = ($662<<24>>24)==(0);
      $664 = HEAP32[$241>>2]|0;
      $$480 = $663 ? $240 : $664;
      $665 = ($__p$0377|0)==(0);
      L147: do {
       if ($665) {
        $$pre$i3$i$i200 = $__e$sroa$0$2;$725 = $661;$735 = $$480;$752 = $__e$sroa$0$2;$__e$sroa$0$6 = $__e$sroa$0$2;
       } else {
        $666 = (($__p$0377) + -1)|0;
        $667 = (($__pat) + ($666)|0);
        $668 = HEAP8[$667>>0]|0;
        $switch = ($668&255)<(2);
        if ($switch) {
         $670 = $661;$680 = $$480;
         while(1) {
          $669 = $670 & 1;
          $671 = ($669<<24>>24)==(0);
          if ($671) {
           $674 = $670&255;
           $675 = $674 >>> 1;
           $677 = $240;$678 = $675;
          } else {
           $672 = HEAP32[$241>>2]|0;
           $673 = HEAP32[$240>>2]|0;
           $677 = $672;$678 = $673;
          }
          $676 = (($677) + ($678<<2)|0);
          $679 = ($680|0)==($676|0);
          if ($679) {
           $690 = $670;
           break;
          }
          $681 = HEAP32[$680>>2]|0;
          $682 = HEAP32[$__ct>>2]|0;
          $683 = (($682) + 12|0);
          $684 = HEAP32[$683>>2]|0;
          __THREW__ = 0;
          $685 = (invoke_iiii($684|0,($__ct|0),8192,($681|0))|0);
          $686 = __THREW__; __THREW__ = 0;
          $687 = $686&1;
          if ($687) {
           label = 91;
           break L93;
          }
          if (!($685)) {
           label = 250;
           break;
          }
          $688 = (($680) + 4|0);
          $$pre468 = HEAP8[$__sym>>0]|0;
          $670 = $$pre468;$680 = $688;
         }
         if ((label|0) == 250) {
          label = 0;
          $$pre469 = HEAP8[$__sym>>0]|0;
          $690 = $$pre469;
         }
         $689 = $690 & 1;
         $691 = ($689<<24>>24)==(0);
         $692 = HEAP32[$241>>2]|0;
         $$481 = $691 ? $240 : $692;
         $693 = $680;
         $694 = $$481;
         $695 = (($693) - ($694))|0;
         $696 = $695 >> 2;
         $697 = HEAP8[$__spaces>>0]|0;
         $698 = $697 & 1;
         $699 = ($698<<24>>24)==(0);
         if ($699) {
          $701 = $697&255;
          $702 = $701 >>> 1;
          $704 = $702;
         } else {
          $700 = HEAP32[$242>>2]|0;
          $704 = $700;
         }
         $703 = ($696>>>0)>($704>>>0);
         if ($703) {
          $$pre$i3$i$i200 = $__e$sroa$0$2;$725 = $690;$735 = $$481;$752 = $__e$sroa$0$2;$__e$sroa$0$6 = $__e$sroa$0$2;
         } else {
          if ($699) {
           $708 = $697&255;
           $709 = $708 >>> 1;
           $$sum471 = (($709) - ($696))|0;
           $710 = (($242) + ($$sum471<<2)|0);
           $712 = $242;$713 = $709;$715 = $710;
          } else {
           $705 = HEAP32[$243>>2]|0;
           $706 = HEAP32[$242>>2]|0;
           $$sum = (($706) - ($696))|0;
           $707 = (($705) + ($$sum<<2)|0);
           $712 = $705;$713 = $706;$715 = $707;
          }
          $711 = (($712) + ($713<<2)|0);
          $714 = ($715|0)==($711|0);
          if ($714) {
           $$pre$i3$i$i200 = $__e$sroa$0$2;$725 = $690;$735 = $680;$752 = $__e$sroa$0$2;$__e$sroa$0$6 = $__e$sroa$0$2;
          } else {
           $717 = $715;$719 = $$481;
           while(1) {
            $716 = HEAP32[$717>>2]|0;
            $718 = HEAP32[$719>>2]|0;
            $720 = ($716|0)==($718|0);
            if (!($720)) {
             $$pre$i3$i$i200 = $__e$sroa$0$2;$725 = $690;$735 = $$481;$752 = $__e$sroa$0$2;$__e$sroa$0$6 = $__e$sroa$0$2;
             break L147;
            }
            $721 = (($717) + 4|0);
            $722 = ($721|0)==($711|0);
            if ($722) {
             $$pre$i3$i$i200 = $__e$sroa$0$2;$725 = $690;$735 = $680;$752 = $__e$sroa$0$2;$__e$sroa$0$6 = $__e$sroa$0$2;
             break L147;
            }
            $723 = (($719) + 4|0);
            $717 = $721;$719 = $723;
           }
          }
         }
        } else {
         $$pre$i3$i$i200 = $__e$sroa$0$2;$725 = $661;$735 = $$480;$752 = $__e$sroa$0$2;$__e$sroa$0$6 = $__e$sroa$0$2;
        }
       }
      } while(0);
      while(1) {
       $724 = $725 & 1;
       $726 = ($724<<24>>24)==(0);
       if ($726) {
        $729 = $725&255;
        $730 = $729 >>> 1;
        $732 = $240;$733 = $730;
       } else {
        $727 = HEAP32[$241>>2]|0;
        $728 = HEAP32[$240>>2]|0;
        $732 = $727;$733 = $728;
       }
       $731 = (($732) + ($733<<2)|0);
       $734 = ($735|0)==($731|0);
       if ($734) {
        $__e$sroa$0$9 = $__e$sroa$0$6;
        break;
       }
       $736 = HEAP32[$__b>>2]|0;
       $737 = ($736|0)==(0|0);
       do {
        if ($737) {
         $766 = 1;
        } else {
         $738 = (($736) + 12|0);
         $739 = HEAP32[$738>>2]|0;
         $740 = (($736) + 16|0);
         $741 = HEAP32[$740>>2]|0;
         $742 = ($739|0)==($741|0);
         if ($742) {
          $743 = HEAP32[$736>>2]|0;
          $744 = (($743) + 36|0);
          $745 = HEAP32[$744>>2]|0;
          __THREW__ = 0;
          $746 = (invoke_ii($745|0,($736|0))|0);
          $747 = __THREW__; __THREW__ = 0;
          $748 = $747&1;
          if ($748) {
           label = 92;
           break L93;
          } else {
           $$0$i$i$i$i192 = $746;
          }
         } else {
          $749 = HEAP32[$739>>2]|0;
          $$0$i$i$i$i192 = $749;
         }
         $750 = ($$0$i$i$i$i192|0)==(-1);
         if ($750) {
          HEAP32[$__b>>2] = 0;
          $766 = 1;
          break;
         } else {
          $$pre$i$i$i194 = HEAP32[$__b>>2]|0;
          $phitmp$i$i$i195 = ($$pre$i$i$i194|0)==(0|0);
          $766 = $phitmp$i$i$i195;
          break;
         }
        }
       } while(0);
       $751 = ($752|0)==(0|0);
       if ($751) {
        $$pre$i3$i$i200456 = $$pre$i3$i$i200;$__e$sroa$0$7 = $__e$sroa$0$6;
        label = 278;
       } else {
        $753 = (($752) + 12|0);
        $754 = HEAP32[$753>>2]|0;
        $755 = (($752) + 16|0);
        $756 = HEAP32[$755>>2]|0;
        $757 = ($754|0)==($756|0);
        if ($757) {
         $758 = HEAP32[$752>>2]|0;
         $759 = (($758) + 36|0);
         $760 = HEAP32[$759>>2]|0;
         __THREW__ = 0;
         $761 = (invoke_ii($760|0,($752|0))|0);
         $762 = __THREW__; __THREW__ = 0;
         $763 = $762&1;
         if ($763) {
          label = 92;
          break L93;
         } else {
          $$0$i$i1$i$i198 = $761;
         }
        } else {
         $764 = HEAP32[$754>>2]|0;
         $$0$i$i1$i$i198 = $764;
        }
        $765 = ($$0$i$i1$i$i198|0)==(-1);
        if ($765) {
         $$pre$i3$i$i200456 = 0;$__e$sroa$0$7 = 0;
         label = 278;
        } else {
         $phitmp$i4$i$i201 = ($$pre$i3$i$i200|0)==(0|0);
         $tmp$i$i203 = $766 ^ $phitmp$i4$i$i201;
         if ($tmp$i$i203) {
          $$pre$i3$i$i200455 = $$pre$i3$i$i200;$1253 = $$pre$i3$i$i200;$__e$sroa$0$8 = $__e$sroa$0$6;
         } else {
          $__e$sroa$0$9 = $__e$sroa$0$6;
          break;
         }
        }
       }
       if ((label|0) == 278) {
        label = 0;
        if ($766) {
         $__e$sroa$0$9 = $__e$sroa$0$7;
         break;
        } else {
         $$pre$i3$i$i200455 = $$pre$i3$i$i200456;$1253 = 0;$__e$sroa$0$8 = $__e$sroa$0$7;
        }
       }
       $767 = HEAP32[$__b>>2]|0;
       $768 = (($767) + 12|0);
       $769 = HEAP32[$768>>2]|0;
       $770 = (($767) + 16|0);
       $771 = HEAP32[$770>>2]|0;
       $772 = ($769|0)==($771|0);
       if ($772) {
        $773 = HEAP32[$767>>2]|0;
        $774 = (($773) + 36|0);
        $775 = HEAP32[$774>>2]|0;
        __THREW__ = 0;
        $776 = (invoke_ii($775|0,($767|0))|0);
        $777 = __THREW__; __THREW__ = 0;
        $778 = $777&1;
        if ($778) {
         label = 92;
         break L93;
        } else {
         $$0$i$i207 = $776;
        }
       } else {
        $779 = HEAP32[$769>>2]|0;
        $$0$i$i207 = $779;
       }
       $780 = HEAP32[$735>>2]|0;
       $781 = ($$0$i$i207|0)==($780|0);
       if (!($781)) {
        $__e$sroa$0$9 = $__e$sroa$0$8;
        break;
       }
       $782 = HEAP32[$__b>>2]|0;
       $783 = (($782) + 12|0);
       $784 = HEAP32[$783>>2]|0;
       $785 = (($782) + 16|0);
       $786 = HEAP32[$785>>2]|0;
       $787 = ($784|0)==($786|0);
       if ($787) {
        $788 = HEAP32[$782>>2]|0;
        $789 = (($788) + 40|0);
        $790 = HEAP32[$789>>2]|0;
        __THREW__ = 0;
        (invoke_ii($790|0,($782|0))|0);
        $791 = __THREW__; __THREW__ = 0;
        $792 = $791&1;
        if ($792) {
         label = 92;
         break L93;
        }
       } else {
        $793 = (($784) + 4|0);
        HEAP32[$783>>2] = $793;
       }
       $794 = (($735) + 4|0);
       $$pre = HEAP8[$__sym>>0]|0;
       $$pre$i3$i$i200 = $$pre$i3$i$i200455;$725 = $$pre;$735 = $794;$752 = $1253;$__e$sroa$0$6 = $__e$sroa$0$8;
      }
      if ($239) {
       $795 = HEAP8[$__sym>>0]|0;
       $796 = $795 & 1;
       $797 = ($796<<24>>24)==(0);
       if ($797) {
        $800 = $795&255;
        $801 = $800 >>> 1;
        $803 = $240;$804 = $801;
       } else {
        $798 = HEAP32[$241>>2]|0;
        $799 = HEAP32[$240>>2]|0;
        $803 = $798;$804 = $799;
       }
       $802 = (($803) + ($804<<2)|0);
       $805 = ($735|0)==($802|0);
       if ($805) {
        $1247 = $1245;$1248 = $1244;$1249 = $1243;$1250 = $1242;$__e$sroa$0$20 = $__e$sroa$0$9;$__fd$2 = $__fd$0;$__trailing_sign$1 = $__trailing_sign$0379;$free229 = $free228372;
       } else {
        label = 293;
        break L93;
       }
      } else {
       $1247 = $1245;$1248 = $1244;$1249 = $1243;$1250 = $1242;$__e$sroa$0$20 = $__e$sroa$0$9;$__fd$2 = $__fd$0;$__trailing_sign$1 = $__trailing_sign$0379;$free229 = $free228372;
      }
      break;
     }
     case 4:  {
      $858 = $1245;$899 = $1243;$900 = $1242;$904 = $1244;$__e$sroa$0$10 = $__e$sroa$0$2;$__ng$0 = 0;$free227 = $free228372;
      while(1) {
       $808 = HEAP32[$__b>>2]|0;
       $809 = ($808|0)==(0|0);
       do {
        if ($809) {
         $1254 = 1;
        } else {
         $810 = (($808) + 12|0);
         $811 = HEAP32[$810>>2]|0;
         $812 = (($808) + 16|0);
         $813 = HEAP32[$812>>2]|0;
         $814 = ($811|0)==($813|0);
         if ($814) {
          $815 = HEAP32[$808>>2]|0;
          $816 = (($815) + 36|0);
          $817 = HEAP32[$816>>2]|0;
          __THREW__ = 0;
          $818 = (invoke_ii($817|0,($808|0))|0);
          $819 = __THREW__; __THREW__ = 0;
          $820 = $819&1;
          if ($820) {
           $$ph$ph$ph = $904;$free232$ph$ph$ph = $free227;
           label = 87;
           break L93;
          } else {
           $$0$i$i$i$i177 = $818;
          }
         } else {
          $821 = HEAP32[$811>>2]|0;
          $$0$i$i$i$i177 = $821;
         }
         $822 = ($$0$i$i$i$i177|0)==(-1);
         if ($822) {
          HEAP32[$__b>>2] = 0;
          $1254 = 1;
          break;
         } else {
          $$pre$i$i$i179 = HEAP32[$__b>>2]|0;
          $phitmp$i$i$i180 = ($$pre$i$i$i179|0)==(0|0);
          $1254 = $phitmp$i$i$i180;
          break;
         }
        }
       } while(0);
       $823 = ($__e$sroa$0$10|0)==(0|0);
       if ($823) {
        label = 306;
       } else {
        $824 = (($__e$sroa$0$10) + 12|0);
        $825 = HEAP32[$824>>2]|0;
        $826 = (($__e$sroa$0$10) + 16|0);
        $827 = HEAP32[$826>>2]|0;
        $828 = ($825|0)==($827|0);
        if ($828) {
         $829 = HEAP32[$__e$sroa$0$10>>2]|0;
         $830 = (($829) + 36|0);
         $831 = HEAP32[$830>>2]|0;
         __THREW__ = 0;
         $832 = (invoke_ii($831|0,($__e$sroa$0$10|0))|0);
         $833 = __THREW__; __THREW__ = 0;
         $834 = $833&1;
         if ($834) {
          $$ph$ph$ph = $904;$free232$ph$ph$ph = $free227;
          label = 87;
          break L93;
         } else {
          $$0$i$i1$i$i183 = $832;
         }
        } else {
         $835 = HEAP32[$825>>2]|0;
         $$0$i$i1$i$i183 = $835;
        }
        $836 = ($$0$i$i1$i$i183|0)==(-1);
        if ($836) {
         label = 306;
        } else {
         if ($1254) {
          $__e$sroa$0$12 = $__e$sroa$0$10;
         } else {
          $__e$sroa$0$13 = $__e$sroa$0$10;
          break;
         }
        }
       }
       if ((label|0) == 306) {
        label = 0;
        if ($1254) {
         $__e$sroa$0$13 = 0;
         break;
        } else {
         $__e$sroa$0$12 = 0;
        }
       }
       $837 = HEAP32[$__b>>2]|0;
       $838 = (($837) + 12|0);
       $839 = HEAP32[$838>>2]|0;
       $840 = (($837) + 16|0);
       $841 = HEAP32[$840>>2]|0;
       $842 = ($839|0)==($841|0);
       if ($842) {
        $843 = HEAP32[$837>>2]|0;
        $844 = (($843) + 36|0);
        $845 = HEAP32[$844>>2]|0;
        __THREW__ = 0;
        $846 = (invoke_ii($845|0,($837|0))|0);
        $847 = __THREW__; __THREW__ = 0;
        $848 = $847&1;
        if ($848) {
         $$ph$ph$ph = $904;$free232$ph$ph$ph = $free227;
         label = 87;
         break L93;
        } else {
         $$0$i$i173 = $846;
        }
       } else {
        $849 = HEAP32[$839>>2]|0;
        $$0$i$i173 = $849;
       }
       $850 = HEAP32[$__ct>>2]|0;
       $851 = (($850) + 12|0);
       $852 = HEAP32[$851>>2]|0;
       __THREW__ = 0;
       $853 = (invoke_iiii($852|0,($__ct|0),2048,($$0$i$i173|0))|0);
       $854 = __THREW__; __THREW__ = 0;
       $855 = $854&1;
       if ($855) {
        $$ph$ph$ph = $904;$free232$ph$ph$ph = $free227;
        label = 87;
        break L93;
       }
       if ($853) {
        $856 = HEAP32[$__wn>>2]|0;
        $857 = ($856|0)==($858|0);
        if ($857) {
         $859 = HEAP32[$245>>2]|0;
         $860 = ($859|0)!=(473|0);
         $861 = HEAP32[$__wb>>2]|0;
         $862 = $858;
         $863 = $861;
         $864 = (($862) - ($863))|0;
         $865 = ($864>>>0)<(2147483647);
         $866 = $864 << 1;
         $$$i159 = $865 ? $866 : -1;
         $867 = $864 >> 2;
         if ($860) {
          $868 = $861;
         } else {
          $868 = 0;
         }
         $869 = (_realloc($868,$$$i159)|0);
         $870 = ($869|0)==(0|0);
         if ($870) {
          label = 317;
          break L93;
         }
         if ($860) {
          HEAP32[$__wb>>2] = $869;
          $882 = $869;
         } else {
          $$pr$i162 = HEAP32[$__wb>>2]|0;
          HEAP32[$__wb>>2] = $869;
          $874 = ($$pr$i162|0)==(0|0);
          if ($874) {
           $882 = $869;
          } else {
           $875 = HEAP32[$245>>2]|0;
           __THREW__ = 0;
           invoke_vi($875|0,($$pr$i162|0));
           $876 = __THREW__; __THREW__ = 0;
           $877 = $876&1;
           if ($877) {
            label = 324;
            break L93;
           }
           $$pre$i163 = HEAP32[$__wb>>2]|0;
           $882 = $$pre$i163;
          }
         }
         HEAP32[$245>>2] = 477;
         $880 = $$$i159 >>> 2;
         $881 = (($882) + ($867<<2)|0);
         HEAP32[$__wn>>2] = $881;
         $883 = HEAP32[$__wb>>2]|0;
         $884 = (($883) + ($880<<2)|0);
         $1255 = $884;$886 = $881;
        } else {
         $1255 = $858;$886 = $856;
        }
        $885 = (($886) + 4|0);
        HEAP32[$__wn>>2] = $885;
        HEAP32[$886>>2] = $$0$i$i173;
        $887 = (($__ng$0) + 1)|0;
        $1256 = $1255;$1257 = $904;$1258 = $899;$1259 = $900;$__ng$1 = $887;$free = $free227;
       } else {
        $888 = HEAP8[$__grp>>0]|0;
        $889 = $888 & 1;
        $890 = ($889<<24>>24)==(0);
        if ($890) {
         $892 = $888&255;
         $893 = $892 >>> 1;
         $895 = $893;
        } else {
         $891 = HEAP32[$246>>2]|0;
         $895 = $891;
        }
        $894 = ($895|0)==(0);
        $896 = ($__ng$0|0)==(0);
        $or$cond7 = $894 | $896;
        $or$cond7$not = $or$cond7 ^ 1;
        $897 = ($$0$i$i173|0)==($__ts$0|0);
        $or$cond19 = $or$cond7$not & $897;
        if (!($or$cond19)) {
         $__e$sroa$0$13 = $__e$sroa$0$12;
         break;
        }
        $898 = ($899|0)==($900|0);
        if ($898) {
         $901 = ($free227|0)==(473|0);
         $902 = $899;
         $903 = $904;
         $905 = (($902) - ($903))|0;
         $906 = ($905>>>0)<(2147483647);
         $907 = $905 << 1;
         $$$i149 = $906 ? $907 : -1;
         $908 = $905 >> 2;
         if ($901) {
          $909 = 0;
         } else {
          $909 = $904;
         }
         $910 = (_realloc($909,$$$i149)|0);
         $911 = ($910|0)==(0|0);
         if ($911) {
          label = 335;
          break L93;
         }
         $915 = $$$i149 >>> 2;
         $916 = (($910) + ($908<<2)|0);
         $917 = (($910) + ($915<<2)|0);
         $1260 = $910;$1261 = $917;$919 = $916;$free226 = 477;
        } else {
         $1260 = $904;$1261 = $900;$919 = $899;$free226 = $free227;
        }
        $918 = (($919) + 4|0);
        HEAP32[$919>>2] = $__ng$0;
        $1256 = $858;$1257 = $1260;$1258 = $918;$1259 = $1261;$__ng$1 = 0;$free = $free226;
       }
       $920 = HEAP32[$__b>>2]|0;
       $921 = (($920) + 12|0);
       $922 = HEAP32[$921>>2]|0;
       $923 = (($920) + 16|0);
       $924 = HEAP32[$923>>2]|0;
       $925 = ($922|0)==($924|0);
       if ($925) {
        $926 = HEAP32[$920>>2]|0;
        $927 = (($926) + 40|0);
        $928 = HEAP32[$927>>2]|0;
        __THREW__ = 0;
        (invoke_ii($928|0,($920|0))|0);
        $929 = __THREW__; __THREW__ = 0;
        $930 = $929&1;
        if ($930) {
         $$ph$ph$ph = $1257;$free232$ph$ph$ph = $free;
         label = 87;
         break L93;
        } else {
         $858 = $1256;$899 = $1258;$900 = $1259;$904 = $1257;$__e$sroa$0$10 = $__e$sroa$0$12;$__ng$0 = $__ng$1;$free227 = $free;
         continue;
        }
       } else {
        $931 = (($922) + 4|0);
        HEAP32[$921>>2] = $931;
        $858 = $1256;$899 = $1258;$900 = $1259;$904 = $1257;$__e$sroa$0$10 = $__e$sroa$0$12;$__ng$0 = $__ng$1;$free227 = $free;
        continue;
       }
      }
      $932 = ($904|0)==($899|0);
      $933 = ($__ng$0|0)==(0);
      $or$cond8 = $932 | $933;
      if ($or$cond8) {
       $1251 = $904;$1262 = $899;$1263 = $900;$free230 = $free227;
      } else {
       $934 = ($899|0)==($900|0);
       if ($934) {
        $935 = ($free227|0)==(473|0);
        $936 = $899;
        $937 = $904;
        $938 = (($936) - ($937))|0;
        $939 = ($938>>>0)<(2147483647);
        $940 = $938 << 1;
        $$$i138 = $939 ? $940 : -1;
        $941 = $938 >> 2;
        if ($935) {
         $942 = 0;
        } else {
         $942 = $904;
        }
        $943 = (_realloc($942,$$$i138)|0);
        $944 = ($943|0)==(0|0);
        if ($944) {
         label = 347;
         break L93;
        }
        $948 = $$$i138 >>> 2;
        $949 = (($943) + ($941<<2)|0);
        $950 = (($943) + ($948<<2)|0);
        $1264 = $943;$1265 = $950;$952 = $949;$free231 = 477;
       } else {
        $1264 = $904;$1265 = $900;$952 = $899;$free231 = $free227;
       }
       $951 = (($952) + 4|0);
       HEAP32[$952>>2] = $__ng$0;
       $1251 = $1264;$1262 = $951;$1263 = $1265;$free230 = $free231;
      }
      $953 = ($__fd$0|0)>(0);
      if ($953) {
       $954 = HEAP32[$__b>>2]|0;
       $955 = ($954|0)==(0|0);
       do {
        if ($955) {
         $1267 = 1;
        } else {
         $956 = (($954) + 12|0);
         $957 = HEAP32[$956>>2]|0;
         $958 = (($954) + 16|0);
         $959 = HEAP32[$958>>2]|0;
         $960 = ($957|0)==($959|0);
         if ($960) {
          $961 = HEAP32[$954>>2]|0;
          $962 = (($961) + 36|0);
          $963 = HEAP32[$962>>2]|0;
          __THREW__ = 0;
          $964 = (invoke_ii($963|0,($954|0))|0);
          $965 = __THREW__; __THREW__ = 0;
          $966 = $965&1;
          if ($966) {
           $$ph$ph251$ph$ph$ph$ph$ph$ph = $1251;$free232$ph$ph250$ph$ph$ph$ph$ph$ph = $free230;
           label = 94;
           break L93;
          } else {
           $$0$i$i$i$i123 = $964;
          }
         } else {
          $967 = HEAP32[$957>>2]|0;
          $$0$i$i$i$i123 = $967;
         }
         $968 = ($$0$i$i$i$i123|0)==(-1);
         if ($968) {
          HEAP32[$__b>>2] = 0;
          $1267 = 1;
          break;
         } else {
          $$pre$i$i$i125 = HEAP32[$__b>>2]|0;
          $phitmp$i$i$i126 = ($$pre$i$i$i125|0)==(0|0);
          $1267 = $phitmp$i$i$i126;
          break;
         }
        }
       } while(0);
       $969 = ($__e$sroa$0$13|0)==(0|0);
       if ($969) {
        label = 364;
       } else {
        $970 = (($__e$sroa$0$13) + 12|0);
        $971 = HEAP32[$970>>2]|0;
        $972 = (($__e$sroa$0$13) + 16|0);
        $973 = HEAP32[$972>>2]|0;
        $974 = ($971|0)==($973|0);
        if ($974) {
         $975 = HEAP32[$__e$sroa$0$13>>2]|0;
         $976 = (($975) + 36|0);
         $977 = HEAP32[$976>>2]|0;
         __THREW__ = 0;
         $978 = (invoke_ii($977|0,($__e$sroa$0$13|0))|0);
         $979 = __THREW__; __THREW__ = 0;
         $980 = $979&1;
         if ($980) {
          $$ph$ph251$ph$ph$ph$ph$ph$ph = $1251;$free232$ph$ph250$ph$ph$ph$ph$ph$ph = $free230;
          label = 94;
          break L93;
         } else {
          $$0$i$i1$i$i129 = $978;
         }
        } else {
         $981 = HEAP32[$971>>2]|0;
         $$0$i$i1$i$i129 = $981;
        }
        $982 = ($$0$i$i1$i$i129|0)==(-1);
        if ($982) {
         label = 364;
        } else {
         if ($1267) {
          $__e$sroa$0$15 = $__e$sroa$0$13;
         } else {
          label = 370;
          break L93;
         }
        }
       }
       if ((label|0) == 364) {
        label = 0;
        if ($1267) {
         label = 370;
         break L93;
        } else {
         $__e$sroa$0$15 = 0;
        }
       }
       $983 = HEAP32[$__b>>2]|0;
       $984 = (($983) + 12|0);
       $985 = HEAP32[$984>>2]|0;
       $986 = (($983) + 16|0);
       $987 = HEAP32[$986>>2]|0;
       $988 = ($985|0)==($987|0);
       if ($988) {
        $989 = HEAP32[$983>>2]|0;
        $990 = (($989) + 36|0);
        $991 = HEAP32[$990>>2]|0;
        __THREW__ = 0;
        $992 = (invoke_ii($991|0,($983|0))|0);
        $993 = __THREW__; __THREW__ = 0;
        $994 = $993&1;
        if ($994) {
         $$ph$ph251$ph$ph$ph$ph$ph$ph = $1251;$free232$ph$ph250$ph$ph$ph$ph$ph$ph = $free230;
         label = 94;
         break L93;
        } else {
         $$0$i$i117 = $992;
        }
       } else {
        $995 = HEAP32[$985>>2]|0;
        $$0$i$i117 = $995;
       }
       $996 = ($$0$i$i117|0)==($__dp$0|0);
       if (!($996)) {
        label = 370;
        break L93;
       }
       $999 = HEAP32[$__b>>2]|0;
       $1000 = (($999) + 12|0);
       $1001 = HEAP32[$1000>>2]|0;
       $1002 = (($999) + 16|0);
       $1003 = HEAP32[$1002>>2]|0;
       $1004 = ($1001|0)==($1003|0);
       if ($1004) {
        $1005 = HEAP32[$999>>2]|0;
        $1006 = (($1005) + 40|0);
        $1007 = HEAP32[$1006>>2]|0;
        __THREW__ = 0;
        (invoke_ii($1007|0,($999|0))|0);
        $1008 = __THREW__; __THREW__ = 0;
        $1009 = $1008&1;
        if ($1009) {
         $$ph$ph251$ph$ph$ph$ph$ph$ph = $1251;$free232$ph$ph250$ph$ph$ph$ph$ph$ph = $free230;
         label = 94;
         break L93;
        } else {
         $$pre$i3$i$i97 = $__e$sroa$0$15;$1027 = $__e$sroa$0$15;$1065 = $858;$1108 = $__fd$0;$__e$sroa$0$16 = $__e$sroa$0$15;
        }
       } else {
        $1010 = (($1001) + 4|0);
        HEAP32[$1000>>2] = $1010;
        $$pre$i3$i$i97 = $__e$sroa$0$15;$1027 = $__e$sroa$0$15;$1065 = $858;$1108 = $__fd$0;$__e$sroa$0$16 = $__e$sroa$0$15;
       }
       while(1) {
        $1011 = HEAP32[$__b>>2]|0;
        $1012 = ($1011|0)==(0|0);
        do {
         if ($1012) {
          $1041 = 1;
         } else {
          $1013 = (($1011) + 12|0);
          $1014 = HEAP32[$1013>>2]|0;
          $1015 = (($1011) + 16|0);
          $1016 = HEAP32[$1015>>2]|0;
          $1017 = ($1014|0)==($1016|0);
          if ($1017) {
           $1018 = HEAP32[$1011>>2]|0;
           $1019 = (($1018) + 36|0);
           $1020 = HEAP32[$1019>>2]|0;
           __THREW__ = 0;
           $1021 = (invoke_ii($1020|0,($1011|0))|0);
           $1022 = __THREW__; __THREW__ = 0;
           $1023 = $1022&1;
           if ($1023) {
            label = 89;
            break L93;
           } else {
            $$0$i$i$i$i89 = $1021;
           }
          } else {
           $1024 = HEAP32[$1014>>2]|0;
           $$0$i$i$i$i89 = $1024;
          }
          $1025 = ($$0$i$i$i$i89|0)==(-1);
          if ($1025) {
           HEAP32[$__b>>2] = 0;
           $1041 = 1;
           break;
          } else {
           $$pre$i$i$i91 = HEAP32[$__b>>2]|0;
           $phitmp$i$i$i92 = ($$pre$i$i$i91|0)==(0|0);
           $1041 = $phitmp$i$i$i92;
           break;
          }
         }
        } while(0);
        $1026 = ($1027|0)==(0|0);
        if ($1026) {
         $$pre$i3$i$i97459$ph = $$pre$i3$i$i97;$__e$sroa$0$17 = $__e$sroa$0$16;
         label = 386;
        } else {
         $1028 = (($1027) + 12|0);
         $1029 = HEAP32[$1028>>2]|0;
         $1030 = (($1027) + 16|0);
         $1031 = HEAP32[$1030>>2]|0;
         $1032 = ($1029|0)==($1031|0);
         if ($1032) {
          $1033 = HEAP32[$1027>>2]|0;
          $1034 = (($1033) + 36|0);
          $1035 = HEAP32[$1034>>2]|0;
          __THREW__ = 0;
          $1036 = (invoke_ii($1035|0,($1027|0))|0);
          $1037 = __THREW__; __THREW__ = 0;
          $1038 = $1037&1;
          if ($1038) {
           label = 89;
           break L93;
          } else {
           $$0$i$i1$i$i95 = $1036;
          }
         } else {
          $1039 = HEAP32[$1029>>2]|0;
          $$0$i$i1$i$i95 = $1039;
         }
         $1040 = ($$0$i$i1$i$i95|0)==(-1);
         if ($1040) {
          $$pre$i3$i$i97459$ph = 0;$__e$sroa$0$17 = 0;
          label = 386;
         } else {
          $phitmp$i4$i$i98 = ($$pre$i3$i$i97|0)==(0|0);
          $tmp$i$i100 = $1041 ^ $phitmp$i4$i$i98;
          if ($tmp$i$i100) {
           $$pre$i3$i$i97459475 = $$pre$i3$i$i97;$1268 = $$pre$i3$i$i97;$__e$sroa$0$18 = $__e$sroa$0$16;
          } else {
           label = 393;
           break L93;
          }
         }
        }
        if ((label|0) == 386) {
         label = 0;
         if ($1041) {
          label = 393;
          break L93;
         } else {
          $$pre$i3$i$i97459475 = $$pre$i3$i$i97459$ph;$1268 = 0;$__e$sroa$0$18 = $__e$sroa$0$17;
         }
        }
        $1042 = HEAP32[$__b>>2]|0;
        $1043 = (($1042) + 12|0);
        $1044 = HEAP32[$1043>>2]|0;
        $1045 = (($1042) + 16|0);
        $1046 = HEAP32[$1045>>2]|0;
        $1047 = ($1044|0)==($1046|0);
        if ($1047) {
         $1048 = HEAP32[$1042>>2]|0;
         $1049 = (($1048) + 36|0);
         $1050 = HEAP32[$1049>>2]|0;
         __THREW__ = 0;
         $1051 = (invoke_ii($1050|0,($1042|0))|0);
         $1052 = __THREW__; __THREW__ = 0;
         $1053 = $1052&1;
         if ($1053) {
          label = 89;
          break L93;
         } else {
          $$0$i$i83 = $1051;
         }
        } else {
         $1054 = HEAP32[$1044>>2]|0;
         $$0$i$i83 = $1054;
        }
        $1055 = HEAP32[$__ct>>2]|0;
        $1056 = (($1055) + 12|0);
        $1057 = HEAP32[$1056>>2]|0;
        __THREW__ = 0;
        $1058 = (invoke_iiii($1057|0,($__ct|0),2048,($$0$i$i83|0))|0);
        $1059 = __THREW__; __THREW__ = 0;
        $1060 = $1059&1;
        if ($1060) {
         label = 89;
         break L93;
        }
        if (!($1058)) {
         label = 393;
         break L93;
        }
        $1063 = HEAP32[$__wn>>2]|0;
        $1064 = ($1063|0)==($1065|0);
        if ($1064) {
         $1066 = HEAP32[$245>>2]|0;
         $1067 = ($1066|0)!=(473|0);
         $1068 = HEAP32[$__wb>>2]|0;
         $1069 = $1065;
         $1070 = $1068;
         $1071 = (($1069) - ($1070))|0;
         $1072 = ($1071>>>0)<(2147483647);
         $1073 = $1071 << 1;
         $$$i = $1072 ? $1073 : -1;
         $1074 = $1071 >> 2;
         if ($1067) {
          $1075 = $1068;
         } else {
          $1075 = 0;
         }
         $1076 = (_realloc($1075,$$$i)|0);
         $1077 = ($1076|0)==(0|0);
         if ($1077) {
          label = 398;
          break L93;
         }
         do {
          if ($1067) {
           HEAP32[$__wb>>2] = $1076;
           $1089 = $1076;
          } else {
           $$pr$i = HEAP32[$__wb>>2]|0;
           HEAP32[$__wb>>2] = $1076;
           $1081 = ($$pr$i|0)==(0|0);
           if ($1081) {
            $1089 = $1076;
            break;
           }
           $1082 = HEAP32[$245>>2]|0;
           __THREW__ = 0;
           invoke_vi($1082|0,($$pr$i|0));
           $1083 = __THREW__; __THREW__ = 0;
           $1084 = $1083&1;
           if ($1084) {
            label = 405;
            break L93;
           }
           $$pre$i = HEAP32[$__wb>>2]|0;
           $1089 = $$pre$i;
          }
         } while(0);
         HEAP32[$245>>2] = 477;
         $1087 = $$$i >>> 2;
         $1088 = (($1089) + ($1074<<2)|0);
         HEAP32[$__wn>>2] = $1088;
         $1090 = HEAP32[$__wb>>2]|0;
         $1091 = (($1090) + ($1087<<2)|0);
         $1269 = $1088;$1270 = $1091;
        } else {
         $1269 = $1063;$1270 = $1065;
        }
        $1092 = HEAP32[$__b>>2]|0;
        $1093 = (($1092) + 12|0);
        $1094 = HEAP32[$1093>>2]|0;
        $1095 = (($1092) + 16|0);
        $1096 = HEAP32[$1095>>2]|0;
        $1097 = ($1094|0)==($1096|0);
        if ($1097) {
         $1098 = HEAP32[$1092>>2]|0;
         $1099 = (($1098) + 36|0);
         $1100 = HEAP32[$1099>>2]|0;
         __THREW__ = 0;
         $1101 = (invoke_ii($1100|0,($1092|0))|0);
         $1102 = __THREW__; __THREW__ = 0;
         $1103 = $1102&1;
         if ($1103) {
          label = 89;
          break L93;
         }
         $$pre470 = HEAP32[$__wn>>2]|0;
         $$0$i$i64 = $1101;$1106 = $$pre470;
        } else {
         $1104 = HEAP32[$1094>>2]|0;
         $$0$i$i64 = $1104;$1106 = $1269;
        }
        $1105 = (($1106) + 4|0);
        HEAP32[$__wn>>2] = $1105;
        HEAP32[$1106>>2] = $$0$i$i64;
        $1107 = (($1108) + -1)|0;
        $1109 = HEAP32[$__b>>2]|0;
        $1110 = (($1109) + 12|0);
        $1111 = HEAP32[$1110>>2]|0;
        $1112 = (($1109) + 16|0);
        $1113 = HEAP32[$1112>>2]|0;
        $1114 = ($1111|0)==($1113|0);
        if ($1114) {
         $1115 = HEAP32[$1109>>2]|0;
         $1116 = (($1115) + 40|0);
         $1117 = HEAP32[$1116>>2]|0;
         __THREW__ = 0;
         (invoke_ii($1117|0,($1109|0))|0);
         $1118 = __THREW__; __THREW__ = 0;
         $1119 = $1118&1;
         if ($1119) {
          label = 89;
          break L93;
         }
        } else {
         $1121 = (($1111) + 4|0);
         HEAP32[$1110>>2] = $1121;
        }
        $1120 = ($1107|0)>(0);
        if ($1120) {
         $$pre$i3$i$i97 = $$pre$i3$i$i97459475;$1027 = $1268;$1065 = $1270;$1108 = $1107;$__e$sroa$0$16 = $__e$sroa$0$18;
        } else {
         $1266 = $1270;$__e$sroa$0$19 = $__e$sroa$0$18;$__fd$1 = $1107;
         break;
        }
       }
      } else {
       $1266 = $858;$__e$sroa$0$19 = $__e$sroa$0$13;$__fd$1 = $__fd$0;
      }
      $1122 = HEAP32[$__wn>>2]|0;
      $1123 = HEAP32[$__wb>>2]|0;
      $1124 = ($1122|0)==($1123|0);
      if ($1124) {
       label = 416;
       break L93;
      } else {
       $1247 = $1266;$1248 = $1251;$1249 = $1262;$1250 = $1263;$__e$sroa$0$20 = $__e$sroa$0$19;$__fd$2 = $__fd$1;$__trailing_sign$1 = $__trailing_sign$0379;$free229 = $free230;
      }
      break;
     }
     case 3:  {
      $479 = HEAP8[$__psn>>0]|0;
      $480 = $479 & 1;
      $481 = ($480<<24>>24)==(0);
      if ($481) {
       $483 = $479&255;
       $484 = $483 >>> 1;
       $494 = $484;
      } else {
       $482 = HEAP32[$236>>2]|0;
       $494 = $482;
      }
      $485 = HEAP8[$__nsn>>0]|0;
      $486 = $485 & 1;
      $487 = ($486<<24>>24)==(0);
      if ($487) {
       $489 = $485&255;
       $490 = $489 >>> 1;
       $492 = $490;
      } else {
       $488 = HEAP32[$234>>2]|0;
       $492 = $488;
      }
      $491 = (0 - ($492))|0;
      $493 = ($494|0)==($491|0);
      if ($493) {
       $1247 = $1245;$1248 = $1244;$1249 = $1243;$1250 = $1242;$__e$sroa$0$20 = $__e$sroa$0$2;$__fd$2 = $__fd$0;$__trailing_sign$1 = $__trailing_sign$0379;$free229 = $free228372;
      } else {
       if ($481) {
        $496 = $479&255;
        $497 = $496 >>> 1;
        $499 = $497;
       } else {
        $495 = HEAP32[$236>>2]|0;
        $499 = $495;
       }
       $498 = ($499|0)==(0);
       if (!($498)) {
        if ($487) {
         $501 = $485&255;
         $502 = $501 >>> 1;
         $504 = $502;
        } else {
         $500 = HEAP32[$234>>2]|0;
         $504 = $500;
        }
        $503 = ($504|0)==(0);
        if (!($503)) {
         $582 = HEAP32[$__b>>2]|0;
         $583 = (($582) + 12|0);
         $584 = HEAP32[$583>>2]|0;
         $585 = (($582) + 16|0);
         $586 = HEAP32[$585>>2]|0;
         $587 = ($584|0)==($586|0);
         if ($587) {
          $588 = HEAP32[$582>>2]|0;
          $589 = (($588) + 36|0);
          $590 = HEAP32[$589>>2]|0;
          __THREW__ = 0;
          $591 = (invoke_ii($590|0,($582|0))|0);
          $592 = __THREW__; __THREW__ = 0;
          $593 = $592&1;
          if ($593) {
           $$ph$ph251$ph$ph$ph$ph$ph$ph = $1244;$free232$ph$ph250$ph$ph$ph$ph$ph$ph = $free228372;
           label = 94;
           break L93;
          }
          $$pre467 = HEAP8[$__psn>>0]|0;
          $$pre12 = HEAP32[$__b>>2]|0;
          $$phi$trans$insert = (($$pre12) + 12|0);
          $$pre13 = HEAP32[$$phi$trans$insert>>2]|0;
          $$phi$trans$insert14 = (($$pre12) + 16|0);
          $$pre15 = HEAP32[$$phi$trans$insert14>>2]|0;
          $$0$i$i104 = $591;$596 = $$pre467;$602 = $$pre12;$604 = $$pre13;$605 = $$pre15;
         } else {
          $594 = HEAP32[$584>>2]|0;
          $$0$i$i104 = $594;$596 = $479;$602 = $582;$604 = $584;$605 = $586;
         }
         $595 = $596 & 1;
         $597 = ($595<<24>>24)==(0);
         $598 = HEAP32[$237>>2]|0;
         $$478 = $597 ? $236 : $598;
         $599 = HEAP32[$$478>>2]|0;
         $600 = ($$0$i$i104|0)==($599|0);
         $601 = (($602) + 12|0);
         $603 = ($604|0)==($605|0);
         if ($600) {
          if ($603) {
           $606 = HEAP32[$602>>2]|0;
           $607 = (($606) + 40|0);
           $608 = HEAP32[$607>>2]|0;
           __THREW__ = 0;
           (invoke_ii($608|0,($602|0))|0);
           $609 = __THREW__; __THREW__ = 0;
           $610 = $609&1;
           if ($610) {
            $$ph$ph251$ph$ph$ph$ph$ph$ph = $1244;$free232$ph$ph250$ph$ph$ph$ph$ph$ph = $free228372;
            label = 94;
            break L93;
           }
          } else {
           $611 = (($604) + 4|0);
           HEAP32[$601>>2] = $611;
          }
          $612 = HEAP8[$__psn>>0]|0;
          $613 = $612 & 1;
          $614 = ($613<<24>>24)==(0);
          if ($614) {
           $616 = $612&255;
           $617 = $616 >>> 1;
           $619 = $617;
          } else {
           $615 = HEAP32[$236>>2]|0;
           $619 = $615;
          }
          $618 = ($619>>>0)>(1);
          $__psn$__trailing_sign$05 = $618 ? $__psn : $__trailing_sign$0379;
          $1247 = $1245;$1248 = $1244;$1249 = $1243;$1250 = $1242;$__e$sroa$0$20 = $__e$sroa$0$2;$__fd$2 = $__fd$0;$__trailing_sign$1 = $__psn$__trailing_sign$05;$free229 = $free228372;
          break L115;
         }
         if ($603) {
          $620 = HEAP32[$602>>2]|0;
          $621 = (($620) + 36|0);
          $622 = HEAP32[$621>>2]|0;
          __THREW__ = 0;
          $623 = (invoke_ii($622|0,($602|0))|0);
          $624 = __THREW__; __THREW__ = 0;
          $625 = $624&1;
          if ($625) {
           $$ph$ph251$ph$ph$ph$ph$ph$ph = $1244;$free232$ph$ph250$ph$ph$ph$ph$ph$ph = $free228372;
           label = 94;
           break L93;
          } else {
           $$0$i$i113 = $623;
          }
         } else {
          $626 = HEAP32[$604>>2]|0;
          $$0$i$i113 = $626;
         }
         $627 = HEAP8[$__nsn>>0]|0;
         $628 = $627 & 1;
         $629 = ($628<<24>>24)==(0);
         $630 = HEAP32[$235>>2]|0;
         $$479 = $629 ? $234 : $630;
         $631 = HEAP32[$$479>>2]|0;
         $632 = ($$0$i$i113|0)==($631|0);
         if (!($632)) {
          label = 236;
          break L93;
         }
         $633 = HEAP32[$__b>>2]|0;
         $634 = (($633) + 12|0);
         $635 = HEAP32[$634>>2]|0;
         $636 = (($633) + 16|0);
         $637 = HEAP32[$636>>2]|0;
         $638 = ($635|0)==($637|0);
         if ($638) {
          $639 = HEAP32[$633>>2]|0;
          $640 = (($639) + 40|0);
          $641 = HEAP32[$640>>2]|0;
          __THREW__ = 0;
          (invoke_ii($641|0,($633|0))|0);
          $642 = __THREW__; __THREW__ = 0;
          $643 = $642&1;
          if ($643) {
           $$ph$ph251$ph$ph$ph$ph$ph$ph = $1244;$free232$ph$ph250$ph$ph$ph$ph$ph$ph = $free228372;
           label = 94;
           break L93;
          }
         } else {
          $644 = (($635) + 4|0);
          HEAP32[$634>>2] = $644;
         }
         HEAP8[$__neg>>0] = 1;
         $645 = HEAP8[$__nsn>>0]|0;
         $646 = $645 & 1;
         $647 = ($646<<24>>24)==(0);
         if ($647) {
          $649 = $645&255;
          $650 = $649 >>> 1;
          $652 = $650;
         } else {
          $648 = HEAP32[$234>>2]|0;
          $652 = $648;
         }
         $651 = ($652>>>0)>(1);
         $__nsn$__trailing_sign$06 = $651 ? $__nsn : $__trailing_sign$0379;
         $1247 = $1245;$1248 = $1244;$1249 = $1243;$1250 = $1242;$__e$sroa$0$20 = $__e$sroa$0$2;$__fd$2 = $__fd$0;$__trailing_sign$1 = $__nsn$__trailing_sign$06;$free229 = $free228372;
         break L115;
        }
       }
       if ($481) {
        $506 = $479&255;
        $507 = $506 >>> 1;
        $509 = $507;
       } else {
        $505 = HEAP32[$236>>2]|0;
        $509 = $505;
       }
       $508 = ($509|0)==(0);
       $510 = HEAP32[$__b>>2]|0;
       $511 = (($510) + 12|0);
       $512 = HEAP32[$511>>2]|0;
       $513 = (($510) + 16|0);
       $514 = HEAP32[$513>>2]|0;
       $515 = ($512|0)==($514|0);
       if ($508) {
        if ($515) {
         $549 = HEAP32[$510>>2]|0;
         $550 = (($549) + 36|0);
         $551 = HEAP32[$550>>2]|0;
         __THREW__ = 0;
         $552 = (invoke_ii($551|0,($510|0))|0);
         $553 = __THREW__; __THREW__ = 0;
         $554 = $553&1;
         if ($554) {
          $$ph$ph251$ph$ph$ph$ph$ph$ph = $1244;$free232$ph$ph250$ph$ph$ph$ph$ph$ph = $free228372;
          label = 94;
          break L93;
         }
         $$pre465 = HEAP8[$__nsn>>0]|0;
         $$0$i$i79 = $552;$557 = $$pre465;
        } else {
         $555 = HEAP32[$512>>2]|0;
         $$0$i$i79 = $555;$557 = $485;
        }
        $556 = $557 & 1;
        $558 = ($556<<24>>24)==(0);
        $559 = HEAP32[$235>>2]|0;
        $$477 = $558 ? $234 : $559;
        $560 = HEAP32[$$477>>2]|0;
        $561 = ($$0$i$i79|0)==($560|0);
        if (!($561)) {
         $1247 = $1245;$1248 = $1244;$1249 = $1243;$1250 = $1242;$__e$sroa$0$20 = $__e$sroa$0$2;$__fd$2 = $__fd$0;$__trailing_sign$1 = $__trailing_sign$0379;$free229 = $free228372;
         break L115;
        }
        $562 = HEAP32[$__b>>2]|0;
        $563 = (($562) + 12|0);
        $564 = HEAP32[$563>>2]|0;
        $565 = (($562) + 16|0);
        $566 = HEAP32[$565>>2]|0;
        $567 = ($564|0)==($566|0);
        if ($567) {
         $568 = HEAP32[$562>>2]|0;
         $569 = (($568) + 40|0);
         $570 = HEAP32[$569>>2]|0;
         __THREW__ = 0;
         (invoke_ii($570|0,($562|0))|0);
         $571 = __THREW__; __THREW__ = 0;
         $572 = $571&1;
         if ($572) {
          $$ph$ph251$ph$ph$ph$ph$ph$ph = $1244;$free232$ph$ph250$ph$ph$ph$ph$ph$ph = $free228372;
          label = 94;
          break L93;
         }
        } else {
         $573 = (($564) + 4|0);
         HEAP32[$563>>2] = $573;
        }
        HEAP8[$__neg>>0] = 1;
        $574 = HEAP8[$__nsn>>0]|0;
        $575 = $574 & 1;
        $576 = ($575<<24>>24)==(0);
        if ($576) {
         $578 = $574&255;
         $579 = $578 >>> 1;
         $581 = $579;
        } else {
         $577 = HEAP32[$234>>2]|0;
         $581 = $577;
        }
        $580 = ($581>>>0)>(1);
        $__nsn$__trailing_sign$0 = $580 ? $__nsn : $__trailing_sign$0379;
        $1247 = $1245;$1248 = $1244;$1249 = $1243;$1250 = $1242;$__e$sroa$0$20 = $__e$sroa$0$2;$__fd$2 = $__fd$0;$__trailing_sign$1 = $__nsn$__trailing_sign$0;$free229 = $free228372;
        break L115;
       }
       if ($515) {
        $516 = HEAP32[$510>>2]|0;
        $517 = (($516) + 36|0);
        $518 = HEAP32[$517>>2]|0;
        __THREW__ = 0;
        $519 = (invoke_ii($518|0,($510|0))|0);
        $520 = __THREW__; __THREW__ = 0;
        $521 = $520&1;
        if ($521) {
         $$ph$ph251$ph$ph$ph$ph$ph$ph = $1244;$free232$ph$ph250$ph$ph$ph$ph$ph$ph = $free228372;
         label = 94;
         break L93;
        }
        $$pre466 = HEAP8[$__psn>>0]|0;
        $$0$i$i71 = $519;$524 = $$pre466;
       } else {
        $522 = HEAP32[$512>>2]|0;
        $$0$i$i71 = $522;$524 = $479;
       }
       $523 = $524 & 1;
       $525 = ($523<<24>>24)==(0);
       $526 = HEAP32[$237>>2]|0;
       $$ = $525 ? $236 : $526;
       $527 = HEAP32[$$>>2]|0;
       $528 = ($$0$i$i71|0)==($527|0);
       if (!($528)) {
        HEAP8[$__neg>>0] = 1;
        $1247 = $1245;$1248 = $1244;$1249 = $1243;$1250 = $1242;$__e$sroa$0$20 = $__e$sroa$0$2;$__fd$2 = $__fd$0;$__trailing_sign$1 = $__trailing_sign$0379;$free229 = $free228372;
        break L115;
       }
       $529 = HEAP32[$__b>>2]|0;
       $530 = (($529) + 12|0);
       $531 = HEAP32[$530>>2]|0;
       $532 = (($529) + 16|0);
       $533 = HEAP32[$532>>2]|0;
       $534 = ($531|0)==($533|0);
       if ($534) {
        $535 = HEAP32[$529>>2]|0;
        $536 = (($535) + 40|0);
        $537 = HEAP32[$536>>2]|0;
        __THREW__ = 0;
        (invoke_ii($537|0,($529|0))|0);
        $538 = __THREW__; __THREW__ = 0;
        $539 = $538&1;
        if ($539) {
         $$ph$ph251$ph$ph$ph$ph$ph$ph = $1244;$free232$ph$ph250$ph$ph$ph$ph$ph$ph = $free228372;
         label = 94;
         break L93;
        }
       } else {
        $540 = (($531) + 4|0);
        HEAP32[$530>>2] = $540;
       }
       $541 = HEAP8[$__psn>>0]|0;
       $542 = $541 & 1;
       $543 = ($542<<24>>24)==(0);
       if ($543) {
        $545 = $541&255;
        $546 = $545 >>> 1;
        $548 = $546;
       } else {
        $544 = HEAP32[$236>>2]|0;
        $548 = $544;
       }
       $547 = ($548>>>0)>(1);
       $__psn$__trailing_sign$0 = $547 ? $__psn : $__trailing_sign$0379;
       $1247 = $1245;$1248 = $1244;$1249 = $1243;$1250 = $1242;$__e$sroa$0$20 = $__e$sroa$0$2;$__fd$2 = $__fd$0;$__trailing_sign$1 = $__psn$__trailing_sign$0;$free229 = $free228372;
      }
      break;
     }
     default: {
      $1247 = $1245;$1248 = $1244;$1249 = $1243;$1250 = $1242;$__e$sroa$0$20 = $__e$sroa$0$2;$__fd$2 = $__fd$0;$__trailing_sign$1 = $__trailing_sign$0379;$free229 = $free228372;
     }
     }
    } while(0);
    L455: do {
     if ((label|0) == 136) {
      label = 0;
      $393 = ($__p$0377|0)==(3);
      if ($393) {
       $$lcssa313 = $1244;$$lcssa330 = $1243;$__e$sroa$0$21 = $__e$sroa$0$2;$__trailing_sign$0$lcssa = $__trailing_sign$0379;$free228$lcssa = $free228372;
       label = 418;
       break L93;
      } else {
       $$pre$i3$i$i47 = $__e$sroa$0$2;$410 = $__e$sroa$0$2;$__e$sroa$0$3 = $__e$sroa$0$2;
      }
      while(1) {
       $394 = HEAP32[$__b>>2]|0;
       $395 = ($394|0)==(0|0);
       do {
        if ($395) {
         $424 = 1;
        } else {
         $396 = (($394) + 12|0);
         $397 = HEAP32[$396>>2]|0;
         $398 = (($394) + 16|0);
         $399 = HEAP32[$398>>2]|0;
         $400 = ($397|0)==($399|0);
         if ($400) {
          $401 = HEAP32[$394>>2]|0;
          $402 = (($401) + 36|0);
          $403 = HEAP32[$402>>2]|0;
          __THREW__ = 0;
          $404 = (invoke_ii($403|0,($394|0))|0);
          $405 = __THREW__; __THREW__ = 0;
          $406 = $405&1;
          if ($406) {
           label = 93;
           break L93;
          } else {
           $$0$i$i$i$i39 = $404;
          }
         } else {
          $407 = HEAP32[$397>>2]|0;
          $$0$i$i$i$i39 = $407;
         }
         $408 = ($$0$i$i$i$i39|0)==(-1);
         if ($408) {
          HEAP32[$__b>>2] = 0;
          $424 = 1;
          break;
         } else {
          $$pre$i$i$i41 = HEAP32[$__b>>2]|0;
          $phitmp$i$i$i42 = ($$pre$i$i$i41|0)==(0|0);
          $424 = $phitmp$i$i$i42;
          break;
         }
        }
       } while(0);
       $409 = ($410|0)==(0|0);
       if ($409) {
        $$pre$i3$i$i47452 = $$pre$i3$i$i47;$__e$sroa$0$4 = $__e$sroa$0$3;
        label = 149;
       } else {
        $411 = (($410) + 12|0);
        $412 = HEAP32[$411>>2]|0;
        $413 = (($410) + 16|0);
        $414 = HEAP32[$413>>2]|0;
        $415 = ($412|0)==($414|0);
        if ($415) {
         $416 = HEAP32[$410>>2]|0;
         $417 = (($416) + 36|0);
         $418 = HEAP32[$417>>2]|0;
         __THREW__ = 0;
         $419 = (invoke_ii($418|0,($410|0))|0);
         $420 = __THREW__; __THREW__ = 0;
         $421 = $420&1;
         if ($421) {
          label = 93;
          break L93;
         } else {
          $$0$i$i1$i$i45 = $419;
         }
        } else {
         $422 = HEAP32[$412>>2]|0;
         $$0$i$i1$i$i45 = $422;
        }
        $423 = ($$0$i$i1$i$i45|0)==(-1);
        if ($423) {
         $$pre$i3$i$i47452 = 0;$__e$sroa$0$4 = 0;
         label = 149;
        } else {
         $phitmp$i4$i$i48 = ($$pre$i3$i$i47|0)==(0|0);
         $tmp$i$i50 = $424 ^ $phitmp$i4$i$i48;
         if ($tmp$i$i50) {
          $$pre$i3$i$i47454 = $$pre$i3$i$i47;$1252 = $$pre$i3$i$i47;$__e$sroa$0$5 = $__e$sroa$0$3;
         } else {
          $1247 = $1245;$1248 = $1244;$1249 = $1243;$1250 = $1242;$__e$sroa$0$20 = $__e$sroa$0$3;$__fd$2 = $__fd$0;$__trailing_sign$1 = $__trailing_sign$0379;$free229 = $free228372;
          break L455;
         }
        }
       }
       if ((label|0) == 149) {
        label = 0;
        if ($424) {
         $1247 = $1245;$1248 = $1244;$1249 = $1243;$1250 = $1242;$__e$sroa$0$20 = $__e$sroa$0$4;$__fd$2 = $__fd$0;$__trailing_sign$1 = $__trailing_sign$0379;$free229 = $free228372;
         break L455;
        } else {
         $$pre$i3$i$i47454 = $$pre$i3$i$i47452;$1252 = 0;$__e$sroa$0$5 = $__e$sroa$0$4;
        }
       }
       $425 = HEAP32[$__b>>2]|0;
       $426 = (($425) + 12|0);
       $427 = HEAP32[$426>>2]|0;
       $428 = (($425) + 16|0);
       $429 = HEAP32[$428>>2]|0;
       $430 = ($427|0)==($429|0);
       if ($430) {
        $431 = HEAP32[$425>>2]|0;
        $432 = (($431) + 36|0);
        $433 = HEAP32[$432>>2]|0;
        __THREW__ = 0;
        $434 = (invoke_ii($433|0,($425|0))|0);
        $435 = __THREW__; __THREW__ = 0;
        $436 = $435&1;
        if ($436) {
         label = 93;
         break L93;
        } else {
         $$0$i$i54 = $434;
        }
       } else {
        $437 = HEAP32[$427>>2]|0;
        $$0$i$i54 = $437;
       }
       $438 = HEAP32[$__ct>>2]|0;
       $439 = (($438) + 12|0);
       $440 = HEAP32[$439>>2]|0;
       __THREW__ = 0;
       $441 = (invoke_iiii($440|0,($__ct|0),8192,($$0$i$i54|0))|0);
       $442 = __THREW__; __THREW__ = 0;
       $443 = $442&1;
       if ($443) {
        label = 93;
        break L93;
       }
       if (!($441)) {
        $1247 = $1245;$1248 = $1244;$1249 = $1243;$1250 = $1242;$__e$sroa$0$20 = $__e$sroa$0$5;$__fd$2 = $__fd$0;$__trailing_sign$1 = $__trailing_sign$0379;$free229 = $free228372;
        break L455;
       }
       $444 = HEAP32[$__b>>2]|0;
       $445 = (($444) + 12|0);
       $446 = HEAP32[$445>>2]|0;
       $447 = (($444) + 16|0);
       $448 = HEAP32[$447>>2]|0;
       $449 = ($446|0)==($448|0);
       if ($449) {
        $450 = HEAP32[$444>>2]|0;
        $451 = (($450) + 40|0);
        $452 = HEAP32[$451>>2]|0;
        __THREW__ = 0;
        $453 = (invoke_ii($452|0,($444|0))|0);
        $454 = __THREW__; __THREW__ = 0;
        $455 = $454&1;
        if ($455) {
         label = 93;
         break L93;
        } else {
         $$0$i$i59 = $453;
        }
       } else {
        $456 = (($446) + 4|0);
        HEAP32[$445>>2] = $456;
        $457 = HEAP32[$446>>2]|0;
        $$0$i$i59 = $457;
       }
       $458 = HEAP8[$__spaces>>0]|0;
       $459 = $458 & 1;
       $460 = ($459<<24>>24)!=(0);
       if ($460) {
        $463 = HEAP32[$__spaces>>2]|0;
        $464 = $463 & -2;
        $465 = (($464) + -1)|0;
        $466 = HEAP32[$242>>2]|0;
        $__cap$0$i28 = $465;$__sz$0$i29 = $466;
       } else {
        $461 = $458&255;
        $462 = $461 >>> 1;
        $__cap$0$i28 = 1;$__sz$0$i29 = $462;
       }
       $467 = ($__sz$0$i29|0)==($__cap$0$i28|0);
       if ($467) {
        __THREW__ = 0;
        invoke_viiiiiii(480,($__spaces|0),($__cap$0$i28|0),1,($__cap$0$i28|0),($__cap$0$i28|0),0,0);
        $468 = __THREW__; __THREW__ = 0;
        $469 = $468&1;
        if ($469) {
         label = 93;
         break L93;
        }
        $470 = HEAP8[$__spaces>>0]|0;
        $471 = $470 & 1;
        $472 = ($471<<24>>24)==(0);
        if ($472) {
         label = 166;
        } else {
         label = 167;
        }
       } else {
        if ($460) {
         label = 167;
        } else {
         label = 166;
        }
       }
       if ((label|0) == 166) {
        label = 0;
        $473 = $__sz$0$i29 << 1;
        $474 = (($473) + 2)|0;
        $475 = $474&255;
        HEAP8[$__spaces>>0] = $475;
        $__p$0$sum$pre$i30 = (($__sz$0$i29) + 1)|0;
        $$pn$i32 = $242;$__p$0$sum$pre$phi$i31ZZZ2D = $__p$0$sum$pre$i30;
       }
       else if ((label|0) == 167) {
        label = 0;
        $476 = HEAP32[$243>>2]|0;
        $477 = (($__sz$0$i29) + 1)|0;
        HEAP32[$242>>2] = $477;
        $$pn$i32 = $476;$__p$0$sum$pre$phi$i31ZZZ2D = $477;
       }
       $__p$0$i33 = (($$pn$i32) + ($__sz$0$i29<<2)|0);
       HEAP32[$__p$0$i33>>2] = $$0$i$i59;
       $478 = (($$pn$i32) + ($__p$0$sum$pre$phi$i31ZZZ2D<<2)|0);
       HEAP32[$478>>2] = 0;
       $$pre$i3$i$i47 = $$pre$i3$i$i47454;$410 = $1252;$__e$sroa$0$3 = $__e$sroa$0$5;
      }
     }
    } while(0);
    $1127 = (($__p$0377) + 1)|0;
    $1128 = ($1127>>>0)<(4);
    if ($1128) {
     $1242 = $1250;$1243 = $1249;$1244 = $1248;$1245 = $1247;$__e$sroa$0$0 = $__e$sroa$0$20;$__fd$0 = $__fd$2;$__p$0377 = $1127;$__trailing_sign$0379 = $__trailing_sign$1;$free228372 = $free229;
    } else {
     $$lcssa313 = $1248;$$lcssa330 = $1249;$__e$sroa$0$21 = $__e$sroa$0$20;$__trailing_sign$0$lcssa = $__trailing_sign$1;$free228$lcssa = $free229;
     label = 418;
     break;
    }
   }
   L502:    switch (label|0) {
    case 87: {
     $281 = ___cxa_find_matching_catch(-1,-1)|0;
     $282 = tempRet0;
     $332 = $$ph$ph$ph;$free232 = $free232$ph$ph$ph;$lpad$phi$index = $281;$lpad$phi$index30 = $282;
     break L90;
     break;
    }
    case 89: {
     $285 = ___cxa_find_matching_catch(-1,-1)|0;
     $286 = tempRet0;
     $332 = $1251;$free232 = $free230;$lpad$phi$index = $285;$lpad$phi$index30 = $286;
     break L90;
     break;
    }
    case 91: {
     $289 = ___cxa_find_matching_catch(-1,-1)|0;
     $290 = tempRet0;
     $332 = $1244;$free232 = $free228372;$lpad$phi$index = $289;$lpad$phi$index30 = $290;
     break L90;
     break;
    }
    case 92: {
     $291 = ___cxa_find_matching_catch(-1,-1)|0;
     $292 = tempRet0;
     $332 = $1244;$free232 = $free228372;$lpad$phi$index = $291;$lpad$phi$index30 = $292;
     break L90;
     break;
    }
    case 93: {
     $293 = ___cxa_find_matching_catch(-1,-1)|0;
     $294 = tempRet0;
     $332 = $1244;$free232 = $free228372;$lpad$phi$index = $293;$lpad$phi$index30 = $294;
     break L90;
     break;
    }
    case 94: {
     $295 = ___cxa_find_matching_catch(-1,-1)|0;
     $296 = tempRet0;
     $332 = $$ph$ph251$ph$ph$ph$ph$ph$ph;$free232 = $free232$ph$ph250$ph$ph$ph$ph$ph$ph;$lpad$phi$index = $295;$lpad$phi$index30 = $296;
     break L90;
     break;
    }
    case 135: {
     $391 = HEAP32[$__err>>2]|0;
     $392 = $391 | 4;
     HEAP32[$__err>>2] = $392;
     $$0 = 0;$1237 = $1244;$free234 = $free228372;
     break;
    }
    case 236: {
     $653 = HEAP32[$__err>>2]|0;
     $654 = $653 | 4;
     HEAP32[$__err>>2] = $654;
     $$0 = 0;$1237 = $1244;$free234 = $free228372;
     break;
    }
    case 293: {
     $806 = HEAP32[$__err>>2]|0;
     $807 = $806 | 4;
     HEAP32[$__err>>2] = $807;
     $$0 = 0;$1237 = $1244;$free234 = $free228372;
     break;
    }
    case 317: {
     $871 = (___cxa_allocate_exception(4)|0);
     HEAP32[$871>>2] = ((15656 + 8|0));
     __THREW__ = 0;
     invoke_viii(379,($871|0),(15712|0),(374|0));
     $872 = __THREW__; __THREW__ = 0;
     $873 = $872&1;
     if ($873) {
      label = 88;
     } else {
      // unreachable;
     }
     break;
    }
    case 324: {
     $878 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
     $879 = tempRet0;
     ___clang_call_terminate($878);
     // unreachable;
     break;
    }
    case 335: {
     $912 = (___cxa_allocate_exception(4)|0);
     HEAP32[$912>>2] = ((15656 + 8|0));
     __THREW__ = 0;
     invoke_viii(379,($912|0),(15712|0),(374|0));
     $913 = __THREW__; __THREW__ = 0;
     $914 = $913&1;
     if ($914) {
      label = 88;
     } else {
      // unreachable;
     }
     break;
    }
    case 347: {
     $945 = (___cxa_allocate_exception(4)|0);
     HEAP32[$945>>2] = ((15656 + 8|0));
     __THREW__ = 0;
     invoke_viii(379,($945|0),(15712|0),(374|0));
     $946 = __THREW__; __THREW__ = 0;
     $947 = $946&1;
     if ($947) {
      $297 = ___cxa_find_matching_catch(-1,-1)|0;
      $298 = tempRet0;
      $332 = $904;$free232 = $free227;$lpad$phi$index = $297;$lpad$phi$index30 = $298;
      break L90;
     } else {
      // unreachable;
     }
     break;
    }
    case 370: {
     $997 = HEAP32[$__err>>2]|0;
     $998 = $997 | 4;
     HEAP32[$__err>>2] = $998;
     $$0 = 0;$1237 = $1251;$free234 = $free230;
     break;
    }
    case 393: {
     $1061 = HEAP32[$__err>>2]|0;
     $1062 = $1061 | 4;
     HEAP32[$__err>>2] = $1062;
     $$0 = 0;$1237 = $1251;$free234 = $free230;
     break;
    }
    case 398: {
     $1078 = (___cxa_allocate_exception(4)|0);
     HEAP32[$1078>>2] = ((15656 + 8|0));
     __THREW__ = 0;
     invoke_viii(379,($1078|0),(15712|0),(374|0));
     $1079 = __THREW__; __THREW__ = 0;
     $1080 = $1079&1;
     if ($1080) {
      $287 = ___cxa_find_matching_catch(-1,-1)|0;
      $288 = tempRet0;
      $332 = $1251;$free232 = $free230;$lpad$phi$index = $287;$lpad$phi$index30 = $288;
      break L90;
     } else {
      // unreachable;
     }
     break;
    }
    case 405: {
     $1085 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
     $1086 = tempRet0;
     ___clang_call_terminate($1085);
     // unreachable;
     break;
    }
    case 416: {
     $1125 = HEAP32[$__err>>2]|0;
     $1126 = $1125 | 4;
     HEAP32[$__err>>2] = $1126;
     $$0 = 0;$1237 = $1251;$free234 = $free230;
     break;
    }
    case 418: {
     $1129 = ($__trailing_sign$0$lcssa|0)==(0|0);
     L513: do {
      if (!($1129)) {
       $1130 = (($__trailing_sign$0$lcssa) + 4|0);
       $1131 = (($__trailing_sign$0$lcssa) + 8|0);
       $__e$sroa$0$22 = $__e$sroa$0$21;$__i$0 = 1;
       L515: while(1) {
        $1132 = HEAP8[$__trailing_sign$0$lcssa>>0]|0;
        $1133 = $1132 & 1;
        $1134 = ($1133<<24>>24)==(0);
        if ($1134) {
         $1136 = $1132&255;
         $1137 = $1136 >>> 1;
         $1139 = $1137;
        } else {
         $1135 = HEAP32[$1130>>2]|0;
         $1139 = $1135;
        }
        $1138 = ($__i$0>>>0)<($1139>>>0);
        if (!($1138)) {
         break L513;
        }
        $1140 = HEAP32[$__b>>2]|0;
        $1141 = ($1140|0)==(0|0);
        do {
         if ($1141) {
          $1271 = 1;
         } else {
          $1142 = (($1140) + 12|0);
          $1143 = HEAP32[$1142>>2]|0;
          $1144 = (($1140) + 16|0);
          $1145 = HEAP32[$1144>>2]|0;
          $1146 = ($1143|0)==($1145|0);
          if ($1146) {
           $1147 = HEAP32[$1140>>2]|0;
           $1148 = (($1147) + 36|0);
           $1149 = HEAP32[$1148>>2]|0;
           __THREW__ = 0;
           $1150 = (invoke_ii($1149|0,($1140|0))|0);
           $1151 = __THREW__; __THREW__ = 0;
           $1152 = $1151&1;
           if ($1152) {
            label = 86;
            break L515;
           } else {
            $$0$i$i$i$i = $1150;
           }
          } else {
           $1153 = HEAP32[$1143>>2]|0;
           $$0$i$i$i$i = $1153;
          }
          $1154 = ($$0$i$i$i$i|0)==(-1);
          if ($1154) {
           HEAP32[$__b>>2] = 0;
           $1271 = 1;
           break;
          } else {
           $$pre$i$i$i = HEAP32[$__b>>2]|0;
           $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
           $1271 = $phitmp$i$i$i;
           break;
          }
         }
        } while(0);
        $1155 = ($__e$sroa$0$22|0)==(0|0);
        if ($1155) {
         label = 436;
        } else {
         $1156 = (($__e$sroa$0$22) + 12|0);
         $1157 = HEAP32[$1156>>2]|0;
         $1158 = (($__e$sroa$0$22) + 16|0);
         $1159 = HEAP32[$1158>>2]|0;
         $1160 = ($1157|0)==($1159|0);
         if ($1160) {
          $1161 = HEAP32[$__e$sroa$0$22>>2]|0;
          $1162 = (($1161) + 36|0);
          $1163 = HEAP32[$1162>>2]|0;
          __THREW__ = 0;
          $1164 = (invoke_ii($1163|0,($__e$sroa$0$22|0))|0);
          $1165 = __THREW__; __THREW__ = 0;
          $1166 = $1165&1;
          if ($1166) {
           label = 86;
           break;
          } else {
           $$0$i$i1$i$i = $1164;
          }
         } else {
          $1167 = HEAP32[$1157>>2]|0;
          $$0$i$i1$i$i = $1167;
         }
         $1168 = ($$0$i$i1$i$i|0)==(-1);
         if ($1168) {
          label = 436;
         } else {
          if ($1271) {
           $__e$sroa$0$24 = $__e$sroa$0$22;
          } else {
           label = 444;
           break;
          }
         }
        }
        if ((label|0) == 436) {
         label = 0;
         if ($1271) {
          label = 444;
          break;
         } else {
          $__e$sroa$0$24 = 0;
         }
        }
        $1169 = HEAP32[$__b>>2]|0;
        $1170 = (($1169) + 12|0);
        $1171 = HEAP32[$1170>>2]|0;
        $1172 = (($1169) + 16|0);
        $1173 = HEAP32[$1172>>2]|0;
        $1174 = ($1171|0)==($1173|0);
        if ($1174) {
         $1175 = HEAP32[$1169>>2]|0;
         $1176 = (($1175) + 36|0);
         $1177 = HEAP32[$1176>>2]|0;
         __THREW__ = 0;
         $1178 = (invoke_ii($1177|0,($1169|0))|0);
         $1179 = __THREW__; __THREW__ = 0;
         $1180 = $1179&1;
         if ($1180) {
          label = 86;
          break;
         } else {
          $$0$i$i = $1178;
         }
        } else {
         $1181 = HEAP32[$1171>>2]|0;
         $$0$i$i = $1181;
        }
        $1182 = HEAP8[$__trailing_sign$0$lcssa>>0]|0;
        $1183 = $1182 & 1;
        $1184 = ($1183<<24>>24)==(0);
        if ($1184) {
         $1187 = $1130;
        } else {
         $1185 = HEAP32[$1131>>2]|0;
         $1187 = $1185;
        }
        $1186 = (($1187) + ($__i$0<<2)|0);
        $1188 = HEAP32[$1186>>2]|0;
        $1189 = ($$0$i$i|0)==($1188|0);
        if (!($1189)) {
         label = 444;
         break;
        }
        $1192 = (($__i$0) + 1)|0;
        $1193 = HEAP32[$__b>>2]|0;
        $1194 = (($1193) + 12|0);
        $1195 = HEAP32[$1194>>2]|0;
        $1196 = (($1193) + 16|0);
        $1197 = HEAP32[$1196>>2]|0;
        $1198 = ($1195|0)==($1197|0);
        if ($1198) {
         $1199 = HEAP32[$1193>>2]|0;
         $1200 = (($1199) + 40|0);
         $1201 = HEAP32[$1200>>2]|0;
         __THREW__ = 0;
         (invoke_ii($1201|0,($1193|0))|0);
         $1202 = __THREW__; __THREW__ = 0;
         $1203 = $1202&1;
         if ($1203) {
          label = 86;
          break;
         } else {
          $__e$sroa$0$22 = $__e$sroa$0$24;$__i$0 = $1192;
          continue;
         }
        } else {
         $1204 = (($1195) + 4|0);
         HEAP32[$1194>>2] = $1204;
         $__e$sroa$0$22 = $__e$sroa$0$24;$__i$0 = $1192;
         continue;
        }
       }
       if ((label|0) == 86) {
        $279 = ___cxa_find_matching_catch(-1,-1)|0;
        $280 = tempRet0;
        $332 = $$lcssa313;$free232 = $free228$lcssa;$lpad$phi$index = $279;$lpad$phi$index30 = $280;
        break L90;
       }
       else if ((label|0) == 444) {
        $1190 = HEAP32[$__err>>2]|0;
        $1191 = $1190 | 4;
        HEAP32[$__err>>2] = $1191;
        $$0 = 0;$1237 = $$lcssa313;$free234 = $free228$lcssa;
        break L502;
       }
      }
     } while(0);
     $1205 = ($$lcssa313|0)==($$lcssa330|0);
     if ($1205) {
      $$0 = 1;$1237 = $$lcssa330;$free234 = $free228$lcssa;
     } else {
      HEAP32[$__et>>2] = 0;
      __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grp,$$lcssa313,$$lcssa330,$__et);
      $1206 = HEAP32[$__et>>2]|0;
      $1207 = ($1206|0)==(0);
      if ($1207) {
       $$0 = 1;$1237 = $$lcssa313;$free234 = $free228$lcssa;
      } else {
       $1208 = HEAP32[$__err>>2]|0;
       $1209 = $1208 | 4;
       HEAP32[$__err>>2] = $1209;
       $$0 = 0;$1237 = $$lcssa313;$free234 = $free228$lcssa;
      }
     }
     break;
    }
   }
   if ((label|0) == 88) {
    $283 = ___cxa_find_matching_catch(-1,-1)|0;
    $284 = tempRet0;
    $332 = $904;$free232 = $free227;$lpad$phi$index = $283;$lpad$phi$index30 = $284;
    break;
   }
   $1210 = HEAP8[$__spaces>>0]|0;
   $1211 = $1210 & 1;
   $1212 = ($1211<<24>>24)==(0);
   if (!($1212)) {
    $1213 = HEAP32[$243>>2]|0;
    $1214 = ($1213|0)==(0|0);
    if (!($1214)) {
     _free($1213);
    }
   }
   $1215 = HEAP8[$__nsn>>0]|0;
   $1216 = $1215 & 1;
   $1217 = ($1216<<24>>24)==(0);
   if (!($1217)) {
    $1218 = HEAP32[$235>>2]|0;
    $1219 = ($1218|0)==(0|0);
    if (!($1219)) {
     _free($1218);
    }
   }
   $1220 = HEAP8[$__psn>>0]|0;
   $1221 = $1220 & 1;
   $1222 = ($1221<<24>>24)==(0);
   if (!($1222)) {
    $1223 = HEAP32[$237>>2]|0;
    $1224 = ($1223|0)==(0|0);
    if (!($1224)) {
     _free($1223);
    }
   }
   $1225 = HEAP8[$__sym>>0]|0;
   $1226 = $1225 & 1;
   $1227 = ($1226<<24>>24)==(0);
   if (!($1227)) {
    $1228 = HEAP32[$241>>2]|0;
    $1229 = ($1228|0)==(0|0);
    if (!($1229)) {
     _free($1228);
    }
   }
   $1230 = HEAP8[$__grp>>0]|0;
   $1231 = $1230 & 1;
   $1232 = ($1231<<24>>24)==(0);
   if (!($1232)) {
    $1233 = (($__grp) + 8|0);
    $1234 = HEAP32[$1233>>2]|0;
    $1235 = ($1234|0)==(0|0);
    if (!($1235)) {
     _free($1234);
    }
   }
   $1236 = ($1237|0)==(0|0);
   if ($1236) {
    STACKTOP = sp;return ($$0|0);
   }
   __THREW__ = 0;
   invoke_vi($free234|0,($1237|0));
   $1238 = __THREW__; __THREW__ = 0;
   $1239 = $1238&1;
   if ($1239) {
    $1240 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
    $1241 = tempRet0;
    ___clang_call_terminate($1240);
    // unreachable;
   } else {
    STACKTOP = sp;return ($$0|0);
   }
  }
  else if ((label|0) == 96) {
   $299 = ___cxa_find_matching_catch(-1,-1)|0;
   $300 = tempRet0;
   $332 = $__gbuf;$free232 = 473;$lpad$phi$index = $299;$lpad$phi$index30 = $300;
  }
 } while(0);
 $301 = HEAP8[$__spaces>>0]|0;
 $302 = $301 & 1;
 $303 = ($302<<24>>24)==(0);
 if (!($303)) {
  $304 = (($__spaces) + 8|0);
  $305 = HEAP32[$304>>2]|0;
  $306 = ($305|0)==(0|0);
  if (!($306)) {
   _free($305);
  }
 }
 $307 = HEAP8[$__nsn>>0]|0;
 $308 = $307 & 1;
 $309 = ($308<<24>>24)==(0);
 if (!($309)) {
  $310 = (($__nsn) + 8|0);
  $311 = HEAP32[$310>>2]|0;
  $312 = ($311|0)==(0|0);
  if (!($312)) {
   _free($311);
  }
 }
 $313 = HEAP8[$__psn>>0]|0;
 $314 = $313 & 1;
 $315 = ($314<<24>>24)==(0);
 if (!($315)) {
  $316 = (($__psn) + 8|0);
  $317 = HEAP32[$316>>2]|0;
  $318 = ($317|0)==(0|0);
  if (!($318)) {
   _free($317);
  }
 }
 $319 = HEAP8[$__sym>>0]|0;
 $320 = $319 & 1;
 $321 = ($320<<24>>24)==(0);
 if (!($321)) {
  $322 = (($__sym) + 8|0);
  $323 = HEAP32[$322>>2]|0;
  $324 = ($323|0)==(0|0);
  if (!($324)) {
   _free($323);
  }
 }
 $325 = HEAP8[$__grp>>0]|0;
 $326 = $325 & 1;
 $327 = ($326<<24>>24)==(0);
 if (!($327)) {
  $328 = (($__grp) + 8|0);
  $329 = HEAP32[$328>>2]|0;
  $330 = ($329|0)==(0|0);
  if (!($330)) {
   _free($329);
  }
 }
 $331 = ($332|0)==(0|0);
 if ($331) {
  ___resumeException($lpad$phi$index|0);
  // unreachable;
 }
 __THREW__ = 0;
 invoke_vi($free232|0,($332|0));
 $333 = __THREW__; __THREW__ = 0;
 $334 = $333&1;
 if ($334) {
  $335 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
  $336 = tempRet0;
  ___clang_call_terminate($335);
  // unreachable;
 } else {
  ___resumeException($lpad$phi$index|0);
  // unreachable;
 }
 return 0|0;
}
function __ZNKSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIwS3_NS_9allocatorIwEEEE($agg$result,$this,$__b,$__e,$__intl,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__intl = $__intl|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i$i$i = 0, $$0$i$i1$i$i = 0, $$01$i = 0, $$pn$i = 0, $$pre = 0, $$pre$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0;
 var $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0;
 var $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0;
 var $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $__cap$0$i = 0, $__neg = 0, $__p$0$i = 0, $__p$0$lcssa$i = 0, $__p$0$sum$pre$i = 0, $__p$0$sum$pre$phi$iZZZ2D = 0, $__p$02$i = 0, $__p$i$i$i$i = 0, $__sz$0$i = 0, $__w$0$lcssa = 0, $__w$09 = 0, $__wb = 0, $__wbuf = 0, $__wn = 0, $phitmp$i$i = 0, $scevgep5$i = 0, $uglygep$i = 0;
 var $uglygep4$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 432|0;
 $__p$i$i$i$i = sp;
 $__wbuf = sp + 24|0;
 $__wb = sp + 16|0;
 $__wn = sp + 12|0;
 $__neg = sp + 424|0;
 HEAP32[$__wb>>2] = $__wbuf;
 $0 = (($__wb) + 4|0);
 HEAP32[$0>>2] = 473;
 $1 = (($__wbuf) + 400|0);
 $2 = (($__iob) + 28|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + 4|0);
 $5 = HEAP32[$4>>2]|0;HEAP32[$4>>2] = (($5+1)|0);
 $6 = HEAP32[6408>>2]|0;
 $7 = ($6|0)==(-1);
 if ($7) {
  label = 3;
 } else {
  HEAP32[$__p$i$i$i$i>>2] = 6408;
  $8 = (($__p$i$i$i$i) + 4|0);
  HEAP32[$8>>2] = (439);
  $9 = (($__p$i$i$i$i) + 8|0);
  HEAP32[$9>>2] = 0;
  __THREW__ = 0;
  invoke_vii(440,(6408|0),($__p$i$i$i$i|0));
  $10 = __THREW__; __THREW__ = 0;
  $11 = $10&1;
  if (!($11)) {
   label = 3;
  }
 }
 L3: do {
  if ((label|0) == 3) {
   $12 = HEAP32[((6408 + 4|0))>>2]|0;
   $13 = (($12) + -1)|0;
   $14 = (($3) + 12|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = (($3) + 8|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = $15;
   $19 = $17;
   $20 = (($18) - ($19))|0;
   $21 = $20 >> 2;
   $22 = ($21>>>0)>($13>>>0);
   if ($22) {
    $23 = (($17) + ($13<<2)|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = ($24|0)==(0|0);
    if (!($25)) {
     HEAP8[$__neg>>0] = 0;
     $29 = HEAP32[$__e>>2]|0;
     $30 = (($__iob) + 4|0);
     $31 = HEAP32[$30>>2]|0;
     __THREW__ = 0;
     $32 = (invoke_iiiiiiiiiiii(478,($__b|0),($29|0),($__intl|0),($3|0),($31|0),($__err|0),($__neg|0),($24|0),($__wb|0),($__wn|0),($1|0))|0);
     $33 = __THREW__; __THREW__ = 0;
     $34 = $33&1;
     if ($34) {
      break;
     }
     do {
      if ($32) {
       $35 = HEAP8[$__v>>0]|0;
       $36 = $35 & 1;
       $37 = ($36<<24>>24)==(0);
       if ($37) {
        $41 = (($__v) + 4|0);
        HEAP32[$41>>2] = 0;
        HEAP8[$__v>>0] = 0;
       } else {
        $38 = (($__v) + 8|0);
        $39 = HEAP32[$38>>2]|0;
        HEAP32[$39>>2] = 0;
        $40 = (($__v) + 4|0);
        HEAP32[$40>>2] = 0;
       }
       $42 = HEAP8[$__neg>>0]|0;
       $43 = ($42<<24>>24)==(0);
       if (!($43)) {
        $44 = HEAP32[$24>>2]|0;
        $45 = (($44) + 44|0);
        $46 = HEAP32[$45>>2]|0;
        __THREW__ = 0;
        $47 = (invoke_iii($46|0,($24|0),45)|0);
        $48 = __THREW__; __THREW__ = 0;
        $49 = $48&1;
        if ($49) {
         break L3;
        }
        $50 = HEAP8[$__v>>0]|0;
        $51 = $50 & 1;
        $52 = ($51<<24>>24)!=(0);
        if ($52) {
         $55 = HEAP32[$__v>>2]|0;
         $56 = $55 & -2;
         $57 = (($56) + -1)|0;
         $58 = (($__v) + 4|0);
         $59 = HEAP32[$58>>2]|0;
         $__cap$0$i = $57;$__sz$0$i = $59;
        } else {
         $53 = $50&255;
         $54 = $53 >>> 1;
         $__cap$0$i = 1;$__sz$0$i = $54;
        }
        $60 = ($__sz$0$i|0)==($__cap$0$i|0);
        if ($60) {
         __THREW__ = 0;
         invoke_viiiiiii(480,($__v|0),($__cap$0$i|0),1,($__cap$0$i|0),($__cap$0$i|0),0,0);
         $61 = __THREW__; __THREW__ = 0;
         $62 = $61&1;
         if ($62) {
          break L3;
         }
         $63 = HEAP8[$__v>>0]|0;
         $64 = $63 & 1;
         $65 = ($64<<24>>24)==(0);
         if ($65) {
          label = 21;
         } else {
          label = 22;
         }
        } else {
         if ($52) {
          label = 22;
         } else {
          label = 21;
         }
        }
        if ((label|0) == 21) {
         $66 = (($__v) + 4|0);
         $67 = $__sz$0$i << 1;
         $68 = (($67) + 2)|0;
         $69 = $68&255;
         HEAP8[$__v>>0] = $69;
         $__p$0$sum$pre$i = (($__sz$0$i) + 1)|0;
         $$pn$i = $66;$__p$0$sum$pre$phi$iZZZ2D = $__p$0$sum$pre$i;
        }
        else if ((label|0) == 22) {
         $70 = (($__v) + 8|0);
         $71 = HEAP32[$70>>2]|0;
         $72 = (($__sz$0$i) + 1)|0;
         $73 = (($__v) + 4|0);
         HEAP32[$73>>2] = $72;
         $$pn$i = $71;$__p$0$sum$pre$phi$iZZZ2D = $72;
        }
        $__p$0$i = (($$pn$i) + ($__sz$0$i<<2)|0);
        HEAP32[$__p$0$i>>2] = $47;
        $74 = (($$pn$i) + ($__p$0$sum$pre$phi$iZZZ2D<<2)|0);
        HEAP32[$74>>2] = 0;
       }
       $75 = HEAP32[$24>>2]|0;
       $76 = (($75) + 44|0);
       $77 = HEAP32[$76>>2]|0;
       __THREW__ = 0;
       $78 = (invoke_iii($77|0,($24|0),48)|0);
       $79 = __THREW__; __THREW__ = 0;
       $80 = $79&1;
       if ($80) {
        break L3;
       }
       $81 = HEAP32[$__wb>>2]|0;
       $82 = HEAP32[$__wn>>2]|0;
       $83 = (($82) + -4|0);
       $84 = ($81>>>0)<($83>>>0);
       L32: do {
        if ($84) {
         $__w$09 = $81;
         while(1) {
          $87 = HEAP32[$__w$09>>2]|0;
          $88 = ($87|0)==($78|0);
          $86 = (($__w$09) + 4|0);
          if (!($88)) {
           $__w$0$lcssa = $__w$09;
           break L32;
          }
          $85 = ($86>>>0)<($83>>>0);
          if ($85) {
           $__w$09 = $86;
          } else {
           $__w$0$lcssa = $86;
           break;
          }
         }
        } else {
         $__w$0$lcssa = $81;
        }
       } while(0);
       $89 = $__w$0$lcssa;
       $90 = HEAP8[$__v>>0]|0;
       $91 = $90 & 1;
       $92 = ($91<<24>>24)==(0);
       if ($92) {
        $93 = $90&255;
        $94 = $93 >>> 1;
        $105 = 1;$106 = $94;$195 = $90;
       } else {
        $95 = (($__v) + 4|0);
        $96 = HEAP32[$95>>2]|0;
        $97 = HEAP32[$__v>>2]|0;
        $98 = $97 & -2;
        $phitmp$i$i = (($98) + -1)|0;
        $99 = $97&255;
        $105 = $phitmp$i$i;$106 = $96;$195 = $99;
       }
       $100 = $82;
       $101 = (($100) - ($89))|0;
       $102 = $101 >> 2;
       $103 = ($102|0)==(0);
       if (!($103)) {
        $104 = (($105) - ($106))|0;
        $107 = ($104>>>0)<($102>>>0);
        if ($107) {
         $108 = (($106) + ($102))|0;
         $109 = (($108) - ($105))|0;
         __THREW__ = 0;
         invoke_viiiiiii(480,($__v|0),($105|0),($109|0),($106|0),($106|0),0,0);
         $110 = __THREW__; __THREW__ = 0;
         $111 = $110&1;
         if ($111) {
          break L3;
         }
         $$pre$i = HEAP8[$__v>>0]|0;
         $113 = $$pre$i;
        } else {
         $113 = $195;
        }
        $112 = $113 & 1;
        $114 = ($112<<24>>24)==(0);
        if ($114) {
         $117 = (($__v) + 4|0);
         $119 = $117;
        } else {
         $115 = (($__v) + 8|0);
         $116 = HEAP32[$115>>2]|0;
         $119 = $116;
        }
        $118 = (($119) + ($106<<2)|0);
        $120 = ($__w$0$lcssa|0)==($82|0);
        if ($120) {
         $__p$0$lcssa$i = $118;
        } else {
         $121 = (0 - ($89))|0;
         $uglygep$i = (($83) + ($121)|0);
         $uglygep4$i = $uglygep$i;
         $122 = $uglygep4$i >>> 2;
         $123 = (($106) + ($122))|0;
         $124 = (($123) + 1)|0;
         $$01$i = $__w$0$lcssa;$__p$02$i = $118;
         while(1) {
          $125 = HEAP32[$$01$i>>2]|0;
          HEAP32[$__p$02$i>>2] = $125;
          $126 = (($$01$i) + 4|0);
          $127 = ($126|0)==($82|0);
          if ($127) {
           break;
          }
          $128 = (($__p$02$i) + 4|0);
          $$01$i = $126;$__p$02$i = $128;
         }
         $scevgep5$i = (($119) + ($124<<2)|0);
         $__p$0$lcssa$i = $scevgep5$i;
        }
        HEAP32[$__p$0$lcssa$i>>2] = 0;
        $129 = (($106) + ($102))|0;
        $130 = HEAP8[$__v>>0]|0;
        $131 = $130 & 1;
        $132 = ($131<<24>>24)==(0);
        if ($132) {
         $134 = $129 << 1;
         $135 = $134&255;
         HEAP8[$__v>>0] = $135;
         break;
        } else {
         $133 = (($__v) + 4|0);
         HEAP32[$133>>2] = $129;
         break;
        }
       }
      }
     } while(0);
     $136 = HEAP32[$__b>>2]|0;
     $137 = ($136|0)==(0|0);
     if ($137) {
      $167 = 0;$196 = 1;
     } else {
      $138 = (($136) + 12|0);
      $139 = HEAP32[$138>>2]|0;
      $140 = (($136) + 16|0);
      $141 = HEAP32[$140>>2]|0;
      $142 = ($139|0)==($141|0);
      if ($142) {
       $143 = HEAP32[$136>>2]|0;
       $144 = (($143) + 36|0);
       $145 = HEAP32[$144>>2]|0;
       __THREW__ = 0;
       $146 = (invoke_ii($145|0,($136|0))|0);
       $147 = __THREW__; __THREW__ = 0;
       $148 = $147&1;
       if ($148) {
        break;
       } else {
        $$0$i$i$i$i = $146;
       }
      } else {
       $149 = HEAP32[$139>>2]|0;
       $$0$i$i$i$i = $149;
      }
      $150 = ($$0$i$i$i$i|0)==(-1);
      if ($150) {
       HEAP32[$__b>>2] = 0;
       $167 = 0;$196 = 1;
      } else {
       $167 = $136;$196 = 0;
      }
     }
     $151 = ($29|0)==(0|0);
     do {
      if ($151) {
       label = 58;
      } else {
       $152 = (($29) + 12|0);
       $153 = HEAP32[$152>>2]|0;
       $154 = (($29) + 16|0);
       $155 = HEAP32[$154>>2]|0;
       $156 = ($153|0)==($155|0);
       if ($156) {
        $157 = HEAP32[$29>>2]|0;
        $158 = (($157) + 36|0);
        $159 = HEAP32[$158>>2]|0;
        __THREW__ = 0;
        $160 = (invoke_ii($159|0,($29|0))|0);
        $161 = __THREW__; __THREW__ = 0;
        $162 = $161&1;
        if ($162) {
         break L3;
        } else {
         $$0$i$i1$i$i = $160;
        }
       } else {
        $163 = HEAP32[$153>>2]|0;
        $$0$i$i1$i$i = $163;
       }
       $164 = ($$0$i$i1$i$i|0)==(-1);
       if ($164) {
        HEAP32[$__e>>2] = 0;
        label = 58;
        break;
       } else {
        if ($196) {
         break;
        } else {
         label = 60;
         break;
        }
       }
      }
     } while(0);
     if ((label|0) == 58) {
      if ($196) {
       label = 60;
      }
     }
     if ((label|0) == 60) {
      $165 = HEAP32[$__err>>2]|0;
      $166 = $165 | 2;
      HEAP32[$__err>>2] = $166;
     }
     HEAP32[$agg$result>>2] = $167;
     $168 = (($3) + 4|0);
     $169 = HEAP32[$168>>2]|0;HEAP32[$168>>2] = (($169+-1)|0);
     $170 = ($169|0)==(0);
     if ($170) {
      $171 = HEAP32[$3>>2]|0;
      $172 = (($171) + 8|0);
      $173 = HEAP32[$172>>2]|0;
      FUNCTION_TABLE_vi[$173 & 511]($3);
     }
     $174 = HEAP32[$__wb>>2]|0;
     HEAP32[$__wb>>2] = 0;
     $175 = ($174|0)==(0|0);
     if ($175) {
      STACKTOP = sp;return;
     }
     $176 = HEAP32[$0>>2]|0;
     __THREW__ = 0;
     invoke_vi($176|0,($174|0));
     $177 = __THREW__; __THREW__ = 0;
     $178 = $177&1;
     if ($178) {
      $179 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
      $180 = tempRet0;
      ___clang_call_terminate($179);
      // unreachable;
     } else {
      STACKTOP = sp;return;
     }
    }
   }
   $26 = (___cxa_allocate_exception(4)|0);
   HEAP32[$26>>2] = ((14256 + 8|0));
   __THREW__ = 0;
   invoke_viii(379,($26|0),(14336|0),(351|0));
   $27 = __THREW__; __THREW__ = 0;
   $28 = $27&1;
   if (!($28)) {
    // unreachable;
   }
  }
 } while(0);
 $181 = ___cxa_find_matching_catch(-1,-1)|0;
 $182 = tempRet0;
 $183 = (($3) + 4|0);
 $184 = HEAP32[$183>>2]|0;HEAP32[$183>>2] = (($184+-1)|0);
 $185 = ($184|0)==(0);
 if ($185) {
  $186 = HEAP32[$3>>2]|0;
  $187 = (($186) + 8|0);
  $188 = HEAP32[$187>>2]|0;
  FUNCTION_TABLE_vi[$188 & 511]($3);
 }
 $$pre = HEAP32[$__wb>>2]|0;
 HEAP32[$__wb>>2] = 0;
 $189 = ($$pre|0)==(0|0);
 if ($189) {
  ___resumeException($181|0);
  // unreachable;
 }
 $190 = HEAP32[$0>>2]|0;
 __THREW__ = 0;
 invoke_vi($190|0,($$pre|0));
 $191 = __THREW__; __THREW__ = 0;
 $192 = $191&1;
 if ($192) {
  $193 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
  $194 = tempRet0;
  ___clang_call_terminate($193);
  // unreachable;
 } else {
  ___resumeException($181|0);
  // unreachable;
 }
}
function __ZNSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($this|0)==(0|0);
 if (!($0)) {
  _free($this);
 }
 STACKTOP = sp;return;
}
function __ZNSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEce($agg$result,$this,$__s,$__intl,$__iob,$__fl,$__units) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__intl = $__intl|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__units = +$__units;
 var $$0 = 0, $$01 = 0, $$1 = 0, $$12 = 0, $$218 = 0, $$2317 = 0, $$pn = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;
 var $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0;
 var $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0;
 var $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0;
 var $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $__bb = 0, $__buf = 0, $__db$0 = 0, $__digits = 0, $__dp = 0, $__fd = 0, $__grp = 0, $__mb$0 = 0, $__mbuf = 0, $__me = 0, $__mi = 0, $__n$0 = 0, $__p$i$i$i$i = 0, $__pat = 0, $__sn = 0, $__sym = 0, $__ts = 0, $eh$lpad$body$index20Z2D = 0;
 var $eh$lpad$body$indexZ2D = 0, $vararg_buffer = 0, $vararg_buffer24 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 400|0;
 $vararg_buffer24 = sp + 24|0;
 $vararg_buffer = sp + 16|0;
 $__p$i$i$i$i = sp;
 $__buf = sp + 292|0;
 $__bb = sp + 84|0;
 $__digits = sp + 192|0;
 $__pat = sp + 80|0;
 $__dp = sp + 189|0;
 $__ts = sp + 188|0;
 $__grp = sp + 68|0;
 $__sym = sp + 56|0;
 $__sn = sp + 44|0;
 $__fd = sp + 40|0;
 $__mbuf = sp + 88|0;
 $__mi = sp + 36|0;
 $__me = sp + 32|0;
 HEAP32[$__bb>>2] = $__buf;
 HEAPF64[tempDoublePtr>>3]=$__units;HEAP32[$vararg_buffer>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer+4>>2]=HEAP32[tempDoublePtr+4>>2];
 $0 = (_snprintf($__buf,100,6184,$vararg_buffer)|0);
 $1 = ($0>>>0)>(99);
 L1: do {
  if ($1) {
   $2 = HEAP8[6328>>0]|0;
   $3 = ($2<<24>>24)==(0);
   do {
    if ($3) {
     $4 = (___cxa_guard_acquire((6328|0))|0);
     $5 = ($4|0)==(0);
     if ($5) {
      label = 7;
     } else {
      __THREW__ = 0;
      $6 = (invoke_iiii(461,2147483647,(6336|0),(0|0))|0);
      $7 = __THREW__; __THREW__ = 0;
      $8 = $7&1;
      if ($8) {
       $9 = ___cxa_find_matching_catch(-1,-1)|0;
       $10 = tempRet0;
       ___cxa_guard_abort((6328|0));
       $193 = 0;$eh$lpad$body$index20Z2D = $10;$eh$lpad$body$indexZ2D = $9;
       break;
      } else {
       HEAP32[6320>>2] = $6;
       ___cxa_guard_release((6328|0));
       label = 7;
       break;
      }
     }
    } else {
     label = 7;
    }
   } while(0);
   if ((label|0) == 7) {
    $11 = HEAP32[6320>>2]|0;
    __THREW__ = 0;
    HEAPF64[tempDoublePtr>>3]=$__units;HEAP32[$vararg_buffer24>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer24+4>>2]=HEAP32[tempDoublePtr+4>>2];
    $12 = (invoke_iiiii(466,($__bb|0),($11|0),(6184|0),($vararg_buffer24|0))|0);
    $13 = __THREW__; __THREW__ = 0;
    $14 = $13&1;
    do {
     if ($14) {
      $194 = 0;
     } else {
      $15 = HEAP32[$__bb>>2]|0;
      $16 = ($15|0)==(0|0);
      if ($16) {
       $17 = (___cxa_allocate_exception(4)|0);
       HEAP32[$17>>2] = ((15656 + 8|0));
       __THREW__ = 0;
       invoke_viii(379,($17|0),(15712|0),(374|0));
       $18 = __THREW__; __THREW__ = 0;
       $19 = $18&1;
       if ($19) {
        $194 = 0;
        break;
       }
       // unreachable;
      }
      $22 = (_malloc($12)|0);
      $23 = ($22|0)==(0|0);
      if (!($23)) {
       $163 = $22;$165 = $15;$__db$0 = $22;$__n$0 = $12;
       label = 16;
       break L1;
      }
      $24 = (___cxa_allocate_exception(4)|0);
      HEAP32[$24>>2] = ((15656 + 8|0));
      __THREW__ = 0;
      invoke_viii(379,($24|0),(15712|0),(374|0));
      $25 = __THREW__; __THREW__ = 0;
      $26 = $25&1;
      if ($26) {
       $194 = $15;
      } else {
       // unreachable;
      }
     }
    } while(0);
    $20 = ___cxa_find_matching_catch(-1,-1)|0;
    $21 = tempRet0;
    $193 = $194;$eh$lpad$body$index20Z2D = $21;$eh$lpad$body$indexZ2D = $20;
   }
   $$218 = $eh$lpad$body$indexZ2D;$$2317 = $eh$lpad$body$index20Z2D;$192 = $193;
  } else {
   $163 = 0;$165 = 0;$__db$0 = $__digits;$__n$0 = $0;
   label = 16;
  }
 } while(0);
 if ((label|0) == 16) {
  $27 = (($__iob) + 28|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = (($28) + 4|0);
  $30 = HEAP32[$29>>2]|0;HEAP32[$29>>2] = (($30+1)|0);
  $31 = HEAP32[6416>>2]|0;
  $32 = ($31|0)==(-1);
  if ($32) {
   label = 18;
  } else {
   HEAP32[$__p$i$i$i$i>>2] = 6416;
   $33 = (($__p$i$i$i$i) + 4|0);
   HEAP32[$33>>2] = (439);
   $34 = (($__p$i$i$i$i) + 8|0);
   HEAP32[$34>>2] = 0;
   __THREW__ = 0;
   invoke_vii(440,(6416|0),($__p$i$i$i$i|0));
   $35 = __THREW__; __THREW__ = 0;
   $36 = $35&1;
   if ($36) {
    label = 46;
   } else {
    label = 18;
   }
  }
  do {
   if ((label|0) == 18) {
    $37 = HEAP32[((6416 + 4|0))>>2]|0;
    $38 = (($37) + -1)|0;
    $39 = (($28) + 12|0);
    $40 = HEAP32[$39>>2]|0;
    $41 = (($28) + 8|0);
    $42 = HEAP32[$41>>2]|0;
    $43 = $40;
    $44 = $42;
    $45 = (($43) - ($44))|0;
    $46 = $45 >> 2;
    $47 = ($46>>>0)>($38>>>0);
    if ($47) {
     $48 = (($42) + ($38<<2)|0);
     $49 = HEAP32[$48>>2]|0;
     $50 = ($49|0)==(0|0);
     if (!($50)) {
      $54 = HEAP32[$__bb>>2]|0;
      $55 = (($54) + ($__n$0)|0);
      $56 = HEAP32[$49>>2]|0;
      $57 = (($56) + 32|0);
      $58 = HEAP32[$57>>2]|0;
      __THREW__ = 0;
      (invoke_iiiii($58|0,($49|0),($54|0),($55|0),($__db$0|0))|0);
      $59 = __THREW__; __THREW__ = 0;
      $60 = $59&1;
      if ($60) {
       label = 46;
       break;
      }
      $61 = ($__n$0|0)==(0);
      if ($61) {
       $64 = 0;
      } else {
       $62 = HEAP8[$54>>0]|0;
       $63 = ($62<<24>>24)==(45);
       $64 = $63;
      }
      HEAP32[$__pat>>2] = 0;
      ;HEAP32[$__grp+0>>2]=0|0;HEAP32[$__grp+4>>2]=0|0;HEAP32[$__grp+8>>2]=0|0;
      ;HEAP32[$__sym+0>>2]=0|0;HEAP32[$__sym+4>>2]=0|0;HEAP32[$__sym+8>>2]=0|0;
      ;HEAP32[$__sn+0>>2]=0|0;HEAP32[$__sn+4>>2]=0|0;HEAP32[$__sn+8>>2]=0|0;
      __THREW__ = 0;
      invoke_viiiiiiiiii(481,($__intl|0),($64|0),($28|0),($__pat|0),($__dp|0),($__ts|0),($__grp|0),($__sym|0),($__sn|0),($__fd|0));
      $65 = __THREW__; __THREW__ = 0;
      $66 = $65&1;
      do {
       if ($66) {
        $119 = ___cxa_find_matching_catch(-1,-1)|0;
        $120 = tempRet0;
        $$0 = $119;$$01 = $120;
       } else {
        $67 = HEAP32[$__fd>>2]|0;
        $68 = ($__n$0|0)>($67|0);
        if ($68) {
         $69 = (($__n$0) - ($67))|0;
         $70 = $69 << 1;
         $71 = HEAP8[$__sn>>0]|0;
         $72 = $71 & 1;
         $73 = ($72<<24>>24)==(0);
         if ($73) {
          $76 = $71&255;
          $77 = $76 >>> 1;
          $87 = $77;
         } else {
          $74 = (($__sn) + 4|0);
          $75 = HEAP32[$74>>2]|0;
          $87 = $75;
         }
         $78 = HEAP8[$__sym>>0]|0;
         $79 = $78 & 1;
         $80 = ($79<<24>>24)==(0);
         if ($80) {
          $83 = $78&255;
          $84 = $83 >>> 1;
          $89 = $84;
         } else {
          $81 = (($__sym) + 4|0);
          $82 = HEAP32[$81>>2]|0;
          $89 = $82;
         }
         $85 = $70 | 1;
         $86 = (($87) + ($85))|0;
         $88 = (($86) + ($89))|0;
         $$pn = $88;
        } else {
         $90 = HEAP8[$__sn>>0]|0;
         $91 = $90 & 1;
         $92 = ($91<<24>>24)==(0);
         if ($92) {
          $95 = $90&255;
          $96 = $95 >>> 1;
          $105 = $96;
         } else {
          $93 = (($__sn) + 4|0);
          $94 = HEAP32[$93>>2]|0;
          $105 = $94;
         }
         $97 = HEAP8[$__sym>>0]|0;
         $98 = $97 & 1;
         $99 = ($98<<24>>24)==(0);
         if ($99) {
          $102 = $97&255;
          $103 = $102 >>> 1;
          $107 = $103;
         } else {
          $100 = (($__sym) + 4|0);
          $101 = HEAP32[$100>>2]|0;
          $107 = $101;
         }
         $104 = (($105) + 2)|0;
         $106 = (($104) + ($107))|0;
         $$pn = $106;
        }
        $108 = (($$pn) + ($67))|0;
        $109 = ($108>>>0)>(100);
        if ($109) {
         $110 = (_malloc($108)|0);
         $111 = ($110|0)==(0|0);
         if ($111) {
          $112 = (___cxa_allocate_exception(4)|0);
          HEAP32[$112>>2] = ((15656 + 8|0));
          __THREW__ = 0;
          invoke_viii(379,($112|0),(15712|0),(374|0));
          $113 = __THREW__; __THREW__ = 0;
          $114 = $113&1;
          if ($114) {
           $115 = ___cxa_find_matching_catch(-1,-1)|0;
           $116 = tempRet0;
           $$0 = $115;$$01 = $116;
           break;
          } else {
           // unreachable;
          }
         } else {
          $124 = $110;$__mb$0 = $110;
         }
        } else {
         $124 = 0;$__mb$0 = $__mbuf;
        }
        $125 = (($__iob) + 4|0);
        $126 = HEAP32[$125>>2]|0;
        $127 = (($__db$0) + ($__n$0)|0);
        $128 = HEAP8[$__dp>>0]|0;
        $129 = HEAP8[$__ts>>0]|0;
        __THREW__ = 0;
        invoke_viiiiiiiiiiiiiii(482,($__mb$0|0),($__mi|0),($__me|0),($126|0),($__db$0|0),($127|0),($49|0),($64|0),($__pat|0),($128|0),($129|0),($__grp|0),($__sym|0),($__sn|0),($67|0));
        $130 = __THREW__; __THREW__ = 0;
        $131 = $130&1;
        if (!($131)) {
         $132 = HEAP32[$__s>>2]|0;
         $133 = HEAP32[$__mi>>2]|0;
         $134 = HEAP32[$__me>>2]|0;
         __THREW__ = 0;
         invoke_viiiiiii(468,($agg$result|0),($132|0),($__mb$0|0),($133|0),($134|0),($__iob|0),($__fl|0));
         $135 = __THREW__; __THREW__ = 0;
         $136 = $135&1;
         if (!($136)) {
          $137 = ($124|0)==(0|0);
          if (!($137)) {
           _free($124);
          }
          $138 = HEAP8[$__sn>>0]|0;
          $139 = $138 & 1;
          $140 = ($139<<24>>24)==(0);
          if (!($140)) {
           $141 = (($__sn) + 8|0);
           $142 = HEAP32[$141>>2]|0;
           $143 = ($142|0)==(0|0);
           if (!($143)) {
            _free($142);
           }
          }
          $144 = HEAP8[$__sym>>0]|0;
          $145 = $144 & 1;
          $146 = ($145<<24>>24)==(0);
          do {
           if (!($146)) {
            $147 = (($__sym) + 8|0);
            $148 = HEAP32[$147>>2]|0;
            $149 = ($148|0)==(0|0);
            if ($149) {
             break;
            }
            _free($148);
           }
          } while(0);
          $150 = HEAP8[$__grp>>0]|0;
          $151 = $150 & 1;
          $152 = ($151<<24>>24)==(0);
          do {
           if (!($152)) {
            $153 = (($__grp) + 8|0);
            $154 = HEAP32[$153>>2]|0;
            $155 = ($154|0)==(0|0);
            if ($155) {
             break;
            }
            _free($154);
           }
          } while(0);
          $156 = (($28) + 4|0);
          $157 = HEAP32[$156>>2]|0;HEAP32[$156>>2] = (($157+-1)|0);
          $158 = ($157|0)==(0);
          if ($158) {
           $159 = HEAP32[$28>>2]|0;
           $160 = (($159) + 8|0);
           $161 = HEAP32[$160>>2]|0;
           FUNCTION_TABLE_vi[$161 & 511]($28);
          }
          $162 = ($163|0)==(0|0);
          if (!($162)) {
           _free($163);
          }
          $164 = ($165|0)==(0|0);
          if ($164) {
           STACKTOP = sp;return;
          }
          _free($165);
          STACKTOP = sp;return;
         }
        }
        $121 = ___cxa_find_matching_catch(-1,-1)|0;
        $122 = tempRet0;
        $123 = ($124|0)==(0|0);
        if ($123) {
         $$0 = $121;$$01 = $122;
        } else {
         _free($124);
         $$0 = $121;$$01 = $122;
        }
       }
      } while(0);
      $166 = HEAP8[$__sn>>0]|0;
      $167 = $166 & 1;
      $168 = ($167<<24>>24)==(0);
      if (!($168)) {
       $169 = (($__sn) + 8|0);
       $170 = HEAP32[$169>>2]|0;
       $171 = ($170|0)==(0|0);
       if (!($171)) {
        _free($170);
       }
      }
      $172 = HEAP8[$__sym>>0]|0;
      $173 = $172 & 1;
      $174 = ($173<<24>>24)==(0);
      if (!($174)) {
       $175 = (($__sym) + 8|0);
       $176 = HEAP32[$175>>2]|0;
       $177 = ($176|0)==(0|0);
       if (!($177)) {
        _free($176);
       }
      }
      $178 = HEAP8[$__grp>>0]|0;
      $179 = $178 & 1;
      $180 = ($179<<24>>24)==(0);
      if ($180) {
       $$1 = $$0;$$12 = $$01;
       break;
      }
      $181 = (($__grp) + 8|0);
      $182 = HEAP32[$181>>2]|0;
      $183 = ($182|0)==(0|0);
      if ($183) {
       $$1 = $$0;$$12 = $$01;
       break;
      }
      _free($182);
      $$1 = $$0;$$12 = $$01;
      break;
     }
    }
    $51 = (___cxa_allocate_exception(4)|0);
    HEAP32[$51>>2] = ((14256 + 8|0));
    __THREW__ = 0;
    invoke_viii(379,($51|0),(14336|0),(351|0));
    $52 = __THREW__; __THREW__ = 0;
    $53 = $52&1;
    if ($53) {
     label = 46;
    } else {
     // unreachable;
    }
   }
  } while(0);
  if ((label|0) == 46) {
   $117 = ___cxa_find_matching_catch(-1,-1)|0;
   $118 = tempRet0;
   $$1 = $117;$$12 = $118;
  }
  $184 = (($28) + 4|0);
  $185 = HEAP32[$184>>2]|0;HEAP32[$184>>2] = (($185+-1)|0);
  $186 = ($185|0)==(0);
  if ($186) {
   $187 = HEAP32[$28>>2]|0;
   $188 = (($187) + 8|0);
   $189 = HEAP32[$188>>2]|0;
   FUNCTION_TABLE_vi[$189 & 511]($28);
  }
  $190 = ($163|0)==(0|0);
  if ($190) {
   $$218 = $$1;$$2317 = $$12;$192 = $165;
  } else {
   _free($163);
   $$218 = $$1;$$2317 = $$12;$192 = $165;
  }
 }
 $191 = ($192|0)==(0|0);
 if ($191) {
  ___resumeException($$218|0);
  // unreachable;
 }
 _free($192);
 ___resumeException($$218|0);
 // unreachable;
}
function __ZNSt3__111__money_putIcE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_Ri($__intl,$__neg,$__loc$0$0$val,$__pat,$__dp,$__ts,$__grp,$__sym,$__sn,$__fd) {
 $__intl = $__intl|0;
 $__neg = $__neg|0;
 $__loc$0$0$val = $__loc$0$0$val|0;
 $__pat = $__pat|0;
 $__dp = $__dp|0;
 $__ts = $__ts|0;
 $__grp = $__grp|0;
 $__sym = $__sym|0;
 $__sn = $__sn|0;
 $__fd = $__fd|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $__p$i$i$i$i = 0, $__p$i$i$i$i10 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0;
 $__p$i$i$i$i10 = sp + 16|0;
 $__p$i$i$i$i = sp;
 $0 = sp + 136|0;
 $1 = sp + 124|0;
 $2 = sp + 120|0;
 $3 = sp + 108|0;
 $4 = sp + 96|0;
 $5 = sp + 84|0;
 $6 = sp + 80|0;
 $7 = sp + 68|0;
 $8 = sp + 64|0;
 $9 = sp + 52|0;
 $10 = sp + 40|0;
 $11 = sp + 28|0;
 if ($__intl) {
  $12 = HEAP32[5872>>2]|0;
  $13 = ($12|0)==(-1);
  if (!($13)) {
   HEAP32[$__p$i$i$i$i>>2] = 5872;
   $14 = (($__p$i$i$i$i) + 4|0);
   HEAP32[$14>>2] = (439);
   $15 = (($__p$i$i$i$i) + 8|0);
   HEAP32[$15>>2] = 0;
   __ZNSt3__111__call_onceERVmPvPFvS2_E(5872,$__p$i$i$i$i);
  }
  $16 = HEAP32[((5872 + 4|0))>>2]|0;
  $17 = (($16) + -1)|0;
  $18 = (($__loc$0$0$val) + 12|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (($__loc$0$0$val) + 8|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = $19;
  $23 = $21;
  $24 = (($22) - ($23))|0;
  $25 = $24 >> 2;
  $26 = ($25>>>0)>($17>>>0);
  if (!($26)) {
   $30 = (___cxa_allocate_exception(4)|0);
   HEAP32[$30>>2] = ((14256 + 8|0));
   ___cxa_throw(($30|0),(14336|0),(351|0));
   // unreachable;
  }
  $27 = (($21) + ($17<<2)|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = ($28|0)==(0|0);
  if ($29) {
   $30 = (___cxa_allocate_exception(4)|0);
   HEAP32[$30>>2] = ((14256 + 8|0));
   ___cxa_throw(($30|0),(14336|0),(351|0));
   // unreachable;
  }
  $31 = HEAP32[$28>>2]|0;
  do {
   if ($__neg) {
    $32 = (($31) + 44|0);
    $33 = HEAP32[$32>>2]|0;
    FUNCTION_TABLE_vii[$33 & 511]($0,$28);
    $34 = HEAP32[$0>>2]|0;
    HEAP8[$__pat>>0]=$34&255;HEAP8[$__pat+1>>0]=($34>>8)&255;HEAP8[$__pat+2>>0]=($34>>16)&255;HEAP8[$__pat+3>>0]=$34>>24;
    $35 = HEAP32[$28>>2]|0;
    $36 = (($35) + 32|0);
    $37 = HEAP32[$36>>2]|0;
    FUNCTION_TABLE_vii[$37 & 511]($1,$28);
    $38 = HEAP8[$__sn>>0]|0;
    $39 = $38 & 1;
    $40 = ($39<<24>>24)==(0);
    if ($40) {
     $44 = (($__sn) + 1|0);
     HEAP8[$44>>0] = 0;
     HEAP8[$__sn>>0] = 0;
    } else {
     $41 = (($__sn) + 8|0);
     $42 = HEAP32[$41>>2]|0;
     HEAP8[$42>>0] = 0;
     $43 = (($__sn) + 4|0);
     HEAP32[$43>>2] = 0;
    }
    __THREW__ = 0;
    invoke_vi(475,($__sn|0));
    $45 = __THREW__; __THREW__ = 0;
    $46 = $45&1;
    if ($46) {
     $47 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
     $48 = tempRet0;
     ___clang_call_terminate($47);
     // unreachable;
    } else {
     ;HEAP32[$__sn+0>>2]=HEAP32[$1+0>>2]|0;HEAP32[$__sn+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$__sn+8>>2]=HEAP32[$1+8>>2]|0;
     ;HEAP32[$1+0>>2]=0|0;HEAP32[$1+4>>2]=0|0;HEAP32[$1+8>>2]=0|0;
     break;
    }
   } else {
    $49 = (($31) + 40|0);
    $50 = HEAP32[$49>>2]|0;
    FUNCTION_TABLE_vii[$50 & 511]($2,$28);
    $51 = HEAP32[$2>>2]|0;
    HEAP8[$__pat>>0]=$51&255;HEAP8[$__pat+1>>0]=($51>>8)&255;HEAP8[$__pat+2>>0]=($51>>16)&255;HEAP8[$__pat+3>>0]=$51>>24;
    $52 = HEAP32[$28>>2]|0;
    $53 = (($52) + 28|0);
    $54 = HEAP32[$53>>2]|0;
    FUNCTION_TABLE_vii[$54 & 511]($3,$28);
    $55 = HEAP8[$__sn>>0]|0;
    $56 = $55 & 1;
    $57 = ($56<<24>>24)==(0);
    if ($57) {
     $61 = (($__sn) + 1|0);
     HEAP8[$61>>0] = 0;
     HEAP8[$__sn>>0] = 0;
    } else {
     $58 = (($__sn) + 8|0);
     $59 = HEAP32[$58>>2]|0;
     HEAP8[$59>>0] = 0;
     $60 = (($__sn) + 4|0);
     HEAP32[$60>>2] = 0;
    }
    __THREW__ = 0;
    invoke_vi(475,($__sn|0));
    $62 = __THREW__; __THREW__ = 0;
    $63 = $62&1;
    if ($63) {
     $64 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
     $65 = tempRet0;
     ___clang_call_terminate($64);
     // unreachable;
    } else {
     ;HEAP32[$__sn+0>>2]=HEAP32[$3+0>>2]|0;HEAP32[$__sn+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$__sn+8>>2]=HEAP32[$3+8>>2]|0;
     ;HEAP32[$3+0>>2]=0|0;HEAP32[$3+4>>2]=0|0;HEAP32[$3+8>>2]=0|0;
     break;
    }
   }
  } while(0);
  $66 = HEAP32[$28>>2]|0;
  $67 = (($66) + 12|0);
  $68 = HEAP32[$67>>2]|0;
  $69 = (FUNCTION_TABLE_ii[$68 & 511]($28)|0);
  HEAP8[$__dp>>0] = $69;
  $70 = HEAP32[$28>>2]|0;
  $71 = (($70) + 16|0);
  $72 = HEAP32[$71>>2]|0;
  $73 = (FUNCTION_TABLE_ii[$72 & 511]($28)|0);
  HEAP8[$__ts>>0] = $73;
  $74 = HEAP32[$28>>2]|0;
  $75 = (($74) + 20|0);
  $76 = HEAP32[$75>>2]|0;
  FUNCTION_TABLE_vii[$76 & 511]($4,$28);
  $77 = HEAP8[$__grp>>0]|0;
  $78 = $77 & 1;
  $79 = ($78<<24>>24)==(0);
  if ($79) {
   $83 = (($__grp) + 1|0);
   HEAP8[$83>>0] = 0;
   HEAP8[$__grp>>0] = 0;
  } else {
   $80 = (($__grp) + 8|0);
   $81 = HEAP32[$80>>2]|0;
   HEAP8[$81>>0] = 0;
   $82 = (($__grp) + 4|0);
   HEAP32[$82>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vi(475,($__grp|0));
  $84 = __THREW__; __THREW__ = 0;
  $85 = $84&1;
  if ($85) {
   $86 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
   $87 = tempRet0;
   ___clang_call_terminate($86);
   // unreachable;
  }
  ;HEAP32[$__grp+0>>2]=HEAP32[$4+0>>2]|0;HEAP32[$__grp+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$__grp+8>>2]=HEAP32[$4+8>>2]|0;
  ;HEAP32[$4+0>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;
  $88 = HEAP32[$28>>2]|0;
  $89 = (($88) + 24|0);
  $90 = HEAP32[$89>>2]|0;
  FUNCTION_TABLE_vii[$90 & 511]($5,$28);
  $91 = HEAP8[$__sym>>0]|0;
  $92 = $91 & 1;
  $93 = ($92<<24>>24)==(0);
  if ($93) {
   $97 = (($__sym) + 1|0);
   HEAP8[$97>>0] = 0;
   HEAP8[$__sym>>0] = 0;
  } else {
   $94 = (($__sym) + 8|0);
   $95 = HEAP32[$94>>2]|0;
   HEAP8[$95>>0] = 0;
   $96 = (($__sym) + 4|0);
   HEAP32[$96>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vi(475,($__sym|0));
  $98 = __THREW__; __THREW__ = 0;
  $99 = $98&1;
  if ($99) {
   $100 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
   $101 = tempRet0;
   ___clang_call_terminate($100);
   // unreachable;
  }
  ;HEAP32[$__sym+0>>2]=HEAP32[$5+0>>2]|0;HEAP32[$__sym+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$__sym+8>>2]=HEAP32[$5+8>>2]|0;
  ;HEAP32[$5+0>>2]=0|0;HEAP32[$5+4>>2]=0|0;HEAP32[$5+8>>2]=0|0;
  $102 = HEAP32[$28>>2]|0;
  $103 = (($102) + 36|0);
  $104 = HEAP32[$103>>2]|0;
  $105 = (FUNCTION_TABLE_ii[$104 & 511]($28)|0);
  $storemerge = $105;
  HEAP32[$__fd>>2] = $storemerge;
  STACKTOP = sp;return;
 } else {
  $106 = HEAP32[5808>>2]|0;
  $107 = ($106|0)==(-1);
  if (!($107)) {
   HEAP32[$__p$i$i$i$i10>>2] = 5808;
   $108 = (($__p$i$i$i$i10) + 4|0);
   HEAP32[$108>>2] = (439);
   $109 = (($__p$i$i$i$i10) + 8|0);
   HEAP32[$109>>2] = 0;
   __ZNSt3__111__call_onceERVmPvPFvS2_E(5808,$__p$i$i$i$i10);
  }
  $110 = HEAP32[((5808 + 4|0))>>2]|0;
  $111 = (($110) + -1)|0;
  $112 = (($__loc$0$0$val) + 12|0);
  $113 = HEAP32[$112>>2]|0;
  $114 = (($__loc$0$0$val) + 8|0);
  $115 = HEAP32[$114>>2]|0;
  $116 = $113;
  $117 = $115;
  $118 = (($116) - ($117))|0;
  $119 = $118 >> 2;
  $120 = ($119>>>0)>($111>>>0);
  if (!($120)) {
   $124 = (___cxa_allocate_exception(4)|0);
   HEAP32[$124>>2] = ((14256 + 8|0));
   ___cxa_throw(($124|0),(14336|0),(351|0));
   // unreachable;
  }
  $121 = (($115) + ($111<<2)|0);
  $122 = HEAP32[$121>>2]|0;
  $123 = ($122|0)==(0|0);
  if ($123) {
   $124 = (___cxa_allocate_exception(4)|0);
   HEAP32[$124>>2] = ((14256 + 8|0));
   ___cxa_throw(($124|0),(14336|0),(351|0));
   // unreachable;
  }
  $125 = HEAP32[$122>>2]|0;
  do {
   if ($__neg) {
    $126 = (($125) + 44|0);
    $127 = HEAP32[$126>>2]|0;
    FUNCTION_TABLE_vii[$127 & 511]($6,$122);
    $128 = HEAP32[$6>>2]|0;
    HEAP8[$__pat>>0]=$128&255;HEAP8[$__pat+1>>0]=($128>>8)&255;HEAP8[$__pat+2>>0]=($128>>16)&255;HEAP8[$__pat+3>>0]=$128>>24;
    $129 = HEAP32[$122>>2]|0;
    $130 = (($129) + 32|0);
    $131 = HEAP32[$130>>2]|0;
    FUNCTION_TABLE_vii[$131 & 511]($7,$122);
    $132 = HEAP8[$__sn>>0]|0;
    $133 = $132 & 1;
    $134 = ($133<<24>>24)==(0);
    if ($134) {
     $138 = (($__sn) + 1|0);
     HEAP8[$138>>0] = 0;
     HEAP8[$__sn>>0] = 0;
    } else {
     $135 = (($__sn) + 8|0);
     $136 = HEAP32[$135>>2]|0;
     HEAP8[$136>>0] = 0;
     $137 = (($__sn) + 4|0);
     HEAP32[$137>>2] = 0;
    }
    __THREW__ = 0;
    invoke_vi(475,($__sn|0));
    $139 = __THREW__; __THREW__ = 0;
    $140 = $139&1;
    if ($140) {
     $141 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
     $142 = tempRet0;
     ___clang_call_terminate($141);
     // unreachable;
    } else {
     ;HEAP32[$__sn+0>>2]=HEAP32[$7+0>>2]|0;HEAP32[$__sn+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$__sn+8>>2]=HEAP32[$7+8>>2]|0;
     ;HEAP32[$7+0>>2]=0|0;HEAP32[$7+4>>2]=0|0;HEAP32[$7+8>>2]=0|0;
     break;
    }
   } else {
    $143 = (($125) + 40|0);
    $144 = HEAP32[$143>>2]|0;
    FUNCTION_TABLE_vii[$144 & 511]($8,$122);
    $145 = HEAP32[$8>>2]|0;
    HEAP8[$__pat>>0]=$145&255;HEAP8[$__pat+1>>0]=($145>>8)&255;HEAP8[$__pat+2>>0]=($145>>16)&255;HEAP8[$__pat+3>>0]=$145>>24;
    $146 = HEAP32[$122>>2]|0;
    $147 = (($146) + 28|0);
    $148 = HEAP32[$147>>2]|0;
    FUNCTION_TABLE_vii[$148 & 511]($9,$122);
    $149 = HEAP8[$__sn>>0]|0;
    $150 = $149 & 1;
    $151 = ($150<<24>>24)==(0);
    if ($151) {
     $155 = (($__sn) + 1|0);
     HEAP8[$155>>0] = 0;
     HEAP8[$__sn>>0] = 0;
    } else {
     $152 = (($__sn) + 8|0);
     $153 = HEAP32[$152>>2]|0;
     HEAP8[$153>>0] = 0;
     $154 = (($__sn) + 4|0);
     HEAP32[$154>>2] = 0;
    }
    __THREW__ = 0;
    invoke_vi(475,($__sn|0));
    $156 = __THREW__; __THREW__ = 0;
    $157 = $156&1;
    if ($157) {
     $158 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
     $159 = tempRet0;
     ___clang_call_terminate($158);
     // unreachable;
    } else {
     ;HEAP32[$__sn+0>>2]=HEAP32[$9+0>>2]|0;HEAP32[$__sn+4>>2]=HEAP32[$9+4>>2]|0;HEAP32[$__sn+8>>2]=HEAP32[$9+8>>2]|0;
     ;HEAP32[$9+0>>2]=0|0;HEAP32[$9+4>>2]=0|0;HEAP32[$9+8>>2]=0|0;
     break;
    }
   }
  } while(0);
  $160 = HEAP32[$122>>2]|0;
  $161 = (($160) + 12|0);
  $162 = HEAP32[$161>>2]|0;
  $163 = (FUNCTION_TABLE_ii[$162 & 511]($122)|0);
  HEAP8[$__dp>>0] = $163;
  $164 = HEAP32[$122>>2]|0;
  $165 = (($164) + 16|0);
  $166 = HEAP32[$165>>2]|0;
  $167 = (FUNCTION_TABLE_ii[$166 & 511]($122)|0);
  HEAP8[$__ts>>0] = $167;
  $168 = HEAP32[$122>>2]|0;
  $169 = (($168) + 20|0);
  $170 = HEAP32[$169>>2]|0;
  FUNCTION_TABLE_vii[$170 & 511]($10,$122);
  $171 = HEAP8[$__grp>>0]|0;
  $172 = $171 & 1;
  $173 = ($172<<24>>24)==(0);
  if ($173) {
   $177 = (($__grp) + 1|0);
   HEAP8[$177>>0] = 0;
   HEAP8[$__grp>>0] = 0;
  } else {
   $174 = (($__grp) + 8|0);
   $175 = HEAP32[$174>>2]|0;
   HEAP8[$175>>0] = 0;
   $176 = (($__grp) + 4|0);
   HEAP32[$176>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vi(475,($__grp|0));
  $178 = __THREW__; __THREW__ = 0;
  $179 = $178&1;
  if ($179) {
   $180 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
   $181 = tempRet0;
   ___clang_call_terminate($180);
   // unreachable;
  }
  ;HEAP32[$__grp+0>>2]=HEAP32[$10+0>>2]|0;HEAP32[$__grp+4>>2]=HEAP32[$10+4>>2]|0;HEAP32[$__grp+8>>2]=HEAP32[$10+8>>2]|0;
  ;HEAP32[$10+0>>2]=0|0;HEAP32[$10+4>>2]=0|0;HEAP32[$10+8>>2]=0|0;
  $182 = HEAP32[$122>>2]|0;
  $183 = (($182) + 24|0);
  $184 = HEAP32[$183>>2]|0;
  FUNCTION_TABLE_vii[$184 & 511]($11,$122);
  $185 = HEAP8[$__sym>>0]|0;
  $186 = $185 & 1;
  $187 = ($186<<24>>24)==(0);
  if ($187) {
   $191 = (($__sym) + 1|0);
   HEAP8[$191>>0] = 0;
   HEAP8[$__sym>>0] = 0;
  } else {
   $188 = (($__sym) + 8|0);
   $189 = HEAP32[$188>>2]|0;
   HEAP8[$189>>0] = 0;
   $190 = (($__sym) + 4|0);
   HEAP32[$190>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vi(475,($__sym|0));
  $192 = __THREW__; __THREW__ = 0;
  $193 = $192&1;
  if ($193) {
   $194 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
   $195 = tempRet0;
   ___clang_call_terminate($194);
   // unreachable;
  }
  ;HEAP32[$__sym+0>>2]=HEAP32[$11+0>>2]|0;HEAP32[$__sym+4>>2]=HEAP32[$11+4>>2]|0;HEAP32[$__sym+8>>2]=HEAP32[$11+8>>2]|0;
  ;HEAP32[$11+0>>2]=0|0;HEAP32[$11+4>>2]=0|0;HEAP32[$11+8>>2]=0|0;
  $196 = HEAP32[$122>>2]|0;
  $197 = (($196) + 36|0);
  $198 = HEAP32[$197>>2]|0;
  $199 = (FUNCTION_TABLE_ii[$198 & 511]($122)|0);
  $storemerge = $199;
  HEAP32[$__fd>>2] = $storemerge;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__111__money_putIcE8__formatEPcRS2_S3_jPKcS5_RKNS_5ctypeIcEEbRKNS_10money_base7patternEccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESL_SL_i($__mb,$__mi,$__me,$__flags,$__db,$__de,$__ct,$__neg,$__pat,$__dp,$__ts,$__grp,$__sym,$__sn,$__fd) {
 $__mb = $__mb|0;
 $__mi = $__mi|0;
 $__me = $__me|0;
 $__flags = $__flags|0;
 $__db = $__db|0;
 $__de = $__de|0;
 $__ct = $__ct|0;
 $__neg = $__neg|0;
 $__pat = $__pat|0;
 $__dp = $__dp|0;
 $__ts = $__ts|0;
 $__grp = $__grp|0;
 $__sym = $__sym|0;
 $__sn = $__sn|0;
 $__fd = $__fd|0;
 var $$$0 = 0, $$0$lcssa$i$i = 0, $$0$lcssa$i$i17 = 0, $$01$i$i = 0, $$01$i$i15 = 0, $$012$i$i = 0, $$050 = 0, $$2 = 0, $$lcssa38 = 0, $$pn = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0;
 var $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__d$0$lcssa = 0, $__d$0$lcssa58 = 0, $__d$029 = 0, $__d$1$lcssa73 = 0, $__d$1$lcssa74 = 0, $__d$132 = 0, $__d$2 = 0, $__d$343 = 0, $__f$0$lcssa71 = 0, $__f$0$lcssa72 = 0, $__f$033 = 0, $__f$139 = 0;
 var $__gl$046 = 0, $__gl$1 = 0, $__ig$045 = 0, $__ig$1 = 0, $__ng$044 = 0, $__ng$1 = 0, $__p$049 = 0, $brmerge = 0, $exitcond = 0, $isascii1$i = 0, $or$cond = 0, $scevgep = 0, $scevgep59 = 0, $scevgep61 = 0, $scevgep6162 = 0, $scevgep63 = 0, $umax = 0, $umax60 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$__me>>2] = $__mb;
 $0 = (($__sn) + 1|0);
 $1 = (($__sn) + 8|0);
 $2 = (($__sn) + 4|0);
 $3 = $__flags & 512;
 $4 = ($3|0)==(0);
 $5 = (($__sym) + 1|0);
 $6 = (($__sym) + 8|0);
 $7 = (($__sym) + 4|0);
 $8 = ($__fd|0)>(0);
 $9 = (($__grp) + 1|0);
 $10 = (($__grp) + 8|0);
 $11 = (($__grp) + 4|0);
 $12 = (($__ct) + 8|0);
 $13 = (0 - ($__fd))|0;
 $$050 = $__db;$__p$049 = 0;
 while(1) {
  $14 = (($__pat) + ($__p$049)|0);
  $15 = HEAP8[$14>>0]|0;
  $16 = $15 << 24 >> 24;
  switch ($16|0) {
  case 1:  {
   $18 = HEAP32[$__me>>2]|0;
   HEAP32[$__mi>>2] = $18;
   $19 = HEAP32[$__ct>>2]|0;
   $20 = (($19) + 28|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = (FUNCTION_TABLE_iii[$21 & 511]($__ct,32)|0);
   $23 = HEAP32[$__me>>2]|0;
   $24 = (($23) + 1|0);
   HEAP32[$__me>>2] = $24;
   HEAP8[$23>>0] = $22;
   $$2 = $$050;
   break;
  }
  case 2:  {
   $38 = HEAP8[$__sym>>0]|0;
   $39 = $38 & 1;
   $40 = ($39<<24>>24)==(0);
   if ($40) {
    $42 = $38&255;
    $43 = $42 >>> 1;
    $45 = $43;
   } else {
    $41 = HEAP32[$7>>2]|0;
    $45 = $41;
   }
   $44 = ($45|0)==(0);
   $brmerge = $44 | $4;
   if ($brmerge) {
    $$2 = $$050;
   } else {
    if ($40) {
     $48 = $38&255;
     $49 = $48 >>> 1;
     $51 = $5;$52 = $49;
    } else {
     $46 = HEAP32[$6>>2]|0;
     $47 = HEAP32[$7>>2]|0;
     $51 = $46;$52 = $47;
    }
    $50 = (($51) + ($52)|0);
    $53 = HEAP32[$__me>>2]|0;
    $54 = ($51|0)==($50|0);
    if ($54) {
     $$0$lcssa$i$i17 = $53;
    } else {
     $$01$i$i15 = $53;$56 = $51;
     while(1) {
      $55 = HEAP8[$56>>0]|0;
      HEAP8[$$01$i$i15>>0] = $55;
      $57 = (($56) + 1|0);
      $58 = (($$01$i$i15) + 1|0);
      $59 = ($57|0)==($50|0);
      if ($59) {
       $$0$lcssa$i$i17 = $58;
       break;
      } else {
       $$01$i$i15 = $58;$56 = $57;
      }
     }
    }
    HEAP32[$__me>>2] = $$0$lcssa$i$i17;
    $$2 = $$050;
   }
   break;
  }
  case 4:  {
   $60 = HEAP32[$__me>>2]|0;
   $61 = (($$050) + 1|0);
   $$$0 = $__neg ? $61 : $$050;
   $62 = ($$$0>>>0)<($__de>>>0);
   L20: do {
    if ($62) {
     $__d$029 = $$$0;
     while(1) {
      $65 = HEAP8[$__d$029>>0]|0;
      $isascii1$i = ($65<<24>>24)>(-1);
      if (!($isascii1$i)) {
       $__d$0$lcssa = $__d$029;
       break L20;
      }
      $66 = $65 << 24 >> 24;
      $67 = HEAP32[$12>>2]|0;
      $68 = (($67) + ($66<<1)|0);
      $69 = HEAP16[$68>>1]|0;
      $70 = $69 & 2048;
      $71 = ($70<<16>>16)==(0);
      $64 = (($__d$029) + 1|0);
      if ($71) {
       $__d$0$lcssa = $__d$029;
       break L20;
      }
      $63 = ($64>>>0)<($__de>>>0);
      if ($63) {
       $__d$029 = $64;
      } else {
       $__d$0$lcssa = $64;
       break;
      }
     }
    } else {
     $__d$0$lcssa = $$$0;
    }
   } while(0);
   $__d$0$lcssa58 = $__d$0$lcssa;
   if ($8) {
    $72 = ($__d$0$lcssa>>>0)>($$$0>>>0);
    if ($72) {
     $73 = (0 - ($__d$0$lcssa58))|0;
     $scevgep = (($$$0) + ($73)|0);
     $scevgep59 = $scevgep;
     $74 = ($scevgep59>>>0)<($13>>>0);
     $umax = $74 ? $13 : $scevgep59;
     $umax60 = $umax;
     $scevgep61 = (($umax60) + ($__fd)|0);
     $scevgep6162 = $scevgep61;
     $78 = $60;$__d$132 = $__d$0$lcssa;$__f$033 = $__fd;
     while(1) {
      $75 = (($__d$132) + -1|0);
      $76 = HEAP8[$75>>0]|0;
      $77 = (($78) + 1|0);
      HEAP32[$__me>>2] = $77;
      HEAP8[$78>>0] = $76;
      $79 = (($__f$033) + -1)|0;
      $80 = ($75>>>0)>($$$0>>>0);
      $81 = ($79|0)>(0);
      $or$cond = $80 & $81;
      if (!($or$cond)) {
       break;
      }
      $$pre = HEAP32[$__me>>2]|0;
      $78 = $$pre;$__d$132 = $75;$__f$033 = $79;
     }
     $scevgep63 = (($__d$0$lcssa) + ($umax)|0);
     if ($81) {
      $__d$1$lcssa74 = $scevgep63;$__f$0$lcssa72 = $scevgep6162;
      label = 32;
     } else {
      $89 = 0;$__d$1$lcssa73 = $scevgep63;$__f$0$lcssa71 = $scevgep6162;
     }
    } else {
     $__d$1$lcssa74 = $__d$0$lcssa;$__f$0$lcssa72 = $__fd;
     label = 32;
    }
    if ((label|0) == 32) {
     label = 0;
     $82 = HEAP32[$__ct>>2]|0;
     $83 = (($82) + 28|0);
     $84 = HEAP32[$83>>2]|0;
     $85 = (FUNCTION_TABLE_iii[$84 & 511]($__ct,48)|0);
     $89 = $85;$__d$1$lcssa73 = $__d$1$lcssa74;$__f$0$lcssa71 = $__f$0$lcssa72;
    }
    $86 = ($__f$0$lcssa71|0)>(0);
    $87 = HEAP32[$__me>>2]|0;
    $88 = (($87) + 1|0);
    HEAP32[$__me>>2] = $88;
    if ($86) {
     $90 = $87;$__f$139 = $__f$0$lcssa71;
     while(1) {
      HEAP8[$90>>0] = $89;
      $91 = (($__f$139) + -1)|0;
      $92 = ($91|0)>(0);
      $93 = HEAP32[$__me>>2]|0;
      $94 = (($93) + 1|0);
      HEAP32[$__me>>2] = $94;
      if ($92) {
       $90 = $93;$__f$139 = $91;
      } else {
       $$lcssa38 = $93;
       break;
      }
     }
    } else {
     $$lcssa38 = $87;
    }
    HEAP8[$$lcssa38>>0] = $__dp;
    $__d$2 = $__d$1$lcssa73;
   } else {
    $__d$2 = $__d$0$lcssa;
   }
   $95 = ($__d$2|0)==($$$0|0);
   if ($95) {
    $96 = HEAP32[$__ct>>2]|0;
    $97 = (($96) + 28|0);
    $98 = HEAP32[$97>>2]|0;
    $99 = (FUNCTION_TABLE_iii[$98 & 511]($__ct,48)|0);
    $100 = HEAP32[$__me>>2]|0;
    $101 = (($100) + 1|0);
    HEAP32[$__me>>2] = $101;
    HEAP8[$100>>0] = $99;
   } else {
    $102 = HEAP8[$__grp>>0]|0;
    $103 = $102 & 1;
    $104 = ($103<<24>>24)==(0);
    if ($104) {
     $106 = $102&255;
     $107 = $106 >>> 1;
     $109 = $107;
    } else {
     $105 = HEAP32[$11>>2]|0;
     $109 = $105;
    }
    $108 = ($109|0)==(0);
    if ($108) {
     $__d$343 = $__d$2;$__gl$046 = -1;$__ig$045 = 0;$__ng$044 = 0;
    } else {
     if ($104) {
      $112 = $9;
     } else {
      $110 = HEAP32[$10>>2]|0;
      $112 = $110;
     }
     $111 = HEAP8[$112>>0]|0;
     $113 = $111 << 24 >> 24;
     $__d$343 = $__d$2;$__gl$046 = $113;$__ig$045 = 0;$__ng$044 = 0;
    }
    while(1) {
     $114 = ($__ng$044|0)==($__gl$046|0);
     if ($114) {
      $115 = HEAP32[$__me>>2]|0;
      $116 = (($115) + 1|0);
      HEAP32[$__me>>2] = $116;
      HEAP8[$115>>0] = $__ts;
      $117 = (($__ig$045) + 1)|0;
      $118 = HEAP8[$__grp>>0]|0;
      $119 = $118 & 1;
      $120 = ($119<<24>>24)==(0);
      if ($120) {
       $122 = $118&255;
       $123 = $122 >>> 1;
       $125 = $123;
      } else {
       $121 = HEAP32[$11>>2]|0;
       $125 = $121;
      }
      $124 = ($117>>>0)<($125>>>0);
      if ($124) {
       if ($120) {
        $128 = $9;
       } else {
        $126 = HEAP32[$10>>2]|0;
        $128 = $126;
       }
       $127 = (($128) + ($117)|0);
       $129 = HEAP8[$127>>0]|0;
       $130 = ($129<<24>>24)==(127);
       if ($130) {
        $__gl$1 = -1;$__ig$1 = $117;$__ng$1 = 0;
       } else {
        if ($120) {
         $133 = $9;
        } else {
         $131 = HEAP32[$10>>2]|0;
         $133 = $131;
        }
        $132 = (($133) + ($117)|0);
        $134 = HEAP8[$132>>0]|0;
        $135 = $134 << 24 >> 24;
        $__gl$1 = $135;$__ig$1 = $117;$__ng$1 = 0;
       }
      } else {
       $__gl$1 = $__gl$046;$__ig$1 = $117;$__ng$1 = 0;
      }
     } else {
      $__gl$1 = $__gl$046;$__ig$1 = $__ig$045;$__ng$1 = $__ng$044;
     }
     $136 = (($__d$343) + -1|0);
     $137 = HEAP8[$136>>0]|0;
     $138 = HEAP32[$__me>>2]|0;
     $139 = (($138) + 1|0);
     HEAP32[$__me>>2] = $139;
     HEAP8[$138>>0] = $137;
     $140 = (($__ng$1) + 1)|0;
     $141 = ($136|0)==($$$0|0);
     if ($141) {
      break;
     } else {
      $__d$343 = $136;$__gl$046 = $__gl$1;$__ig$045 = $__ig$1;$__ng$044 = $140;
     }
    }
   }
   $142 = HEAP32[$__me>>2]|0;
   $143 = ($60|0)==($142|0);
   if ($143) {
    $$2 = $$$0;
   } else {
    $144 = (($142) + -1|0);
    $145 = ($144>>>0)>($60>>>0);
    if ($145) {
     $$012$i$i = $60;$148 = $144;
     while(1) {
      $146 = HEAP8[$$012$i$i>>0]|0;
      $147 = HEAP8[$148>>0]|0;
      HEAP8[$$012$i$i>>0] = $147;
      HEAP8[$148>>0] = $146;
      $149 = (($$012$i$i) + 1|0);
      $150 = (($148) + -1|0);
      $151 = ($149>>>0)<($150>>>0);
      if ($151) {
       $$012$i$i = $149;$148 = $150;
      } else {
       $$2 = $$$0;
       break;
      }
     }
    } else {
     $$2 = $$$0;
    }
   }
   break;
  }
  case 0:  {
   $17 = HEAP32[$__me>>2]|0;
   HEAP32[$__mi>>2] = $17;
   $$2 = $$050;
   break;
  }
  case 3:  {
   $25 = HEAP8[$__sn>>0]|0;
   $26 = $25 & 1;
   $27 = ($26<<24>>24)==(0);
   if ($27) {
    $29 = $25&255;
    $30 = $29 >>> 1;
    $32 = $30;
   } else {
    $28 = HEAP32[$2>>2]|0;
    $32 = $28;
   }
   $31 = ($32|0)==(0);
   if ($31) {
    $$2 = $$050;
   } else {
    if ($27) {
     $35 = $0;
    } else {
     $33 = HEAP32[$1>>2]|0;
     $35 = $33;
    }
    $34 = HEAP8[$35>>0]|0;
    $36 = HEAP32[$__me>>2]|0;
    $37 = (($36) + 1|0);
    HEAP32[$__me>>2] = $37;
    HEAP8[$36>>0] = $34;
    $$2 = $$050;
   }
   break;
  }
  default: {
   $$2 = $$050;
  }
  }
  $152 = (($__p$049) + 1)|0;
  $exitcond = ($152|0)==(4);
  if ($exitcond) {
   break;
  } else {
   $$050 = $$2;$__p$049 = $152;
  }
 }
 $153 = HEAP8[$__sn>>0]|0;
 $154 = $153 & 1;
 $155 = ($154<<24>>24)==(0);
 if ($155) {
  $157 = $153&255;
  $158 = $157 >>> 1;
  $160 = $158;
 } else {
  $156 = HEAP32[$2>>2]|0;
  $160 = $156;
 }
 $159 = ($160>>>0)>(1);
 if ($159) {
  if ($155) {
   $163 = $153&255;
   $164 = $163 >>> 1;
   $$pn = $0;$167 = $164;
  } else {
   $161 = HEAP32[$1>>2]|0;
   $162 = HEAP32[$2>>2]|0;
   $$pn = $161;$167 = $162;
  }
  $165 = (($$pn) + 1|0);
  $166 = (($$pn) + ($167)|0);
  $168 = HEAP32[$__me>>2]|0;
  $169 = ($165|0)==($166|0);
  if ($169) {
   $$0$lcssa$i$i = $168;
  } else {
   $$01$i$i = $168;$171 = $165;
   while(1) {
    $170 = HEAP8[$171>>0]|0;
    HEAP8[$$01$i$i>>0] = $170;
    $172 = (($171) + 1|0);
    $173 = (($$01$i$i) + 1|0);
    $174 = ($172|0)==($166|0);
    if ($174) {
     $$0$lcssa$i$i = $173;
     break;
    } else {
     $$01$i$i = $173;$171 = $172;
    }
   }
  }
  HEAP32[$__me>>2] = $$0$lcssa$i$i;
 }
 $175 = $__flags & 176;
 if ((($175|0) == 16)) {
  STACKTOP = sp;return;
 } else if ((($175|0) == 32)) {
  $176 = HEAP32[$__me>>2]|0;
  HEAP32[$__mi>>2] = $176;
  STACKTOP = sp;return;
 } else {
  HEAP32[$__mi>>2] = $__mb;
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEcRKNS_12basic_stringIcS3_NS_9allocatorIcEEEE($agg$result,$this,$__s,$__intl,$__iob,$__fl,$__digits) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__intl = $__intl|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__digits = $__digits|0;
 var $$0 = 0, $$01 = 0, $$1 = 0, $$12 = 0, $$pn = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0;
 var $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0;
 var $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__dp = 0, $__fd = 0, $__grp = 0;
 var $__mb$0 = 0, $__mbuf = 0, $__me = 0, $__mi = 0, $__p$i$i$i$i = 0, $__pat = 0, $__sn = 0, $__sym = 0, $__ts = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0;
 $__p$i$i$i$i = sp;
 $__pat = sp + 60|0;
 $__dp = sp + 165|0;
 $__ts = sp + 164|0;
 $__grp = sp + 48|0;
 $__sym = sp + 36|0;
 $__sn = sp + 24|0;
 $__fd = sp + 20|0;
 $__mbuf = sp + 64|0;
 $__mi = sp + 16|0;
 $__me = sp + 12|0;
 $0 = (($__iob) + 28|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 4|0);
 $3 = HEAP32[$2>>2]|0;HEAP32[$2>>2] = (($3+1)|0);
 $4 = HEAP32[6416>>2]|0;
 $5 = ($4|0)==(-1);
 if ($5) {
  label = 3;
 } else {
  HEAP32[$__p$i$i$i$i>>2] = 6416;
  $6 = (($__p$i$i$i$i) + 4|0);
  HEAP32[$6>>2] = (439);
  $7 = (($__p$i$i$i$i) + 8|0);
  HEAP32[$7>>2] = 0;
  __THREW__ = 0;
  invoke_vii(440,(6416|0),($__p$i$i$i$i|0));
  $8 = __THREW__; __THREW__ = 0;
  $9 = $8&1;
  if ($9) {
   label = 43;
  } else {
   label = 3;
  }
 }
 do {
  if ((label|0) == 3) {
   $10 = HEAP32[((6416 + 4|0))>>2]|0;
   $11 = (($10) + -1)|0;
   $12 = (($1) + 12|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = (($1) + 8|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = $13;
   $17 = $15;
   $18 = (($16) - ($17))|0;
   $19 = $18 >> 2;
   $20 = ($19>>>0)>($11>>>0);
   if ($20) {
    $21 = (($15) + ($11<<2)|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = ($22|0)==(0|0);
    if (!($23)) {
     $27 = HEAP8[$__digits>>0]|0;
     $28 = $27 & 1;
     $29 = ($28<<24>>24)==(0);
     if ($29) {
      $32 = $27&255;
      $33 = $32 >>> 1;
      $35 = $33;
     } else {
      $30 = (($__digits) + 4|0);
      $31 = HEAP32[$30>>2]|0;
      $35 = $31;
     }
     $34 = ($35|0)==(0);
     if ($34) {
      $48 = 0;
     } else {
      if ($29) {
       $38 = (($__digits) + 1|0);
       $40 = $38;
      } else {
       $36 = (($__digits) + 8|0);
       $37 = HEAP32[$36>>2]|0;
       $40 = $37;
      }
      $39 = HEAP8[$40>>0]|0;
      $41 = HEAP32[$22>>2]|0;
      $42 = (($41) + 28|0);
      $43 = HEAP32[$42>>2]|0;
      __THREW__ = 0;
      $44 = (invoke_iii($43|0,($22|0),45)|0);
      $45 = __THREW__; __THREW__ = 0;
      $46 = $45&1;
      if ($46) {
       label = 43;
       break;
      }
      $47 = ($39<<24>>24)==($44<<24>>24);
      $48 = $47;
     }
     HEAP32[$__pat>>2] = 0;
     ;HEAP32[$__grp+0>>2]=0|0;HEAP32[$__grp+4>>2]=0|0;HEAP32[$__grp+8>>2]=0|0;
     ;HEAP32[$__sym+0>>2]=0|0;HEAP32[$__sym+4>>2]=0|0;HEAP32[$__sym+8>>2]=0|0;
     ;HEAP32[$__sn+0>>2]=0|0;HEAP32[$__sn+4>>2]=0|0;HEAP32[$__sn+8>>2]=0|0;
     __THREW__ = 0;
     invoke_viiiiiiiiii(481,($__intl|0),($48|0),($1|0),($__pat|0),($__dp|0),($__ts|0),($__grp|0),($__sym|0),($__sn|0),($__fd|0));
     $49 = __THREW__; __THREW__ = 0;
     $50 = $49&1;
     do {
      if ($50) {
       $116 = ___cxa_find_matching_catch(-1,-1)|0;
       $117 = tempRet0;
       $$0 = $116;$$01 = $117;
      } else {
       $51 = HEAP8[$__digits>>0]|0;
       $52 = $51 & 1;
       $53 = ($52<<24>>24)==(0);
       if ($53) {
        $56 = $51&255;
        $57 = $56 >>> 1;
        $60 = $57;
       } else {
        $54 = (($__digits) + 4|0);
        $55 = HEAP32[$54>>2]|0;
        $60 = $55;
       }
       $58 = HEAP32[$__fd>>2]|0;
       $59 = ($60|0)>($58|0);
       if ($59) {
        if ($53) {
         $63 = $51&255;
         $64 = $63 >>> 1;
         $66 = $64;
        } else {
         $61 = (($__digits) + 4|0);
         $62 = HEAP32[$61>>2]|0;
         $66 = $62;
        }
        $65 = (($66) - ($58))|0;
        $67 = $65 << 1;
        $68 = HEAP8[$__sn>>0]|0;
        $69 = $68 & 1;
        $70 = ($69<<24>>24)==(0);
        if ($70) {
         $73 = $68&255;
         $74 = $73 >>> 1;
         $84 = $74;
        } else {
         $71 = (($__sn) + 4|0);
         $72 = HEAP32[$71>>2]|0;
         $84 = $72;
        }
        $75 = HEAP8[$__sym>>0]|0;
        $76 = $75 & 1;
        $77 = ($76<<24>>24)==(0);
        if ($77) {
         $80 = $75&255;
         $81 = $80 >>> 1;
         $86 = $81;
        } else {
         $78 = (($__sym) + 4|0);
         $79 = HEAP32[$78>>2]|0;
         $86 = $79;
        }
        $82 = $67 | 1;
        $83 = (($84) + ($82))|0;
        $85 = (($83) + ($86))|0;
        $$pn = $85;
       } else {
        $87 = HEAP8[$__sn>>0]|0;
        $88 = $87 & 1;
        $89 = ($88<<24>>24)==(0);
        if ($89) {
         $92 = $87&255;
         $93 = $92 >>> 1;
         $102 = $93;
        } else {
         $90 = (($__sn) + 4|0);
         $91 = HEAP32[$90>>2]|0;
         $102 = $91;
        }
        $94 = HEAP8[$__sym>>0]|0;
        $95 = $94 & 1;
        $96 = ($95<<24>>24)==(0);
        if ($96) {
         $99 = $94&255;
         $100 = $99 >>> 1;
         $104 = $100;
        } else {
         $97 = (($__sym) + 4|0);
         $98 = HEAP32[$97>>2]|0;
         $104 = $98;
        }
        $101 = (($102) + 2)|0;
        $103 = (($101) + ($104))|0;
        $$pn = $103;
       }
       $105 = (($$pn) + ($58))|0;
       $106 = ($105>>>0)>(100);
       if ($106) {
        $107 = (_malloc($105)|0);
        $108 = ($107|0)==(0|0);
        if ($108) {
         $109 = (___cxa_allocate_exception(4)|0);
         HEAP32[$109>>2] = ((15656 + 8|0));
         __THREW__ = 0;
         invoke_viii(379,($109|0),(15712|0),(374|0));
         $110 = __THREW__; __THREW__ = 0;
         $111 = $110&1;
         if ($111) {
          $112 = ___cxa_find_matching_catch(-1,-1)|0;
          $113 = tempRet0;
          $$0 = $112;$$01 = $113;
          break;
         } else {
          // unreachable;
         }
        } else {
         $121 = $107;$__mb$0 = $107;
        }
       } else {
        $121 = 0;$__mb$0 = $__mbuf;
       }
       $122 = (($__iob) + 4|0);
       $123 = HEAP32[$122>>2]|0;
       if ($53) {
        $128 = (($__digits) + 1|0);
        $129 = $51&255;
        $130 = $129 >>> 1;
        $132 = $128;$133 = $130;
       } else {
        $124 = (($__digits) + 8|0);
        $125 = HEAP32[$124>>2]|0;
        $126 = (($__digits) + 4|0);
        $127 = HEAP32[$126>>2]|0;
        $132 = $125;$133 = $127;
       }
       $131 = (($132) + ($133)|0);
       $134 = HEAP8[$__dp>>0]|0;
       $135 = HEAP8[$__ts>>0]|0;
       __THREW__ = 0;
       invoke_viiiiiiiiiiiiiii(482,($__mb$0|0),($__mi|0),($__me|0),($123|0),($132|0),($131|0),($22|0),($48|0),($__pat|0),($134|0),($135|0),($__grp|0),($__sym|0),($__sn|0),($58|0));
       $136 = __THREW__; __THREW__ = 0;
       $137 = $136&1;
       if (!($137)) {
        $138 = HEAP32[$__s>>2]|0;
        $139 = HEAP32[$__mi>>2]|0;
        $140 = HEAP32[$__me>>2]|0;
        __THREW__ = 0;
        invoke_viiiiiii(468,($agg$result|0),($138|0),($__mb$0|0),($139|0),($140|0),($__iob|0),($__fl|0));
        $141 = __THREW__; __THREW__ = 0;
        $142 = $141&1;
        if (!($142)) {
         $143 = ($121|0)==(0|0);
         if (!($143)) {
          _free($121);
         }
         $144 = HEAP8[$__sn>>0]|0;
         $145 = $144 & 1;
         $146 = ($145<<24>>24)==(0);
         if (!($146)) {
          $147 = (($__sn) + 8|0);
          $148 = HEAP32[$147>>2]|0;
          $149 = ($148|0)==(0|0);
          if (!($149)) {
           _free($148);
          }
         }
         $150 = HEAP8[$__sym>>0]|0;
         $151 = $150 & 1;
         $152 = ($151<<24>>24)==(0);
         do {
          if (!($152)) {
           $153 = (($__sym) + 8|0);
           $154 = HEAP32[$153>>2]|0;
           $155 = ($154|0)==(0|0);
           if ($155) {
            break;
           }
           _free($154);
          }
         } while(0);
         $156 = HEAP8[$__grp>>0]|0;
         $157 = $156 & 1;
         $158 = ($157<<24>>24)==(0);
         do {
          if (!($158)) {
           $159 = (($__grp) + 8|0);
           $160 = HEAP32[$159>>2]|0;
           $161 = ($160|0)==(0|0);
           if ($161) {
            break;
           }
           _free($160);
          }
         } while(0);
         $162 = (($1) + 4|0);
         $163 = HEAP32[$162>>2]|0;HEAP32[$162>>2] = (($163+-1)|0);
         $164 = ($163|0)==(0);
         if (!($164)) {
          STACKTOP = sp;return;
         }
         $165 = HEAP32[$1>>2]|0;
         $166 = (($165) + 8|0);
         $167 = HEAP32[$166>>2]|0;
         FUNCTION_TABLE_vi[$167 & 511]($1);
         STACKTOP = sp;return;
        }
       }
       $118 = ___cxa_find_matching_catch(-1,-1)|0;
       $119 = tempRet0;
       $120 = ($121|0)==(0|0);
       if ($120) {
        $$0 = $118;$$01 = $119;
       } else {
        _free($121);
        $$0 = $118;$$01 = $119;
       }
      }
     } while(0);
     $168 = HEAP8[$__sn>>0]|0;
     $169 = $168 & 1;
     $170 = ($169<<24>>24)==(0);
     if (!($170)) {
      $171 = (($__sn) + 8|0);
      $172 = HEAP32[$171>>2]|0;
      $173 = ($172|0)==(0|0);
      if (!($173)) {
       _free($172);
      }
     }
     $174 = HEAP8[$__sym>>0]|0;
     $175 = $174 & 1;
     $176 = ($175<<24>>24)==(0);
     if (!($176)) {
      $177 = (($__sym) + 8|0);
      $178 = HEAP32[$177>>2]|0;
      $179 = ($178|0)==(0|0);
      if (!($179)) {
       _free($178);
      }
     }
     $180 = HEAP8[$__grp>>0]|0;
     $181 = $180 & 1;
     $182 = ($181<<24>>24)==(0);
     if ($182) {
      $$1 = $$0;$$12 = $$01;
      break;
     }
     $183 = (($__grp) + 8|0);
     $184 = HEAP32[$183>>2]|0;
     $185 = ($184|0)==(0|0);
     if ($185) {
      $$1 = $$0;$$12 = $$01;
      break;
     }
     _free($184);
     $$1 = $$0;$$12 = $$01;
     break;
    }
   }
   $24 = (___cxa_allocate_exception(4)|0);
   HEAP32[$24>>2] = ((14256 + 8|0));
   __THREW__ = 0;
   invoke_viii(379,($24|0),(14336|0),(351|0));
   $25 = __THREW__; __THREW__ = 0;
   $26 = $25&1;
   if ($26) {
    label = 43;
   } else {
    // unreachable;
   }
  }
 } while(0);
 if ((label|0) == 43) {
  $114 = ___cxa_find_matching_catch(-1,-1)|0;
  $115 = tempRet0;
  $$1 = $114;$$12 = $115;
 }
 $186 = (($1) + 4|0);
 $187 = HEAP32[$186>>2]|0;HEAP32[$186>>2] = (($187+-1)|0);
 $188 = ($187|0)==(0);
 if (!($188)) {
  ___resumeException($$1|0);
  // unreachable;
 }
 $189 = HEAP32[$1>>2]|0;
 $190 = (($189) + 8|0);
 $191 = HEAP32[$190>>2]|0;
 FUNCTION_TABLE_vi[$191 & 511]($1);
 ___resumeException($$1|0);
 // unreachable;
}
function __ZNSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($this|0)==(0|0);
 if (!($0)) {
  _free($this);
 }
 STACKTOP = sp;return;
}
function __ZNSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwe($agg$result,$this,$__s,$__intl,$__iob,$__fl,$__units) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__intl = $__intl|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__units = +$__units;
 var $$0 = 0, $$01 = 0, $$1 = 0, $$12 = 0, $$217 = 0, $$2316 = 0, $$pn = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;
 var $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0;
 var $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0;
 var $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0;
 var $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__bb = 0, $__buf = 0, $__db$0 = 0, $__digits = 0, $__dp = 0, $__fd = 0, $__grp = 0, $__mb$0 = 0, $__mbuf = 0, $__me = 0, $__mi = 0, $__n$0 = 0, $__p$i$i$i$i = 0, $__pat = 0, $__sn = 0, $__sym = 0;
 var $__ts = 0, $eh$lpad$body$index19Z2D = 0, $eh$lpad$body$indexZ2D = 0, $vararg_buffer = 0, $vararg_buffer23 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1008|0;
 $vararg_buffer23 = sp + 24|0;
 $vararg_buffer = sp + 16|0;
 $__p$i$i$i$i = sp;
 $__buf = sp + 900|0;
 $__bb = sp + 896|0;
 $__digits = sp + 496|0;
 $__pat = sp + 488|0;
 $__dp = sp + 484|0;
 $__ts = sp + 480|0;
 $__grp = sp + 468|0;
 $__sym = sp + 456|0;
 $__sn = sp + 444|0;
 $__fd = sp + 440|0;
 $__mbuf = sp + 40|0;
 $__mi = sp + 36|0;
 $__me = sp + 32|0;
 HEAP32[$__bb>>2] = $__buf;
 HEAPF64[tempDoublePtr>>3]=$__units;HEAP32[$vararg_buffer>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer+4>>2]=HEAP32[tempDoublePtr+4>>2];
 $0 = (_snprintf($__buf,100,6184,$vararg_buffer)|0);
 $1 = ($0>>>0)>(99);
 L1: do {
  if ($1) {
   $2 = HEAP8[6328>>0]|0;
   $3 = ($2<<24>>24)==(0);
   do {
    if ($3) {
     $4 = (___cxa_guard_acquire((6328|0))|0);
     $5 = ($4|0)==(0);
     if ($5) {
      label = 7;
     } else {
      __THREW__ = 0;
      $6 = (invoke_iiii(461,2147483647,(6336|0),(0|0))|0);
      $7 = __THREW__; __THREW__ = 0;
      $8 = $7&1;
      if ($8) {
       $9 = ___cxa_find_matching_catch(-1,-1)|0;
       $10 = tempRet0;
       ___cxa_guard_abort((6328|0));
       $195 = 0;$eh$lpad$body$index19Z2D = $10;$eh$lpad$body$indexZ2D = $9;
       break;
      } else {
       HEAP32[6320>>2] = $6;
       ___cxa_guard_release((6328|0));
       label = 7;
       break;
      }
     }
    } else {
     label = 7;
    }
   } while(0);
   if ((label|0) == 7) {
    $11 = HEAP32[6320>>2]|0;
    __THREW__ = 0;
    HEAPF64[tempDoublePtr>>3]=$__units;HEAP32[$vararg_buffer23>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer23+4>>2]=HEAP32[tempDoublePtr+4>>2];
    $12 = (invoke_iiiii(466,($__bb|0),($11|0),(6184|0),($vararg_buffer23|0))|0);
    $13 = __THREW__; __THREW__ = 0;
    $14 = $13&1;
    do {
     if ($14) {
      $196 = 0;
     } else {
      $15 = HEAP32[$__bb>>2]|0;
      $16 = ($15|0)==(0|0);
      if ($16) {
       $17 = (___cxa_allocate_exception(4)|0);
       HEAP32[$17>>2] = ((15656 + 8|0));
       __THREW__ = 0;
       invoke_viii(379,($17|0),(15712|0),(374|0));
       $18 = __THREW__; __THREW__ = 0;
       $19 = $18&1;
       if ($19) {
        $196 = 0;
        break;
       }
       // unreachable;
      }
      $22 = $12 << 2;
      $23 = (_malloc($22)|0);
      $24 = ($23|0)==(0|0);
      if (!($24)) {
       $165 = $23;$167 = $15;$__db$0 = $23;$__n$0 = $12;
       label = 16;
       break L1;
      }
      $25 = (___cxa_allocate_exception(4)|0);
      HEAP32[$25>>2] = ((15656 + 8|0));
      __THREW__ = 0;
      invoke_viii(379,($25|0),(15712|0),(374|0));
      $26 = __THREW__; __THREW__ = 0;
      $27 = $26&1;
      if ($27) {
       $196 = $15;
      } else {
       // unreachable;
      }
     }
    } while(0);
    $20 = ___cxa_find_matching_catch(-1,-1)|0;
    $21 = tempRet0;
    $195 = $196;$eh$lpad$body$index19Z2D = $21;$eh$lpad$body$indexZ2D = $20;
   }
   $$217 = $eh$lpad$body$indexZ2D;$$2316 = $eh$lpad$body$index19Z2D;$194 = $195;
  } else {
   $165 = 0;$167 = 0;$__db$0 = $__digits;$__n$0 = $0;
   label = 16;
  }
 } while(0);
 if ((label|0) == 16) {
  $28 = (($__iob) + 28|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = (($29) + 4|0);
  $31 = HEAP32[$30>>2]|0;HEAP32[$30>>2] = (($31+1)|0);
  $32 = HEAP32[6408>>2]|0;
  $33 = ($32|0)==(-1);
  if ($33) {
   label = 18;
  } else {
   HEAP32[$__p$i$i$i$i>>2] = 6408;
   $34 = (($__p$i$i$i$i) + 4|0);
   HEAP32[$34>>2] = (439);
   $35 = (($__p$i$i$i$i) + 8|0);
   HEAP32[$35>>2] = 0;
   __THREW__ = 0;
   invoke_vii(440,(6408|0),($__p$i$i$i$i|0));
   $36 = __THREW__; __THREW__ = 0;
   $37 = $36&1;
   if ($37) {
    label = 46;
   } else {
    label = 18;
   }
  }
  do {
   if ((label|0) == 18) {
    $38 = HEAP32[((6408 + 4|0))>>2]|0;
    $39 = (($38) + -1)|0;
    $40 = (($29) + 12|0);
    $41 = HEAP32[$40>>2]|0;
    $42 = (($29) + 8|0);
    $43 = HEAP32[$42>>2]|0;
    $44 = $41;
    $45 = $43;
    $46 = (($44) - ($45))|0;
    $47 = $46 >> 2;
    $48 = ($47>>>0)>($39>>>0);
    if ($48) {
     $49 = (($43) + ($39<<2)|0);
     $50 = HEAP32[$49>>2]|0;
     $51 = ($50|0)==(0|0);
     if (!($51)) {
      $55 = HEAP32[$__bb>>2]|0;
      $56 = (($55) + ($__n$0)|0);
      $57 = HEAP32[$50>>2]|0;
      $58 = (($57) + 48|0);
      $59 = HEAP32[$58>>2]|0;
      __THREW__ = 0;
      (invoke_iiiii($59|0,($50|0),($55|0),($56|0),($__db$0|0))|0);
      $60 = __THREW__; __THREW__ = 0;
      $61 = $60&1;
      if ($61) {
       label = 46;
       break;
      }
      $62 = ($__n$0|0)==(0);
      if ($62) {
       $65 = 0;
      } else {
       $63 = HEAP8[$55>>0]|0;
       $64 = ($63<<24>>24)==(45);
       $65 = $64;
      }
      HEAP32[$__pat>>2] = 0;
      ;HEAP32[$__grp+0>>2]=0|0;HEAP32[$__grp+4>>2]=0|0;HEAP32[$__grp+8>>2]=0|0;
      ;HEAP32[$__sym+0>>2]=0|0;HEAP32[$__sym+4>>2]=0|0;HEAP32[$__sym+8>>2]=0|0;
      ;HEAP32[$__sn+0>>2]=0|0;HEAP32[$__sn+4>>2]=0|0;HEAP32[$__sn+8>>2]=0|0;
      __THREW__ = 0;
      invoke_viiiiiiiiii(483,($__intl|0),($65|0),($29|0),($__pat|0),($__dp|0),($__ts|0),($__grp|0),($__sym|0),($__sn|0),($__fd|0));
      $66 = __THREW__; __THREW__ = 0;
      $67 = $66&1;
      do {
       if ($67) {
        $121 = ___cxa_find_matching_catch(-1,-1)|0;
        $122 = tempRet0;
        $$0 = $121;$$01 = $122;
       } else {
        $68 = HEAP32[$__fd>>2]|0;
        $69 = ($__n$0|0)>($68|0);
        if ($69) {
         $70 = (($__n$0) - ($68))|0;
         $71 = $70 << 1;
         $72 = HEAP8[$__sn>>0]|0;
         $73 = $72 & 1;
         $74 = ($73<<24>>24)==(0);
         if ($74) {
          $77 = $72&255;
          $78 = $77 >>> 1;
          $88 = $78;
         } else {
          $75 = (($__sn) + 4|0);
          $76 = HEAP32[$75>>2]|0;
          $88 = $76;
         }
         $79 = HEAP8[$__sym>>0]|0;
         $80 = $79 & 1;
         $81 = ($80<<24>>24)==(0);
         if ($81) {
          $84 = $79&255;
          $85 = $84 >>> 1;
          $90 = $85;
         } else {
          $82 = (($__sym) + 4|0);
          $83 = HEAP32[$82>>2]|0;
          $90 = $83;
         }
         $86 = $71 | 1;
         $87 = (($88) + ($86))|0;
         $89 = (($87) + ($90))|0;
         $$pn = $89;
        } else {
         $91 = HEAP8[$__sn>>0]|0;
         $92 = $91 & 1;
         $93 = ($92<<24>>24)==(0);
         if ($93) {
          $96 = $91&255;
          $97 = $96 >>> 1;
          $106 = $97;
         } else {
          $94 = (($__sn) + 4|0);
          $95 = HEAP32[$94>>2]|0;
          $106 = $95;
         }
         $98 = HEAP8[$__sym>>0]|0;
         $99 = $98 & 1;
         $100 = ($99<<24>>24)==(0);
         if ($100) {
          $103 = $98&255;
          $104 = $103 >>> 1;
          $108 = $104;
         } else {
          $101 = (($__sym) + 4|0);
          $102 = HEAP32[$101>>2]|0;
          $108 = $102;
         }
         $105 = (($106) + 2)|0;
         $107 = (($105) + ($108))|0;
         $$pn = $107;
        }
        $109 = (($$pn) + ($68))|0;
        $110 = ($109>>>0)>(100);
        if ($110) {
         $111 = $109 << 2;
         $112 = (_malloc($111)|0);
         $113 = ($112|0)==(0|0);
         if ($113) {
          $114 = (___cxa_allocate_exception(4)|0);
          HEAP32[$114>>2] = ((15656 + 8|0));
          __THREW__ = 0;
          invoke_viii(379,($114|0),(15712|0),(374|0));
          $115 = __THREW__; __THREW__ = 0;
          $116 = $115&1;
          if ($116) {
           $117 = ___cxa_find_matching_catch(-1,-1)|0;
           $118 = tempRet0;
           $$0 = $117;$$01 = $118;
           break;
          } else {
           // unreachable;
          }
         } else {
          $126 = $112;$__mb$0 = $112;
         }
        } else {
         $126 = 0;$__mb$0 = $__mbuf;
        }
        $127 = (($__iob) + 4|0);
        $128 = HEAP32[$127>>2]|0;
        $129 = (($__db$0) + ($__n$0<<2)|0);
        $130 = HEAP32[$__dp>>2]|0;
        $131 = HEAP32[$__ts>>2]|0;
        __THREW__ = 0;
        invoke_viiiiiiiiiiiiiii(484,($__mb$0|0),($__mi|0),($__me|0),($128|0),($__db$0|0),($129|0),($50|0),($65|0),($__pat|0),($130|0),($131|0),($__grp|0),($__sym|0),($__sn|0),($68|0));
        $132 = __THREW__; __THREW__ = 0;
        $133 = $132&1;
        if (!($133)) {
         $134 = HEAP32[$__s>>2]|0;
         $135 = HEAP32[$__mi>>2]|0;
         $136 = HEAP32[$__me>>2]|0;
         __THREW__ = 0;
         invoke_viiiiiii(471,($agg$result|0),($134|0),($__mb$0|0),($135|0),($136|0),($__iob|0),($__fl|0));
         $137 = __THREW__; __THREW__ = 0;
         $138 = $137&1;
         if (!($138)) {
          $139 = ($126|0)==(0|0);
          if (!($139)) {
           _free($126);
          }
          $140 = HEAP8[$__sn>>0]|0;
          $141 = $140 & 1;
          $142 = ($141<<24>>24)==(0);
          if (!($142)) {
           $143 = (($__sn) + 8|0);
           $144 = HEAP32[$143>>2]|0;
           $145 = ($144|0)==(0|0);
           if (!($145)) {
            _free($144);
           }
          }
          $146 = HEAP8[$__sym>>0]|0;
          $147 = $146 & 1;
          $148 = ($147<<24>>24)==(0);
          do {
           if (!($148)) {
            $149 = (($__sym) + 8|0);
            $150 = HEAP32[$149>>2]|0;
            $151 = ($150|0)==(0|0);
            if ($151) {
             break;
            }
            _free($150);
           }
          } while(0);
          $152 = HEAP8[$__grp>>0]|0;
          $153 = $152 & 1;
          $154 = ($153<<24>>24)==(0);
          do {
           if (!($154)) {
            $155 = (($__grp) + 8|0);
            $156 = HEAP32[$155>>2]|0;
            $157 = ($156|0)==(0|0);
            if ($157) {
             break;
            }
            _free($156);
           }
          } while(0);
          $158 = (($29) + 4|0);
          $159 = HEAP32[$158>>2]|0;HEAP32[$158>>2] = (($159+-1)|0);
          $160 = ($159|0)==(0);
          if ($160) {
           $161 = HEAP32[$29>>2]|0;
           $162 = (($161) + 8|0);
           $163 = HEAP32[$162>>2]|0;
           FUNCTION_TABLE_vi[$163 & 511]($29);
          }
          $164 = ($165|0)==(0|0);
          if (!($164)) {
           _free($165);
          }
          $166 = ($167|0)==(0|0);
          if ($166) {
           STACKTOP = sp;return;
          }
          _free($167);
          STACKTOP = sp;return;
         }
        }
        $123 = ___cxa_find_matching_catch(-1,-1)|0;
        $124 = tempRet0;
        $125 = ($126|0)==(0|0);
        if ($125) {
         $$0 = $123;$$01 = $124;
        } else {
         _free($126);
         $$0 = $123;$$01 = $124;
        }
       }
      } while(0);
      $168 = HEAP8[$__sn>>0]|0;
      $169 = $168 & 1;
      $170 = ($169<<24>>24)==(0);
      if (!($170)) {
       $171 = (($__sn) + 8|0);
       $172 = HEAP32[$171>>2]|0;
       $173 = ($172|0)==(0|0);
       if (!($173)) {
        _free($172);
       }
      }
      $174 = HEAP8[$__sym>>0]|0;
      $175 = $174 & 1;
      $176 = ($175<<24>>24)==(0);
      if (!($176)) {
       $177 = (($__sym) + 8|0);
       $178 = HEAP32[$177>>2]|0;
       $179 = ($178|0)==(0|0);
       if (!($179)) {
        _free($178);
       }
      }
      $180 = HEAP8[$__grp>>0]|0;
      $181 = $180 & 1;
      $182 = ($181<<24>>24)==(0);
      if ($182) {
       $$1 = $$0;$$12 = $$01;
       break;
      }
      $183 = (($__grp) + 8|0);
      $184 = HEAP32[$183>>2]|0;
      $185 = ($184|0)==(0|0);
      if ($185) {
       $$1 = $$0;$$12 = $$01;
       break;
      }
      _free($184);
      $$1 = $$0;$$12 = $$01;
      break;
     }
    }
    $52 = (___cxa_allocate_exception(4)|0);
    HEAP32[$52>>2] = ((14256 + 8|0));
    __THREW__ = 0;
    invoke_viii(379,($52|0),(14336|0),(351|0));
    $53 = __THREW__; __THREW__ = 0;
    $54 = $53&1;
    if ($54) {
     label = 46;
    } else {
     // unreachable;
    }
   }
  } while(0);
  if ((label|0) == 46) {
   $119 = ___cxa_find_matching_catch(-1,-1)|0;
   $120 = tempRet0;
   $$1 = $119;$$12 = $120;
  }
  $186 = (($29) + 4|0);
  $187 = HEAP32[$186>>2]|0;HEAP32[$186>>2] = (($187+-1)|0);
  $188 = ($187|0)==(0);
  if ($188) {
   $189 = HEAP32[$29>>2]|0;
   $190 = (($189) + 8|0);
   $191 = HEAP32[$190>>2]|0;
   FUNCTION_TABLE_vi[$191 & 511]($29);
  }
  $192 = ($165|0)==(0|0);
  if ($192) {
   $$217 = $$1;$$2316 = $$12;$194 = $167;
  } else {
   _free($165);
   $$217 = $$1;$$2316 = $$12;$194 = $167;
  }
 }
 $193 = ($194|0)==(0|0);
 if ($193) {
  ___resumeException($$217|0);
  // unreachable;
 }
 _free($194);
 ___resumeException($$217|0);
 // unreachable;
}
function __ZNSt3__111__money_putIwE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_Ri($__intl,$__neg,$__loc$0$0$val,$__pat,$__dp,$__ts,$__grp,$__sym,$__sn,$__fd) {
 $__intl = $__intl|0;
 $__neg = $__neg|0;
 $__loc$0$0$val = $__loc$0$0$val|0;
 $__pat = $__pat|0;
 $__dp = $__dp|0;
 $__ts = $__ts|0;
 $__grp = $__grp|0;
 $__sym = $__sym|0;
 $__sn = $__sn|0;
 $__fd = $__fd|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $__p$i$i$i$i = 0, $__p$i$i$i$i8 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0;
 $__p$i$i$i$i8 = sp + 16|0;
 $__p$i$i$i$i = sp;
 $0 = sp + 136|0;
 $1 = sp + 124|0;
 $2 = sp + 120|0;
 $3 = sp + 108|0;
 $4 = sp + 96|0;
 $5 = sp + 84|0;
 $6 = sp + 80|0;
 $7 = sp + 68|0;
 $8 = sp + 64|0;
 $9 = sp + 52|0;
 $10 = sp + 40|0;
 $11 = sp + 28|0;
 if ($__intl) {
  $12 = HEAP32[6000>>2]|0;
  $13 = ($12|0)==(-1);
  if (!($13)) {
   HEAP32[$__p$i$i$i$i>>2] = 6000;
   $14 = (($__p$i$i$i$i) + 4|0);
   HEAP32[$14>>2] = (439);
   $15 = (($__p$i$i$i$i) + 8|0);
   HEAP32[$15>>2] = 0;
   __ZNSt3__111__call_onceERVmPvPFvS2_E(6000,$__p$i$i$i$i);
  }
  $16 = HEAP32[((6000 + 4|0))>>2]|0;
  $17 = (($16) + -1)|0;
  $18 = (($__loc$0$0$val) + 12|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (($__loc$0$0$val) + 8|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = $19;
  $23 = $21;
  $24 = (($22) - ($23))|0;
  $25 = $24 >> 2;
  $26 = ($25>>>0)>($17>>>0);
  if (!($26)) {
   $30 = (___cxa_allocate_exception(4)|0);
   HEAP32[$30>>2] = ((14256 + 8|0));
   ___cxa_throw(($30|0),(14336|0),(351|0));
   // unreachable;
  }
  $27 = (($21) + ($17<<2)|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = ($28|0)==(0|0);
  if ($29) {
   $30 = (___cxa_allocate_exception(4)|0);
   HEAP32[$30>>2] = ((14256 + 8|0));
   ___cxa_throw(($30|0),(14336|0),(351|0));
   // unreachable;
  }
  $31 = HEAP32[$28>>2]|0;
  do {
   if ($__neg) {
    $32 = (($31) + 44|0);
    $33 = HEAP32[$32>>2]|0;
    FUNCTION_TABLE_vii[$33 & 511]($0,$28);
    $34 = HEAP32[$0>>2]|0;
    HEAP8[$__pat>>0]=$34&255;HEAP8[$__pat+1>>0]=($34>>8)&255;HEAP8[$__pat+2>>0]=($34>>16)&255;HEAP8[$__pat+3>>0]=$34>>24;
    $35 = HEAP32[$28>>2]|0;
    $36 = (($35) + 32|0);
    $37 = HEAP32[$36>>2]|0;
    FUNCTION_TABLE_vii[$37 & 511]($1,$28);
    $38 = HEAP8[$__sn>>0]|0;
    $39 = $38 & 1;
    $40 = ($39<<24>>24)==(0);
    if ($40) {
     $44 = (($__sn) + 4|0);
     HEAP32[$44>>2] = 0;
     HEAP8[$__sn>>0] = 0;
    } else {
     $41 = (($__sn) + 8|0);
     $42 = HEAP32[$41>>2]|0;
     HEAP32[$42>>2] = 0;
     $43 = (($__sn) + 4|0);
     HEAP32[$43>>2] = 0;
    }
    __THREW__ = 0;
    invoke_vi(479,($__sn|0));
    $45 = __THREW__; __THREW__ = 0;
    $46 = $45&1;
    if ($46) {
     $47 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
     $48 = tempRet0;
     ___clang_call_terminate($47);
     // unreachable;
    } else {
     ;HEAP32[$__sn+0>>2]=HEAP32[$1+0>>2]|0;HEAP32[$__sn+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$__sn+8>>2]=HEAP32[$1+8>>2]|0;
     ;HEAP32[$1+0>>2]=0|0;HEAP32[$1+4>>2]=0|0;HEAP32[$1+8>>2]=0|0;
     break;
    }
   } else {
    $49 = (($31) + 40|0);
    $50 = HEAP32[$49>>2]|0;
    FUNCTION_TABLE_vii[$50 & 511]($2,$28);
    $51 = HEAP32[$2>>2]|0;
    HEAP8[$__pat>>0]=$51&255;HEAP8[$__pat+1>>0]=($51>>8)&255;HEAP8[$__pat+2>>0]=($51>>16)&255;HEAP8[$__pat+3>>0]=$51>>24;
    $52 = HEAP32[$28>>2]|0;
    $53 = (($52) + 28|0);
    $54 = HEAP32[$53>>2]|0;
    FUNCTION_TABLE_vii[$54 & 511]($3,$28);
    $55 = HEAP8[$__sn>>0]|0;
    $56 = $55 & 1;
    $57 = ($56<<24>>24)==(0);
    if ($57) {
     $61 = (($__sn) + 4|0);
     HEAP32[$61>>2] = 0;
     HEAP8[$__sn>>0] = 0;
    } else {
     $58 = (($__sn) + 8|0);
     $59 = HEAP32[$58>>2]|0;
     HEAP32[$59>>2] = 0;
     $60 = (($__sn) + 4|0);
     HEAP32[$60>>2] = 0;
    }
    __THREW__ = 0;
    invoke_vi(479,($__sn|0));
    $62 = __THREW__; __THREW__ = 0;
    $63 = $62&1;
    if ($63) {
     $64 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
     $65 = tempRet0;
     ___clang_call_terminate($64);
     // unreachable;
    } else {
     ;HEAP32[$__sn+0>>2]=HEAP32[$3+0>>2]|0;HEAP32[$__sn+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$__sn+8>>2]=HEAP32[$3+8>>2]|0;
     ;HEAP32[$3+0>>2]=0|0;HEAP32[$3+4>>2]=0|0;HEAP32[$3+8>>2]=0|0;
     break;
    }
   }
  } while(0);
  $66 = HEAP32[$28>>2]|0;
  $67 = (($66) + 12|0);
  $68 = HEAP32[$67>>2]|0;
  $69 = (FUNCTION_TABLE_ii[$68 & 511]($28)|0);
  HEAP32[$__dp>>2] = $69;
  $70 = HEAP32[$28>>2]|0;
  $71 = (($70) + 16|0);
  $72 = HEAP32[$71>>2]|0;
  $73 = (FUNCTION_TABLE_ii[$72 & 511]($28)|0);
  HEAP32[$__ts>>2] = $73;
  $74 = HEAP32[$28>>2]|0;
  $75 = (($74) + 20|0);
  $76 = HEAP32[$75>>2]|0;
  FUNCTION_TABLE_vii[$76 & 511]($4,$28);
  $77 = HEAP8[$__grp>>0]|0;
  $78 = $77 & 1;
  $79 = ($78<<24>>24)==(0);
  if ($79) {
   $83 = (($__grp) + 1|0);
   HEAP8[$83>>0] = 0;
   HEAP8[$__grp>>0] = 0;
  } else {
   $80 = (($__grp) + 8|0);
   $81 = HEAP32[$80>>2]|0;
   HEAP8[$81>>0] = 0;
   $82 = (($__grp) + 4|0);
   HEAP32[$82>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vi(475,($__grp|0));
  $84 = __THREW__; __THREW__ = 0;
  $85 = $84&1;
  if ($85) {
   $86 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
   $87 = tempRet0;
   ___clang_call_terminate($86);
   // unreachable;
  }
  ;HEAP32[$__grp+0>>2]=HEAP32[$4+0>>2]|0;HEAP32[$__grp+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$__grp+8>>2]=HEAP32[$4+8>>2]|0;
  ;HEAP32[$4+0>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;
  $88 = HEAP32[$28>>2]|0;
  $89 = (($88) + 24|0);
  $90 = HEAP32[$89>>2]|0;
  FUNCTION_TABLE_vii[$90 & 511]($5,$28);
  $91 = HEAP8[$__sym>>0]|0;
  $92 = $91 & 1;
  $93 = ($92<<24>>24)==(0);
  if ($93) {
   $97 = (($__sym) + 4|0);
   HEAP32[$97>>2] = 0;
   HEAP8[$__sym>>0] = 0;
  } else {
   $94 = (($__sym) + 8|0);
   $95 = HEAP32[$94>>2]|0;
   HEAP32[$95>>2] = 0;
   $96 = (($__sym) + 4|0);
   HEAP32[$96>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vi(479,($__sym|0));
  $98 = __THREW__; __THREW__ = 0;
  $99 = $98&1;
  if ($99) {
   $100 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
   $101 = tempRet0;
   ___clang_call_terminate($100);
   // unreachable;
  }
  ;HEAP32[$__sym+0>>2]=HEAP32[$5+0>>2]|0;HEAP32[$__sym+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$__sym+8>>2]=HEAP32[$5+8>>2]|0;
  ;HEAP32[$5+0>>2]=0|0;HEAP32[$5+4>>2]=0|0;HEAP32[$5+8>>2]=0|0;
  $102 = HEAP32[$28>>2]|0;
  $103 = (($102) + 36|0);
  $104 = HEAP32[$103>>2]|0;
  $105 = (FUNCTION_TABLE_ii[$104 & 511]($28)|0);
  $storemerge = $105;
  HEAP32[$__fd>>2] = $storemerge;
  STACKTOP = sp;return;
 } else {
  $106 = HEAP32[5936>>2]|0;
  $107 = ($106|0)==(-1);
  if (!($107)) {
   HEAP32[$__p$i$i$i$i8>>2] = 5936;
   $108 = (($__p$i$i$i$i8) + 4|0);
   HEAP32[$108>>2] = (439);
   $109 = (($__p$i$i$i$i8) + 8|0);
   HEAP32[$109>>2] = 0;
   __ZNSt3__111__call_onceERVmPvPFvS2_E(5936,$__p$i$i$i$i8);
  }
  $110 = HEAP32[((5936 + 4|0))>>2]|0;
  $111 = (($110) + -1)|0;
  $112 = (($__loc$0$0$val) + 12|0);
  $113 = HEAP32[$112>>2]|0;
  $114 = (($__loc$0$0$val) + 8|0);
  $115 = HEAP32[$114>>2]|0;
  $116 = $113;
  $117 = $115;
  $118 = (($116) - ($117))|0;
  $119 = $118 >> 2;
  $120 = ($119>>>0)>($111>>>0);
  if (!($120)) {
   $124 = (___cxa_allocate_exception(4)|0);
   HEAP32[$124>>2] = ((14256 + 8|0));
   ___cxa_throw(($124|0),(14336|0),(351|0));
   // unreachable;
  }
  $121 = (($115) + ($111<<2)|0);
  $122 = HEAP32[$121>>2]|0;
  $123 = ($122|0)==(0|0);
  if ($123) {
   $124 = (___cxa_allocate_exception(4)|0);
   HEAP32[$124>>2] = ((14256 + 8|0));
   ___cxa_throw(($124|0),(14336|0),(351|0));
   // unreachable;
  }
  $125 = HEAP32[$122>>2]|0;
  do {
   if ($__neg) {
    $126 = (($125) + 44|0);
    $127 = HEAP32[$126>>2]|0;
    FUNCTION_TABLE_vii[$127 & 511]($6,$122);
    $128 = HEAP32[$6>>2]|0;
    HEAP8[$__pat>>0]=$128&255;HEAP8[$__pat+1>>0]=($128>>8)&255;HEAP8[$__pat+2>>0]=($128>>16)&255;HEAP8[$__pat+3>>0]=$128>>24;
    $129 = HEAP32[$122>>2]|0;
    $130 = (($129) + 32|0);
    $131 = HEAP32[$130>>2]|0;
    FUNCTION_TABLE_vii[$131 & 511]($7,$122);
    $132 = HEAP8[$__sn>>0]|0;
    $133 = $132 & 1;
    $134 = ($133<<24>>24)==(0);
    if ($134) {
     $138 = (($__sn) + 4|0);
     HEAP32[$138>>2] = 0;
     HEAP8[$__sn>>0] = 0;
    } else {
     $135 = (($__sn) + 8|0);
     $136 = HEAP32[$135>>2]|0;
     HEAP32[$136>>2] = 0;
     $137 = (($__sn) + 4|0);
     HEAP32[$137>>2] = 0;
    }
    __THREW__ = 0;
    invoke_vi(479,($__sn|0));
    $139 = __THREW__; __THREW__ = 0;
    $140 = $139&1;
    if ($140) {
     $141 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
     $142 = tempRet0;
     ___clang_call_terminate($141);
     // unreachable;
    } else {
     ;HEAP32[$__sn+0>>2]=HEAP32[$7+0>>2]|0;HEAP32[$__sn+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$__sn+8>>2]=HEAP32[$7+8>>2]|0;
     ;HEAP32[$7+0>>2]=0|0;HEAP32[$7+4>>2]=0|0;HEAP32[$7+8>>2]=0|0;
     break;
    }
   } else {
    $143 = (($125) + 40|0);
    $144 = HEAP32[$143>>2]|0;
    FUNCTION_TABLE_vii[$144 & 511]($8,$122);
    $145 = HEAP32[$8>>2]|0;
    HEAP8[$__pat>>0]=$145&255;HEAP8[$__pat+1>>0]=($145>>8)&255;HEAP8[$__pat+2>>0]=($145>>16)&255;HEAP8[$__pat+3>>0]=$145>>24;
    $146 = HEAP32[$122>>2]|0;
    $147 = (($146) + 28|0);
    $148 = HEAP32[$147>>2]|0;
    FUNCTION_TABLE_vii[$148 & 511]($9,$122);
    $149 = HEAP8[$__sn>>0]|0;
    $150 = $149 & 1;
    $151 = ($150<<24>>24)==(0);
    if ($151) {
     $155 = (($__sn) + 4|0);
     HEAP32[$155>>2] = 0;
     HEAP8[$__sn>>0] = 0;
    } else {
     $152 = (($__sn) + 8|0);
     $153 = HEAP32[$152>>2]|0;
     HEAP32[$153>>2] = 0;
     $154 = (($__sn) + 4|0);
     HEAP32[$154>>2] = 0;
    }
    __THREW__ = 0;
    invoke_vi(479,($__sn|0));
    $156 = __THREW__; __THREW__ = 0;
    $157 = $156&1;
    if ($157) {
     $158 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
     $159 = tempRet0;
     ___clang_call_terminate($158);
     // unreachable;
    } else {
     ;HEAP32[$__sn+0>>2]=HEAP32[$9+0>>2]|0;HEAP32[$__sn+4>>2]=HEAP32[$9+4>>2]|0;HEAP32[$__sn+8>>2]=HEAP32[$9+8>>2]|0;
     ;HEAP32[$9+0>>2]=0|0;HEAP32[$9+4>>2]=0|0;HEAP32[$9+8>>2]=0|0;
     break;
    }
   }
  } while(0);
  $160 = HEAP32[$122>>2]|0;
  $161 = (($160) + 12|0);
  $162 = HEAP32[$161>>2]|0;
  $163 = (FUNCTION_TABLE_ii[$162 & 511]($122)|0);
  HEAP32[$__dp>>2] = $163;
  $164 = HEAP32[$122>>2]|0;
  $165 = (($164) + 16|0);
  $166 = HEAP32[$165>>2]|0;
  $167 = (FUNCTION_TABLE_ii[$166 & 511]($122)|0);
  HEAP32[$__ts>>2] = $167;
  $168 = HEAP32[$122>>2]|0;
  $169 = (($168) + 20|0);
  $170 = HEAP32[$169>>2]|0;
  FUNCTION_TABLE_vii[$170 & 511]($10,$122);
  $171 = HEAP8[$__grp>>0]|0;
  $172 = $171 & 1;
  $173 = ($172<<24>>24)==(0);
  if ($173) {
   $177 = (($__grp) + 1|0);
   HEAP8[$177>>0] = 0;
   HEAP8[$__grp>>0] = 0;
  } else {
   $174 = (($__grp) + 8|0);
   $175 = HEAP32[$174>>2]|0;
   HEAP8[$175>>0] = 0;
   $176 = (($__grp) + 4|0);
   HEAP32[$176>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vi(475,($__grp|0));
  $178 = __THREW__; __THREW__ = 0;
  $179 = $178&1;
  if ($179) {
   $180 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
   $181 = tempRet0;
   ___clang_call_terminate($180);
   // unreachable;
  }
  ;HEAP32[$__grp+0>>2]=HEAP32[$10+0>>2]|0;HEAP32[$__grp+4>>2]=HEAP32[$10+4>>2]|0;HEAP32[$__grp+8>>2]=HEAP32[$10+8>>2]|0;
  ;HEAP32[$10+0>>2]=0|0;HEAP32[$10+4>>2]=0|0;HEAP32[$10+8>>2]=0|0;
  $182 = HEAP32[$122>>2]|0;
  $183 = (($182) + 24|0);
  $184 = HEAP32[$183>>2]|0;
  FUNCTION_TABLE_vii[$184 & 511]($11,$122);
  $185 = HEAP8[$__sym>>0]|0;
  $186 = $185 & 1;
  $187 = ($186<<24>>24)==(0);
  if ($187) {
   $191 = (($__sym) + 4|0);
   HEAP32[$191>>2] = 0;
   HEAP8[$__sym>>0] = 0;
  } else {
   $188 = (($__sym) + 8|0);
   $189 = HEAP32[$188>>2]|0;
   HEAP32[$189>>2] = 0;
   $190 = (($__sym) + 4|0);
   HEAP32[$190>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vi(479,($__sym|0));
  $192 = __THREW__; __THREW__ = 0;
  $193 = $192&1;
  if ($193) {
   $194 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
   $195 = tempRet0;
   ___clang_call_terminate($194);
   // unreachable;
  }
  ;HEAP32[$__sym+0>>2]=HEAP32[$11+0>>2]|0;HEAP32[$__sym+4>>2]=HEAP32[$11+4>>2]|0;HEAP32[$__sym+8>>2]=HEAP32[$11+8>>2]|0;
  ;HEAP32[$11+0>>2]=0|0;HEAP32[$11+4>>2]=0|0;HEAP32[$11+8>>2]=0|0;
  $196 = HEAP32[$122>>2]|0;
  $197 = (($196) + 36|0);
  $198 = HEAP32[$197>>2]|0;
  $199 = (FUNCTION_TABLE_ii[$198 & 511]($122)|0);
  $storemerge = $199;
  HEAP32[$__fd>>2] = $storemerge;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__111__money_putIwE8__formatEPwRS2_S3_jPKwS5_RKNS_5ctypeIwEEbRKNS_10money_base7patternEwwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNSE_IwNSF_IwEENSH_IwEEEESQ_i($__mb,$__mi,$__me,$__flags,$__db,$__de,$__ct,$__neg,$__pat,$__dp,$__ts,$__grp,$__sym,$__sn,$__fd) {
 $__mb = $__mb|0;
 $__mi = $__mi|0;
 $__me = $__me|0;
 $__flags = $__flags|0;
 $__db = $__db|0;
 $__de = $__de|0;
 $__ct = $__ct|0;
 $__neg = $__neg|0;
 $__pat = $__pat|0;
 $__dp = $__dp|0;
 $__ts = $__ts|0;
 $__grp = $__grp|0;
 $__sym = $__sym|0;
 $__sn = $__sn|0;
 $__fd = $__fd|0;
 var $$$0 = 0, $$0$lcssa$i$i = 0, $$0$lcssa$i$i22 = 0, $$01$i$i = 0, $$01$i$i19 = 0, $$012$i$i = 0, $$059 = 0, $$2 = 0, $$lcssa44 = 0, $$pn = 0, $$pre = 0, $$promoted4$i$i = 0, $$promoted4$i$i13 = 0, $$sum = 0, $$sum33 = 0, $$sum75 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0;
 var $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0;
 var $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0;
 var $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0;
 var $174 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $85$phi = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__d$0$lcssa = 0, $__d$034 = 0, $__d$1$lcssa7880 = 0, $__d$1$lcssa79 = 0, $__d$137 = 0, $__d$2 = 0, $__d$353 = 0, $__f$0$lcssa77 = 0;
 var $__f$038 = 0, $__f$145 = 0, $__gl$056 = 0, $__gl$056$ph = 0, $__gl$1 = 0, $__ig$055 = 0, $__ig$1 = 0, $__me$promoted = 0, $__ng$054 = 0, $__ng$1 = 0, $__p$058 = 0, $brmerge = 0, $exitcond = 0, $or$cond = 0, $scevgep = 0, $scevgep$i$i = 0, $scevgep$i$i14 = 0, $scevgep6$i$i = 0, $scevgep6$i$i20 = 0, $scevgep70 = 0;
 var $uglygep$i$i = 0, $uglygep$i$i16 = 0, $uglygep5$i$i = 0, $uglygep5$i$i17 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$__me>>2] = $__mb;
 $0 = (($__sn) + 4|0);
 $1 = (($__sn) + 8|0);
 $2 = $__flags & 512;
 $3 = ($2|0)==(0);
 $4 = (($__sym) + 4|0);
 $5 = (($__sym) + 8|0);
 $6 = ($__fd|0)>(0);
 $7 = (($__grp) + 1|0);
 $8 = (($__grp) + 8|0);
 $9 = (($__grp) + 4|0);
 $$059 = $__db;$__p$058 = 0;
 while(1) {
  $10 = (($__pat) + ($__p$058)|0);
  $11 = HEAP8[$10>>0]|0;
  $12 = $11 << 24 >> 24;
  switch ($12|0) {
  case 0:  {
   $13 = HEAP32[$__me>>2]|0;
   HEAP32[$__mi>>2] = $13;
   $$2 = $$059;
   break;
  }
  case 3:  {
   $21 = HEAP8[$__sn>>0]|0;
   $22 = $21 & 1;
   $23 = ($22<<24>>24)==(0);
   if ($23) {
    $25 = $21&255;
    $26 = $25 >>> 1;
    $28 = $26;
   } else {
    $24 = HEAP32[$0>>2]|0;
    $28 = $24;
   }
   $27 = ($28|0)==(0);
   if ($27) {
    $$2 = $$059;
   } else {
    if ($23) {
     $31 = $0;
    } else {
     $29 = HEAP32[$1>>2]|0;
     $31 = $29;
    }
    $30 = HEAP32[$31>>2]|0;
    $32 = HEAP32[$__me>>2]|0;
    $33 = (($32) + 4|0);
    HEAP32[$__me>>2] = $33;
    HEAP32[$32>>2] = $30;
    $$2 = $$059;
   }
   break;
  }
  case 1:  {
   $14 = HEAP32[$__me>>2]|0;
   HEAP32[$__mi>>2] = $14;
   $15 = HEAP32[$__ct>>2]|0;
   $16 = (($15) + 44|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = (FUNCTION_TABLE_iii[$17 & 511]($__ct,32)|0);
   $19 = HEAP32[$__me>>2]|0;
   $20 = (($19) + 4|0);
   HEAP32[$__me>>2] = $20;
   HEAP32[$19>>2] = $18;
   $$2 = $$059;
   break;
  }
  case 2:  {
   $34 = HEAP8[$__sym>>0]|0;
   $35 = $34 & 1;
   $36 = ($35<<24>>24)==(0);
   if ($36) {
    $38 = $34&255;
    $39 = $38 >>> 1;
    $41 = $39;
   } else {
    $37 = HEAP32[$4>>2]|0;
    $41 = $37;
   }
   $40 = ($41|0)==(0);
   $brmerge = $40 | $3;
   if ($brmerge) {
    $$2 = $$059;
   } else {
    if ($36) {
     $44 = $34&255;
     $45 = $44 >>> 1;
     $47 = $4;$48 = $45;
    } else {
     $42 = HEAP32[$5>>2]|0;
     $43 = HEAP32[$4>>2]|0;
     $47 = $42;$48 = $43;
    }
    $46 = (($47) + ($48<<2)|0);
    $49 = HEAP32[$__me>>2]|0;
    $50 = ($47|0)==($46|0);
    if ($50) {
     $$0$lcssa$i$i22 = $49;
    } else {
     $$promoted4$i$i13 = $47;
     $$sum33 = (($48) + -1)|0;
     $scevgep$i$i14 = (($47) + ($$sum33<<2)|0);
     $51 = (0 - ($$promoted4$i$i13))|0;
     $uglygep$i$i16 = (($scevgep$i$i14) + ($51)|0);
     $uglygep5$i$i17 = $uglygep$i$i16;
     $52 = $uglygep5$i$i17 >>> 2;
     $$01$i$i19 = $49;$54 = $47;
     while(1) {
      $53 = HEAP32[$54>>2]|0;
      HEAP32[$$01$i$i19>>2] = $53;
      $55 = (($54) + 4|0);
      $56 = ($55|0)==($46|0);
      if ($56) {
       break;
      }
      $57 = (($$01$i$i19) + 4|0);
      $$01$i$i19 = $57;$54 = $55;
     }
     $58 = (($52) + 1)|0;
     $scevgep6$i$i20 = (($49) + ($58<<2)|0);
     $$0$lcssa$i$i22 = $scevgep6$i$i20;
    }
    HEAP32[$__me>>2] = $$0$lcssa$i$i22;
    $$2 = $$059;
   }
   break;
  }
  case 4:  {
   $59 = HEAP32[$__me>>2]|0;
   $60 = (($$059) + 4|0);
   $$$0 = $__neg ? $60 : $$059;
   $61 = ($$$0>>>0)<($__de>>>0);
   L33: do {
    if ($61) {
     $__d$034 = $$$0;
     while(1) {
      $64 = HEAP32[$__d$034>>2]|0;
      $65 = HEAP32[$__ct>>2]|0;
      $66 = (($65) + 12|0);
      $67 = HEAP32[$66>>2]|0;
      $68 = (FUNCTION_TABLE_iiii[$67 & 511]($__ct,2048,$64)|0);
      $63 = (($__d$034) + 4|0);
      if (!($68)) {
       $__d$0$lcssa = $__d$034;
       break L33;
      }
      $62 = ($63>>>0)<($__de>>>0);
      if ($62) {
       $__d$034 = $63;
      } else {
       $__d$0$lcssa = $63;
       break;
      }
     }
    } else {
     $__d$0$lcssa = $$$0;
    }
   } while(0);
   if ($6) {
    $69 = ($__d$0$lcssa>>>0)>($$$0>>>0);
    if ($69) {
     $__me$promoted = HEAP32[$__me>>2]|0;
     $73 = $__me$promoted;$__d$137 = $__d$0$lcssa;$__f$038 = $__fd;
     while(1) {
      $70 = (($__d$137) + -4|0);
      $71 = HEAP32[$70>>2]|0;
      $72 = (($73) + 4|0);
      HEAP32[$73>>2] = $71;
      $74 = (($__f$038) + -1)|0;
      $75 = ($70>>>0)>($$$0>>>0);
      $76 = ($74|0)>(0);
      $or$cond = $75 & $76;
      if ($or$cond) {
       $73 = $72;$__d$137 = $70;$__f$038 = $74;
      } else {
       break;
      }
     }
     HEAP32[$__me>>2] = $72;
     if ($76) {
      $__d$1$lcssa79 = $70;$__f$0$lcssa77 = $74;
      label = 34;
     } else {
      $77 = (($73) + 8|0);
      HEAP32[$__me>>2] = $77;
      $$lcssa44 = $72;$__d$1$lcssa7880 = $70;
     }
    } else {
     $__d$1$lcssa79 = $__d$0$lcssa;$__f$0$lcssa77 = $__fd;
     label = 34;
    }
    if ((label|0) == 34) {
     label = 0;
     $78 = HEAP32[$__ct>>2]|0;
     $79 = (($78) + 44|0);
     $80 = HEAP32[$79>>2]|0;
     $81 = (FUNCTION_TABLE_iii[$80 & 511]($__ct,48)|0);
     $82 = ($__f$0$lcssa77|0)>(0);
     $83 = HEAP32[$__me>>2]|0;
     $84 = (($83) + 4|0);
     HEAP32[$__me>>2] = $84;
     if ($82) {
      $85 = $83;$89 = $84;$__f$145 = $__f$0$lcssa77;
      while(1) {
       HEAP32[$85>>2] = $81;
       $86 = (($__f$145) + -1)|0;
       $87 = ($86|0)>(0);
       $88 = (($89) + 4|0);
       if ($87) {
        $85$phi = $89;$89 = $88;$__f$145 = $86;$85 = $85$phi;
       } else {
        break;
       }
      }
      $$sum75 = (($__f$0$lcssa77) + 1)|0;
      $scevgep = (($83) + ($$sum75<<2)|0);
      $scevgep70 = (($83) + ($__f$0$lcssa77<<2)|0);
      HEAP32[$__me>>2] = $scevgep;
      $$lcssa44 = $scevgep70;$__d$1$lcssa7880 = $__d$1$lcssa79;
     } else {
      $$lcssa44 = $83;$__d$1$lcssa7880 = $__d$1$lcssa79;
     }
    }
    HEAP32[$$lcssa44>>2] = $__dp;
    $__d$2 = $__d$1$lcssa7880;
   } else {
    $__d$2 = $__d$0$lcssa;
   }
   $90 = ($__d$2|0)==($$$0|0);
   if ($90) {
    $91 = HEAP32[$__ct>>2]|0;
    $92 = (($91) + 44|0);
    $93 = HEAP32[$92>>2]|0;
    $94 = (FUNCTION_TABLE_iii[$93 & 511]($__ct,48)|0);
    $95 = HEAP32[$__me>>2]|0;
    $96 = (($95) + 4|0);
    HEAP32[$__me>>2] = $96;
    HEAP32[$95>>2] = $94;
    $138 = $96;
   } else {
    $97 = HEAP8[$__grp>>0]|0;
    $98 = $97 & 1;
    $99 = ($98<<24>>24)==(0);
    if ($99) {
     $101 = $97&255;
     $102 = $101 >>> 1;
     $104 = $102;
    } else {
     $100 = HEAP32[$9>>2]|0;
     $104 = $100;
    }
    $103 = ($104|0)==(0);
    if ($103) {
     $__gl$056$ph = -1;
    } else {
     if ($99) {
      $107 = $7;
     } else {
      $105 = HEAP32[$8>>2]|0;
      $107 = $105;
     }
     $106 = HEAP8[$107>>0]|0;
     $108 = $106 << 24 >> 24;
     $__gl$056$ph = $108;
    }
    $$pre = HEAP32[$__me>>2]|0;
    $111 = $$pre;$__d$353 = $__d$2;$__gl$056 = $__gl$056$ph;$__ig$055 = 0;$__ng$054 = 0;
    while(1) {
     $109 = ($__ng$054|0)==($__gl$056|0);
     if ($109) {
      $110 = (($111) + 4|0);
      HEAP32[$__me>>2] = $110;
      HEAP32[$111>>2] = $__ts;
      $112 = (($__ig$055) + 1)|0;
      $113 = HEAP8[$__grp>>0]|0;
      $114 = $113 & 1;
      $115 = ($114<<24>>24)==(0);
      if ($115) {
       $117 = $113&255;
       $118 = $117 >>> 1;
       $120 = $118;
      } else {
       $116 = HEAP32[$9>>2]|0;
       $120 = $116;
      }
      $119 = ($112>>>0)<($120>>>0);
      if ($119) {
       if ($115) {
        $123 = $7;
       } else {
        $121 = HEAP32[$8>>2]|0;
        $123 = $121;
       }
       $122 = (($123) + ($112)|0);
       $124 = HEAP8[$122>>0]|0;
       $125 = ($124<<24>>24)==(127);
       if ($125) {
        $134 = $110;$__gl$1 = -1;$__ig$1 = $112;$__ng$1 = 0;
       } else {
        if ($115) {
         $128 = $7;
        } else {
         $126 = HEAP32[$8>>2]|0;
         $128 = $126;
        }
        $127 = (($128) + ($112)|0);
        $129 = HEAP8[$127>>0]|0;
        $130 = $129 << 24 >> 24;
        $134 = $110;$__gl$1 = $130;$__ig$1 = $112;$__ng$1 = 0;
       }
      } else {
       $134 = $110;$__gl$1 = $__gl$056;$__ig$1 = $112;$__ng$1 = 0;
      }
     } else {
      $134 = $111;$__gl$1 = $__gl$056;$__ig$1 = $__ig$055;$__ng$1 = $__ng$054;
     }
     $131 = (($__d$353) + -4|0);
     $132 = HEAP32[$131>>2]|0;
     $133 = (($134) + 4|0);
     HEAP32[$__me>>2] = $133;
     HEAP32[$134>>2] = $132;
     $135 = (($__ng$1) + 1)|0;
     $136 = ($131|0)==($$$0|0);
     if ($136) {
      $138 = $133;
      break;
     } else {
      $111 = $133;$__d$353 = $131;$__gl$056 = $__gl$1;$__ig$055 = $__ig$1;$__ng$054 = $135;
     }
    }
   }
   $137 = ($59|0)==($138|0);
   if ($137) {
    $$2 = $$$0;
   } else {
    $139 = (($138) + -4|0);
    $140 = ($139>>>0)>($59>>>0);
    if ($140) {
     $$012$i$i = $59;$143 = $139;
     while(1) {
      $141 = HEAP32[$$012$i$i>>2]|0;
      $142 = HEAP32[$143>>2]|0;
      HEAP32[$$012$i$i>>2] = $142;
      HEAP32[$143>>2] = $141;
      $144 = (($$012$i$i) + 4|0);
      $145 = (($143) + -4|0);
      $146 = ($144>>>0)<($145>>>0);
      if ($146) {
       $$012$i$i = $144;$143 = $145;
      } else {
       $$2 = $$$0;
       break;
      }
     }
    } else {
     $$2 = $$$0;
    }
   }
   break;
  }
  default: {
   $$2 = $$059;
  }
  }
  $147 = (($__p$058) + 1)|0;
  $exitcond = ($147|0)==(4);
  if ($exitcond) {
   break;
  } else {
   $$059 = $$2;$__p$058 = $147;
  }
 }
 $148 = HEAP8[$__sn>>0]|0;
 $149 = $148 & 1;
 $150 = ($149<<24>>24)==(0);
 if ($150) {
  $152 = $148&255;
  $153 = $152 >>> 1;
  $155 = $153;
 } else {
  $151 = HEAP32[$0>>2]|0;
  $155 = $151;
 }
 $154 = ($155>>>0)>(1);
 if ($154) {
  if ($150) {
   $158 = $148&255;
   $159 = $158 >>> 1;
   $$pn = $0;$162 = $159;
  } else {
   $156 = HEAP32[$1>>2]|0;
   $157 = HEAP32[$0>>2]|0;
   $$pn = $156;$162 = $157;
  }
  $160 = (($$pn) + 4|0);
  $161 = (($$pn) + ($162<<2)|0);
  $163 = HEAP32[$__me>>2]|0;
  $164 = ($160|0)==($161|0);
  if ($164) {
   $$0$lcssa$i$i = $163;
  } else {
   $$promoted4$i$i = $160;
   $$sum = (($162) + -1)|0;
   $scevgep$i$i = (($$pn) + ($$sum<<2)|0);
   $165 = (0 - ($$promoted4$i$i))|0;
   $uglygep$i$i = (($scevgep$i$i) + ($165)|0);
   $uglygep5$i$i = $uglygep$i$i;
   $166 = $uglygep5$i$i >>> 2;
   $$01$i$i = $163;$168 = $160;
   while(1) {
    $167 = HEAP32[$168>>2]|0;
    HEAP32[$$01$i$i>>2] = $167;
    $169 = (($168) + 4|0);
    $170 = (($$01$i$i) + 4|0);
    $171 = ($169|0)==($161|0);
    if ($171) {
     break;
    } else {
     $$01$i$i = $170;$168 = $169;
    }
   }
   $172 = (($166) + 1)|0;
   $scevgep6$i$i = (($163) + ($172<<2)|0);
   $$0$lcssa$i$i = $scevgep6$i$i;
  }
  HEAP32[$__me>>2] = $$0$lcssa$i$i;
 }
 $173 = $__flags & 176;
 if ((($173|0) == 16)) {
  STACKTOP = sp;return;
 } else if ((($173|0) == 32)) {
  $174 = HEAP32[$__me>>2]|0;
  HEAP32[$__mi>>2] = $174;
  STACKTOP = sp;return;
 } else {
  HEAP32[$__mi>>2] = $__mb;
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwRKNS_12basic_stringIwS3_NS_9allocatorIwEEEE($agg$result,$this,$__s,$__intl,$__iob,$__fl,$__digits) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__intl = $__intl|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__digits = $__digits|0;
 var $$0 = 0, $$01 = 0, $$1 = 0, $$12 = 0, $$pn = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0;
 var $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0;
 var $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__dp = 0, $__fd = 0;
 var $__grp = 0, $__mb$0 = 0, $__mbuf = 0, $__me = 0, $__mi = 0, $__p$i$i$i$i = 0, $__pat = 0, $__sn = 0, $__sym = 0, $__ts = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 480|0;
 $__p$i$i$i$i = sp;
 $__pat = sp + 472|0;
 $__dp = sp + 468|0;
 $__ts = sp + 464|0;
 $__grp = sp + 452|0;
 $__sym = sp + 440|0;
 $__sn = sp + 428|0;
 $__fd = sp + 424|0;
 $__mbuf = sp + 24|0;
 $__mi = sp + 16|0;
 $__me = sp + 12|0;
 $0 = (($__iob) + 28|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 4|0);
 $3 = HEAP32[$2>>2]|0;HEAP32[$2>>2] = (($3+1)|0);
 $4 = HEAP32[6408>>2]|0;
 $5 = ($4|0)==(-1);
 if ($5) {
  label = 3;
 } else {
  HEAP32[$__p$i$i$i$i>>2] = 6408;
  $6 = (($__p$i$i$i$i) + 4|0);
  HEAP32[$6>>2] = (439);
  $7 = (($__p$i$i$i$i) + 8|0);
  HEAP32[$7>>2] = 0;
  __THREW__ = 0;
  invoke_vii(440,(6408|0),($__p$i$i$i$i|0));
  $8 = __THREW__; __THREW__ = 0;
  $9 = $8&1;
  if ($9) {
   label = 43;
  } else {
   label = 3;
  }
 }
 do {
  if ((label|0) == 3) {
   $10 = HEAP32[((6408 + 4|0))>>2]|0;
   $11 = (($10) + -1)|0;
   $12 = (($1) + 12|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = (($1) + 8|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = $13;
   $17 = $15;
   $18 = (($16) - ($17))|0;
   $19 = $18 >> 2;
   $20 = ($19>>>0)>($11>>>0);
   if ($20) {
    $21 = (($15) + ($11<<2)|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = ($22|0)==(0|0);
    if (!($23)) {
     $27 = HEAP8[$__digits>>0]|0;
     $28 = $27 & 1;
     $29 = ($28<<24>>24)==(0);
     if ($29) {
      $32 = $27&255;
      $33 = $32 >>> 1;
      $35 = $33;
     } else {
      $30 = (($__digits) + 4|0);
      $31 = HEAP32[$30>>2]|0;
      $35 = $31;
     }
     $34 = ($35|0)==(0);
     if ($34) {
      $48 = 0;
     } else {
      if ($29) {
       $38 = (($__digits) + 4|0);
       $40 = $38;
      } else {
       $36 = (($__digits) + 8|0);
       $37 = HEAP32[$36>>2]|0;
       $40 = $37;
      }
      $39 = HEAP32[$40>>2]|0;
      $41 = HEAP32[$22>>2]|0;
      $42 = (($41) + 44|0);
      $43 = HEAP32[$42>>2]|0;
      __THREW__ = 0;
      $44 = (invoke_iii($43|0,($22|0),45)|0);
      $45 = __THREW__; __THREW__ = 0;
      $46 = $45&1;
      if ($46) {
       label = 43;
       break;
      }
      $47 = ($39|0)==($44|0);
      $48 = $47;
     }
     HEAP32[$__pat>>2] = 0;
     ;HEAP32[$__grp+0>>2]=0|0;HEAP32[$__grp+4>>2]=0|0;HEAP32[$__grp+8>>2]=0|0;
     ;HEAP32[$__sym+0>>2]=0|0;HEAP32[$__sym+4>>2]=0|0;HEAP32[$__sym+8>>2]=0|0;
     ;HEAP32[$__sn+0>>2]=0|0;HEAP32[$__sn+4>>2]=0|0;HEAP32[$__sn+8>>2]=0|0;
     __THREW__ = 0;
     invoke_viiiiiiiiii(483,($__intl|0),($48|0),($1|0),($__pat|0),($__dp|0),($__ts|0),($__grp|0),($__sym|0),($__sn|0),($__fd|0));
     $49 = __THREW__; __THREW__ = 0;
     $50 = $49&1;
     do {
      if ($50) {
       $117 = ___cxa_find_matching_catch(-1,-1)|0;
       $118 = tempRet0;
       $$0 = $117;$$01 = $118;
      } else {
       $51 = HEAP8[$__digits>>0]|0;
       $52 = $51 & 1;
       $53 = ($52<<24>>24)==(0);
       if ($53) {
        $56 = $51&255;
        $57 = $56 >>> 1;
        $60 = $57;
       } else {
        $54 = (($__digits) + 4|0);
        $55 = HEAP32[$54>>2]|0;
        $60 = $55;
       }
       $58 = HEAP32[$__fd>>2]|0;
       $59 = ($60|0)>($58|0);
       if ($59) {
        if ($53) {
         $63 = $51&255;
         $64 = $63 >>> 1;
         $66 = $64;
        } else {
         $61 = (($__digits) + 4|0);
         $62 = HEAP32[$61>>2]|0;
         $66 = $62;
        }
        $65 = (($66) - ($58))|0;
        $67 = $65 << 1;
        $68 = HEAP8[$__sn>>0]|0;
        $69 = $68 & 1;
        $70 = ($69<<24>>24)==(0);
        if ($70) {
         $73 = $68&255;
         $74 = $73 >>> 1;
         $84 = $74;
        } else {
         $71 = (($__sn) + 4|0);
         $72 = HEAP32[$71>>2]|0;
         $84 = $72;
        }
        $75 = HEAP8[$__sym>>0]|0;
        $76 = $75 & 1;
        $77 = ($76<<24>>24)==(0);
        if ($77) {
         $80 = $75&255;
         $81 = $80 >>> 1;
         $86 = $81;
        } else {
         $78 = (($__sym) + 4|0);
         $79 = HEAP32[$78>>2]|0;
         $86 = $79;
        }
        $82 = $67 | 1;
        $83 = (($84) + ($82))|0;
        $85 = (($83) + ($86))|0;
        $$pn = $85;
       } else {
        $87 = HEAP8[$__sn>>0]|0;
        $88 = $87 & 1;
        $89 = ($88<<24>>24)==(0);
        if ($89) {
         $92 = $87&255;
         $93 = $92 >>> 1;
         $102 = $93;
        } else {
         $90 = (($__sn) + 4|0);
         $91 = HEAP32[$90>>2]|0;
         $102 = $91;
        }
        $94 = HEAP8[$__sym>>0]|0;
        $95 = $94 & 1;
        $96 = ($95<<24>>24)==(0);
        if ($96) {
         $99 = $94&255;
         $100 = $99 >>> 1;
         $104 = $100;
        } else {
         $97 = (($__sym) + 4|0);
         $98 = HEAP32[$97>>2]|0;
         $104 = $98;
        }
        $101 = (($102) + 2)|0;
        $103 = (($101) + ($104))|0;
        $$pn = $103;
       }
       $105 = (($$pn) + ($58))|0;
       $106 = ($105>>>0)>(100);
       if ($106) {
        $107 = $105 << 2;
        $108 = (_malloc($107)|0);
        $109 = ($108|0)==(0|0);
        if ($109) {
         $110 = (___cxa_allocate_exception(4)|0);
         HEAP32[$110>>2] = ((15656 + 8|0));
         __THREW__ = 0;
         invoke_viii(379,($110|0),(15712|0),(374|0));
         $111 = __THREW__; __THREW__ = 0;
         $112 = $111&1;
         if ($112) {
          $113 = ___cxa_find_matching_catch(-1,-1)|0;
          $114 = tempRet0;
          $$0 = $113;$$01 = $114;
          break;
         } else {
          // unreachable;
         }
        } else {
         $122 = $108;$__mb$0 = $108;
        }
       } else {
        $122 = 0;$__mb$0 = $__mbuf;
       }
       $123 = (($__iob) + 4|0);
       $124 = HEAP32[$123>>2]|0;
       if ($53) {
        $129 = (($__digits) + 4|0);
        $130 = $51&255;
        $131 = $130 >>> 1;
        $133 = $129;$134 = $131;
       } else {
        $125 = (($__digits) + 8|0);
        $126 = HEAP32[$125>>2]|0;
        $127 = (($__digits) + 4|0);
        $128 = HEAP32[$127>>2]|0;
        $133 = $126;$134 = $128;
       }
       $132 = (($133) + ($134<<2)|0);
       $135 = HEAP32[$__dp>>2]|0;
       $136 = HEAP32[$__ts>>2]|0;
       __THREW__ = 0;
       invoke_viiiiiiiiiiiiiii(484,($__mb$0|0),($__mi|0),($__me|0),($124|0),($133|0),($132|0),($22|0),($48|0),($__pat|0),($135|0),($136|0),($__grp|0),($__sym|0),($__sn|0),($58|0));
       $137 = __THREW__; __THREW__ = 0;
       $138 = $137&1;
       if (!($138)) {
        $139 = HEAP32[$__s>>2]|0;
        $140 = HEAP32[$__mi>>2]|0;
        $141 = HEAP32[$__me>>2]|0;
        __THREW__ = 0;
        invoke_viiiiiii(471,($agg$result|0),($139|0),($__mb$0|0),($140|0),($141|0),($__iob|0),($__fl|0));
        $142 = __THREW__; __THREW__ = 0;
        $143 = $142&1;
        if (!($143)) {
         $144 = ($122|0)==(0|0);
         if (!($144)) {
          _free($122);
         }
         $145 = HEAP8[$__sn>>0]|0;
         $146 = $145 & 1;
         $147 = ($146<<24>>24)==(0);
         if (!($147)) {
          $148 = (($__sn) + 8|0);
          $149 = HEAP32[$148>>2]|0;
          $150 = ($149|0)==(0|0);
          if (!($150)) {
           _free($149);
          }
         }
         $151 = HEAP8[$__sym>>0]|0;
         $152 = $151 & 1;
         $153 = ($152<<24>>24)==(0);
         do {
          if (!($153)) {
           $154 = (($__sym) + 8|0);
           $155 = HEAP32[$154>>2]|0;
           $156 = ($155|0)==(0|0);
           if ($156) {
            break;
           }
           _free($155);
          }
         } while(0);
         $157 = HEAP8[$__grp>>0]|0;
         $158 = $157 & 1;
         $159 = ($158<<24>>24)==(0);
         do {
          if (!($159)) {
           $160 = (($__grp) + 8|0);
           $161 = HEAP32[$160>>2]|0;
           $162 = ($161|0)==(0|0);
           if ($162) {
            break;
           }
           _free($161);
          }
         } while(0);
         $163 = (($1) + 4|0);
         $164 = HEAP32[$163>>2]|0;HEAP32[$163>>2] = (($164+-1)|0);
         $165 = ($164|0)==(0);
         if (!($165)) {
          STACKTOP = sp;return;
         }
         $166 = HEAP32[$1>>2]|0;
         $167 = (($166) + 8|0);
         $168 = HEAP32[$167>>2]|0;
         FUNCTION_TABLE_vi[$168 & 511]($1);
         STACKTOP = sp;return;
        }
       }
       $119 = ___cxa_find_matching_catch(-1,-1)|0;
       $120 = tempRet0;
       $121 = ($122|0)==(0|0);
       if ($121) {
        $$0 = $119;$$01 = $120;
       } else {
        _free($122);
        $$0 = $119;$$01 = $120;
       }
      }
     } while(0);
     $169 = HEAP8[$__sn>>0]|0;
     $170 = $169 & 1;
     $171 = ($170<<24>>24)==(0);
     if (!($171)) {
      $172 = (($__sn) + 8|0);
      $173 = HEAP32[$172>>2]|0;
      $174 = ($173|0)==(0|0);
      if (!($174)) {
       _free($173);
      }
     }
     $175 = HEAP8[$__sym>>0]|0;
     $176 = $175 & 1;
     $177 = ($176<<24>>24)==(0);
     if (!($177)) {
      $178 = (($__sym) + 8|0);
      $179 = HEAP32[$178>>2]|0;
      $180 = ($179|0)==(0|0);
      if (!($180)) {
       _free($179);
      }
     }
     $181 = HEAP8[$__grp>>0]|0;
     $182 = $181 & 1;
     $183 = ($182<<24>>24)==(0);
     if ($183) {
      $$1 = $$0;$$12 = $$01;
      break;
     }
     $184 = (($__grp) + 8|0);
     $185 = HEAP32[$184>>2]|0;
     $186 = ($185|0)==(0|0);
     if ($186) {
      $$1 = $$0;$$12 = $$01;
      break;
     }
     _free($185);
     $$1 = $$0;$$12 = $$01;
     break;
    }
   }
   $24 = (___cxa_allocate_exception(4)|0);
   HEAP32[$24>>2] = ((14256 + 8|0));
   __THREW__ = 0;
   invoke_viii(379,($24|0),(14336|0),(351|0));
   $25 = __THREW__; __THREW__ = 0;
   $26 = $25&1;
   if ($26) {
    label = 43;
   } else {
    // unreachable;
   }
  }
 } while(0);
 if ((label|0) == 43) {
  $115 = ___cxa_find_matching_catch(-1,-1)|0;
  $116 = tempRet0;
  $$1 = $115;$$12 = $116;
 }
 $187 = (($1) + 4|0);
 $188 = HEAP32[$187>>2]|0;HEAP32[$187>>2] = (($188+-1)|0);
 $189 = ($188|0)==(0);
 if (!($189)) {
  ___resumeException($$1|0);
  // unreachable;
 }
 $190 = HEAP32[$1>>2]|0;
 $191 = (($190) + 8|0);
 $192 = HEAP32[$191>>2]|0;
 FUNCTION_TABLE_vi[$192 & 511]($1);
 ___resumeException($$1|0);
 // unreachable;
}
function __ZNSt3__18messagesIcED0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($this|0)==(0|0);
 if (!($0)) {
  _free($this);
 }
 STACKTOP = sp;return;
}
function __ZNSt3__18messagesIcED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__18messagesIcE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE($this,$__nm,$0) {
 $this = $this|0;
 $__nm = $__nm|0;
 $0 = $0|0;
 var $$ = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP8[$__nm>>0]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  $6 = (($__nm) + 1|0);
  $7 = $6;
 } else {
  $4 = (($__nm) + 8|0);
  $5 = HEAP32[$4>>2]|0;
  $7 = $5;
 }
 $8 = (_catopen(($7|0),1)|0);
 $9 = $8;
 $not$ = ($8|0)!=((-1)|0);
 $10 = $not$&1;
 $$ = $9 >>> $10;
 STACKTOP = sp;return ($$|0);
}
function __ZNKSt3__18messagesIcE6do_getEiiiRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE($agg$result,$this,$__c,$__set,$__msgid,$__dflt) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__c = $__c|0;
 $__set = $__set|0;
 $__msgid = $__msgid|0;
 $__dflt = $__dflt|0;
 var $$ = 0, $$01 = 0, $$01$i = 0, $$01$i7 = 0, $$02 = 0, $$pn$i = 0, $$pn$i6 = 0, $$pre = 0, $$pre15 = 0, $$pre18 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $11 = 0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__cap$0$i = 0, $__cap$0$i2 = 0, $__ndflt = 0, $__p$0$i = 0;
 var $__p$0$i7 = 0, $__p$0$sum$pre$i = 0, $__p$0$sum$pre$i4 = 0, $__p$0$sum$pre$phi$i5ZZZ2D = 0, $__p$0$sum$pre$phi$iZZZ2D = 0, $__sz$0$i = 0, $__sz$0$i3 = 0, $exitcond$i = 0, $exitcond$i8 = 0, $lpad$phi$index = 0, $lpad$phi$index21 = 0, $phitmp = 0, $phitmp18 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $__ndflt = sp;
 ;HEAP32[$__ndflt+0>>2]=0|0;HEAP32[$__ndflt+4>>2]=0|0;HEAP32[$__ndflt+8>>2]=0|0;
 $0 = HEAP8[$__dflt>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $7 = (($__dflt) + 1|0);
  $8 = $0&255;
  $9 = $8 >>> 1;
  $11 = $7;$12 = $9;
 } else {
  $3 = (($__dflt) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = (($__dflt) + 4|0);
  $6 = HEAP32[$5>>2]|0;
  $11 = $4;$12 = $6;
 }
 $10 = (($11) + ($12)|0);
 $13 = ($11>>>0)<($10>>>0);
 do {
  if ($13) {
   $14 = (($__ndflt) + 4|0);
   $15 = (($__ndflt) + 1|0);
   $16 = (($__ndflt) + 8|0);
   $$01$i7 = $11;$23 = 0;
   while(1) {
    $21 = HEAP8[$$01$i7>>0]|0;
    $22 = $23 & 1;
    $24 = ($22<<24>>24)!=(0);
    if ($24) {
     $27 = HEAP32[$__ndflt>>2]|0;
     $28 = $27 & -2;
     $29 = (($28) + -1)|0;
     $30 = HEAP32[$14>>2]|0;
     $__cap$0$i = $29;$__sz$0$i = $30;
    } else {
     $25 = $23&255;
     $26 = $25 >>> 1;
     $__cap$0$i = 10;$__sz$0$i = $26;
    }
    $31 = ($__sz$0$i|0)==($__cap$0$i|0);
    if ($31) {
     __THREW__ = 0;
     invoke_viiiiii(476,($__ndflt|0),($__cap$0$i|0),1,($__cap$0$i|0),($__cap$0$i|0),0);
     $32 = __THREW__; __THREW__ = 0;
     $33 = $32&1;
     if ($33) {
      label = 19;
      break;
     }
     $34 = HEAP8[$__ndflt>>0]|0;
     $35 = $34 & 1;
     $36 = ($35<<24>>24)==(0);
     if ($36) {
      label = 14;
     } else {
      label = 15;
     }
    } else {
     if ($24) {
      label = 15;
     } else {
      label = 14;
     }
    }
    if ((label|0) == 14) {
     label = 0;
     $37 = $__sz$0$i << 1;
     $38 = (($37) + 2)|0;
     $39 = $38&255;
     HEAP8[$__ndflt>>0] = $39;
     $__p$0$sum$pre$i = (($__sz$0$i) + 1)|0;
     $$pn$i = $15;$__p$0$sum$pre$phi$iZZZ2D = $__p$0$sum$pre$i;
    }
    else if ((label|0) == 15) {
     label = 0;
     $40 = HEAP32[$16>>2]|0;
     $41 = (($__sz$0$i) + 1)|0;
     HEAP32[$14>>2] = $41;
     $$pn$i = $40;$__p$0$sum$pre$phi$iZZZ2D = $41;
    }
    $__p$0$i = (($$pn$i) + ($__sz$0$i)|0);
    HEAP8[$__p$0$i>>0] = $21;
    $42 = (($$pn$i) + ($__p$0$sum$pre$phi$iZZZ2D)|0);
    HEAP8[$42>>0] = 0;
    $43 = (($$01$i7) + 1|0);
    $exitcond$i8 = ($43|0)==($10|0);
    $$pre = HEAP8[$__ndflt>>0]|0;
    if ($exitcond$i8) {
     label = 17;
     break;
    } else {
     $$01$i7 = $43;$23 = $$pre;
    }
   }
   if ((label|0) == 17) {
    $phitmp = $$pre & 1;
    $phitmp18 = ($phitmp<<24>>24)==(0);
    $44 = ($__c|0)==(-1);
    $45 = $__c << 1;
    $46 = $45;
    $47 = $44 ? (-1) : $46;
    $48 = HEAP32[$16>>2]|0;
    $$ = $phitmp18 ? $15 : $48;
    $49 = $47;$50 = $$;
    label = 18;
    break;
   }
   else if ((label|0) == 19) {
    $54 = ___cxa_find_matching_catch(-1,-1)|0;
    $55 = tempRet0;
    $lpad$phi$index = $54;$lpad$phi$index21 = $55;
    label = 21;
    break;
   }
  } else {
   $17 = ($__c|0)==(-1);
   $18 = $__c << 1;
   $19 = $18;
   $20 = $17 ? (-1) : $19;
   $$pre18 = (($__ndflt) + 1|0);
   $49 = $20;$50 = $$pre18;
   label = 18;
  }
 } while(0);
 L25: do {
  if ((label|0) == 18) {
   __THREW__ = 0;
   $51 = (invoke_iiiii(485,($49|0),($__set|0),($__msgid|0),($50|0))|0);
   $52 = __THREW__; __THREW__ = 0;
   $53 = $52&1;
   if ($53) {
    $56 = ___cxa_find_matching_catch(-1,-1)|0;
    $57 = tempRet0;
    $lpad$phi$index = $56;$lpad$phi$index21 = $57;
    label = 21;
    break;
   }
   ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
   $58 = (_strlen(($51|0))|0);
   $59 = (($51) + ($58)|0);
   $60 = ($58|0)>(0);
   L30: do {
    if ($60) {
     $61 = (($agg$result) + 4|0);
     $62 = (($agg$result) + 1|0);
     $63 = (($agg$result) + 8|0);
     $$01$i = $51;$66 = 0;
     while(1) {
      $64 = HEAP8[$$01$i>>0]|0;
      $65 = $66 & 1;
      $67 = ($65<<24>>24)!=(0);
      if ($67) {
       $70 = HEAP32[$agg$result>>2]|0;
       $71 = $70 & -2;
       $72 = (($71) + -1)|0;
       $73 = HEAP32[$61>>2]|0;
       $__cap$0$i2 = $72;$__sz$0$i3 = $73;
      } else {
       $68 = $66&255;
       $69 = $68 >>> 1;
       $__cap$0$i2 = 10;$__sz$0$i3 = $69;
      }
      $74 = ($__sz$0$i3|0)==($__cap$0$i2|0);
      if ($74) {
       __THREW__ = 0;
       invoke_viiiiii(476,($agg$result|0),($__cap$0$i2|0),1,($__cap$0$i2|0),($__cap$0$i2|0),0);
       $75 = __THREW__; __THREW__ = 0;
       $76 = $75&1;
       if ($76) {
        break;
       }
       $77 = HEAP8[$agg$result>>0]|0;
       $78 = $77 & 1;
       $79 = ($78<<24>>24)==(0);
       if ($79) {
        label = 31;
       } else {
        label = 32;
       }
      } else {
       if ($67) {
        label = 32;
       } else {
        label = 31;
       }
      }
      if ((label|0) == 31) {
       label = 0;
       $80 = $__sz$0$i3 << 1;
       $81 = (($80) + 2)|0;
       $82 = $81&255;
       HEAP8[$agg$result>>0] = $82;
       $__p$0$sum$pre$i4 = (($__sz$0$i3) + 1)|0;
       $$pn$i6 = $62;$__p$0$sum$pre$phi$i5ZZZ2D = $__p$0$sum$pre$i4;
      }
      else if ((label|0) == 32) {
       label = 0;
       $83 = HEAP32[$63>>2]|0;
       $84 = (($__sz$0$i3) + 1)|0;
       HEAP32[$61>>2] = $84;
       $$pn$i6 = $83;$__p$0$sum$pre$phi$i5ZZZ2D = $84;
      }
      $__p$0$i7 = (($$pn$i6) + ($__sz$0$i3)|0);
      HEAP8[$__p$0$i7>>0] = $64;
      $85 = (($$pn$i6) + ($__p$0$sum$pre$phi$i5ZZZ2D)|0);
      HEAP8[$85>>0] = 0;
      $86 = (($$01$i) + 1|0);
      $exitcond$i = ($86|0)==($59|0);
      if ($exitcond$i) {
       break L30;
      }
      $$pre15 = HEAP8[$agg$result>>0]|0;
      $$01$i = $86;$66 = $$pre15;
     }
     $87 = ___cxa_find_matching_catch(-1,-1)|0;
     $88 = tempRet0;
     $89 = HEAP8[$agg$result>>0]|0;
     $90 = $89 & 1;
     $91 = ($90<<24>>24)==(0);
     if ($91) {
      $$01 = $87;$$02 = $88;
      break L25;
     }
     $92 = HEAP32[$63>>2]|0;
     $93 = ($92|0)==(0|0);
     if ($93) {
      $$01 = $87;$$02 = $88;
      break L25;
     }
     _free($92);
     $$01 = $87;$$02 = $88;
     break L25;
    }
   } while(0);
   $94 = HEAP8[$__ndflt>>0]|0;
   $95 = $94 & 1;
   $96 = ($95<<24>>24)==(0);
   if ($96) {
    STACKTOP = sp;return;
   }
   $97 = (($__ndflt) + 8|0);
   $98 = HEAP32[$97>>2]|0;
   $99 = ($98|0)==(0|0);
   if ($99) {
    STACKTOP = sp;return;
   }
   _free($98);
   STACKTOP = sp;return;
  }
 } while(0);
 if ((label|0) == 21) {
  $$01 = $lpad$phi$index;$$02 = $lpad$phi$index21;
 }
 $100 = HEAP8[$__ndflt>>0]|0;
 $101 = $100 & 1;
 $102 = ($101<<24>>24)==(0);
 if ($102) {
  ___resumeException($$01|0);
  // unreachable;
 }
 $103 = (($__ndflt) + 8|0);
 $104 = HEAP32[$103>>2]|0;
 $105 = ($104|0)==(0|0);
 if ($105) {
  ___resumeException($$01|0);
  // unreachable;
 }
 _free($104);
 ___resumeException($$01|0);
 // unreachable;
}
function __ZNKSt3__18messagesIcE8do_closeEi($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__c|0)==(-1);
 $1 = $__c << 1;
 $2 = $1;
 $3 = $0 ? (-1) : $2;
 (_catclose(($3|0))|0);
 STACKTOP = sp;return;
}
function __ZNSt3__18messagesIwED0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($this|0)==(0|0);
 if (!($0)) {
  _free($this);
 }
 STACKTOP = sp;return;
}
function __ZNSt3__18messagesIwED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__18messagesIwE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE($this,$__nm,$0) {
 $this = $this|0;
 $__nm = $__nm|0;
 $0 = $0|0;
 var $$ = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP8[$__nm>>0]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  $6 = (($__nm) + 1|0);
  $7 = $6;
 } else {
  $4 = (($__nm) + 8|0);
  $5 = HEAP32[$4>>2]|0;
  $7 = $5;
 }
 $8 = (_catopen(($7|0),1)|0);
 $9 = $8;
 $not$ = ($8|0)!=((-1)|0);
 $10 = $not$&1;
 $$ = $9 >>> $10;
 STACKTOP = sp;return ($$|0);
}
function __ZNKSt3__18messagesIwE6do_getEiiiRKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEE($agg$result,$this,$__c,$__set,$__msgid,$__dflt) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__c = $__c|0;
 $__set = $__set|0;
 $__msgid = $__msgid|0;
 $__dflt = $__dflt|0;
 var $$04$i = 0, $$04$i16 = 0, $$1 = 0, $$13 = 0, $$pn$i = 0, $$pn$i6 = 0, $$pre = 0, $$pre$i = 0, $$pre$i21 = 0, $$pre12 = 0, $$pre44 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0;
 var $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__bn$i = 0, $__bn$i14 = 0, $__buf$i = 0, $__buf$i13 = 0;
 var $__cap$0$i = 0, $__cap$0$i2 = 0, $__mb$i = 0, $__mb$i11 = 0, $__ndflt = 0, $__nn$i = 0, $__p$0$i = 0, $__p$0$i7 = 0, $__p$0$sum$pre$i = 0, $__p$0$sum$pre$i4 = 0, $__p$0$sum$pre$phi$i5ZZZ2D = 0, $__p$0$sum$pre$phi$iZZZ2D = 0, $__p$03$i = 0, $__p$03$i20 = 0, $__sz$0$i = 0, $__sz$0$i3 = 0, $__wn$i = 0, $lpad$phi$index = 0, $lpad$phi$index24 = 0, $lpad$phi38$index = 0;
 var $lpad$phi38$index17 = 0, $or$cond2$i = 0, $or$cond2$i17 = 0, $phitmp = 0, $phitmp14 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0;
 $__mb$i11 = sp + 8|0;
 $__buf$i13 = sp + 192|0;
 $__bn$i14 = sp + 188|0;
 $__wn$i = sp + 184|0;
 $__mb$i = sp;
 $__buf$i = sp + 56|0;
 $__bn$i = sp + 48|0;
 $__nn$i = sp + 44|0;
 $__ndflt = sp + 32|0;
 $0 = sp + 24|0;
 $1 = sp + 16|0;
 ;HEAP32[$__ndflt+0>>2]=0|0;HEAP32[$__ndflt+4>>2]=0|0;HEAP32[$__ndflt+8>>2]=0|0;
 $2 = (($0) + 4|0);
 HEAP32[$2>>2] = 0;
 HEAP32[$0>>2] = ((8024 + 8|0));
 $3 = HEAP8[$__dflt>>0]|0;
 $4 = $3 & 1;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  $10 = (($__dflt) + 4|0);
  $11 = $3&255;
  $12 = $11 >>> 1;
  $14 = $10;$15 = $12;
 } else {
  $6 = (($__dflt) + 8|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = (($__dflt) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  $14 = $7;$15 = $9;
 }
 $13 = (($14) + ($15<<2)|0);
 $16 = $__mb$i11;
 $17 = $16;
 HEAP32[$17>>2] = 0;
 $18 = (($16) + 4)|0;
 $19 = $18;
 HEAP32[$19>>2] = 0;
 $20 = ($14>>>0)<($13>>>0);
 L5: do {
  if ($20) {
   $21 = (($__buf$i13) + 32|0);
   $22 = (($__ndflt) + 4|0);
   $23 = (($__ndflt) + 1|0);
   $24 = (($__ndflt) + 8|0);
   $$04$i16 = $14;$26 = ((8024 + 8|0));
   L7: while(1) {
    HEAP32[$__wn$i>>2] = $$04$i16;
    $25 = (($26) + 12|0);
    $27 = HEAP32[$25>>2]|0;
    __THREW__ = 0;
    $28 = (invoke_iiiiiiiii($27|0,($0|0),($__mb$i11|0),($$04$i16|0),($13|0),($__wn$i|0),($__buf$i13|0),($21|0),($__bn$i14|0))|0);
    $29 = __THREW__; __THREW__ = 0;
    $30 = $29&1;
    if ($30) {
     label = 31;
     break;
    }
    $31 = ($28|0)==(2);
    $32 = HEAP32[$__wn$i>>2]|0;
    $33 = ($32|0)==($$04$i16|0);
    $or$cond2$i17 = $31 | $33;
    if ($or$cond2$i17) {
     label = 9;
     break;
    }
    $34 = HEAP32[$__bn$i14>>2]|0;
    $35 = ($__buf$i13>>>0)<($34>>>0);
    if ($35) {
     $__p$03$i20 = $__buf$i13;
     while(1) {
      $38 = HEAP8[$__p$03$i20>>0]|0;
      $39 = HEAP8[$__ndflt>>0]|0;
      $40 = $39 & 1;
      $41 = ($40<<24>>24)!=(0);
      if ($41) {
       $44 = HEAP32[$__ndflt>>2]|0;
       $45 = $44 & -2;
       $46 = (($45) + -1)|0;
       $47 = HEAP32[$22>>2]|0;
       $__cap$0$i = $46;$__sz$0$i = $47;
      } else {
       $42 = $39&255;
       $43 = $42 >>> 1;
       $__cap$0$i = 10;$__sz$0$i = $43;
      }
      $48 = ($__sz$0$i|0)==($__cap$0$i|0);
      if ($48) {
       __THREW__ = 0;
       invoke_viiiiii(476,($__ndflt|0),($__cap$0$i|0),1,($__cap$0$i|0),($__cap$0$i|0),0);
       $49 = __THREW__; __THREW__ = 0;
       $50 = $49&1;
       if ($50) {
        label = 30;
        break L7;
       }
       $51 = HEAP8[$__ndflt>>0]|0;
       $52 = $51 & 1;
       $53 = ($52<<24>>24)==(0);
       if ($53) {
        label = 18;
       } else {
        label = 19;
       }
      } else {
       if ($41) {
        label = 19;
       } else {
        label = 18;
       }
      }
      if ((label|0) == 18) {
       label = 0;
       $54 = $__sz$0$i << 1;
       $55 = (($54) + 2)|0;
       $56 = $55&255;
       HEAP8[$__ndflt>>0] = $56;
       $__p$0$sum$pre$i = (($__sz$0$i) + 1)|0;
       $$pn$i = $23;$__p$0$sum$pre$phi$iZZZ2D = $__p$0$sum$pre$i;
      }
      else if ((label|0) == 19) {
       label = 0;
       $57 = HEAP32[$24>>2]|0;
       $58 = (($__sz$0$i) + 1)|0;
       HEAP32[$22>>2] = $58;
       $$pn$i = $57;$__p$0$sum$pre$phi$iZZZ2D = $58;
      }
      $__p$0$i = (($$pn$i) + ($__sz$0$i)|0);
      HEAP8[$__p$0$i>>0] = $38;
      $59 = (($$pn$i) + ($__p$0$sum$pre$phi$iZZZ2D)|0);
      HEAP8[$59>>0] = 0;
      $60 = (($__p$03$i20) + 1|0);
      $61 = HEAP32[$__bn$i14>>2]|0;
      $62 = ($60>>>0)<($61>>>0);
      if ($62) {
       $__p$03$i20 = $60;
      } else {
       break;
      }
     }
     $$pre$i21 = HEAP32[$__wn$i>>2]|0;
     $64 = $$pre$i21;
    } else {
     $64 = $32;
    }
    $63 = ($64>>>0)<($13>>>0);
    if (!($63)) {
     label = 24;
     break;
    }
    $$pre = HEAP32[$0>>2]|0;
    $$04$i16 = $64;$26 = $$pre;
   }
   do {
    if ((label|0) == 9) {
     __THREW__ = 0;
     invoke_vi(441,(7256|0));
     $36 = __THREW__; __THREW__ = 0;
     $37 = $36&1;
     if ($37) {
      $82 = ___cxa_find_matching_catch(-1,-1)|0;
      $83 = tempRet0;
      $lpad$phi38$index = $82;$lpad$phi38$index17 = $83;
      break;
     } else {
      // unreachable;
     }
    }
    else if ((label|0) == 24) {
     $$pre12 = HEAP8[$__ndflt>>0]|0;
     $phitmp = $$pre12 & 1;
     $phitmp14 = ($phitmp<<24>>24)==(0);
     $164 = $phitmp14;
     label = 25;
     break L5;
    }
    else if ((label|0) == 30) {
     $78 = ___cxa_find_matching_catch(-1,-1)|0;
     $79 = tempRet0;
     $lpad$phi38$index = $78;$lpad$phi38$index17 = $79;
    }
    else if ((label|0) == 31) {
     $80 = ___cxa_find_matching_catch(-1,-1)|0;
     $81 = tempRet0;
     $lpad$phi38$index = $80;$lpad$phi38$index17 = $81;
    }
   } while(0);
   $$1 = $lpad$phi38$index;$$13 = $lpad$phi38$index17;
  } else {
   $164 = 1;
   label = 25;
  }
 } while(0);
 L38: do {
  if ((label|0) == 25) {
   $65 = ($__c|0)==(-1);
   $66 = $__c << 1;
   $67 = $66;
   $68 = $65 ? (-1) : $67;
   if ($164) {
    $71 = (($__ndflt) + 1|0);
    $72 = $71;
   } else {
    $69 = (($__ndflt) + 8|0);
    $70 = HEAP32[$69>>2]|0;
    $72 = $70;
   }
   __THREW__ = 0;
   $73 = (invoke_iiiii(485,($68|0),($__set|0),($__msgid|0),($72|0))|0);
   $74 = __THREW__; __THREW__ = 0;
   $75 = $74&1;
   if ($75) {
    $76 = ___cxa_find_matching_catch(-1,-1)|0;
    $77 = tempRet0;
    $$1 = $76;$$13 = $77;
    break;
   }
   ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
   $84 = (($1) + 4|0);
   HEAP32[$84>>2] = 0;
   HEAP32[$1>>2] = ((8128 + 8|0));
   $85 = (_strlen(($73|0))|0);
   $86 = (($73) + ($85)|0);
   $87 = $__mb$i;
   $88 = $87;
   HEAP32[$88>>2] = 0;
   $89 = (($87) + 4)|0;
   $90 = $89;
   HEAP32[$90>>2] = 0;
   $91 = ($85|0)>(0);
   L47: do {
    if ($91) {
     $92 = $86;
     $93 = (($__buf$i) + 128|0);
     $94 = (($agg$result) + 4|0);
     $95 = (($agg$result) + 8|0);
     $$04$i = $73;$97 = ((8128 + 8|0));
     L49: while(1) {
      HEAP32[$__nn$i>>2] = $$04$i;
      $96 = (($97) + 16|0);
      $98 = HEAP32[$96>>2]|0;
      $99 = $$04$i;
      $100 = (($92) - ($99))|0;
      $101 = ($100|0)>(32);
      $102 = (($$04$i) + 32|0);
      $103 = $101 ? $102 : $86;
      __THREW__ = 0;
      $104 = (invoke_iiiiiiiii($98|0,($1|0),($__mb$i|0),($$04$i|0),($103|0),($__nn$i|0),($__buf$i|0),($93|0),($__bn$i|0))|0);
      $105 = __THREW__; __THREW__ = 0;
      $106 = $105&1;
      if ($106) {
       label = 59;
       break;
      }
      $107 = ($104|0)==(2);
      $108 = HEAP32[$__nn$i>>2]|0;
      $109 = ($108|0)==($$04$i|0);
      $or$cond2$i = $107 | $109;
      if ($or$cond2$i) {
       label = 39;
       break;
      }
      $110 = HEAP32[$__bn$i>>2]|0;
      $111 = ($__buf$i>>>0)<($110>>>0);
      if ($111) {
       $__p$03$i = $__buf$i;
       while(1) {
        $114 = HEAP32[$__p$03$i>>2]|0;
        $115 = HEAP8[$agg$result>>0]|0;
        $116 = $115 & 1;
        $117 = ($116<<24>>24)!=(0);
        if ($117) {
         $120 = HEAP32[$agg$result>>2]|0;
         $121 = $120 & -2;
         $122 = (($121) + -1)|0;
         $123 = HEAP32[$94>>2]|0;
         $__cap$0$i2 = $122;$__sz$0$i3 = $123;
        } else {
         $118 = $115&255;
         $119 = $118 >>> 1;
         $__cap$0$i2 = 1;$__sz$0$i3 = $119;
        }
        $124 = ($__sz$0$i3|0)==($__cap$0$i2|0);
        if ($124) {
         __THREW__ = 0;
         invoke_viiiiiii(480,($agg$result|0),($__cap$0$i2|0),1,($__cap$0$i2|0),($__cap$0$i2|0),0,0);
         $125 = __THREW__; __THREW__ = 0;
         $126 = $125&1;
         if ($126) {
          label = 58;
          break L49;
         }
         $127 = HEAP8[$agg$result>>0]|0;
         $128 = $127 & 1;
         $129 = ($128<<24>>24)==(0);
         if ($129) {
          label = 48;
         } else {
          label = 49;
         }
        } else {
         if ($117) {
          label = 49;
         } else {
          label = 48;
         }
        }
        if ((label|0) == 48) {
         label = 0;
         $130 = $__sz$0$i3 << 1;
         $131 = (($130) + 2)|0;
         $132 = $131&255;
         HEAP8[$agg$result>>0] = $132;
         $__p$0$sum$pre$i4 = (($__sz$0$i3) + 1)|0;
         $$pn$i6 = $94;$__p$0$sum$pre$phi$i5ZZZ2D = $__p$0$sum$pre$i4;
        }
        else if ((label|0) == 49) {
         label = 0;
         $133 = HEAP32[$95>>2]|0;
         $134 = (($__sz$0$i3) + 1)|0;
         HEAP32[$94>>2] = $134;
         $$pn$i6 = $133;$__p$0$sum$pre$phi$i5ZZZ2D = $134;
        }
        $__p$0$i7 = (($$pn$i6) + ($__sz$0$i3<<2)|0);
        HEAP32[$__p$0$i7>>2] = $114;
        $135 = (($$pn$i6) + ($__p$0$sum$pre$phi$i5ZZZ2D<<2)|0);
        HEAP32[$135>>2] = 0;
        $136 = (($__p$03$i) + 4|0);
        $137 = HEAP32[$__bn$i>>2]|0;
        $138 = ($136>>>0)<($137>>>0);
        if ($138) {
         $__p$03$i = $136;
        } else {
         break;
        }
       }
       $$pre$i = HEAP32[$__nn$i>>2]|0;
       $140 = $$pre$i;
      } else {
       $140 = $108;
      }
      $139 = ($140>>>0)<($86>>>0);
      if (!($139)) {
       break L47;
      }
      $$pre44 = HEAP32[$1>>2]|0;
      $$04$i = $140;$97 = $$pre44;
     }
     do {
      if ((label|0) == 39) {
       __THREW__ = 0;
       invoke_vi(441,(7256|0));
       $112 = __THREW__; __THREW__ = 0;
       $113 = $112&1;
       if ($113) {
        $151 = ___cxa_find_matching_catch(-1,-1)|0;
        $152 = tempRet0;
        $lpad$phi$index = $151;$lpad$phi$index24 = $152;
        break;
       } else {
        // unreachable;
       }
      }
      else if ((label|0) == 58) {
       $147 = ___cxa_find_matching_catch(-1,-1)|0;
       $148 = tempRet0;
       $lpad$phi$index = $147;$lpad$phi$index24 = $148;
      }
      else if ((label|0) == 59) {
       $149 = ___cxa_find_matching_catch(-1,-1)|0;
       $150 = tempRet0;
       $lpad$phi$index = $149;$lpad$phi$index24 = $150;
      }
     } while(0);
     $153 = HEAP8[$agg$result>>0]|0;
     $154 = $153 & 1;
     $155 = ($154<<24>>24)==(0);
     if ($155) {
      $$1 = $lpad$phi$index;$$13 = $lpad$phi$index24;
      break L38;
     }
     $156 = HEAP32[$95>>2]|0;
     $157 = ($156|0)==(0|0);
     if ($157) {
      $$1 = $lpad$phi$index;$$13 = $lpad$phi$index24;
      break L38;
     }
     _free($156);
     $$1 = $lpad$phi$index;$$13 = $lpad$phi$index24;
     break L38;
    }
   } while(0);
   $141 = HEAP8[$__ndflt>>0]|0;
   $142 = $141 & 1;
   $143 = ($142<<24>>24)==(0);
   if ($143) {
    STACKTOP = sp;return;
   }
   $144 = (($__ndflt) + 8|0);
   $145 = HEAP32[$144>>2]|0;
   $146 = ($145|0)==(0|0);
   if ($146) {
    STACKTOP = sp;return;
   }
   _free($145);
   STACKTOP = sp;return;
  }
 } while(0);
 $158 = HEAP8[$__ndflt>>0]|0;
 $159 = $158 & 1;
 $160 = ($159<<24>>24)==(0);
 if ($160) {
  ___resumeException($$1|0);
  // unreachable;
 }
 $161 = (($__ndflt) + 8|0);
 $162 = HEAP32[$161>>2]|0;
 $163 = ($162|0)==(0|0);
 if ($163) {
  ___resumeException($$1|0);
  // unreachable;
 }
 _free($162);
 ___resumeException($$1|0);
 // unreachable;
}
function __ZNKSt3__18messagesIwE8do_closeEi($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__c|0)==(-1);
 $1 = $__c << 1;
 $2 = $1;
 $3 = $0 ? (-1) : $2;
 (_catclose(($3|0))|0);
 STACKTOP = sp;return;
}
function __ZNSt3__17codecvtIwc11__mbstate_tED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((6496 + 8|0));
 $0 = (($this) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP8[6328>>0]|0;
 $3 = ($2<<24>>24)==(0);
 do {
  if ($3) {
   $4 = (___cxa_guard_acquire((6328|0))|0);
   $5 = ($4|0)==(0);
   if (!($5)) {
    __THREW__ = 0;
    $6 = (invoke_iiii(461,2147483647,(6336|0),(0|0))|0);
    $7 = __THREW__; __THREW__ = 0;
    $8 = $7&1;
    if (!($8)) {
     HEAP32[6320>>2] = $6;
     ___cxa_guard_release((6328|0));
     break;
    }
    $9 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
    $10 = tempRet0;
    ___cxa_guard_abort((6328|0));
    __ZSt9terminatev();
    // unreachable;
   }
  }
 } while(0);
 $11 = HEAP32[6320>>2]|0;
 $12 = ($1|0)==($11|0);
 if ($12) {
  STACKTOP = sp;return;
 }
 $13 = HEAP32[$0>>2]|0;
 __THREW__ = 0;
 invoke_vi(472,($13|0));
 $14 = __THREW__; __THREW__ = 0;
 $15 = $14&1;
 if (!($15)) {
  STACKTOP = sp;return;
 }
 $16 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
 $17 = tempRet0;
 __ZSt9terminatev();
 // unreachable;
}
function __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$id) {
 $this = $this|0;
 $f = $f|0;
 $id = $id|0;
 var $$0$i$i = 0, $$0$i2$i = 0, $$0$i569$i = 0, $$0$i57$i = 0, $$pre = 0, $$pre1$i$i = 0, $$pre2 = 0, $$size$i$i = 0, $$sum$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $__new_last2$i$i$i = 0, $eh$lpad$body$i$i$index14Z2D = 0, $eh$lpad$body$i$i$indexZ2D = 0, $eh$lpad$body$index25Z2D = 0, $eh$lpad$body$indexZ2D = 0, $eh$lpad$body8$i$index9Z2D = 0, $eh$lpad$body8$i$indexZ2D = 0, $lpad$phi$i$i$index = 0, $lpad$phi$i$i$index19 = 0, $lpad$phi$i6$i$index = 0, $lpad$phi$i6$i$index4 = 0, $or$cond$i$i$i$i$i = 0, $scevgep$i$i$i = 0, $scevgep4$i$i$i = 0, $uglygep$i$i$i = 0, $uglygep3$i$i$i = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 4|0);
 $1 = HEAP32[$0>>2]|0;HEAP32[$0>>2] = (($1+1)|0);
 $2 = (($this) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($this) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $3;
 $7 = $5;
 $8 = (($6) - ($7))|0;
 $9 = $8 >> 2;
 $10 = ($9>>>0)>($id>>>0);
 do {
  if ($10) {
   $123 = $5;
  } else {
   $11 = (($id) + 1)|0;
   $12 = ($9>>>0)<($11>>>0);
   if (!($12)) {
    $108 = ($9>>>0)>($11>>>0);
    if (!($108)) {
     $123 = $5;
     break;
    }
    $109 = (($5) + ($11<<2)|0);
    $110 = ($3|0)==($109|0);
    if ($110) {
     $123 = $5;
     break;
    }
    $__new_last2$i$i$i = $109;
    $scevgep$i$i$i = (($3) + -4|0);
    $111 = (0 - ($__new_last2$i$i$i))|0;
    $uglygep$i$i$i = (($scevgep$i$i$i) + ($111)|0);
    $uglygep3$i$i$i = $uglygep$i$i$i;
    $112 = $uglygep3$i$i$i >>> 2;
    $113 = $112 ^ -1;
    $scevgep4$i$i$i = (($3) + ($113<<2)|0);
    HEAP32[$2>>2] = $scevgep4$i$i$i;
    $123 = $5;
    break;
   }
   $13 = (($11) - ($9))|0;
   $14 = (($this) + 16|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = $15;
   $17 = (($16) - ($6))|0;
   $18 = $17 >> 2;
   $19 = ($18>>>0)<($13>>>0);
   L8: do {
    if ($19) {
     $26 = (($this) + 24|0);
     $27 = ($11>>>0)>(1073741823);
     L10: do {
      if ($27) {
       $28 = (___cxa_allocate_exception(8)|0);
       HEAP32[$28>>2] = ((3272 + 8|0));
       while(1) {
        $29 = (_malloc(19)|0);
        $30 = ($29|0)==(0|0);
        if (!($30)) {
         label = 19;
         break;
        }
        $31 = HEAP32[15648>>2]|0;HEAP32[15648>>2] = (($31+0)|0);
        $32 = ($31|0)==(0);
        if ($32) {
         label = 17;
         break;
        }
        $33 = $31;
        __THREW__ = 0;
        invoke_v($33|0);
        $34 = __THREW__; __THREW__ = 0;
        $35 = $34&1;
        if ($35) {
         label = 12;
         break;
        }
       }
       do {
        if ((label|0) == 12) {
         $36 = ___cxa_find_matching_catch(-1,-1,15712|0)|0;
         $37 = tempRet0;
         $lpad$phi$i6$i$index = $36;$lpad$phi$i6$i$index4 = $37;
        }
        else if ((label|0) == 17) {
         $43 = (___cxa_allocate_exception(4)|0);
         HEAP32[$43>>2] = ((15656 + 8|0));
         __THREW__ = 0;
         invoke_viii(379,($43|0),(15712|0),(374|0));
         $44 = __THREW__; __THREW__ = 0;
         $45 = $44&1;
         if ($45) {
          $38 = ___cxa_find_matching_catch(-1,-1,15712|0)|0;
          $39 = tempRet0;
          $lpad$phi$i6$i$index = $38;$lpad$phi$i6$i$index4 = $39;
          break;
         } else {
          // unreachable;
         }
        }
        else if ((label|0) == 19) {
         $46 = (($28) + 4|0);
         $47 = (($29) + 4|0);
         HEAP32[$47>>2] = 6;
         HEAP32[$29>>2] = 6;
         $48 = (($29) + 12|0);
         HEAP32[$46>>2] = $48;
         $49 = (($29) + 8|0);
         HEAP32[$49>>2] = 0;
         ;HEAP8[$48+0>>0]=HEAP8[6312+0>>0]|0;HEAP8[$48+1>>0]=HEAP8[6312+1>>0]|0;HEAP8[$48+2>>0]=HEAP8[6312+2>>0]|0;HEAP8[$48+3>>0]=HEAP8[6312+3>>0]|0;HEAP8[$48+4>>0]=HEAP8[6312+4>>0]|0;HEAP8[$48+5>>0]=HEAP8[6312+5>>0]|0;HEAP8[$48+6>>0]=HEAP8[6312+6>>0]|0;
         HEAP32[$28>>2] = ((3352 + 8|0));
         __THREW__ = 0;
         invoke_viii(379,($28|0),(3400|0),(68|0));
         $50 = __THREW__; __THREW__ = 0;
         $51 = $50&1;
         if ($51) {
          label = 55;
          break L10;
         }
         // unreachable;
        }
       } while(0);
       $40 = ($lpad$phi$i6$i$index4|0)<(0);
       do {
        if ($40) {
         __THREW__ = 0;
         invoke_vi(380,($lpad$phi$i6$i$index|0));
         $41 = __THREW__; __THREW__ = 0;
         $42 = $41&1;
         if ($42) {
          $52 = ___cxa_find_matching_catch(-1,-1,15712|0)|0;
          $53 = tempRet0;
          $eh$lpad$body8$i$index9Z2D = $53;$eh$lpad$body8$i$indexZ2D = $52;
          break;
         } else {
          // unreachable;
         }
        } else {
         $eh$lpad$body8$i$index9Z2D = $lpad$phi$i6$i$index4;$eh$lpad$body8$i$indexZ2D = $lpad$phi$i6$i$index;
        }
       } while(0);
       $54 = ($eh$lpad$body8$i$index9Z2D|0)<(0);
       do {
        if ($54) {
         __THREW__ = 0;
         invoke_vi(380,($eh$lpad$body8$i$indexZ2D|0));
         $55 = __THREW__; __THREW__ = 0;
         $56 = $55&1;
         if ($56) {
          $57 = ___cxa_find_matching_catch(-1,-1)|0;
          $58 = tempRet0;
          $eh$lpad$body$i$i$index14Z2D = $58;$eh$lpad$body$i$i$indexZ2D = $57;
          break;
         } else {
          // unreachable;
         }
        } else {
         $eh$lpad$body$i$i$index14Z2D = $eh$lpad$body8$i$index9Z2D;$eh$lpad$body$i$i$indexZ2D = $eh$lpad$body8$i$indexZ2D;
        }
       } while(0);
       __ZNSt9exceptionD2Ev(($28|0));
       ___cxa_free_exception(($28|0));
       $eh$lpad$body$index25Z2D = $eh$lpad$body$i$i$index14Z2D;$eh$lpad$body$indexZ2D = $eh$lpad$body$i$i$indexZ2D;
      } else {
       $59 = (($16) - ($7))|0;
       $60 = $59 >> 2;
       $61 = ($60>>>0)<(536870911);
       if ($61) {
        $62 = $59 >> 1;
        $63 = ($62>>>0)<($11>>>0);
        $64 = $63 ? $11 : $62;
        $65 = ($64|0)==(0);
        if ($65) {
         $$0$i57$i = 0;$90 = 0;
        } else {
         $66 = (($this) + 136|0);
         $67 = HEAP8[$66>>0]|0;
         $68 = ($67<<24>>24)==(0);
         $69 = ($64>>>0)<(29);
         $or$cond$i$i$i$i$i = $68 & $69;
         if ($or$cond$i$i$i$i$i) {
          HEAP8[$66>>0] = 1;
          $$0$i57$i = $64;$90 = $26;
         } else {
          $$0$i569$i = $64;
          label = 31;
         }
        }
       } else {
        $$0$i569$i = 1073741823;
        label = 31;
       }
       L42: do {
        if ((label|0) == 31) {
         $70 = $$0$i569$i << 2;
         $71 = ($70|0)==(0);
         $$size$i$i = $71 ? 1 : $70;
         while(1) {
          $72 = (_malloc($$size$i$i)|0);
          $73 = ($72|0)==(0|0);
          if (!($73)) {
           label = 42;
           break;
          }
          $74 = HEAP32[15648>>2]|0;HEAP32[15648>>2] = (($74+0)|0);
          $75 = ($74|0)==(0);
          if ($75) {
           label = 40;
           break;
          }
          $76 = $74;
          __THREW__ = 0;
          invoke_v($76|0);
          $77 = __THREW__; __THREW__ = 0;
          $78 = $77&1;
          if ($78) {
           label = 35;
           break;
          }
         }
         do {
          if ((label|0) == 35) {
           $79 = ___cxa_find_matching_catch(-1,-1,15712|0)|0;
           $80 = tempRet0;
           $lpad$phi$i$i$index = $79;$lpad$phi$i$i$index19 = $80;
          }
          else if ((label|0) == 40) {
           $86 = (___cxa_allocate_exception(4)|0);
           HEAP32[$86>>2] = ((15656 + 8|0));
           __THREW__ = 0;
           invoke_viii(379,($86|0),(15712|0),(374|0));
           $87 = __THREW__; __THREW__ = 0;
           $88 = $87&1;
           if ($88) {
            $81 = ___cxa_find_matching_catch(-1,-1,15712|0)|0;
            $82 = tempRet0;
            $lpad$phi$i$i$index = $81;$lpad$phi$i$i$index19 = $82;
            break;
           } else {
            // unreachable;
           }
          }
          else if ((label|0) == 42) {
           $$0$i57$i = $$0$i569$i;$90 = $72;
           break L42;
          }
         } while(0);
         $83 = ($lpad$phi$i$i$index19|0)<(0);
         if (!($83)) {
          $eh$lpad$body$index25Z2D = $lpad$phi$i$i$index19;$eh$lpad$body$indexZ2D = $lpad$phi$i$i$index;
          break L10;
         }
         __THREW__ = 0;
         invoke_vi(380,($lpad$phi$i$i$index|0));
         $84 = __THREW__; __THREW__ = 0;
         $85 = $84&1;
         if ($85) {
          label = 55;
          break L10;
         }
         // unreachable;
        }
       } while(0);
       $89 = (($90) + ($9<<2)|0);
       $$0$i2$i = $13;$92 = $89;
       while(1) {
        $91 = ($92|0)==(0|0);
        if ($91) {
         $94 = 0;
        } else {
         HEAP32[$92>>2] = 0;
         $94 = $92;
        }
        $93 = (($94) + 4|0);
        $95 = (($$0$i2$i) + -1)|0;
        $96 = ($95|0)==(0);
        if ($96) {
         break;
        } else {
         $$0$i2$i = $95;$92 = $93;
        }
       }
       $97 = (($90) + ($$0$i57$i<<2)|0);
       $98 = HEAP32[$4>>2]|0;
       $99 = HEAP32[$2>>2]|0;
       $100 = $99;
       $101 = $98;
       $102 = (($100) - ($101))|0;
       $103 = $102 >> 2;
       $$sum$i = (($9) - ($103))|0;
       $104 = (($90) + ($$sum$i<<2)|0);
       _memcpy(($104|0),($98|0),($102|0))|0;
       HEAP32[$4>>2] = $104;
       HEAP32[$2>>2] = $93;
       HEAP32[$14>>2] = $97;
       $105 = ($98|0)==(0|0);
       if ($105) {
        break L8;
       }
       $106 = ($26|0)==($98|0);
       if ($106) {
        $107 = (($this) + 136|0);
        HEAP8[$107>>0] = 0;
        break L8;
       } else {
        _free($98);
        break L8;
       }
      }
     } while(0);
     if ((label|0) == 55) {
      $114 = ___cxa_find_matching_catch(-1,-1)|0;
      $115 = tempRet0;
      $eh$lpad$body$index25Z2D = $115;$eh$lpad$body$indexZ2D = $114;
     }
     $116 = ($f|0)==(0|0);
     if ($116) {
      ___resumeException($eh$lpad$body$indexZ2D|0);
      // unreachable;
     }
     $117 = HEAP32[$0>>2]|0;HEAP32[$0>>2] = (($117+-1)|0);
     $118 = ($117|0)==(0);
     if (!($118)) {
      ___resumeException($eh$lpad$body$indexZ2D|0);
      // unreachable;
     }
     $119 = HEAP32[$f>>2]|0;
     $120 = (($119) + 8|0);
     $121 = HEAP32[$120>>2]|0;
     FUNCTION_TABLE_vi[$121 & 511]($f);
     ___resumeException($eh$lpad$body$indexZ2D|0);
     // unreachable;
    } else {
     $$0$i$i = $13;$21 = $3;
     while(1) {
      $20 = ($21|0)==(0|0);
      if ($20) {
       $23 = 0;
      } else {
       HEAP32[$21>>2] = 0;
       $$pre1$i$i = HEAP32[$2>>2]|0;
       $23 = $$pre1$i$i;
      }
      $22 = (($23) + 4|0);
      HEAP32[$2>>2] = $22;
      $24 = (($$0$i$i) + -1)|0;
      $25 = ($24|0)==(0);
      if ($25) {
       break;
      } else {
       $$0$i$i = $24;$21 = $22;
      }
     }
    }
   } while(0);
   $$pre2 = HEAP32[$4>>2]|0;
   $123 = $$pre2;
  }
 } while(0);
 $122 = (($123) + ($id<<2)|0);
 $124 = HEAP32[$122>>2]|0;
 $125 = ($124|0)==(0|0);
 if ($125) {
  $133 = $123;
  $132 = (($133) + ($id<<2)|0);
  HEAP32[$132>>2] = $f;
  STACKTOP = sp;return;
 }
 $126 = (($124) + 4|0);
 $127 = HEAP32[$126>>2]|0;HEAP32[$126>>2] = (($127+-1)|0);
 $128 = ($127|0)==(0);
 if ($128) {
  $129 = HEAP32[$124>>2]|0;
  $130 = (($129) + 8|0);
  $131 = HEAP32[$130>>2]|0;
  FUNCTION_TABLE_vi[$131 & 511]($124);
 }
 $$pre = HEAP32[$4>>2]|0;
 $133 = $$pre;
 $132 = (($133) + ($id<<2)|0);
 HEAP32[$132>>2] = $f;
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5__impD0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__16locale5__impD2Ev($this);
 $0 = ($this|0)==(0|0);
 if (!($0)) {
  _free($this);
 }
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5__impD2Ev($this) {
 $this = $this|0;
 var $$pre = 0, $$pre1 = 0, $$pre4 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__new_last2$i$i$i$i$i = 0, $i$02 = 0, $scevgep$i$i$i$i$i = 0, $scevgep4$i$i$i$i$i = 0, $uglygep$i$i$i$i$i = 0, $uglygep3$i$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((6344 + 8|0));
 $0 = (($this) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($this) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($1|0)==($3|0);
 if ($4) {
  $40 = $1;
 } else {
  $41 = $1;$6 = $3;$i$02 = 0;
  while(1) {
   $5 = (($6) + ($i$02<<2)|0);
   $7 = HEAP32[$5>>2]|0;
   $8 = ($7|0)==(0|0);
   if ($8) {
    $17 = $41;$19 = $6;
   } else {
    $9 = (($7) + 4|0);
    $10 = HEAP32[$9>>2]|0;HEAP32[$9>>2] = (($10+-1)|0);
    $11 = ($10|0)==(0);
    if ($11) {
     $12 = HEAP32[$7>>2]|0;
     $13 = (($12) + 8|0);
     $14 = HEAP32[$13>>2]|0;
     FUNCTION_TABLE_vi[$14 & 511]($7);
    }
    $$pre = HEAP32[$0>>2]|0;
    $$pre4 = HEAP32[$2>>2]|0;
    $17 = $$pre;$19 = $$pre4;
   }
   $15 = (($i$02) + 1)|0;
   $16 = $17;
   $18 = $19;
   $20 = (($16) - ($18))|0;
   $21 = $20 >> 2;
   $22 = ($15>>>0)<($21>>>0);
   if ($22) {
    $41 = $17;$6 = $19;$i$02 = $15;
   } else {
    $40 = $19;
    break;
   }
  }
 }
 $23 = (($this) + 144|0);
 $24 = HEAP8[$23>>0]|0;
 $25 = $24 & 1;
 $26 = ($25<<24>>24)==(0);
 if ($26) {
  $31 = $40;
 } else {
  $27 = (($this) + 152|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = ($28|0)==(0|0);
  if ($29) {
   $31 = $40;
  } else {
   _free($28);
   $$pre1 = HEAP32[$2>>2]|0;
   $31 = $$pre1;
  }
 }
 $30 = ($31|0)==(0|0);
 if ($30) {
  STACKTOP = sp;return;
 }
 $32 = HEAP32[$0>>2]|0;
 $33 = ($32|0)==($31|0);
 if (!($33)) {
  $__new_last2$i$i$i$i$i = $31;
  $scevgep$i$i$i$i$i = (($32) + -4|0);
  $34 = (0 - ($__new_last2$i$i$i$i$i))|0;
  $uglygep$i$i$i$i$i = (($scevgep$i$i$i$i$i) + ($34)|0);
  $uglygep3$i$i$i$i$i = $uglygep$i$i$i$i$i;
  $35 = $uglygep3$i$i$i$i$i >>> 2;
  $36 = $35 ^ -1;
  $scevgep4$i$i$i$i$i = (($32) + ($36<<2)|0);
  HEAP32[$0>>2] = $scevgep4$i$i$i$i$i;
 }
 $37 = (($this) + 24|0);
 $38 = ($37|0)==($31|0);
 if ($38) {
  $39 = (($this) + 136|0);
  HEAP8[$39>>0] = 0;
  STACKTOP = sp;return;
 } else {
  _free($31);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__16localeC2Ev($this) {
 $this = $this|0;
 var $$0$i$i$i$i = 0, $$pre1$i$i$i$i = 0, $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
 var $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0;
 var $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
 var $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0;
 var $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0;
 var $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0;
 var $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0;
 var $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0;
 var $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0;
 var $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0;
 var $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0;
 var $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__new_last2$i$i$i$i$i = 0, $__new_last2$i$i$i$i$i$i$i = 0, $__p$i$i$i$i$i = 0, $__p$i$i$i102$i$i = 0;
 var $__p$i$i$i109$i$i = 0, $__p$i$i$i113$i$i = 0, $__p$i$i$i12$i$i = 0, $__p$i$i$i16$i$i = 0, $__p$i$i$i20$i$i = 0, $__p$i$i$i24$i$i = 0, $__p$i$i$i28$i$i = 0, $__p$i$i$i32$i$i = 0, $__p$i$i$i36$i$i = 0, $__p$i$i$i4$i$i = 0, $__p$i$i$i40$i$i = 0, $__p$i$i$i44$i$i = 0, $__p$i$i$i48$i$i = 0, $__p$i$i$i52$i$i = 0, $__p$i$i$i56$i$i = 0, $__p$i$i$i60$i$i = 0, $__p$i$i$i64$i$i = 0, $__p$i$i$i68$i$i = 0, $__p$i$i$i72$i$i = 0, $__p$i$i$i76$i$i = 0;
 var $__p$i$i$i8$i$i = 0, $__p$i$i$i80$i$i = 0, $__p$i$i$i84$i$i = 0, $__p$i$i$i88$i$i = 0, $__p$i$i$i92$i$i = 0, $__p$i$i$i96$i$i = 0, $eh$lpad$body$i$i$indexZ2D = 0, $scevgep$i$i$i$i$i$i$i = 0, $scevgep4$i$i$i$i$i = 0, $scevgep4$i$i$i$i$i$i$i = 0, $uglygep$i$i$i$i$i = 0, $uglygep$i$i$i$i$i$i$i = 0, $uglygep3$i$i$i$i$i = 0, $uglygep3$i$i$i$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 448|0;
 $__p$i$i$i113$i$i = sp + 432|0;
 $__p$i$i$i109$i$i = sp + 416|0;
 $__p$i$i$i102$i$i = sp + 400|0;
 $__p$i$i$i96$i$i = sp + 384|0;
 $__p$i$i$i92$i$i = sp + 368|0;
 $__p$i$i$i88$i$i = sp + 352|0;
 $__p$i$i$i84$i$i = sp + 336|0;
 $__p$i$i$i80$i$i = sp + 320|0;
 $__p$i$i$i76$i$i = sp + 304|0;
 $__p$i$i$i72$i$i = sp + 288|0;
 $__p$i$i$i68$i$i = sp + 272|0;
 $__p$i$i$i64$i$i = sp + 256|0;
 $__p$i$i$i60$i$i = sp + 240|0;
 $__p$i$i$i56$i$i = sp + 224|0;
 $__p$i$i$i52$i$i = sp + 208|0;
 $__p$i$i$i48$i$i = sp + 192|0;
 $__p$i$i$i44$i$i = sp + 176|0;
 $__p$i$i$i40$i$i = sp + 160|0;
 $__p$i$i$i36$i$i = sp + 144|0;
 $__p$i$i$i32$i$i = sp + 128|0;
 $__p$i$i$i28$i$i = sp + 112|0;
 $__p$i$i$i24$i$i = sp + 96|0;
 $__p$i$i$i20$i$i = sp + 80|0;
 $__p$i$i$i16$i$i = sp + 64|0;
 $__p$i$i$i12$i$i = sp + 48|0;
 $__p$i$i$i8$i$i = sp + 32|0;
 $__p$i$i$i4$i$i = sp + 16|0;
 $__p$i$i$i$i$i = sp;
 $0 = HEAP8[6392>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if (!($1)) {
  $350 = HEAP32[6384>>2]|0;
  HEAP32[$this>>2] = $350;
  $351 = (($350) + 4|0);
  $352 = HEAP32[$351>>2]|0;HEAP32[$351>>2] = (($352+1)|0);
  STACKTOP = sp;return;
 }
 $2 = (___cxa_guard_acquire((6392|0))|0);
 $3 = ($2|0)==(0);
 if ($3) {
  $350 = HEAP32[6384>>2]|0;
  HEAP32[$this>>2] = $350;
  $351 = (($350) + 4|0);
  $352 = HEAP32[$351>>2]|0;HEAP32[$351>>2] = (($352+1)|0);
  STACKTOP = sp;return;
 }
 $4 = HEAP8[6376>>0]|0;
 $5 = ($4<<24>>24)==(0);
 L7: do {
  if ($5) {
   $6 = (___cxa_guard_acquire((6376|0))|0);
   $7 = ($6|0)==(0);
   if (!($7)) {
    HEAP32[((10720 + 4|0))>>2] = 0;
    HEAP32[10720>>2] = ((6344 + 8|0));
    HEAP8[((10720 + 136|0))>>0] = 1;
    HEAP32[((10720 + 12|0))>>2] = ((10720 + 24|0));
    HEAP32[((10720 + 8|0))>>2] = ((10720 + 24|0));
    HEAP32[((10720 + 16|0))>>2] = ((10720 + 136|0));
    $$0$i$i$i$i = 28;$8 = ((10720 + 24|0));
    while(1) {
     HEAP32[$8>>2] = 0;
     $$pre1$i$i$i$i = HEAP32[((10720 + 12|0))>>2]|0;
     $9 = (($$pre1$i$i$i$i) + 4|0);
     HEAP32[((10720 + 12|0))>>2] = $9;
     $10 = (($$0$i$i$i$i) + -1)|0;
     $11 = ($10|0)==(0);
     if ($11) {
      break;
     } else {
      $$0$i$i$i$i = $10;$8 = $9;
     }
    }
    HEAP8[((10720 + 144|0))>>0] = 2;
    HEAP8[((10720 + 145|0))>>0] = 67;
    HEAP8[((10720 + 146|0))>>0] = 0;
    $12 = HEAP32[((10720 + 8|0))>>2]|0;
    $13 = ($9|0)==($12|0);
    if (!($13)) {
     $__new_last2$i$i$i$i$i = $12;
     $14 = (0 - ($__new_last2$i$i$i$i$i))|0;
     $uglygep$i$i$i$i$i = (($$pre1$i$i$i$i) + ($14)|0);
     $uglygep3$i$i$i$i$i = $uglygep$i$i$i$i$i;
     $15 = $uglygep3$i$i$i$i$i >>> 2;
     $$sum = (0 - ($15))|0;
     $scevgep4$i$i$i$i$i = (($$pre1$i$i$i$i) + ($$sum<<2)|0);
     HEAP32[((10720 + 12|0))>>2] = $scevgep4$i$i$i$i$i;
    }
    HEAP32[((11184 + 4|0))>>2] = 0;
    HEAP32[11184>>2] = ((4824 + 8|0));
    $16 = HEAP32[4856>>2]|0;
    $17 = ($16|0)==(-1);
    if ($17) {
     label = 11;
    } else {
     HEAP32[$__p$i$i$i4$i$i>>2] = 4856;
     $18 = (($__p$i$i$i4$i$i) + 4|0);
     HEAP32[$18>>2] = (439);
     $19 = (($__p$i$i$i4$i$i) + 8|0);
     HEAP32[$19>>2] = 0;
     __THREW__ = 0;
     invoke_vii(440,(4856|0),($__p$i$i$i4$i$i|0));
     $20 = __THREW__; __THREW__ = 0;
     $21 = $20&1;
     if ($21) {
      label = 110;
     } else {
      label = 11;
     }
    }
    L18: do {
     if ((label|0) == 11) {
      $22 = HEAP32[((4856 + 4|0))>>2]|0;
      $23 = (($22) + -1)|0;
      __THREW__ = 0;
      invoke_viii(486,(10720|0),(11184|0),($23|0));
      $24 = __THREW__; __THREW__ = 0;
      $25 = $24&1;
      if ($25) {
       label = 110;
      } else {
       HEAP32[((11176 + 4|0))>>2] = 0;
       HEAP32[11176>>2] = ((4864 + 8|0));
       $26 = HEAP32[4896>>2]|0;
       $27 = ($26|0)==(-1);
       if (!($27)) {
        HEAP32[$__p$i$i$i8$i$i>>2] = 4896;
        $28 = (($__p$i$i$i8$i$i) + 4|0);
        HEAP32[$28>>2] = (439);
        $29 = (($__p$i$i$i8$i$i) + 8|0);
        HEAP32[$29>>2] = 0;
        __THREW__ = 0;
        invoke_vii(440,(4896|0),($__p$i$i$i8$i$i|0));
        $30 = __THREW__; __THREW__ = 0;
        $31 = $30&1;
        if ($31) {
         label = 110;
         break;
        }
       }
       $32 = HEAP32[((4896 + 4|0))>>2]|0;
       $33 = (($32) + -1)|0;
       __THREW__ = 0;
       invoke_viii(486,(10720|0),(11176|0),($33|0));
       $34 = __THREW__; __THREW__ = 0;
       $35 = $34&1;
       if ($35) {
        label = 110;
       } else {
        HEAP32[((11160 + 4|0))>>2] = 0;
        HEAP32[11160>>2] = ((6424 + 8|0));
        HEAP32[((11160 + 8|0))>>2] = 0;
        HEAP8[((11160 + 12|0))>>0] = 0;
        __THREW__ = 0;
        $36 = (invoke_i(487)|0);
        $37 = __THREW__; __THREW__ = 0;
        $38 = $37&1;
        if ($38) {
         $39 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
         $40 = tempRet0;
         ___clang_call_terminate($39);
         // unreachable;
        }
        $41 = HEAP32[$36>>2]|0;
        HEAP32[((11160 + 8|0))>>2] = $41;
        $42 = HEAP32[6416>>2]|0;
        $43 = ($42|0)==(-1);
        if (!($43)) {
         HEAP32[$__p$i$i$i12$i$i>>2] = 6416;
         $44 = (($__p$i$i$i12$i$i) + 4|0);
         HEAP32[$44>>2] = (439);
         $45 = (($__p$i$i$i12$i$i) + 8|0);
         HEAP32[$45>>2] = 0;
         __THREW__ = 0;
         invoke_vii(440,(6416|0),($__p$i$i$i12$i$i|0));
         $46 = __THREW__; __THREW__ = 0;
         $47 = $46&1;
         if ($47) {
          label = 110;
          break;
         }
        }
        $48 = HEAP32[((6416 + 4|0))>>2]|0;
        $49 = (($48) + -1)|0;
        __THREW__ = 0;
        invoke_viii(486,(10720|0),(11160|0),($49|0));
        $50 = __THREW__; __THREW__ = 0;
        $51 = $50&1;
        if ($51) {
         label = 110;
        } else {
         HEAP32[((11152 + 4|0))>>2] = 0;
         HEAP32[11152>>2] = ((7344 + 8|0));
         $52 = HEAP32[6408>>2]|0;
         $53 = ($52|0)==(-1);
         if (!($53)) {
          HEAP32[$__p$i$i$i16$i$i>>2] = 6408;
          $54 = (($__p$i$i$i16$i$i) + 4|0);
          HEAP32[$54>>2] = (439);
          $55 = (($__p$i$i$i16$i$i) + 8|0);
          HEAP32[$55>>2] = 0;
          __THREW__ = 0;
          invoke_vii(440,(6408|0),($__p$i$i$i16$i$i|0));
          $56 = __THREW__; __THREW__ = 0;
          $57 = $56&1;
          if ($57) {
           label = 110;
           break;
          }
         }
         $58 = HEAP32[((6408 + 4|0))>>2]|0;
         $59 = (($58) + -1)|0;
         __THREW__ = 0;
         invoke_viii(486,(10720|0),(11152|0),($59|0));
         $60 = __THREW__; __THREW__ = 0;
         $61 = $60&1;
         if ($61) {
          label = 110;
         } else {
          HEAP32[((11144 + 4|0))>>2] = 0;
          HEAP32[11144>>2] = ((7560 + 8|0));
          $62 = HEAP32[6480>>2]|0;
          $63 = ($62|0)==(-1);
          if (!($63)) {
           HEAP32[$__p$i$i$i20$i$i>>2] = 6480;
           $64 = (($__p$i$i$i20$i$i) + 4|0);
           HEAP32[$64>>2] = (439);
           $65 = (($__p$i$i$i20$i$i) + 8|0);
           HEAP32[$65>>2] = 0;
           __THREW__ = 0;
           invoke_vii(440,(6480|0),($__p$i$i$i20$i$i|0));
           $66 = __THREW__; __THREW__ = 0;
           $67 = $66&1;
           if ($67) {
            label = 110;
            break;
           }
          }
          $68 = HEAP32[((6480 + 4|0))>>2]|0;
          $69 = (($68) + -1)|0;
          __THREW__ = 0;
          invoke_viii(486,(10720|0),(11144|0),($69|0));
          $70 = __THREW__; __THREW__ = 0;
          $71 = $70&1;
          if ($71) {
           label = 110;
          } else {
           HEAP32[((11128 + 4|0))>>2] = 0;
           HEAP32[11128>>2] = ((6496 + 8|0));
           $72 = HEAP8[6328>>0]|0;
           $73 = ($72<<24>>24)==(0);
           do {
            if ($73) {
             $74 = (___cxa_guard_acquire((6328|0))|0);
             $75 = ($74|0)==(0);
             if ($75) {
              break;
             }
             __THREW__ = 0;
             $76 = (invoke_iiii(461,2147483647,(6336|0),(0|0))|0);
             $77 = __THREW__; __THREW__ = 0;
             $78 = $77&1;
             if ($78) {
              $79 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
              $80 = tempRet0;
              ___cxa_guard_abort((6328|0));
              $eh$lpad$body$i$i$indexZ2D = $79;
              break L18;
             } else {
              HEAP32[6320>>2] = $76;
              ___cxa_guard_release((6328|0));
              break;
             }
            }
           } while(0);
           $81 = HEAP32[6320>>2]|0;
           HEAP32[((11128 + 8|0))>>2] = $81;
           $82 = HEAP32[6488>>2]|0;
           $83 = ($82|0)==(-1);
           if (!($83)) {
            HEAP32[$__p$i$i$i24$i$i>>2] = 6488;
            $84 = (($__p$i$i$i24$i$i) + 4|0);
            HEAP32[$84>>2] = (439);
            $85 = (($__p$i$i$i24$i$i) + 8|0);
            HEAP32[$85>>2] = 0;
            __THREW__ = 0;
            invoke_vii(440,(6488|0),($__p$i$i$i24$i$i|0));
            $86 = __THREW__; __THREW__ = 0;
            $87 = $86&1;
            if ($87) {
             label = 110;
             break;
            }
           }
           $88 = HEAP32[((6488 + 4|0))>>2]|0;
           $89 = (($88) + -1)|0;
           __THREW__ = 0;
           invoke_viii(486,(10720|0),(11128|0),($89|0));
           $90 = __THREW__; __THREW__ = 0;
           $91 = $90&1;
           if ($91) {
            label = 110;
            break;
           }
           HEAP32[((11120 + 4|0))>>2] = 0;
           HEAP32[11120>>2] = ((7784 + 8|0));
           $92 = HEAP32[6544>>2]|0;
           $93 = ($92|0)==(-1);
           if (!($93)) {
            HEAP32[$__p$i$i$i28$i$i>>2] = 6544;
            $94 = (($__p$i$i$i28$i$i) + 4|0);
            HEAP32[$94>>2] = (439);
            $95 = (($__p$i$i$i28$i$i) + 8|0);
            HEAP32[$95>>2] = 0;
            __THREW__ = 0;
            invoke_vii(440,(6544|0),($__p$i$i$i28$i$i|0));
            $96 = __THREW__; __THREW__ = 0;
            $97 = $96&1;
            if ($97) {
             label = 110;
             break;
            }
           }
           $98 = HEAP32[((6544 + 4|0))>>2]|0;
           $99 = (($98) + -1)|0;
           __THREW__ = 0;
           invoke_viii(486,(10720|0),(11120|0),($99|0));
           $100 = __THREW__; __THREW__ = 0;
           $101 = $100&1;
           if ($101) {
            label = 110;
            break;
           }
           HEAP32[((11112 + 4|0))>>2] = 0;
           HEAP32[11112>>2] = ((7904 + 8|0));
           $102 = HEAP32[6552>>2]|0;
           $103 = ($102|0)==(-1);
           if (!($103)) {
            HEAP32[$__p$i$i$i32$i$i>>2] = 6552;
            $104 = (($__p$i$i$i32$i$i) + 4|0);
            HEAP32[$104>>2] = (439);
            $105 = (($__p$i$i$i32$i$i) + 8|0);
            HEAP32[$105>>2] = 0;
            __THREW__ = 0;
            invoke_vii(440,(6552|0),($__p$i$i$i32$i$i|0));
            $106 = __THREW__; __THREW__ = 0;
            $107 = $106&1;
            if ($107) {
             label = 110;
             break;
            }
           }
           $108 = HEAP32[((6552 + 4|0))>>2]|0;
           $109 = (($108) + -1)|0;
           __THREW__ = 0;
           invoke_viii(486,(10720|0),(11112|0),($109|0));
           $110 = __THREW__; __THREW__ = 0;
           $111 = $110&1;
           if ($111) {
            label = 110;
            break;
           }
           HEAP32[((11088 + 4|0))>>2] = 0;
           HEAP32[11088>>2] = ((6576 + 8|0));
           HEAP8[((11088 + 8|0))>>0] = 46;
           HEAP8[((11088 + 9|0))>>0] = 44;
           ;HEAP32[((11088 + 12|0))+0>>2]=0|0;HEAP32[((11088 + 12|0))+4>>2]=0|0;HEAP32[((11088 + 12|0))+8>>2]=0|0;
           $112 = HEAP32[6560>>2]|0;
           $113 = ($112|0)==(-1);
           if (!($113)) {
            HEAP32[$__p$i$i$i36$i$i>>2] = 6560;
            $114 = (($__p$i$i$i36$i$i) + 4|0);
            HEAP32[$114>>2] = (439);
            $115 = (($__p$i$i$i36$i$i) + 8|0);
            HEAP32[$115>>2] = 0;
            __THREW__ = 0;
            invoke_vii(440,(6560|0),($__p$i$i$i36$i$i|0));
            $116 = __THREW__; __THREW__ = 0;
            $117 = $116&1;
            if ($117) {
             label = 110;
             break;
            }
           }
           $118 = HEAP32[((6560 + 4|0))>>2]|0;
           $119 = (($118) + -1)|0;
           __THREW__ = 0;
           invoke_viii(486,(10720|0),(11088|0),($119|0));
           $120 = __THREW__; __THREW__ = 0;
           $121 = $120&1;
           if ($121) {
            label = 110;
            break;
           }
           HEAP32[((11056 + 4|0))>>2] = 0;
           HEAP32[11056>>2] = ((6616 + 8|0));
           HEAP32[((11056 + 8|0))>>2] = 46;
           HEAP32[((11056 + 12|0))>>2] = 44;
           ;HEAP32[((11056 + 16|0))+0>>2]=0|0;HEAP32[((11056 + 16|0))+4>>2]=0|0;HEAP32[((11056 + 16|0))+8>>2]=0|0;
           $122 = HEAP32[6568>>2]|0;
           $123 = ($122|0)==(-1);
           if (!($123)) {
            HEAP32[$__p$i$i$i40$i$i>>2] = 6568;
            $124 = (($__p$i$i$i40$i$i) + 4|0);
            HEAP32[$124>>2] = (439);
            $125 = (($__p$i$i$i40$i$i) + 8|0);
            HEAP32[$125>>2] = 0;
            __THREW__ = 0;
            invoke_vii(440,(6568|0),($__p$i$i$i40$i$i|0));
            $126 = __THREW__; __THREW__ = 0;
            $127 = $126&1;
            if ($127) {
             label = 110;
             break;
            }
           }
           $128 = HEAP32[((6568 + 4|0))>>2]|0;
           $129 = (($128) + -1)|0;
           __THREW__ = 0;
           invoke_viii(486,(10720|0),(11056|0),($129|0));
           $130 = __THREW__; __THREW__ = 0;
           $131 = $130&1;
           if ($131) {
            label = 110;
            break;
           }
           HEAP32[((11048 + 4|0))>>2] = 0;
           HEAP32[11048>>2] = ((4904 + 8|0));
           $132 = HEAP32[4968>>2]|0;
           $133 = ($132|0)==(-1);
           if (!($133)) {
            HEAP32[$__p$i$i$i44$i$i>>2] = 4968;
            $134 = (($__p$i$i$i44$i$i) + 4|0);
            HEAP32[$134>>2] = (439);
            $135 = (($__p$i$i$i44$i$i) + 8|0);
            HEAP32[$135>>2] = 0;
            __THREW__ = 0;
            invoke_vii(440,(4968|0),($__p$i$i$i44$i$i|0));
            $136 = __THREW__; __THREW__ = 0;
            $137 = $136&1;
            if ($137) {
             label = 110;
             break;
            }
           }
           $138 = HEAP32[((4968 + 4|0))>>2]|0;
           $139 = (($138) + -1)|0;
           __THREW__ = 0;
           invoke_viii(486,(10720|0),(11048|0),($139|0));
           $140 = __THREW__; __THREW__ = 0;
           $141 = $140&1;
           if ($141) {
            label = 110;
            break;
           }
           HEAP32[((11040 + 4|0))>>2] = 0;
           HEAP32[11040>>2] = ((5024 + 8|0));
           $142 = HEAP32[5088>>2]|0;
           $143 = ($142|0)==(-1);
           if (!($143)) {
            HEAP32[$__p$i$i$i48$i$i>>2] = 5088;
            $144 = (($__p$i$i$i48$i$i) + 4|0);
            HEAP32[$144>>2] = (439);
            $145 = (($__p$i$i$i48$i$i) + 8|0);
            HEAP32[$145>>2] = 0;
            __THREW__ = 0;
            invoke_vii(440,(5088|0),($__p$i$i$i48$i$i|0));
            $146 = __THREW__; __THREW__ = 0;
            $147 = $146&1;
            if ($147) {
             label = 110;
             break;
            }
           }
           $148 = HEAP32[((5088 + 4|0))>>2]|0;
           $149 = (($148) + -1)|0;
           __THREW__ = 0;
           invoke_viii(486,(10720|0),(11040|0),($149|0));
           $150 = __THREW__; __THREW__ = 0;
           $151 = $150&1;
           if ($151) {
            label = 110;
            break;
           }
           HEAP32[((11032 + 4|0))>>2] = 0;
           HEAP32[11032>>2] = ((5096 + 8|0));
           $152 = HEAP32[5152>>2]|0;
           $153 = ($152|0)==(-1);
           if (!($153)) {
            HEAP32[$__p$i$i$i52$i$i>>2] = 5152;
            $154 = (($__p$i$i$i52$i$i) + 4|0);
            HEAP32[$154>>2] = (439);
            $155 = (($__p$i$i$i52$i$i) + 8|0);
            HEAP32[$155>>2] = 0;
            __THREW__ = 0;
            invoke_vii(440,(5152|0),($__p$i$i$i52$i$i|0));
            $156 = __THREW__; __THREW__ = 0;
            $157 = $156&1;
            if ($157) {
             label = 110;
             break;
            }
           }
           $158 = HEAP32[((5152 + 4|0))>>2]|0;
           $159 = (($158) + -1)|0;
           __THREW__ = 0;
           invoke_viii(486,(10720|0),(11032|0),($159|0));
           $160 = __THREW__; __THREW__ = 0;
           $161 = $160&1;
           if ($161) {
            label = 110;
            break;
           }
           HEAP32[((11024 + 4|0))>>2] = 0;
           HEAP32[11024>>2] = ((5160 + 8|0));
           $162 = HEAP32[5216>>2]|0;
           $163 = ($162|0)==(-1);
           if (!($163)) {
            HEAP32[$__p$i$i$i56$i$i>>2] = 5216;
            $164 = (($__p$i$i$i56$i$i) + 4|0);
            HEAP32[$164>>2] = (439);
            $165 = (($__p$i$i$i56$i$i) + 8|0);
            HEAP32[$165>>2] = 0;
            __THREW__ = 0;
            invoke_vii(440,(5216|0),($__p$i$i$i56$i$i|0));
            $166 = __THREW__; __THREW__ = 0;
            $167 = $166&1;
            if ($167) {
             label = 110;
             break;
            }
           }
           $168 = HEAP32[((5216 + 4|0))>>2]|0;
           $169 = (($168) + -1)|0;
           __THREW__ = 0;
           invoke_viii(486,(10720|0),(11024|0),($169|0));
           $170 = __THREW__; __THREW__ = 0;
           $171 = $170&1;
           if ($171) {
            label = 110;
            break;
           }
           HEAP32[((11016 + 4|0))>>2] = 0;
           HEAP32[11016>>2] = ((5752 + 8|0));
           $172 = HEAP32[5808>>2]|0;
           $173 = ($172|0)==(-1);
           if (!($173)) {
            HEAP32[$__p$i$i$i60$i$i>>2] = 5808;
            $174 = (($__p$i$i$i60$i$i) + 4|0);
            HEAP32[$174>>2] = (439);
            $175 = (($__p$i$i$i60$i$i) + 8|0);
            HEAP32[$175>>2] = 0;
            __THREW__ = 0;
            invoke_vii(440,(5808|0),($__p$i$i$i60$i$i|0));
            $176 = __THREW__; __THREW__ = 0;
            $177 = $176&1;
            if ($177) {
             label = 110;
             break;
            }
           }
           $178 = HEAP32[((5808 + 4|0))>>2]|0;
           $179 = (($178) + -1)|0;
           __THREW__ = 0;
           invoke_viii(486,(10720|0),(11016|0),($179|0));
           $180 = __THREW__; __THREW__ = 0;
           $181 = $180&1;
           if ($181) {
            label = 110;
            break;
           }
           HEAP32[((11008 + 4|0))>>2] = 0;
           HEAP32[11008>>2] = ((5816 + 8|0));
           $182 = HEAP32[5872>>2]|0;
           $183 = ($182|0)==(-1);
           if (!($183)) {
            HEAP32[$__p$i$i$i64$i$i>>2] = 5872;
            $184 = (($__p$i$i$i64$i$i) + 4|0);
            HEAP32[$184>>2] = (439);
            $185 = (($__p$i$i$i64$i$i) + 8|0);
            HEAP32[$185>>2] = 0;
            __THREW__ = 0;
            invoke_vii(440,(5872|0),($__p$i$i$i64$i$i|0));
            $186 = __THREW__; __THREW__ = 0;
            $187 = $186&1;
            if ($187) {
             label = 110;
             break;
            }
           }
           $188 = HEAP32[((5872 + 4|0))>>2]|0;
           $189 = (($188) + -1)|0;
           __THREW__ = 0;
           invoke_viii(486,(10720|0),(11008|0),($189|0));
           $190 = __THREW__; __THREW__ = 0;
           $191 = $190&1;
           if ($191) {
            label = 110;
            break;
           }
           HEAP32[((11000 + 4|0))>>2] = 0;
           HEAP32[11000>>2] = ((5880 + 8|0));
           $192 = HEAP32[5936>>2]|0;
           $193 = ($192|0)==(-1);
           if (!($193)) {
            HEAP32[$__p$i$i$i68$i$i>>2] = 5936;
            $194 = (($__p$i$i$i68$i$i) + 4|0);
            HEAP32[$194>>2] = (439);
            $195 = (($__p$i$i$i68$i$i) + 8|0);
            HEAP32[$195>>2] = 0;
            __THREW__ = 0;
            invoke_vii(440,(5936|0),($__p$i$i$i68$i$i|0));
            $196 = __THREW__; __THREW__ = 0;
            $197 = $196&1;
            if ($197) {
             label = 110;
             break;
            }
           }
           $198 = HEAP32[((5936 + 4|0))>>2]|0;
           $199 = (($198) + -1)|0;
           __THREW__ = 0;
           invoke_viii(486,(10720|0),(11000|0),($199|0));
           $200 = __THREW__; __THREW__ = 0;
           $201 = $200&1;
           if ($201) {
            label = 110;
            break;
           }
           HEAP32[((10992 + 4|0))>>2] = 0;
           HEAP32[10992>>2] = ((5944 + 8|0));
           $202 = HEAP32[6000>>2]|0;
           $203 = ($202|0)==(-1);
           if (!($203)) {
            HEAP32[$__p$i$i$i72$i$i>>2] = 6000;
            $204 = (($__p$i$i$i72$i$i) + 4|0);
            HEAP32[$204>>2] = (439);
            $205 = (($__p$i$i$i72$i$i) + 8|0);
            HEAP32[$205>>2] = 0;
            __THREW__ = 0;
            invoke_vii(440,(6000|0),($__p$i$i$i72$i$i|0));
            $206 = __THREW__; __THREW__ = 0;
            $207 = $206&1;
            if ($207) {
             label = 110;
             break;
            }
           }
           $208 = HEAP32[((6000 + 4|0))>>2]|0;
           $209 = (($208) + -1)|0;
           __THREW__ = 0;
           invoke_viii(486,(10720|0),(10992|0),($209|0));
           $210 = __THREW__; __THREW__ = 0;
           $211 = $210&1;
           if ($211) {
            label = 110;
            break;
           }
           HEAP32[((10984 + 4|0))>>2] = 0;
           HEAP32[10984>>2] = ((6008 + 8|0));
           $212 = HEAP32[6040>>2]|0;
           $213 = ($212|0)==(-1);
           if (!($213)) {
            HEAP32[$__p$i$i$i76$i$i>>2] = 6040;
            $214 = (($__p$i$i$i76$i$i) + 4|0);
            HEAP32[$214>>2] = (439);
            $215 = (($__p$i$i$i76$i$i) + 8|0);
            HEAP32[$215>>2] = 0;
            __THREW__ = 0;
            invoke_vii(440,(6040|0),($__p$i$i$i76$i$i|0));
            $216 = __THREW__; __THREW__ = 0;
            $217 = $216&1;
            if ($217) {
             label = 110;
             break;
            }
           }
           $218 = HEAP32[((6040 + 4|0))>>2]|0;
           $219 = (($218) + -1)|0;
           __THREW__ = 0;
           invoke_viii(486,(10720|0),(10984|0),($219|0));
           $220 = __THREW__; __THREW__ = 0;
           $221 = $220&1;
           if ($221) {
            label = 110;
            break;
           }
           HEAP32[((10976 + 4|0))>>2] = 0;
           HEAP32[10976>>2] = ((6088 + 8|0));
           $222 = HEAP32[6120>>2]|0;
           $223 = ($222|0)==(-1);
           if (!($223)) {
            HEAP32[$__p$i$i$i80$i$i>>2] = 6120;
            $224 = (($__p$i$i$i80$i$i) + 4|0);
            HEAP32[$224>>2] = (439);
            $225 = (($__p$i$i$i80$i$i) + 8|0);
            HEAP32[$225>>2] = 0;
            __THREW__ = 0;
            invoke_vii(440,(6120|0),($__p$i$i$i80$i$i|0));
            $226 = __THREW__; __THREW__ = 0;
            $227 = $226&1;
            if ($227) {
             label = 110;
             break;
            }
           }
           $228 = HEAP32[((6120 + 4|0))>>2]|0;
           $229 = (($228) + -1)|0;
           __THREW__ = 0;
           invoke_viii(486,(10720|0),(10976|0),($229|0));
           $230 = __THREW__; __THREW__ = 0;
           $231 = $230&1;
           if ($231) {
            label = 110;
            break;
           }
           HEAP32[((10968 + 4|0))>>2] = 0;
           HEAP32[10968>>2] = ((6144 + 8|0));
           $232 = HEAP32[6176>>2]|0;
           $233 = ($232|0)==(-1);
           if (!($233)) {
            HEAP32[$__p$i$i$i84$i$i>>2] = 6176;
            $234 = (($__p$i$i$i84$i$i) + 4|0);
            HEAP32[$234>>2] = (439);
            $235 = (($__p$i$i$i84$i$i) + 8|0);
            HEAP32[$235>>2] = 0;
            __THREW__ = 0;
            invoke_vii(440,(6176|0),($__p$i$i$i84$i$i|0));
            $236 = __THREW__; __THREW__ = 0;
            $237 = $236&1;
            if ($237) {
             label = 110;
             break;
            }
           }
           $238 = HEAP32[((6176 + 4|0))>>2]|0;
           $239 = (($238) + -1)|0;
           __THREW__ = 0;
           invoke_viii(486,(10720|0),(10968|0),($239|0));
           $240 = __THREW__; __THREW__ = 0;
           $241 = $240&1;
           if ($241) {
            label = 110;
            break;
           }
           HEAP32[((10960 + 4|0))>>2] = 0;
           HEAP32[10960>>2] = ((6192 + 8|0));
           $242 = HEAP32[6224>>2]|0;
           $243 = ($242|0)==(-1);
           if (!($243)) {
            HEAP32[$__p$i$i$i88$i$i>>2] = 6224;
            $244 = (($__p$i$i$i88$i$i) + 4|0);
            HEAP32[$244>>2] = (439);
            $245 = (($__p$i$i$i88$i$i) + 8|0);
            HEAP32[$245>>2] = 0;
            __THREW__ = 0;
            invoke_vii(440,(6224|0),($__p$i$i$i88$i$i|0));
            $246 = __THREW__; __THREW__ = 0;
            $247 = $246&1;
            if ($247) {
             label = 110;
             break;
            }
           }
           $248 = HEAP32[((6224 + 4|0))>>2]|0;
           $249 = (($248) + -1)|0;
           __THREW__ = 0;
           invoke_viii(486,(10720|0),(10960|0),($249|0));
           $250 = __THREW__; __THREW__ = 0;
           $251 = $250&1;
           if ($251) {
            label = 110;
            break;
           }
           HEAP32[((10944 + 4|0))>>2] = 0;
           HEAP32[10944>>2] = ((5240 + 8|0));
           HEAP32[((10944 + 8|0))>>2] = ((5240 + 56|0));
           $252 = HEAP32[5328>>2]|0;
           $253 = ($252|0)==(-1);
           if (!($253)) {
            HEAP32[$__p$i$i$i92$i$i>>2] = 5328;
            $254 = (($__p$i$i$i92$i$i) + 4|0);
            HEAP32[$254>>2] = (439);
            $255 = (($__p$i$i$i92$i$i) + 8|0);
            HEAP32[$255>>2] = 0;
            __THREW__ = 0;
            invoke_vii(440,(5328|0),($__p$i$i$i92$i$i|0));
            $256 = __THREW__; __THREW__ = 0;
            $257 = $256&1;
            if ($257) {
             label = 110;
             break;
            }
           }
           $258 = HEAP32[((5328 + 4|0))>>2]|0;
           $259 = (($258) + -1)|0;
           __THREW__ = 0;
           invoke_viii(486,(10720|0),(10944|0),($259|0));
           $260 = __THREW__; __THREW__ = 0;
           $261 = $260&1;
           if ($261) {
            label = 110;
            break;
           }
           HEAP32[((10928 + 4|0))>>2] = 0;
           HEAP32[10928>>2] = ((5392 + 8|0));
           HEAP32[((10928 + 8|0))>>2] = ((5392 + 56|0));
           $262 = HEAP32[5480>>2]|0;
           $263 = ($262|0)==(-1);
           if (!($263)) {
            HEAP32[$__p$i$i$i96$i$i>>2] = 5480;
            $264 = (($__p$i$i$i96$i$i) + 4|0);
            HEAP32[$264>>2] = (439);
            $265 = (($__p$i$i$i96$i$i) + 8|0);
            HEAP32[$265>>2] = 0;
            __THREW__ = 0;
            invoke_vii(440,(5480|0),($__p$i$i$i96$i$i|0));
            $266 = __THREW__; __THREW__ = 0;
            $267 = $266&1;
            if ($267) {
             label = 110;
             break;
            }
           }
           $268 = HEAP32[((5480 + 4|0))>>2]|0;
           $269 = (($268) + -1)|0;
           __THREW__ = 0;
           invoke_viii(486,(10720|0),(10928|0),($269|0));
           $270 = __THREW__; __THREW__ = 0;
           $271 = $270&1;
           if ($271) {
            label = 110;
            break;
           }
           HEAP32[((10912 + 4|0))>>2] = 0;
           HEAP32[10912>>2] = ((7280 + 8|0));
           $272 = HEAP8[6328>>0]|0;
           $273 = ($272<<24>>24)==(0);
           do {
            if ($273) {
             $274 = (___cxa_guard_acquire((6328|0))|0);
             $275 = ($274|0)==(0);
             if ($275) {
              break;
             }
             __THREW__ = 0;
             $276 = (invoke_iiii(461,2147483647,(6336|0),(0|0))|0);
             $277 = __THREW__; __THREW__ = 0;
             $278 = $277&1;
             if ($278) {
              $279 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
              $280 = tempRet0;
              ___cxa_guard_abort((6328|0));
              $eh$lpad$body$i$i$indexZ2D = $279;
              break L18;
             } else {
              HEAP32[6320>>2] = $276;
              ___cxa_guard_release((6328|0));
              break;
             }
            }
           } while(0);
           $281 = HEAP32[6320>>2]|0;
           HEAP32[((10912 + 8|0))>>2] = $281;
           HEAP32[10912>>2] = ((5688 + 8|0));
           $282 = HEAP32[5712>>2]|0;
           $283 = ($282|0)==(-1);
           if (!($283)) {
            HEAP32[$__p$i$i$i102$i$i>>2] = 5712;
            $284 = (($__p$i$i$i102$i$i) + 4|0);
            HEAP32[$284>>2] = (439);
            $285 = (($__p$i$i$i102$i$i) + 8|0);
            HEAP32[$285>>2] = 0;
            __THREW__ = 0;
            invoke_vii(440,(5712|0),($__p$i$i$i102$i$i|0));
            $286 = __THREW__; __THREW__ = 0;
            $287 = $286&1;
            if ($287) {
             label = 110;
             break;
            }
           }
           $288 = HEAP32[((5712 + 4|0))>>2]|0;
           $289 = (($288) + -1)|0;
           __THREW__ = 0;
           invoke_viii(486,(10720|0),(10912|0),($289|0));
           $290 = __THREW__; __THREW__ = 0;
           $291 = $290&1;
           if ($291) {
            label = 110;
            break;
           }
           HEAP32[((10896 + 4|0))>>2] = 0;
           HEAP32[10896>>2] = ((7280 + 8|0));
           $292 = HEAP8[6328>>0]|0;
           $293 = ($292<<24>>24)==(0);
           do {
            if ($293) {
             $294 = (___cxa_guard_acquire((6328|0))|0);
             $295 = ($294|0)==(0);
             if ($295) {
              break;
             }
             __THREW__ = 0;
             $296 = (invoke_iiii(461,2147483647,(6336|0),(0|0))|0);
             $297 = __THREW__; __THREW__ = 0;
             $298 = $297&1;
             if ($298) {
              $299 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
              $300 = tempRet0;
              ___cxa_guard_abort((6328|0));
              $eh$lpad$body$i$i$indexZ2D = $299;
              break L18;
             } else {
              HEAP32[6320>>2] = $296;
              ___cxa_guard_release((6328|0));
              break;
             }
            }
           } while(0);
           $301 = HEAP32[6320>>2]|0;
           HEAP32[((10896 + 8|0))>>2] = $301;
           HEAP32[10896>>2] = ((5720 + 8|0));
           $302 = HEAP32[5744>>2]|0;
           $303 = ($302|0)==(-1);
           if (!($303)) {
            HEAP32[$__p$i$i$i109$i$i>>2] = 5744;
            $304 = (($__p$i$i$i109$i$i) + 4|0);
            HEAP32[$304>>2] = (439);
            $305 = (($__p$i$i$i109$i$i) + 8|0);
            HEAP32[$305>>2] = 0;
            __THREW__ = 0;
            invoke_vii(440,(5744|0),($__p$i$i$i109$i$i|0));
            $306 = __THREW__; __THREW__ = 0;
            $307 = $306&1;
            if ($307) {
             label = 110;
             break;
            }
           }
           $308 = HEAP32[((5744 + 4|0))>>2]|0;
           $309 = (($308) + -1)|0;
           __THREW__ = 0;
           invoke_viii(486,(10720|0),(10896|0),($309|0));
           $310 = __THREW__; __THREW__ = 0;
           $311 = $310&1;
           if ($311) {
            label = 110;
            break;
           }
           HEAP32[((10888 + 4|0))>>2] = 0;
           HEAP32[10888>>2] = ((6232 + 8|0));
           $312 = HEAP32[6264>>2]|0;
           $313 = ($312|0)==(-1);
           if (!($313)) {
            HEAP32[$__p$i$i$i113$i$i>>2] = 6264;
            $314 = (($__p$i$i$i113$i$i) + 4|0);
            HEAP32[$314>>2] = (439);
            $315 = (($__p$i$i$i113$i$i) + 8|0);
            HEAP32[$315>>2] = 0;
            __THREW__ = 0;
            invoke_vii(440,(6264|0),($__p$i$i$i113$i$i|0));
            $316 = __THREW__; __THREW__ = 0;
            $317 = $316&1;
            if ($317) {
             label = 110;
             break;
            }
           }
           $318 = HEAP32[((6264 + 4|0))>>2]|0;
           $319 = (($318) + -1)|0;
           __THREW__ = 0;
           invoke_viii(486,(10720|0),(10888|0),($319|0));
           $320 = __THREW__; __THREW__ = 0;
           $321 = $320&1;
           if ($321) {
            label = 110;
            break;
           }
           HEAP32[((10880 + 4|0))>>2] = 0;
           HEAP32[10880>>2] = ((6272 + 8|0));
           $322 = HEAP32[6304>>2]|0;
           $323 = ($322|0)==(-1);
           if (!($323)) {
            HEAP32[$__p$i$i$i$i$i>>2] = 6304;
            $324 = (($__p$i$i$i$i$i) + 4|0);
            HEAP32[$324>>2] = (439);
            $325 = (($__p$i$i$i$i$i) + 8|0);
            HEAP32[$325>>2] = 0;
            __THREW__ = 0;
            invoke_vii(440,(6304|0),($__p$i$i$i$i$i|0));
            $326 = __THREW__; __THREW__ = 0;
            $327 = $326&1;
            if ($327) {
             label = 110;
             break;
            }
           }
           $328 = HEAP32[((6304 + 4|0))>>2]|0;
           $329 = (($328) + -1)|0;
           __THREW__ = 0;
           invoke_viii(486,(10720|0),(10880|0),($329|0));
           $330 = __THREW__; __THREW__ = 0;
           $331 = $330&1;
           if ($331) {
            label = 110;
            break;
           }
           HEAP32[6368>>2] = 10720;
           ___cxa_guard_release((6376|0));
           break L7;
          }
         }
        }
       }
      }
     }
    } while(0);
    if ((label|0) == 110) {
     $332 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
     $333 = tempRet0;
     $eh$lpad$body$i$i$indexZ2D = $332;
    }
    $334 = HEAP8[((10720 + 144|0))>>0]|0;
    $335 = $334 & 1;
    $336 = ($335<<24>>24)==(0);
    if (!($336)) {
     $337 = HEAP32[((10720 + 152|0))>>2]|0;
     $338 = ($337|0)==(0|0);
     if (!($338)) {
      _free($337);
     }
    }
    $339 = HEAP32[((10720 + 8|0))>>2]|0;
    $340 = ($339|0)==(0|0);
    if ($340) {
     ___cxa_guard_abort((6376|0));
     ___cxa_guard_abort((6392|0));
     ___clang_call_terminate($eh$lpad$body$i$i$indexZ2D);
     // unreachable;
    }
    $341 = HEAP32[((10720 + 12|0))>>2]|0;
    $342 = ($341|0)==($339|0);
    if (!($342)) {
     $__new_last2$i$i$i$i$i$i$i = $339;
     $scevgep$i$i$i$i$i$i$i = (($341) + -4|0);
     $343 = (0 - ($__new_last2$i$i$i$i$i$i$i))|0;
     $uglygep$i$i$i$i$i$i$i = (($scevgep$i$i$i$i$i$i$i) + ($343)|0);
     $uglygep3$i$i$i$i$i$i$i = $uglygep$i$i$i$i$i$i$i;
     $344 = $uglygep3$i$i$i$i$i$i$i >>> 2;
     $345 = $344 ^ -1;
     $scevgep4$i$i$i$i$i$i$i = (($341) + ($345<<2)|0);
     HEAP32[((10720 + 12|0))>>2] = $scevgep4$i$i$i$i$i$i$i;
    }
    $346 = ($339|0)==(((10720 + 24|0))|0);
    if ($346) {
     HEAP8[((10720 + 136|0))>>0] = 0;
     ___cxa_guard_abort((6376|0));
     ___cxa_guard_abort((6392|0));
     ___clang_call_terminate($eh$lpad$body$i$i$indexZ2D);
     // unreachable;
    } else {
     _free($339);
     ___cxa_guard_abort((6376|0));
     ___cxa_guard_abort((6392|0));
     ___clang_call_terminate($eh$lpad$body$i$i$indexZ2D);
     // unreachable;
    }
   }
  }
 } while(0);
 $347 = HEAP32[6368>>2]|0;
 HEAP32[6384>>2] = $347;
 $348 = (($347) + 4|0);
 $349 = HEAP32[$348>>2]|0;HEAP32[$348>>2] = (($349+1)|0);
 ___cxa_guard_release((6392|0));
 $350 = HEAP32[6384>>2]|0;
 HEAP32[$this>>2] = $350;
 $351 = (($350) + 4|0);
 $352 = HEAP32[$351>>2]|0;HEAP32[$351>>2] = (($352+1)|0);
 STACKTOP = sp;return;
}
function __ZNKSt3__16locale9use_facetERNS0_2idE($this$0$0$val,$x) {
 $this$0$0$val = $this$0$0$val|0;
 $x = $x|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $__p$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $__p$i$i = sp;
 $0 = HEAP32[$x>>2]|0;
 $1 = ($0|0)==(-1);
 if (!($1)) {
  HEAP32[$__p$i$i>>2] = $x;
  $2 = (($__p$i$i) + 4|0);
  HEAP32[$2>>2] = (439);
  $3 = (($__p$i$i) + 8|0);
  HEAP32[$3>>2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E($x,$__p$i$i);
 }
 $4 = (($x) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + -1)|0;
 $7 = (($this$0$0$val) + 12|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($this$0$0$val) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $8;
 $12 = $10;
 $13 = (($11) - ($12))|0;
 $14 = $13 >> 2;
 $15 = ($14>>>0)>($6>>>0);
 if (!($15)) {
  $19 = (___cxa_allocate_exception(4)|0);
  HEAP32[$19>>2] = ((14256 + 8|0));
  ___cxa_throw(($19|0),(14336|0),(351|0));
  // unreachable;
 }
 $16 = (($10) + ($6<<2)|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17|0)==(0|0);
 if ($18) {
  $19 = (___cxa_allocate_exception(4)|0);
  HEAP32[$19>>2] = ((14256 + 8|0));
  ___cxa_throw(($19|0),(14336|0),(351|0));
  // unreachable;
 } else {
  STACKTOP = sp;return ($17|0);
 }
 return 0|0;
}
function __ZNSt3__16locale5facetD0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($this|0)==(0|0);
 if (!($0)) {
  _free($this);
 }
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5facet16__on_zero_sharedEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($this|0)==(0|0);
 if ($0) {
  STACKTOP = sp;return;
 }
 $1 = HEAP32[$this>>2]|0;
 $2 = (($1) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 FUNCTION_TABLE_vi[$3 & 511]($this);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale2id6__initEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[6400>>2]|0;HEAP32[6400>>2] = (($0+1)|0);
 $1 = (($0) + 1)|0;
 $2 = (($this) + 4|0);
 HEAP32[$2>>2] = $1;
 STACKTOP = sp;return;
}
function __ZNSt3__15ctypeIwED0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($this|0)==(0|0);
 if (!($0)) {
  _free($this);
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__15ctypeIwE5do_isEtw($this,$m,$c) {
 $this = $this|0;
 $m = $m|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isascii = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isascii = ($c>>>0)<(128);
 if (!($isascii)) {
  $10 = 0;
  STACKTOP = sp;return ($10|0);
 }
 __THREW__ = 0;
 $0 = (invoke_i(487)|0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $3 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
  $4 = tempRet0;
  ___clang_call_terminate($3);
  // unreachable;
 }
 $5 = HEAP32[$0>>2]|0;
 $6 = (($5) + ($c<<1)|0);
 $7 = HEAP16[$6>>1]|0;
 $8 = $7 & $m;
 $9 = ($8<<16>>16)!=(0);
 $10 = $9;
 STACKTOP = sp;return ($10|0);
}
function __ZNKSt3__15ctypeIwE5do_isEPKwS3_Pt($this,$low,$high,$vec) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 $vec = $vec|0;
 var $$01$lcssa = 0, $$013 = 0, $$04 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isascii = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($low|0)==($high|0);
 if ($0) {
  $$01$lcssa = $low;
  STACKTOP = sp;return ($$01$lcssa|0);
 } else {
  $$013 = $low;$$04 = $vec;
 }
 while(1) {
  $1 = HEAP32[$$013>>2]|0;
  $isascii = ($1>>>0)<(128);
  if ($isascii) {
   __THREW__ = 0;
   $2 = (invoke_i(487)|0);
   $3 = __THREW__; __THREW__ = 0;
   $4 = $3&1;
   if ($4) {
    label = 4;
    break;
   }
   $7 = HEAP32[$2>>2]|0;
   $8 = (($7) + ($1<<1)|0);
   $9 = HEAP16[$8>>1]|0;
   $10 = $9;
  } else {
   $10 = 0;
  }
  HEAP16[$$04>>1] = $10;
  $11 = (($$013) + 4|0);
  $12 = (($$04) + 2|0);
  $13 = ($11|0)==($high|0);
  if ($13) {
   $$01$lcssa = $high;
   label = 7;
   break;
  } else {
   $$013 = $11;$$04 = $12;
  }
 }
 if ((label|0) == 4) {
  $5 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
  $6 = tempRet0;
  ___clang_call_terminate($5);
  // unreachable;
 }
 else if ((label|0) == 7) {
  STACKTOP = sp;return ($$01$lcssa|0);
 }
 return 0|0;
}
function __ZNKSt3__15ctypeIwE10do_scan_isEtPKwS3_($this,$m,$low,$high) {
 $this = $this|0;
 $m = $m|0;
 $low = $low|0;
 $high = $high|0;
 var $$0$lcssa = 0, $$02 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isascii = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($low|0)==($high|0);
 if ($0) {
  $$0$lcssa = $low;
  STACKTOP = sp;return ($$0$lcssa|0);
 } else {
  $$02 = $low;
 }
 while(1) {
  $1 = HEAP32[$$02>>2]|0;
  $isascii = ($1>>>0)<(128);
  if ($isascii) {
   __THREW__ = 0;
   $2 = (invoke_i(487)|0);
   $3 = __THREW__; __THREW__ = 0;
   $4 = $3&1;
   if ($4) {
    label = 4;
    break;
   }
   $7 = HEAP32[$2>>2]|0;
   $8 = (($7) + ($1<<1)|0);
   $9 = HEAP16[$8>>1]|0;
   $10 = $9 & $m;
   $11 = ($10<<16>>16)==(0);
   if (!($11)) {
    $$0$lcssa = $$02;
    label = 7;
    break;
   }
  }
  $12 = (($$02) + 4|0);
  $13 = ($12|0)==($high|0);
  if ($13) {
   $$0$lcssa = $high;
   label = 7;
   break;
  } else {
   $$02 = $12;
  }
 }
 if ((label|0) == 4) {
  $5 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
  $6 = tempRet0;
  ___clang_call_terminate($5);
  // unreachable;
 }
 else if ((label|0) == 7) {
  STACKTOP = sp;return ($$0$lcssa|0);
 }
 return 0|0;
}
function __ZNKSt3__15ctypeIwE11do_scan_notEtPKwS3_($this,$m,$low,$high) {
 $this = $this|0;
 $m = $m|0;
 $low = $low|0;
 $high = $high|0;
 var $$0$lcssa = 0, $$02 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isascii = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($low|0)==($high|0);
 L1: do {
  if ($0) {
   $$0$lcssa = $low;
  } else {
   $$02 = $low;
   while(1) {
    $3 = HEAP32[$$02>>2]|0;
    $isascii = ($3>>>0)<(128);
    if (!($isascii)) {
     $$0$lcssa = $$02;
     break L1;
    }
    __THREW__ = 0;
    $4 = (invoke_i(487)|0);
    $5 = __THREW__; __THREW__ = 0;
    $6 = $5&1;
    if ($6) {
     break;
    }
    $9 = HEAP32[$4>>2]|0;
    $10 = (($9) + ($3<<1)|0);
    $11 = HEAP16[$10>>1]|0;
    $12 = $11 & $m;
    $13 = ($12<<16>>16)==(0);
    $2 = (($$02) + 4|0);
    if ($13) {
     $$0$lcssa = $$02;
     break L1;
    }
    $1 = ($2|0)==($high|0);
    if ($1) {
     $$0$lcssa = $high;
     break L1;
    } else {
     $$02 = $2;
    }
   }
   $7 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
   $8 = tempRet0;
   ___clang_call_terminate($7);
   // unreachable;
  }
 } while(0);
 STACKTOP = sp;return ($$0$lcssa|0);
}
function __ZNKSt3__15ctypeIwE10do_toupperEw($this,$c) {
 $this = $this|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $isascii = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isascii = ($c>>>0)<(128);
 if (!($isascii)) {
  $8 = $c;
  STACKTOP = sp;return ($8|0);
 }
 __THREW__ = 0;
 $0 = (invoke_i(488)|0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $3 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
  $4 = tempRet0;
  ___clang_call_terminate($3);
  // unreachable;
 }
 $5 = HEAP32[$0>>2]|0;
 $6 = (($5) + ($c<<2)|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $7;
 STACKTOP = sp;return ($8|0);
}
function __ZNKSt3__15ctypeIwE10do_toupperEPwPKw($this,$low,$high) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 var $$0$lcssa = 0, $$02 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isascii = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($low|0)==($high|0);
 if ($0) {
  $$0$lcssa = $low;
  STACKTOP = sp;return ($$0$lcssa|0);
 } else {
  $$02 = $low;
 }
 while(1) {
  $1 = HEAP32[$$02>>2]|0;
  $isascii = ($1>>>0)<(128);
  if ($isascii) {
   __THREW__ = 0;
   $2 = (invoke_i(488)|0);
   $3 = __THREW__; __THREW__ = 0;
   $4 = $3&1;
   if ($4) {
    label = 4;
    break;
   }
   $7 = HEAP32[$2>>2]|0;
   $8 = (($7) + ($1<<2)|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = $9;
  } else {
   $10 = $1;
  }
  HEAP32[$$02>>2] = $10;
  $11 = (($$02) + 4|0);
  $12 = ($11|0)==($high|0);
  if ($12) {
   $$0$lcssa = $high;
   label = 7;
   break;
  } else {
   $$02 = $11;
  }
 }
 if ((label|0) == 4) {
  $5 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
  $6 = tempRet0;
  ___clang_call_terminate($5);
  // unreachable;
 }
 else if ((label|0) == 7) {
  STACKTOP = sp;return ($$0$lcssa|0);
 }
 return 0|0;
}
function __ZNKSt3__15ctypeIwE10do_tolowerEw($this,$c) {
 $this = $this|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $isascii = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isascii = ($c>>>0)<(128);
 if (!($isascii)) {
  $8 = $c;
  STACKTOP = sp;return ($8|0);
 }
 __THREW__ = 0;
 $0 = (invoke_i(489)|0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $3 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
  $4 = tempRet0;
  ___clang_call_terminate($3);
  // unreachable;
 }
 $5 = HEAP32[$0>>2]|0;
 $6 = (($5) + ($c<<2)|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $7;
 STACKTOP = sp;return ($8|0);
}
function __ZNKSt3__15ctypeIwE10do_tolowerEPwPKw($this,$low,$high) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 var $$0$lcssa = 0, $$02 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isascii = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($low|0)==($high|0);
 if ($0) {
  $$0$lcssa = $low;
  STACKTOP = sp;return ($$0$lcssa|0);
 } else {
  $$02 = $low;
 }
 while(1) {
  $1 = HEAP32[$$02>>2]|0;
  $isascii = ($1>>>0)<(128);
  if ($isascii) {
   __THREW__ = 0;
   $2 = (invoke_i(489)|0);
   $3 = __THREW__; __THREW__ = 0;
   $4 = $3&1;
   if ($4) {
    label = 4;
    break;
   }
   $7 = HEAP32[$2>>2]|0;
   $8 = (($7) + ($1<<2)|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = $9;
  } else {
   $10 = $1;
  }
  HEAP32[$$02>>2] = $10;
  $11 = (($$02) + 4|0);
  $12 = ($11|0)==($high|0);
  if ($12) {
   $$0$lcssa = $high;
   label = 7;
   break;
  } else {
   $$02 = $11;
  }
 }
 if ((label|0) == 4) {
  $5 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
  $6 = tempRet0;
  ___clang_call_terminate($5);
  // unreachable;
 }
 else if ((label|0) == 7) {
  STACKTOP = sp;return ($$0$lcssa|0);
 }
 return 0|0;
}
function __ZNKSt3__15ctypeIwE8do_widenEc($this,$c) {
 $this = $this|0;
 $c = $c|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $c << 24 >> 24;
 STACKTOP = sp;return ($0|0);
}
function __ZNKSt3__15ctypeIwE8do_widenEPKcS3_Pw($this,$low,$high,$dest) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 $dest = $dest|0;
 var $$01$lcssa = 0, $$012 = 0, $$03 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($low|0)==($high|0);
 if ($0) {
  $$01$lcssa = $low;
  STACKTOP = sp;return ($$01$lcssa|0);
 } else {
  $$012 = $low;$$03 = $dest;
 }
 while(1) {
  $1 = HEAP8[$$012>>0]|0;
  $2 = $1 << 24 >> 24;
  HEAP32[$$03>>2] = $2;
  $3 = (($$012) + 1|0);
  $4 = (($$03) + 4|0);
  $5 = ($3|0)==($high|0);
  if ($5) {
   $$01$lcssa = $high;
   break;
  } else {
   $$012 = $3;$$03 = $4;
  }
 }
 STACKTOP = sp;return ($$01$lcssa|0);
}
function __ZNKSt3__15ctypeIwE9do_narrowEwc($this,$c,$dfault) {
 $this = $this|0;
 $c = $c|0;
 $dfault = $dfault|0;
 var $$0 = 0, $0 = 0, $isascii = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isascii = ($c>>>0)<(128);
 $0 = $c&255;
 $$0 = $isascii ? $0 : $dfault;
 STACKTOP = sp;return ($$0|0);
}
function __ZNKSt3__15ctypeIwE9do_narrowEPKwS3_cPc($this,$low,$high,$dfault,$dest) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 $dfault = $dfault|0;
 $dest = $dest|0;
 var $$01$lcssa = 0, $$012 = 0, $$03 = 0, $$dfault = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $isascii = 0, $low5 = 0, $scevgep = 0, $scevgep7 = 0, $uglygep = 0, $uglygep6 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = ($low|0)==($high|0);
 if ($0) {
  $$01$lcssa = $low;
  STACKTOP = sp;return ($$01$lcssa|0);
 }
 $low5 = $low;
 $scevgep = (($high) + -4|0);
 $1 = (0 - ($low5))|0;
 $uglygep = (($scevgep) + ($1)|0);
 $uglygep6 = $uglygep;
 $2 = $uglygep6 >>> 2;
 $3 = (($2) + 1)|0;
 $$012 = $low;$$03 = $dest;
 while(1) {
  $4 = HEAP32[$$012>>2]|0;
  $isascii = ($4>>>0)<(128);
  $5 = $4&255;
  $$dfault = $isascii ? $5 : $dfault;
  HEAP8[$$03>>0] = $$dfault;
  $6 = (($$012) + 4|0);
  $7 = (($$03) + 1|0);
  $8 = ($6|0)==($high|0);
  if ($8) {
   break;
  } else {
   $$012 = $6;$$03 = $7;
  }
 }
 $scevgep7 = (($low) + ($3<<2)|0);
 $$01$lcssa = $scevgep7;
 STACKTOP = sp;return ($$01$lcssa|0);
}
function __ZNSt3__15ctypeIcED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((6424 + 8|0));
 $0 = (($this) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  $3 = (($this) + 12|0);
  $4 = HEAP8[$3>>0]|0;
  $5 = ($4<<24>>24)==(0);
  if (!($5)) {
   _free($1);
  }
  $6 = ($this|0)==(0|0);
  if ($6) {
   STACKTOP = sp;return;
  }
 }
 _free($this);
 STACKTOP = sp;return;
}
function __ZNSt3__15ctypeIcED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((6424 + 8|0));
 $0 = (($this) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  $3 = (($this) + 12|0);
  $4 = HEAP8[$3>>0]|0;
  $5 = ($4<<24>>24)==(0);
  if (!($5)) {
   _free($1);
  }
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__15ctypeIcE10do_toupperEc($this,$c) {
 $this = $this|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isascii1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isascii1 = ($c<<24>>24)>(-1);
 if (!($isascii1)) {
  $10 = $c;
  STACKTOP = sp;return ($10|0);
 }
 __THREW__ = 0;
 $0 = (invoke_i(488)|0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $3 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
  $4 = tempRet0;
  ___clang_call_terminate($3);
  // unreachable;
 }
 $5 = $c&255;
 $6 = HEAP32[$0>>2]|0;
 $7 = (($6) + ($5<<2)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $8&255;
 $10 = $9;
 STACKTOP = sp;return ($10|0);
}
function __ZNKSt3__15ctypeIcE10do_toupperEPcPKc($this,$low,$high) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 var $$0$lcssa = 0, $$03 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isascii1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($low|0)==($high|0);
 if ($0) {
  $$0$lcssa = $low;
  STACKTOP = sp;return ($$0$lcssa|0);
 } else {
  $$03 = $low;
 }
 while(1) {
  $1 = HEAP8[$$03>>0]|0;
  $isascii1 = ($1<<24>>24)>(-1);
  if ($isascii1) {
   __THREW__ = 0;
   $2 = (invoke_i(488)|0);
   $3 = __THREW__; __THREW__ = 0;
   $4 = $3&1;
   if ($4) {
    label = 4;
    break;
   }
   $7 = $1 << 24 >> 24;
   $8 = HEAP32[$2>>2]|0;
   $9 = (($8) + ($7<<2)|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = $10&255;
   $12 = $11;
  } else {
   $12 = $1;
  }
  HEAP8[$$03>>0] = $12;
  $13 = (($$03) + 1|0);
  $14 = ($13|0)==($high|0);
  if ($14) {
   $$0$lcssa = $high;
   label = 7;
   break;
  } else {
   $$03 = $13;
  }
 }
 if ((label|0) == 4) {
  $5 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
  $6 = tempRet0;
  ___clang_call_terminate($5);
  // unreachable;
 }
 else if ((label|0) == 7) {
  STACKTOP = sp;return ($$0$lcssa|0);
 }
 return 0|0;
}
function __ZNKSt3__15ctypeIcE10do_tolowerEc($this,$c) {
 $this = $this|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isascii1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isascii1 = ($c<<24>>24)>(-1);
 if (!($isascii1)) {
  $10 = $c;
  STACKTOP = sp;return ($10|0);
 }
 __THREW__ = 0;
 $0 = (invoke_i(489)|0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $3 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
  $4 = tempRet0;
  ___clang_call_terminate($3);
  // unreachable;
 }
 $5 = $c << 24 >> 24;
 $6 = HEAP32[$0>>2]|0;
 $7 = (($6) + ($5<<2)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $8&255;
 $10 = $9;
 STACKTOP = sp;return ($10|0);
}
function __ZNKSt3__15ctypeIcE10do_tolowerEPcPKc($this,$low,$high) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 var $$0$lcssa = 0, $$03 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isascii1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($low|0)==($high|0);
 if ($0) {
  $$0$lcssa = $low;
  STACKTOP = sp;return ($$0$lcssa|0);
 } else {
  $$03 = $low;
 }
 while(1) {
  $1 = HEAP8[$$03>>0]|0;
  $isascii1 = ($1<<24>>24)>(-1);
  if ($isascii1) {
   __THREW__ = 0;
   $2 = (invoke_i(489)|0);
   $3 = __THREW__; __THREW__ = 0;
   $4 = $3&1;
   if ($4) {
    label = 4;
    break;
   }
   $7 = $1 << 24 >> 24;
   $8 = HEAP32[$2>>2]|0;
   $9 = (($8) + ($7<<2)|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = $10&255;
   $12 = $11;
  } else {
   $12 = $1;
  }
  HEAP8[$$03>>0] = $12;
  $13 = (($$03) + 1|0);
  $14 = ($13|0)==($high|0);
  if ($14) {
   $$0$lcssa = $high;
   label = 7;
   break;
  } else {
   $$03 = $13;
  }
 }
 if ((label|0) == 4) {
  $5 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
  $6 = tempRet0;
  ___clang_call_terminate($5);
  // unreachable;
 }
 else if ((label|0) == 7) {
  STACKTOP = sp;return ($$0$lcssa|0);
 }
 return 0|0;
}
function __ZNKSt3__15ctypeIcE8do_widenEc($this,$c) {
 $this = $this|0;
 $c = $c|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return ($c|0);
}
function __ZNKSt3__15ctypeIcE8do_widenEPKcS3_Pc($this,$low,$high,$dest) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 $dest = $dest|0;
 var $$01$lcssa = 0, $$012 = 0, $$03 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($low|0)==($high|0);
 if ($0) {
  $$01$lcssa = $low;
 } else {
  $$012 = $low;$$03 = $dest;
  while(1) {
   $1 = HEAP8[$$012>>0]|0;
   HEAP8[$$03>>0] = $1;
   $2 = (($$012) + 1|0);
   $3 = (($$03) + 1|0);
   $4 = ($2|0)==($high|0);
   if ($4) {
    $$01$lcssa = $high;
    break;
   } else {
    $$012 = $2;$$03 = $3;
   }
  }
 }
 STACKTOP = sp;return ($$01$lcssa|0);
}
function __ZNKSt3__15ctypeIcE9do_narrowEcc($this,$c,$dfault) {
 $this = $this|0;
 $c = $c|0;
 $dfault = $dfault|0;
 var $c$dfault = 0, $isascii1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isascii1 = ($c<<24>>24)>(-1);
 $c$dfault = $isascii1 ? $c : $dfault;
 STACKTOP = sp;return ($c$dfault|0);
}
function __ZNKSt3__15ctypeIcE9do_narrowEPKcS3_cPc($this,$low,$high,$dfault,$dest) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 $dfault = $dfault|0;
 $dest = $dest|0;
 var $$01$lcssa = 0, $$013 = 0, $$04 = 0, $$dfault = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $isascii2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($low|0)==($high|0);
 if ($0) {
  $$01$lcssa = $low;
  STACKTOP = sp;return ($$01$lcssa|0);
 } else {
  $$013 = $low;$$04 = $dest;
 }
 while(1) {
  $1 = HEAP8[$$013>>0]|0;
  $isascii2 = ($1<<24>>24)>(-1);
  $$dfault = $isascii2 ? $1 : $dfault;
  HEAP8[$$04>>0] = $$dfault;
  $2 = (($$013) + 1|0);
  $3 = (($$04) + 1|0);
  $4 = ($2|0)==($high|0);
  if ($4) {
   $$01$lcssa = $high;
   break;
  } else {
   $$013 = $2;$$04 = $3;
  }
 }
 STACKTOP = sp;return ($$01$lcssa|0);
}
function __ZNSt3__17codecvtIcc11__mbstate_tED0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($this|0)==(0|0);
 if (!($0)) {
  _free($this);
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE6do_outERS1_PKcS5_RS5_PcS7_RS7_($this,$0,$frm,$1,$frm_nxt,$to,$2,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $1 = $1|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $2 = $2|0;
 $to_nxt = $to_nxt|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$frm_nxt>>2] = $frm;
 HEAP32[$to_nxt>>2] = $to;
 STACKTOP = sp;return 3;
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE5do_inERS1_PKcS5_RS5_PcS7_RS7_($this,$0,$frm,$1,$frm_nxt,$to,$2,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $1 = $1|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $2 = $2|0;
 $to_nxt = $to_nxt|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$frm_nxt>>2] = $frm;
 HEAP32[$to_nxt>>2] = $to;
 STACKTOP = sp;return 3;
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($this,$0,$to,$1,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $to = $to|0;
 $1 = $1|0;
 $to_nxt = $to_nxt|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$to_nxt>>2] = $to;
 STACKTOP = sp;return 3;
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE11do_encodingEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 1;
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE16do_always_noconvEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 1;
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE9do_lengthERS1_PKcS5_j($this,$0,$frm,$end,$mx) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $end = $end|0;
 $mx = $mx|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $end;
 $2 = $frm;
 $3 = (($1) - ($2))|0;
 $4 = ($3>>>0)<($mx>>>0);
 $5 = $4 ? $3 : $mx;
 STACKTOP = sp;return ($5|0);
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE13do_max_lengthEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 1;
}
function __ZNSt3__17codecvtIwc11__mbstate_tED0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__17codecvtIwc11__mbstate_tED2Ev($this);
 $0 = ($this|0)==(0|0);
 if (!($0)) {
  _free($this);
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE6do_outERS1_PKwS5_RS5_PcS7_RS7_($this,$st,$frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt) {
 $this = $this|0;
 $st = $st|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i2 = 0, $$0148 = 0, $$02$lcssa$i$i = 0, $$0226$i$i = 0, $$0247 = 0, $$026$i = 0, $$038$i$i = 0, $$04$$0$i = 0, $$0423$i = 0, $$1$i = 0, $$1$i$i = 0, $$1$lcssa = 0, $$14$i$i = 0, $$15$i = 0, $$19 = 0, $$214$i = 0, $$219$i$i = 0, $$25$lcssa$i$i = 0;
 var $$2525$i$i = 0, $$26$i = 0, $$3$i$i = 0, $$311$i = 0, $$36$i$i = 0, $$414$i$i = 0, $$418$i$i = 0, $$5$i$i = 0, $$pn$i$i = 0, $$pre = 0, $$pre5 = 0, $$pre95 = 0, $$pre98 = 0, $$pre99 = 0, $$ws$i$9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0;
 var $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
 var $139 = 0, $14 = 0, $140 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $buf$i = 0, $buf$i$i = 0, $cnt$024$i = 0, $cnt$1$i = 0;
 var $cnt$212$i = 0, $cnt$212$i$ = 0, $cnt$3$i = 0, $dst$$i = 0, $fend$0$lcssa = 0, $fend$052 = 0, $fend$149 = 0, $fend$2$lcssa = 0, $fend$215 = 0, $fend$3 = 0, $n$$i = 0, $n$011 = 0, $not$ = 0, $or$cond = 0, $or$cond$i = 0, $or$cond22$i = 0, $or$cond7$i = 0, $or$cond8$i = 0, $or$cond810$i = 0, $p$012 = 0;
 var $phitmp = 0, $s$018$i = 0, $s$025$i = 0, $s$1$i = 0, $s$213$i = 0, $tmp = 0, $ws$i$0 = 0, $ws$i$1 = 0, $ws$i$10 = 0, $ws$i$2 = 0, $ws$i$3 = 0, $ws$i$5 = 0, $ws$i$7 = 0, $ws$i$8 = 0, $ws$i$9 = 0, $ws2$09$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272|0;
 $buf$i$i = sp + 264|0;
 $buf$i = sp + 8|0;
 $tmp = sp;
 $0 = ($frm|0)==($frm_end|0);
 L1: do {
  if ($0) {
   HEAP32[$to_nxt>>2] = $to;
   HEAP32[$frm_nxt>>2] = $frm;
   $139 = $frm;
  } else {
   $fend$052 = $frm;
   while(1) {
    $3 = HEAP32[$fend$052>>2]|0;
    $4 = ($3|0)==(0);
    $2 = (($fend$052) + 4|0);
    if ($4) {
     $fend$0$lcssa = $fend$052;
     break;
    }
    $1 = ($2|0)==($frm_end|0);
    if ($1) {
     $fend$0$lcssa = $frm_end;
     break;
    } else {
     $fend$052 = $2;
    }
   }
   HEAP32[$to_nxt>>2] = $to;
   HEAP32[$frm_nxt>>2] = $frm;
   $5 = ($to|0)==($to_end|0);
   if ($5) {
    $139 = $frm;
   } else {
    $6 = $to_end;
    $7 = (($this) + 8|0);
    $$0148 = $frm;$$0247 = $to;$fend$149 = $fend$0$lcssa;
    while(1) {
     $8 = $fend$149;
     $9 = $$0148;
     $10 = (($8) - ($9))|0;
     $11 = $10 >> 2;
     $12 = $$0247;
     $13 = (($6) - ($12))|0;
     $14 = HEAP32[$7>>2]|0;
     $15 = (_uselocale(($14|0))|0);
     $16 = HEAP32[$frm_nxt>>2]|0;
     $17 = ($$0247|0)!=(0|0);
     $n$$i = $17 ? $13 : 256;
     $dst$$i = $17 ? $$0247 : $buf$i;
     $18 = ($16|0)==(0|0);
     $19 = ($n$$i|0)==(0);
     $or$cond22$i = $18 | $19;
     L10: do {
      if ($or$cond22$i) {
       $$1$i = $11;$$26$i = $n$$i;$cnt$1$i = 0;$s$018$i = $dst$$i;$ws$i$8 = $16;
      } else {
       $$026$i = $11;$$0423$i = $n$$i;$cnt$024$i = 0;$s$025$i = $dst$$i;$ws$i$0 = $16;
       while(1) {
        $20 = ($$026$i>>>0)>=($$0423$i>>>0);
        $21 = ($$026$i>>>0)>(32);
        $or$cond7$i = $20 | $21;
        if (!($or$cond7$i)) {
         $$1$i = $$026$i;$$26$i = $$0423$i;$cnt$1$i = $cnt$024$i;$s$018$i = $s$025$i;$ws$i$8 = $ws$i$0;
         break L10;
        }
        $$04$$0$i = $20 ? $$0423$i : $$026$i;
        $22 = (($$026$i) - ($$04$$0$i))|0;
        $23 = ($s$025$i|0)==(0|0);
        L14: do {
         if ($23) {
          $25 = HEAP32[$ws$i$0>>2]|0;
          $26 = ($25|0)==(0);
          if ($26) {
           $$0$i$i2 = 0;$ws$i$7 = $ws$i$0;
          } else {
           $$038$i$i = 0;$28 = $25;$ws2$09$i$i = $ws$i$0;
           while(1) {
            $27 = ($28>>>0)>(127);
            if ($27) {
             $29 = (_wcrtomb($buf$i$i,$28)|0);
             $30 = ($29|0)==(-1);
             if ($30) {
              $$1$i = $22;$$26$i = 0;$cnt$1$i = -1;$s$018$i = $s$025$i;$ws$i$8 = $ws$i$0;
              break L10;
             } else {
              $$pn$i$i = $29;
             }
            } else {
             $$pn$i$i = 1;
            }
            $$14$i$i = (($$pn$i$i) + ($$038$i$i))|0;
            $31 = (($ws2$09$i$i) + 4|0);
            $32 = HEAP32[$31>>2]|0;
            $33 = ($32|0)==(0);
            if ($33) {
             $$0$i$i = $$14$i$i;$ws$i$5 = $ws$i$0;
             label = 32;
             break;
            } else {
             $$038$i$i = $$14$i$i;$28 = $32;$ws2$09$i$i = $31;
            }
           }
          }
         } else {
          $24 = ($$04$$0$i>>>0)>(3);
          L22: do {
           if ($24) {
            $$0226$i$i = $s$025$i;$$2525$i$i = $$04$$0$i;$ws$i$1 = $ws$i$0;
            while(1) {
             $34 = HEAP32[$ws$i$1>>2]|0;
             $35 = ($34|0)==(0);
             if ($35) {
              $$219$i$i = $$0226$i$i;$$418$i$i = $$2525$i$i;$ws$i$3 = $ws$i$1;
              label = 22;
              break L22;
             }
             $37 = ($34>>>0)>(127);
             if ($37) {
              $38 = (_wcrtomb($$0226$i$i,$34)|0);
              $39 = ($38|0)==(-1);
              if ($39) {
               $$1$i = $22;$$26$i = 0;$cnt$1$i = -1;$s$018$i = $s$025$i;$ws$i$8 = $ws$i$1;
               break L10;
              }
              $40 = (($$0226$i$i) + ($38)|0);
              $41 = (($$2525$i$i) - ($38))|0;
              $$1$i$i = $40;$$36$i$i = $41;$46 = $ws$i$1;
             } else {
              $42 = $34&255;
              $43 = (($$0226$i$i) + 1|0);
              HEAP8[$$0226$i$i>>0] = $42;
              $44 = (($$2525$i$i) + -1)|0;
              $$1$i$i = $43;$$36$i$i = $44;$46 = $ws$i$1;
             }
             $45 = (($46) + 4|0);
             $47 = ($$36$i$i>>>0)>(3);
             if ($47) {
              $$0226$i$i = $$1$i$i;$$2525$i$i = $$36$i$i;$ws$i$1 = $45;
             } else {
              $$02$lcssa$i$i = $$1$i$i;$$25$lcssa$i$i = $$36$i$i;$ws$i$2 = $45;
              label = 16;
              break;
             }
            }
           } else {
            $$02$lcssa$i$i = $s$025$i;$$25$lcssa$i$i = $$04$$0$i;$ws$i$2 = $ws$i$0;
            label = 16;
           }
          } while(0);
          if ((label|0) == 16) {
           label = 0;
           $36 = ($$25$lcssa$i$i|0)==(0);
           if ($36) {
            $$414$i$i = 0;
           } else {
            $$219$i$i = $$02$lcssa$i$i;$$418$i$i = $$25$lcssa$i$i;$ws$i$3 = $ws$i$2;
            label = 22;
           }
          }
          L33: do {
           if ((label|0) == 22) {
            while(1) {
             label = 0;
             $48 = HEAP32[$ws$i$3>>2]|0;
             $49 = ($48|0)==(0);
             if ($49) {
              label = 30;
              break;
             }
             $50 = ($48>>>0)>(127);
             if ($50) {
              $51 = (_wcrtomb($buf$i$i,$48)|0);
              $52 = ($51|0)==(-1);
              if ($52) {
               $$1$i = $22;$$26$i = 0;$cnt$1$i = -1;$s$018$i = $s$025$i;$ws$i$8 = $ws$i$3;
               break L10;
              }
              $53 = ($51>>>0)>($$418$i$i>>>0);
              if ($53) {
               label = 26;
               break;
              }
              $55 = HEAP32[$ws$i$3>>2]|0;
              (_wcrtomb($$219$i$i,$55)|0);
              $56 = (($$219$i$i) + ($51)|0);
              $57 = (($$418$i$i) - ($51))|0;
              $$3$i$i = $56;$$5$i$i = $57;$62 = $ws$i$3;
             } else {
              $58 = $48&255;
              $59 = (($$219$i$i) + 1|0);
              HEAP8[$$219$i$i>>0] = $58;
              $60 = (($$418$i$i) + -1)|0;
              $$3$i$i = $59;$$5$i$i = $60;$62 = $ws$i$3;
             }
             $61 = (($62) + 4|0);
             $63 = ($$5$i$i|0)==(0);
             if ($63) {
              $$414$i$i = 0;
              break L33;
             } else {
              $$219$i$i = $$3$i$i;$$418$i$i = $$5$i$i;$ws$i$3 = $61;
              label = 22;
             }
            }
            if ((label|0) == 26) {
             label = 0;
             $54 = (($$04$$0$i) - ($$418$i$i))|0;
             $$0$i$i = $54;$ws$i$5 = $ws$i$3;
             label = 32;
             break L14;
            }
            else if ((label|0) == 30) {
             label = 0;
             HEAP8[$$219$i$i>>0] = 0;
             $$414$i$i = $$418$i$i;
             break;
            }
           }
          } while(0);
          $64 = (($$04$$0$i) - ($$414$i$i))|0;
          $$0$i$i = $64;$ws$i$5 = 0;
          label = 32;
         }
        } while(0);
        if ((label|0) == 32) {
         label = 0;
         $65 = ($$0$i$i|0)==(-1);
         if ($65) {
          $$1$i = $22;$$26$i = 0;$cnt$1$i = -1;$s$018$i = $s$025$i;$ws$i$8 = $ws$i$5;
          break L10;
         } else {
          $$0$i$i2 = $$0$i$i;$ws$i$7 = $ws$i$5;
         }
        }
        $66 = ($s$025$i|0)==($buf$i|0);
        if ($66) {
         $$15$i = $$0423$i;$s$1$i = $buf$i;
        } else {
         $67 = (($s$025$i) + ($$0$i$i2)|0);
         $68 = (($$0423$i) - ($$0$i$i2))|0;
         $$15$i = $68;$s$1$i = $67;
        }
        $69 = (($$0$i$i2) + ($cnt$024$i))|0;
        $70 = ($ws$i$7|0)==(0|0);
        $71 = ($$15$i|0)==(0);
        $or$cond$i = $70 | $71;
        if ($or$cond$i) {
         $$1$i = $22;$$26$i = $$15$i;$cnt$1$i = $69;$s$018$i = $s$1$i;$ws$i$8 = $ws$i$7;
         break;
        } else {
         $$026$i = $22;$$0423$i = $$15$i;$cnt$024$i = $69;$s$025$i = $s$1$i;$ws$i$0 = $ws$i$7;
        }
       }
      }
     } while(0);
     $72 = ($ws$i$8|0)==(0|0);
     L54: do {
      if ($72) {
       $cnt$3$i = $cnt$1$i;$ws$i$10 = $ws$i$8;
      } else {
       $73 = ($$26$i|0)==(0);
       $74 = ($$1$i|0)==(0);
       $or$cond810$i = $73 | $74;
       if ($or$cond810$i) {
        $cnt$3$i = $cnt$1$i;$ws$i$10 = $ws$i$8;
       } else {
        $$214$i = $$1$i;$$311$i = $$26$i;$cnt$212$i = $cnt$1$i;$s$213$i = $s$018$i;$ws$i$9 = $ws$i$8;
        while(1) {
         $75 = HEAP32[$ws$i$9>>2]|0;
         $76 = (_wcrtomb($s$213$i,$75)|0);
         $77 = (($76) + 1)|0;
         $78 = ($77>>>0)<(2);
         if ($78) {
          break;
         }
         $80 = (($ws$i$9) + 4|0);
         $81 = (($$214$i) + -1)|0;
         $82 = (($s$213$i) + ($76)|0);
         $83 = (($$311$i) - ($76))|0;
         $84 = (($cnt$212$i) + 1)|0;
         $85 = ($$311$i|0)==($76|0);
         $86 = ($81|0)==(0);
         $or$cond8$i = $85 | $86;
         if ($or$cond8$i) {
          $cnt$3$i = $84;$ws$i$10 = $80;
          break L54;
         } else {
          $$214$i = $81;$$311$i = $83;$cnt$212$i = $84;$s$213$i = $82;$ws$i$9 = $80;
         }
        }
        $79 = ($76|0)==(0);
        $$ws$i$9 = $79 ? 0 : $ws$i$9;
        $cnt$212$i$ = $79 ? $cnt$212$i : -1;
        $cnt$3$i = $cnt$212$i$;$ws$i$10 = $$ws$i$9;
       }
      }
     } while(0);
     if ($17) {
      HEAP32[$frm_nxt>>2] = $ws$i$10;
     }
     $87 = ($15|0)==(0|0);
     if (!($87)) {
      __THREW__ = 0;
      (invoke_ii(463,($15|0))|0);
      $88 = __THREW__; __THREW__ = 0;
      $89 = $88&1;
      if ($89) {
       label = 45;
       break;
      }
     }
     if ((($cnt$3$i|0) == 0)) {
      $$0 = 1;
      label = 70;
      break;
     } else if ((($cnt$3$i|0) == -1)) {
      label = 47;
      break;
     }
     $110 = HEAP32[$to_nxt>>2]|0;
     $111 = (($110) + ($cnt$3$i)|0);
     HEAP32[$to_nxt>>2] = $111;
     $112 = ($111|0)==($to_end|0);
     if ($112) {
      label = 68;
      break;
     }
     $113 = ($fend$149|0)==($frm_end|0);
     if ($113) {
      $$pre98 = HEAP32[$frm_nxt>>2]|0;
      $136 = $$pre98;$138 = $111;$fend$3 = $frm_end;
     } else {
      $114 = HEAP32[$7>>2]|0;
      $115 = (_uselocale(($114|0))|0);
      HEAP8[$tmp>>0] = 0;
      $116 = ($115|0)==(0|0);
      if (!($116)) {
       __THREW__ = 0;
       (invoke_ii(463,($115|0))|0);
       $117 = __THREW__; __THREW__ = 0;
       $118 = $117&1;
       if ($118) {
        label = 59;
        break;
       }
      }
      $121 = HEAP32[$to_nxt>>2]|0;
      $122 = ($121|0)==($to_end|0);
      if ($122) {
       $$0 = 1;
       label = 70;
       break;
      } else {
       $124 = $121;$125 = 0;$n$011 = 0;$p$012 = $tmp;
      }
      while(1) {
       $123 = (($124) + 1|0);
       HEAP32[$to_nxt>>2] = $123;
       HEAP8[$124>>0] = $125;
       $126 = ($n$011|0)==(0);
       if ($126) {
        break;
       }
       $127 = (($p$012) + 1|0);
       $$pre99 = HEAP32[$to_nxt>>2]|0;
       $phitmp = (($n$011) + -1)|0;
       $$pre5 = HEAP8[$127>>0]|0;
       $124 = $$pre99;$125 = $$pre5;$n$011 = $phitmp;$p$012 = $127;
      }
      $128 = HEAP32[$frm_nxt>>2]|0;
      $129 = (($128) + 4|0);
      HEAP32[$frm_nxt>>2] = $129;
      $130 = ($129|0)==($frm_end|0);
      L78: do {
       if ($130) {
        $fend$2$lcssa = $frm_end;
       } else {
        $fend$215 = $129;
        while(1) {
         $133 = HEAP32[$fend$215>>2]|0;
         $134 = ($133|0)==(0);
         $132 = (($fend$215) + 4|0);
         if ($134) {
          $fend$2$lcssa = $fend$215;
          break L78;
         }
         $131 = ($132|0)==($frm_end|0);
         if ($131) {
          $fend$2$lcssa = $frm_end;
          break;
         } else {
          $fend$215 = $132;
         }
        }
       }
      } while(0);
      $$pre95 = HEAP32[$to_nxt>>2]|0;
      $136 = $129;$138 = $$pre95;$fend$3 = $fend$2$lcssa;
     }
     $135 = ($136|0)==($frm_end|0);
     $137 = ($138|0)==($to_end|0);
     $or$cond = $135 | $137;
     if ($or$cond) {
      $139 = $136;
      break L1;
     } else {
      $$0148 = $136;$$0247 = $138;$fend$149 = $fend$3;
     }
    }
    if ((label|0) == 45) {
     $90 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
     $91 = tempRet0;
     ___clang_call_terminate($90);
     // unreachable;
    }
    else if ((label|0) == 47) {
     HEAP32[$to_nxt>>2] = $$0247;
     $92 = HEAP32[$frm_nxt>>2]|0;
     $93 = ($$0148|0)==($92|0);
     L91: do {
      if ($93) {
       $$1$lcssa = $$0148;
      } else {
       $$19 = $$0148;$97 = $$0247;
       while(1) {
        $94 = HEAP32[$$19>>2]|0;
        $95 = HEAP32[$7>>2]|0;
        $96 = (_uselocale(($95|0))|0);
        $98 = (_wcrtomb($97,$94)|0);
        $99 = ($96|0)==(0|0);
        if (!($99)) {
         __THREW__ = 0;
         (invoke_ii(463,($96|0))|0);
         $100 = __THREW__; __THREW__ = 0;
         $101 = $100&1;
         if ($101) {
          break;
         }
        }
        $104 = ($98|0)==(-1);
        if ($104) {
         $$1$lcssa = $$19;
         break L91;
        }
        $105 = HEAP32[$to_nxt>>2]|0;
        $106 = (($105) + ($98)|0);
        HEAP32[$to_nxt>>2] = $106;
        $107 = (($$19) + 4|0);
        $108 = HEAP32[$frm_nxt>>2]|0;
        $109 = ($107|0)==($108|0);
        if ($109) {
         $$1$lcssa = $107;
         break L91;
        } else {
         $$19 = $107;$97 = $106;
        }
       }
       $102 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
       $103 = tempRet0;
       ___clang_call_terminate($102);
       // unreachable;
      }
     } while(0);
     HEAP32[$frm_nxt>>2] = $$1$lcssa;
     $$0 = 2;
     STACKTOP = sp;return ($$0|0);
    }
    else if ((label|0) == 59) {
     $119 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
     $120 = tempRet0;
     ___clang_call_terminate($119);
     // unreachable;
    }
    else if ((label|0) == 68) {
     $$pre = HEAP32[$frm_nxt>>2]|0;
     $139 = $$pre;
     break;
    }
    else if ((label|0) == 70) {
     STACKTOP = sp;return ($$0|0);
    }
   }
  }
 } while(0);
 $not$ = ($139|0)!=($frm_end|0);
 $140 = $not$&1;
 $$0 = $140;
 STACKTOP = sp;return ($$0|0);
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE5do_inERS1_PKcS5_RS5_PwS7_RS7_($this,$st,$frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt) {
 $this = $this|0;
 $st = $st|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 var $$0 = 0, $$0155 = 0, $$0254 = 0, $$026$i = 0, $$04$$i = 0, $$0423$i = 0, $$1$i = 0, $$1$lcssa = 0, $$115 = 0, $$15$i = 0, $$2 = 0, $$214$i = 0, $$26$i = 0, $$311$i = 0, $$pr$pre$i = 0, $$pr41$i = 0, $$pre = 0, $$pre111 = 0, $$pre113 = 0, $0 = 0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cnt$024$i = 0, $cnt$1$i = 0, $cnt$212$i = 0, $cnt$3$i = 0, $fend$0$lcssa = 0, $fend$059 = 0, $fend$156 = 0, $fend$2$lcssa = 0, $fend$216 = 0, $fend$3 = 0;
 var $not$ = 0, $not$3 = 0, $or$cond = 0, $or$cond$i = 0, $or$cond22$i = 0, $or$cond7$i = 0, $or$cond8$i = 0, $or$cond810$i = 0, $s$i = 0, $save_state = 0, $storemerge14 = 0, $wbuf$i = 0, $wcs$$i = 0, $wn$$i = 0, $ws$018$i = 0, $ws$025$i = 0, $ws$1$i = 0, $ws$213$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1040|0;
 $wbuf$i = sp + 16|0;
 $s$i = sp + 8|0;
 $save_state = sp;
 $0 = ($frm|0)==($frm_end|0);
 L1: do {
  if ($0) {
   HEAP32[$to_nxt>>2] = $to;
   HEAP32[$frm_nxt>>2] = $frm;
   $109 = $frm;
  } else {
   $fend$059 = $frm;
   while(1) {
    $3 = HEAP8[$fend$059>>0]|0;
    $4 = ($3<<24>>24)==(0);
    $2 = (($fend$059) + 1|0);
    if ($4) {
     $fend$0$lcssa = $fend$059;
     break;
    }
    $1 = ($2|0)==($frm_end|0);
    if ($1) {
     $fend$0$lcssa = $frm_end;
     break;
    } else {
     $fend$059 = $2;
    }
   }
   HEAP32[$to_nxt>>2] = $to;
   HEAP32[$frm_nxt>>2] = $frm;
   $5 = ($to|0)==($to_end|0);
   if ($5) {
    $109 = $frm;
   } else {
    $6 = $to_end;
    $7 = (($this) + 8|0);
    $$0155 = $frm;$$0254 = $to;$fend$156 = $fend$0$lcssa;
    while(1) {
     $8 = $st;
     $9 = $8;
     $10 = HEAP32[$9>>2]|0;
     $11 = (($8) + 4)|0;
     $12 = $11;
     $13 = HEAP32[$12>>2]|0;
     $14 = $save_state;
     $15 = $14;
     HEAP32[$15>>2] = $10;
     $16 = (($14) + 4)|0;
     $17 = $16;
     HEAP32[$17>>2] = $13;
     $18 = $fend$156;
     $19 = $$0155;
     $20 = (($18) - ($19))|0;
     $21 = $$0254;
     $22 = (($6) - ($21))|0;
     $23 = $22 >> 2;
     $24 = HEAP32[$7>>2]|0;
     $25 = (_uselocale(($24|0))|0);
     $26 = HEAP32[$frm_nxt>>2]|0;
     HEAP32[$s$i>>2] = $26;
     $27 = ($$0254|0)!=(0|0);
     $wn$$i = $27 ? $23 : 256;
     $wcs$$i = $27 ? $$0254 : $wbuf$i;
     $28 = ($26|0)==(0|0);
     $29 = ($wn$$i|0)==(0);
     $or$cond22$i = $28 | $29;
     L10: do {
      if ($or$cond22$i) {
       $$1$i = $20;$$26$i = $wn$$i;$44 = $26;$cnt$1$i = 0;$ws$018$i = $wcs$$i;
      } else {
       $$026$i = $20;$$0423$i = $wn$$i;$$pr41$i = $26;$cnt$024$i = 0;$ws$025$i = $wcs$$i;
       while(1) {
        $30 = $$026$i >>> 2;
        $31 = ($30>>>0)>=($$0423$i>>>0);
        $32 = ($$026$i>>>0)>(131);
        $or$cond7$i = $31 | $32;
        if (!($or$cond7$i)) {
         $$1$i = $$026$i;$$26$i = $$0423$i;$44 = $$pr41$i;$cnt$1$i = $cnt$024$i;$ws$018$i = $ws$025$i;
         break L10;
        }
        $$04$$i = $31 ? $$0423$i : $30;
        $33 = (($$026$i) - ($$04$$i))|0;
        $34 = (_mbsrtowcs($ws$025$i,$s$i,$$04$$i,$st)|0);
        $35 = ($34|0)==(-1);
        if ($35) {
         break;
        }
        $36 = ($ws$025$i|0)==($wbuf$i|0);
        if ($36) {
         $$15$i = $$0423$i;$ws$1$i = $wbuf$i;
        } else {
         $37 = (($ws$025$i) + ($34<<2)|0);
         $38 = (($$0423$i) - ($34))|0;
         $$15$i = $38;$ws$1$i = $37;
        }
        $39 = (($34) + ($cnt$024$i))|0;
        $40 = HEAP32[$s$i>>2]|0;
        $41 = ($40|0)==(0|0);
        $42 = ($$15$i|0)==(0);
        $or$cond$i = $41 | $42;
        if ($or$cond$i) {
         $$1$i = $33;$$26$i = $$15$i;$44 = $40;$cnt$1$i = $39;$ws$018$i = $ws$1$i;
         break L10;
        } else {
         $$026$i = $33;$$0423$i = $$15$i;$$pr41$i = $40;$cnt$024$i = $39;$ws$025$i = $ws$1$i;
        }
       }
       $$pr$pre$i = HEAP32[$s$i>>2]|0;
       $$1$i = $33;$$26$i = 0;$44 = $$pr$pre$i;$cnt$1$i = -1;$ws$018$i = $ws$025$i;
      }
     } while(0);
     $43 = ($44|0)==(0|0);
     L20: do {
      if ($43) {
       $58 = 0;$cnt$3$i = $cnt$1$i;
      } else {
       $45 = ($$26$i|0)==(0);
       $46 = ($$1$i|0)==(0);
       $or$cond810$i = $45 | $46;
       if ($or$cond810$i) {
        $58 = $44;$cnt$3$i = $cnt$1$i;
       } else {
        $$214$i = $$1$i;$$311$i = $$26$i;$47 = $44;$cnt$212$i = $cnt$1$i;$ws$213$i = $ws$018$i;
        while(1) {
         $48 = (_mbrtowc($ws$213$i,$47,$$214$i,$st)|0);
         $49 = (($48) + 2)|0;
         $50 = ($49>>>0)<(3);
         if ($50) {
          break;
         }
         $51 = (($47) + ($48)|0);
         HEAP32[$s$i>>2] = $51;
         $52 = (($$214$i) - ($48))|0;
         $53 = (($ws$213$i) + 4|0);
         $54 = (($$311$i) + -1)|0;
         $55 = (($cnt$212$i) + 1)|0;
         $56 = ($54|0)==(0);
         $57 = ($$214$i|0)==($48|0);
         $or$cond8$i = $56 | $57;
         if ($or$cond8$i) {
          $58 = $51;$cnt$3$i = $55;
          break L20;
         } else {
          $$214$i = $52;$$311$i = $54;$47 = $51;$cnt$212$i = $55;$ws$213$i = $53;
         }
        }
        if ((($48|0) == 0)) {
         HEAP32[$s$i>>2] = 0;
         $58 = 0;$cnt$3$i = $cnt$212$i;
         break;
        } else if ((($48|0) == -1)) {
         $58 = $47;$cnt$3$i = -1;
         break;
        } else {
         HEAP32[$st>>2] = 0;
         $58 = $47;$cnt$3$i = $cnt$212$i;
         break;
        }
       }
      }
     } while(0);
     if ($27) {
      HEAP32[$frm_nxt>>2] = $58;
     }
     $59 = ($25|0)==(0|0);
     if (!($59)) {
      __THREW__ = 0;
      (invoke_ii(463,($25|0))|0);
      $60 = __THREW__; __THREW__ = 0;
      $61 = $60&1;
      if ($61) {
       label = 25;
       break;
      }
     }
     if ((($cnt$3$i|0) == -1)) {
      label = 27;
      break;
     } else if ((($cnt$3$i|0) == 0)) {
      $$0 = 2;
      label = 51;
      break;
     }
     $83 = HEAP32[$to_nxt>>2]|0;
     $84 = (($83) + ($cnt$3$i<<2)|0);
     HEAP32[$to_nxt>>2] = $84;
     $85 = ($84|0)==($to_end|0);
     if ($85) {
      label = 49;
      break;
     }
     $86 = ($fend$156|0)==($frm_end|0);
     $$pre113 = HEAP32[$frm_nxt>>2]|0;
     if ($86) {
      $106 = $$pre113;$108 = $84;$fend$3 = $frm_end;
     } else {
      $87 = HEAP32[$7>>2]|0;
      $88 = (_uselocale(($87|0))|0);
      $89 = (_mbrtowc($84,$$pre113,1,$st)|0);
      $90 = ($88|0)==(0|0);
      if (!($90)) {
       __THREW__ = 0;
       (invoke_ii(463,($88|0))|0);
       $91 = __THREW__; __THREW__ = 0;
       $92 = $91&1;
       if ($92) {
        label = 42;
        break;
       }
      }
      $95 = ($89|0)==(0);
      if (!($95)) {
       $$0 = 2;
       label = 51;
       break;
      }
      $96 = HEAP32[$to_nxt>>2]|0;
      $97 = (($96) + 4|0);
      HEAP32[$to_nxt>>2] = $97;
      $98 = HEAP32[$frm_nxt>>2]|0;
      $99 = (($98) + 1|0);
      HEAP32[$frm_nxt>>2] = $99;
      $100 = ($99|0)==($frm_end|0);
      L44: do {
       if ($100) {
        $fend$2$lcssa = $frm_end;
       } else {
        $fend$216 = $99;
        while(1) {
         $103 = HEAP8[$fend$216>>0]|0;
         $104 = ($103<<24>>24)==(0);
         $102 = (($fend$216) + 1|0);
         if ($104) {
          $fend$2$lcssa = $fend$216;
          break L44;
         }
         $101 = ($102|0)==($frm_end|0);
         if ($101) {
          $fend$2$lcssa = $frm_end;
          break;
         } else {
          $fend$216 = $102;
         }
        }
       }
      } while(0);
      $$pre111 = HEAP32[$to_nxt>>2]|0;
      $106 = $99;$108 = $$pre111;$fend$3 = $fend$2$lcssa;
     }
     $105 = ($106|0)==($frm_end|0);
     $107 = ($108|0)==($to_end|0);
     $or$cond = $105 | $107;
     if ($or$cond) {
      $109 = $106;
      break L1;
     } else {
      $$0155 = $106;$$0254 = $108;$fend$156 = $fend$3;
     }
    }
    if ((label|0) == 25) {
     $62 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
     $63 = tempRet0;
     ___clang_call_terminate($62);
     // unreachable;
    }
    else if ((label|0) == 27) {
     HEAP32[$to_nxt>>2] = $$0254;
     $64 = HEAP32[$frm_nxt>>2]|0;
     $65 = ($$0155|0)==($64|0);
     L54: do {
      if ($65) {
       $$1$lcssa = $$0155;
      } else {
       $$115 = $$0155;$storemerge14 = $$0254;
       while(1) {
        $66 = $$115;
        $67 = (($18) - ($66))|0;
        $68 = HEAP32[$7>>2]|0;
        $69 = (_uselocale(($68|0))|0);
        $70 = (_mbrtowc($storemerge14,$$115,$67,$save_state)|0);
        $71 = ($69|0)==(0|0);
        if (!($71)) {
         __THREW__ = 0;
         (invoke_ii(463,($69|0))|0);
         $72 = __THREW__; __THREW__ = 0;
         $73 = $72&1;
         if ($73) {
          label = 30;
          break;
         }
        }
        if ((($70|0) == 0)) {
         $76 = (($$115) + 1|0);
         $$2 = $76;
        } else if ((($70|0) == -1)) {
         label = 33;
         break;
        } else if ((($70|0) == -2)) {
         label = 34;
         break;
        } else {
         $77 = (($$115) + ($70)|0);
         $$2 = $77;
        }
        $78 = HEAP32[$to_nxt>>2]|0;
        $79 = (($78) + 4|0);
        HEAP32[$to_nxt>>2] = $79;
        $80 = HEAP32[$frm_nxt>>2]|0;
        $81 = ($$2|0)==($80|0);
        if ($81) {
         $$1$lcssa = $$2;
         break L54;
        } else {
         $$115 = $$2;$storemerge14 = $79;
        }
       }
       if ((label|0) == 30) {
        $74 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
        $75 = tempRet0;
        ___clang_call_terminate($74);
        // unreachable;
       }
       else if ((label|0) == 33) {
        HEAP32[$frm_nxt>>2] = $$115;
        $$0 = 2;
        STACKTOP = sp;return ($$0|0);
       }
       else if ((label|0) == 34) {
        HEAP32[$frm_nxt>>2] = $$115;
        $$0 = 1;
        STACKTOP = sp;return ($$0|0);
       }
      }
     } while(0);
     HEAP32[$frm_nxt>>2] = $$1$lcssa;
     $not$3 = ($$1$lcssa|0)!=($frm_end|0);
     $82 = $not$3&1;
     $$0 = $82;
     STACKTOP = sp;return ($$0|0);
    }
    else if ((label|0) == 42) {
     $93 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
     $94 = tempRet0;
     ___clang_call_terminate($93);
     // unreachable;
    }
    else if ((label|0) == 49) {
     $$pre = HEAP32[$frm_nxt>>2]|0;
     $109 = $$pre;
     break;
    }
    else if ((label|0) == 51) {
     STACKTOP = sp;return ($$0|0);
    }
   }
  }
 } while(0);
 $not$ = ($109|0)!=($frm_end|0);
 $110 = $not$&1;
 $$0 = $110;
 STACKTOP = sp;return ($$0|0);
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($this,$st,$to,$to_end,$to_nxt) {
 $this = $this|0;
 $st = $st|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$to_nxt>>2] = $to;
 $0 = (($this) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_uselocale(($1|0))|0);
 $3 = ($2|0)==(0|0);
 if ($3) {
  STACKTOP = sp;return 0;
 }
 __THREW__ = 0;
 (invoke_ii(463,($2|0))|0);
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
  $7 = tempRet0;
  ___clang_call_terminate($6);
  // unreachable;
 } else {
  STACKTOP = sp;return 0;
 }
 return 0|0;
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE11do_encodingEv($this) {
 $this = $this|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 __THREW__ = 0;
 $2 = (invoke_ii(463,($1|0))|0);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $20 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
  $21 = tempRet0;
  ___clang_call_terminate($20);
  // unreachable;
 }
 $5 = ($2|0)==(0|0);
 if (!($5)) {
  __THREW__ = 0;
  (invoke_ii(463,($2|0))|0);
  $6 = __THREW__; __THREW__ = 0;
  $7 = $6&1;
  if ($7) {
   $8 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
   $9 = tempRet0;
   ___clang_call_terminate($8);
   // unreachable;
  }
 }
 $10 = HEAP32[$0>>2]|0;
 $11 = ($10|0)==(0|0);
 if ($11) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 __THREW__ = 0;
 $12 = (invoke_ii(463,($10|0))|0);
 $13 = __THREW__; __THREW__ = 0;
 $14 = $13&1;
 if ($14) {
  $20 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
  $21 = tempRet0;
  ___clang_call_terminate($20);
  // unreachable;
 }
 $15 = ($12|0)==(0|0);
 if ($15) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 __THREW__ = 0;
 (invoke_ii(463,($12|0))|0);
 $16 = __THREW__; __THREW__ = 0;
 $17 = $16&1;
 if ($17) {
  $18 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
  $19 = tempRet0;
  ___clang_call_terminate($18);
  // unreachable;
 } else {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE16do_always_noconvEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE9do_lengthERS1_PKcS5_j($this,$st,$frm,$frm_end,$mx) {
 $this = $this|0;
 $st = $st|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $mx = $mx|0;
 var $$016 = 0, $$1 = 0, $$pn = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $nbytes$0$lcssa = 0, $nbytes$07 = 0, $nbytes$1 = 0, $nwchar_t$08 = 0, $or$cond = 0, $or$cond5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($mx|0)==(0);
 $1 = ($frm|0)==($frm_end|0);
 $or$cond5 = $0 | $1;
 if ($or$cond5) {
  $nbytes$0$lcssa = 0;
  STACKTOP = sp;return ($nbytes$0$lcssa|0);
 }
 $2 = $frm_end;
 $3 = (($this) + 8|0);
 $4 = ($st|0)!=(0|0);
 $5 = $4 ? $st : 14240;
 $$016 = $frm;$nbytes$07 = 0;$nwchar_t$08 = 0;
 while(1) {
  $6 = $$016;
  $7 = (($2) - ($6))|0;
  $8 = HEAP32[$3>>2]|0;
  $9 = (_uselocale(($8|0))|0);
  $10 = (_mbrtowc(0,$$016,$7,$5)|0);
  $11 = ($9|0)==(0|0);
  if (!($11)) {
   __THREW__ = 0;
   (invoke_ii(463,($9|0))|0);
   $12 = __THREW__; __THREW__ = 0;
   $13 = $12&1;
   if ($13) {
    label = 5;
    break;
   }
  }
  if ((($10|0) == 0)) {
   $16 = (($$016) + 1|0);
   $$1 = $16;$$pn = 1;
  } else if ((($10|0) == -2) | (($10|0) == -1)) {
   $nbytes$0$lcssa = $nbytes$07;
   label = 10;
   break;
  } else {
   $17 = (($$016) + ($10)|0);
   $$1 = $17;$$pn = $10;
  }
  $nbytes$1 = (($$pn) + ($nbytes$07))|0;
  $18 = (($nwchar_t$08) + 1)|0;
  $19 = ($18>>>0)>=($mx>>>0);
  $20 = ($$1|0)==($frm_end|0);
  $or$cond = $19 | $20;
  if ($or$cond) {
   $nbytes$0$lcssa = $nbytes$1;
   label = 10;
   break;
  } else {
   $$016 = $$1;$nbytes$07 = $nbytes$1;$nwchar_t$08 = $18;
  }
 }
 if ((label|0) == 5) {
  $14 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
  $15 = tempRet0;
  ___clang_call_terminate($14);
  // unreachable;
 }
 else if ((label|0) == 10) {
  STACKTOP = sp;return ($nbytes$0$lcssa|0);
 }
 return 0|0;
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE13do_max_lengthEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $11 = 1;
  STACKTOP = sp;return ($11|0);
 }
 __THREW__ = 0;
 $3 = (invoke_ii(463,($1|0))|0);
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $12 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
  $13 = tempRet0;
  ___clang_call_terminate($12);
  // unreachable;
 }
 $6 = ($3|0)==(0|0);
 if ($6) {
  $11 = 4;
  STACKTOP = sp;return ($11|0);
 }
 __THREW__ = 0;
 (invoke_ii(463,($3|0))|0);
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 if ($8) {
  $9 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
  $10 = tempRet0;
  ___clang_call_terminate($9);
  // unreachable;
 } else {
  $11 = 4;
  STACKTOP = sp;return ($11|0);
 }
 return 0|0;
}
function __ZNSt3__17codecvtIDsc11__mbstate_tED0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($this|0)==(0|0);
 if (!($0)) {
  _free($this);
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE6do_outERS1_PKDsS5_RS5_PcS7_RS7_($this,$0,$frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 var $$0$i = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $_frm_nxt$0 = 0, $_frm_nxt$1 = 0, $_frm_nxt$2 = 0, $_to_nxt$0 = 0, $_to_nxt$1 = 0, $_to_nxt$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $frm_end;
 $2 = ($frm>>>0)<($frm_end>>>0);
 L1: do {
  if ($2) {
   $3 = $to_end;
   $_frm_nxt$0 = $frm;$_to_nxt$0 = $to;
   while(1) {
    $4 = HEAP16[$_frm_nxt$0>>1]|0;
    $5 = $4&65535;
    $6 = ($4&65535)<(128);
    do {
     if ($6) {
      $7 = $_to_nxt$0;
      $8 = (($3) - ($7))|0;
      $9 = ($8|0)<(1);
      if ($9) {
       $$0$i = 1;$_frm_nxt$2 = $_frm_nxt$0;$_to_nxt$2 = $_to_nxt$0;
       break L1;
      }
      $10 = $4&255;
      $11 = (($_to_nxt$0) + 1|0);
      HEAP8[$_to_nxt$0>>0] = $10;
      $_frm_nxt$1 = $_frm_nxt$0;$_to_nxt$1 = $11;
     } else {
      $12 = ($4&65535)<(2048);
      if ($12) {
       $13 = $_to_nxt$0;
       $14 = (($3) - ($13))|0;
       $15 = ($14|0)<(2);
       if ($15) {
        $$0$i = 1;$_frm_nxt$2 = $_frm_nxt$0;$_to_nxt$2 = $_to_nxt$0;
        break L1;
       }
       $16 = $5 >>> 6;
       $17 = $16 | 192;
       $18 = $17&255;
       $19 = (($_to_nxt$0) + 1|0);
       HEAP8[$_to_nxt$0>>0] = $18;
       $20 = $5 & 63;
       $21 = $20 | 128;
       $22 = $21&255;
       $23 = (($_to_nxt$0) + 2|0);
       HEAP8[$19>>0] = $22;
       $_frm_nxt$1 = $_frm_nxt$0;$_to_nxt$1 = $23;
       break;
      }
      $24 = ($4&65535)<(55296);
      if ($24) {
       $25 = $_to_nxt$0;
       $26 = (($3) - ($25))|0;
       $27 = ($26|0)<(3);
       if ($27) {
        $$0$i = 1;$_frm_nxt$2 = $_frm_nxt$0;$_to_nxt$2 = $_to_nxt$0;
        break L1;
       }
       $28 = $5 >>> 12;
       $29 = $28 | 224;
       $30 = $29&255;
       $31 = (($_to_nxt$0) + 1|0);
       HEAP8[$_to_nxt$0>>0] = $30;
       $32 = $5 >>> 6;
       $33 = $32 & 63;
       $34 = $33 | 128;
       $35 = $34&255;
       $36 = (($_to_nxt$0) + 2|0);
       HEAP8[$31>>0] = $35;
       $37 = $5 & 63;
       $38 = $37 | 128;
       $39 = $38&255;
       $40 = (($_to_nxt$0) + 3|0);
       HEAP8[$36>>0] = $39;
       $_frm_nxt$1 = $_frm_nxt$0;$_to_nxt$1 = $40;
       break;
      }
      $41 = ($4&65535)<(56320);
      if (!($41)) {
       $83 = ($4&65535)<(57344);
       if ($83) {
        $$0$i = 2;$_frm_nxt$2 = $_frm_nxt$0;$_to_nxt$2 = $_to_nxt$0;
        break L1;
       }
       $84 = $_to_nxt$0;
       $85 = (($3) - ($84))|0;
       $86 = ($85|0)<(3);
       if ($86) {
        $$0$i = 1;$_frm_nxt$2 = $_frm_nxt$0;$_to_nxt$2 = $_to_nxt$0;
        break L1;
       }
       $87 = $5 >>> 12;
       $88 = $87 | 224;
       $89 = $88&255;
       $90 = (($_to_nxt$0) + 1|0);
       HEAP8[$_to_nxt$0>>0] = $89;
       $91 = $5 >>> 6;
       $92 = $91 & 63;
       $93 = $92 | 128;
       $94 = $93&255;
       $95 = (($_to_nxt$0) + 2|0);
       HEAP8[$90>>0] = $94;
       $96 = $5 & 63;
       $97 = $96 | 128;
       $98 = $97&255;
       $99 = (($_to_nxt$0) + 3|0);
       HEAP8[$95>>0] = $98;
       $_frm_nxt$1 = $_frm_nxt$0;$_to_nxt$1 = $99;
       break;
      }
      $42 = $_frm_nxt$0;
      $43 = (($1) - ($42))|0;
      $44 = ($43|0)<(4);
      if ($44) {
       $$0$i = 1;$_frm_nxt$2 = $_frm_nxt$0;$_to_nxt$2 = $_to_nxt$0;
       break L1;
      }
      $45 = (($_frm_nxt$0) + 2|0);
      $46 = HEAP16[$45>>1]|0;
      $47 = $46&65535;
      $48 = $47 & 64512;
      $49 = ($48|0)==(56320);
      if (!($49)) {
       $$0$i = 2;$_frm_nxt$2 = $_frm_nxt$0;$_to_nxt$2 = $_to_nxt$0;
       break L1;
      }
      $50 = $_to_nxt$0;
      $51 = (($3) - ($50))|0;
      $52 = ($51|0)<(4);
      if ($52) {
       $$0$i = 1;$_frm_nxt$2 = $_frm_nxt$0;$_to_nxt$2 = $_to_nxt$0;
       break L1;
      }
      $53 = $5 & 960;
      $54 = $53 << 10;
      $55 = (($54) + 65536)|0;
      $56 = ($55>>>0)>(1114111);
      if ($56) {
       $$0$i = 2;$_frm_nxt$2 = $_frm_nxt$0;$_to_nxt$2 = $_to_nxt$0;
       break L1;
      }
      $57 = $53 >>> 6;
      $58 = (($57) + 1)|0;
      $59 = $58 >>> 2;
      $60 = $59 | 240;
      $61 = $60&255;
      $62 = (($_to_nxt$0) + 1|0);
      HEAP8[$_to_nxt$0>>0] = $61;
      $63 = $58 << 4;
      $64 = $63 & 48;
      $65 = $5 >>> 2;
      $66 = $65 & 15;
      $67 = $66 | $64;
      $68 = $67 | 128;
      $69 = $68&255;
      $70 = (($_to_nxt$0) + 2|0);
      HEAP8[$62>>0] = $69;
      $71 = $5 << 4;
      $72 = $71 & 48;
      $73 = $47 >>> 6;
      $74 = $73 & 15;
      $75 = $72 | $74;
      $76 = $75 | 128;
      $77 = $76&255;
      $78 = (($_to_nxt$0) + 3|0);
      HEAP8[$70>>0] = $77;
      $79 = $47 & 63;
      $80 = $79 | 128;
      $81 = $80&255;
      $82 = (($_to_nxt$0) + 4|0);
      HEAP8[$78>>0] = $81;
      $_frm_nxt$1 = $45;$_to_nxt$1 = $82;
     }
    } while(0);
    $100 = (($_frm_nxt$1) + 2|0);
    $101 = ($100>>>0)<($frm_end>>>0);
    if ($101) {
     $_frm_nxt$0 = $100;$_to_nxt$0 = $_to_nxt$1;
    } else {
     $$0$i = 0;$_frm_nxt$2 = $100;$_to_nxt$2 = $_to_nxt$1;
     break;
    }
   }
  } else {
   $$0$i = 0;$_frm_nxt$2 = $frm;$_to_nxt$2 = $to;
  }
 } while(0);
 $102 = $_frm_nxt$2;
 $103 = $frm;
 $104 = (($102) - ($103))|0;
 $105 = $104 >> 1;
 $106 = (($frm) + ($105<<1)|0);
 HEAP32[$frm_nxt>>2] = $106;
 $107 = $_to_nxt$2;
 $108 = $to;
 $109 = (($107) - ($108))|0;
 $110 = (($to) + ($109)|0);
 HEAP32[$to_nxt>>2] = $110;
 STACKTOP = sp;return ($$0$i|0);
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE5do_inERS1_PKcS5_RS5_PDsS7_RS7_($this,$0,$frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 var $$0$i = 0, $$off$i = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $_frm_nxt$0 = 0;
 var $_frm_nxt$1 = 0, $_frm_nxt$2 = 0, $_frm_nxt$3 = 0, $_to_nxt$0 = 0, $_to_nxt$1 = 0, $_to_nxt$2 = 0, $_to_nxt$3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($frm>>>0)<($frm_end>>>0);
 L1: do {
  if ($1) {
   $2 = $frm_end;
   $3 = $to_end;
   $_frm_nxt$0 = $frm;$_to_nxt$0 = $to;
   while(1) {
    $4 = ($_to_nxt$0>>>0)<($to_end>>>0);
    if (!($4)) {
     $_frm_nxt$2 = $_frm_nxt$0;$_to_nxt$2 = $_to_nxt$0;
     label = 31;
     break L1;
    }
    $5 = HEAP8[$_frm_nxt$0>>0]|0;
    $6 = $5&255;
    $7 = ($5<<24>>24)>(-1);
    do {
     if ($7) {
      $8 = $5&255;
      HEAP16[$_to_nxt$0>>1] = $8;
      $9 = (($_frm_nxt$0) + 1|0);
      $_frm_nxt$1 = $9;$_to_nxt$1 = $_to_nxt$0;
     } else {
      $10 = ($5&255)<(194);
      if ($10) {
       $$0$i = 2;$_frm_nxt$3 = $_frm_nxt$0;$_to_nxt$3 = $_to_nxt$0;
       break L1;
      }
      $11 = ($5&255)<(224);
      if ($11) {
       $12 = $_frm_nxt$0;
       $13 = (($2) - ($12))|0;
       $14 = ($13|0)<(2);
       if ($14) {
        $$0$i = 1;$_frm_nxt$3 = $_frm_nxt$0;$_to_nxt$3 = $_to_nxt$0;
        break L1;
       }
       $15 = (($_frm_nxt$0) + 1|0);
       $16 = HEAP8[$15>>0]|0;
       $17 = $16&255;
       $18 = $17 & 192;
       $19 = ($18|0)==(128);
       if (!($19)) {
        $$0$i = 2;$_frm_nxt$3 = $_frm_nxt$0;$_to_nxt$3 = $_to_nxt$0;
        break L1;
       }
       $20 = $6 << 6;
       $21 = $17 & 63;
       $22 = $20 & 1984;
       $23 = $21 | $22;
       $24 = $23&65535;
       HEAP16[$_to_nxt$0>>1] = $24;
       $25 = (($_frm_nxt$0) + 2|0);
       $_frm_nxt$1 = $25;$_to_nxt$1 = $_to_nxt$0;
       break;
      }
      $26 = ($5&255)<(240);
      if ($26) {
       $27 = $_frm_nxt$0;
       $28 = (($2) - ($27))|0;
       $29 = ($28|0)<(3);
       if ($29) {
        $$0$i = 1;$_frm_nxt$3 = $_frm_nxt$0;$_to_nxt$3 = $_to_nxt$0;
        break L1;
       }
       $30 = (($_frm_nxt$0) + 1|0);
       $31 = HEAP8[$30>>0]|0;
       $32 = (($_frm_nxt$0) + 2|0);
       $33 = HEAP8[$32>>0]|0;
       if ((($6|0) == 237)) {
        $36 = $31 & -32;
        $37 = ($36<<24>>24)==(-128);
        if (!($37)) {
         $$0$i = 2;$_frm_nxt$3 = $_frm_nxt$0;$_to_nxt$3 = $_to_nxt$0;
         break L1;
        }
       } else if ((($6|0) == 224)) {
        $34 = $31 & -32;
        $35 = ($34<<24>>24)==(-96);
        if (!($35)) {
         $$0$i = 2;$_frm_nxt$3 = $_frm_nxt$0;$_to_nxt$3 = $_to_nxt$0;
         break L1;
        }
       } else {
        $38 = $31 & -64;
        $39 = ($38<<24>>24)==(-128);
        if (!($39)) {
         $$0$i = 2;$_frm_nxt$3 = $_frm_nxt$0;$_to_nxt$3 = $_to_nxt$0;
         break L1;
        }
       }
       $40 = $33&255;
       $41 = $40 & 192;
       $42 = ($41|0)==(128);
       if (!($42)) {
        $$0$i = 2;$_frm_nxt$3 = $_frm_nxt$0;$_to_nxt$3 = $_to_nxt$0;
        break L1;
       }
       $43 = $6 << 12;
       $44 = $31&255;
       $45 = $44 << 6;
       $46 = $45 & 4032;
       $47 = $46 | $43;
       $48 = $40 & 63;
       $49 = $47 | $48;
       $50 = $49&65535;
       HEAP16[$_to_nxt$0>>1] = $50;
       $51 = (($_frm_nxt$0) + 3|0);
       $_frm_nxt$1 = $51;$_to_nxt$1 = $_to_nxt$0;
       break;
      }
      $52 = ($5&255)<(245);
      if (!($52)) {
       $$0$i = 2;$_frm_nxt$3 = $_frm_nxt$0;$_to_nxt$3 = $_to_nxt$0;
       break L1;
      }
      $53 = $_frm_nxt$0;
      $54 = (($2) - ($53))|0;
      $55 = ($54|0)<(4);
      if ($55) {
       $$0$i = 1;$_frm_nxt$3 = $_frm_nxt$0;$_to_nxt$3 = $_to_nxt$0;
       break L1;
      }
      $56 = (($_frm_nxt$0) + 1|0);
      $57 = HEAP8[$56>>0]|0;
      $58 = (($_frm_nxt$0) + 2|0);
      $59 = HEAP8[$58>>0]|0;
      $60 = (($_frm_nxt$0) + 3|0);
      $61 = HEAP8[$60>>0]|0;
      if ((($6|0) == 240)) {
       $$off$i = (($57) + 112)<<24>>24;
       $62 = ($$off$i&255)<(48);
       if (!($62)) {
        $$0$i = 2;$_frm_nxt$3 = $_frm_nxt$0;$_to_nxt$3 = $_to_nxt$0;
        break L1;
       }
      } else if ((($6|0) == 244)) {
       $63 = $57 & -16;
       $64 = ($63<<24>>24)==(-128);
       if (!($64)) {
        $$0$i = 2;$_frm_nxt$3 = $_frm_nxt$0;$_to_nxt$3 = $_to_nxt$0;
        break L1;
       }
      } else {
       $65 = $57 & -64;
       $66 = ($65<<24>>24)==(-128);
       if (!($66)) {
        $$0$i = 2;$_frm_nxt$3 = $_frm_nxt$0;$_to_nxt$3 = $_to_nxt$0;
        break L1;
       }
      }
      $67 = $59&255;
      $68 = $67 & 192;
      $69 = ($68|0)==(128);
      if (!($69)) {
       $$0$i = 2;$_frm_nxt$3 = $_frm_nxt$0;$_to_nxt$3 = $_to_nxt$0;
       break L1;
      }
      $70 = $61&255;
      $71 = $70 & 192;
      $72 = ($71|0)==(128);
      if (!($72)) {
       $$0$i = 2;$_frm_nxt$3 = $_frm_nxt$0;$_to_nxt$3 = $_to_nxt$0;
       break L1;
      }
      $73 = $_to_nxt$0;
      $74 = (($3) - ($73))|0;
      $75 = ($74|0)<(4);
      if ($75) {
       $$0$i = 1;$_frm_nxt$3 = $_frm_nxt$0;$_to_nxt$3 = $_to_nxt$0;
       break L1;
      }
      $76 = $6 & 7;
      $77 = $76 << 18;
      $78 = $57&255;
      $79 = $78 << 12;
      $80 = $79 & 196608;
      $81 = $80 | $77;
      $82 = ($81>>>0)>(1114111);
      if ($82) {
       $$0$i = 2;$_frm_nxt$3 = $_frm_nxt$0;$_to_nxt$3 = $_to_nxt$0;
       break L1;
      }
      $83 = $70 & 63;
      $84 = $67 << 6;
      $85 = $76 << 2;
      $86 = $78 >>> 4;
      $87 = $86 & 3;
      $88 = $87 | $85;
      $89 = $88 << 6;
      $90 = (($89) + 16320)|0;
      $91 = $78 << 2;
      $92 = $91 & 60;
      $93 = $67 >>> 4;
      $94 = $93 & 3;
      $95 = $92 | $94;
      $96 = $95 | $90;
      $97 = $96 | 55296;
      $98 = $97&65535;
      HEAP16[$_to_nxt$0>>1] = $98;
      $99 = $84 & 960;
      $100 = $83 | $99;
      $101 = $100 | 56320;
      $102 = $101&65535;
      $103 = (($_to_nxt$0) + 2|0);
      HEAP16[$103>>1] = $102;
      $104 = (($_frm_nxt$0) + 4|0);
      $_frm_nxt$1 = $104;$_to_nxt$1 = $103;
     }
    } while(0);
    $105 = (($_to_nxt$1) + 2|0);
    $106 = ($_frm_nxt$1>>>0)<($frm_end>>>0);
    if ($106) {
     $_frm_nxt$0 = $_frm_nxt$1;$_to_nxt$0 = $105;
    } else {
     $_frm_nxt$2 = $_frm_nxt$1;$_to_nxt$2 = $105;
     label = 31;
     break;
    }
   }
  } else {
   $_frm_nxt$2 = $frm;$_to_nxt$2 = $to;
   label = 31;
  }
 } while(0);
 if ((label|0) == 31) {
  $107 = ($_frm_nxt$2>>>0)<($frm_end>>>0);
  $108 = $107&1;
  $$0$i = $108;$_frm_nxt$3 = $_frm_nxt$2;$_to_nxt$3 = $_to_nxt$2;
 }
 $109 = $_frm_nxt$3;
 $110 = $frm;
 $111 = (($109) - ($110))|0;
 $112 = (($frm) + ($111)|0);
 HEAP32[$frm_nxt>>2] = $112;
 $113 = $_to_nxt$3;
 $114 = $to;
 $115 = (($113) - ($114))|0;
 $116 = $115 >> 1;
 $117 = (($to) + ($116<<1)|0);
 HEAP32[$to_nxt>>2] = $117;
 STACKTOP = sp;return ($$0$i|0);
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($this,$0,$to,$1,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $to = $to|0;
 $1 = $1|0;
 $to_nxt = $to_nxt|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$to_nxt>>2] = $to;
 STACKTOP = sp;return 3;
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE11do_encodingEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE16do_always_noconvEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE9do_lengthERS1_PKcS5_j($this,$0,$frm,$frm_end,$mx) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $mx = $mx|0;
 var $$0$i = 0, $$off$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $9 = 0, $frm_nxt$1$lcssa$i = 0, $frm_nxt$115$i = 0, $frm_nxt$2$i = 0, $nchar16_t$014$i = 0, $nchar16_t$1$i = 0, $or$cond$i = 0, $or$cond13$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($frm>>>0)<($frm_end>>>0);
 $2 = ($mx|0)!=(0);
 $or$cond13$i = $1 & $2;
 L1: do {
  if ($or$cond13$i) {
   $3 = $frm_end;
   $frm_nxt$115$i = $frm;$nchar16_t$014$i = 0;
   L3: while(1) {
    $4 = HEAP8[$frm_nxt$115$i>>0]|0;
    $5 = $4&255;
    $6 = ($4<<24>>24)>(-1);
    do {
     if ($6) {
      $7 = (($frm_nxt$115$i) + 1|0);
      $frm_nxt$2$i = $7;$nchar16_t$1$i = $nchar16_t$014$i;
     } else {
      $8 = ($4&255)<(194);
      if ($8) {
       $frm_nxt$1$lcssa$i = $frm_nxt$115$i;
       break L1;
      }
      $9 = ($4&255)<(224);
      if ($9) {
       $10 = $frm_nxt$115$i;
       $11 = (($3) - ($10))|0;
       $12 = ($11|0)<(2);
       if ($12) {
        $frm_nxt$1$lcssa$i = $frm_nxt$115$i;
        break L1;
       }
       $13 = (($frm_nxt$115$i) + 1|0);
       $14 = HEAP8[$13>>0]|0;
       $15 = $14 & -64;
       $16 = ($15<<24>>24)==(-128);
       if (!($16)) {
        $frm_nxt$1$lcssa$i = $frm_nxt$115$i;
        break L1;
       }
       $17 = (($frm_nxt$115$i) + 2|0);
       $frm_nxt$2$i = $17;$nchar16_t$1$i = $nchar16_t$014$i;
       break;
      }
      $18 = ($4&255)<(240);
      if ($18) {
       $19 = $frm_nxt$115$i;
       $20 = (($3) - ($19))|0;
       $21 = ($20|0)<(3);
       if ($21) {
        $frm_nxt$1$lcssa$i = $frm_nxt$115$i;
        break L1;
       }
       $22 = (($frm_nxt$115$i) + 1|0);
       $23 = HEAP8[$22>>0]|0;
       $24 = (($frm_nxt$115$i) + 2|0);
       $25 = HEAP8[$24>>0]|0;
       if ((($5|0) == 224)) {
        $26 = $23 & -32;
        $27 = ($26<<24>>24)==(-96);
        if (!($27)) {
         label = 14;
         break L3;
        }
       } else if ((($5|0) == 237)) {
        $30 = $23 & -32;
        $31 = ($30<<24>>24)==(-128);
        if (!($31)) {
         label = 16;
         break L3;
        }
       } else {
        $34 = $23 & -64;
        $35 = ($34<<24>>24)==(-128);
        if (!($35)) {
         label = 18;
         break L3;
        }
       }
       $38 = $25 & -64;
       $39 = ($38<<24>>24)==(-128);
       if (!($39)) {
        $frm_nxt$1$lcssa$i = $frm_nxt$115$i;
        break L1;
       }
       $40 = (($frm_nxt$115$i) + 3|0);
       $frm_nxt$2$i = $40;$nchar16_t$1$i = $nchar16_t$014$i;
       break;
      }
      $41 = ($4&255)<(245);
      if (!($41)) {
       $frm_nxt$1$lcssa$i = $frm_nxt$115$i;
       break L1;
      }
      $42 = $frm_nxt$115$i;
      $43 = (($3) - ($42))|0;
      $44 = ($43|0)<(4);
      if ($44) {
       $frm_nxt$1$lcssa$i = $frm_nxt$115$i;
       break L1;
      }
      $45 = (($mx) - ($nchar16_t$014$i))|0;
      $46 = ($45>>>0)<(2);
      if ($46) {
       $frm_nxt$1$lcssa$i = $frm_nxt$115$i;
       break L1;
      }
      $47 = (($frm_nxt$115$i) + 1|0);
      $48 = HEAP8[$47>>0]|0;
      $49 = (($frm_nxt$115$i) + 2|0);
      $50 = HEAP8[$49>>0]|0;
      $51 = (($frm_nxt$115$i) + 3|0);
      $52 = HEAP8[$51>>0]|0;
      if ((($5|0) == 240)) {
       $$off$i = (($48) + 112)<<24>>24;
       $53 = ($$off$i&255)<(48);
       if (!($53)) {
        label = 26;
        break L3;
       }
      } else if ((($5|0) == 244)) {
       $56 = $48 & -16;
       $57 = ($56<<24>>24)==(-128);
       if (!($57)) {
        label = 28;
        break L3;
       }
      } else {
       $60 = $48 & -64;
       $61 = ($60<<24>>24)==(-128);
       if (!($61)) {
        label = 30;
        break L3;
       }
      }
      $64 = $50 & -64;
      $65 = ($64<<24>>24)==(-128);
      if (!($65)) {
       $frm_nxt$1$lcssa$i = $frm_nxt$115$i;
       break L1;
      }
      $66 = $52 & -64;
      $67 = ($66<<24>>24)==(-128);
      if (!($67)) {
       $frm_nxt$1$lcssa$i = $frm_nxt$115$i;
       break L1;
      }
      $68 = $5 << 18;
      $69 = $68 & 1835008;
      $70 = $48&255;
      $71 = $70 << 12;
      $72 = $71 & 196608;
      $73 = $72 | $69;
      $74 = ($73>>>0)>(1114111);
      if ($74) {
       $frm_nxt$1$lcssa$i = $frm_nxt$115$i;
       break L1;
      }
      $75 = (($nchar16_t$014$i) + 1)|0;
      $76 = (($frm_nxt$115$i) + 4|0);
      $frm_nxt$2$i = $76;$nchar16_t$1$i = $75;
     }
    } while(0);
    $77 = (($nchar16_t$1$i) + 1)|0;
    $78 = ($frm_nxt$2$i>>>0)<($frm_end>>>0);
    $79 = ($77>>>0)<($mx>>>0);
    $or$cond$i = $78 & $79;
    if ($or$cond$i) {
     $frm_nxt$115$i = $frm_nxt$2$i;$nchar16_t$014$i = $77;
    } else {
     $frm_nxt$1$lcssa$i = $frm_nxt$2$i;
     break L1;
    }
   }
   if ((label|0) == 14) {
    $28 = $frm;
    $29 = (($19) - ($28))|0;
    $$0$i = $29;
    STACKTOP = sp;return ($$0$i|0);
   }
   else if ((label|0) == 16) {
    $32 = $frm;
    $33 = (($19) - ($32))|0;
    $$0$i = $33;
    STACKTOP = sp;return ($$0$i|0);
   }
   else if ((label|0) == 18) {
    $36 = $frm;
    $37 = (($19) - ($36))|0;
    $$0$i = $37;
    STACKTOP = sp;return ($$0$i|0);
   }
   else if ((label|0) == 26) {
    $54 = $frm;
    $55 = (($42) - ($54))|0;
    $$0$i = $55;
    STACKTOP = sp;return ($$0$i|0);
   }
   else if ((label|0) == 28) {
    $58 = $frm;
    $59 = (($42) - ($58))|0;
    $$0$i = $59;
    STACKTOP = sp;return ($$0$i|0);
   }
   else if ((label|0) == 30) {
    $62 = $frm;
    $63 = (($42) - ($62))|0;
    $$0$i = $63;
    STACKTOP = sp;return ($$0$i|0);
   }
  } else {
   $frm_nxt$1$lcssa$i = $frm;
  }
 } while(0);
 $80 = $frm_nxt$1$lcssa$i;
 $81 = $frm;
 $82 = (($80) - ($81))|0;
 $$0$i = $82;
 STACKTOP = sp;return ($$0$i|0);
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE13do_max_lengthEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 4;
}
function __ZNSt3__17codecvtIDic11__mbstate_tED0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($this|0)==(0|0);
 if (!($0)) {
  _free($this);
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE6do_outERS1_PKDiS5_RS5_PcS7_RS7_($this,$0,$frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 var $$0$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $8 = 0, $9 = 0, $_frm_nxt$0 = 0, $_frm_nxt$1 = 0, $_to_nxt$0 = 0, $_to_nxt$1 = 0, $_to_nxt$2 = 0, $or$cond$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($frm>>>0)<($frm_end>>>0);
 L1: do {
  if ($1) {
   $2 = $to_end;
   $_frm_nxt$0 = $frm;$_to_nxt$0 = $to;
   while(1) {
    $3 = HEAP32[$_frm_nxt$0>>2]|0;
    $4 = $3 & -2048;
    $5 = ($4|0)==(55296);
    $6 = ($3>>>0)>(1114111);
    $or$cond$i = $5 | $6;
    if ($or$cond$i) {
     $$0$i = 2;$_frm_nxt$1 = $_frm_nxt$0;$_to_nxt$2 = $_to_nxt$0;
     break L1;
    }
    $7 = ($3>>>0)<(128);
    do {
     if ($7) {
      $8 = $_to_nxt$0;
      $9 = (($2) - ($8))|0;
      $10 = ($9|0)<(1);
      if ($10) {
       $$0$i = 1;$_frm_nxt$1 = $_frm_nxt$0;$_to_nxt$2 = $_to_nxt$0;
       break L1;
      }
      $11 = $3&255;
      $12 = (($_to_nxt$0) + 1|0);
      HEAP8[$_to_nxt$0>>0] = $11;
      $_to_nxt$1 = $12;
     } else {
      $13 = ($3>>>0)<(2048);
      if ($13) {
       $14 = $_to_nxt$0;
       $15 = (($2) - ($14))|0;
       $16 = ($15|0)<(2);
       if ($16) {
        $$0$i = 1;$_frm_nxt$1 = $_frm_nxt$0;$_to_nxt$2 = $_to_nxt$0;
        break L1;
       }
       $17 = $3 >>> 6;
       $18 = $17 | 192;
       $19 = $18&255;
       $20 = (($_to_nxt$0) + 1|0);
       HEAP8[$_to_nxt$0>>0] = $19;
       $21 = $3 & 63;
       $22 = $21 | 128;
       $23 = $22&255;
       $24 = (($_to_nxt$0) + 2|0);
       HEAP8[$20>>0] = $23;
       $_to_nxt$1 = $24;
       break;
      }
      $25 = ($3>>>0)<(65536);
      $26 = $_to_nxt$0;
      $27 = (($2) - ($26))|0;
      if ($25) {
       $28 = ($27|0)<(3);
       if ($28) {
        $$0$i = 1;$_frm_nxt$1 = $_frm_nxt$0;$_to_nxt$2 = $_to_nxt$0;
        break L1;
       }
       $29 = $3 >>> 12;
       $30 = $29 | 224;
       $31 = $30&255;
       $32 = (($_to_nxt$0) + 1|0);
       HEAP8[$_to_nxt$0>>0] = $31;
       $33 = $3 >>> 6;
       $34 = $33 & 63;
       $35 = $34 | 128;
       $36 = $35&255;
       $37 = (($_to_nxt$0) + 2|0);
       HEAP8[$32>>0] = $36;
       $38 = $3 & 63;
       $39 = $38 | 128;
       $40 = $39&255;
       $41 = (($_to_nxt$0) + 3|0);
       HEAP8[$37>>0] = $40;
       $_to_nxt$1 = $41;
       break;
      } else {
       $42 = ($27|0)<(4);
       if ($42) {
        $$0$i = 1;$_frm_nxt$1 = $_frm_nxt$0;$_to_nxt$2 = $_to_nxt$0;
        break L1;
       }
       $43 = $3 >>> 18;
       $44 = $43 | 240;
       $45 = $44&255;
       $46 = (($_to_nxt$0) + 1|0);
       HEAP8[$_to_nxt$0>>0] = $45;
       $47 = $3 >>> 12;
       $48 = $47 & 63;
       $49 = $48 | 128;
       $50 = $49&255;
       $51 = (($_to_nxt$0) + 2|0);
       HEAP8[$46>>0] = $50;
       $52 = $3 >>> 6;
       $53 = $52 & 63;
       $54 = $53 | 128;
       $55 = $54&255;
       $56 = (($_to_nxt$0) + 3|0);
       HEAP8[$51>>0] = $55;
       $57 = $3 & 63;
       $58 = $57 | 128;
       $59 = $58&255;
       $60 = (($_to_nxt$0) + 4|0);
       HEAP8[$56>>0] = $59;
       $_to_nxt$1 = $60;
       break;
      }
     }
    } while(0);
    $61 = (($_frm_nxt$0) + 4|0);
    $62 = ($61>>>0)<($frm_end>>>0);
    if ($62) {
     $_frm_nxt$0 = $61;$_to_nxt$0 = $_to_nxt$1;
    } else {
     $$0$i = 0;$_frm_nxt$1 = $61;$_to_nxt$2 = $_to_nxt$1;
     break;
    }
   }
  } else {
   $$0$i = 0;$_frm_nxt$1 = $frm;$_to_nxt$2 = $to;
  }
 } while(0);
 $63 = $_frm_nxt$1;
 $64 = $frm;
 $65 = (($63) - ($64))|0;
 $66 = $65 >> 2;
 $67 = (($frm) + ($66<<2)|0);
 HEAP32[$frm_nxt>>2] = $67;
 $68 = $_to_nxt$2;
 $69 = $to;
 $70 = (($68) - ($69))|0;
 $71 = (($to) + ($70)|0);
 HEAP32[$to_nxt>>2] = $71;
 STACKTOP = sp;return ($$0$i|0);
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE5do_inERS1_PKcS5_RS5_PDiS7_RS7_($this,$0,$frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 var $$0$i = 0, $$off$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $_frm_nxt$0 = 0, $_frm_nxt$1 = 0, $_frm_nxt$2 = 0;
 var $_frm_nxt$3 = 0, $_to_nxt$0 = 0, $_to_nxt$1 = 0, $_to_nxt$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($frm>>>0)<($frm_end>>>0);
 L1: do {
  if ($1) {
   $2 = $frm_end;
   $_frm_nxt$0 = $frm;$_to_nxt$0 = $to;
   while(1) {
    $3 = ($_to_nxt$0>>>0)<($to_end>>>0);
    if (!($3)) {
     $_frm_nxt$2 = $_frm_nxt$0;$_to_nxt$1 = $_to_nxt$0;
     label = 30;
     break L1;
    }
    $4 = HEAP8[$_frm_nxt$0>>0]|0;
    $5 = $4&255;
    $6 = ($4<<24>>24)>(-1);
    do {
     if ($6) {
      HEAP32[$_to_nxt$0>>2] = $5;
      $7 = (($_frm_nxt$0) + 1|0);
      $_frm_nxt$1 = $7;
     } else {
      $8 = ($4&255)<(194);
      if ($8) {
       $$0$i = 2;$_frm_nxt$3 = $_frm_nxt$0;$_to_nxt$2 = $_to_nxt$0;
       break L1;
      }
      $9 = ($4&255)<(224);
      if ($9) {
       $10 = $_frm_nxt$0;
       $11 = (($2) - ($10))|0;
       $12 = ($11|0)<(2);
       if ($12) {
        $$0$i = 1;$_frm_nxt$3 = $_frm_nxt$0;$_to_nxt$2 = $_to_nxt$0;
        break L1;
       }
       $13 = (($_frm_nxt$0) + 1|0);
       $14 = HEAP8[$13>>0]|0;
       $15 = $14&255;
       $16 = $15 & 192;
       $17 = ($16|0)==(128);
       if (!($17)) {
        $$0$i = 2;$_frm_nxt$3 = $_frm_nxt$0;$_to_nxt$2 = $_to_nxt$0;
        break L1;
       }
       $18 = $5 << 6;
       $19 = $15 & 63;
       $20 = $18 & 1984;
       $21 = $19 | $20;
       HEAP32[$_to_nxt$0>>2] = $21;
       $22 = (($_frm_nxt$0) + 2|0);
       $_frm_nxt$1 = $22;
       break;
      }
      $23 = ($4&255)<(240);
      if ($23) {
       $24 = $_frm_nxt$0;
       $25 = (($2) - ($24))|0;
       $26 = ($25|0)<(3);
       if ($26) {
        $$0$i = 1;$_frm_nxt$3 = $_frm_nxt$0;$_to_nxt$2 = $_to_nxt$0;
        break L1;
       }
       $27 = (($_frm_nxt$0) + 1|0);
       $28 = HEAP8[$27>>0]|0;
       $29 = (($_frm_nxt$0) + 2|0);
       $30 = HEAP8[$29>>0]|0;
       if ((($5|0) == 237)) {
        $33 = $28 & -32;
        $34 = ($33<<24>>24)==(-128);
        if (!($34)) {
         $$0$i = 2;$_frm_nxt$3 = $_frm_nxt$0;$_to_nxt$2 = $_to_nxt$0;
         break L1;
        }
       } else if ((($5|0) == 224)) {
        $31 = $28 & -32;
        $32 = ($31<<24>>24)==(-96);
        if (!($32)) {
         $$0$i = 2;$_frm_nxt$3 = $_frm_nxt$0;$_to_nxt$2 = $_to_nxt$0;
         break L1;
        }
       } else {
        $35 = $28 & -64;
        $36 = ($35<<24>>24)==(-128);
        if (!($36)) {
         $$0$i = 2;$_frm_nxt$3 = $_frm_nxt$0;$_to_nxt$2 = $_to_nxt$0;
         break L1;
        }
       }
       $37 = $30&255;
       $38 = $37 & 192;
       $39 = ($38|0)==(128);
       if (!($39)) {
        $$0$i = 2;$_frm_nxt$3 = $_frm_nxt$0;$_to_nxt$2 = $_to_nxt$0;
        break L1;
       }
       $40 = $28&255;
       $41 = $40 << 6;
       $42 = $5 << 12;
       $43 = $41 & 4032;
       $44 = $42 & 61440;
       $45 = $37 & 63;
       $46 = $43 | $44;
       $47 = $46 | $45;
       HEAP32[$_to_nxt$0>>2] = $47;
       $48 = (($_frm_nxt$0) + 3|0);
       $_frm_nxt$1 = $48;
       break;
      }
      $49 = ($4&255)<(245);
      if (!($49)) {
       $$0$i = 2;$_frm_nxt$3 = $_frm_nxt$0;$_to_nxt$2 = $_to_nxt$0;
       break L1;
      }
      $50 = $_frm_nxt$0;
      $51 = (($2) - ($50))|0;
      $52 = ($51|0)<(4);
      if ($52) {
       $$0$i = 1;$_frm_nxt$3 = $_frm_nxt$0;$_to_nxt$2 = $_to_nxt$0;
       break L1;
      }
      $53 = (($_frm_nxt$0) + 1|0);
      $54 = HEAP8[$53>>0]|0;
      $55 = (($_frm_nxt$0) + 2|0);
      $56 = HEAP8[$55>>0]|0;
      $57 = (($_frm_nxt$0) + 3|0);
      $58 = HEAP8[$57>>0]|0;
      if ((($5|0) == 240)) {
       $$off$i = (($54) + 112)<<24>>24;
       $59 = ($$off$i&255)<(48);
       if (!($59)) {
        $$0$i = 2;$_frm_nxt$3 = $_frm_nxt$0;$_to_nxt$2 = $_to_nxt$0;
        break L1;
       }
      } else if ((($5|0) == 244)) {
       $60 = $54 & -16;
       $61 = ($60<<24>>24)==(-128);
       if (!($61)) {
        $$0$i = 2;$_frm_nxt$3 = $_frm_nxt$0;$_to_nxt$2 = $_to_nxt$0;
        break L1;
       }
      } else {
       $62 = $54 & -64;
       $63 = ($62<<24>>24)==(-128);
       if (!($63)) {
        $$0$i = 2;$_frm_nxt$3 = $_frm_nxt$0;$_to_nxt$2 = $_to_nxt$0;
        break L1;
       }
      }
      $64 = $56&255;
      $65 = $64 & 192;
      $66 = ($65|0)==(128);
      if (!($66)) {
       $$0$i = 2;$_frm_nxt$3 = $_frm_nxt$0;$_to_nxt$2 = $_to_nxt$0;
       break L1;
      }
      $67 = $58&255;
      $68 = $67 & 192;
      $69 = ($68|0)==(128);
      if (!($69)) {
       $$0$i = 2;$_frm_nxt$3 = $_frm_nxt$0;$_to_nxt$2 = $_to_nxt$0;
       break L1;
      }
      $70 = $5 << 18;
      $71 = $70 & 1835008;
      $72 = $54&255;
      $73 = $72 << 12;
      $74 = $73 & 258048;
      $75 = $74 | $71;
      $76 = $64 << 6;
      $77 = $76 & 4032;
      $78 = $75 | $77;
      $79 = $67 & 63;
      $80 = $78 | $79;
      $81 = ($80>>>0)>(1114111);
      if ($81) {
       $$0$i = 2;$_frm_nxt$3 = $_frm_nxt$0;$_to_nxt$2 = $_to_nxt$0;
       break L1;
      }
      HEAP32[$_to_nxt$0>>2] = $80;
      $82 = (($_frm_nxt$0) + 4|0);
      $_frm_nxt$1 = $82;
     }
    } while(0);
    $83 = (($_to_nxt$0) + 4|0);
    $84 = ($_frm_nxt$1>>>0)<($frm_end>>>0);
    if ($84) {
     $_frm_nxt$0 = $_frm_nxt$1;$_to_nxt$0 = $83;
    } else {
     $_frm_nxt$2 = $_frm_nxt$1;$_to_nxt$1 = $83;
     label = 30;
     break;
    }
   }
  } else {
   $_frm_nxt$2 = $frm;$_to_nxt$1 = $to;
   label = 30;
  }
 } while(0);
 if ((label|0) == 30) {
  $85 = ($_frm_nxt$2>>>0)<($frm_end>>>0);
  $86 = $85&1;
  $$0$i = $86;$_frm_nxt$3 = $_frm_nxt$2;$_to_nxt$2 = $_to_nxt$1;
 }
 $87 = $_frm_nxt$3;
 $88 = $frm;
 $89 = (($87) - ($88))|0;
 $90 = (($frm) + ($89)|0);
 HEAP32[$frm_nxt>>2] = $90;
 $91 = $_to_nxt$2;
 $92 = $to;
 $93 = (($91) - ($92))|0;
 $94 = $93 >> 2;
 $95 = (($to) + ($94<<2)|0);
 HEAP32[$to_nxt>>2] = $95;
 STACKTOP = sp;return ($$0$i|0);
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($this,$0,$to,$1,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $to = $to|0;
 $1 = $1|0;
 $to_nxt = $to_nxt|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$to_nxt>>2] = $to;
 STACKTOP = sp;return 3;
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE11do_encodingEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE16do_always_noconvEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE9do_lengthERS1_PKcS5_j($this,$0,$frm,$frm_end,$mx) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $mx = $mx|0;
 var $$0$i = 0, $$off$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $8 = 0, $9 = 0;
 var $frm_nxt$1$lcssa$i = 0, $frm_nxt$115$i = 0, $frm_nxt$2$i = 0, $nchar32_t$014$i = 0, $or$cond$i = 0, $or$cond13$i = 0, $phitmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($frm>>>0)<($frm_end>>>0);
 $2 = ($mx|0)!=(0);
 $or$cond13$i = $1 & $2;
 L1: do {
  if ($or$cond13$i) {
   $3 = $frm_end;
   $frm_nxt$115$i = $frm;$nchar32_t$014$i = 1;
   L3: while(1) {
    $4 = HEAP8[$frm_nxt$115$i>>0]|0;
    $5 = $4&255;
    $6 = ($4<<24>>24)>(-1);
    do {
     if ($6) {
      $7 = (($frm_nxt$115$i) + 1|0);
      $frm_nxt$2$i = $7;
     } else {
      $8 = ($4&255)<(194);
      if ($8) {
       $frm_nxt$1$lcssa$i = $frm_nxt$115$i;
       break L1;
      }
      $9 = ($4&255)<(224);
      if ($9) {
       $10 = $frm_nxt$115$i;
       $11 = (($3) - ($10))|0;
       $12 = ($11|0)<(2);
       if ($12) {
        $frm_nxt$1$lcssa$i = $frm_nxt$115$i;
        break L1;
       }
       $13 = (($frm_nxt$115$i) + 1|0);
       $14 = HEAP8[$13>>0]|0;
       $15 = $14 & -64;
       $16 = ($15<<24>>24)==(-128);
       if (!($16)) {
        $frm_nxt$1$lcssa$i = $frm_nxt$115$i;
        break L1;
       }
       $17 = (($frm_nxt$115$i) + 2|0);
       $frm_nxt$2$i = $17;
       break;
      }
      $18 = ($4&255)<(240);
      if ($18) {
       $19 = $frm_nxt$115$i;
       $20 = (($3) - ($19))|0;
       $21 = ($20|0)<(3);
       if ($21) {
        $frm_nxt$1$lcssa$i = $frm_nxt$115$i;
        break L1;
       }
       $22 = (($frm_nxt$115$i) + 1|0);
       $23 = HEAP8[$22>>0]|0;
       $24 = (($frm_nxt$115$i) + 2|0);
       $25 = HEAP8[$24>>0]|0;
       if ((($5|0) == 224)) {
        $26 = $23 & -32;
        $27 = ($26<<24>>24)==(-96);
        if (!($27)) {
         label = 14;
         break L3;
        }
       } else if ((($5|0) == 237)) {
        $30 = $23 & -32;
        $31 = ($30<<24>>24)==(-128);
        if (!($31)) {
         label = 16;
         break L3;
        }
       } else {
        $34 = $23 & -64;
        $35 = ($34<<24>>24)==(-128);
        if (!($35)) {
         label = 18;
         break L3;
        }
       }
       $38 = $25 & -64;
       $39 = ($38<<24>>24)==(-128);
       if (!($39)) {
        $frm_nxt$1$lcssa$i = $frm_nxt$115$i;
        break L1;
       }
       $40 = (($frm_nxt$115$i) + 3|0);
       $frm_nxt$2$i = $40;
       break;
      }
      $41 = ($4&255)<(245);
      if (!($41)) {
       $frm_nxt$1$lcssa$i = $frm_nxt$115$i;
       break L1;
      }
      $42 = $frm_nxt$115$i;
      $43 = (($3) - ($42))|0;
      $44 = ($43|0)<(4);
      if ($44) {
       $frm_nxt$1$lcssa$i = $frm_nxt$115$i;
       break L1;
      }
      $45 = (($frm_nxt$115$i) + 1|0);
      $46 = HEAP8[$45>>0]|0;
      $47 = (($frm_nxt$115$i) + 2|0);
      $48 = HEAP8[$47>>0]|0;
      $49 = (($frm_nxt$115$i) + 3|0);
      $50 = HEAP8[$49>>0]|0;
      if ((($5|0) == 244)) {
       $54 = $46 & -16;
       $55 = ($54<<24>>24)==(-128);
       if (!($55)) {
        label = 27;
        break L3;
       }
      } else if ((($5|0) == 240)) {
       $$off$i = (($46) + 112)<<24>>24;
       $51 = ($$off$i&255)<(48);
       if (!($51)) {
        label = 25;
        break L3;
       }
      } else {
       $58 = $46 & -64;
       $59 = ($58<<24>>24)==(-128);
       if (!($59)) {
        label = 29;
        break L3;
       }
      }
      $62 = $48 & -64;
      $63 = ($62<<24>>24)==(-128);
      if (!($63)) {
       $frm_nxt$1$lcssa$i = $frm_nxt$115$i;
       break L1;
      }
      $64 = $50 & -64;
      $65 = ($64<<24>>24)==(-128);
      if (!($65)) {
       $frm_nxt$1$lcssa$i = $frm_nxt$115$i;
       break L1;
      }
      $66 = $5 << 18;
      $67 = $66 & 1835008;
      $68 = $46&255;
      $69 = $68 << 12;
      $70 = $69 & 196608;
      $71 = $70 | $67;
      $72 = ($71>>>0)>(1114111);
      if ($72) {
       $frm_nxt$1$lcssa$i = $frm_nxt$115$i;
       break L1;
      }
      $73 = (($frm_nxt$115$i) + 4|0);
      $frm_nxt$2$i = $73;
     }
    } while(0);
    $74 = ($frm_nxt$2$i>>>0)<($frm_end>>>0);
    $75 = ($nchar32_t$014$i>>>0)<($mx>>>0);
    $or$cond$i = $74 & $75;
    if (!($or$cond$i)) {
     $frm_nxt$1$lcssa$i = $frm_nxt$2$i;
     break L1;
    }
    $phitmp$i = (($nchar32_t$014$i) + 1)|0;
    $frm_nxt$115$i = $frm_nxt$2$i;$nchar32_t$014$i = $phitmp$i;
   }
   if ((label|0) == 14) {
    $28 = $frm;
    $29 = (($19) - ($28))|0;
    $$0$i = $29;
    STACKTOP = sp;return ($$0$i|0);
   }
   else if ((label|0) == 16) {
    $32 = $frm;
    $33 = (($19) - ($32))|0;
    $$0$i = $33;
    STACKTOP = sp;return ($$0$i|0);
   }
   else if ((label|0) == 18) {
    $36 = $frm;
    $37 = (($19) - ($36))|0;
    $$0$i = $37;
    STACKTOP = sp;return ($$0$i|0);
   }
   else if ((label|0) == 25) {
    $52 = $frm;
    $53 = (($42) - ($52))|0;
    $$0$i = $53;
    STACKTOP = sp;return ($$0$i|0);
   }
   else if ((label|0) == 27) {
    $56 = $frm;
    $57 = (($42) - ($56))|0;
    $$0$i = $57;
    STACKTOP = sp;return ($$0$i|0);
   }
   else if ((label|0) == 29) {
    $60 = $frm;
    $61 = (($42) - ($60))|0;
    $$0$i = $61;
    STACKTOP = sp;return ($$0$i|0);
   }
  } else {
   $frm_nxt$1$lcssa$i = $frm;
  }
 } while(0);
 $76 = $frm_nxt$1$lcssa$i;
 $77 = $frm;
 $78 = (($76) - ($77))|0;
 $$0$i = $78;
 STACKTOP = sp;return ($$0$i|0);
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE13do_max_lengthEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 4;
}
function __ZNSt3__116__narrow_to_utf8ILj32EED0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($this|0)==(0|0);
 if (!($0)) {
  _free($this);
 }
 STACKTOP = sp;return;
}
function __ZNSt3__117__widen_from_utf8ILj32EED0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($this|0)==(0|0);
 if (!($0)) {
  _free($this);
 }
 STACKTOP = sp;return;
}
function __ZNSt3__18numpunctIcED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((6576 + 8|0));
 $0 = (($this) + 12|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 if (!($3)) {
  $4 = (($this) + 20|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)==(0|0);
  if (!($6)) {
   _free($5);
  }
  $7 = ($this|0)==(0|0);
  if ($7) {
   STACKTOP = sp;return;
  }
 }
 _free($this);
 STACKTOP = sp;return;
}
function __ZNSt3__18numpunctIcED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((6576 + 8|0));
 $0 = (($this) + 12|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 if (!($3)) {
  $4 = (($this) + 20|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)==(0|0);
  if (!($6)) {
   _free($5);
  }
 }
 STACKTOP = sp;return;
}
function __ZNSt3__18numpunctIwED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((6616 + 8|0));
 $0 = (($this) + 16|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 if (!($3)) {
  $4 = (($this) + 24|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)==(0|0);
  if (!($6)) {
   _free($5);
  }
  $7 = ($this|0)==(0|0);
  if ($7) {
   STACKTOP = sp;return;
  }
 }
 _free($this);
 STACKTOP = sp;return;
}
function __ZNSt3__18numpunctIwED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((6616 + 8|0));
 $0 = (($this) + 16|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 if (!($3)) {
  $4 = (($this) + 24|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)==(0|0);
  if (!($6)) {
   _free($5);
  }
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18numpunctIcE16do_decimal_pointEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 $1 = HEAP8[$0>>0]|0;
 STACKTOP = sp;return ($1|0);
}
function __ZNKSt3__18numpunctIwE16do_decimal_pointEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($1|0);
}
function __ZNKSt3__18numpunctIcE16do_thousands_sepEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 9|0);
 $1 = HEAP8[$0>>0]|0;
 STACKTOP = sp;return ($1|0);
}
function __ZNKSt3__18numpunctIwE16do_thousands_sepEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($1|0);
}
function __ZNKSt3__18numpunctIcE11do_groupingEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $$size$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$0$i$i$i = 0, $lpad$phi$i$index = 0, $lpad$phi$i$index2 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 12|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  ;HEAP32[$agg$result+0>>2]=HEAP32[$0+0>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$0+4>>2]|0;HEAP32[$agg$result+8>>2]=HEAP32[$0+8>>2]|0;
  STACKTOP = sp;return;
 }
 $4 = (($this) + 20|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($this) + 16|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7>>>0)>(4294967279);
 if ($8) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
  // unreachable;
 }
 $9 = ($7>>>0)<(11);
 L8: do {
  if ($9) {
   $10 = $7 << 1;
   $11 = $10&255;
   HEAP8[$agg$result>>0] = $11;
   $12 = (($agg$result) + 1|0);
   $__p$0$i$i$i = $12;
  } else {
   $13 = (($7) + 16)|0;
   $14 = $13 & -16;
   $15 = ($14|0)==(0);
   $$size$i = $15 ? 1 : $14;
   while(1) {
    $16 = (_malloc($$size$i)|0);
    $17 = ($16|0)==(0|0);
    if (!($17)) {
     label = 18;
     break;
    }
    $18 = HEAP32[15648>>2]|0;HEAP32[15648>>2] = (($18+0)|0);
    $19 = ($18|0)==(0);
    if ($19) {
     label = 15;
     break;
    }
    $20 = $18;
    __THREW__ = 0;
    invoke_v($20|0);
    $21 = __THREW__; __THREW__ = 0;
    $22 = $21&1;
    if ($22) {
     label = 11;
     break;
    }
   }
   do {
    if ((label|0) == 11) {
     $23 = ___cxa_find_matching_catch(-1,-1,15712|0)|0;
     $24 = tempRet0;
     $lpad$phi$i$index = $23;$lpad$phi$i$index2 = $24;
    }
    else if ((label|0) == 15) {
     $28 = (___cxa_allocate_exception(4)|0);
     HEAP32[$28>>2] = ((15656 + 8|0));
     __THREW__ = 0;
     invoke_viii(379,($28|0),(15712|0),(374|0));
     $29 = __THREW__; __THREW__ = 0;
     $30 = $29&1;
     if ($30) {
      $25 = ___cxa_find_matching_catch(-1,-1,15712|0)|0;
      $26 = tempRet0;
      $lpad$phi$i$index = $25;$lpad$phi$i$index2 = $26;
      break;
     } else {
      // unreachable;
     }
    }
    else if ((label|0) == 18) {
     $31 = (($agg$result) + 8|0);
     HEAP32[$31>>2] = $16;
     $32 = $14 | 1;
     HEAP32[$agg$result>>2] = $32;
     $33 = (($agg$result) + 4|0);
     HEAP32[$33>>2] = $7;
     $__p$0$i$i$i = $16;
     break L8;
    }
   } while(0);
   $27 = ($lpad$phi$i$index2|0)<(0);
   if ($27) {
    ___cxa_call_unexpected(($lpad$phi$i$index|0));
    // unreachable;
   } else {
    ___resumeException($lpad$phi$i$index|0);
    // unreachable;
   }
  }
 } while(0);
 _memcpy(($__p$0$i$i$i|0),($5|0),($7|0))|0;
 $34 = (($__p$0$i$i$i) + ($7)|0);
 HEAP8[$34>>0] = 0;
 STACKTOP = sp;return;
}
function __ZNKSt3__18numpunctIwE11do_groupingEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $$size$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$0$i$i$i = 0, $lpad$phi$i$index = 0, $lpad$phi$i$index2 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 16|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  ;HEAP32[$agg$result+0>>2]=HEAP32[$0+0>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$0+4>>2]|0;HEAP32[$agg$result+8>>2]=HEAP32[$0+8>>2]|0;
  STACKTOP = sp;return;
 }
 $4 = (($this) + 24|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($this) + 20|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7>>>0)>(4294967279);
 if ($8) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
  // unreachable;
 }
 $9 = ($7>>>0)<(11);
 L8: do {
  if ($9) {
   $10 = $7 << 1;
   $11 = $10&255;
   HEAP8[$agg$result>>0] = $11;
   $12 = (($agg$result) + 1|0);
   $__p$0$i$i$i = $12;
  } else {
   $13 = (($7) + 16)|0;
   $14 = $13 & -16;
   $15 = ($14|0)==(0);
   $$size$i = $15 ? 1 : $14;
   while(1) {
    $16 = (_malloc($$size$i)|0);
    $17 = ($16|0)==(0|0);
    if (!($17)) {
     label = 18;
     break;
    }
    $18 = HEAP32[15648>>2]|0;HEAP32[15648>>2] = (($18+0)|0);
    $19 = ($18|0)==(0);
    if ($19) {
     label = 15;
     break;
    }
    $20 = $18;
    __THREW__ = 0;
    invoke_v($20|0);
    $21 = __THREW__; __THREW__ = 0;
    $22 = $21&1;
    if ($22) {
     label = 11;
     break;
    }
   }
   do {
    if ((label|0) == 11) {
     $23 = ___cxa_find_matching_catch(-1,-1,15712|0)|0;
     $24 = tempRet0;
     $lpad$phi$i$index = $23;$lpad$phi$i$index2 = $24;
    }
    else if ((label|0) == 15) {
     $28 = (___cxa_allocate_exception(4)|0);
     HEAP32[$28>>2] = ((15656 + 8|0));
     __THREW__ = 0;
     invoke_viii(379,($28|0),(15712|0),(374|0));
     $29 = __THREW__; __THREW__ = 0;
     $30 = $29&1;
     if ($30) {
      $25 = ___cxa_find_matching_catch(-1,-1,15712|0)|0;
      $26 = tempRet0;
      $lpad$phi$i$index = $25;$lpad$phi$i$index2 = $26;
      break;
     } else {
      // unreachable;
     }
    }
    else if ((label|0) == 18) {
     $31 = (($agg$result) + 8|0);
     HEAP32[$31>>2] = $16;
     $32 = $14 | 1;
     HEAP32[$agg$result>>2] = $32;
     $33 = (($agg$result) + 4|0);
     HEAP32[$33>>2] = $7;
     $__p$0$i$i$i = $16;
     break L8;
    }
   } while(0);
   $27 = ($lpad$phi$i$index2|0)<(0);
   if ($27) {
    ___cxa_call_unexpected(($lpad$phi$i$index|0));
    // unreachable;
   } else {
    ___resumeException($lpad$phi$i$index|0);
    // unreachable;
   }
  }
 } while(0);
 _memcpy(($__p$0$i$i$i|0),($5|0),($7|0))|0;
 $34 = (($__p$0$i$i$i) + ($7)|0);
 HEAP8[$34>>0] = 0;
 STACKTOP = sp;return;
}
function __ZNKSt3__18numpunctIcE11do_truenameEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$agg$result>>0] = 8;
 $0 = (($agg$result) + 1|0);
 HEAP8[$0>>0]=1702195828&255;HEAP8[$0+1>>0]=(1702195828>>8)&255;HEAP8[$0+2>>0]=(1702195828>>16)&255;HEAP8[$0+3>>0]=1702195828>>24;
 $1 = (($agg$result) + 5|0);
 HEAP8[$1>>0] = 0;
 STACKTOP = sp;return;
}
function __ZNKSt3__18numpunctIwE11do_truenameEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $$0$i = 0, $$014$i$i = 0, $$023$i$i = 0, $$05$i$i = 0, $$size$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$0$i = 0, $lpad$phi$i$index = 0, $lpad$phi$i$index2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0$i = 6656;
 while(1) {
  $0 = HEAP32[$$0$i>>2]|0;
  $1 = ($0|0)==(0);
  $2 = (($$0$i) + 4|0);
  if ($1) {
   break;
  } else {
   $$0$i = $2;
  }
 }
 $3 = $$0$i;
 $4 = (($3) - (6656))|0;
 $5 = $4 >> 2;
 $6 = ($5>>>0)>(1073741807);
 if ($6) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
  // unreachable;
 }
 $7 = ($5>>>0)<(2);
 L7: do {
  if ($7) {
   $8 = $4 >>> 1;
   $9 = $8&255;
   HEAP8[$agg$result>>0] = $9;
   $10 = (($agg$result) + 4|0);
   $__p$0$i = $10;
  } else {
   $11 = (($5) + 4)|0;
   $12 = $11 & -4;
   $13 = $12 << 2;
   $14 = ($13|0)==(0);
   $$size$i = $14 ? 1 : $13;
   while(1) {
    $15 = (_malloc($$size$i)|0);
    $16 = ($15|0)==(0|0);
    if (!($16)) {
     label = 18;
     break;
    }
    $17 = HEAP32[15648>>2]|0;HEAP32[15648>>2] = (($17+0)|0);
    $18 = ($17|0)==(0);
    if ($18) {
     label = 15;
     break;
    }
    $19 = $17;
    __THREW__ = 0;
    invoke_v($19|0);
    $20 = __THREW__; __THREW__ = 0;
    $21 = $20&1;
    if ($21) {
     label = 11;
     break;
    }
   }
   do {
    if ((label|0) == 11) {
     $22 = ___cxa_find_matching_catch(-1,-1,15712|0)|0;
     $23 = tempRet0;
     $lpad$phi$i$index = $22;$lpad$phi$i$index2 = $23;
    }
    else if ((label|0) == 15) {
     $27 = (___cxa_allocate_exception(4)|0);
     HEAP32[$27>>2] = ((15656 + 8|0));
     __THREW__ = 0;
     invoke_viii(379,($27|0),(15712|0),(374|0));
     $28 = __THREW__; __THREW__ = 0;
     $29 = $28&1;
     if ($29) {
      $24 = ___cxa_find_matching_catch(-1,-1,15712|0)|0;
      $25 = tempRet0;
      $lpad$phi$i$index = $24;$lpad$phi$i$index2 = $25;
      break;
     } else {
      // unreachable;
     }
    }
    else if ((label|0) == 18) {
     $30 = (($agg$result) + 8|0);
     HEAP32[$30>>2] = $15;
     $31 = $12 | 1;
     HEAP32[$agg$result>>2] = $31;
     $32 = (($agg$result) + 4|0);
     HEAP32[$32>>2] = $5;
     $__p$0$i = $15;
     break L7;
    }
   } while(0);
   $26 = ($lpad$phi$i$index2|0)<(0);
   if ($26) {
    ___cxa_call_unexpected(($lpad$phi$i$index|0));
    // unreachable;
   } else {
    ___resumeException($lpad$phi$i$index|0);
    // unreachable;
   }
  }
 } while(0);
 $33 = ($5|0)==(0);
 if ($33) {
  $39 = (($__p$0$i) + ($5<<2)|0);
  HEAP32[$39>>2] = 0;
  STACKTOP = sp;return;
 } else {
  $$014$i$i = $5;$$023$i$i = 6656;$$05$i$i = $__p$0$i;
 }
 while(1) {
  $34 = (($$014$i$i) + -1)|0;
  $35 = (($$023$i$i) + 4|0);
  $36 = HEAP32[$$023$i$i>>2]|0;
  $37 = (($$05$i$i) + 4|0);
  HEAP32[$$05$i$i>>2] = $36;
  $38 = ($34|0)==(0);
  if ($38) {
   break;
  } else {
   $$014$i$i = $34;$$023$i$i = $35;$$05$i$i = $37;
  }
 }
 $39 = (($__p$0$i) + ($5<<2)|0);
 HEAP32[$39>>2] = 0;
 STACKTOP = sp;return;
}
function __ZNKSt3__18numpunctIcE12do_falsenameEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$agg$result>>0] = 10;
 $0 = (($agg$result) + 1|0);
 ;HEAP8[$0+0>>0]=HEAP8[6680+0>>0]|0;HEAP8[$0+1>>0]=HEAP8[6680+1>>0]|0;HEAP8[$0+2>>0]=HEAP8[6680+2>>0]|0;HEAP8[$0+3>>0]=HEAP8[6680+3>>0]|0;HEAP8[$0+4>>0]=HEAP8[6680+4>>0]|0;
 $1 = (($agg$result) + 6|0);
 HEAP8[$1>>0] = 0;
 STACKTOP = sp;return;
}
function __ZNKSt3__18numpunctIwE12do_falsenameEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $$0$i = 0, $$014$i$i = 0, $$023$i$i = 0, $$05$i$i = 0, $$size$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$0$i = 0, $lpad$phi$i$index = 0, $lpad$phi$i$index2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0$i = 6688;
 while(1) {
  $0 = HEAP32[$$0$i>>2]|0;
  $1 = ($0|0)==(0);
  $2 = (($$0$i) + 4|0);
  if ($1) {
   break;
  } else {
   $$0$i = $2;
  }
 }
 $3 = $$0$i;
 $4 = (($3) - (6688))|0;
 $5 = $4 >> 2;
 $6 = ($5>>>0)>(1073741807);
 if ($6) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
  // unreachable;
 }
 $7 = ($5>>>0)<(2);
 L7: do {
  if ($7) {
   $8 = $4 >>> 1;
   $9 = $8&255;
   HEAP8[$agg$result>>0] = $9;
   $10 = (($agg$result) + 4|0);
   $__p$0$i = $10;
  } else {
   $11 = (($5) + 4)|0;
   $12 = $11 & -4;
   $13 = $12 << 2;
   $14 = ($13|0)==(0);
   $$size$i = $14 ? 1 : $13;
   while(1) {
    $15 = (_malloc($$size$i)|0);
    $16 = ($15|0)==(0|0);
    if (!($16)) {
     label = 18;
     break;
    }
    $17 = HEAP32[15648>>2]|0;HEAP32[15648>>2] = (($17+0)|0);
    $18 = ($17|0)==(0);
    if ($18) {
     label = 15;
     break;
    }
    $19 = $17;
    __THREW__ = 0;
    invoke_v($19|0);
    $20 = __THREW__; __THREW__ = 0;
    $21 = $20&1;
    if ($21) {
     label = 11;
     break;
    }
   }
   do {
    if ((label|0) == 11) {
     $22 = ___cxa_find_matching_catch(-1,-1,15712|0)|0;
     $23 = tempRet0;
     $lpad$phi$i$index = $22;$lpad$phi$i$index2 = $23;
    }
    else if ((label|0) == 15) {
     $27 = (___cxa_allocate_exception(4)|0);
     HEAP32[$27>>2] = ((15656 + 8|0));
     __THREW__ = 0;
     invoke_viii(379,($27|0),(15712|0),(374|0));
     $28 = __THREW__; __THREW__ = 0;
     $29 = $28&1;
     if ($29) {
      $24 = ___cxa_find_matching_catch(-1,-1,15712|0)|0;
      $25 = tempRet0;
      $lpad$phi$i$index = $24;$lpad$phi$i$index2 = $25;
      break;
     } else {
      // unreachable;
     }
    }
    else if ((label|0) == 18) {
     $30 = (($agg$result) + 8|0);
     HEAP32[$30>>2] = $15;
     $31 = $12 | 1;
     HEAP32[$agg$result>>2] = $31;
     $32 = (($agg$result) + 4|0);
     HEAP32[$32>>2] = $5;
     $__p$0$i = $15;
     break L7;
    }
   } while(0);
   $26 = ($lpad$phi$i$index2|0)<(0);
   if ($26) {
    ___cxa_call_unexpected(($lpad$phi$i$index|0));
    // unreachable;
   } else {
    ___resumeException($lpad$phi$i$index|0);
    // unreachable;
   }
  }
 } while(0);
 $33 = ($5|0)==(0);
 if ($33) {
  $39 = (($__p$0$i) + ($5<<2)|0);
  HEAP32[$39>>2] = 0;
  STACKTOP = sp;return;
 } else {
  $$014$i$i = $5;$$023$i$i = 6688;$$05$i$i = $__p$0$i;
 }
 while(1) {
  $34 = (($$014$i$i) + -1)|0;
  $35 = (($$023$i$i) + 4|0);
  $36 = HEAP32[$$023$i$i>>2]|0;
  $37 = (($$05$i$i) + 4|0);
  HEAP32[$$05$i$i>>2] = $36;
  $38 = ($34|0)==(0);
  if ($38) {
   break;
  } else {
   $$014$i$i = $34;$$023$i$i = $35;$$05$i$i = $37;
  }
 }
 $39 = (($__p$0$i) + ($5<<2)|0);
 HEAP32[$39>>2] = 0;
 STACKTOP = sp;return;
}
function __ZNKSt3__120__time_get_c_storageIcE7__weeksEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[6720>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if (!($1)) {
  $36 = HEAP32[6712>>2]|0;
  STACKTOP = sp;return ($36|0);
 }
 $2 = (___cxa_guard_acquire((6720|0))|0);
 $3 = ($2|0)==(0);
 if ($3) {
  $36 = HEAP32[6712>>2]|0;
  STACKTOP = sp;return ($36|0);
 }
 $4 = HEAP8[13888>>0]|0;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  $6 = (___cxa_guard_acquire((13888|0))|0);
  $7 = ($6|0)==(0);
  if (!($7)) {
   _memset((13720|0),0,168)|0;
   (___cxa_atexit((490|0),(0|0),(___dso_handle|0))|0);
   ___cxa_guard_release((13888|0));
  }
 }
 __THREW__ = 0;
 invoke_vii(491,(13720|0),(13896|0));
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 if (!($9)) {
  __THREW__ = 0;
  invoke_vii(491,(((13720 + 12|0))|0),(13904|0));
  $10 = __THREW__; __THREW__ = 0;
  $11 = $10&1;
  if (!($11)) {
   __THREW__ = 0;
   invoke_vii(491,(((13720 + 24|0))|0),(13912|0));
   $12 = __THREW__; __THREW__ = 0;
   $13 = $12&1;
   if (!($13)) {
    __THREW__ = 0;
    invoke_vii(491,(((13720 + 36|0))|0),(13920|0));
    $14 = __THREW__; __THREW__ = 0;
    $15 = $14&1;
    if (!($15)) {
     __THREW__ = 0;
     invoke_vii(491,(((13720 + 48|0))|0),(13936|0));
     $16 = __THREW__; __THREW__ = 0;
     $17 = $16&1;
     if (!($17)) {
      __THREW__ = 0;
      invoke_vii(491,(((13720 + 60|0))|0),(13952|0));
      $18 = __THREW__; __THREW__ = 0;
      $19 = $18&1;
      if (!($19)) {
       __THREW__ = 0;
       invoke_vii(491,(((13720 + 72|0))|0),(13960|0));
       $20 = __THREW__; __THREW__ = 0;
       $21 = $20&1;
       if (!($21)) {
        __THREW__ = 0;
        invoke_vii(491,(((13720 + 84|0))|0),(13976|0));
        $22 = __THREW__; __THREW__ = 0;
        $23 = $22&1;
        if (!($23)) {
         __THREW__ = 0;
         invoke_vii(491,(((13720 + 96|0))|0),(13984|0));
         $24 = __THREW__; __THREW__ = 0;
         $25 = $24&1;
         if (!($25)) {
          __THREW__ = 0;
          invoke_vii(491,(((13720 + 108|0))|0),(13992|0));
          $26 = __THREW__; __THREW__ = 0;
          $27 = $26&1;
          if (!($27)) {
           __THREW__ = 0;
           invoke_vii(491,(((13720 + 120|0))|0),(14000|0));
           $28 = __THREW__; __THREW__ = 0;
           $29 = $28&1;
           if (!($29)) {
            __THREW__ = 0;
            invoke_vii(491,(((13720 + 132|0))|0),(14008|0));
            $30 = __THREW__; __THREW__ = 0;
            $31 = $30&1;
            if (!($31)) {
             __THREW__ = 0;
             invoke_vii(491,(((13720 + 144|0))|0),(14016|0));
             $32 = __THREW__; __THREW__ = 0;
             $33 = $32&1;
             if (!($33)) {
              __THREW__ = 0;
              invoke_vii(491,(((13720 + 156|0))|0),(14024|0));
              $34 = __THREW__; __THREW__ = 0;
              $35 = $34&1;
              if (!($35)) {
               HEAP32[6712>>2] = 13720;
               ___cxa_guard_release((6720|0));
               $36 = HEAP32[6712>>2]|0;
               STACKTOP = sp;return ($36|0);
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
   }
  }
 }
 $37 = ___cxa_find_matching_catch(-1,-1)|0;
 $38 = tempRet0;
 ___cxa_guard_abort((6720|0));
 ___resumeException($37|0);
 // unreachable;
 return 0|0;
}
function __ZNKSt3__120__time_get_c_storageIwE7__weeksEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[6736>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if (!($1)) {
  $36 = HEAP32[6728>>2]|0;
  STACKTOP = sp;return ($36|0);
 }
 $2 = (___cxa_guard_acquire((6736|0))|0);
 $3 = ($2|0)==(0);
 if ($3) {
  $36 = HEAP32[6728>>2]|0;
  STACKTOP = sp;return ($36|0);
 }
 $4 = HEAP8[13352>>0]|0;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  $6 = (___cxa_guard_acquire((13352|0))|0);
  $7 = ($6|0)==(0);
  if (!($7)) {
   _memset((13184|0),0,168)|0;
   (___cxa_atexit((492|0),(0|0),(___dso_handle|0))|0);
   ___cxa_guard_release((13352|0));
  }
 }
 __THREW__ = 0;
 invoke_vii(493,(13184|0),(13360|0));
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 if (!($9)) {
  __THREW__ = 0;
  invoke_vii(493,(((13184 + 12|0))|0),(13392|0));
  $10 = __THREW__; __THREW__ = 0;
  $11 = $10&1;
  if (!($11)) {
   __THREW__ = 0;
   invoke_vii(493,(((13184 + 24|0))|0),(13424|0));
   $12 = __THREW__; __THREW__ = 0;
   $13 = $12&1;
   if (!($13)) {
    __THREW__ = 0;
    invoke_vii(493,(((13184 + 36|0))|0),(13456|0));
    $14 = __THREW__; __THREW__ = 0;
    $15 = $14&1;
    if (!($15)) {
     __THREW__ = 0;
     invoke_vii(493,(((13184 + 48|0))|0),(13496|0));
     $16 = __THREW__; __THREW__ = 0;
     $17 = $16&1;
     if (!($17)) {
      __THREW__ = 0;
      invoke_vii(493,(((13184 + 60|0))|0),(13536|0));
      $18 = __THREW__; __THREW__ = 0;
      $19 = $18&1;
      if (!($19)) {
       __THREW__ = 0;
       invoke_vii(493,(((13184 + 72|0))|0),(13568|0));
       $20 = __THREW__; __THREW__ = 0;
       $21 = $20&1;
       if (!($21)) {
        __THREW__ = 0;
        invoke_vii(493,(((13184 + 84|0))|0),(13608|0));
        $22 = __THREW__; __THREW__ = 0;
        $23 = $22&1;
        if (!($23)) {
         __THREW__ = 0;
         invoke_vii(493,(((13184 + 96|0))|0),(13624|0));
         $24 = __THREW__; __THREW__ = 0;
         $25 = $24&1;
         if (!($25)) {
          __THREW__ = 0;
          invoke_vii(493,(((13184 + 108|0))|0),(13640|0));
          $26 = __THREW__; __THREW__ = 0;
          $27 = $26&1;
          if (!($27)) {
           __THREW__ = 0;
           invoke_vii(493,(((13184 + 120|0))|0),(13656|0));
           $28 = __THREW__; __THREW__ = 0;
           $29 = $28&1;
           if (!($29)) {
            __THREW__ = 0;
            invoke_vii(493,(((13184 + 132|0))|0),(13672|0));
            $30 = __THREW__; __THREW__ = 0;
            $31 = $30&1;
            if (!($31)) {
             __THREW__ = 0;
             invoke_vii(493,(((13184 + 144|0))|0),(13688|0));
             $32 = __THREW__; __THREW__ = 0;
             $33 = $32&1;
             if (!($33)) {
              __THREW__ = 0;
              invoke_vii(493,(((13184 + 156|0))|0),(13704|0));
              $34 = __THREW__; __THREW__ = 0;
              $35 = $34&1;
              if (!($35)) {
               HEAP32[6728>>2] = 13184;
               ___cxa_guard_release((6736|0));
               $36 = HEAP32[6728>>2]|0;
               STACKTOP = sp;return ($36|0);
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
   }
  }
 }
 $37 = ___cxa_find_matching_catch(-1,-1)|0;
 $38 = tempRet0;
 ___cxa_guard_abort((6736|0));
 ___resumeException($37|0);
 // unreachable;
 return 0|0;
}
function __ZNKSt3__120__time_get_c_storageIcE8__monthsEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[6752>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if (!($1)) {
  $56 = HEAP32[6744>>2]|0;
  STACKTOP = sp;return ($56|0);
 }
 $2 = (___cxa_guard_acquire((6752|0))|0);
 $3 = ($2|0)==(0);
 if ($3) {
  $56 = HEAP32[6744>>2]|0;
  STACKTOP = sp;return ($56|0);
 }
 $4 = HEAP8[12960>>0]|0;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  $6 = (___cxa_guard_acquire((12960|0))|0);
  $7 = ($6|0)==(0);
  if (!($7)) {
   _memset((12672|0),0,288)|0;
   (___cxa_atexit((494|0),(0|0),(___dso_handle|0))|0);
   ___cxa_guard_release((12960|0));
  }
 }
 __THREW__ = 0;
 invoke_vii(491,(12672|0),(12968|0));
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 do {
  if (!($9)) {
   __THREW__ = 0;
   invoke_vii(491,(((12672 + 12|0))|0),(12976|0));
   $10 = __THREW__; __THREW__ = 0;
   $11 = $10&1;
   if (!($11)) {
    __THREW__ = 0;
    invoke_vii(491,(((12672 + 24|0))|0),(12992|0));
    $12 = __THREW__; __THREW__ = 0;
    $13 = $12&1;
    if (!($13)) {
     __THREW__ = 0;
     invoke_vii(491,(((12672 + 36|0))|0),(13000|0));
     $14 = __THREW__; __THREW__ = 0;
     $15 = $14&1;
     if (!($15)) {
      __THREW__ = 0;
      invoke_vii(491,(((12672 + 48|0))|0),(13008|0));
      $16 = __THREW__; __THREW__ = 0;
      $17 = $16&1;
      if (!($17)) {
       __THREW__ = 0;
       invoke_vii(491,(((12672 + 60|0))|0),(13016|0));
       $18 = __THREW__; __THREW__ = 0;
       $19 = $18&1;
       if (!($19)) {
        __THREW__ = 0;
        invoke_vii(491,(((12672 + 72|0))|0),(13024|0));
        $20 = __THREW__; __THREW__ = 0;
        $21 = $20&1;
        if (!($21)) {
         __THREW__ = 0;
         invoke_vii(491,(((12672 + 84|0))|0),(13032|0));
         $22 = __THREW__; __THREW__ = 0;
         $23 = $22&1;
         if (!($23)) {
          __THREW__ = 0;
          invoke_vii(491,(((12672 + 96|0))|0),(13040|0));
          $24 = __THREW__; __THREW__ = 0;
          $25 = $24&1;
          if (!($25)) {
           __THREW__ = 0;
           invoke_vii(491,(((12672 + 108|0))|0),(13056|0));
           $26 = __THREW__; __THREW__ = 0;
           $27 = $26&1;
           if (!($27)) {
            __THREW__ = 0;
            invoke_vii(491,(((12672 + 120|0))|0),(13064|0));
            $28 = __THREW__; __THREW__ = 0;
            $29 = $28&1;
            if (!($29)) {
             __THREW__ = 0;
             invoke_vii(491,(((12672 + 132|0))|0),(13080|0));
             $30 = __THREW__; __THREW__ = 0;
             $31 = $30&1;
             if (!($31)) {
              __THREW__ = 0;
              invoke_vii(491,(((12672 + 144|0))|0),(13096|0));
              $32 = __THREW__; __THREW__ = 0;
              $33 = $32&1;
              if (!($33)) {
               __THREW__ = 0;
               invoke_vii(491,(((12672 + 156|0))|0),(13104|0));
               $34 = __THREW__; __THREW__ = 0;
               $35 = $34&1;
               if (!($35)) {
                __THREW__ = 0;
                invoke_vii(491,(((12672 + 168|0))|0),(13112|0));
                $36 = __THREW__; __THREW__ = 0;
                $37 = $36&1;
                if (!($37)) {
                 __THREW__ = 0;
                 invoke_vii(491,(((12672 + 180|0))|0),(13120|0));
                 $38 = __THREW__; __THREW__ = 0;
                 $39 = $38&1;
                 if (!($39)) {
                  __THREW__ = 0;
                  invoke_vii(491,(((12672 + 192|0))|0),(13008|0));
                  $40 = __THREW__; __THREW__ = 0;
                  $41 = $40&1;
                  if ($41) {
                   break;
                  }
                  __THREW__ = 0;
                  invoke_vii(491,(((12672 + 204|0))|0),(13128|0));
                  $42 = __THREW__; __THREW__ = 0;
                  $43 = $42&1;
                  if ($43) {
                   break;
                  }
                  __THREW__ = 0;
                  invoke_vii(491,(((12672 + 216|0))|0),(13136|0));
                  $44 = __THREW__; __THREW__ = 0;
                  $45 = $44&1;
                  if ($45) {
                   break;
                  }
                  __THREW__ = 0;
                  invoke_vii(491,(((12672 + 228|0))|0),(13144|0));
                  $46 = __THREW__; __THREW__ = 0;
                  $47 = $46&1;
                  if ($47) {
                   break;
                  }
                  __THREW__ = 0;
                  invoke_vii(491,(((12672 + 240|0))|0),(13152|0));
                  $48 = __THREW__; __THREW__ = 0;
                  $49 = $48&1;
                  if ($49) {
                   break;
                  }
                  __THREW__ = 0;
                  invoke_vii(491,(((12672 + 252|0))|0),(13160|0));
                  $50 = __THREW__; __THREW__ = 0;
                  $51 = $50&1;
                  if ($51) {
                   break;
                  }
                  __THREW__ = 0;
                  invoke_vii(491,(((12672 + 264|0))|0),(13168|0));
                  $52 = __THREW__; __THREW__ = 0;
                  $53 = $52&1;
                  if ($53) {
                   break;
                  }
                  __THREW__ = 0;
                  invoke_vii(491,(((12672 + 276|0))|0),(13176|0));
                  $54 = __THREW__; __THREW__ = 0;
                  $55 = $54&1;
                  if ($55) {
                   break;
                  }
                  HEAP32[6744>>2] = 12672;
                  ___cxa_guard_release((6752|0));
                  $56 = HEAP32[6744>>2]|0;
                  STACKTOP = sp;return ($56|0);
                 }
                }
               }
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
   }
  }
 } while(0);
 $57 = ___cxa_find_matching_catch(-1,-1)|0;
 $58 = tempRet0;
 ___cxa_guard_abort((6752|0));
 ___resumeException($57|0);
 // unreachable;
 return 0|0;
}
function __ZNKSt3__120__time_get_c_storageIwE8__monthsEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[6768>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if (!($1)) {
  $56 = HEAP32[6760>>2]|0;
  STACKTOP = sp;return ($56|0);
 }
 $2 = (___cxa_guard_acquire((6768|0))|0);
 $3 = ($2|0)==(0);
 if ($3) {
  $56 = HEAP32[6760>>2]|0;
  STACKTOP = sp;return ($56|0);
 }
 $4 = HEAP8[12120>>0]|0;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  $6 = (___cxa_guard_acquire((12120|0))|0);
  $7 = ($6|0)==(0);
  if (!($7)) {
   _memset((11832|0),0,288)|0;
   (___cxa_atexit((495|0),(0|0),(___dso_handle|0))|0);
   ___cxa_guard_release((12120|0));
  }
 }
 __THREW__ = 0;
 invoke_vii(493,(11832|0),(12128|0));
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 do {
  if (!($9)) {
   __THREW__ = 0;
   invoke_vii(493,(((11832 + 12|0))|0),(12160|0));
   $10 = __THREW__; __THREW__ = 0;
   $11 = $10&1;
   if (!($11)) {
    __THREW__ = 0;
    invoke_vii(493,(((11832 + 24|0))|0),(12200|0));
    $12 = __THREW__; __THREW__ = 0;
    $13 = $12&1;
    if (!($13)) {
     __THREW__ = 0;
     invoke_vii(493,(((11832 + 36|0))|0),(12224|0));
     $14 = __THREW__; __THREW__ = 0;
     $15 = $14&1;
     if (!($15)) {
      __THREW__ = 0;
      invoke_vii(493,(((11832 + 48|0))|0),(12544|0));
      $16 = __THREW__; __THREW__ = 0;
      $17 = $16&1;
      if (!($17)) {
       __THREW__ = 0;
       invoke_vii(493,(((11832 + 60|0))|0),(12248|0));
       $18 = __THREW__; __THREW__ = 0;
       $19 = $18&1;
       if (!($19)) {
        __THREW__ = 0;
        invoke_vii(493,(((11832 + 72|0))|0),(12272|0));
        $20 = __THREW__; __THREW__ = 0;
        $21 = $20&1;
        if (!($21)) {
         __THREW__ = 0;
         invoke_vii(493,(((11832 + 84|0))|0),(12296|0));
         $22 = __THREW__; __THREW__ = 0;
         $23 = $22&1;
         if (!($23)) {
          __THREW__ = 0;
          invoke_vii(493,(((11832 + 96|0))|0),(12328|0));
          $24 = __THREW__; __THREW__ = 0;
          $25 = $24&1;
          if (!($25)) {
           __THREW__ = 0;
           invoke_vii(493,(((11832 + 108|0))|0),(12368|0));
           $26 = __THREW__; __THREW__ = 0;
           $27 = $26&1;
           if (!($27)) {
            __THREW__ = 0;
            invoke_vii(493,(((11832 + 120|0))|0),(12400|0));
            $28 = __THREW__; __THREW__ = 0;
            $29 = $28&1;
            if (!($29)) {
             __THREW__ = 0;
             invoke_vii(493,(((11832 + 132|0))|0),(12440|0));
             $30 = __THREW__; __THREW__ = 0;
             $31 = $30&1;
             if (!($31)) {
              __THREW__ = 0;
              invoke_vii(493,(((11832 + 144|0))|0),(12480|0));
              $32 = __THREW__; __THREW__ = 0;
              $33 = $32&1;
              if (!($33)) {
               __THREW__ = 0;
               invoke_vii(493,(((11832 + 156|0))|0),(12496|0));
               $34 = __THREW__; __THREW__ = 0;
               $35 = $34&1;
               if (!($35)) {
                __THREW__ = 0;
                invoke_vii(493,(((11832 + 168|0))|0),(12512|0));
                $36 = __THREW__; __THREW__ = 0;
                $37 = $36&1;
                if (!($37)) {
                 __THREW__ = 0;
                 invoke_vii(493,(((11832 + 180|0))|0),(12528|0));
                 $38 = __THREW__; __THREW__ = 0;
                 $39 = $38&1;
                 if (!($39)) {
                  __THREW__ = 0;
                  invoke_vii(493,(((11832 + 192|0))|0),(12544|0));
                  $40 = __THREW__; __THREW__ = 0;
                  $41 = $40&1;
                  if ($41) {
                   break;
                  }
                  __THREW__ = 0;
                  invoke_vii(493,(((11832 + 204|0))|0),(12560|0));
                  $42 = __THREW__; __THREW__ = 0;
                  $43 = $42&1;
                  if ($43) {
                   break;
                  }
                  __THREW__ = 0;
                  invoke_vii(493,(((11832 + 216|0))|0),(12576|0));
                  $44 = __THREW__; __THREW__ = 0;
                  $45 = $44&1;
                  if ($45) {
                   break;
                  }
                  __THREW__ = 0;
                  invoke_vii(493,(((11832 + 228|0))|0),(12592|0));
                  $46 = __THREW__; __THREW__ = 0;
                  $47 = $46&1;
                  if ($47) {
                   break;
                  }
                  __THREW__ = 0;
                  invoke_vii(493,(((11832 + 240|0))|0),(12608|0));
                  $48 = __THREW__; __THREW__ = 0;
                  $49 = $48&1;
                  if ($49) {
                   break;
                  }
                  __THREW__ = 0;
                  invoke_vii(493,(((11832 + 252|0))|0),(12624|0));
                  $50 = __THREW__; __THREW__ = 0;
                  $51 = $50&1;
                  if ($51) {
                   break;
                  }
                  __THREW__ = 0;
                  invoke_vii(493,(((11832 + 264|0))|0),(12640|0));
                  $52 = __THREW__; __THREW__ = 0;
                  $53 = $52&1;
                  if ($53) {
                   break;
                  }
                  __THREW__ = 0;
                  invoke_vii(493,(((11832 + 276|0))|0),(12656|0));
                  $54 = __THREW__; __THREW__ = 0;
                  $55 = $54&1;
                  if ($55) {
                   break;
                  }
                  HEAP32[6760>>2] = 11832;
                  ___cxa_guard_release((6768|0));
                  $56 = HEAP32[6760>>2]|0;
                  STACKTOP = sp;return ($56|0);
                 }
                }
               }
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
   }
  }
 } while(0);
 $57 = ___cxa_find_matching_catch(-1,-1)|0;
 $58 = tempRet0;
 ___cxa_guard_abort((6768|0));
 ___resumeException($57|0);
 // unreachable;
 return 0|0;
}
function __ZNKSt3__120__time_get_c_storageIcE7__am_pmEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[6784>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if (!($1)) {
  $12 = HEAP32[6776>>2]|0;
  STACKTOP = sp;return ($12|0);
 }
 $2 = (___cxa_guard_acquire((6784|0))|0);
 $3 = ($2|0)==(0);
 if ($3) {
  $12 = HEAP32[6776>>2]|0;
  STACKTOP = sp;return ($12|0);
 }
 $4 = HEAP8[11808>>0]|0;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  $6 = (___cxa_guard_acquire((11808|0))|0);
  $7 = ($6|0)==(0);
  if (!($7)) {
   _memset((11520|0),0,288)|0;
   (___cxa_atexit((496|0),(0|0),(___dso_handle|0))|0);
   ___cxa_guard_release((11808|0));
  }
 }
 __THREW__ = 0;
 invoke_vii(491,(11520|0),(11816|0));
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 if ($9) {
  $13 = ___cxa_find_matching_catch(-1,-1)|0;
  $14 = tempRet0;
  ___cxa_guard_abort((6784|0));
  ___resumeException($13|0);
  // unreachable;
 }
 __THREW__ = 0;
 invoke_vii(491,(((11520 + 12|0))|0),(11824|0));
 $10 = __THREW__; __THREW__ = 0;
 $11 = $10&1;
 if ($11) {
  $13 = ___cxa_find_matching_catch(-1,-1)|0;
  $14 = tempRet0;
  ___cxa_guard_abort((6784|0));
  ___resumeException($13|0);
  // unreachable;
 }
 HEAP32[6776>>2] = 11520;
 ___cxa_guard_release((6784|0));
 $12 = HEAP32[6776>>2]|0;
 STACKTOP = sp;return ($12|0);
}
function __ZNKSt3__120__time_get_c_storageIwE7__am_pmEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[6800>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if (!($1)) {
  $12 = HEAP32[6792>>2]|0;
  STACKTOP = sp;return ($12|0);
 }
 $2 = (___cxa_guard_acquire((6800|0))|0);
 $3 = ($2|0)==(0);
 if ($3) {
  $12 = HEAP32[6792>>2]|0;
  STACKTOP = sp;return ($12|0);
 }
 $4 = HEAP8[11480>>0]|0;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  $6 = (___cxa_guard_acquire((11480|0))|0);
  $7 = ($6|0)==(0);
  if (!($7)) {
   _memset((11192|0),0,288)|0;
   (___cxa_atexit((497|0),(0|0),(___dso_handle|0))|0);
   ___cxa_guard_release((11480|0));
  }
 }
 __THREW__ = 0;
 invoke_vii(493,(11192|0),(11488|0));
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 if ($9) {
  $13 = ___cxa_find_matching_catch(-1,-1)|0;
  $14 = tempRet0;
  ___cxa_guard_abort((6800|0));
  ___resumeException($13|0);
  // unreachable;
 }
 __THREW__ = 0;
 invoke_vii(493,(((11192 + 12|0))|0),(11504|0));
 $10 = __THREW__; __THREW__ = 0;
 $11 = $10&1;
 if ($11) {
  $13 = ___cxa_find_matching_catch(-1,-1)|0;
  $14 = tempRet0;
  ___cxa_guard_abort((6800|0));
  ___resumeException($13|0);
  // unreachable;
 }
 HEAP32[6792>>2] = 11192;
 ___cxa_guard_release((6800|0));
 $12 = HEAP32[6792>>2]|0;
 STACKTOP = sp;return ($12|0);
}
function __ZNKSt3__120__time_get_c_storageIcE3__xEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[6824>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if (!($1)) {
  STACKTOP = sp;return (6808|0);
 }
 $2 = (___cxa_guard_acquire((6824|0))|0);
 $3 = ($2|0)==(0);
 if ($3) {
  STACKTOP = sp;return (6808|0);
 }
 HEAP8[6808>>0] = 16;
 $4 = ((6808 + 1|0));
 $5 = $4;
 HEAP8[$5>>0]=623865125&255;HEAP8[$5+1>>0]=(623865125>>8)&255;HEAP8[$5+2>>0]=(623865125>>16)&255;HEAP8[$5+3>>0]=623865125>>24;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP8[$7>>0]=2032480100&255;HEAP8[$7+1>>0]=(2032480100>>8)&255;HEAP8[$7+2>>0]=(2032480100>>16)&255;HEAP8[$7+3>>0]=2032480100>>24;
 HEAP8[((6808 + 9|0))>>0] = 0;
 (___cxa_atexit((498|0),(6808|0),(___dso_handle|0))|0);
 ___cxa_guard_release((6824|0));
 STACKTOP = sp;return (6808|0);
}
function __ZNKSt3__120__time_get_c_storageIwE3__xEv($this) {
 $this = $this|0;
 var $$0$i = 0, $$014$i$i = 0, $$023$i$i = 0, $$05$i$i = 0, $$size$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$0$i = 0, $eh$lpad$body$index10Z2D = 0, $eh$lpad$body$indexZ2D = 0, $lpad$phi$i$index = 0, $lpad$phi$i$index5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[6848>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if (!($1)) {
  STACKTOP = sp;return (6832|0);
 }
 $2 = (___cxa_guard_acquire((6848|0))|0);
 $3 = ($2|0)==(0);
 if ($3) {
  STACKTOP = sp;return (6832|0);
 } else {
  $$0$i = 6856;
 }
 while(1) {
  $4 = HEAP32[$$0$i>>2]|0;
  $5 = ($4|0)==(0);
  $6 = (($$0$i) + 4|0);
  if ($5) {
   break;
  } else {
   $$0$i = $6;
  }
 }
 $7 = $$0$i;
 $8 = (($7) - (6856))|0;
 $9 = $8 >> 2;
 $10 = ($9>>>0)>(1073741807);
 L9: do {
  if ($10) {
   __THREW__ = 0;
   invoke_v(499);
   $11 = __THREW__; __THREW__ = 0;
   $12 = $11&1;
   if (!($12)) {
    // unreachable;
   }
  } else {
   $13 = ($9>>>0)<(2);
   L13: do {
    if ($13) {
     $14 = $8 >>> 1;
     $15 = $14&255;
     HEAP8[6832>>0] = $15;
     $__p$0$i = ((6832 + 4|0));
    } else {
     $16 = (($9) + 4)|0;
     $17 = $16 & -4;
     $18 = $17 << 2;
     $19 = ($18|0)==(0);
     $$size$i = $19 ? 1 : $18;
     while(1) {
      $20 = (_malloc($$size$i)|0);
      $21 = ($20|0)==(0|0);
      if (!($21)) {
       label = 20;
       break;
      }
      $22 = HEAP32[15648>>2]|0;HEAP32[15648>>2] = (($22+0)|0);
      $23 = ($22|0)==(0);
      if ($23) {
       label = 18;
       break;
      }
      $24 = $22;
      __THREW__ = 0;
      invoke_v($24|0);
      $25 = __THREW__; __THREW__ = 0;
      $26 = $25&1;
      if ($26) {
       label = 13;
       break;
      }
     }
     do {
      if ((label|0) == 13) {
       $27 = ___cxa_find_matching_catch(-1,-1,15712|0)|0;
       $28 = tempRet0;
       $lpad$phi$i$index = $27;$lpad$phi$i$index5 = $28;
      }
      else if ((label|0) == 18) {
       $34 = (___cxa_allocate_exception(4)|0);
       HEAP32[$34>>2] = ((15656 + 8|0));
       __THREW__ = 0;
       invoke_viii(379,($34|0),(15712|0),(374|0));
       $35 = __THREW__; __THREW__ = 0;
       $36 = $35&1;
       if ($36) {
        $29 = ___cxa_find_matching_catch(-1,-1,15712|0)|0;
        $30 = tempRet0;
        $lpad$phi$i$index = $29;$lpad$phi$i$index5 = $30;
        break;
       } else {
        // unreachable;
       }
      }
      else if ((label|0) == 20) {
       HEAP32[((6832 + 8|0))>>2] = $20;
       $37 = $17 | 1;
       HEAP32[6832>>2] = $37;
       HEAP32[((6832 + 4|0))>>2] = $9;
       $__p$0$i = $20;
       break L13;
      }
     } while(0);
     $31 = ($lpad$phi$i$index5|0)<(0);
     if (!($31)) {
      $eh$lpad$body$index10Z2D = $lpad$phi$i$index5;$eh$lpad$body$indexZ2D = $lpad$phi$i$index;
      ___cxa_guard_abort((6848|0));
      ___resumeException($eh$lpad$body$indexZ2D|0);
      // unreachable;
     }
     __THREW__ = 0;
     invoke_vi(380,($lpad$phi$i$index|0));
     $32 = __THREW__; __THREW__ = 0;
     $33 = $32&1;
     if ($33) {
      break L9;
     }
     // unreachable;
    }
   } while(0);
   $38 = ($9|0)==(0);
   if (!($38)) {
    $$014$i$i = $9;$$023$i$i = 6856;$$05$i$i = $__p$0$i;
    while(1) {
     $39 = (($$014$i$i) + -1)|0;
     $40 = (($$023$i$i) + 4|0);
     $41 = HEAP32[$$023$i$i>>2]|0;
     $42 = (($$05$i$i) + 4|0);
     HEAP32[$$05$i$i>>2] = $41;
     $43 = ($39|0)==(0);
     if ($43) {
      break;
     } else {
      $$014$i$i = $39;$$023$i$i = $40;$$05$i$i = $42;
     }
    }
   }
   $44 = (($__p$0$i) + ($9<<2)|0);
   HEAP32[$44>>2] = 0;
   (___cxa_atexit((500|0),(6832|0),(___dso_handle|0))|0);
   ___cxa_guard_release((6848|0));
   STACKTOP = sp;return (6832|0);
  }
 } while(0);
 $45 = ___cxa_find_matching_catch(-1,-1)|0;
 $46 = tempRet0;
 $eh$lpad$body$index10Z2D = $46;$eh$lpad$body$indexZ2D = $45;
 ___cxa_guard_abort((6848|0));
 ___resumeException($eh$lpad$body$indexZ2D|0);
 // unreachable;
 return 0|0;
}
function __ZNKSt3__120__time_get_c_storageIcE3__XEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[6912>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if (!($1)) {
  STACKTOP = sp;return (6896|0);
 }
 $2 = (___cxa_guard_acquire((6912|0))|0);
 $3 = ($2|0)==(0);
 if ($3) {
  STACKTOP = sp;return (6896|0);
 }
 HEAP8[6896>>0] = 16;
 $4 = ((6896 + 1|0));
 $5 = $4;
 HEAP8[$5>>0]=624576549&255;HEAP8[$5+1>>0]=(624576549>>8)&255;HEAP8[$5+2>>0]=(624576549>>16)&255;HEAP8[$5+3>>0]=624576549>>24;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP8[$7>>0]=1394948685&255;HEAP8[$7+1>>0]=(1394948685>>8)&255;HEAP8[$7+2>>0]=(1394948685>>16)&255;HEAP8[$7+3>>0]=1394948685>>24;
 HEAP8[((6896 + 9|0))>>0] = 0;
 (___cxa_atexit((498|0),(6896|0),(___dso_handle|0))|0);
 ___cxa_guard_release((6912|0));
 STACKTOP = sp;return (6896|0);
}
function __ZNKSt3__120__time_get_c_storageIwE3__XEv($this) {
 $this = $this|0;
 var $$0$i = 0, $$014$i$i = 0, $$023$i$i = 0, $$05$i$i = 0, $$size$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$0$i = 0, $eh$lpad$body$index10Z2D = 0, $eh$lpad$body$indexZ2D = 0, $lpad$phi$i$index = 0, $lpad$phi$i$index5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[6936>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if (!($1)) {
  STACKTOP = sp;return (6920|0);
 }
 $2 = (___cxa_guard_acquire((6936|0))|0);
 $3 = ($2|0)==(0);
 if ($3) {
  STACKTOP = sp;return (6920|0);
 } else {
  $$0$i = 6944;
 }
 while(1) {
  $4 = HEAP32[$$0$i>>2]|0;
  $5 = ($4|0)==(0);
  $6 = (($$0$i) + 4|0);
  if ($5) {
   break;
  } else {
   $$0$i = $6;
  }
 }
 $7 = $$0$i;
 $8 = (($7) - (6944))|0;
 $9 = $8 >> 2;
 $10 = ($9>>>0)>(1073741807);
 L9: do {
  if ($10) {
   __THREW__ = 0;
   invoke_v(499);
   $11 = __THREW__; __THREW__ = 0;
   $12 = $11&1;
   if (!($12)) {
    // unreachable;
   }
  } else {
   $13 = ($9>>>0)<(2);
   L11: do {
    if ($13) {
     $14 = $8 >>> 1;
     $15 = $14&255;
     HEAP8[6920>>0] = $15;
     $__p$0$i = ((6920 + 4|0));
    } else {
     $16 = (($9) + 4)|0;
     $17 = $16 & -4;
     $18 = $17 << 2;
     $19 = ($18|0)==(0);
     $$size$i = $19 ? 1 : $18;
     while(1) {
      $20 = (_malloc($$size$i)|0);
      $21 = ($20|0)==(0|0);
      if (!($21)) {
       label = 20;
       break;
      }
      $22 = HEAP32[15648>>2]|0;HEAP32[15648>>2] = (($22+0)|0);
      $23 = ($22|0)==(0);
      if ($23) {
       label = 18;
       break;
      }
      $24 = $22;
      __THREW__ = 0;
      invoke_v($24|0);
      $25 = __THREW__; __THREW__ = 0;
      $26 = $25&1;
      if ($26) {
       label = 13;
       break;
      }
     }
     do {
      if ((label|0) == 13) {
       $27 = ___cxa_find_matching_catch(-1,-1,15712|0)|0;
       $28 = tempRet0;
       $lpad$phi$i$index = $27;$lpad$phi$i$index5 = $28;
      }
      else if ((label|0) == 18) {
       $34 = (___cxa_allocate_exception(4)|0);
       HEAP32[$34>>2] = ((15656 + 8|0));
       __THREW__ = 0;
       invoke_viii(379,($34|0),(15712|0),(374|0));
       $35 = __THREW__; __THREW__ = 0;
       $36 = $35&1;
       if ($36) {
        $29 = ___cxa_find_matching_catch(-1,-1,15712|0)|0;
        $30 = tempRet0;
        $lpad$phi$i$index = $29;$lpad$phi$i$index5 = $30;
        break;
       } else {
        // unreachable;
       }
      }
      else if ((label|0) == 20) {
       HEAP32[((6920 + 8|0))>>2] = $20;
       $37 = $17 | 1;
       HEAP32[6920>>2] = $37;
       HEAP32[((6920 + 4|0))>>2] = $9;
       $__p$0$i = $20;
       break L11;
      }
     } while(0);
     $31 = ($lpad$phi$i$index5|0)<(0);
     if (!($31)) {
      $eh$lpad$body$index10Z2D = $lpad$phi$i$index5;$eh$lpad$body$indexZ2D = $lpad$phi$i$index;
      ___cxa_guard_abort((6936|0));
      ___resumeException($eh$lpad$body$indexZ2D|0);
      // unreachable;
     }
     __THREW__ = 0;
     invoke_vi(380,($lpad$phi$i$index|0));
     $32 = __THREW__; __THREW__ = 0;
     $33 = $32&1;
     if ($33) {
      break L9;
     }
     // unreachable;
    }
   } while(0);
   $38 = ($9|0)==(0);
   if (!($38)) {
    $$014$i$i = $9;$$023$i$i = 6944;$$05$i$i = $__p$0$i;
    while(1) {
     $39 = (($$014$i$i) + -1)|0;
     $40 = (($$023$i$i) + 4|0);
     $41 = HEAP32[$$023$i$i>>2]|0;
     $42 = (($$05$i$i) + 4|0);
     HEAP32[$$05$i$i>>2] = $41;
     $43 = ($39|0)==(0);
     if ($43) {
      break;
     } else {
      $$014$i$i = $39;$$023$i$i = $40;$$05$i$i = $42;
     }
    }
   }
   $44 = (($__p$0$i) + ($9<<2)|0);
   HEAP32[$44>>2] = 0;
   (___cxa_atexit((500|0),(6920|0),(___dso_handle|0))|0);
   ___cxa_guard_release((6936|0));
   STACKTOP = sp;return (6920|0);
  }
 } while(0);
 $45 = ___cxa_find_matching_catch(-1,-1)|0;
 $46 = tempRet0;
 $eh$lpad$body$index10Z2D = $46;$eh$lpad$body$indexZ2D = $45;
 ___cxa_guard_abort((6936|0));
 ___resumeException($eh$lpad$body$indexZ2D|0);
 // unreachable;
 return 0|0;
}
function __ZNKSt3__120__time_get_c_storageIcE3__cEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[7000>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if (!($1)) {
  STACKTOP = sp;return (6984|0);
 }
 $2 = (___cxa_guard_acquire((7000|0))|0);
 $3 = ($2|0)==(0);
 if ($3) {
  STACKTOP = sp;return (6984|0);
 }
 __THREW__ = 0;
 invoke_viii(501,(6984|0),(7008|0),20);
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch(-1,-1)|0;
  $7 = tempRet0;
  ___cxa_guard_abort((7000|0));
  ___resumeException($6|0);
  // unreachable;
 }
 (___cxa_atexit((498|0),(6984|0),(___dso_handle|0))|0);
 ___cxa_guard_release((7000|0));
 STACKTOP = sp;return (6984|0);
}
function __ZNKSt3__120__time_get_c_storageIwE3__cEv($this) {
 $this = $this|0;
 var $$0$i = 0, $$014$i$i = 0, $$023$i$i = 0, $$05$i$i = 0, $$size$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$0$i = 0, $eh$lpad$body$index10Z2D = 0, $eh$lpad$body$indexZ2D = 0, $lpad$phi$i$index = 0, $lpad$phi$i$index5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[7048>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if (!($1)) {
  STACKTOP = sp;return (7032|0);
 }
 $2 = (___cxa_guard_acquire((7048|0))|0);
 $3 = ($2|0)==(0);
 if ($3) {
  STACKTOP = sp;return (7032|0);
 } else {
  $$0$i = 7056;
 }
 while(1) {
  $4 = HEAP32[$$0$i>>2]|0;
  $5 = ($4|0)==(0);
  $6 = (($$0$i) + 4|0);
  if ($5) {
   break;
  } else {
   $$0$i = $6;
  }
 }
 $7 = $$0$i;
 $8 = (($7) - (7056))|0;
 $9 = $8 >> 2;
 $10 = ($9>>>0)>(1073741807);
 L9: do {
  if ($10) {
   __THREW__ = 0;
   invoke_v(499);
   $11 = __THREW__; __THREW__ = 0;
   $12 = $11&1;
   if (!($12)) {
    // unreachable;
   }
  } else {
   $13 = ($9>>>0)<(2);
   L11: do {
    if ($13) {
     $14 = $8 >>> 1;
     $15 = $14&255;
     HEAP8[7032>>0] = $15;
     $__p$0$i = ((7032 + 4|0));
    } else {
     $16 = (($9) + 4)|0;
     $17 = $16 & -4;
     $18 = $17 << 2;
     $19 = ($18|0)==(0);
     $$size$i = $19 ? 1 : $18;
     while(1) {
      $20 = (_malloc($$size$i)|0);
      $21 = ($20|0)==(0|0);
      if (!($21)) {
       label = 20;
       break;
      }
      $22 = HEAP32[15648>>2]|0;HEAP32[15648>>2] = (($22+0)|0);
      $23 = ($22|0)==(0);
      if ($23) {
       label = 18;
       break;
      }
      $24 = $22;
      __THREW__ = 0;
      invoke_v($24|0);
      $25 = __THREW__; __THREW__ = 0;
      $26 = $25&1;
      if ($26) {
       label = 13;
       break;
      }
     }
     do {
      if ((label|0) == 13) {
       $27 = ___cxa_find_matching_catch(-1,-1,15712|0)|0;
       $28 = tempRet0;
       $lpad$phi$i$index = $27;$lpad$phi$i$index5 = $28;
      }
      else if ((label|0) == 18) {
       $34 = (___cxa_allocate_exception(4)|0);
       HEAP32[$34>>2] = ((15656 + 8|0));
       __THREW__ = 0;
       invoke_viii(379,($34|0),(15712|0),(374|0));
       $35 = __THREW__; __THREW__ = 0;
       $36 = $35&1;
       if ($36) {
        $29 = ___cxa_find_matching_catch(-1,-1,15712|0)|0;
        $30 = tempRet0;
        $lpad$phi$i$index = $29;$lpad$phi$i$index5 = $30;
        break;
       } else {
        // unreachable;
       }
      }
      else if ((label|0) == 20) {
       HEAP32[((7032 + 8|0))>>2] = $20;
       $37 = $17 | 1;
       HEAP32[7032>>2] = $37;
       HEAP32[((7032 + 4|0))>>2] = $9;
       $__p$0$i = $20;
       break L11;
      }
     } while(0);
     $31 = ($lpad$phi$i$index5|0)<(0);
     if (!($31)) {
      $eh$lpad$body$index10Z2D = $lpad$phi$i$index5;$eh$lpad$body$indexZ2D = $lpad$phi$i$index;
      ___cxa_guard_abort((7048|0));
      ___resumeException($eh$lpad$body$indexZ2D|0);
      // unreachable;
     }
     __THREW__ = 0;
     invoke_vi(380,($lpad$phi$i$index|0));
     $32 = __THREW__; __THREW__ = 0;
     $33 = $32&1;
     if ($33) {
      break L9;
     }
     // unreachable;
    }
   } while(0);
   $38 = ($9|0)==(0);
   if (!($38)) {
    $$014$i$i = $9;$$023$i$i = 7056;$$05$i$i = $__p$0$i;
    while(1) {
     $39 = (($$014$i$i) + -1)|0;
     $40 = (($$023$i$i) + 4|0);
     $41 = HEAP32[$$023$i$i>>2]|0;
     $42 = (($$05$i$i) + 4|0);
     HEAP32[$$05$i$i>>2] = $41;
     $43 = ($39|0)==(0);
     if ($43) {
      break;
     } else {
      $$014$i$i = $39;$$023$i$i = $40;$$05$i$i = $42;
     }
    }
   }
   $44 = (($__p$0$i) + ($9<<2)|0);
   HEAP32[$44>>2] = 0;
   (___cxa_atexit((500|0),(7032|0),(___dso_handle|0))|0);
   ___cxa_guard_release((7048|0));
   STACKTOP = sp;return (7032|0);
  }
 } while(0);
 $45 = ___cxa_find_matching_catch(-1,-1)|0;
 $46 = tempRet0;
 $eh$lpad$body$index10Z2D = $46;$eh$lpad$body$indexZ2D = $45;
 ___cxa_guard_abort((7048|0));
 ___resumeException($eh$lpad$body$indexZ2D|0);
 // unreachable;
 return 0|0;
}
function __ZNKSt3__120__time_get_c_storageIcE3__rEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[7160>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if (!($1)) {
  STACKTOP = sp;return (7144|0);
 }
 $2 = (___cxa_guard_acquire((7160|0))|0);
 $3 = ($2|0)==(0);
 if ($3) {
  STACKTOP = sp;return (7144|0);
 }
 __THREW__ = 0;
 invoke_viii(501,(7144|0),(7168|0),11);
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch(-1,-1)|0;
  $7 = tempRet0;
  ___cxa_guard_abort((7160|0));
  ___resumeException($6|0);
  // unreachable;
 }
 (___cxa_atexit((498|0),(7144|0),(___dso_handle|0))|0);
 ___cxa_guard_release((7160|0));
 STACKTOP = sp;return (7144|0);
}
function __ZNKSt3__120__time_get_c_storageIwE3__rEv($this) {
 $this = $this|0;
 var $$0$i = 0, $$014$i$i = 0, $$023$i$i = 0, $$05$i$i = 0, $$size$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$0$i = 0, $eh$lpad$body$index10Z2D = 0, $eh$lpad$body$indexZ2D = 0, $lpad$phi$i$index = 0, $lpad$phi$i$index5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[7200>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if (!($1)) {
  STACKTOP = sp;return (7184|0);
 }
 $2 = (___cxa_guard_acquire((7200|0))|0);
 $3 = ($2|0)==(0);
 if ($3) {
  STACKTOP = sp;return (7184|0);
 } else {
  $$0$i = 7208;
 }
 while(1) {
  $4 = HEAP32[$$0$i>>2]|0;
  $5 = ($4|0)==(0);
  $6 = (($$0$i) + 4|0);
  if ($5) {
   break;
  } else {
   $$0$i = $6;
  }
 }
 $7 = $$0$i;
 $8 = (($7) - (7208))|0;
 $9 = $8 >> 2;
 $10 = ($9>>>0)>(1073741807);
 L9: do {
  if ($10) {
   __THREW__ = 0;
   invoke_v(499);
   $11 = __THREW__; __THREW__ = 0;
   $12 = $11&1;
   if (!($12)) {
    // unreachable;
   }
  } else {
   $13 = ($9>>>0)<(2);
   L11: do {
    if ($13) {
     $14 = $8 >>> 1;
     $15 = $14&255;
     HEAP8[7184>>0] = $15;
     $__p$0$i = ((7184 + 4|0));
    } else {
     $16 = (($9) + 4)|0;
     $17 = $16 & -4;
     $18 = $17 << 2;
     $19 = ($18|0)==(0);
     $$size$i = $19 ? 1 : $18;
     while(1) {
      $20 = (_malloc($$size$i)|0);
      $21 = ($20|0)==(0|0);
      if (!($21)) {
       label = 20;
       break;
      }
      $22 = HEAP32[15648>>2]|0;HEAP32[15648>>2] = (($22+0)|0);
      $23 = ($22|0)==(0);
      if ($23) {
       label = 18;
       break;
      }
      $24 = $22;
      __THREW__ = 0;
      invoke_v($24|0);
      $25 = __THREW__; __THREW__ = 0;
      $26 = $25&1;
      if ($26) {
       label = 13;
       break;
      }
     }
     do {
      if ((label|0) == 13) {
       $27 = ___cxa_find_matching_catch(-1,-1,15712|0)|0;
       $28 = tempRet0;
       $lpad$phi$i$index = $27;$lpad$phi$i$index5 = $28;
      }
      else if ((label|0) == 18) {
       $34 = (___cxa_allocate_exception(4)|0);
       HEAP32[$34>>2] = ((15656 + 8|0));
       __THREW__ = 0;
       invoke_viii(379,($34|0),(15712|0),(374|0));
       $35 = __THREW__; __THREW__ = 0;
       $36 = $35&1;
       if ($36) {
        $29 = ___cxa_find_matching_catch(-1,-1,15712|0)|0;
        $30 = tempRet0;
        $lpad$phi$i$index = $29;$lpad$phi$i$index5 = $30;
        break;
       } else {
        // unreachable;
       }
      }
      else if ((label|0) == 20) {
       HEAP32[((7184 + 8|0))>>2] = $20;
       $37 = $17 | 1;
       HEAP32[7184>>2] = $37;
       HEAP32[((7184 + 4|0))>>2] = $9;
       $__p$0$i = $20;
       break L11;
      }
     } while(0);
     $31 = ($lpad$phi$i$index5|0)<(0);
     if (!($31)) {
      $eh$lpad$body$index10Z2D = $lpad$phi$i$index5;$eh$lpad$body$indexZ2D = $lpad$phi$i$index;
      ___cxa_guard_abort((7200|0));
      ___resumeException($eh$lpad$body$indexZ2D|0);
      // unreachable;
     }
     __THREW__ = 0;
     invoke_vi(380,($lpad$phi$i$index|0));
     $32 = __THREW__; __THREW__ = 0;
     $33 = $32&1;
     if ($33) {
      break L9;
     }
     // unreachable;
    }
   } while(0);
   $38 = ($9|0)==(0);
   if (!($38)) {
    $$014$i$i = $9;$$023$i$i = 7208;$$05$i$i = $__p$0$i;
    while(1) {
     $39 = (($$014$i$i) + -1)|0;
     $40 = (($$023$i$i) + 4|0);
     $41 = HEAP32[$$023$i$i>>2]|0;
     $42 = (($$05$i$i) + 4|0);
     HEAP32[$$05$i$i>>2] = $41;
     $43 = ($39|0)==(0);
     if ($43) {
      break;
     } else {
      $$014$i$i = $39;$$023$i$i = $40;$$05$i$i = $42;
     }
    }
   }
   $44 = (($__p$0$i) + ($9<<2)|0);
   HEAP32[$44>>2] = 0;
   (___cxa_atexit((500|0),(7184|0),(___dso_handle|0))|0);
   ___cxa_guard_release((7200|0));
   STACKTOP = sp;return (7184|0);
  }
 } while(0);
 $45 = ___cxa_find_matching_catch(-1,-1)|0;
 $46 = tempRet0;
 $eh$lpad$body$index10Z2D = $46;$eh$lpad$body$indexZ2D = $45;
 ___cxa_guard_abort((7200|0));
 ___resumeException($eh$lpad$body$indexZ2D|0);
 // unreachable;
 return 0|0;
}
function __ZNSt3__115__num_get_floatIeEET_PKcS3_Rj($__a,$__a_end,$__err) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 var $$0 = 0.0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $f$i$i$i = 0, dest = 0, label = 0;
 var sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $f$i$i$i = sp;
 $0 = ($__a|0)==($__a_end|0);
 if ($0) {
  HEAP32[$__err>>2] = 4;
  $$0 = 0.0;
  STACKTOP = sp;return (+$$0);
 }
 $1 = (___errno_location()|0);
 $2 = HEAP32[$1>>2]|0;
 HEAP32[$1>>2] = 0;
 $3 = HEAP8[6328>>0]|0;
 $4 = ($3<<24>>24)==(0);
 do {
  if ($4) {
   $5 = (___cxa_guard_acquire((6328|0))|0);
   $6 = ($5|0)==(0);
   if (!($6)) {
    __THREW__ = 0;
    $7 = (invoke_iiii(461,2147483647,(6336|0),(0|0))|0);
    $8 = __THREW__; __THREW__ = 0;
    $9 = $8&1;
    if ($9) {
     $10 = ___cxa_find_matching_catch(-1,-1)|0;
     $11 = tempRet0;
     ___cxa_guard_abort((6328|0));
     ___resumeException($10|0);
     // unreachable;
    } else {
     HEAP32[6320>>2] = $7;
     ___cxa_guard_release((6328|0));
     break;
    }
   }
  }
 } while(0);
 dest=$f$i$i$i+0|0; stop=dest+108|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $12 = (($f$i$i$i) + 4|0);
 HEAP32[$12>>2] = $__a;
 $13 = (($f$i$i$i) + 8|0);
 HEAP32[$13>>2] = (-1);
 $14 = (($f$i$i$i) + 44|0);
 HEAP32[$14>>2] = $__a;
 $15 = (($f$i$i$i) + 76|0);
 HEAP32[$15>>2] = -1;
 $16 = (($f$i$i$i) + 104|0);
 HEAP32[$16>>2] = 0;
 $17 = $__a;
 $18 = $17 ^ -1;
 $19 = (($f$i$i$i) + 108|0);
 HEAP32[$19>>2] = $18;
 $20 = (($f$i$i$i) + 100|0);
 HEAP32[$20>>2] = (-1);
 $21 = (+___floatscan($f$i$i$i,2,1));
 $22 = HEAP32[$19>>2]|0;
 $23 = HEAP32[$12>>2]|0;
 $24 = HEAP32[$13>>2]|0;
 $25 = $23;
 $26 = $24;
 $27 = (($25) - ($26))|0;
 $28 = (($27) + ($22))|0;
 $29 = ($28|0)==(0);
 if ($29) {
  $34 = $__a;
 } else {
  $30 = (($__a) + ($28)|0);
  $34 = $30;
 }
 $31 = HEAP32[$1>>2]|0;
 $32 = ($31|0)==(0);
 if ($32) {
  HEAP32[$1>>2] = $2;
 }
 $33 = ($34|0)==($__a_end|0);
 if (!($33)) {
  HEAP32[$__err>>2] = 4;
  $$0 = 0.0;
  STACKTOP = sp;return (+$$0);
 }
 $35 = ($31|0)==(34);
 if (!($35)) {
  $$0 = $21;
  STACKTOP = sp;return (+$$0);
 }
 HEAP32[$__err>>2] = 4;
 $$0 = $21;
 STACKTOP = sp;return (+$$0);
}
function __ZNSt3__115__num_get_floatIdEET_PKcS3_Rj($__a,$__a_end,$__err) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 var $$0 = 0.0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $f$i$i$i = 0, dest = 0, label = 0;
 var sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $f$i$i$i = sp;
 $0 = ($__a|0)==($__a_end|0);
 if ($0) {
  HEAP32[$__err>>2] = 4;
  $$0 = 0.0;
  STACKTOP = sp;return (+$$0);
 }
 $1 = (___errno_location()|0);
 $2 = HEAP32[$1>>2]|0;
 HEAP32[$1>>2] = 0;
 $3 = HEAP8[6328>>0]|0;
 $4 = ($3<<24>>24)==(0);
 do {
  if ($4) {
   $5 = (___cxa_guard_acquire((6328|0))|0);
   $6 = ($5|0)==(0);
   if (!($6)) {
    __THREW__ = 0;
    $7 = (invoke_iiii(461,2147483647,(6336|0),(0|0))|0);
    $8 = __THREW__; __THREW__ = 0;
    $9 = $8&1;
    if ($9) {
     $10 = ___cxa_find_matching_catch(-1,-1)|0;
     $11 = tempRet0;
     ___cxa_guard_abort((6328|0));
     ___resumeException($10|0);
     // unreachable;
    } else {
     HEAP32[6320>>2] = $7;
     ___cxa_guard_release((6328|0));
     break;
    }
   }
  }
 } while(0);
 dest=$f$i$i$i+0|0; stop=dest+108|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $12 = (($f$i$i$i) + 4|0);
 HEAP32[$12>>2] = $__a;
 $13 = (($f$i$i$i) + 8|0);
 HEAP32[$13>>2] = (-1);
 $14 = (($f$i$i$i) + 44|0);
 HEAP32[$14>>2] = $__a;
 $15 = (($f$i$i$i) + 76|0);
 HEAP32[$15>>2] = -1;
 $16 = (($f$i$i$i) + 104|0);
 HEAP32[$16>>2] = 0;
 $17 = $__a;
 $18 = $17 ^ -1;
 $19 = (($f$i$i$i) + 108|0);
 HEAP32[$19>>2] = $18;
 $20 = (($f$i$i$i) + 100|0);
 HEAP32[$20>>2] = (-1);
 $21 = (+___floatscan($f$i$i$i,2,1));
 $22 = HEAP32[$19>>2]|0;
 $23 = HEAP32[$12>>2]|0;
 $24 = HEAP32[$13>>2]|0;
 $25 = $23;
 $26 = $24;
 $27 = (($25) - ($26))|0;
 $28 = (($27) + ($22))|0;
 $29 = ($28|0)==(0);
 if ($29) {
  $34 = $__a;
 } else {
  $30 = (($__a) + ($28)|0);
  $34 = $30;
 }
 $31 = HEAP32[$1>>2]|0;
 $32 = ($31|0)==(0);
 if ($32) {
  HEAP32[$1>>2] = $2;
 }
 $33 = ($34|0)==($__a_end|0);
 if (!($33)) {
  HEAP32[$__err>>2] = 4;
  $$0 = 0.0;
  STACKTOP = sp;return (+$$0);
 }
 $35 = ($31|0)==(34);
 if (!($35)) {
  $$0 = $21;
  STACKTOP = sp;return (+$$0);
 }
 HEAP32[$__err>>2] = 4;
 $$0 = $21;
 STACKTOP = sp;return (+$$0);
}
function __ZNSt3__115__num_get_floatIfEET_PKcS3_Rj($__a,$__a_end,$__err) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 var $$0 = 0.0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $f$i$i$i = 0, dest = 0;
 var label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $f$i$i$i = sp;
 $0 = ($__a|0)==($__a_end|0);
 if ($0) {
  HEAP32[$__err>>2] = 4;
  $$0 = 0.0;
  STACKTOP = sp;return (+$$0);
 }
 $1 = (___errno_location()|0);
 $2 = HEAP32[$1>>2]|0;
 HEAP32[$1>>2] = 0;
 $3 = HEAP8[6328>>0]|0;
 $4 = ($3<<24>>24)==(0);
 do {
  if ($4) {
   $5 = (___cxa_guard_acquire((6328|0))|0);
   $6 = ($5|0)==(0);
   if (!($6)) {
    __THREW__ = 0;
    $7 = (invoke_iiii(461,2147483647,(6336|0),(0|0))|0);
    $8 = __THREW__; __THREW__ = 0;
    $9 = $8&1;
    if ($9) {
     $10 = ___cxa_find_matching_catch(-1,-1)|0;
     $11 = tempRet0;
     ___cxa_guard_abort((6328|0));
     ___resumeException($10|0);
     // unreachable;
    } else {
     HEAP32[6320>>2] = $7;
     ___cxa_guard_release((6328|0));
     break;
    }
   }
  }
 } while(0);
 dest=$f$i$i$i+0|0; stop=dest+108|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $12 = (($f$i$i$i) + 4|0);
 HEAP32[$12>>2] = $__a;
 $13 = (($f$i$i$i) + 8|0);
 HEAP32[$13>>2] = (-1);
 $14 = (($f$i$i$i) + 44|0);
 HEAP32[$14>>2] = $__a;
 $15 = (($f$i$i$i) + 76|0);
 HEAP32[$15>>2] = -1;
 $16 = (($f$i$i$i) + 104|0);
 HEAP32[$16>>2] = 0;
 $17 = $__a;
 $18 = $17 ^ -1;
 $19 = (($f$i$i$i) + 108|0);
 HEAP32[$19>>2] = $18;
 $20 = (($f$i$i$i) + 100|0);
 HEAP32[$20>>2] = (-1);
 $21 = (+___floatscan($f$i$i$i,2,1));
 $22 = HEAP32[$19>>2]|0;
 $23 = HEAP32[$12>>2]|0;
 $24 = HEAP32[$13>>2]|0;
 $25 = $23;
 $26 = $24;
 $27 = (($25) - ($26))|0;
 $28 = (($27) + ($22))|0;
 $29 = ($28|0)==(0);
 if ($29) {
  $34 = $__a;
 } else {
  $30 = (($__a) + ($28)|0);
  $34 = $30;
 }
 $31 = HEAP32[$1>>2]|0;
 $32 = ($31|0)==(0);
 if ($32) {
  HEAP32[$1>>2] = $2;
 }
 $33 = ($34|0)==($__a_end|0);
 if (!($33)) {
  HEAP32[$__err>>2] = 4;
  $$0 = 0.0;
  STACKTOP = sp;return (+$$0);
 }
 $35 = ($31|0)==(34);
 if ($35) {
  HEAP32[$__err>>2] = 4;
 }
 $36 = $21;
 $$0 = $36;
 STACKTOP = sp;return (+$$0);
}
function __ZNSt3__127__num_get_unsigned_integralIyEET_PKcS3_Rji($__a,$__a_end,$__err,$__base) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 $__base = $__base|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $f$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $f$i$i$i = sp;
 $0 = ($__a|0)==($__a_end|0);
 if ($0) {
  HEAP32[$__err>>2] = 4;
  $43 = 0;$44 = 0;
  tempRet0 = $43;
  STACKTOP = sp;return ($44|0);
 }
 $1 = HEAP8[$__a>>0]|0;
 $2 = ($1<<24>>24)==(45);
 if ($2) {
  HEAP32[$__err>>2] = 4;
  $43 = 0;$44 = 0;
  tempRet0 = $43;
  STACKTOP = sp;return ($44|0);
 }
 $3 = (___errno_location()|0);
 $4 = HEAP32[$3>>2]|0;
 HEAP32[$3>>2] = 0;
 $5 = HEAP8[6328>>0]|0;
 $6 = ($5<<24>>24)==(0);
 do {
  if ($6) {
   $7 = (___cxa_guard_acquire((6328|0))|0);
   $8 = ($7|0)==(0);
   if (!($8)) {
    __THREW__ = 0;
    $9 = (invoke_iiii(461,2147483647,(6336|0),(0|0))|0);
    $10 = __THREW__; __THREW__ = 0;
    $11 = $10&1;
    if ($11) {
     $12 = ___cxa_find_matching_catch(-1,-1)|0;
     $13 = tempRet0;
     ___cxa_guard_abort((6328|0));
     ___resumeException($12|0);
     // unreachable;
    } else {
     HEAP32[6320>>2] = $9;
     ___cxa_guard_release((6328|0));
     break;
    }
   }
  }
 } while(0);
 HEAP32[$f$i$i$i>>2] = 0;
 $14 = (($f$i$i$i) + 4|0);
 HEAP32[$14>>2] = $__a;
 $15 = (($f$i$i$i) + 44|0);
 HEAP32[$15>>2] = $__a;
 $16 = ($__a|0)<(0|0);
 if ($16) {
  $17 = (($f$i$i$i) + 8|0);
  HEAP32[$17>>2] = (-1);
  $24 = (-1);
 } else {
  $18 = (($__a) + 2147483647|0);
  $19 = (($f$i$i$i) + 8|0);
  HEAP32[$19>>2] = $18;
  $24 = $18;
 }
 $20 = (($f$i$i$i) + 76|0);
 HEAP32[$20>>2] = -1;
 $21 = (($f$i$i$i) + 104|0);
 HEAP32[$21>>2] = 0;
 $22 = (($f$i$i$i) + 8|0);
 $23 = $24;
 $25 = $__a;
 $26 = (($23) - ($25))|0;
 $27 = (($f$i$i$i) + 108|0);
 HEAP32[$27>>2] = $26;
 $28 = (($f$i$i$i) + 100|0);
 HEAP32[$28>>2] = $24;
 $29 = (___intscan($f$i$i$i,$__base,1,-1,-1)|0);
 $30 = tempRet0;
 $31 = HEAP32[$27>>2]|0;
 $32 = HEAP32[$14>>2]|0;
 $33 = HEAP32[$22>>2]|0;
 $34 = $32;
 $35 = $33;
 $36 = (($34) + ($31))|0;
 $37 = (($36) - ($35))|0;
 $38 = (($__a) + ($37)|0);
 $39 = HEAP32[$3>>2]|0;
 $40 = ($39|0)==(0);
 if ($40) {
  HEAP32[$3>>2] = $4;
 }
 $41 = ($38|0)==($__a_end|0);
 if (!($41)) {
  HEAP32[$__err>>2] = 4;
  $43 = 0;$44 = 0;
  tempRet0 = $43;
  STACKTOP = sp;return ($44|0);
 }
 $42 = ($39|0)==(34);
 if (!($42)) {
  $43 = $30;$44 = $29;
  tempRet0 = $43;
  STACKTOP = sp;return ($44|0);
 }
 HEAP32[$__err>>2] = 4;
 $43 = -1;$44 = -1;
 tempRet0 = $43;
 STACKTOP = sp;return ($44|0);
}
function __ZNSt3__127__num_get_unsigned_integralImEET_PKcS3_Rji($__a,$__a_end,$__err,$__base) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 $__base = $__base|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $f$i$i$i = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $f$i$i$i = sp;
 $0 = ($__a|0)==($__a_end|0);
 if ($0) {
  HEAP32[$__err>>2] = 4;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $1 = HEAP8[$__a>>0]|0;
 $2 = ($1<<24>>24)==(45);
 if ($2) {
  HEAP32[$__err>>2] = 4;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = (___errno_location()|0);
 $4 = HEAP32[$3>>2]|0;
 HEAP32[$3>>2] = 0;
 $5 = HEAP8[6328>>0]|0;
 $6 = ($5<<24>>24)==(0);
 do {
  if ($6) {
   $7 = (___cxa_guard_acquire((6328|0))|0);
   $8 = ($7|0)==(0);
   if (!($8)) {
    __THREW__ = 0;
    $9 = (invoke_iiii(461,2147483647,(6336|0),(0|0))|0);
    $10 = __THREW__; __THREW__ = 0;
    $11 = $10&1;
    if ($11) {
     $12 = ___cxa_find_matching_catch(-1,-1)|0;
     $13 = tempRet0;
     ___cxa_guard_abort((6328|0));
     ___resumeException($12|0);
     // unreachable;
    } else {
     HEAP32[6320>>2] = $9;
     ___cxa_guard_release((6328|0));
     break;
    }
   }
  }
 } while(0);
 HEAP32[$f$i$i$i>>2] = 0;
 $14 = (($f$i$i$i) + 4|0);
 HEAP32[$14>>2] = $__a;
 $15 = (($f$i$i$i) + 44|0);
 HEAP32[$15>>2] = $__a;
 $16 = ($__a|0)<(0|0);
 if ($16) {
  $17 = (($f$i$i$i) + 8|0);
  HEAP32[$17>>2] = (-1);
  $24 = (-1);
 } else {
  $18 = (($__a) + 2147483647|0);
  $19 = (($f$i$i$i) + 8|0);
  HEAP32[$19>>2] = $18;
  $24 = $18;
 }
 $20 = (($f$i$i$i) + 76|0);
 HEAP32[$20>>2] = -1;
 $21 = (($f$i$i$i) + 104|0);
 HEAP32[$21>>2] = 0;
 $22 = (($f$i$i$i) + 8|0);
 $23 = $24;
 $25 = $__a;
 $26 = (($23) - ($25))|0;
 $27 = (($f$i$i$i) + 108|0);
 HEAP32[$27>>2] = $26;
 $28 = (($f$i$i$i) + 100|0);
 HEAP32[$28>>2] = $24;
 $29 = (___intscan($f$i$i$i,$__base,1,-1,-1)|0);
 $30 = tempRet0;
 $31 = HEAP32[$27>>2]|0;
 $32 = HEAP32[$14>>2]|0;
 $33 = HEAP32[$22>>2]|0;
 $34 = $32;
 $35 = $33;
 $36 = (($34) + ($31))|0;
 $37 = (($36) - ($35))|0;
 $38 = (($__a) + ($37)|0);
 $39 = HEAP32[$3>>2]|0;
 $40 = ($39|0)==(0);
 if ($40) {
  HEAP32[$3>>2] = $4;
 }
 $41 = ($38|0)==($__a_end|0);
 if (!($41)) {
  HEAP32[$__err>>2] = 4;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $42 = ($39|0)==(34);
 $43 = ($30>>>0)>(0);
 $44 = ($30|0)==(0);
 $45 = ($29>>>0)>(4294967295);
 $46 = $44 & $45;
 $47 = $43 | $46;
 $or$cond = $42 | $47;
 if ($or$cond) {
  HEAP32[$__err>>2] = 4;
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 } else {
  $$0 = $29;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function __ZNSt3__127__num_get_unsigned_integralIjEET_PKcS3_Rji($__a,$__a_end,$__err,$__base) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 $__base = $__base|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $f$i$i$i = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $f$i$i$i = sp;
 $0 = ($__a|0)==($__a_end|0);
 if ($0) {
  HEAP32[$__err>>2] = 4;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $1 = HEAP8[$__a>>0]|0;
 $2 = ($1<<24>>24)==(45);
 if ($2) {
  HEAP32[$__err>>2] = 4;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = (___errno_location()|0);
 $4 = HEAP32[$3>>2]|0;
 HEAP32[$3>>2] = 0;
 $5 = HEAP8[6328>>0]|0;
 $6 = ($5<<24>>24)==(0);
 do {
  if ($6) {
   $7 = (___cxa_guard_acquire((6328|0))|0);
   $8 = ($7|0)==(0);
   if (!($8)) {
    __THREW__ = 0;
    $9 = (invoke_iiii(461,2147483647,(6336|0),(0|0))|0);
    $10 = __THREW__; __THREW__ = 0;
    $11 = $10&1;
    if ($11) {
     $12 = ___cxa_find_matching_catch(-1,-1)|0;
     $13 = tempRet0;
     ___cxa_guard_abort((6328|0));
     ___resumeException($12|0);
     // unreachable;
    } else {
     HEAP32[6320>>2] = $9;
     ___cxa_guard_release((6328|0));
     break;
    }
   }
  }
 } while(0);
 HEAP32[$f$i$i$i>>2] = 0;
 $14 = (($f$i$i$i) + 4|0);
 HEAP32[$14>>2] = $__a;
 $15 = (($f$i$i$i) + 44|0);
 HEAP32[$15>>2] = $__a;
 $16 = ($__a|0)<(0|0);
 if ($16) {
  $17 = (($f$i$i$i) + 8|0);
  HEAP32[$17>>2] = (-1);
  $24 = (-1);
 } else {
  $18 = (($__a) + 2147483647|0);
  $19 = (($f$i$i$i) + 8|0);
  HEAP32[$19>>2] = $18;
  $24 = $18;
 }
 $20 = (($f$i$i$i) + 76|0);
 HEAP32[$20>>2] = -1;
 $21 = (($f$i$i$i) + 104|0);
 HEAP32[$21>>2] = 0;
 $22 = (($f$i$i$i) + 8|0);
 $23 = $24;
 $25 = $__a;
 $26 = (($23) - ($25))|0;
 $27 = (($f$i$i$i) + 108|0);
 HEAP32[$27>>2] = $26;
 $28 = (($f$i$i$i) + 100|0);
 HEAP32[$28>>2] = $24;
 $29 = (___intscan($f$i$i$i,$__base,1,-1,-1)|0);
 $30 = tempRet0;
 $31 = HEAP32[$27>>2]|0;
 $32 = HEAP32[$14>>2]|0;
 $33 = HEAP32[$22>>2]|0;
 $34 = $32;
 $35 = $33;
 $36 = (($34) + ($31))|0;
 $37 = (($36) - ($35))|0;
 $38 = (($__a) + ($37)|0);
 $39 = HEAP32[$3>>2]|0;
 $40 = ($39|0)==(0);
 if ($40) {
  HEAP32[$3>>2] = $4;
 }
 $41 = ($38|0)==($__a_end|0);
 if (!($41)) {
  HEAP32[$__err>>2] = 4;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $42 = ($39|0)==(34);
 $43 = ($30>>>0)>(0);
 $44 = ($30|0)==(0);
 $45 = ($29>>>0)>(4294967295);
 $46 = $44 & $45;
 $47 = $43 | $46;
 $or$cond = $42 | $47;
 if ($or$cond) {
  HEAP32[$__err>>2] = 4;
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 } else {
  $$0 = $29;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function __ZNSt3__127__num_get_unsigned_integralItEET_PKcS3_Rji($__a,$__a_end,$__err,$__base) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 $__base = $__base|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $f$i$i$i = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $f$i$i$i = sp;
 $0 = ($__a|0)==($__a_end|0);
 if ($0) {
  HEAP32[$__err>>2] = 4;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $1 = HEAP8[$__a>>0]|0;
 $2 = ($1<<24>>24)==(45);
 if ($2) {
  HEAP32[$__err>>2] = 4;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = (___errno_location()|0);
 $4 = HEAP32[$3>>2]|0;
 HEAP32[$3>>2] = 0;
 $5 = HEAP8[6328>>0]|0;
 $6 = ($5<<24>>24)==(0);
 do {
  if ($6) {
   $7 = (___cxa_guard_acquire((6328|0))|0);
   $8 = ($7|0)==(0);
   if (!($8)) {
    __THREW__ = 0;
    $9 = (invoke_iiii(461,2147483647,(6336|0),(0|0))|0);
    $10 = __THREW__; __THREW__ = 0;
    $11 = $10&1;
    if ($11) {
     $12 = ___cxa_find_matching_catch(-1,-1)|0;
     $13 = tempRet0;
     ___cxa_guard_abort((6328|0));
     ___resumeException($12|0);
     // unreachable;
    } else {
     HEAP32[6320>>2] = $9;
     ___cxa_guard_release((6328|0));
     break;
    }
   }
  }
 } while(0);
 HEAP32[$f$i$i$i>>2] = 0;
 $14 = (($f$i$i$i) + 4|0);
 HEAP32[$14>>2] = $__a;
 $15 = (($f$i$i$i) + 44|0);
 HEAP32[$15>>2] = $__a;
 $16 = ($__a|0)<(0|0);
 if ($16) {
  $17 = (($f$i$i$i) + 8|0);
  HEAP32[$17>>2] = (-1);
  $24 = (-1);
 } else {
  $18 = (($__a) + 2147483647|0);
  $19 = (($f$i$i$i) + 8|0);
  HEAP32[$19>>2] = $18;
  $24 = $18;
 }
 $20 = (($f$i$i$i) + 76|0);
 HEAP32[$20>>2] = -1;
 $21 = (($f$i$i$i) + 104|0);
 HEAP32[$21>>2] = 0;
 $22 = (($f$i$i$i) + 8|0);
 $23 = $24;
 $25 = $__a;
 $26 = (($23) - ($25))|0;
 $27 = (($f$i$i$i) + 108|0);
 HEAP32[$27>>2] = $26;
 $28 = (($f$i$i$i) + 100|0);
 HEAP32[$28>>2] = $24;
 $29 = (___intscan($f$i$i$i,$__base,1,-1,-1)|0);
 $30 = tempRet0;
 $31 = HEAP32[$27>>2]|0;
 $32 = HEAP32[$14>>2]|0;
 $33 = HEAP32[$22>>2]|0;
 $34 = $32;
 $35 = $33;
 $36 = (($34) + ($31))|0;
 $37 = (($36) - ($35))|0;
 $38 = (($__a) + ($37)|0);
 $39 = HEAP32[$3>>2]|0;
 $40 = ($39|0)==(0);
 if ($40) {
  HEAP32[$3>>2] = $4;
 }
 $41 = ($38|0)==($__a_end|0);
 if (!($41)) {
  HEAP32[$__err>>2] = 4;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $42 = ($39|0)==(34);
 $43 = ($30>>>0)>(0);
 $44 = ($30|0)==(0);
 $45 = ($29>>>0)>(65535);
 $46 = $44 & $45;
 $47 = $43 | $46;
 $or$cond = $42 | $47;
 if ($or$cond) {
  HEAP32[$__err>>2] = 4;
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 } else {
  $48 = $29&65535;
  $$0 = $48;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function __ZNSt3__125__num_get_signed_integralIxEET_PKcS3_Rji($__a,$__a_end,$__err,$__base) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 $__base = $__base|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $f$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $f$i$i$i = sp;
 $0 = ($__a|0)==($__a_end|0);
 if ($0) {
  HEAP32[$__err>>2] = 4;
  $48 = 0;$49 = 0;
  tempRet0 = $48;
  STACKTOP = sp;return ($49|0);
 }
 $1 = (___errno_location()|0);
 $2 = HEAP32[$1>>2]|0;
 HEAP32[$1>>2] = 0;
 $3 = HEAP8[6328>>0]|0;
 $4 = ($3<<24>>24)==(0);
 do {
  if ($4) {
   $5 = (___cxa_guard_acquire((6328|0))|0);
   $6 = ($5|0)==(0);
   if (!($6)) {
    __THREW__ = 0;
    $7 = (invoke_iiii(461,2147483647,(6336|0),(0|0))|0);
    $8 = __THREW__; __THREW__ = 0;
    $9 = $8&1;
    if ($9) {
     $10 = ___cxa_find_matching_catch(-1,-1)|0;
     $11 = tempRet0;
     ___cxa_guard_abort((6328|0));
     ___resumeException($10|0);
     // unreachable;
    } else {
     HEAP32[6320>>2] = $7;
     ___cxa_guard_release((6328|0));
     break;
    }
   }
  }
 } while(0);
 HEAP32[$f$i$i$i>>2] = 0;
 $12 = (($f$i$i$i) + 4|0);
 HEAP32[$12>>2] = $__a;
 $13 = (($f$i$i$i) + 44|0);
 HEAP32[$13>>2] = $__a;
 $14 = ($__a|0)<(0|0);
 if ($14) {
  $15 = (($f$i$i$i) + 8|0);
  HEAP32[$15>>2] = (-1);
  $22 = (-1);
 } else {
  $16 = (($__a) + 2147483647|0);
  $17 = (($f$i$i$i) + 8|0);
  HEAP32[$17>>2] = $16;
  $22 = $16;
 }
 $18 = (($f$i$i$i) + 76|0);
 HEAP32[$18>>2] = -1;
 $19 = (($f$i$i$i) + 104|0);
 HEAP32[$19>>2] = 0;
 $20 = (($f$i$i$i) + 8|0);
 $21 = $22;
 $23 = $__a;
 $24 = (($21) - ($23))|0;
 $25 = (($f$i$i$i) + 108|0);
 HEAP32[$25>>2] = $24;
 $26 = (($f$i$i$i) + 100|0);
 HEAP32[$26>>2] = $22;
 $27 = (___intscan($f$i$i$i,$__base,1,0,-2147483648)|0);
 $28 = tempRet0;
 $29 = HEAP32[$25>>2]|0;
 $30 = HEAP32[$12>>2]|0;
 $31 = HEAP32[$20>>2]|0;
 $32 = $30;
 $33 = $31;
 $34 = (($32) + ($29))|0;
 $35 = (($34) - ($33))|0;
 $36 = (($__a) + ($35)|0);
 $37 = HEAP32[$1>>2]|0;
 $38 = ($37|0)==(0);
 if ($38) {
  HEAP32[$1>>2] = $2;
 }
 $39 = ($36|0)==($__a_end|0);
 if (!($39)) {
  HEAP32[$__err>>2] = 4;
  $48 = 0;$49 = 0;
  tempRet0 = $48;
  STACKTOP = sp;return ($49|0);
 }
 $40 = ($37|0)==(34);
 if ($40) {
  HEAP32[$__err>>2] = 4;
  $41 = ($28|0)>(0);
  $42 = ($28|0)==(0);
  $43 = ($27>>>0)>(0);
  $44 = $42 & $43;
  $45 = $41 | $44;
  $46 = $45 ? -1 : 0;
  $47 = $45 ? 2147483647 : -2147483648;
  tempRet0 = $47;
  STACKTOP = sp;return ($46|0);
 } else {
  $48 = $28;$49 = $27;
  tempRet0 = $48;
  STACKTOP = sp;return ($49|0);
 }
 return 0|0;
}
function __ZNSt3__125__num_get_signed_integralIlEET_PKcS3_Rji($__a,$__a_end,$__err,$__base) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 $__base = $__base|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $f$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $f$i$i$i = sp;
 $0 = ($__a|0)==($__a_end|0);
 if ($0) {
  HEAP32[$__err>>2] = 4;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $1 = (___errno_location()|0);
 $2 = HEAP32[$1>>2]|0;
 HEAP32[$1>>2] = 0;
 $3 = HEAP8[6328>>0]|0;
 $4 = ($3<<24>>24)==(0);
 do {
  if ($4) {
   $5 = (___cxa_guard_acquire((6328|0))|0);
   $6 = ($5|0)==(0);
   if (!($6)) {
    __THREW__ = 0;
    $7 = (invoke_iiii(461,2147483647,(6336|0),(0|0))|0);
    $8 = __THREW__; __THREW__ = 0;
    $9 = $8&1;
    if ($9) {
     $10 = ___cxa_find_matching_catch(-1,-1)|0;
     $11 = tempRet0;
     ___cxa_guard_abort((6328|0));
     ___resumeException($10|0);
     // unreachable;
    } else {
     HEAP32[6320>>2] = $7;
     ___cxa_guard_release((6328|0));
     break;
    }
   }
  }
 } while(0);
 HEAP32[$f$i$i$i>>2] = 0;
 $12 = (($f$i$i$i) + 4|0);
 HEAP32[$12>>2] = $__a;
 $13 = (($f$i$i$i) + 44|0);
 HEAP32[$13>>2] = $__a;
 $14 = ($__a|0)<(0|0);
 if ($14) {
  $15 = (($f$i$i$i) + 8|0);
  HEAP32[$15>>2] = (-1);
  $22 = (-1);
 } else {
  $16 = (($__a) + 2147483647|0);
  $17 = (($f$i$i$i) + 8|0);
  HEAP32[$17>>2] = $16;
  $22 = $16;
 }
 $18 = (($f$i$i$i) + 76|0);
 HEAP32[$18>>2] = -1;
 $19 = (($f$i$i$i) + 104|0);
 HEAP32[$19>>2] = 0;
 $20 = (($f$i$i$i) + 8|0);
 $21 = $22;
 $23 = $__a;
 $24 = (($21) - ($23))|0;
 $25 = (($f$i$i$i) + 108|0);
 HEAP32[$25>>2] = $24;
 $26 = (($f$i$i$i) + 100|0);
 HEAP32[$26>>2] = $22;
 $27 = (___intscan($f$i$i$i,$__base,1,0,-2147483648)|0);
 $28 = tempRet0;
 $29 = HEAP32[$25>>2]|0;
 $30 = HEAP32[$12>>2]|0;
 $31 = HEAP32[$20>>2]|0;
 $32 = $30;
 $33 = $31;
 $34 = (($32) + ($29))|0;
 $35 = (($34) - ($33))|0;
 $36 = (($__a) + ($35)|0);
 $37 = HEAP32[$1>>2]|0;
 $38 = ($37|0)==(0);
 if ($38) {
  HEAP32[$1>>2] = $2;
 }
 $39 = ($36|0)==($__a_end|0);
 if (!($39)) {
  HEAP32[$__err>>2] = 4;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $40 = ($37|0)==(34);
 do {
  if ($40) {
   HEAP32[$__err>>2] = 4;
   $51 = ($28|0)>(0);
   $52 = ($28|0)==(0);
   $53 = ($27>>>0)>(0);
   $54 = $52 & $53;
   $55 = $51 | $54;
   if ($55) {
    $$0 = 2147483647;
    STACKTOP = sp;return ($$0|0);
   }
  } else {
   $41 = ($28|0)<(-1);
   $42 = ($28|0)==(-1);
   $43 = ($27>>>0)<(2147483648);
   $44 = $42 & $43;
   $45 = $41 | $44;
   if ($45) {
    HEAP32[$__err>>2] = 4;
    break;
   }
   $46 = ($28|0)>(0);
   $47 = ($28|0)==(0);
   $48 = ($27>>>0)>(2147483647);
   $49 = $47 & $48;
   $50 = $46 | $49;
   if ($50) {
    HEAP32[$__err>>2] = 4;
    $$0 = 2147483647;
    STACKTOP = sp;return ($$0|0);
   } else {
    $$0 = $27;
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 $$0 = -2147483648;
 STACKTOP = sp;return ($$0|0);
}
function ___cxx_global_array_dtor($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP8[((11192 + 276|0))>>0]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 if (!($3)) {
  $4 = HEAP32[((11192 + 284|0))>>2]|0;
  $5 = ($4|0)==(0|0);
  if (!($5)) {
   _free($4);
  }
 }
 $6 = HEAP8[((11192 + 264|0))>>0]|0;
 $7 = $6 & 1;
 $8 = ($7<<24>>24)==(0);
 if (!($8)) {
  $9 = HEAP32[((11192 + 272|0))>>2]|0;
  $10 = ($9|0)==(0|0);
  if (!($10)) {
   _free($9);
  }
 }
 $11 = HEAP8[((11192 + 252|0))>>0]|0;
 $12 = $11 & 1;
 $13 = ($12<<24>>24)==(0);
 if (!($13)) {
  $14 = HEAP32[((11192 + 260|0))>>2]|0;
  $15 = ($14|0)==(0|0);
  if (!($15)) {
   _free($14);
  }
 }
 $16 = HEAP8[((11192 + 240|0))>>0]|0;
 $17 = $16 & 1;
 $18 = ($17<<24>>24)==(0);
 if (!($18)) {
  $19 = HEAP32[((11192 + 248|0))>>2]|0;
  $20 = ($19|0)==(0|0);
  if (!($20)) {
   _free($19);
  }
 }
 $21 = HEAP8[((11192 + 228|0))>>0]|0;
 $22 = $21 & 1;
 $23 = ($22<<24>>24)==(0);
 if (!($23)) {
  $24 = HEAP32[((11192 + 236|0))>>2]|0;
  $25 = ($24|0)==(0|0);
  if (!($25)) {
   _free($24);
  }
 }
 $26 = HEAP8[((11192 + 216|0))>>0]|0;
 $27 = $26 & 1;
 $28 = ($27<<24>>24)==(0);
 if (!($28)) {
  $29 = HEAP32[((11192 + 224|0))>>2]|0;
  $30 = ($29|0)==(0|0);
  if (!($30)) {
   _free($29);
  }
 }
 $31 = HEAP8[((11192 + 204|0))>>0]|0;
 $32 = $31 & 1;
 $33 = ($32<<24>>24)==(0);
 if (!($33)) {
  $34 = HEAP32[((11192 + 212|0))>>2]|0;
  $35 = ($34|0)==(0|0);
  if (!($35)) {
   _free($34);
  }
 }
 $36 = HEAP8[((11192 + 192|0))>>0]|0;
 $37 = $36 & 1;
 $38 = ($37<<24>>24)==(0);
 if (!($38)) {
  $39 = HEAP32[((11192 + 200|0))>>2]|0;
  $40 = ($39|0)==(0|0);
  if (!($40)) {
   _free($39);
  }
 }
 $41 = HEAP8[((11192 + 180|0))>>0]|0;
 $42 = $41 & 1;
 $43 = ($42<<24>>24)==(0);
 if (!($43)) {
  $44 = HEAP32[((11192 + 188|0))>>2]|0;
  $45 = ($44|0)==(0|0);
  if (!($45)) {
   _free($44);
  }
 }
 $46 = HEAP8[((11192 + 168|0))>>0]|0;
 $47 = $46 & 1;
 $48 = ($47<<24>>24)==(0);
 if (!($48)) {
  $49 = HEAP32[((11192 + 176|0))>>2]|0;
  $50 = ($49|0)==(0|0);
  if (!($50)) {
   _free($49);
  }
 }
 $51 = HEAP8[((11192 + 156|0))>>0]|0;
 $52 = $51 & 1;
 $53 = ($52<<24>>24)==(0);
 if (!($53)) {
  $54 = HEAP32[((11192 + 164|0))>>2]|0;
  $55 = ($54|0)==(0|0);
  if (!($55)) {
   _free($54);
  }
 }
 $56 = HEAP8[((11192 + 144|0))>>0]|0;
 $57 = $56 & 1;
 $58 = ($57<<24>>24)==(0);
 if (!($58)) {
  $59 = HEAP32[((11192 + 152|0))>>2]|0;
  $60 = ($59|0)==(0|0);
  if (!($60)) {
   _free($59);
  }
 }
 $61 = HEAP8[((11192 + 132|0))>>0]|0;
 $62 = $61 & 1;
 $63 = ($62<<24>>24)==(0);
 if (!($63)) {
  $64 = HEAP32[((11192 + 140|0))>>2]|0;
  $65 = ($64|0)==(0|0);
  if (!($65)) {
   _free($64);
  }
 }
 $66 = HEAP8[((11192 + 120|0))>>0]|0;
 $67 = $66 & 1;
 $68 = ($67<<24>>24)==(0);
 if (!($68)) {
  $69 = HEAP32[((11192 + 128|0))>>2]|0;
  $70 = ($69|0)==(0|0);
  if (!($70)) {
   _free($69);
  }
 }
 $71 = HEAP8[((11192 + 108|0))>>0]|0;
 $72 = $71 & 1;
 $73 = ($72<<24>>24)==(0);
 if (!($73)) {
  $74 = HEAP32[((11192 + 116|0))>>2]|0;
  $75 = ($74|0)==(0|0);
  if (!($75)) {
   _free($74);
  }
 }
 $76 = HEAP8[((11192 + 96|0))>>0]|0;
 $77 = $76 & 1;
 $78 = ($77<<24>>24)==(0);
 if (!($78)) {
  $79 = HEAP32[((11192 + 104|0))>>2]|0;
  $80 = ($79|0)==(0|0);
  if (!($80)) {
   _free($79);
  }
 }
 $81 = HEAP8[((11192 + 84|0))>>0]|0;
 $82 = $81 & 1;
 $83 = ($82<<24>>24)==(0);
 if (!($83)) {
  $84 = HEAP32[((11192 + 92|0))>>2]|0;
  $85 = ($84|0)==(0|0);
  if (!($85)) {
   _free($84);
  }
 }
 $86 = HEAP8[((11192 + 72|0))>>0]|0;
 $87 = $86 & 1;
 $88 = ($87<<24>>24)==(0);
 if (!($88)) {
  $89 = HEAP32[((11192 + 80|0))>>2]|0;
  $90 = ($89|0)==(0|0);
  if (!($90)) {
   _free($89);
  }
 }
 $91 = HEAP8[((11192 + 60|0))>>0]|0;
 $92 = $91 & 1;
 $93 = ($92<<24>>24)==(0);
 do {
  if (!($93)) {
   $94 = HEAP32[((11192 + 68|0))>>2]|0;
   $95 = ($94|0)==(0|0);
   if ($95) {
    break;
   }
   _free($94);
  }
 } while(0);
 $96 = HEAP8[((11192 + 48|0))>>0]|0;
 $97 = $96 & 1;
 $98 = ($97<<24>>24)==(0);
 do {
  if (!($98)) {
   $99 = HEAP32[((11192 + 56|0))>>2]|0;
   $100 = ($99|0)==(0|0);
   if ($100) {
    break;
   }
   _free($99);
  }
 } while(0);
 $101 = HEAP8[((11192 + 36|0))>>0]|0;
 $102 = $101 & 1;
 $103 = ($102<<24>>24)==(0);
 do {
  if (!($103)) {
   $104 = HEAP32[((11192 + 44|0))>>2]|0;
   $105 = ($104|0)==(0|0);
   if ($105) {
    break;
   }
   _free($104);
  }
 } while(0);
 $106 = HEAP8[((11192 + 24|0))>>0]|0;
 $107 = $106 & 1;
 $108 = ($107<<24>>24)==(0);
 do {
  if (!($108)) {
   $109 = HEAP32[((11192 + 32|0))>>2]|0;
   $110 = ($109|0)==(0|0);
   if ($110) {
    break;
   }
   _free($109);
  }
 } while(0);
 $111 = HEAP8[((11192 + 12|0))>>0]|0;
 $112 = $111 & 1;
 $113 = ($112<<24>>24)==(0);
 do {
  if (!($113)) {
   $114 = HEAP32[((11192 + 20|0))>>2]|0;
   $115 = ($114|0)==(0|0);
   if ($115) {
    break;
   }
   _free($114);
  }
 } while(0);
 $116 = HEAP8[11192>>0]|0;
 $117 = $116 & 1;
 $118 = ($117<<24>>24)==(0);
 if ($118) {
  STACKTOP = sp;return;
 }
 $119 = HEAP32[((11192 + 8|0))>>2]|0;
 $120 = ($119|0)==(0|0);
 if ($120) {
  STACKTOP = sp;return;
 }
 _free($119);
 STACKTOP = sp;return;
}
function ___cxx_global_array_dtor53($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP8[((11520 + 276|0))>>0]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 if (!($3)) {
  $4 = HEAP32[((11520 + 284|0))>>2]|0;
  $5 = ($4|0)==(0|0);
  if (!($5)) {
   _free($4);
  }
 }
 $6 = HEAP8[((11520 + 264|0))>>0]|0;
 $7 = $6 & 1;
 $8 = ($7<<24>>24)==(0);
 if (!($8)) {
  $9 = HEAP32[((11520 + 272|0))>>2]|0;
  $10 = ($9|0)==(0|0);
  if (!($10)) {
   _free($9);
  }
 }
 $11 = HEAP8[((11520 + 252|0))>>0]|0;
 $12 = $11 & 1;
 $13 = ($12<<24>>24)==(0);
 if (!($13)) {
  $14 = HEAP32[((11520 + 260|0))>>2]|0;
  $15 = ($14|0)==(0|0);
  if (!($15)) {
   _free($14);
  }
 }
 $16 = HEAP8[((11520 + 240|0))>>0]|0;
 $17 = $16 & 1;
 $18 = ($17<<24>>24)==(0);
 if (!($18)) {
  $19 = HEAP32[((11520 + 248|0))>>2]|0;
  $20 = ($19|0)==(0|0);
  if (!($20)) {
   _free($19);
  }
 }
 $21 = HEAP8[((11520 + 228|0))>>0]|0;
 $22 = $21 & 1;
 $23 = ($22<<24>>24)==(0);
 if (!($23)) {
  $24 = HEAP32[((11520 + 236|0))>>2]|0;
  $25 = ($24|0)==(0|0);
  if (!($25)) {
   _free($24);
  }
 }
 $26 = HEAP8[((11520 + 216|0))>>0]|0;
 $27 = $26 & 1;
 $28 = ($27<<24>>24)==(0);
 if (!($28)) {
  $29 = HEAP32[((11520 + 224|0))>>2]|0;
  $30 = ($29|0)==(0|0);
  if (!($30)) {
   _free($29);
  }
 }
 $31 = HEAP8[((11520 + 204|0))>>0]|0;
 $32 = $31 & 1;
 $33 = ($32<<24>>24)==(0);
 if (!($33)) {
  $34 = HEAP32[((11520 + 212|0))>>2]|0;
  $35 = ($34|0)==(0|0);
  if (!($35)) {
   _free($34);
  }
 }
 $36 = HEAP8[((11520 + 192|0))>>0]|0;
 $37 = $36 & 1;
 $38 = ($37<<24>>24)==(0);
 if (!($38)) {
  $39 = HEAP32[((11520 + 200|0))>>2]|0;
  $40 = ($39|0)==(0|0);
  if (!($40)) {
   _free($39);
  }
 }
 $41 = HEAP8[((11520 + 180|0))>>0]|0;
 $42 = $41 & 1;
 $43 = ($42<<24>>24)==(0);
 if (!($43)) {
  $44 = HEAP32[((11520 + 188|0))>>2]|0;
  $45 = ($44|0)==(0|0);
  if (!($45)) {
   _free($44);
  }
 }
 $46 = HEAP8[((11520 + 168|0))>>0]|0;
 $47 = $46 & 1;
 $48 = ($47<<24>>24)==(0);
 if (!($48)) {
  $49 = HEAP32[((11520 + 176|0))>>2]|0;
  $50 = ($49|0)==(0|0);
  if (!($50)) {
   _free($49);
  }
 }
 $51 = HEAP8[((11520 + 156|0))>>0]|0;
 $52 = $51 & 1;
 $53 = ($52<<24>>24)==(0);
 if (!($53)) {
  $54 = HEAP32[((11520 + 164|0))>>2]|0;
  $55 = ($54|0)==(0|0);
  if (!($55)) {
   _free($54);
  }
 }
 $56 = HEAP8[((11520 + 144|0))>>0]|0;
 $57 = $56 & 1;
 $58 = ($57<<24>>24)==(0);
 if (!($58)) {
  $59 = HEAP32[((11520 + 152|0))>>2]|0;
  $60 = ($59|0)==(0|0);
  if (!($60)) {
   _free($59);
  }
 }
 $61 = HEAP8[((11520 + 132|0))>>0]|0;
 $62 = $61 & 1;
 $63 = ($62<<24>>24)==(0);
 if (!($63)) {
  $64 = HEAP32[((11520 + 140|0))>>2]|0;
  $65 = ($64|0)==(0|0);
  if (!($65)) {
   _free($64);
  }
 }
 $66 = HEAP8[((11520 + 120|0))>>0]|0;
 $67 = $66 & 1;
 $68 = ($67<<24>>24)==(0);
 if (!($68)) {
  $69 = HEAP32[((11520 + 128|0))>>2]|0;
  $70 = ($69|0)==(0|0);
  if (!($70)) {
   _free($69);
  }
 }
 $71 = HEAP8[((11520 + 108|0))>>0]|0;
 $72 = $71 & 1;
 $73 = ($72<<24>>24)==(0);
 if (!($73)) {
  $74 = HEAP32[((11520 + 116|0))>>2]|0;
  $75 = ($74|0)==(0|0);
  if (!($75)) {
   _free($74);
  }
 }
 $76 = HEAP8[((11520 + 96|0))>>0]|0;
 $77 = $76 & 1;
 $78 = ($77<<24>>24)==(0);
 if (!($78)) {
  $79 = HEAP32[((11520 + 104|0))>>2]|0;
  $80 = ($79|0)==(0|0);
  if (!($80)) {
   _free($79);
  }
 }
 $81 = HEAP8[((11520 + 84|0))>>0]|0;
 $82 = $81 & 1;
 $83 = ($82<<24>>24)==(0);
 if (!($83)) {
  $84 = HEAP32[((11520 + 92|0))>>2]|0;
  $85 = ($84|0)==(0|0);
  if (!($85)) {
   _free($84);
  }
 }
 $86 = HEAP8[((11520 + 72|0))>>0]|0;
 $87 = $86 & 1;
 $88 = ($87<<24>>24)==(0);
 if (!($88)) {
  $89 = HEAP32[((11520 + 80|0))>>2]|0;
  $90 = ($89|0)==(0|0);
  if (!($90)) {
   _free($89);
  }
 }
 $91 = HEAP8[((11520 + 60|0))>>0]|0;
 $92 = $91 & 1;
 $93 = ($92<<24>>24)==(0);
 do {
  if (!($93)) {
   $94 = HEAP32[((11520 + 68|0))>>2]|0;
   $95 = ($94|0)==(0|0);
   if ($95) {
    break;
   }
   _free($94);
  }
 } while(0);
 $96 = HEAP8[((11520 + 48|0))>>0]|0;
 $97 = $96 & 1;
 $98 = ($97<<24>>24)==(0);
 do {
  if (!($98)) {
   $99 = HEAP32[((11520 + 56|0))>>2]|0;
   $100 = ($99|0)==(0|0);
   if ($100) {
    break;
   }
   _free($99);
  }
 } while(0);
 $101 = HEAP8[((11520 + 36|0))>>0]|0;
 $102 = $101 & 1;
 $103 = ($102<<24>>24)==(0);
 do {
  if (!($103)) {
   $104 = HEAP32[((11520 + 44|0))>>2]|0;
   $105 = ($104|0)==(0|0);
   if ($105) {
    break;
   }
   _free($104);
  }
 } while(0);
 $106 = HEAP8[((11520 + 24|0))>>0]|0;
 $107 = $106 & 1;
 $108 = ($107<<24>>24)==(0);
 do {
  if (!($108)) {
   $109 = HEAP32[((11520 + 32|0))>>2]|0;
   $110 = ($109|0)==(0|0);
   if ($110) {
    break;
   }
   _free($109);
  }
 } while(0);
 $111 = HEAP8[((11520 + 12|0))>>0]|0;
 $112 = $111 & 1;
 $113 = ($112<<24>>24)==(0);
 do {
  if (!($113)) {
   $114 = HEAP32[((11520 + 20|0))>>2]|0;
   $115 = ($114|0)==(0|0);
   if ($115) {
    break;
   }
   _free($114);
  }
 } while(0);
 $116 = HEAP8[11520>>0]|0;
 $117 = $116 & 1;
 $118 = ($117<<24>>24)==(0);
 if ($118) {
  STACKTOP = sp;return;
 }
 $119 = HEAP32[((11520 + 8|0))>>2]|0;
 $120 = ($119|0)==(0|0);
 if ($120) {
  STACKTOP = sp;return;
 }
 _free($119);
 STACKTOP = sp;return;
}
function ___cxx_global_array_dtor56($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP8[((11832 + 276|0))>>0]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 if (!($3)) {
  $4 = HEAP32[((11832 + 284|0))>>2]|0;
  $5 = ($4|0)==(0|0);
  if (!($5)) {
   _free($4);
  }
 }
 $6 = HEAP8[((11832 + 264|0))>>0]|0;
 $7 = $6 & 1;
 $8 = ($7<<24>>24)==(0);
 if (!($8)) {
  $9 = HEAP32[((11832 + 272|0))>>2]|0;
  $10 = ($9|0)==(0|0);
  if (!($10)) {
   _free($9);
  }
 }
 $11 = HEAP8[((11832 + 252|0))>>0]|0;
 $12 = $11 & 1;
 $13 = ($12<<24>>24)==(0);
 if (!($13)) {
  $14 = HEAP32[((11832 + 260|0))>>2]|0;
  $15 = ($14|0)==(0|0);
  if (!($15)) {
   _free($14);
  }
 }
 $16 = HEAP8[((11832 + 240|0))>>0]|0;
 $17 = $16 & 1;
 $18 = ($17<<24>>24)==(0);
 if (!($18)) {
  $19 = HEAP32[((11832 + 248|0))>>2]|0;
  $20 = ($19|0)==(0|0);
  if (!($20)) {
   _free($19);
  }
 }
 $21 = HEAP8[((11832 + 228|0))>>0]|0;
 $22 = $21 & 1;
 $23 = ($22<<24>>24)==(0);
 if (!($23)) {
  $24 = HEAP32[((11832 + 236|0))>>2]|0;
  $25 = ($24|0)==(0|0);
  if (!($25)) {
   _free($24);
  }
 }
 $26 = HEAP8[((11832 + 216|0))>>0]|0;
 $27 = $26 & 1;
 $28 = ($27<<24>>24)==(0);
 if (!($28)) {
  $29 = HEAP32[((11832 + 224|0))>>2]|0;
  $30 = ($29|0)==(0|0);
  if (!($30)) {
   _free($29);
  }
 }
 $31 = HEAP8[((11832 + 204|0))>>0]|0;
 $32 = $31 & 1;
 $33 = ($32<<24>>24)==(0);
 if (!($33)) {
  $34 = HEAP32[((11832 + 212|0))>>2]|0;
  $35 = ($34|0)==(0|0);
  if (!($35)) {
   _free($34);
  }
 }
 $36 = HEAP8[((11832 + 192|0))>>0]|0;
 $37 = $36 & 1;
 $38 = ($37<<24>>24)==(0);
 if (!($38)) {
  $39 = HEAP32[((11832 + 200|0))>>2]|0;
  $40 = ($39|0)==(0|0);
  if (!($40)) {
   _free($39);
  }
 }
 $41 = HEAP8[((11832 + 180|0))>>0]|0;
 $42 = $41 & 1;
 $43 = ($42<<24>>24)==(0);
 if (!($43)) {
  $44 = HEAP32[((11832 + 188|0))>>2]|0;
  $45 = ($44|0)==(0|0);
  if (!($45)) {
   _free($44);
  }
 }
 $46 = HEAP8[((11832 + 168|0))>>0]|0;
 $47 = $46 & 1;
 $48 = ($47<<24>>24)==(0);
 if (!($48)) {
  $49 = HEAP32[((11832 + 176|0))>>2]|0;
  $50 = ($49|0)==(0|0);
  if (!($50)) {
   _free($49);
  }
 }
 $51 = HEAP8[((11832 + 156|0))>>0]|0;
 $52 = $51 & 1;
 $53 = ($52<<24>>24)==(0);
 if (!($53)) {
  $54 = HEAP32[((11832 + 164|0))>>2]|0;
  $55 = ($54|0)==(0|0);
  if (!($55)) {
   _free($54);
  }
 }
 $56 = HEAP8[((11832 + 144|0))>>0]|0;
 $57 = $56 & 1;
 $58 = ($57<<24>>24)==(0);
 if (!($58)) {
  $59 = HEAP32[((11832 + 152|0))>>2]|0;
  $60 = ($59|0)==(0|0);
  if (!($60)) {
   _free($59);
  }
 }
 $61 = HEAP8[((11832 + 132|0))>>0]|0;
 $62 = $61 & 1;
 $63 = ($62<<24>>24)==(0);
 if (!($63)) {
  $64 = HEAP32[((11832 + 140|0))>>2]|0;
  $65 = ($64|0)==(0|0);
  if (!($65)) {
   _free($64);
  }
 }
 $66 = HEAP8[((11832 + 120|0))>>0]|0;
 $67 = $66 & 1;
 $68 = ($67<<24>>24)==(0);
 if (!($68)) {
  $69 = HEAP32[((11832 + 128|0))>>2]|0;
  $70 = ($69|0)==(0|0);
  if (!($70)) {
   _free($69);
  }
 }
 $71 = HEAP8[((11832 + 108|0))>>0]|0;
 $72 = $71 & 1;
 $73 = ($72<<24>>24)==(0);
 if (!($73)) {
  $74 = HEAP32[((11832 + 116|0))>>2]|0;
  $75 = ($74|0)==(0|0);
  if (!($75)) {
   _free($74);
  }
 }
 $76 = HEAP8[((11832 + 96|0))>>0]|0;
 $77 = $76 & 1;
 $78 = ($77<<24>>24)==(0);
 if (!($78)) {
  $79 = HEAP32[((11832 + 104|0))>>2]|0;
  $80 = ($79|0)==(0|0);
  if (!($80)) {
   _free($79);
  }
 }
 $81 = HEAP8[((11832 + 84|0))>>0]|0;
 $82 = $81 & 1;
 $83 = ($82<<24>>24)==(0);
 if (!($83)) {
  $84 = HEAP32[((11832 + 92|0))>>2]|0;
  $85 = ($84|0)==(0|0);
  if (!($85)) {
   _free($84);
  }
 }
 $86 = HEAP8[((11832 + 72|0))>>0]|0;
 $87 = $86 & 1;
 $88 = ($87<<24>>24)==(0);
 if (!($88)) {
  $89 = HEAP32[((11832 + 80|0))>>2]|0;
  $90 = ($89|0)==(0|0);
  if (!($90)) {
   _free($89);
  }
 }
 $91 = HEAP8[((11832 + 60|0))>>0]|0;
 $92 = $91 & 1;
 $93 = ($92<<24>>24)==(0);
 do {
  if (!($93)) {
   $94 = HEAP32[((11832 + 68|0))>>2]|0;
   $95 = ($94|0)==(0|0);
   if ($95) {
    break;
   }
   _free($94);
  }
 } while(0);
 $96 = HEAP8[((11832 + 48|0))>>0]|0;
 $97 = $96 & 1;
 $98 = ($97<<24>>24)==(0);
 do {
  if (!($98)) {
   $99 = HEAP32[((11832 + 56|0))>>2]|0;
   $100 = ($99|0)==(0|0);
   if ($100) {
    break;
   }
   _free($99);
  }
 } while(0);
 $101 = HEAP8[((11832 + 36|0))>>0]|0;
 $102 = $101 & 1;
 $103 = ($102<<24>>24)==(0);
 do {
  if (!($103)) {
   $104 = HEAP32[((11832 + 44|0))>>2]|0;
   $105 = ($104|0)==(0|0);
   if ($105) {
    break;
   }
   _free($104);
  }
 } while(0);
 $106 = HEAP8[((11832 + 24|0))>>0]|0;
 $107 = $106 & 1;
 $108 = ($107<<24>>24)==(0);
 do {
  if (!($108)) {
   $109 = HEAP32[((11832 + 32|0))>>2]|0;
   $110 = ($109|0)==(0|0);
   if ($110) {
    break;
   }
   _free($109);
  }
 } while(0);
 $111 = HEAP8[((11832 + 12|0))>>0]|0;
 $112 = $111 & 1;
 $113 = ($112<<24>>24)==(0);
 do {
  if (!($113)) {
   $114 = HEAP32[((11832 + 20|0))>>2]|0;
   $115 = ($114|0)==(0|0);
   if ($115) {
    break;
   }
   _free($114);
  }
 } while(0);
 $116 = HEAP8[11832>>0]|0;
 $117 = $116 & 1;
 $118 = ($117<<24>>24)==(0);
 if ($118) {
  STACKTOP = sp;return;
 }
 $119 = HEAP32[((11832 + 8|0))>>2]|0;
 $120 = ($119|0)==(0|0);
 if ($120) {
  STACKTOP = sp;return;
 }
 _free($119);
 STACKTOP = sp;return;
}
function ___cxx_global_array_dtor81($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP8[((12672 + 276|0))>>0]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 if (!($3)) {
  $4 = HEAP32[((12672 + 284|0))>>2]|0;
  $5 = ($4|0)==(0|0);
  if (!($5)) {
   _free($4);
  }
 }
 $6 = HEAP8[((12672 + 264|0))>>0]|0;
 $7 = $6 & 1;
 $8 = ($7<<24>>24)==(0);
 if (!($8)) {
  $9 = HEAP32[((12672 + 272|0))>>2]|0;
  $10 = ($9|0)==(0|0);
  if (!($10)) {
   _free($9);
  }
 }
 $11 = HEAP8[((12672 + 252|0))>>0]|0;
 $12 = $11 & 1;
 $13 = ($12<<24>>24)==(0);
 if (!($13)) {
  $14 = HEAP32[((12672 + 260|0))>>2]|0;
  $15 = ($14|0)==(0|0);
  if (!($15)) {
   _free($14);
  }
 }
 $16 = HEAP8[((12672 + 240|0))>>0]|0;
 $17 = $16 & 1;
 $18 = ($17<<24>>24)==(0);
 if (!($18)) {
  $19 = HEAP32[((12672 + 248|0))>>2]|0;
  $20 = ($19|0)==(0|0);
  if (!($20)) {
   _free($19);
  }
 }
 $21 = HEAP8[((12672 + 228|0))>>0]|0;
 $22 = $21 & 1;
 $23 = ($22<<24>>24)==(0);
 if (!($23)) {
  $24 = HEAP32[((12672 + 236|0))>>2]|0;
  $25 = ($24|0)==(0|0);
  if (!($25)) {
   _free($24);
  }
 }
 $26 = HEAP8[((12672 + 216|0))>>0]|0;
 $27 = $26 & 1;
 $28 = ($27<<24>>24)==(0);
 if (!($28)) {
  $29 = HEAP32[((12672 + 224|0))>>2]|0;
  $30 = ($29|0)==(0|0);
  if (!($30)) {
   _free($29);
  }
 }
 $31 = HEAP8[((12672 + 204|0))>>0]|0;
 $32 = $31 & 1;
 $33 = ($32<<24>>24)==(0);
 if (!($33)) {
  $34 = HEAP32[((12672 + 212|0))>>2]|0;
  $35 = ($34|0)==(0|0);
  if (!($35)) {
   _free($34);
  }
 }
 $36 = HEAP8[((12672 + 192|0))>>0]|0;
 $37 = $36 & 1;
 $38 = ($37<<24>>24)==(0);
 if (!($38)) {
  $39 = HEAP32[((12672 + 200|0))>>2]|0;
  $40 = ($39|0)==(0|0);
  if (!($40)) {
   _free($39);
  }
 }
 $41 = HEAP8[((12672 + 180|0))>>0]|0;
 $42 = $41 & 1;
 $43 = ($42<<24>>24)==(0);
 if (!($43)) {
  $44 = HEAP32[((12672 + 188|0))>>2]|0;
  $45 = ($44|0)==(0|0);
  if (!($45)) {
   _free($44);
  }
 }
 $46 = HEAP8[((12672 + 168|0))>>0]|0;
 $47 = $46 & 1;
 $48 = ($47<<24>>24)==(0);
 if (!($48)) {
  $49 = HEAP32[((12672 + 176|0))>>2]|0;
  $50 = ($49|0)==(0|0);
  if (!($50)) {
   _free($49);
  }
 }
 $51 = HEAP8[((12672 + 156|0))>>0]|0;
 $52 = $51 & 1;
 $53 = ($52<<24>>24)==(0);
 if (!($53)) {
  $54 = HEAP32[((12672 + 164|0))>>2]|0;
  $55 = ($54|0)==(0|0);
  if (!($55)) {
   _free($54);
  }
 }
 $56 = HEAP8[((12672 + 144|0))>>0]|0;
 $57 = $56 & 1;
 $58 = ($57<<24>>24)==(0);
 if (!($58)) {
  $59 = HEAP32[((12672 + 152|0))>>2]|0;
  $60 = ($59|0)==(0|0);
  if (!($60)) {
   _free($59);
  }
 }
 $61 = HEAP8[((12672 + 132|0))>>0]|0;
 $62 = $61 & 1;
 $63 = ($62<<24>>24)==(0);
 if (!($63)) {
  $64 = HEAP32[((12672 + 140|0))>>2]|0;
  $65 = ($64|0)==(0|0);
  if (!($65)) {
   _free($64);
  }
 }
 $66 = HEAP8[((12672 + 120|0))>>0]|0;
 $67 = $66 & 1;
 $68 = ($67<<24>>24)==(0);
 if (!($68)) {
  $69 = HEAP32[((12672 + 128|0))>>2]|0;
  $70 = ($69|0)==(0|0);
  if (!($70)) {
   _free($69);
  }
 }
 $71 = HEAP8[((12672 + 108|0))>>0]|0;
 $72 = $71 & 1;
 $73 = ($72<<24>>24)==(0);
 if (!($73)) {
  $74 = HEAP32[((12672 + 116|0))>>2]|0;
  $75 = ($74|0)==(0|0);
  if (!($75)) {
   _free($74);
  }
 }
 $76 = HEAP8[((12672 + 96|0))>>0]|0;
 $77 = $76 & 1;
 $78 = ($77<<24>>24)==(0);
 if (!($78)) {
  $79 = HEAP32[((12672 + 104|0))>>2]|0;
  $80 = ($79|0)==(0|0);
  if (!($80)) {
   _free($79);
  }
 }
 $81 = HEAP8[((12672 + 84|0))>>0]|0;
 $82 = $81 & 1;
 $83 = ($82<<24>>24)==(0);
 if (!($83)) {
  $84 = HEAP32[((12672 + 92|0))>>2]|0;
  $85 = ($84|0)==(0|0);
  if (!($85)) {
   _free($84);
  }
 }
 $86 = HEAP8[((12672 + 72|0))>>0]|0;
 $87 = $86 & 1;
 $88 = ($87<<24>>24)==(0);
 if (!($88)) {
  $89 = HEAP32[((12672 + 80|0))>>2]|0;
  $90 = ($89|0)==(0|0);
  if (!($90)) {
   _free($89);
  }
 }
 $91 = HEAP8[((12672 + 60|0))>>0]|0;
 $92 = $91 & 1;
 $93 = ($92<<24>>24)==(0);
 do {
  if (!($93)) {
   $94 = HEAP32[((12672 + 68|0))>>2]|0;
   $95 = ($94|0)==(0|0);
   if ($95) {
    break;
   }
   _free($94);
  }
 } while(0);
 $96 = HEAP8[((12672 + 48|0))>>0]|0;
 $97 = $96 & 1;
 $98 = ($97<<24>>24)==(0);
 do {
  if (!($98)) {
   $99 = HEAP32[((12672 + 56|0))>>2]|0;
   $100 = ($99|0)==(0|0);
   if ($100) {
    break;
   }
   _free($99);
  }
 } while(0);
 $101 = HEAP8[((12672 + 36|0))>>0]|0;
 $102 = $101 & 1;
 $103 = ($102<<24>>24)==(0);
 do {
  if (!($103)) {
   $104 = HEAP32[((12672 + 44|0))>>2]|0;
   $105 = ($104|0)==(0|0);
   if ($105) {
    break;
   }
   _free($104);
  }
 } while(0);
 $106 = HEAP8[((12672 + 24|0))>>0]|0;
 $107 = $106 & 1;
 $108 = ($107<<24>>24)==(0);
 do {
  if (!($108)) {
   $109 = HEAP32[((12672 + 32|0))>>2]|0;
   $110 = ($109|0)==(0|0);
   if ($110) {
    break;
   }
   _free($109);
  }
 } while(0);
 $111 = HEAP8[((12672 + 12|0))>>0]|0;
 $112 = $111 & 1;
 $113 = ($112<<24>>24)==(0);
 do {
  if (!($113)) {
   $114 = HEAP32[((12672 + 20|0))>>2]|0;
   $115 = ($114|0)==(0|0);
   if ($115) {
    break;
   }
   _free($114);
  }
 } while(0);
 $116 = HEAP8[12672>>0]|0;
 $117 = $116 & 1;
 $118 = ($117<<24>>24)==(0);
 if ($118) {
  STACKTOP = sp;return;
 }
 $119 = HEAP32[((12672 + 8|0))>>2]|0;
 $120 = ($119|0)==(0|0);
 if ($120) {
  STACKTOP = sp;return;
 }
 _free($119);
 STACKTOP = sp;return;
}
function ___cxx_global_array_dtor105($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP8[((13184 + 156|0))>>0]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 if (!($3)) {
  $4 = HEAP32[((13184 + 164|0))>>2]|0;
  $5 = ($4|0)==(0|0);
  if (!($5)) {
   _free($4);
  }
 }
 $6 = HEAP8[((13184 + 144|0))>>0]|0;
 $7 = $6 & 1;
 $8 = ($7<<24>>24)==(0);
 if (!($8)) {
  $9 = HEAP32[((13184 + 152|0))>>2]|0;
  $10 = ($9|0)==(0|0);
  if (!($10)) {
   _free($9);
  }
 }
 $11 = HEAP8[((13184 + 132|0))>>0]|0;
 $12 = $11 & 1;
 $13 = ($12<<24>>24)==(0);
 if (!($13)) {
  $14 = HEAP32[((13184 + 140|0))>>2]|0;
  $15 = ($14|0)==(0|0);
  if (!($15)) {
   _free($14);
  }
 }
 $16 = HEAP8[((13184 + 120|0))>>0]|0;
 $17 = $16 & 1;
 $18 = ($17<<24>>24)==(0);
 if (!($18)) {
  $19 = HEAP32[((13184 + 128|0))>>2]|0;
  $20 = ($19|0)==(0|0);
  if (!($20)) {
   _free($19);
  }
 }
 $21 = HEAP8[((13184 + 108|0))>>0]|0;
 $22 = $21 & 1;
 $23 = ($22<<24>>24)==(0);
 if (!($23)) {
  $24 = HEAP32[((13184 + 116|0))>>2]|0;
  $25 = ($24|0)==(0|0);
  if (!($25)) {
   _free($24);
  }
 }
 $26 = HEAP8[((13184 + 96|0))>>0]|0;
 $27 = $26 & 1;
 $28 = ($27<<24>>24)==(0);
 if (!($28)) {
  $29 = HEAP32[((13184 + 104|0))>>2]|0;
  $30 = ($29|0)==(0|0);
  if (!($30)) {
   _free($29);
  }
 }
 $31 = HEAP8[((13184 + 84|0))>>0]|0;
 $32 = $31 & 1;
 $33 = ($32<<24>>24)==(0);
 if (!($33)) {
  $34 = HEAP32[((13184 + 92|0))>>2]|0;
  $35 = ($34|0)==(0|0);
  if (!($35)) {
   _free($34);
  }
 }
 $36 = HEAP8[((13184 + 72|0))>>0]|0;
 $37 = $36 & 1;
 $38 = ($37<<24>>24)==(0);
 if (!($38)) {
  $39 = HEAP32[((13184 + 80|0))>>2]|0;
  $40 = ($39|0)==(0|0);
  if (!($40)) {
   _free($39);
  }
 }
 $41 = HEAP8[((13184 + 60|0))>>0]|0;
 $42 = $41 & 1;
 $43 = ($42<<24>>24)==(0);
 if (!($43)) {
  $44 = HEAP32[((13184 + 68|0))>>2]|0;
  $45 = ($44|0)==(0|0);
  if (!($45)) {
   _free($44);
  }
 }
 $46 = HEAP8[((13184 + 48|0))>>0]|0;
 $47 = $46 & 1;
 $48 = ($47<<24>>24)==(0);
 if (!($48)) {
  $49 = HEAP32[((13184 + 56|0))>>2]|0;
  $50 = ($49|0)==(0|0);
  if (!($50)) {
   _free($49);
  }
 }
 $51 = HEAP8[((13184 + 36|0))>>0]|0;
 $52 = $51 & 1;
 $53 = ($52<<24>>24)==(0);
 if (!($53)) {
  $54 = HEAP32[((13184 + 44|0))>>2]|0;
  $55 = ($54|0)==(0|0);
  if (!($55)) {
   _free($54);
  }
 }
 $56 = HEAP8[((13184 + 24|0))>>0]|0;
 $57 = $56 & 1;
 $58 = ($57<<24>>24)==(0);
 if (!($58)) {
  $59 = HEAP32[((13184 + 32|0))>>2]|0;
  $60 = ($59|0)==(0|0);
  if (!($60)) {
   _free($59);
  }
 }
 $61 = HEAP8[((13184 + 12|0))>>0]|0;
 $62 = $61 & 1;
 $63 = ($62<<24>>24)==(0);
 if (!($63)) {
  $64 = HEAP32[((13184 + 20|0))>>2]|0;
  $65 = ($64|0)==(0|0);
  if (!($65)) {
   _free($64);
  }
 }
 $66 = HEAP8[13184>>0]|0;
 $67 = $66 & 1;
 $68 = ($67<<24>>24)==(0);
 if ($68) {
  STACKTOP = sp;return;
 }
 $69 = HEAP32[((13184 + 8|0))>>2]|0;
 $70 = ($69|0)==(0|0);
 if ($70) {
  STACKTOP = sp;return;
 }
 _free($69);
 STACKTOP = sp;return;
}
function ___cxx_global_array_dtor120($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP8[((13720 + 156|0))>>0]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 if (!($3)) {
  $4 = HEAP32[((13720 + 164|0))>>2]|0;
  $5 = ($4|0)==(0|0);
  if (!($5)) {
   _free($4);
  }
 }
 $6 = HEAP8[((13720 + 144|0))>>0]|0;
 $7 = $6 & 1;
 $8 = ($7<<24>>24)==(0);
 if (!($8)) {
  $9 = HEAP32[((13720 + 152|0))>>2]|0;
  $10 = ($9|0)==(0|0);
  if (!($10)) {
   _free($9);
  }
 }
 $11 = HEAP8[((13720 + 132|0))>>0]|0;
 $12 = $11 & 1;
 $13 = ($12<<24>>24)==(0);
 if (!($13)) {
  $14 = HEAP32[((13720 + 140|0))>>2]|0;
  $15 = ($14|0)==(0|0);
  if (!($15)) {
   _free($14);
  }
 }
 $16 = HEAP8[((13720 + 120|0))>>0]|0;
 $17 = $16 & 1;
 $18 = ($17<<24>>24)==(0);
 if (!($18)) {
  $19 = HEAP32[((13720 + 128|0))>>2]|0;
  $20 = ($19|0)==(0|0);
  if (!($20)) {
   _free($19);
  }
 }
 $21 = HEAP8[((13720 + 108|0))>>0]|0;
 $22 = $21 & 1;
 $23 = ($22<<24>>24)==(0);
 if (!($23)) {
  $24 = HEAP32[((13720 + 116|0))>>2]|0;
  $25 = ($24|0)==(0|0);
  if (!($25)) {
   _free($24);
  }
 }
 $26 = HEAP8[((13720 + 96|0))>>0]|0;
 $27 = $26 & 1;
 $28 = ($27<<24>>24)==(0);
 if (!($28)) {
  $29 = HEAP32[((13720 + 104|0))>>2]|0;
  $30 = ($29|0)==(0|0);
  if (!($30)) {
   _free($29);
  }
 }
 $31 = HEAP8[((13720 + 84|0))>>0]|0;
 $32 = $31 & 1;
 $33 = ($32<<24>>24)==(0);
 if (!($33)) {
  $34 = HEAP32[((13720 + 92|0))>>2]|0;
  $35 = ($34|0)==(0|0);
  if (!($35)) {
   _free($34);
  }
 }
 $36 = HEAP8[((13720 + 72|0))>>0]|0;
 $37 = $36 & 1;
 $38 = ($37<<24>>24)==(0);
 if (!($38)) {
  $39 = HEAP32[((13720 + 80|0))>>2]|0;
  $40 = ($39|0)==(0|0);
  if (!($40)) {
   _free($39);
  }
 }
 $41 = HEAP8[((13720 + 60|0))>>0]|0;
 $42 = $41 & 1;
 $43 = ($42<<24>>24)==(0);
 if (!($43)) {
  $44 = HEAP32[((13720 + 68|0))>>2]|0;
  $45 = ($44|0)==(0|0);
  if (!($45)) {
   _free($44);
  }
 }
 $46 = HEAP8[((13720 + 48|0))>>0]|0;
 $47 = $46 & 1;
 $48 = ($47<<24>>24)==(0);
 if (!($48)) {
  $49 = HEAP32[((13720 + 56|0))>>2]|0;
  $50 = ($49|0)==(0|0);
  if (!($50)) {
   _free($49);
  }
 }
 $51 = HEAP8[((13720 + 36|0))>>0]|0;
 $52 = $51 & 1;
 $53 = ($52<<24>>24)==(0);
 if (!($53)) {
  $54 = HEAP32[((13720 + 44|0))>>2]|0;
  $55 = ($54|0)==(0|0);
  if (!($55)) {
   _free($54);
  }
 }
 $56 = HEAP8[((13720 + 24|0))>>0]|0;
 $57 = $56 & 1;
 $58 = ($57<<24>>24)==(0);
 if (!($58)) {
  $59 = HEAP32[((13720 + 32|0))>>2]|0;
  $60 = ($59|0)==(0|0);
  if (!($60)) {
   _free($59);
  }
 }
 $61 = HEAP8[((13720 + 12|0))>>0]|0;
 $62 = $61 & 1;
 $63 = ($62<<24>>24)==(0);
 if (!($63)) {
  $64 = HEAP32[((13720 + 20|0))>>2]|0;
  $65 = ($64|0)==(0|0);
  if (!($65)) {
   _free($64);
  }
 }
 $66 = HEAP8[13720>>0]|0;
 $67 = $66 & 1;
 $68 = ($67<<24>>24)==(0);
 if ($68) {
  STACKTOP = sp;return;
 }
 $69 = HEAP32[((13720 + 8|0))>>2]|0;
 $70 = ($69|0)==(0|0);
 if ($70) {
  STACKTOP = sp;return;
 }
 _free($69);
 STACKTOP = sp;return;
}
function _mbrtowc($wc,$src,$n,$st) {
 $wc = $wc|0;
 $src = $src|0;
 $n = $n|0;
 $st = $st|0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c$0 = 0, $c$1 = 0, $c$2 = 0, $s$0 = 0, $s$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp;
 HEAP32[$0>>2] = $wc;
 $1 = ($st|0)==(0|0);
 $$01 = $1 ? 14248 : $st;
 $2 = HEAP32[$$01>>2]|0;
 $3 = ($src|0)==(0|0);
 L1: do {
  if ($3) {
   $4 = ($2|0)==(0);
   if ($4) {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
  } else {
   $5 = ($wc|0)==(0|0);
   if ($5) {
    HEAP32[$0>>2] = $0;
    $11 = $0;
   } else {
    $11 = $wc;
   }
   $6 = ($n|0)==(0);
   if ($6) {
    $$0 = -2;
    STACKTOP = sp;return ($$0|0);
   }
   $7 = ($2|0)==(0);
   do {
    if ($7) {
     $8 = HEAP8[$src>>0]|0;
     $9 = $8&255;
     $10 = ($8<<24>>24)>(-1);
     if ($10) {
      HEAP32[$11>>2] = $9;
      $12 = ($8<<24>>24)!=(0);
      $13 = $12&1;
      $$0 = $13;
      STACKTOP = sp;return ($$0|0);
     } else {
      $14 = (($9) + -194)|0;
      $15 = ($14>>>0)>(50);
      if ($15) {
       break L1;
      }
      $16 = (($src) + 1|0);
      $17 = (14032 + ($14<<2)|0);
      $18 = HEAP32[$17>>2]|0;
      $19 = (($n) + -1)|0;
      $$02 = $19;$c$0 = $18;$s$0 = $16;
      break;
     }
    } else {
     $$02 = $n;$c$0 = $2;$s$0 = $src;
    }
   } while(0);
   $20 = ($$02|0)==(0);
   L17: do {
    if ($20) {
     $c$2 = $c$0;
    } else {
     $21 = HEAP8[$s$0>>0]|0;
     $22 = $21&255;
     $23 = $22 >>> 3;
     $24 = (($23) + -16)|0;
     $25 = $c$0 >> 26;
     $26 = (($23) + ($25))|0;
     $27 = $24 | $26;
     $28 = ($27>>>0)>(7);
     if ($28) {
      break L1;
     } else {
      $$1 = $$02;$32 = $21;$c$1 = $c$0;$s$1 = $s$0;
     }
     while(1) {
      $29 = $c$1 << 6;
      $30 = (($s$1) + 1|0);
      $31 = $32&255;
      $33 = (($31) + -128)|0;
      $34 = $33 | $29;
      $35 = (($$1) + -1)|0;
      $36 = ($34|0)<(0);
      if (!($36)) {
       break;
      }
      $38 = ($35|0)==(0);
      if ($38) {
       $c$2 = $34;
       break L17;
      }
      $39 = HEAP8[$30>>0]|0;
      $40 = $39&255;
      $41 = (($40) + -128)|0;
      $42 = ($41>>>0)>(63);
      if ($42) {
       break L1;
      } else {
       $$1 = $35;$32 = $39;$c$1 = $34;$s$1 = $30;
      }
     }
     HEAP32[$$01>>2] = 0;
     HEAP32[$11>>2] = $34;
     $37 = (($n) - ($35))|0;
     $$0 = $37;
     STACKTOP = sp;return ($$0|0);
    }
   } while(0);
   HEAP32[$$01>>2] = $c$2;
   $$0 = -2;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 HEAP32[$$01>>2] = 0;
 $43 = (___errno_location()|0);
 HEAP32[$43>>2] = 84;
 $$0 = -1;
 STACKTOP = sp;return ($$0|0);
}
function _mbsrtowcs($ws,$src,$wn,$st) {
 $ws = $ws|0;
 $src = $src|0;
 $wn = $wn|0;
 $st = $st|0;
 var $$0 = 0, $$01$ph = 0, $$0123 = 0, $$02 = 0, $$113 = 0, $$13$lcssa = 0, $$137 = 0, $$2 = 0, $$24 = 0, $$3 = 0, $$35 = 0, $$4 = 0, $$441 = 0, $$442 = 0, $$46$ph = 0, $$4622 = 0, $$512 = 0, $$6 = 0, $$7 = 0, $$8 = 0;
 var $$840 = 0, $$in1 = 0, $$pre = 0, $$pre$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c$2 = 0, $c$4 = 0, $c$5 = 0, $c$6 = 0, $or$cond = 0;
 var $s$0 = 0, $s$1$lcssa = 0, $s$10 = 0, $s$1043 = 0, $s$1044 = 0, $s$18 = 0, $s$2 = 0, $s$3 = 0, $s$4 = 0, $s$5$ph = 0, $s$524 = 0, $s$614 = 0, $s$7 = 0, $s$8 = 0, $s$9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$src>>2]|0;
 $1 = ($st|0)==(0|0);
 if ($1) {
  label = 5;
 } else {
  $2 = HEAP32[$st>>2]|0;
  $3 = ($2|0)==(0);
  if ($3) {
   label = 5;
  } else {
   $4 = ($ws|0)==(0|0);
   if ($4) {
    $$35 = $wn;$c$2 = $2;$s$3 = $0;
    label = 16;
   } else {
    HEAP32[$st>>2] = 0;
    $$3 = $ws;$$7 = $wn;$c$4 = $2;$s$8 = $0;
    label = 35;
   }
  }
 }
 if ((label|0) == 5) {
  $5 = ($ws|0)==(0|0);
  if ($5) {
   $$02 = $wn;$s$0 = $0;
   label = 7;
  } else {
   $$01$ph = $ws;$$46$ph = $wn;$s$5$ph = $0;
   label = 6;
  }
 }
 L7: while(1) {
  if ((label|0) == 6) {
   label = 0;
   $6 = ($$46$ph|0)==(0);
   if ($6) {
    $$0 = $wn;
    label = 53;
    break;
   } else {
    $$0123 = $$01$ph;$$4622 = $$46$ph;$s$524 = $s$5$ph;
   }
   while(1) {
    $66 = HEAP8[$s$524>>0]|0;
    $67 = $66&255;
    $68 = (($67) + -1)|0;
    $69 = ($68>>>0)<(127);
    L41: do {
     if ($69) {
      $70 = $s$524;
      $71 = $70 & 3;
      $72 = ($71|0)==(0);
      $73 = ($$4622>>>0)>(3);
      $or$cond = $72 & $73;
      if ($or$cond) {
       $$113 = $$0123;$$512 = $$4622;$s$614 = $s$524;
       while(1) {
        $74 = HEAP32[$s$614>>2]|0;
        $75 = (($74) + -16843009)|0;
        $76 = $75 | $74;
        $77 = $76 & -2139062144;
        $78 = ($77|0)==(0);
        $79 = $74&255;
        if (!($78)) {
         $$2 = $$113;$$6 = $$512;$98 = $79;$s$7 = $s$614;
         break L41;
        }
        $80 = (($s$614) + 1|0);
        $81 = $74 & 255;
        $82 = (($$113) + 4|0);
        HEAP32[$$113>>2] = $81;
        $83 = (($s$614) + 2|0);
        $84 = HEAP8[$80>>0]|0;
        $85 = $84&255;
        $86 = (($$113) + 8|0);
        HEAP32[$82>>2] = $85;
        $87 = (($s$614) + 3|0);
        $88 = HEAP8[$83>>0]|0;
        $89 = $88&255;
        $90 = (($$113) + 12|0);
        HEAP32[$86>>2] = $89;
        $91 = (($s$614) + 4|0);
        $92 = HEAP8[$87>>0]|0;
        $93 = $92&255;
        $94 = (($$113) + 16|0);
        HEAP32[$90>>2] = $93;
        $95 = (($$512) + -4)|0;
        $96 = ($95>>>0)>(3);
        if ($96) {
         $$113 = $94;$$512 = $95;$s$614 = $91;
        } else {
         break;
        }
       }
       $$pre$pre = HEAP8[$91>>0]|0;
       $$2 = $94;$$6 = $95;$98 = $$pre$pre;$s$7 = $91;
      } else {
       $$2 = $$0123;$$6 = $$4622;$98 = $66;$s$7 = $s$524;
      }
     } else {
      $$2 = $$0123;$$6 = $$4622;$98 = $66;$s$7 = $s$524;
     }
    } while(0);
    $97 = $98&255;
    $99 = (($97) + -1)|0;
    $100 = ($99>>>0)<(127);
    if (!($100)) {
     break;
    }
    $101 = (($s$7) + 1|0);
    $102 = (($$2) + 4|0);
    HEAP32[$$2>>2] = $97;
    $103 = (($$6) + -1)|0;
    $104 = ($103|0)==(0);
    if ($104) {
     $$0 = $wn;
     label = 53;
     break L7;
    } else {
     $$0123 = $102;$$4622 = $103;$s$524 = $101;
    }
   }
   $105 = (($97) + -194)|0;
   $106 = ($105>>>0)>(50);
   if ($106) {
    $$442 = $$2;$$840 = $$6;$145 = $98;$s$1044 = $s$7;
    label = 47;
    break;
   }
   $107 = (($s$7) + 1|0);
   $108 = (14032 + ($105<<2)|0);
   $109 = HEAP32[$108>>2]|0;
   $$3 = $$2;$$7 = $$6;$c$4 = $109;$s$8 = $107;
   label = 35;
   continue;
  }
  else if ((label|0) == 7) {
   label = 0;
   $7 = HEAP8[$s$0>>0]|0;
   $8 = $7&255;
   $9 = (($8) + -1)|0;
   $10 = ($9>>>0)<(127);
   if ($10) {
    $11 = $s$0;
    $12 = $11 & 3;
    $13 = ($12|0)==(0);
    if ($13) {
     $14 = HEAP32[$s$0>>2]|0;
     $15 = (($14) + -16843009)|0;
     $16 = $15 | $14;
     $17 = $16 & -2139062144;
     $18 = ($17|0)==(0);
     if ($18) {
      $$137 = $$02;$s$18 = $s$0;
      while(1) {
       $19 = (($s$18) + 4|0);
       $20 = (($$137) + -4)|0;
       $21 = HEAP32[$19>>2]|0;
       $22 = (($21) + -16843009)|0;
       $23 = $22 | $21;
       $24 = $23 & -2139062144;
       $25 = ($24|0)==(0);
       if ($25) {
        $$137 = $20;$s$18 = $19;
       } else {
        $$13$lcssa = $20;$$in1 = $21;$s$1$lcssa = $19;
        break;
       }
      }
     } else {
      $$13$lcssa = $$02;$$in1 = $14;$s$1$lcssa = $s$0;
     }
     $26 = $$in1&255;
     $27 = $$in1&255;
     $$24 = $$13$lcssa;$150 = $26;$29 = $27;$s$2 = $s$1$lcssa;
    } else {
     $$24 = $$02;$150 = $7;$29 = $7;$s$2 = $s$0;
    }
   } else {
    $$24 = $$02;$150 = $7;$29 = $7;$s$2 = $s$0;
   }
   $28 = $29&255;
   $30 = (($28) + -1)|0;
   $31 = ($30>>>0)<(127);
   if ($31) {
    $32 = (($s$2) + 1|0);
    $33 = (($$24) + -1)|0;
    $$02 = $33;$s$0 = $32;
    label = 7;
    continue;
   }
   $34 = (($28) + -194)|0;
   $35 = ($34>>>0)>(50);
   if ($35) {
    $$442 = $ws;$$840 = $$24;$145 = $150;$s$1044 = $s$2;
    label = 47;
    break;
   }
   $36 = (($s$2) + 1|0);
   $37 = (14032 + ($34<<2)|0);
   $38 = HEAP32[$37>>2]|0;
   $$35 = $$24;$c$2 = $38;$s$3 = $36;
   label = 16;
   continue;
  }
  else if ((label|0) == 16) {
   label = 0;
   $39 = HEAP8[$s$3>>0]|0;
   $40 = $39&255;
   $41 = $40 >>> 3;
   $42 = (($41) + -16)|0;
   $43 = $c$2 >> 26;
   $44 = (($41) + ($43))|0;
   $45 = $42 | $44;
   $46 = ($45>>>0)>(7);
   if ($46) {
    label = 17;
    break;
   }
   $48 = (($s$3) + 1|0);
   $49 = $c$2 & 33554432;
   $50 = ($49|0)==(0);
   if ($50) {
    $s$4 = $48;
   } else {
    $51 = HEAP8[$48>>0]|0;
    $52 = $51&255;
    $53 = (($52) + -128)|0;
    $54 = ($53>>>0)>(63);
    if ($54) {
     label = 20;
     break;
    }
    $56 = (($s$3) + 2|0);
    $57 = $c$2 & 524288;
    $58 = ($57|0)==(0);
    if ($58) {
     $s$4 = $56;
    } else {
     $59 = HEAP8[$56>>0]|0;
     $60 = $59&255;
     $61 = (($60) + -128)|0;
     $62 = ($61>>>0)>(63);
     if ($62) {
      label = 23;
      break;
     }
     $64 = (($s$3) + 3|0);
     $s$4 = $64;
    }
   }
   $65 = (($$35) + -1)|0;
   $$02 = $65;$s$0 = $s$4;
   label = 7;
   continue;
  }
  else if ((label|0) == 35) {
   label = 0;
   $110 = HEAP8[$s$8>>0]|0;
   $111 = $110&255;
   $112 = $111 >>> 3;
   $113 = (($112) + -16)|0;
   $114 = $c$4 >> 26;
   $115 = (($112) + ($114))|0;
   $116 = $113 | $115;
   $117 = ($116>>>0)>(7);
   if ($117) {
    label = 36;
    break;
   }
   $119 = $c$4 << 6;
   $120 = (($s$8) + 1|0);
   $121 = (($111) + -128)|0;
   $122 = $121 | $119;
   $123 = ($122|0)<(0);
   if ($123) {
    $124 = HEAP8[$120>>0]|0;
    $125 = $124&255;
    $126 = (($125) + -128)|0;
    $127 = ($126>>>0)>(63);
    if ($127) {
     label = 39;
     break;
    }
    $129 = $122 << 6;
    $130 = (($s$8) + 2|0);
    $131 = $126 | $129;
    $132 = ($131|0)<(0);
    if ($132) {
     $133 = HEAP8[$130>>0]|0;
     $134 = $133&255;
     $135 = (($134) + -128)|0;
     $136 = ($135>>>0)>(63);
     if ($136) {
      label = 42;
      break;
     }
     $138 = $131 << 6;
     $139 = (($s$8) + 3|0);
     $140 = $135 | $138;
     $c$5 = $140;$s$9 = $139;
    } else {
     $c$5 = $131;$s$9 = $130;
    }
   } else {
    $c$5 = $122;$s$9 = $120;
   }
   $141 = (($$3) + 4|0);
   HEAP32[$$3>>2] = $c$5;
   $142 = (($$7) + -1)|0;
   $$01$ph = $141;$$46$ph = $142;$s$5$ph = $s$9;
   label = 6;
   continue;
  }
 }
 if ((label|0) == 17) {
  $47 = (($s$3) + -1|0);
  $$4 = $ws;$$8 = $$35;$c$6 = $c$2;$s$10 = $47;
  label = 45;
 }
 else if ((label|0) == 20) {
  $55 = (($s$3) + -1|0);
  $$4 = $ws;$$8 = $$35;$c$6 = $c$2;$s$10 = $55;
  label = 45;
 }
 else if ((label|0) == 23) {
  $63 = (($s$3) + -1|0);
  $$4 = $ws;$$8 = $$35;$c$6 = $c$2;$s$10 = $63;
  label = 45;
 }
 else if ((label|0) == 36) {
  $118 = (($s$8) + -1|0);
  $$4 = $$3;$$8 = $$7;$c$6 = $c$4;$s$10 = $118;
  label = 45;
 }
 else if ((label|0) == 39) {
  $128 = (($s$8) + -1|0);
  $$4 = $$3;$$8 = $$7;$c$6 = $122;$s$10 = $128;
  label = 45;
 }
 else if ((label|0) == 42) {
  $137 = (($s$8) + -1|0);
  $$4 = $$3;$$8 = $$7;$c$6 = $131;$s$10 = $137;
  label = 45;
 }
 else if ((label|0) == 53) {
  STACKTOP = sp;return ($$0|0);
 }
 if ((label|0) == 45) {
  $143 = ($c$6|0)==(0);
  if ($143) {
   $$pre = HEAP8[$s$10>>0]|0;
   $$442 = $$4;$$840 = $$8;$145 = $$pre;$s$1044 = $s$10;
   label = 47;
  } else {
   $$441 = $$4;$s$1043 = $s$10;
  }
 }
 if ((label|0) == 47) {
  $144 = ($145<<24>>24)==(0);
  if ($144) {
   $146 = ($$442|0)==(0|0);
   if (!($146)) {
    HEAP32[$$442>>2] = 0;
    HEAP32[$src>>2] = 0;
   }
   $147 = (($wn) - ($$840))|0;
   $$0 = $147;
   STACKTOP = sp;return ($$0|0);
  } else {
   $$441 = $$442;$s$1043 = $s$1044;
  }
 }
 $148 = (___errno_location()|0);
 HEAP32[$148>>2] = 84;
 $149 = ($$441|0)==(0|0);
 if ($149) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 HEAP32[$src>>2] = $s$1043;
 $$0 = -1;
 STACKTOP = sp;return ($$0|0);
}
function ___string_read($f,$buf,$len) {
 $f = $f|0;
 $buf = $buf|0;
 $len = $len|0;
 var $$0$lcssa$i = 0, $$013$i = 0, $$1$lcssa$i = 0, $$17$i = 0, $$24$i = 0, $$3$i = 0, $$lcssa$i = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $k$0 = 0, $k$0$len = 0, $or$cond$i = 0, $or$cond12$i = 0, $phitmp = 0, $s$0$lcssa$i = 0, $s$014$i = 0, $s$15$i = 0, $s$2$i = 0, $w$0$lcssa$i = 0, $w$08$i = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 84|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($len) + 256)|0;
 $3 = $1;
 $4 = $3 & 3;
 $5 = ($4|0)==(0);
 $6 = ($2|0)==(0);
 $or$cond12$i = $5 | $6;
 L1: do {
  if ($or$cond12$i) {
   $$0$lcssa$i = $2;$$lcssa$i = $6;$s$0$lcssa$i = $1;
   label = 4;
  } else {
   $$013$i = $2;$s$014$i = $1;
   while(1) {
    $7 = HEAP8[$s$014$i>>0]|0;
    $8 = ($7<<24>>24)==(0);
    if ($8) {
     $$3$i = $$013$i;$s$2$i = $s$014$i;
     break L1;
    }
    $9 = (($s$014$i) + 1|0);
    $10 = (($$013$i) + -1)|0;
    $11 = $9;
    $12 = $11 & 3;
    $13 = ($12|0)==(0);
    $14 = ($10|0)==(0);
    $or$cond$i = $13 | $14;
    if ($or$cond$i) {
     $$0$lcssa$i = $10;$$lcssa$i = $14;$s$0$lcssa$i = $9;
     label = 4;
     break;
    } else {
     $$013$i = $10;$s$014$i = $9;
    }
   }
  }
 } while(0);
 L5: do {
  if ((label|0) == 4) {
   if ($$lcssa$i) {
    $$3$i = 0;$s$2$i = $s$0$lcssa$i;
   } else {
    $$pre = HEAP8[$s$0$lcssa$i>>0]|0;
    $phitmp = ($$pre<<24>>24)==(0);
    if ($phitmp) {
     $$3$i = $$0$lcssa$i;$s$2$i = $s$0$lcssa$i;
    } else {
     $15 = ($$0$lcssa$i>>>0)>(3);
     L9: do {
      if ($15) {
       $$17$i = $$0$lcssa$i;$w$08$i = $s$0$lcssa$i;
       while(1) {
        $16 = HEAP32[$w$08$i>>2]|0;
        $17 = (($16) + -16843009)|0;
        $18 = $16 & -2139062144;
        $19 = $18 ^ -2139062144;
        $20 = $19 & $17;
        $21 = ($20|0)==(0);
        if (!($21)) {
         $$1$lcssa$i = $$17$i;$w$0$lcssa$i = $w$08$i;
         break L9;
        }
        $22 = (($w$08$i) + 4|0);
        $23 = (($$17$i) + -4)|0;
        $24 = ($23>>>0)>(3);
        if ($24) {
         $$17$i = $23;$w$08$i = $22;
        } else {
         $$1$lcssa$i = $23;$w$0$lcssa$i = $22;
         break;
        }
       }
      } else {
       $$1$lcssa$i = $$0$lcssa$i;$w$0$lcssa$i = $s$0$lcssa$i;
      }
     } while(0);
     $25 = ($$1$lcssa$i|0)==(0);
     if ($25) {
      $$3$i = 0;$s$2$i = $w$0$lcssa$i;
     } else {
      $$24$i = $$1$lcssa$i;$s$15$i = $w$0$lcssa$i;
      while(1) {
       $26 = HEAP8[$s$15$i>>0]|0;
       $27 = ($26<<24>>24)==(0);
       if ($27) {
        $$3$i = $$24$i;$s$2$i = $s$15$i;
        break L5;
       }
       $28 = (($s$15$i) + 1|0);
       $29 = (($$24$i) + -1)|0;
       $30 = ($29|0)==(0);
       if ($30) {
        $$3$i = 0;$s$2$i = $28;
        break;
       } else {
        $$24$i = $29;$s$15$i = $28;
       }
      }
     }
    }
   }
  }
 } while(0);
 $31 = ($$3$i|0)!=(0);
 $32 = $31 ? $s$2$i : 0;
 $33 = ($32|0)==(0|0);
 if ($33) {
  $k$0 = $2;
 } else {
  $34 = $32;
  $35 = (($34) - ($3))|0;
  $k$0 = $35;
 }
 $36 = ($k$0>>>0)<($len>>>0);
 $k$0$len = $36 ? $k$0 : $len;
 _memcpy(($buf|0),($1|0),($k$0$len|0))|0;
 $37 = (($1) + ($k$0$len)|0);
 $38 = (($f) + 4|0);
 HEAP32[$38>>2] = $37;
 $39 = (($1) + ($k$0)|0);
 $40 = (($f) + 8|0);
 HEAP32[$40>>2] = $39;
 HEAP32[$0>>2] = $39;
 STACKTOP = sp;return ($k$0$len|0);
}
function _sscanf($s,$fmt,$varargs) {
 $s = $s|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $ap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $0 = (_vsscanf($s,$fmt,$ap)|0);
 STACKTOP = sp;return ($0|0);
}
function _vsscanf($s,$fmt,$ap) {
 $s = $s|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$$i = 0, $$10$i = 0, $$4$i = 0, $$7$i = 0, $$8$i = 0, $$9$i = 0, $$lcssa18$i = 0, $$matches$0$i = 0, $$not$i = 0, $$pre = 0, $$pre$i = 0, $$pre$phi213$iZ2D = 0, $$pre12 = 0, $$pre13 = 0, $$pre14 = 0, $$pre193$i = 0, $$pre206$i = 0, $$pre207$i = 0, $$pre208$i = 0, $$pre209$i = 0;
 var $$pre210$i = 0, $$pre211$i = 0, $$pre212$i = 0, $$size$0$i = 0, $$width$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0;
 var $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0;
 var $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0;
 var $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0;
 var $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0;
 var $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0;
 var $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0;
 var $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0;
 var $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0;
 var $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0;
 var $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0;
 var $346 = 0, $347 = 0, $348 = 0, $349 = 0.0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0.0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0;
 var $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $alloc$0$i = 0;
 var $alloc$1$i = 0, $alloc$2$i = 0, $ap2$i$i = 0, $arglist_current = 0, $arglist_current23 = 0, $arglist_next = 0, $arglist_next24 = 0, $base$0$i = 0, $c$027$i = 0, $dest$0$i = 0, $f = 0, $factor$i = 0, $factor14$i = 0, $i$0$i$i = 0, $i$0$ph$i = 0, $i$0$ph46$i = 0, $i$0$ph46$lcssa$i = 0, $i$0$ph46$us53$i = 0, $i$1$lcssa$i = 0, $i$2$i = 0;
 var $i$2$ph$i = 0, $i$2$ph$i$phi = 0, $i$3$i = 0, $i$4$i = 0, $invert$0$i = 0, $isdigit$i = 0, $isdigit3$i = 0, $isdigit320$i = 0, $isdigittmp$i = 0, $isdigittmp2$i = 0, $isdigittmp219$i = 0, $k$0$ph$i = 0, $k$1$ph$i = 0, $matches$0$$i = 0, $matches$0116$i = 0, $matches$1$i = 0, $matches$2$i = 0, $matches$3$i = 0, $not$$i = 0, $or$cond = 0;
 var $or$cond$i$i = 0, $or$cond$us$i = 0, $or$cond21 = 0, $or$cond5$i = 0, $or$cond6$i = 0, $p$0122$i = 0, $p$1$i = 0, $p$10$i = 0, $p$11$i = 0, $p$2$i = 0, $p$3$lcssa$i = 0, $p$321$i = 0, $p$4$i = 0, $p$5$i = 0, $p$6$i = 0, $p$7$i = 0, $p$7$ph$i = 0, $p$8$i = 0, $p$9$i = 0, $pos$0121$i = 0;
 var $pos$1$i = 0, $pos$2$i = 0, $s$0114$i = 0, $s$1$ph$i = 0, $s$2$i = 0, $s$3$i = 0, $s$4$i = 0, $s$5$i = 0, $s$6$i = 0, $scanset$i = 0, $size$0$i = 0, $st$i = 0, $storemerge = 0, $vacopy_currentptr = 0, $wc$i = 0, $wcs$0115$i = 0, $wcs$1$i = 0, $wcs$2$ph$i = 0, $wcs$2$ph146$i = 0, $wcs$3$i = 0;
 var $wcs$4$i = 0, $wcs$5$i = 0, $wcs$6$i = 0, $wcs$7$i = 0, $width$0$lcssa$i = 0, $width$022$i = 0, $width$1$i = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 416|0;
 $ap2$i$i = sp + 128|0;
 $st$i = sp + 120|0;
 $scanset$i = sp + 145|0;
 $wc$i = sp + 112|0;
 $0 = sp + 144|0;
 $f = sp;
 dest=$f+0|0; stop=dest+112|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $1 = (($f) + 32|0);
 HEAP32[$1>>2] = 502;
 $2 = (($f) + 44|0);
 HEAP32[$2>>2] = $s;
 $3 = (($f) + 76|0);
 HEAP32[$3>>2] = -1;
 $4 = (($f) + 84|0);
 HEAP32[$4>>2] = $s;
 $5 = HEAP8[$fmt>>0]|0;
 $6 = ($5<<24>>24)==(0);
 if ($6) {
  $matches$3$i = 0;
  STACKTOP = sp;return ($matches$3$i|0);
 }
 $7 = (($f) + 4|0);
 $8 = (($f) + 100|0);
 $9 = (($f) + 108|0);
 $10 = (($f) + 8|0);
 $11 = (($scanset$i) + 10|0);
 $12 = (($scanset$i) + 33|0);
 $13 = (($st$i) + 4|0);
 $14 = (($scanset$i) + 46|0);
 $15 = (($scanset$i) + 94|0);
 $16 = (($f) + 104|0);
 $18 = $5;$matches$0116$i = 0;$p$0122$i = $fmt;$pos$0121$i = 0;$s$0114$i = 0;$wcs$0115$i = 0;
 L4: while(1) {
  $17 = ($18<<24>>24)==(32);
  L6: do {
   if ($17) {
    $p$1$i = $p$0122$i;
    label = 5;
   } else {
    $19 = $18&255;
    $20 = (($19) + -9)|0;
    $21 = ($20>>>0)<(5);
    if ($21) {
     $p$1$i = $p$0122$i;
     label = 5;
    } else {
     $55 = ($18<<24>>24)==(37);
     L9: do {
      if ($55) {
       $56 = (($p$0122$i) + 1|0);
       $57 = HEAP8[$56>>0]|0;
       do {
        if ((($57<<24>>24) == 42)) {
         $80 = (($p$0122$i) + 2|0);
         $dest$0$i = 0;$p$2$i = $80;
        } else if ((($57<<24>>24) == 37)) {
         break L9;
        } else {
         $81 = $57&255;
         $isdigittmp$i = (($81) + -48)|0;
         $isdigit$i = ($isdigittmp$i>>>0)<(10);
         if ($isdigit$i) {
          $82 = (($p$0122$i) + 2|0);
          $83 = HEAP8[$82>>0]|0;
          $84 = ($83<<24>>24)==(36);
          if ($84) {
           $vacopy_currentptr = HEAP32[$ap>>2]|0;
           HEAP32[$ap2$i$i>>2] = $vacopy_currentptr;
           $i$0$i$i = $isdigittmp$i;
           while(1) {
            $85 = ($i$0$i$i>>>0)>(1);
            $arglist_current = HEAP32[$ap2$i$i>>2]|0;
            $86 = HEAP32[$arglist_current>>2]|0;
            $arglist_next = (($arglist_current) + 4|0);
            HEAP32[$ap2$i$i>>2] = $arglist_next;
            $87 = (($i$0$i$i) + -1)|0;
            if ($85) {
             $i$0$i$i = $87;
            } else {
             break;
            }
           }
           $88 = (($p$0122$i) + 3|0);
           $dest$0$i = $86;$p$2$i = $88;
           break;
          }
         }
         $arglist_current23 = HEAP32[$ap>>2]|0;
         $89 = HEAP32[$arglist_current23>>2]|0;
         $arglist_next24 = (($arglist_current23) + 4|0);
         HEAP32[$ap>>2] = $arglist_next24;
         $dest$0$i = $89;$p$2$i = $56;
        }
       } while(0);
       $90 = HEAP8[$p$2$i>>0]|0;
       $91 = $90&255;
       $isdigittmp219$i = (($91) + -48)|0;
       $isdigit320$i = ($isdigittmp219$i>>>0)<(10);
       if ($isdigit320$i) {
        $95 = $91;$p$321$i = $p$2$i;$width$022$i = 0;
        while(1) {
         $92 = ($width$022$i*10)|0;
         $93 = (($92) + -48)|0;
         $94 = (($93) + ($95))|0;
         $96 = (($p$321$i) + 1|0);
         $97 = HEAP8[$96>>0]|0;
         $98 = $97&255;
         $isdigittmp2$i = (($98) + -48)|0;
         $isdigit3$i = ($isdigittmp2$i>>>0)<(10);
         if ($isdigit3$i) {
          $95 = $98;$p$321$i = $96;$width$022$i = $94;
         } else {
          $$lcssa18$i = $97;$p$3$lcssa$i = $96;$width$0$lcssa$i = $94;
          break;
         }
        }
       } else {
        $$lcssa18$i = $90;$p$3$lcssa$i = $p$2$i;$width$0$lcssa$i = 0;
       }
       $99 = ($$lcssa18$i<<24>>24)==(109);
       if ($99) {
        $100 = ($dest$0$i|0)!=(0|0);
        $101 = $100&1;
        $102 = (($p$3$lcssa$i) + 1|0);
        $$pre$i = HEAP8[$102>>0]|0;
        $105 = $$pre$i;$alloc$0$i = $101;$p$4$i = $102;
       } else {
        $105 = $$lcssa18$i;$alloc$0$i = 0;$p$4$i = $p$3$lcssa$i;
       }
       $103 = (($p$4$i) + 1|0);
       $104 = $105&255;
       switch ($104|0) {
       case 108:  {
        $109 = HEAP8[$103>>0]|0;
        $110 = ($109<<24>>24)==(108);
        $111 = (($p$4$i) + 2|0);
        $$9$i = $110 ? $111 : $103;
        $$10$i = $110 ? 3 : 1;
        $p$5$i = $$9$i;$size$0$i = $$10$i;
        break;
       }
       case 106:  {
        $p$5$i = $103;$size$0$i = 3;
        break;
       }
       case 104:  {
        $106 = HEAP8[$103>>0]|0;
        $107 = ($106<<24>>24)==(104);
        $108 = (($p$4$i) + 2|0);
        $$7$i = $107 ? $108 : $103;
        $$8$i = $107 ? -2 : -1;
        $p$5$i = $$7$i;$size$0$i = $$8$i;
        break;
       }
       case 116: case 122:  {
        $p$5$i = $103;$size$0$i = 1;
        break;
       }
       case 76:  {
        $p$5$i = $103;$size$0$i = 2;
        break;
       }
       case 110: case 112: case 67: case 83: case 91: case 99: case 115: case 88: case 71: case 70: case 69: case 65: case 103: case 102: case 101: case 97: case 120: case 117: case 111: case 105: case 100:  {
        $p$5$i = $p$4$i;$size$0$i = 0;
        break;
       }
       default: {
        $alloc$1$i = $alloc$0$i;$s$5$i = $s$0114$i;$wcs$6$i = $wcs$0115$i;
        label = 169;
        break L4;
       }
       }
       $112 = HEAP8[$p$5$i>>0]|0;
       $113 = $112&255;
       $114 = $113 & 47;
       $115 = ($114|0)==(3);
       $116 = $113 | 32;
       $$$i = $115 ? $116 : $113;
       $$size$0$i = $115 ? 1 : $size$0$i;
       if ((($$$i|0) == 99)) {
        $117 = ($width$0$lcssa$i|0)<(1);
        $$width$0$i = $117 ? 1 : $width$0$lcssa$i;
        $pos$1$i = $pos$0121$i;$width$1$i = $$width$0$i;
       } else if ((($$$i|0) == 110)) {
        $118 = ($pos$0121$i|0)<(0);
        $119 = $118 << 31 >> 31;
        $120 = ($dest$0$i|0)==(0|0);
        if ($120) {
         $matches$1$i = $matches$0116$i;$p$11$i = $p$5$i;$pos$2$i = $pos$0121$i;$s$4$i = $s$0114$i;$wcs$5$i = $wcs$0115$i;
         break L6;
        }
        switch ($$size$0$i|0) {
        case -2:  {
         $121 = $pos$0121$i&255;
         HEAP8[$dest$0$i>>0] = $121;
         $matches$1$i = $matches$0116$i;$p$11$i = $p$5$i;$pos$2$i = $pos$0121$i;$s$4$i = $s$0114$i;$wcs$5$i = $wcs$0115$i;
         break L6;
         break;
        }
        case 0:  {
         HEAP32[$dest$0$i>>2] = $pos$0121$i;
         $matches$1$i = $matches$0116$i;$p$11$i = $p$5$i;$pos$2$i = $pos$0121$i;$s$4$i = $s$0114$i;$wcs$5$i = $wcs$0115$i;
         break L6;
         break;
        }
        case -1:  {
         $122 = $pos$0121$i&65535;
         HEAP16[$dest$0$i>>1] = $122;
         $matches$1$i = $matches$0116$i;$p$11$i = $p$5$i;$pos$2$i = $pos$0121$i;$s$4$i = $s$0114$i;$wcs$5$i = $wcs$0115$i;
         break L6;
         break;
        }
        case 1:  {
         HEAP32[$dest$0$i>>2] = $pos$0121$i;
         $matches$1$i = $matches$0116$i;$p$11$i = $p$5$i;$pos$2$i = $pos$0121$i;$s$4$i = $s$0114$i;$wcs$5$i = $wcs$0115$i;
         break L6;
         break;
        }
        case 3:  {
         $123 = $dest$0$i;
         $124 = $123;
         HEAP32[$124>>2] = $pos$0121$i;
         $125 = (($123) + 4)|0;
         $126 = $125;
         HEAP32[$126>>2] = $119;
         $matches$1$i = $matches$0116$i;$p$11$i = $p$5$i;$pos$2$i = $pos$0121$i;$s$4$i = $s$0114$i;$wcs$5$i = $wcs$0115$i;
         break L6;
         break;
        }
        default: {
         $matches$1$i = $matches$0116$i;$p$11$i = $p$5$i;$pos$2$i = $pos$0121$i;$s$4$i = $s$0114$i;$wcs$5$i = $wcs$0115$i;
         break L6;
        }
        }
       } else if ((($$$i|0) == 91)) {
        $pos$1$i = $pos$0121$i;$width$1$i = $width$0$lcssa$i;
       } else {
        HEAP32[$16>>2] = 0;
        $127 = HEAP32[$10>>2]|0;
        $128 = HEAP32[$7>>2]|0;
        $129 = $127;
        $130 = $128;
        $131 = (($129) - ($130))|0;
        HEAP32[$9>>2] = $131;
        HEAP32[$8>>2] = $127;
        $133 = $128;$134 = $127;
        while(1) {
         $132 = ($133>>>0)<($134>>>0);
         if ($132) {
          $135 = (($133) + 1|0);
          HEAP32[$7>>2] = $135;
          $136 = HEAP8[$133>>0]|0;
          $137 = $136&255;
          $140 = $137;
         } else {
          $138 = (___shgetc($f)|0);
          $140 = $138;
         }
         $139 = ($140|0)==(32);
         $141 = (($140) + -9)|0;
         $142 = ($141>>>0)<(5);
         $or$cond21 = $139 | $142;
         if (!($or$cond21)) {
          break;
         }
         $$pre = HEAP32[$7>>2]|0;
         $$pre12 = HEAP32[$8>>2]|0;
         $133 = $$pre;$134 = $$pre12;
        }
        $143 = HEAP32[$8>>2]|0;
        $144 = ($143|0)==(0|0);
        $$pre206$i = HEAP32[$7>>2]|0;
        if ($144) {
         $149 = $$pre206$i;
        } else {
         $145 = (($$pre206$i) + -1|0);
         HEAP32[$7>>2] = $145;
         $149 = $145;
        }
        $146 = HEAP32[$9>>2]|0;
        $147 = HEAP32[$10>>2]|0;
        $148 = $149;
        $150 = $147;
        $151 = (($146) + ($pos$0121$i))|0;
        $152 = (($151) + ($148))|0;
        $153 = (($152) - ($150))|0;
        $pos$1$i = $153;$width$1$i = $width$0$lcssa$i;
       }
       HEAP32[$16>>2] = $width$1$i;
       $154 = HEAP32[$10>>2]|0;
       $155 = HEAP32[$7>>2]|0;
       $156 = $154;
       $157 = $155;
       $158 = (($156) - ($157))|0;
       HEAP32[$9>>2] = $158;
       $159 = ($width$1$i|0)!=(0);
       $160 = ($158|0)>($width$1$i|0);
       $or$cond$i$i = $159 & $160;
       if ($or$cond$i$i) {
        $161 = (($155) + ($width$1$i)|0);
        $storemerge = $161;
       } else {
        $storemerge = $154;
       }
       HEAP32[$8>>2] = $storemerge;
       $162 = ($155>>>0)<($storemerge>>>0);
       if ($162) {
        $163 = (($155) + 1|0);
        HEAP32[$7>>2] = $163;
        $167 = $storemerge;
       } else {
        $164 = (___shgetc($f)|0);
        $165 = ($164|0)<(0);
        if ($165) {
         $alloc$1$i = $alloc$0$i;$s$5$i = $s$0114$i;$wcs$6$i = $wcs$0115$i;
         label = 169;
         break L4;
        }
        $$pre207$i = HEAP32[$8>>2]|0;
        $167 = $$pre207$i;
       }
       $166 = ($167|0)==(0|0);
       if (!($166)) {
        $168 = HEAP32[$7>>2]|0;
        $169 = (($168) + -1|0);
        HEAP32[$7>>2] = $169;
       }
       L70: do {
        switch ($$$i|0) {
        case 91: case 99: case 115:  {
         $170 = ($$$i|0)==(99);
         $171 = $$$i & 239;
         $172 = ($171|0)==(99);
         L72: do {
          if ($172) {
           $173 = ($$$i|0)==(115);
           _memset(($scanset$i|0),-1,257)|0;
           HEAP8[$scanset$i>>0] = 0;
           if ($173) {
            HEAP8[$12>>0] = 0;
            ;HEAP8[$11+0>>0]=0|0;HEAP8[$11+1>>0]=0|0;HEAP8[$11+2>>0]=0|0;HEAP8[$11+3>>0]=0|0;HEAP8[$11+4>>0]=0|0;
            $p$9$i = $p$5$i;
           } else {
            $p$9$i = $p$5$i;
           }
          } else {
           $174 = (($p$5$i) + 1|0);
           $175 = HEAP8[$174>>0]|0;
           $176 = ($175<<24>>24)==(94);
           $177 = (($p$5$i) + 2|0);
           $invert$0$i = $176&1;
           $p$6$i = $176 ? $177 : $174;
           $178 = $176&1;
           _memset(($scanset$i|0),($178|0),257)|0;
           HEAP8[$scanset$i>>0] = 0;
           $179 = HEAP8[$p$6$i>>0]|0;
           if ((($179<<24>>24) == 93)) {
            $183 = (($p$6$i) + 1|0);
            $184 = $invert$0$i ^ 1;
            $185 = $184&255;
            HEAP8[$15>>0] = $185;
            $$pre$phi213$iZ2D = $185;$p$7$ph$i = $183;
           } else if ((($179<<24>>24) == 45)) {
            $180 = (($p$6$i) + 1|0);
            $181 = $invert$0$i ^ 1;
            $182 = $181&255;
            HEAP8[$14>>0] = $182;
            $$pre$phi213$iZ2D = $182;$p$7$ph$i = $180;
           } else {
            $$pre211$i = $invert$0$i ^ 1;
            $$pre212$i = $$pre211$i&255;
            $$pre$phi213$iZ2D = $$pre212$i;$p$7$ph$i = $p$6$i;
           }
           $p$7$i = $p$7$ph$i;
           while(1) {
            $186 = HEAP8[$p$7$i>>0]|0;
            if ((($186<<24>>24) == 45)) {
             $187 = (($p$7$i) + 1|0);
             $188 = HEAP8[$187>>0]|0;
             if ((($188<<24>>24) == 93) | (($188<<24>>24) == 0)) {
              $199 = 45;$p$8$i = $p$7$i;
             } else {
              $189 = (($p$7$i) + -1|0);
              $190 = HEAP8[$189>>0]|0;
              $191 = ($190&255)<($188&255);
              if ($191) {
               $192 = $190&255;
               $c$027$i = $192;
               while(1) {
                $193 = (($c$027$i) + 1)|0;
                $194 = (($scanset$i) + ($193)|0);
                HEAP8[$194>>0] = $$pre$phi213$iZ2D;
                $195 = HEAP8[$187>>0]|0;
                $196 = $195&255;
                $197 = ($193|0)<($196|0);
                if ($197) {
                 $c$027$i = $193;
                } else {
                 $199 = $195;$p$8$i = $187;
                 break;
                }
               }
              } else {
               $199 = $188;$p$8$i = $187;
              }
             }
            } else if ((($186<<24>>24) == 0)) {
             $alloc$1$i = $alloc$0$i;$s$5$i = $s$0114$i;$wcs$6$i = $wcs$0115$i;
             label = 169;
             break L4;
            } else if ((($186<<24>>24) == 93)) {
             $p$9$i = $p$7$i;
             break L72;
            } else {
             $199 = $186;$p$8$i = $p$7$i;
            }
            $198 = $199&255;
            $200 = (($198) + 1)|0;
            $201 = (($scanset$i) + ($200)|0);
            HEAP8[$201>>0] = $$pre$phi213$iZ2D;
            $202 = (($p$8$i) + 1|0);
            $p$7$i = $202;
           }
          }
         } while(0);
         $203 = (($width$1$i) + 1)|0;
         $$4$i = $170 ? $203 : 31;
         $204 = ($$size$0$i|0)==(1);
         $205 = ($alloc$0$i|0)!=(0);
         L91: do {
          if ($204) {
           if ($205) {
            $206 = $$4$i << 2;
            $207 = (_malloc($206)|0);
            $208 = ($207|0)==(0|0);
            if ($208) {
             $alloc$1$i = $alloc$0$i;$s$5$i = 0;$wcs$6$i = $207;
             label = 169;
             break L4;
            } else {
             $wcs$1$i = $207;
            }
           } else {
            $wcs$1$i = $dest$0$i;
           }
           HEAP32[$st$i>>2] = 0;
           HEAP32[$13>>2] = 0;
           $i$0$ph$i = 0;$k$0$ph$i = $$4$i;$wcs$2$ph$i = $wcs$1$i;
           L97: while(1) {
            $209 = ($wcs$2$ph$i|0)==(0|0);
            if ($209) {
             $210 = ($i$0$ph$i|0)==($k$0$ph$i|0);
             $or$cond$us$i = $205 & $210;
             while(1) {
              $213 = HEAP32[$7>>2]|0;
              $223 = HEAP32[$8>>2]|0;
              $224 = ($213>>>0)<($223>>>0);
              if ($224) {
               $212 = (($213) + 1|0);
               HEAP32[$7>>2] = $212;
               $214 = HEAP8[$213>>0]|0;
               $215 = $214&255;
               $217 = $215;
              } else {
               $211 = (___shgetc($f)|0);
               $217 = $211;
              }
              $216 = (($217) + 1)|0;
              $218 = (($scanset$i) + ($216)|0);
              $219 = HEAP8[$218>>0]|0;
              $220 = ($219<<24>>24)==(0);
              if ($220) {
               $i$0$ph46$lcssa$i = $i$0$ph$i;$wcs$2$ph146$i = 0;
               break L97;
              }
              $221 = $217&255;
              HEAP8[$0>>0] = $221;
              $222 = (_mbrtowc($wc$i,$0,1,$st$i)|0);
              if ((($222|0) == -1)) {
               $alloc$1$i = $alloc$0$i;$s$5$i = 0;$wcs$6$i = 0;
               label = 169;
               break L4;
              } else if ((($222|0) == -2)) {
               continue;
              }
              if ($or$cond$us$i) {
               $i$1$lcssa$i = $i$0$ph$i;
               break;
              }
             }
            } else {
             if ($205) {
              $i$0$ph46$us53$i = $i$0$ph$i;
             } else {
              $i$0$ph46$i = $i$0$ph$i;
              label = 105;
              break;
             }
             while(1) {
              while(1) {
               $227 = HEAP32[$7>>2]|0;
               $241 = HEAP32[$8>>2]|0;
               $242 = ($227>>>0)<($241>>>0);
               if ($242) {
                $226 = (($227) + 1|0);
                HEAP32[$7>>2] = $226;
                $228 = HEAP8[$227>>0]|0;
                $229 = $228&255;
                $231 = $229;
               } else {
                $225 = (___shgetc($f)|0);
                $231 = $225;
               }
               $230 = (($231) + 1)|0;
               $232 = (($scanset$i) + ($230)|0);
               $233 = HEAP8[$232>>0]|0;
               $234 = ($233<<24>>24)==(0);
               if ($234) {
                $i$0$ph46$lcssa$i = $i$0$ph46$us53$i;$wcs$2$ph146$i = $wcs$2$ph$i;
                break L97;
               }
               $235 = $231&255;
               HEAP8[$0>>0] = $235;
               $236 = (_mbrtowc($wc$i,$0,1,$st$i)|0);
               if ((($236|0) == -1)) {
                $alloc$1$i = $alloc$0$i;$s$5$i = 0;$wcs$6$i = $wcs$2$ph$i;
                label = 169;
                break L4;
               } else if (!((($236|0) == -2))) {
                break;
               }
              }
              $237 = HEAP32[$wc$i>>2]|0;
              $238 = (($i$0$ph46$us53$i) + 1)|0;
              $239 = (($wcs$2$ph$i) + ($i$0$ph46$us53$i<<2)|0);
              HEAP32[$239>>2] = $237;
              $240 = ($238|0)==($k$0$ph$i|0);
              if ($240) {
               $i$1$lcssa$i = $k$0$ph$i;
               break;
              } else {
               $i$0$ph46$us53$i = $238;
              }
             }
            }
            $factor$i = $k$0$ph$i << 1;
            $260 = $factor$i | 1;
            $261 = $260 << 2;
            $262 = (_realloc($wcs$2$ph$i,$261)|0);
            $263 = ($262|0)==(0|0);
            if ($263) {
             $alloc$1$i = $alloc$0$i;$s$5$i = 0;$wcs$6$i = $wcs$2$ph$i;
             label = 169;
             break L4;
            }
            $i$0$ph$i = $i$1$lcssa$i;$k$0$ph$i = $260;$wcs$2$ph$i = $262;
           }
           L122: do {
            if ((label|0) == 105) {
             while(1) {
              label = 0;
              while(1) {
               $243 = HEAP32[$7>>2]|0;
               $244 = HEAP32[$8>>2]|0;
               $245 = ($243>>>0)<($244>>>0);
               if ($245) {
                $246 = (($243) + 1|0);
                HEAP32[$7>>2] = $246;
                $247 = HEAP8[$243>>0]|0;
                $248 = $247&255;
                $251 = $248;
               } else {
                $249 = (___shgetc($f)|0);
                $251 = $249;
               }
               $250 = (($251) + 1)|0;
               $252 = (($scanset$i) + ($250)|0);
               $253 = HEAP8[$252>>0]|0;
               $254 = ($253<<24>>24)==(0);
               if ($254) {
                $i$0$ph46$lcssa$i = $i$0$ph46$i;$wcs$2$ph146$i = $wcs$2$ph$i;
                break L122;
               }
               $255 = $251&255;
               HEAP8[$0>>0] = $255;
               $256 = (_mbrtowc($wc$i,$0,1,$st$i)|0);
               if ((($256|0) == -1)) {
                $alloc$1$i = 0;$s$5$i = 0;$wcs$6$i = $wcs$2$ph$i;
                label = 169;
                break L4;
               } else if (!((($256|0) == -2))) {
                break;
               }
              }
              $257 = HEAP32[$wc$i>>2]|0;
              $258 = (($i$0$ph46$i) + 1)|0;
              $259 = (($wcs$2$ph$i) + ($i$0$ph46$i<<2)|0);
              HEAP32[$259>>2] = $257;
              $i$0$ph46$i = $258;
              label = 105;
             }
            }
           } while(0);
           $264 = HEAP32[$st$i>>2]|0;
           $265 = ($264|0)==(0);
           if ($265) {
            $i$4$i = $i$0$ph46$lcssa$i;$s$2$i = 0;$wcs$3$i = $wcs$2$ph146$i;
           } else {
            $alloc$1$i = $alloc$0$i;$s$5$i = 0;$wcs$6$i = $wcs$2$ph146$i;
            label = 169;
            break L4;
           }
          } else {
           if ($205) {
            $266 = (_malloc($$4$i)|0);
            $267 = ($266|0)==(0|0);
            if ($267) {
             $alloc$1$i = $alloc$0$i;$s$5$i = 0;$wcs$6$i = 0;
             label = 169;
             break L4;
            } else {
             $i$2$ph$i = 0;$k$1$ph$i = $$4$i;$s$1$ph$i = $266;
            }
            while(1) {
             $i$2$i = $i$2$ph$i;
             while(1) {
              $268 = HEAP32[$7>>2]|0;
              $269 = HEAP32[$8>>2]|0;
              $270 = ($268>>>0)<($269>>>0);
              if ($270) {
               $271 = (($268) + 1|0);
               HEAP32[$7>>2] = $271;
               $272 = HEAP8[$268>>0]|0;
               $273 = $272&255;
               $276 = $273;
              } else {
               $274 = (___shgetc($f)|0);
               $276 = $274;
              }
              $275 = (($276) + 1)|0;
              $277 = (($scanset$i) + ($275)|0);
              $278 = HEAP8[$277>>0]|0;
              $279 = ($278<<24>>24)==(0);
              if ($279) {
               $i$4$i = $i$2$i;$s$2$i = $s$1$ph$i;$wcs$3$i = 0;
               break L91;
              }
              $280 = $276&255;
              $281 = (($i$2$i) + 1)|0;
              $282 = (($s$1$ph$i) + ($i$2$i)|0);
              HEAP8[$282>>0] = $280;
              $283 = ($281|0)==($k$1$ph$i|0);
              if ($283) {
               break;
              } else {
               $i$2$i = $281;
              }
             }
             $factor14$i = $k$1$ph$i << 1;
             $284 = $factor14$i | 1;
             $285 = (_realloc($s$1$ph$i,$284)|0);
             $286 = ($285|0)==(0|0);
             if ($286) {
              $alloc$1$i = $alloc$0$i;$s$5$i = $s$1$ph$i;$wcs$6$i = 0;
              label = 169;
              break L4;
             } else {
              $i$2$ph$i$phi = $k$1$ph$i;$k$1$ph$i = $284;$s$1$ph$i = $285;$i$2$ph$i = $i$2$ph$i$phi;
             }
            }
           }
           $287 = ($dest$0$i|0)==(0|0);
           if ($287) {
            $305 = $167;
            while(1) {
             $303 = HEAP32[$7>>2]|0;
             $304 = ($303>>>0)<($305>>>0);
             if ($304) {
              $306 = (($303) + 1|0);
              HEAP32[$7>>2] = $306;
              $307 = HEAP8[$303>>0]|0;
              $308 = $307&255;
              $311 = $308;
             } else {
              $309 = (___shgetc($f)|0);
              $311 = $309;
             }
             $310 = (($311) + 1)|0;
             $312 = (($scanset$i) + ($310)|0);
             $313 = HEAP8[$312>>0]|0;
             $314 = ($313<<24>>24)==(0);
             if ($314) {
              $i$4$i = 0;$s$2$i = 0;$wcs$3$i = 0;
              break L91;
             }
             $$pre209$i = HEAP32[$8>>2]|0;
             $305 = $$pre209$i;
            }
           } else {
            $290 = $167;$i$3$i = 0;
            while(1) {
             $288 = HEAP32[$7>>2]|0;
             $289 = ($288>>>0)<($290>>>0);
             if ($289) {
              $291 = (($288) + 1|0);
              HEAP32[$7>>2] = $291;
              $292 = HEAP8[$288>>0]|0;
              $293 = $292&255;
              $296 = $293;
             } else {
              $294 = (___shgetc($f)|0);
              $296 = $294;
             }
             $295 = (($296) + 1)|0;
             $297 = (($scanset$i) + ($295)|0);
             $298 = HEAP8[$297>>0]|0;
             $299 = ($298<<24>>24)==(0);
             if ($299) {
              $i$4$i = $i$3$i;$s$2$i = $dest$0$i;$wcs$3$i = 0;
              break L91;
             }
             $300 = $296&255;
             $301 = (($i$3$i) + 1)|0;
             $302 = (($dest$0$i) + ($i$3$i)|0);
             HEAP8[$302>>0] = $300;
             $$pre193$i = HEAP32[$8>>2]|0;
             $290 = $$pre193$i;$i$3$i = $301;
            }
           }
          }
         } while(0);
         $315 = HEAP32[$8>>2]|0;
         $316 = ($315|0)==(0|0);
         $$pre208$i = HEAP32[$7>>2]|0;
         if ($316) {
          $321 = $$pre208$i;
         } else {
          $317 = (($$pre208$i) + -1|0);
          HEAP32[$7>>2] = $317;
          $321 = $317;
         }
         $318 = HEAP32[$9>>2]|0;
         $319 = HEAP32[$10>>2]|0;
         $320 = $321;
         $322 = $319;
         $323 = (($320) - ($322))|0;
         $324 = (($323) + ($318))|0;
         $325 = ($324|0)==(0);
         if ($325) {
          $alloc$2$i = $alloc$0$i;$matches$2$i = $matches$0116$i;$s$6$i = $s$2$i;$wcs$7$i = $wcs$3$i;
          break L4;
         }
         $$not$i = $170 ^ 1;
         $326 = ($324|0)==($width$1$i|0);
         $or$cond5$i = $326 | $$not$i;
         if (!($or$cond5$i)) {
          $alloc$2$i = $alloc$0$i;$matches$2$i = $matches$0116$i;$s$6$i = $s$2$i;$wcs$7$i = $wcs$3$i;
          break L4;
         }
         do {
          if ($205) {
           if ($204) {
            HEAP32[$dest$0$i>>2] = $wcs$3$i;
            break;
           } else {
            HEAP32[$dest$0$i>>2] = $s$2$i;
            break;
           }
          }
         } while(0);
         if ($170) {
          $p$10$i = $p$9$i;$s$3$i = $s$2$i;$wcs$4$i = $wcs$3$i;
         } else {
          $327 = ($wcs$3$i|0)==(0|0);
          if (!($327)) {
           $328 = (($wcs$3$i) + ($i$4$i<<2)|0);
           HEAP32[$328>>2] = 0;
          }
          $329 = ($s$2$i|0)==(0|0);
          if ($329) {
           $p$10$i = $p$9$i;$s$3$i = 0;$wcs$4$i = $wcs$3$i;
           break L70;
          }
          $330 = (($s$2$i) + ($i$4$i)|0);
          HEAP8[$330>>0] = 0;
          $p$10$i = $p$9$i;$s$3$i = $s$2$i;$wcs$4$i = $wcs$3$i;
         }
         break;
        }
        case 111:  {
         $base$0$i = 8;
         label = 151;
         break;
        }
        case 117: case 100:  {
         $base$0$i = 10;
         label = 151;
         break;
        }
        case 105:  {
         $base$0$i = 0;
         label = 151;
         break;
        }
        case 120: case 88: case 112:  {
         $base$0$i = 16;
         label = 151;
         break;
        }
        case 71: case 103: case 70: case 102: case 69: case 101: case 65: case 97:  {
         $349 = (+___floatscan($f,$$size$0$i,0));
         $350 = HEAP32[$9>>2]|0;
         $351 = HEAP32[$7>>2]|0;
         $352 = HEAP32[$10>>2]|0;
         $353 = $351;
         $354 = $352;
         $355 = (($354) - ($353))|0;
         $356 = ($350|0)==($355|0);
         if ($356) {
          $alloc$2$i = $alloc$0$i;$matches$2$i = $matches$0116$i;$s$6$i = $s$0114$i;$wcs$7$i = $wcs$0115$i;
          break L4;
         }
         $357 = ($dest$0$i|0)==(0|0);
         if ($357) {
          $p$10$i = $p$5$i;$s$3$i = $s$0114$i;$wcs$4$i = $wcs$0115$i;
         } else {
          if ((($$size$0$i|0) == 0)) {
           $358 = $349;
           HEAPF32[$dest$0$i>>2] = $358;
           $p$10$i = $p$5$i;$s$3$i = $s$0114$i;$wcs$4$i = $wcs$0115$i;
           break L70;
          } else if ((($$size$0$i|0) == 1)) {
           HEAPF64[$dest$0$i>>3] = $349;
           $p$10$i = $p$5$i;$s$3$i = $s$0114$i;$wcs$4$i = $wcs$0115$i;
           break L70;
          } else if ((($$size$0$i|0) == 2)) {
           HEAPF64[$dest$0$i>>3] = $349;
           $p$10$i = $p$5$i;$s$3$i = $s$0114$i;$wcs$4$i = $wcs$0115$i;
           break L70;
          } else {
           $p$10$i = $p$5$i;$s$3$i = $s$0114$i;$wcs$4$i = $wcs$0115$i;
           break L70;
          }
         }
         break;
        }
        default: {
         $p$10$i = $p$5$i;$s$3$i = $s$0114$i;$wcs$4$i = $wcs$0115$i;
        }
        }
       } while(0);
       L190: do {
        if ((label|0) == 151) {
         label = 0;
         $331 = (___intscan($f,$base$0$i,0,-1,-1)|0);
         $332 = tempRet0;
         $333 = HEAP32[$9>>2]|0;
         $334 = HEAP32[$7>>2]|0;
         $335 = HEAP32[$10>>2]|0;
         $336 = $334;
         $337 = $335;
         $338 = (($337) - ($336))|0;
         $339 = ($333|0)==($338|0);
         if ($339) {
          $alloc$2$i = $alloc$0$i;$matches$2$i = $matches$0116$i;$s$6$i = $s$0114$i;$wcs$7$i = $wcs$0115$i;
          break L4;
         }
         $340 = ($$$i|0)!=(112);
         $341 = ($dest$0$i|0)==(0|0);
         $or$cond6$i = $340 | $341;
         if (!($or$cond6$i)) {
          $342 = $331;
          HEAP32[$dest$0$i>>2] = $342;
          $p$10$i = $p$5$i;$s$3$i = $s$0114$i;$wcs$4$i = $wcs$0115$i;
          break;
         }
         if ($341) {
          $p$10$i = $p$5$i;$s$3$i = $s$0114$i;$wcs$4$i = $wcs$0115$i;
         } else {
          switch ($$size$0$i|0) {
          case 0:  {
           HEAP32[$dest$0$i>>2] = $331;
           $p$10$i = $p$5$i;$s$3$i = $s$0114$i;$wcs$4$i = $wcs$0115$i;
           break L190;
           break;
          }
          case 1:  {
           HEAP32[$dest$0$i>>2] = $331;
           $p$10$i = $p$5$i;$s$3$i = $s$0114$i;$wcs$4$i = $wcs$0115$i;
           break L190;
           break;
          }
          case 3:  {
           $345 = $dest$0$i;
           $346 = $345;
           HEAP32[$346>>2] = $331;
           $347 = (($345) + 4)|0;
           $348 = $347;
           HEAP32[$348>>2] = $332;
           $p$10$i = $p$5$i;$s$3$i = $s$0114$i;$wcs$4$i = $wcs$0115$i;
           break L190;
           break;
          }
          case -2:  {
           $343 = $331&255;
           HEAP8[$dest$0$i>>0] = $343;
           $p$10$i = $p$5$i;$s$3$i = $s$0114$i;$wcs$4$i = $wcs$0115$i;
           break L190;
           break;
          }
          case -1:  {
           $344 = $331&65535;
           HEAP16[$dest$0$i>>1] = $344;
           $p$10$i = $p$5$i;$s$3$i = $s$0114$i;$wcs$4$i = $wcs$0115$i;
           break L190;
           break;
          }
          default: {
           $p$10$i = $p$5$i;$s$3$i = $s$0114$i;$wcs$4$i = $wcs$0115$i;
           break L190;
          }
          }
         }
        }
       } while(0);
       $359 = HEAP32[$9>>2]|0;
       $360 = HEAP32[$7>>2]|0;
       $361 = HEAP32[$10>>2]|0;
       $362 = $360;
       $363 = $361;
       $364 = (($359) + ($pos$1$i))|0;
       $365 = (($364) + ($362))|0;
       $366 = (($365) - ($363))|0;
       $not$$i = ($dest$0$i|0)!=(0|0);
       $367 = $not$$i&1;
       $matches$0$$i = (($367) + ($matches$0116$i))|0;
       $matches$1$i = $matches$0$$i;$p$11$i = $p$10$i;$pos$2$i = $366;$s$4$i = $s$3$i;$wcs$5$i = $wcs$4$i;
       break L6;
      }
     } while(0);
     $58 = $55&1;
     $59 = (($p$0122$i) + ($58)|0);
     HEAP32[$16>>2] = 0;
     $60 = HEAP32[$10>>2]|0;
     $61 = HEAP32[$7>>2]|0;
     $62 = $60;
     $63 = $61;
     $64 = (($62) - ($63))|0;
     HEAP32[$9>>2] = $64;
     HEAP32[$8>>2] = $60;
     $65 = ($61>>>0)<($60>>>0);
     if ($65) {
      $66 = (($61) + 1|0);
      HEAP32[$7>>2] = $66;
      $67 = HEAP8[$61>>0]|0;
      $68 = $67&255;
      $73 = $68;
     } else {
      $69 = (___shgetc($f)|0);
      $73 = $69;
     }
     $70 = HEAP8[$59>>0]|0;
     $71 = $70&255;
     $72 = ($73|0)==($71|0);
     if (!($72)) {
      label = 22;
      break L4;
     }
     $79 = (($pos$0121$i) + 1)|0;
     $matches$1$i = $matches$0116$i;$p$11$i = $59;$pos$2$i = $79;$s$4$i = $s$0114$i;$wcs$5$i = $wcs$0115$i;
    }
   }
  } while(0);
  if ((label|0) == 5) {
   while(1) {
    label = 0;
    $22 = (($p$1$i) + 1|0);
    $23 = HEAP8[$22>>0]|0;
    $24 = ($23<<24>>24)==(32);
    if ($24) {
     $p$1$i = $22;
     label = 5;
     continue;
    }
    $25 = $23&255;
    $26 = (($25) + -9)|0;
    $27 = ($26>>>0)<(5);
    if ($27) {
     $p$1$i = $22;
     label = 5;
    } else {
     break;
    }
   }
   HEAP32[$16>>2] = 0;
   $28 = HEAP32[$10>>2]|0;
   $29 = HEAP32[$7>>2]|0;
   $30 = $28;
   $31 = $29;
   $32 = (($30) - ($31))|0;
   HEAP32[$9>>2] = $32;
   HEAP32[$8>>2] = $28;
   $34 = $29;$35 = $28;
   while(1) {
    $33 = ($34>>>0)<($35>>>0);
    if ($33) {
     $36 = (($34) + 1|0);
     HEAP32[$7>>2] = $36;
     $37 = HEAP8[$34>>0]|0;
     $38 = $37&255;
     $41 = $38;
    } else {
     $39 = (___shgetc($f)|0);
     $41 = $39;
    }
    $40 = ($41|0)==(32);
    $42 = (($41) + -9)|0;
    $43 = ($42>>>0)<(5);
    $or$cond = $40 | $43;
    if (!($or$cond)) {
     break;
    }
    $$pre13 = HEAP32[$7>>2]|0;
    $$pre14 = HEAP32[$8>>2]|0;
    $34 = $$pre13;$35 = $$pre14;
   }
   $44 = HEAP32[$8>>2]|0;
   $45 = ($44|0)==(0|0);
   $$pre210$i = HEAP32[$7>>2]|0;
   if ($45) {
    $50 = $$pre210$i;
   } else {
    $46 = (($$pre210$i) + -1|0);
    HEAP32[$7>>2] = $46;
    $50 = $46;
   }
   $47 = HEAP32[$9>>2]|0;
   $48 = HEAP32[$10>>2]|0;
   $49 = $50;
   $51 = $48;
   $52 = (($47) + ($pos$0121$i))|0;
   $53 = (($52) + ($49))|0;
   $54 = (($53) - ($51))|0;
   $matches$1$i = $matches$0116$i;$p$11$i = $p$1$i;$pos$2$i = $54;$s$4$i = $s$0114$i;$wcs$5$i = $wcs$0115$i;
  }
  $368 = (($p$11$i) + 1|0);
  $369 = HEAP8[$368>>0]|0;
  $370 = ($369<<24>>24)==(0);
  if ($370) {
   $matches$3$i = $matches$1$i;
   label = 172;
   break;
  } else {
   $18 = $369;$matches$0116$i = $matches$1$i;$p$0122$i = $368;$pos$0121$i = $pos$2$i;$s$0114$i = $s$4$i;$wcs$0115$i = $wcs$5$i;
  }
 }
 if ((label|0) == 172) {
  STACKTOP = sp;return ($matches$3$i|0);
 }
 if ((label|0) == 22) {
  $74 = HEAP32[$8>>2]|0;
  $75 = ($74|0)==(0|0);
  if (!($75)) {
   $76 = HEAP32[$7>>2]|0;
   $77 = (($76) + -1|0);
   HEAP32[$7>>2] = $77;
  }
  $78 = ($73|0)<(0);
  if ($78) {
   $alloc$1$i = 0;$s$5$i = $s$0114$i;$wcs$6$i = $wcs$0115$i;
   label = 169;
  } else {
   $matches$3$i = $matches$0116$i;
   STACKTOP = sp;return ($matches$3$i|0);
  }
 }
 if ((label|0) == 169) {
  $371 = ($matches$0116$i|0)==(0);
  $372 = $371 << 31 >> 31;
  $$matches$0$i = (($372) + ($matches$0116$i))|0;
  $alloc$2$i = $alloc$1$i;$matches$2$i = $$matches$0$i;$s$6$i = $s$5$i;$wcs$7$i = $wcs$6$i;
 }
 $373 = ($alloc$2$i|0)==(0);
 if ($373) {
  $matches$3$i = $matches$2$i;
  STACKTOP = sp;return ($matches$3$i|0);
 }
 _free($s$6$i);
 _free($wcs$7$i);
 $matches$3$i = $matches$2$i;
 STACKTOP = sp;return ($matches$3$i|0);
}
function _do_read($f,$buf,$len) {
 $f = $f|0;
 $buf = $buf|0;
 $len = $len|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___string_read($f,$buf,$len)|0);
 STACKTOP = sp;return ($0|0);
}
function __ZNSt8bad_castD0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt9exceptionD2Ev(($this|0));
 $0 = ($this|0)==(0|0);
 if (!($0)) {
  _free($this);
 }
 STACKTOP = sp;return;
}
function __ZNSt8bad_castD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt9exceptionD2Ev(($this|0));
 STACKTOP = sp;return;
}
function __ZNKSt8bad_cast4whatEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return (14280|0);
}
function __ZN10__cxxabiv116__shim_type_infoD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNK10__cxxabiv116__shim_type_info5noop1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNK10__cxxabiv116__shim_type_info5noop2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZN10__cxxabiv123__fundamental_type_infoD0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($this|0)==(0|0);
 if (!($0)) {
  _free($this);
 }
 STACKTOP = sp;return;
}
function __ZN10__cxxabiv117__class_type_infoD0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($this|0)==(0|0);
 if (!($0)) {
  _free($this);
 }
 STACKTOP = sp;return;
}
function __ZN10__cxxabiv120__si_class_type_infoD0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($this|0)==(0|0);
 if (!($0)) {
  _free($this);
 }
 STACKTOP = sp;return;
}
function __ZN10__cxxabiv121__vmi_class_type_infoD0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($this|0)==(0|0);
 if (!($0)) {
  _free($this);
 }
 STACKTOP = sp;return;
}
function __ZN10__cxxabiv119__pointer_type_infoD0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($this|0)==(0|0);
 if (!($0)) {
  _free($this);
 }
 STACKTOP = sp;return;
}
function __ZNK10__cxxabiv123__fundamental_type_info9can_catchEPKNS_16__shim_type_infoERPv($this,$thrown_type,$0) {
 $this = $this|0;
 $thrown_type = $thrown_type|0;
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($this|0)==($thrown_type|0);
 STACKTOP = sp;return ($1|0);
}
function __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv($this,$thrown_type,$adjustedPtr) {
 $this = $this|0;
 $thrown_type = $thrown_type|0;
 $adjustedPtr = $adjustedPtr|0;
 var $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $info = 0, dest = 0, label = 0;
 var sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $info = sp;
 $0 = ($this|0)==($thrown_type|0);
 if ($0) {
  $$1 = 1;
  STACKTOP = sp;return ($$1|0);
 }
 $1 = ($thrown_type|0)==(0|0);
 if ($1) {
  $$1 = 0;
  STACKTOP = sp;return ($$1|0);
 }
 $2 = (___dynamic_cast($thrown_type,14448)|0);
 $3 = ($2|0)==(0|0);
 if ($3) {
  $$1 = 0;
  STACKTOP = sp;return ($$1|0);
 }
 dest=$info+0|0; stop=dest+56|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 HEAP32[$info>>2] = $2;
 $4 = (($info) + 8|0);
 HEAP32[$4>>2] = $this;
 $5 = (($info) + 12|0);
 HEAP32[$5>>2] = -1;
 $6 = (($info) + 48|0);
 HEAP32[$6>>2] = 1;
 $7 = HEAP32[$2>>2]|0;
 $8 = (($7) + 28|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = HEAP32[$adjustedPtr>>2]|0;
 FUNCTION_TABLE_viiii[$9 & 511]($2,$info,$10,1);
 $11 = (($info) + 24|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)==(1);
 if (!($13)) {
  $$1 = 0;
  STACKTOP = sp;return ($$1|0);
 }
 $14 = (($info) + 16|0);
 $15 = HEAP32[$14>>2]|0;
 HEAP32[$adjustedPtr>>2] = $15;
 $$1 = 1;
 STACKTOP = sp;return ($$1|0);
}
function __ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($info) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==($this|0);
 if (!($2)) {
  STACKTOP = sp;return;
 }
 $3 = (($info) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  HEAP32[$3>>2] = $adjustedPtr;
  $6 = (($info) + 24|0);
  HEAP32[$6>>2] = $path_below;
  $7 = (($info) + 36|0);
  HEAP32[$7>>2] = 1;
  STACKTOP = sp;return;
 }
 $8 = ($4|0)==($adjustedPtr|0);
 if (!($8)) {
  $12 = (($info) + 36|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (($13) + 1)|0;
  HEAP32[$12>>2] = $14;
  $15 = (($info) + 24|0);
  HEAP32[$15>>2] = 2;
  $16 = (($info) + 54|0);
  HEAP8[$16>>0] = 1;
  STACKTOP = sp;return;
 }
 $9 = (($info) + 24|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)==(2);
 if (!($11)) {
  STACKTOP = sp;return;
 }
 HEAP32[$9>>2] = $path_below;
 STACKTOP = sp;return;
}
function __ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($info) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 if (!($2)) {
  $17 = (($this) + 8|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = HEAP32[$18>>2]|0;
  $20 = (($19) + 28|0);
  $21 = HEAP32[$20>>2]|0;
  FUNCTION_TABLE_viiii[$21 & 511]($18,$info,$adjustedPtr,$path_below);
  STACKTOP = sp;return;
 }
 $3 = (($info) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  HEAP32[$3>>2] = $adjustedPtr;
  $6 = (($info) + 24|0);
  HEAP32[$6>>2] = $path_below;
  $7 = (($info) + 36|0);
  HEAP32[$7>>2] = 1;
  STACKTOP = sp;return;
 }
 $8 = ($4|0)==($adjustedPtr|0);
 if (!($8)) {
  $12 = (($info) + 36|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (($13) + 1)|0;
  HEAP32[$12>>2] = $14;
  $15 = (($info) + 24|0);
  HEAP32[$15>>2] = 2;
  $16 = (($info) + 54|0);
  HEAP8[$16>>0] = 1;
  STACKTOP = sp;return;
 }
 $9 = (($info) + 24|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)==(2);
 if (!($11)) {
  STACKTOP = sp;return;
 }
 HEAP32[$9>>2] = $path_below;
 STACKTOP = sp;return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $offset_to_base$0$i = 0, $offset_to_base$0$i1 = 0, $p$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($info) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 if ($2) {
  $3 = (($info) + 16|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)==(0|0);
  if ($5) {
   HEAP32[$3>>2] = $adjustedPtr;
   $6 = (($info) + 24|0);
   HEAP32[$6>>2] = $path_below;
   $7 = (($info) + 36|0);
   HEAP32[$7>>2] = 1;
   STACKTOP = sp;return;
  }
  $8 = ($4|0)==($adjustedPtr|0);
  if (!($8)) {
   $12 = (($info) + 36|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = (($13) + 1)|0;
   HEAP32[$12>>2] = $14;
   $15 = (($info) + 24|0);
   HEAP32[$15>>2] = 2;
   $16 = (($info) + 54|0);
   HEAP8[$16>>0] = 1;
   STACKTOP = sp;return;
  }
  $9 = (($info) + 24|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)==(2);
  if (!($11)) {
   STACKTOP = sp;return;
  }
  HEAP32[$9>>2] = $path_below;
  STACKTOP = sp;return;
 }
 $17 = (($this) + 12|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ((($this) + ($18<<3)|0) + 16|0);
 $20 = (($this) + 20|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = $21 >> 8;
 $23 = $21 & 1;
 $24 = ($23|0)==(0);
 if ($24) {
  $offset_to_base$0$i1 = $22;
 } else {
  $25 = HEAP32[$adjustedPtr>>2]|0;
  $26 = (($25) + ($22)|0);
  $27 = HEAP32[$26>>2]|0;
  $offset_to_base$0$i1 = $27;
 }
 $28 = (($this) + 16|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = HEAP32[$29>>2]|0;
 $31 = (($30) + 28|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = (($adjustedPtr) + ($offset_to_base$0$i1)|0);
 $34 = $21 & 2;
 $35 = ($34|0)!=(0);
 $36 = $35 ? $path_below : 2;
 FUNCTION_TABLE_viiii[$32 & 511]($29,$info,$33,$36);
 $37 = ($18|0)>(1);
 if (!($37)) {
  STACKTOP = sp;return;
 }
 $38 = (($this) + 24|0);
 $39 = (($info) + 54|0);
 $p$0 = $38;
 while(1) {
  $40 = (($p$0) + 4|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = $41 >> 8;
  $43 = $41 & 1;
  $44 = ($43|0)==(0);
  if ($44) {
   $offset_to_base$0$i = $42;
  } else {
   $45 = HEAP32[$adjustedPtr>>2]|0;
   $46 = (($45) + ($42)|0);
   $47 = HEAP32[$46>>2]|0;
   $offset_to_base$0$i = $47;
  }
  $48 = HEAP32[$p$0>>2]|0;
  $49 = HEAP32[$48>>2]|0;
  $50 = (($49) + 28|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = (($adjustedPtr) + ($offset_to_base$0$i)|0);
  $53 = $41 & 2;
  $54 = ($53|0)!=(0);
  $55 = $54 ? $path_below : 2;
  FUNCTION_TABLE_viiii[$51 & 511]($48,$info,$52,$55);
  $56 = HEAP8[$39>>0]|0;
  $57 = ($56<<24>>24)==(0);
  if (!($57)) {
   label = 16;
   break;
  }
  $58 = (($p$0) + 8|0);
  $59 = ($58>>>0)<($19>>>0);
  if ($59) {
   $p$0 = $58;
  } else {
   label = 16;
   break;
  }
 }
 if ((label|0) == 16) {
  STACKTOP = sp;return;
 }
}
function __ZNK10__cxxabiv119__pointer_type_info9can_catchEPKNS_16__shim_type_infoERPv($this,$thrown_type,$adjustedPtr) {
 $this = $this|0;
 $thrown_type = $thrown_type|0;
 $adjustedPtr = $adjustedPtr|0;
 var $$$i = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $info = 0, $or$cond = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $info = sp;
 $0 = HEAP32[$adjustedPtr>>2]|0;
 $1 = HEAP32[$0>>2]|0;
 HEAP32[$adjustedPtr>>2] = $1;
 $2 = ($this|0)==($thrown_type|0);
 $3 = ($thrown_type|0)==(14760|0);
 $$$i = $2 | $3;
 if ($$$i) {
  $$1 = 1;
 } else {
  $4 = ($thrown_type|0)==(0|0);
  if ($4) {
   $$1 = 0;
  } else {
   $5 = (___dynamic_cast($thrown_type,14560)|0);
   $6 = ($5|0)==(0|0);
   if ($6) {
    $$1 = 0;
   } else {
    $7 = (($5) + 8|0);
    $8 = HEAP32[$7>>2]|0;
    $9 = (($this) + 8|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = $10 ^ -1;
    $12 = $8 & $11;
    $13 = ($12|0)==(0);
    if ($13) {
     $14 = (($this) + 12|0);
     $15 = HEAP32[$14>>2]|0;
     $16 = (($5) + 12|0);
     $17 = HEAP32[$16>>2]|0;
     $18 = ($15|0)==($17|0);
     $19 = ($15|0)==(14744|0);
     $or$cond = $18 | $19;
     if ($or$cond) {
      $$1 = 1;
     } else {
      $20 = ($15|0)==(0|0);
      if ($20) {
       $$1 = 0;
      } else {
       $21 = (___dynamic_cast($15,14448)|0);
       $22 = ($21|0)==(0|0);
       if ($22) {
        $$1 = 0;
       } else {
        $23 = HEAP32[$16>>2]|0;
        $24 = ($23|0)==(0|0);
        if ($24) {
         $$1 = 0;
        } else {
         $25 = (___dynamic_cast($23,14448)|0);
         $26 = ($25|0)==(0|0);
         if ($26) {
          $$1 = 0;
         } else {
          dest=$info+0|0; stop=dest+56|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
          HEAP32[$info>>2] = $25;
          $27 = (($info) + 8|0);
          HEAP32[$27>>2] = $21;
          $28 = (($info) + 12|0);
          HEAP32[$28>>2] = -1;
          $29 = (($info) + 48|0);
          HEAP32[$29>>2] = 1;
          $30 = HEAP32[$25>>2]|0;
          $31 = (($30) + 28|0);
          $32 = HEAP32[$31>>2]|0;
          $33 = HEAP32[$adjustedPtr>>2]|0;
          FUNCTION_TABLE_viiii[$32 & 511]($25,$info,$33,1);
          $34 = (($info) + 24|0);
          $35 = HEAP32[$34>>2]|0;
          $36 = ($35|0)==(1);
          if ($36) {
           $37 = (($info) + 16|0);
           $38 = HEAP32[$37>>2]|0;
           HEAP32[$adjustedPtr>>2] = $38;
           $$1 = 1;
          } else {
           $$1 = 0;
          }
         }
        }
       }
      }
     }
    } else {
     $$1 = 0;
    }
   }
  }
 }
 STACKTOP = sp;return ($$1|0);
}
function ___dynamic_cast($static_ptr,$dst_type) {
 $static_ptr = $static_ptr|0;
 $dst_type = $dst_type|0;
 var $$ = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $dst_ptr$0 = 0, $info = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $info = sp;
 $0 = HEAP32[$static_ptr>>2]|0;
 $1 = (($0) + -8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2;
 $4 = (($static_ptr) + ($3)|0);
 $5 = (($0) + -4|0);
 $6 = HEAP32[$5>>2]|0;
 HEAP32[$info>>2] = $dst_type;
 $7 = (($info) + 4|0);
 HEAP32[$7>>2] = $static_ptr;
 $8 = (($info) + 8|0);
 HEAP32[$8>>2] = 14392;
 $9 = (($info) + 12|0);
 $10 = (($info) + 16|0);
 $11 = (($info) + 20|0);
 $12 = (($info) + 24|0);
 $13 = (($info) + 28|0);
 $14 = (($info) + 32|0);
 $15 = (($info) + 40|0);
 $16 = ($6|0)==($dst_type|0);
 dest=$9+0|0; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));HEAP16[$9+40>>1]=0|0;HEAP8[$9+42>>0]=0|0;
 do {
  if ($16) {
   $17 = (($info) + 48|0);
   HEAP32[$17>>2] = 1;
   $18 = HEAP32[$6>>2]|0;
   $19 = (($18) + 20|0);
   $20 = HEAP32[$19>>2]|0;
   FUNCTION_TABLE_viiiiii[$20 & 511]($6,$info,$4,$4,1,0);
   $21 = HEAP32[$12>>2]|0;
   $22 = ($21|0)==(1);
   $$ = $22 ? $4 : 0;
   $dst_ptr$0 = $$;
  } else {
   $23 = (($info) + 36|0);
   $24 = HEAP32[$6>>2]|0;
   $25 = (($24) + 24|0);
   $26 = HEAP32[$25>>2]|0;
   FUNCTION_TABLE_viiiii[$26 & 511]($6,$info,$4,1,0);
   $27 = HEAP32[$23>>2]|0;
   if ((($27|0) == 0)) {
    $28 = HEAP32[$15>>2]|0;
    $29 = ($28|0)==(1);
    if (!($29)) {
     $dst_ptr$0 = 0;
     break;
    }
    $30 = HEAP32[$13>>2]|0;
    $31 = ($30|0)==(1);
    if (!($31)) {
     $dst_ptr$0 = 0;
     break;
    }
    $32 = HEAP32[$14>>2]|0;
    $33 = ($32|0)==(1);
    $34 = HEAP32[$11>>2]|0;
    $$1 = $33 ? $34 : 0;
    $dst_ptr$0 = $$1;
    break;
   } else if (!((($27|0) == 1))) {
    $dst_ptr$0 = 0;
    break;
   }
   $35 = HEAP32[$12>>2]|0;
   $36 = ($35|0)==(1);
   if (!($36)) {
    $37 = HEAP32[$15>>2]|0;
    $38 = ($37|0)==(0);
    if (!($38)) {
     $dst_ptr$0 = 0;
     break;
    }
    $39 = HEAP32[$13>>2]|0;
    $40 = ($39|0)==(1);
    if (!($40)) {
     $dst_ptr$0 = 0;
     break;
    }
    $41 = HEAP32[$14>>2]|0;
    $42 = ($41|0)==(1);
    if (!($42)) {
     $dst_ptr$0 = 0;
     break;
    }
   }
   $43 = HEAP32[$10>>2]|0;
   $dst_ptr$0 = $43;
  }
 } while(0);
 STACKTOP = sp;return ($dst_ptr$0|0);
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $does_dst_type_point_to_our_static_type$0$off0$lcssa = 0, $does_dst_type_point_to_our_static_type$0$off019 = 0, $does_dst_type_point_to_our_static_type$1$off0 = 0, $is_dst_type_derived_from_static_type$0$off021 = 0;
 var $is_dst_type_derived_from_static_type$1$off0 = 0, $is_dst_type_derived_from_static_type$2$off0 = 0, $is_dst_type_derived_from_static_type$2$off030 = 0, $is_dst_type_derived_from_static_type$2$off031 = 0, $offset_to_base$0$i = 0, $offset_to_base$0$i11 = 0, $offset_to_base$0$i13 = 0, $offset_to_base$0$i14 = 0, $offset_to_base$0$i9 = 0, $p$020 = 0, $p2$0 = 0, $p2$1 = 0, $p2$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($info) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 if ($2) {
  $3 = (($info) + 4|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)==($current_ptr|0);
  if (!($5)) {
   STACKTOP = sp;return;
  }
  $6 = (($info) + 28|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)==(1);
  if ($8) {
   STACKTOP = sp;return;
  }
  HEAP32[$6>>2] = $path_below;
  STACKTOP = sp;return;
 }
 $9 = HEAP32[$info>>2]|0;
 $10 = ($this|0)==($9|0);
 if ($10) {
  $11 = (($info) + 16|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($12|0)==($current_ptr|0);
  if (!($13)) {
   $14 = (($info) + 20|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = ($15|0)==($current_ptr|0);
   if (!($16)) {
    $19 = (($info) + 32|0);
    HEAP32[$19>>2] = $path_below;
    $20 = (($info) + 44|0);
    $21 = HEAP32[$20>>2]|0;
    $22 = ($21|0)==(4);
    if ($22) {
     STACKTOP = sp;return;
    }
    $23 = (($this) + 12|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = ((($this) + ($24<<3)|0) + 16|0);
    $26 = ($24|0)>(0);
    L19: do {
     if ($26) {
      $27 = (($this) + 16|0);
      $28 = (($info) + 52|0);
      $29 = (($info) + 53|0);
      $30 = (($info) + 54|0);
      $31 = (($this) + 8|0);
      $32 = (($info) + 24|0);
      $does_dst_type_point_to_our_static_type$0$off019 = 0;$is_dst_type_derived_from_static_type$0$off021 = 0;$p$020 = $27;
      L21: while(1) {
       HEAP8[$28>>0] = 0;
       HEAP8[$29>>0] = 0;
       $33 = (($p$020) + 4|0);
       $34 = HEAP32[$33>>2]|0;
       $35 = $34 >> 8;
       $36 = $34 & 1;
       $37 = ($36|0)==(0);
       if ($37) {
        $offset_to_base$0$i13 = $35;
       } else {
        $38 = HEAP32[$current_ptr>>2]|0;
        $39 = (($38) + ($35)|0);
        $40 = HEAP32[$39>>2]|0;
        $offset_to_base$0$i13 = $40;
       }
       $41 = HEAP32[$p$020>>2]|0;
       $42 = HEAP32[$41>>2]|0;
       $43 = (($42) + 20|0);
       $44 = HEAP32[$43>>2]|0;
       $45 = (($current_ptr) + ($offset_to_base$0$i13)|0);
       $46 = $34 >>> 1;
       $47 = $46 & 1;
       $48 = (2 - ($47))|0;
       FUNCTION_TABLE_viiiiii[$44 & 511]($41,$info,$current_ptr,$45,$48,$use_strcmp);
       $49 = HEAP8[$30>>0]|0;
       $50 = ($49<<24>>24)==(0);
       if (!($50)) {
        $does_dst_type_point_to_our_static_type$0$off0$lcssa = $does_dst_type_point_to_our_static_type$0$off019;$is_dst_type_derived_from_static_type$2$off0 = $is_dst_type_derived_from_static_type$0$off021;
        break;
       }
       $51 = HEAP8[$29>>0]|0;
       $52 = ($51<<24>>24)==(0);
       do {
        if ($52) {
         $does_dst_type_point_to_our_static_type$1$off0 = $does_dst_type_point_to_our_static_type$0$off019;$is_dst_type_derived_from_static_type$1$off0 = $is_dst_type_derived_from_static_type$0$off021;
        } else {
         $53 = HEAP8[$28>>0]|0;
         $54 = ($53<<24>>24)==(0);
         if ($54) {
          $60 = HEAP32[$31>>2]|0;
          $61 = $60 & 1;
          $62 = ($61|0)==(0);
          if ($62) {
           $does_dst_type_point_to_our_static_type$0$off0$lcssa = $does_dst_type_point_to_our_static_type$0$off019;$is_dst_type_derived_from_static_type$2$off0 = 1;
           break L21;
          } else {
           $does_dst_type_point_to_our_static_type$1$off0 = $does_dst_type_point_to_our_static_type$0$off019;$is_dst_type_derived_from_static_type$1$off0 = 1;
           break;
          }
         }
         $55 = HEAP32[$32>>2]|0;
         $56 = ($55|0)==(1);
         if ($56) {
          label = 27;
          break L19;
         }
         $57 = HEAP32[$31>>2]|0;
         $58 = $57 & 2;
         $59 = ($58|0)==(0);
         if ($59) {
          label = 27;
          break L19;
         } else {
          $does_dst_type_point_to_our_static_type$1$off0 = 1;$is_dst_type_derived_from_static_type$1$off0 = 1;
         }
        }
       } while(0);
       $63 = (($p$020) + 8|0);
       $64 = ($63>>>0)<($25>>>0);
       if ($64) {
        $does_dst_type_point_to_our_static_type$0$off019 = $does_dst_type_point_to_our_static_type$1$off0;$is_dst_type_derived_from_static_type$0$off021 = $is_dst_type_derived_from_static_type$1$off0;$p$020 = $63;
       } else {
        $does_dst_type_point_to_our_static_type$0$off0$lcssa = $does_dst_type_point_to_our_static_type$1$off0;$is_dst_type_derived_from_static_type$2$off0 = $is_dst_type_derived_from_static_type$1$off0;
        break;
       }
      }
      if ($does_dst_type_point_to_our_static_type$0$off0$lcssa) {
       $is_dst_type_derived_from_static_type$2$off031 = $is_dst_type_derived_from_static_type$2$off0;
       label = 26;
      } else {
       $is_dst_type_derived_from_static_type$2$off030 = $is_dst_type_derived_from_static_type$2$off0;
       label = 23;
      }
     } else {
      $is_dst_type_derived_from_static_type$2$off030 = 0;
      label = 23;
     }
    } while(0);
    if ((label|0) == 23) {
     HEAP32[$14>>2] = $current_ptr;
     $65 = (($info) + 40|0);
     $66 = HEAP32[$65>>2]|0;
     $67 = (($66) + 1)|0;
     HEAP32[$65>>2] = $67;
     $68 = (($info) + 36|0);
     $69 = HEAP32[$68>>2]|0;
     $70 = ($69|0)==(1);
     if ($70) {
      $71 = (($info) + 24|0);
      $72 = HEAP32[$71>>2]|0;
      $73 = ($72|0)==(2);
      if ($73) {
       $74 = (($info) + 54|0);
       HEAP8[$74>>0] = 1;
       if ($is_dst_type_derived_from_static_type$2$off030) {
        label = 27;
       } else {
        label = 28;
       }
      } else {
       $is_dst_type_derived_from_static_type$2$off031 = $is_dst_type_derived_from_static_type$2$off030;
       label = 26;
      }
     } else {
      $is_dst_type_derived_from_static_type$2$off031 = $is_dst_type_derived_from_static_type$2$off030;
      label = 26;
     }
    }
    if ((label|0) == 26) {
     if ($is_dst_type_derived_from_static_type$2$off031) {
      label = 27;
     } else {
      label = 28;
     }
    }
    if ((label|0) == 27) {
     HEAP32[$20>>2] = 3;
     STACKTOP = sp;return;
    }
    else if ((label|0) == 28) {
     HEAP32[$20>>2] = 4;
     STACKTOP = sp;return;
    }
   }
  }
  $17 = ($path_below|0)==(1);
  if (!($17)) {
   STACKTOP = sp;return;
  }
  $18 = (($info) + 32|0);
  HEAP32[$18>>2] = 1;
  STACKTOP = sp;return;
 }
 $75 = (($this) + 12|0);
 $76 = HEAP32[$75>>2]|0;
 $77 = ((($this) + ($76<<3)|0) + 16|0);
 $78 = (($this) + 20|0);
 $79 = HEAP32[$78>>2]|0;
 $80 = $79 >> 8;
 $81 = $79 & 1;
 $82 = ($81|0)==(0);
 if ($82) {
  $offset_to_base$0$i14 = $80;
 } else {
  $83 = HEAP32[$current_ptr>>2]|0;
  $84 = (($83) + ($80)|0);
  $85 = HEAP32[$84>>2]|0;
  $offset_to_base$0$i14 = $85;
 }
 $86 = (($this) + 16|0);
 $87 = HEAP32[$86>>2]|0;
 $88 = HEAP32[$87>>2]|0;
 $89 = (($88) + 24|0);
 $90 = HEAP32[$89>>2]|0;
 $91 = (($current_ptr) + ($offset_to_base$0$i14)|0);
 $92 = $79 & 2;
 $93 = ($92|0)!=(0);
 $94 = $93 ? $path_below : 2;
 FUNCTION_TABLE_viiiii[$90 & 511]($87,$info,$91,$94,$use_strcmp);
 $95 = (($this) + 24|0);
 $96 = ($76|0)>(1);
 if (!($96)) {
  STACKTOP = sp;return;
 }
 $97 = (($this) + 8|0);
 $98 = HEAP32[$97>>2]|0;
 $99 = $98 & 2;
 $100 = ($99|0)==(0);
 if ($100) {
  $101 = (($info) + 36|0);
  $102 = HEAP32[$101>>2]|0;
  $103 = ($102|0)==(1);
  if (!($103)) {
   $125 = $98 & 1;
   $126 = ($125|0)==(0);
   if ($126) {
    $129 = (($info) + 54|0);
    $p2$2 = $95;
    while(1) {
     $154 = HEAP8[$129>>0]|0;
     $155 = ($154<<24>>24)==(0);
     if (!($155)) {
      label = 53;
      break;
     }
     $156 = HEAP32[$101>>2]|0;
     $157 = ($156|0)==(1);
     if ($157) {
      label = 53;
      break;
     }
     $158 = (($p2$2) + 4|0);
     $159 = HEAP32[$158>>2]|0;
     $160 = $159 >> 8;
     $161 = $159 & 1;
     $162 = ($161|0)==(0);
     if ($162) {
      $offset_to_base$0$i = $160;
     } else {
      $163 = HEAP32[$current_ptr>>2]|0;
      $164 = (($163) + ($160)|0);
      $165 = HEAP32[$164>>2]|0;
      $offset_to_base$0$i = $165;
     }
     $166 = HEAP32[$p2$2>>2]|0;
     $167 = HEAP32[$166>>2]|0;
     $168 = (($167) + 24|0);
     $169 = HEAP32[$168>>2]|0;
     $170 = (($current_ptr) + ($offset_to_base$0$i)|0);
     $171 = $159 & 2;
     $172 = ($171|0)!=(0);
     $173 = $172 ? $path_below : 2;
     FUNCTION_TABLE_viiiii[$169 & 511]($166,$info,$170,$173,$use_strcmp);
     $174 = (($p2$2) + 8|0);
     $175 = ($174>>>0)<($77>>>0);
     if ($175) {
      $p2$2 = $174;
     } else {
      label = 53;
      break;
     }
    }
    if ((label|0) == 53) {
     STACKTOP = sp;return;
    }
   }
   $127 = (($info) + 24|0);
   $128 = (($info) + 54|0);
   $p2$1 = $95;
   while(1) {
    $130 = HEAP8[$128>>0]|0;
    $131 = ($130<<24>>24)==(0);
    if (!($131)) {
     label = 53;
     break;
    }
    $132 = HEAP32[$101>>2]|0;
    $133 = ($132|0)==(1);
    if ($133) {
     $134 = HEAP32[$127>>2]|0;
     $135 = ($134|0)==(1);
     if ($135) {
      label = 53;
      break;
     }
    }
    $136 = (($p2$1) + 4|0);
    $137 = HEAP32[$136>>2]|0;
    $138 = $137 >> 8;
    $139 = $137 & 1;
    $140 = ($139|0)==(0);
    if ($140) {
     $offset_to_base$0$i9 = $138;
    } else {
     $141 = HEAP32[$current_ptr>>2]|0;
     $142 = (($141) + ($138)|0);
     $143 = HEAP32[$142>>2]|0;
     $offset_to_base$0$i9 = $143;
    }
    $144 = HEAP32[$p2$1>>2]|0;
    $145 = HEAP32[$144>>2]|0;
    $146 = (($145) + 24|0);
    $147 = HEAP32[$146>>2]|0;
    $148 = (($current_ptr) + ($offset_to_base$0$i9)|0);
    $149 = $137 & 2;
    $150 = ($149|0)!=(0);
    $151 = $150 ? $path_below : 2;
    FUNCTION_TABLE_viiiii[$147 & 511]($144,$info,$148,$151,$use_strcmp);
    $152 = (($p2$1) + 8|0);
    $153 = ($152>>>0)<($77>>>0);
    if ($153) {
     $p2$1 = $152;
    } else {
     label = 53;
     break;
    }
   }
   if ((label|0) == 53) {
    STACKTOP = sp;return;
   }
  }
 }
 $104 = (($info) + 54|0);
 $p2$0 = $95;
 while(1) {
  $105 = HEAP8[$104>>0]|0;
  $106 = ($105<<24>>24)==(0);
  if (!($106)) {
   label = 53;
   break;
  }
  $107 = (($p2$0) + 4|0);
  $108 = HEAP32[$107>>2]|0;
  $109 = $108 >> 8;
  $110 = $108 & 1;
  $111 = ($110|0)==(0);
  if ($111) {
   $offset_to_base$0$i11 = $109;
  } else {
   $112 = HEAP32[$current_ptr>>2]|0;
   $113 = (($112) + ($109)|0);
   $114 = HEAP32[$113>>2]|0;
   $offset_to_base$0$i11 = $114;
  }
  $115 = HEAP32[$p2$0>>2]|0;
  $116 = HEAP32[$115>>2]|0;
  $117 = (($116) + 24|0);
  $118 = HEAP32[$117>>2]|0;
  $119 = (($current_ptr) + ($offset_to_base$0$i11)|0);
  $120 = $108 & 2;
  $121 = ($120|0)!=(0);
  $122 = $121 ? $path_below : 2;
  FUNCTION_TABLE_viiiii[$118 & 511]($115,$info,$119,$122,$use_strcmp);
  $123 = (($p2$0) + 8|0);
  $124 = ($123>>>0)<($77>>>0);
  if ($124) {
   $p2$0 = $123;
  } else {
   label = 53;
   break;
  }
 }
 if ((label|0) == 53) {
  STACKTOP = sp;return;
 }
}
function __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $is_dst_type_derived_from_static_type$0$off01 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($info) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 if ($2) {
  $3 = (($info) + 4|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)==($current_ptr|0);
  if (!($5)) {
   STACKTOP = sp;return;
  }
  $6 = (($info) + 28|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)==(1);
  if ($8) {
   STACKTOP = sp;return;
  }
  HEAP32[$6>>2] = $path_below;
  STACKTOP = sp;return;
 }
 $9 = HEAP32[$info>>2]|0;
 $10 = ($this|0)==($9|0);
 if (!($10)) {
  $43 = (($this) + 8|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = HEAP32[$44>>2]|0;
  $46 = (($45) + 24|0);
  $47 = HEAP32[$46>>2]|0;
  FUNCTION_TABLE_viiiii[$47 & 511]($44,$info,$current_ptr,$path_below,$use_strcmp);
  STACKTOP = sp;return;
 }
 $11 = (($info) + 16|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)==($current_ptr|0);
 if (!($13)) {
  $14 = (($info) + 20|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ($15|0)==($current_ptr|0);
  if (!($16)) {
   $19 = (($info) + 32|0);
   HEAP32[$19>>2] = $path_below;
   $20 = (($info) + 44|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = ($21|0)==(4);
   if ($22) {
    STACKTOP = sp;return;
   }
   $23 = (($info) + 52|0);
   HEAP8[$23>>0] = 0;
   $24 = (($info) + 53|0);
   HEAP8[$24>>0] = 0;
   $25 = (($this) + 8|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = HEAP32[$26>>2]|0;
   $28 = (($27) + 20|0);
   $29 = HEAP32[$28>>2]|0;
   FUNCTION_TABLE_viiiiii[$29 & 511]($26,$info,$current_ptr,$current_ptr,1,$use_strcmp);
   $30 = HEAP8[$24>>0]|0;
   $31 = ($30<<24>>24)==(0);
   if ($31) {
    $is_dst_type_derived_from_static_type$0$off01 = 0;
    label = 13;
   } else {
    $32 = HEAP8[$23>>0]|0;
    $not$ = ($32<<24>>24)==(0);
    if ($not$) {
     $is_dst_type_derived_from_static_type$0$off01 = 1;
     label = 13;
    }
   }
   do {
    if ((label|0) == 13) {
     HEAP32[$14>>2] = $current_ptr;
     $33 = (($info) + 40|0);
     $34 = HEAP32[$33>>2]|0;
     $35 = (($34) + 1)|0;
     HEAP32[$33>>2] = $35;
     $36 = (($info) + 36|0);
     $37 = HEAP32[$36>>2]|0;
     $38 = ($37|0)==(1);
     if ($38) {
      $39 = (($info) + 24|0);
      $40 = HEAP32[$39>>2]|0;
      $41 = ($40|0)==(2);
      if ($41) {
       $42 = (($info) + 54|0);
       HEAP8[$42>>0] = 1;
       if ($is_dst_type_derived_from_static_type$0$off01) {
        break;
       }
      } else {
       label = 16;
      }
     } else {
      label = 16;
     }
     if ((label|0) == 16) {
      if ($is_dst_type_derived_from_static_type$0$off01) {
       break;
      }
     }
     HEAP32[$20>>2] = 4;
     STACKTOP = sp;return;
    }
   } while(0);
   HEAP32[$20>>2] = 3;
   STACKTOP = sp;return;
  }
 }
 $17 = ($path_below|0)==(1);
 if (!($17)) {
  STACKTOP = sp;return;
 }
 $18 = (($info) + 32|0);
 HEAP32[$18>>2] = 1;
 STACKTOP = sp;return;
}
function __ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($info) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==($this|0);
 if ($2) {
  $3 = (($info) + 4|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)==($current_ptr|0);
  if (!($5)) {
   STACKTOP = sp;return;
  }
  $6 = (($info) + 28|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)==(1);
  if ($8) {
   STACKTOP = sp;return;
  }
  HEAP32[$6>>2] = $path_below;
  STACKTOP = sp;return;
 }
 $9 = HEAP32[$info>>2]|0;
 $10 = ($9|0)==($this|0);
 if (!($10)) {
  STACKTOP = sp;return;
 }
 $11 = (($info) + 16|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)==($current_ptr|0);
 if (!($13)) {
  $14 = (($info) + 20|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ($15|0)==($current_ptr|0);
  if (!($16)) {
   $19 = (($info) + 32|0);
   HEAP32[$19>>2] = $path_below;
   HEAP32[$14>>2] = $current_ptr;
   $20 = (($info) + 40|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = (($21) + 1)|0;
   HEAP32[$20>>2] = $22;
   $23 = (($info) + 36|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = ($24|0)==(1);
   if ($25) {
    $26 = (($info) + 24|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = ($27|0)==(2);
    if ($28) {
     $29 = (($info) + 54|0);
     HEAP8[$29>>0] = 1;
    }
   }
   $30 = (($info) + 44|0);
   HEAP32[$30>>2] = 4;
   STACKTOP = sp;return;
  }
 }
 $17 = ($path_below|0)==(1);
 if (!($17)) {
  STACKTOP = sp;return;
 }
 $18 = (($info) + 32|0);
 HEAP32[$18>>2] = 1;
 STACKTOP = sp;return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $offset_to_base$0$i = 0, $offset_to_base$0$i1 = 0, $or$cond$i = 0, $or$cond1$i = 0, $p$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($info) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 if (!($2)) {
  $32 = (($info) + 52|0);
  $33 = HEAP8[$32>>0]|0;
  $34 = (($info) + 53|0);
  $35 = HEAP8[$34>>0]|0;
  $36 = (($this) + 12|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = ((($this) + ($37<<3)|0) + 16|0);
  HEAP8[$32>>0] = 0;
  HEAP8[$34>>0] = 0;
  $39 = (($this) + 20|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = $40 >> 8;
  $42 = $40 & 1;
  $43 = ($42|0)==(0);
  if ($43) {
   $offset_to_base$0$i1 = $41;
  } else {
   $44 = HEAP32[$current_ptr>>2]|0;
   $45 = (($44) + ($41)|0);
   $46 = HEAP32[$45>>2]|0;
   $offset_to_base$0$i1 = $46;
  }
  $47 = (($this) + 16|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = HEAP32[$48>>2]|0;
  $50 = (($49) + 20|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = (($current_ptr) + ($offset_to_base$0$i1)|0);
  $53 = $40 & 2;
  $54 = ($53|0)!=(0);
  $55 = $54 ? $path_below : 2;
  FUNCTION_TABLE_viiiiii[$51 & 511]($48,$info,$dst_ptr,$52,$55,$use_strcmp);
  $56 = ($37|0)>(1);
  L6: do {
   if ($56) {
    $57 = (($this) + 24|0);
    $58 = (($info) + 24|0);
    $59 = (($this) + 8|0);
    $60 = (($info) + 54|0);
    $p$0 = $57;
    while(1) {
     $61 = HEAP8[$60>>0]|0;
     $62 = ($61<<24>>24)==(0);
     if (!($62)) {
      break L6;
     }
     $63 = HEAP8[$32>>0]|0;
     $64 = ($63<<24>>24)==(0);
     if ($64) {
      $70 = HEAP8[$34>>0]|0;
      $71 = ($70<<24>>24)==(0);
      if (!($71)) {
       $72 = HEAP32[$59>>2]|0;
       $73 = $72 & 1;
       $74 = ($73|0)==(0);
       if ($74) {
        break L6;
       }
      }
     } else {
      $65 = HEAP32[$58>>2]|0;
      $66 = ($65|0)==(1);
      if ($66) {
       break L6;
      }
      $67 = HEAP32[$59>>2]|0;
      $68 = $67 & 2;
      $69 = ($68|0)==(0);
      if ($69) {
       break L6;
      }
     }
     HEAP8[$32>>0] = 0;
     HEAP8[$34>>0] = 0;
     $75 = (($p$0) + 4|0);
     $76 = HEAP32[$75>>2]|0;
     $77 = $76 >> 8;
     $78 = $76 & 1;
     $79 = ($78|0)==(0);
     if ($79) {
      $offset_to_base$0$i = $77;
     } else {
      $80 = HEAP32[$current_ptr>>2]|0;
      $81 = (($80) + ($77)|0);
      $82 = HEAP32[$81>>2]|0;
      $offset_to_base$0$i = $82;
     }
     $83 = HEAP32[$p$0>>2]|0;
     $84 = HEAP32[$83>>2]|0;
     $85 = (($84) + 20|0);
     $86 = HEAP32[$85>>2]|0;
     $87 = (($current_ptr) + ($offset_to_base$0$i)|0);
     $88 = $76 & 2;
     $89 = ($88|0)!=(0);
     $90 = $89 ? $path_below : 2;
     FUNCTION_TABLE_viiiiii[$86 & 511]($83,$info,$dst_ptr,$87,$90,$use_strcmp);
     $91 = (($p$0) + 8|0);
     $92 = ($91>>>0)<($38>>>0);
     if ($92) {
      $p$0 = $91;
     } else {
      break;
     }
    }
   }
  } while(0);
  HEAP8[$32>>0] = $33;
  HEAP8[$34>>0] = $35;
  STACKTOP = sp;return;
 }
 $3 = (($info) + 53|0);
 HEAP8[$3>>0] = 1;
 $4 = (($info) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==($current_ptr|0);
 if (!($6)) {
  STACKTOP = sp;return;
 }
 $7 = (($info) + 52|0);
 HEAP8[$7>>0] = 1;
 $8 = (($info) + 16|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0|0);
 if ($10) {
  HEAP32[$8>>2] = $dst_ptr;
  $11 = (($info) + 24|0);
  HEAP32[$11>>2] = $path_below;
  $12 = (($info) + 36|0);
  HEAP32[$12>>2] = 1;
  $13 = (($info) + 48|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ($14|0)==(1);
  $16 = ($path_below|0)==(1);
  $or$cond$i = $15 & $16;
  if (!($or$cond$i)) {
   STACKTOP = sp;return;
  }
  $17 = (($info) + 54|0);
  HEAP8[$17>>0] = 1;
  STACKTOP = sp;return;
 }
 $18 = ($9|0)==($dst_ptr|0);
 if (!($18)) {
  $28 = (($info) + 36|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = (($29) + 1)|0;
  HEAP32[$28>>2] = $30;
  $31 = (($info) + 54|0);
  HEAP8[$31>>0] = 1;
  STACKTOP = sp;return;
 }
 $19 = (($info) + 24|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ($20|0)==(2);
 if ($21) {
  HEAP32[$19>>2] = $path_below;
  $26 = $path_below;
 } else {
  $26 = $20;
 }
 $22 = (($info) + 48|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ($23|0)==(1);
 $25 = ($26|0)==(1);
 $or$cond1$i = $24 & $25;
 if (!($or$cond1$i)) {
  STACKTOP = sp;return;
 }
 $27 = (($info) + 54|0);
 HEAP8[$27>>0] = 1;
 STACKTOP = sp;return;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond$i = 0, $or$cond1$i = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = (($info) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 if (!($2)) {
  $32 = (($this) + 8|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = HEAP32[$33>>2]|0;
  $35 = (($34) + 20|0);
  $36 = HEAP32[$35>>2]|0;
  FUNCTION_TABLE_viiiiii[$36 & 511]($33,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp);
  STACKTOP = sp;return;
 }
 $3 = (($info) + 53|0);
 HEAP8[$3>>0] = 1;
 $4 = (($info) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==($current_ptr|0);
 if (!($6)) {
  STACKTOP = sp;return;
 }
 $7 = (($info) + 52|0);
 HEAP8[$7>>0] = 1;
 $8 = (($info) + 16|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0|0);
 if ($10) {
  HEAP32[$8>>2] = $dst_ptr;
  $11 = (($info) + 24|0);
  HEAP32[$11>>2] = $path_below;
  $12 = (($info) + 36|0);
  HEAP32[$12>>2] = 1;
  $13 = (($info) + 48|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ($14|0)==(1);
  $16 = ($path_below|0)==(1);
  $or$cond$i = $15 & $16;
  if (!($or$cond$i)) {
   STACKTOP = sp;return;
  }
  $17 = (($info) + 54|0);
  HEAP8[$17>>0] = 1;
  STACKTOP = sp;return;
 }
 $18 = ($9|0)==($dst_ptr|0);
 if (!($18)) {
  $28 = (($info) + 36|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = (($29) + 1)|0;
  HEAP32[$28>>2] = $30;
  $31 = (($info) + 54|0);
  HEAP8[$31>>0] = 1;
  STACKTOP = sp;return;
 }
 $19 = (($info) + 24|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ($20|0)==(2);
 if ($21) {
  HEAP32[$19>>2] = $path_below;
  $26 = $path_below;
 } else {
  $26 = $20;
 }
 $22 = (($info) + 48|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ($23|0)==(1);
 $25 = ($26|0)==(1);
 $or$cond1$i = $24 & $25;
 if (!($or$cond1$i)) {
  STACKTOP = sp;return;
 }
 $27 = (($info) + 54|0);
 HEAP8[$27>>0] = 1;
 STACKTOP = sp;return;
}
function __ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond$i = 0, $or$cond1$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($info) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==($this|0);
 if (!($2)) {
  STACKTOP = sp;return;
 }
 $3 = (($info) + 53|0);
 HEAP8[$3>>0] = 1;
 $4 = (($info) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==($current_ptr|0);
 if (!($6)) {
  STACKTOP = sp;return;
 }
 $7 = (($info) + 52|0);
 HEAP8[$7>>0] = 1;
 $8 = (($info) + 16|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0|0);
 if ($10) {
  HEAP32[$8>>2] = $dst_ptr;
  $11 = (($info) + 24|0);
  HEAP32[$11>>2] = $path_below;
  $12 = (($info) + 36|0);
  HEAP32[$12>>2] = 1;
  $13 = (($info) + 48|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ($14|0)==(1);
  $16 = ($path_below|0)==(1);
  $or$cond$i = $15 & $16;
  if (!($or$cond$i)) {
   STACKTOP = sp;return;
  }
  $17 = (($info) + 54|0);
  HEAP8[$17>>0] = 1;
  STACKTOP = sp;return;
 }
 $18 = ($9|0)==($dst_ptr|0);
 if (!($18)) {
  $28 = (($info) + 36|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = (($29) + 1)|0;
  HEAP32[$28>>2] = $30;
  $31 = (($info) + 54|0);
  HEAP8[$31>>0] = 1;
  STACKTOP = sp;return;
 }
 $19 = (($info) + 24|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ($20|0)==(2);
 if ($21) {
  HEAP32[$19>>2] = $path_below;
  $26 = $path_below;
 } else {
  $26 = $20;
 }
 $22 = (($info) + 48|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ($23|0)==(1);
 $25 = ($26|0)==(1);
 $or$cond1$i = $24 & $25;
 if (!($or$cond1$i)) {
  STACKTOP = sp;return;
 }
 $27 = (($info) + 54|0);
 HEAP8[$27>>0] = 1;
 STACKTOP = sp;return;
}
function _malloc($bytes) {
 $bytes = $bytes|0;
 var $$$i = 0, $$3$i = 0, $$4$i = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i25 = 0, $$pre$i25$i = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i26$iZ2D = 0, $$pre$phi$i26Z2D = 0, $$pre$phi$iZ2D = 0, $$pre$phi58$i$iZ2D = 0, $$pre$phiZ2D = 0, $$pre57$i$i = 0, $$rsize$0$i = 0, $$rsize$3$i = 0, $$sum = 0, $$sum$i$i = 0, $$sum$i$i$i = 0;
 var $$sum$i14$i = 0, $$sum$i15$i = 0, $$sum$i18$i = 0, $$sum$i21$i = 0, $$sum$i2334 = 0, $$sum$i32 = 0, $$sum$i35 = 0, $$sum1 = 0, $$sum1$i = 0, $$sum1$i$i = 0, $$sum1$i16$i = 0, $$sum1$i22$i = 0, $$sum1$i24 = 0, $$sum10 = 0, $$sum10$i = 0, $$sum10$i$i = 0, $$sum10$pre$i$i = 0, $$sum107$i = 0, $$sum108$i = 0, $$sum109$i = 0;
 var $$sum11$i = 0, $$sum11$i$i = 0, $$sum11$i24$i = 0, $$sum110$i = 0, $$sum111$i = 0, $$sum1112 = 0, $$sum112$i = 0, $$sum113$i = 0, $$sum114$i = 0, $$sum115$i = 0, $$sum116$i = 0, $$sum117$i = 0, $$sum118$i = 0, $$sum119$i = 0, $$sum12$i = 0, $$sum12$i$i = 0, $$sum120$i = 0, $$sum13$i = 0, $$sum13$i$i = 0, $$sum14$i$i = 0;
 var $$sum14$pre$i = 0, $$sum15$i = 0, $$sum15$i$i = 0, $$sum16$i = 0, $$sum16$i$i = 0, $$sum17$i = 0, $$sum17$i$i = 0, $$sum18$i = 0, $$sum1819$i$i = 0, $$sum2 = 0, $$sum2$i = 0, $$sum2$i$i = 0, $$sum2$i$i$i = 0, $$sum2$i17$i = 0, $$sum2$i19$i = 0, $$sum2$i23$i = 0, $$sum2$pre$i = 0, $$sum20$i$i = 0, $$sum21$i$i = 0, $$sum22$i$i = 0;
 var $$sum23$i$i = 0, $$sum24$i$i = 0, $$sum25$i$i = 0, $$sum26$pre$i$i = 0, $$sum27$i$i = 0, $$sum28$i$i = 0, $$sum29$i$i = 0, $$sum3$i = 0, $$sum3$i$i = 0, $$sum3$i27 = 0, $$sum30$i$i = 0, $$sum3132$i$i = 0, $$sum34$i$i = 0, $$sum3536$i$i = 0, $$sum3738$i$i = 0, $$sum39$i$i = 0, $$sum4 = 0, $$sum4$i = 0, $$sum4$i28 = 0, $$sum40$i$i = 0;
 var $$sum41$i$i = 0, $$sum42$i$i = 0, $$sum5$i = 0, $$sum5$i$i = 0, $$sum56 = 0, $$sum6$i = 0, $$sum67$i$i = 0, $$sum7$i = 0, $$sum8$i = 0, $$sum8$pre = 0, $$sum9 = 0, $$sum9$i = 0, $$sum9$i$i = 0, $$tsize$1$i = 0, $$v$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0;
 var $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0;
 var $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0;
 var $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0;
 var $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0;
 var $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
 var $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0;
 var $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0;
 var $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0;
 var $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0;
 var $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0;
 var $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0;
 var $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0;
 var $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0;
 var $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0;
 var $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0;
 var $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0;
 var $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0;
 var $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0;
 var $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0;
 var $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0;
 var $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0;
 var $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0;
 var $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0;
 var $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0;
 var $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0;
 var $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0;
 var $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0;
 var $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0;
 var $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0;
 var $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0;
 var $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0;
 var $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0;
 var $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0;
 var $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0;
 var $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0;
 var $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0;
 var $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0;
 var $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0;
 var $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0;
 var $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0;
 var $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0;
 var $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0;
 var $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0;
 var $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0;
 var $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0;
 var $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0;
 var $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0;
 var $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0;
 var $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0;
 var $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0;
 var $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0;
 var $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0;
 var $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $F$0$i$i = 0, $F1$0$i = 0, $F4$0 = 0, $F4$0$i$i = 0, $F5$0$i = 0;
 var $I1$0$c$i$i = 0, $I1$0$i$i = 0, $I7$0$i = 0, $I7$0$i$i = 0, $K12$025$i = 0, $K2$014$i$i = 0, $K8$052$i$i = 0, $R$0$i = 0, $R$0$i$i = 0, $R$0$i18 = 0, $R$1$i = 0, $R$1$i$i = 0, $R$1$i20 = 0, $RP$0$i = 0, $RP$0$i$i = 0, $RP$0$i17 = 0, $T$0$lcssa$i = 0, $T$0$lcssa$i$i = 0, $T$0$lcssa$i28$i = 0, $T$013$i$i = 0;
 var $T$024$i = 0, $T$051$i$i = 0, $br$0$i = 0, $cond$i = 0, $cond$i$i = 0, $cond$i21 = 0, $exitcond$i$i = 0, $i$02$i$i = 0, $idx$0$i = 0, $mem$0 = 0, $nb$0 = 0, $notlhs$i = 0, $notrhs$i = 0, $oldfirst$0$i$i = 0, $or$cond$i = 0, $or$cond$i29 = 0, $or$cond1$i = 0, $or$cond10$i = 0, $or$cond19$i = 0, $or$cond2$i = 0;
 var $or$cond49$i = 0, $or$cond5$i = 0, $or$cond6$i = 0, $or$cond8$not$i = 0, $or$cond9$i = 0, $qsize$0$i$i = 0, $rsize$0$i = 0, $rsize$0$i15 = 0, $rsize$1$i = 0, $rsize$2$i = 0, $rsize$3$lcssa$i = 0, $rsize$329$i = 0, $rst$0$i = 0, $rst$1$i = 0, $sizebits$0$i = 0, $sp$0$i$i = 0, $sp$0$i$i$i = 0, $sp$075$i = 0, $sp$168$i = 0, $ssize$0$$i = 0;
 var $ssize$0$i = 0, $ssize$1$i = 0, $ssize$2$i = 0, $t$0$i = 0, $t$0$i14 = 0, $t$1$i = 0, $t$2$ph$i = 0, $t$2$v$3$i = 0, $t$228$i = 0, $tbase$0$i = 0, $tbase$247$i = 0, $tsize$0$i = 0, $tsize$0323841$i = 0, $tsize$1$i = 0, $tsize$246$i = 0, $v$0$i = 0, $v$0$i16 = 0, $v$1$i = 0, $v$2$i = 0, $v$3$lcssa$i = 0;
 var $v$330$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($bytes>>>0)<(245);
 do {
  if ($0) {
   $1 = ($bytes>>>0)<(11);
   if ($1) {
    $5 = 16;
   } else {
    $2 = (($bytes) + 11)|0;
    $3 = $2 & -8;
    $5 = $3;
   }
   $4 = $5 >>> 3;
   $6 = HEAP32[15152>>2]|0;
   $7 = $6 >>> $4;
   $8 = $7 & 3;
   $9 = ($8|0)==(0);
   if (!($9)) {
    $10 = $7 & 1;
    $11 = $10 ^ 1;
    $12 = (($11) + ($4))|0;
    $13 = $12 << 1;
    $14 = ((15152 + ($13<<2)|0) + 40|0);
    $$sum10 = (($13) + 2)|0;
    $15 = ((15152 + ($$sum10<<2)|0) + 40|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = (($16) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ($14|0)==($18|0);
    do {
     if ($19) {
      $20 = 1 << $12;
      $21 = $20 ^ -1;
      $22 = $6 & $21;
      HEAP32[15152>>2] = $22;
     } else {
      $23 = HEAP32[((15152 + 16|0))>>2]|0;
      $24 = ($18>>>0)<($23>>>0);
      if ($24) {
       _abort();
       // unreachable;
      }
      $25 = (($18) + 12|0);
      $26 = HEAP32[$25>>2]|0;
      $27 = ($26|0)==($16|0);
      if ($27) {
       HEAP32[$25>>2] = $14;
       HEAP32[$15>>2] = $18;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $28 = $12 << 3;
    $29 = $28 | 3;
    $30 = (($16) + 4|0);
    HEAP32[$30>>2] = $29;
    $$sum1112 = $28 | 4;
    $31 = (($16) + ($$sum1112)|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = $32 | 1;
    HEAP32[$31>>2] = $33;
    $mem$0 = $17;
    STACKTOP = sp;return ($mem$0|0);
   }
   $34 = HEAP32[((15152 + 8|0))>>2]|0;
   $35 = ($5>>>0)>($34>>>0);
   if ($35) {
    $36 = ($7|0)==(0);
    if (!($36)) {
     $37 = $7 << $4;
     $38 = 2 << $4;
     $39 = (0 - ($38))|0;
     $40 = $38 | $39;
     $41 = $37 & $40;
     $42 = (0 - ($41))|0;
     $43 = $41 & $42;
     $44 = (($43) + -1)|0;
     $45 = $44 >>> 12;
     $46 = $45 & 16;
     $47 = $44 >>> $46;
     $48 = $47 >>> 5;
     $49 = $48 & 8;
     $50 = $49 | $46;
     $51 = $47 >>> $49;
     $52 = $51 >>> 2;
     $53 = $52 & 4;
     $54 = $50 | $53;
     $55 = $51 >>> $53;
     $56 = $55 >>> 1;
     $57 = $56 & 2;
     $58 = $54 | $57;
     $59 = $55 >>> $57;
     $60 = $59 >>> 1;
     $61 = $60 & 1;
     $62 = $58 | $61;
     $63 = $59 >>> $61;
     $64 = (($62) + ($63))|0;
     $65 = $64 << 1;
     $66 = ((15152 + ($65<<2)|0) + 40|0);
     $$sum4 = (($65) + 2)|0;
     $67 = ((15152 + ($$sum4<<2)|0) + 40|0);
     $68 = HEAP32[$67>>2]|0;
     $69 = (($68) + 8|0);
     $70 = HEAP32[$69>>2]|0;
     $71 = ($66|0)==($70|0);
     do {
      if ($71) {
       $72 = 1 << $64;
       $73 = $72 ^ -1;
       $74 = $6 & $73;
       HEAP32[15152>>2] = $74;
      } else {
       $75 = HEAP32[((15152 + 16|0))>>2]|0;
       $76 = ($70>>>0)<($75>>>0);
       if ($76) {
        _abort();
        // unreachable;
       }
       $77 = (($70) + 12|0);
       $78 = HEAP32[$77>>2]|0;
       $79 = ($78|0)==($68|0);
       if ($79) {
        HEAP32[$77>>2] = $66;
        HEAP32[$67>>2] = $70;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $80 = $64 << 3;
     $81 = (($80) - ($5))|0;
     $82 = $5 | 3;
     $83 = (($68) + 4|0);
     HEAP32[$83>>2] = $82;
     $84 = (($68) + ($5)|0);
     $85 = $81 | 1;
     $$sum56 = $5 | 4;
     $86 = (($68) + ($$sum56)|0);
     HEAP32[$86>>2] = $85;
     $87 = (($68) + ($80)|0);
     HEAP32[$87>>2] = $81;
     $88 = HEAP32[((15152 + 8|0))>>2]|0;
     $89 = ($88|0)==(0);
     if (!($89)) {
      $90 = HEAP32[((15152 + 20|0))>>2]|0;
      $91 = $88 >>> 3;
      $92 = $91 << 1;
      $93 = ((15152 + ($92<<2)|0) + 40|0);
      $94 = HEAP32[15152>>2]|0;
      $95 = 1 << $91;
      $96 = $94 & $95;
      $97 = ($96|0)==(0);
      if ($97) {
       $98 = $94 | $95;
       HEAP32[15152>>2] = $98;
       $$sum8$pre = (($92) + 2)|0;
       $$pre = ((15152 + ($$sum8$pre<<2)|0) + 40|0);
       $$pre$phiZ2D = $$pre;$F4$0 = $93;
      } else {
       $$sum9 = (($92) + 2)|0;
       $99 = ((15152 + ($$sum9<<2)|0) + 40|0);
       $100 = HEAP32[$99>>2]|0;
       $101 = HEAP32[((15152 + 16|0))>>2]|0;
       $102 = ($100>>>0)<($101>>>0);
       if ($102) {
        _abort();
        // unreachable;
       } else {
        $$pre$phiZ2D = $99;$F4$0 = $100;
       }
      }
      HEAP32[$$pre$phiZ2D>>2] = $90;
      $103 = (($F4$0) + 12|0);
      HEAP32[$103>>2] = $90;
      $104 = (($90) + 8|0);
      HEAP32[$104>>2] = $F4$0;
      $105 = (($90) + 12|0);
      HEAP32[$105>>2] = $93;
     }
     HEAP32[((15152 + 8|0))>>2] = $81;
     HEAP32[((15152 + 20|0))>>2] = $84;
     $mem$0 = $69;
     STACKTOP = sp;return ($mem$0|0);
    }
    $106 = HEAP32[((15152 + 4|0))>>2]|0;
    $107 = ($106|0)==(0);
    if ($107) {
     $nb$0 = $5;
    } else {
     $108 = (0 - ($106))|0;
     $109 = $106 & $108;
     $110 = (($109) + -1)|0;
     $111 = $110 >>> 12;
     $112 = $111 & 16;
     $113 = $110 >>> $112;
     $114 = $113 >>> 5;
     $115 = $114 & 8;
     $116 = $115 | $112;
     $117 = $113 >>> $115;
     $118 = $117 >>> 2;
     $119 = $118 & 4;
     $120 = $116 | $119;
     $121 = $117 >>> $119;
     $122 = $121 >>> 1;
     $123 = $122 & 2;
     $124 = $120 | $123;
     $125 = $121 >>> $123;
     $126 = $125 >>> 1;
     $127 = $126 & 1;
     $128 = $124 | $127;
     $129 = $125 >>> $127;
     $130 = (($128) + ($129))|0;
     $131 = ((15152 + ($130<<2)|0) + 304|0);
     $132 = HEAP32[$131>>2]|0;
     $133 = (($132) + 4|0);
     $134 = HEAP32[$133>>2]|0;
     $135 = $134 & -8;
     $136 = (($135) - ($5))|0;
     $rsize$0$i = $136;$t$0$i = $132;$v$0$i = $132;
     while(1) {
      $137 = (($t$0$i) + 16|0);
      $138 = HEAP32[$137>>2]|0;
      $139 = ($138|0)==(0|0);
      if ($139) {
       $140 = (($t$0$i) + 20|0);
       $141 = HEAP32[$140>>2]|0;
       $142 = ($141|0)==(0|0);
       if ($142) {
        break;
       } else {
        $144 = $141;
       }
      } else {
       $144 = $138;
      }
      $143 = (($144) + 4|0);
      $145 = HEAP32[$143>>2]|0;
      $146 = $145 & -8;
      $147 = (($146) - ($5))|0;
      $148 = ($147>>>0)<($rsize$0$i>>>0);
      $$rsize$0$i = $148 ? $147 : $rsize$0$i;
      $$v$0$i = $148 ? $144 : $v$0$i;
      $rsize$0$i = $$rsize$0$i;$t$0$i = $144;$v$0$i = $$v$0$i;
     }
     $149 = HEAP32[((15152 + 16|0))>>2]|0;
     $150 = ($v$0$i>>>0)<($149>>>0);
     if ($150) {
      _abort();
      // unreachable;
     }
     $151 = (($v$0$i) + ($5)|0);
     $152 = ($v$0$i>>>0)<($151>>>0);
     if (!($152)) {
      _abort();
      // unreachable;
     }
     $153 = (($v$0$i) + 24|0);
     $154 = HEAP32[$153>>2]|0;
     $155 = (($v$0$i) + 12|0);
     $156 = HEAP32[$155>>2]|0;
     $157 = ($156|0)==($v$0$i|0);
     do {
      if ($157) {
       $167 = (($v$0$i) + 20|0);
       $168 = HEAP32[$167>>2]|0;
       $169 = ($168|0)==(0|0);
       if ($169) {
        $170 = (($v$0$i) + 16|0);
        $171 = HEAP32[$170>>2]|0;
        $172 = ($171|0)==(0|0);
        if ($172) {
         $R$1$i = 0;
         break;
        } else {
         $R$0$i = $171;$RP$0$i = $170;
        }
       } else {
        $R$0$i = $168;$RP$0$i = $167;
       }
       while(1) {
        $173 = (($R$0$i) + 20|0);
        $174 = HEAP32[$173>>2]|0;
        $175 = ($174|0)==(0|0);
        if (!($175)) {
         $R$0$i = $174;$RP$0$i = $173;
         continue;
        }
        $176 = (($R$0$i) + 16|0);
        $177 = HEAP32[$176>>2]|0;
        $178 = ($177|0)==(0|0);
        if ($178) {
         break;
        } else {
         $R$0$i = $177;$RP$0$i = $176;
        }
       }
       $179 = ($RP$0$i>>>0)<($149>>>0);
       if ($179) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$RP$0$i>>2] = 0;
        $R$1$i = $R$0$i;
        break;
       }
      } else {
       $158 = (($v$0$i) + 8|0);
       $159 = HEAP32[$158>>2]|0;
       $160 = ($159>>>0)<($149>>>0);
       if ($160) {
        _abort();
        // unreachable;
       }
       $161 = (($159) + 12|0);
       $162 = HEAP32[$161>>2]|0;
       $163 = ($162|0)==($v$0$i|0);
       if (!($163)) {
        _abort();
        // unreachable;
       }
       $164 = (($156) + 8|0);
       $165 = HEAP32[$164>>2]|0;
       $166 = ($165|0)==($v$0$i|0);
       if ($166) {
        HEAP32[$161>>2] = $156;
        HEAP32[$164>>2] = $159;
        $R$1$i = $156;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $180 = ($154|0)==(0|0);
     do {
      if (!($180)) {
       $181 = (($v$0$i) + 28|0);
       $182 = HEAP32[$181>>2]|0;
       $183 = ((15152 + ($182<<2)|0) + 304|0);
       $184 = HEAP32[$183>>2]|0;
       $185 = ($v$0$i|0)==($184|0);
       if ($185) {
        HEAP32[$183>>2] = $R$1$i;
        $cond$i = ($R$1$i|0)==(0|0);
        if ($cond$i) {
         $186 = 1 << $182;
         $187 = $186 ^ -1;
         $188 = HEAP32[((15152 + 4|0))>>2]|0;
         $189 = $188 & $187;
         HEAP32[((15152 + 4|0))>>2] = $189;
         break;
        }
       } else {
        $190 = HEAP32[((15152 + 16|0))>>2]|0;
        $191 = ($154>>>0)<($190>>>0);
        if ($191) {
         _abort();
         // unreachable;
        }
        $192 = (($154) + 16|0);
        $193 = HEAP32[$192>>2]|0;
        $194 = ($193|0)==($v$0$i|0);
        if ($194) {
         HEAP32[$192>>2] = $R$1$i;
        } else {
         $195 = (($154) + 20|0);
         HEAP32[$195>>2] = $R$1$i;
        }
        $196 = ($R$1$i|0)==(0|0);
        if ($196) {
         break;
        }
       }
       $197 = HEAP32[((15152 + 16|0))>>2]|0;
       $198 = ($R$1$i>>>0)<($197>>>0);
       if ($198) {
        _abort();
        // unreachable;
       }
       $199 = (($R$1$i) + 24|0);
       HEAP32[$199>>2] = $154;
       $200 = (($v$0$i) + 16|0);
       $201 = HEAP32[$200>>2]|0;
       $202 = ($201|0)==(0|0);
       do {
        if (!($202)) {
         $203 = HEAP32[((15152 + 16|0))>>2]|0;
         $204 = ($201>>>0)<($203>>>0);
         if ($204) {
          _abort();
          // unreachable;
         } else {
          $205 = (($R$1$i) + 16|0);
          HEAP32[$205>>2] = $201;
          $206 = (($201) + 24|0);
          HEAP32[$206>>2] = $R$1$i;
          break;
         }
        }
       } while(0);
       $207 = (($v$0$i) + 20|0);
       $208 = HEAP32[$207>>2]|0;
       $209 = ($208|0)==(0|0);
       if (!($209)) {
        $210 = HEAP32[((15152 + 16|0))>>2]|0;
        $211 = ($208>>>0)<($210>>>0);
        if ($211) {
         _abort();
         // unreachable;
        } else {
         $212 = (($R$1$i) + 20|0);
         HEAP32[$212>>2] = $208;
         $213 = (($208) + 24|0);
         HEAP32[$213>>2] = $R$1$i;
         break;
        }
       }
      }
     } while(0);
     $214 = ($rsize$0$i>>>0)<(16);
     if ($214) {
      $215 = (($rsize$0$i) + ($5))|0;
      $216 = $215 | 3;
      $217 = (($v$0$i) + 4|0);
      HEAP32[$217>>2] = $216;
      $$sum4$i = (($215) + 4)|0;
      $218 = (($v$0$i) + ($$sum4$i)|0);
      $219 = HEAP32[$218>>2]|0;
      $220 = $219 | 1;
      HEAP32[$218>>2] = $220;
     } else {
      $221 = $5 | 3;
      $222 = (($v$0$i) + 4|0);
      HEAP32[$222>>2] = $221;
      $223 = $rsize$0$i | 1;
      $$sum$i35 = $5 | 4;
      $224 = (($v$0$i) + ($$sum$i35)|0);
      HEAP32[$224>>2] = $223;
      $$sum1$i = (($rsize$0$i) + ($5))|0;
      $225 = (($v$0$i) + ($$sum1$i)|0);
      HEAP32[$225>>2] = $rsize$0$i;
      $226 = HEAP32[((15152 + 8|0))>>2]|0;
      $227 = ($226|0)==(0);
      if (!($227)) {
       $228 = HEAP32[((15152 + 20|0))>>2]|0;
       $229 = $226 >>> 3;
       $230 = $229 << 1;
       $231 = ((15152 + ($230<<2)|0) + 40|0);
       $232 = HEAP32[15152>>2]|0;
       $233 = 1 << $229;
       $234 = $232 & $233;
       $235 = ($234|0)==(0);
       if ($235) {
        $236 = $232 | $233;
        HEAP32[15152>>2] = $236;
        $$sum2$pre$i = (($230) + 2)|0;
        $$pre$i = ((15152 + ($$sum2$pre$i<<2)|0) + 40|0);
        $$pre$phi$iZ2D = $$pre$i;$F1$0$i = $231;
       } else {
        $$sum3$i = (($230) + 2)|0;
        $237 = ((15152 + ($$sum3$i<<2)|0) + 40|0);
        $238 = HEAP32[$237>>2]|0;
        $239 = HEAP32[((15152 + 16|0))>>2]|0;
        $240 = ($238>>>0)<($239>>>0);
        if ($240) {
         _abort();
         // unreachable;
        } else {
         $$pre$phi$iZ2D = $237;$F1$0$i = $238;
        }
       }
       HEAP32[$$pre$phi$iZ2D>>2] = $228;
       $241 = (($F1$0$i) + 12|0);
       HEAP32[$241>>2] = $228;
       $242 = (($228) + 8|0);
       HEAP32[$242>>2] = $F1$0$i;
       $243 = (($228) + 12|0);
       HEAP32[$243>>2] = $231;
      }
      HEAP32[((15152 + 8|0))>>2] = $rsize$0$i;
      HEAP32[((15152 + 20|0))>>2] = $151;
     }
     $244 = (($v$0$i) + 8|0);
     $mem$0 = $244;
     STACKTOP = sp;return ($mem$0|0);
    }
   } else {
    $nb$0 = $5;
   }
  } else {
   $245 = ($bytes>>>0)>(4294967231);
   if ($245) {
    $nb$0 = -1;
   } else {
    $246 = (($bytes) + 11)|0;
    $247 = $246 & -8;
    $248 = HEAP32[((15152 + 4|0))>>2]|0;
    $249 = ($248|0)==(0);
    if ($249) {
     $nb$0 = $247;
    } else {
     $250 = (0 - ($247))|0;
     $251 = $246 >>> 8;
     $252 = ($251|0)==(0);
     if ($252) {
      $idx$0$i = 0;
     } else {
      $253 = ($247>>>0)>(16777215);
      if ($253) {
       $idx$0$i = 31;
      } else {
       $254 = (($251) + 1048320)|0;
       $255 = $254 >>> 16;
       $256 = $255 & 8;
       $257 = $251 << $256;
       $258 = (($257) + 520192)|0;
       $259 = $258 >>> 16;
       $260 = $259 & 4;
       $261 = $260 | $256;
       $262 = $257 << $260;
       $263 = (($262) + 245760)|0;
       $264 = $263 >>> 16;
       $265 = $264 & 2;
       $266 = $261 | $265;
       $267 = (14 - ($266))|0;
       $268 = $262 << $265;
       $269 = $268 >>> 15;
       $270 = (($267) + ($269))|0;
       $271 = $270 << 1;
       $272 = (($270) + 7)|0;
       $273 = $247 >>> $272;
       $274 = $273 & 1;
       $275 = $274 | $271;
       $idx$0$i = $275;
      }
     }
     $276 = ((15152 + ($idx$0$i<<2)|0) + 304|0);
     $277 = HEAP32[$276>>2]|0;
     $278 = ($277|0)==(0|0);
     L126: do {
      if ($278) {
       $rsize$2$i = $250;$t$1$i = 0;$v$2$i = 0;
      } else {
       $279 = ($idx$0$i|0)==(31);
       if ($279) {
        $283 = 0;
       } else {
        $280 = $idx$0$i >>> 1;
        $281 = (25 - ($280))|0;
        $283 = $281;
       }
       $282 = $247 << $283;
       $rsize$0$i15 = $250;$rst$0$i = 0;$sizebits$0$i = $282;$t$0$i14 = $277;$v$0$i16 = 0;
       while(1) {
        $284 = (($t$0$i14) + 4|0);
        $285 = HEAP32[$284>>2]|0;
        $286 = $285 & -8;
        $287 = (($286) - ($247))|0;
        $288 = ($287>>>0)<($rsize$0$i15>>>0);
        if ($288) {
         $289 = ($286|0)==($247|0);
         if ($289) {
          $rsize$2$i = $287;$t$1$i = $t$0$i14;$v$2$i = $t$0$i14;
          break L126;
         } else {
          $rsize$1$i = $287;$v$1$i = $t$0$i14;
         }
        } else {
         $rsize$1$i = $rsize$0$i15;$v$1$i = $v$0$i16;
        }
        $290 = (($t$0$i14) + 20|0);
        $291 = HEAP32[$290>>2]|0;
        $292 = $sizebits$0$i >>> 31;
        $293 = ((($t$0$i14) + ($292<<2)|0) + 16|0);
        $294 = HEAP32[$293>>2]|0;
        $295 = ($291|0)==(0|0);
        $296 = ($291|0)==($294|0);
        $or$cond$i = $295 | $296;
        $rst$1$i = $or$cond$i ? $rst$0$i : $291;
        $297 = ($294|0)==(0|0);
        $298 = $sizebits$0$i << 1;
        if ($297) {
         $rsize$2$i = $rsize$1$i;$t$1$i = $rst$1$i;$v$2$i = $v$1$i;
         break;
        } else {
         $rsize$0$i15 = $rsize$1$i;$rst$0$i = $rst$1$i;$sizebits$0$i = $298;$t$0$i14 = $294;$v$0$i16 = $v$1$i;
        }
       }
      }
     } while(0);
     $299 = ($t$1$i|0)==(0|0);
     $300 = ($v$2$i|0)==(0|0);
     $or$cond19$i = $299 & $300;
     if ($or$cond19$i) {
      $301 = 2 << $idx$0$i;
      $302 = (0 - ($301))|0;
      $303 = $301 | $302;
      $304 = $248 & $303;
      $305 = ($304|0)==(0);
      if ($305) {
       $nb$0 = $247;
       break;
      }
      $306 = (0 - ($304))|0;
      $307 = $304 & $306;
      $308 = (($307) + -1)|0;
      $309 = $308 >>> 12;
      $310 = $309 & 16;
      $311 = $308 >>> $310;
      $312 = $311 >>> 5;
      $313 = $312 & 8;
      $314 = $313 | $310;
      $315 = $311 >>> $313;
      $316 = $315 >>> 2;
      $317 = $316 & 4;
      $318 = $314 | $317;
      $319 = $315 >>> $317;
      $320 = $319 >>> 1;
      $321 = $320 & 2;
      $322 = $318 | $321;
      $323 = $319 >>> $321;
      $324 = $323 >>> 1;
      $325 = $324 & 1;
      $326 = $322 | $325;
      $327 = $323 >>> $325;
      $328 = (($326) + ($327))|0;
      $329 = ((15152 + ($328<<2)|0) + 304|0);
      $330 = HEAP32[$329>>2]|0;
      $t$2$ph$i = $330;
     } else {
      $t$2$ph$i = $t$1$i;
     }
     $331 = ($t$2$ph$i|0)==(0|0);
     if ($331) {
      $rsize$3$lcssa$i = $rsize$2$i;$v$3$lcssa$i = $v$2$i;
     } else {
      $rsize$329$i = $rsize$2$i;$t$228$i = $t$2$ph$i;$v$330$i = $v$2$i;
      while(1) {
       $332 = (($t$228$i) + 4|0);
       $333 = HEAP32[$332>>2]|0;
       $334 = $333 & -8;
       $335 = (($334) - ($247))|0;
       $336 = ($335>>>0)<($rsize$329$i>>>0);
       $$rsize$3$i = $336 ? $335 : $rsize$329$i;
       $t$2$v$3$i = $336 ? $t$228$i : $v$330$i;
       $337 = (($t$228$i) + 16|0);
       $338 = HEAP32[$337>>2]|0;
       $339 = ($338|0)==(0|0);
       if (!($339)) {
        $rsize$329$i = $$rsize$3$i;$t$228$i = $338;$v$330$i = $t$2$v$3$i;
        continue;
       }
       $340 = (($t$228$i) + 20|0);
       $341 = HEAP32[$340>>2]|0;
       $342 = ($341|0)==(0|0);
       if ($342) {
        $rsize$3$lcssa$i = $$rsize$3$i;$v$3$lcssa$i = $t$2$v$3$i;
        break;
       } else {
        $rsize$329$i = $$rsize$3$i;$t$228$i = $341;$v$330$i = $t$2$v$3$i;
       }
      }
     }
     $343 = ($v$3$lcssa$i|0)==(0|0);
     if ($343) {
      $nb$0 = $247;
     } else {
      $344 = HEAP32[((15152 + 8|0))>>2]|0;
      $345 = (($344) - ($247))|0;
      $346 = ($rsize$3$lcssa$i>>>0)<($345>>>0);
      if ($346) {
       $347 = HEAP32[((15152 + 16|0))>>2]|0;
       $348 = ($v$3$lcssa$i>>>0)<($347>>>0);
       if ($348) {
        _abort();
        // unreachable;
       }
       $349 = (($v$3$lcssa$i) + ($247)|0);
       $350 = ($v$3$lcssa$i>>>0)<($349>>>0);
       if (!($350)) {
        _abort();
        // unreachable;
       }
       $351 = (($v$3$lcssa$i) + 24|0);
       $352 = HEAP32[$351>>2]|0;
       $353 = (($v$3$lcssa$i) + 12|0);
       $354 = HEAP32[$353>>2]|0;
       $355 = ($354|0)==($v$3$lcssa$i|0);
       do {
        if ($355) {
         $365 = (($v$3$lcssa$i) + 20|0);
         $366 = HEAP32[$365>>2]|0;
         $367 = ($366|0)==(0|0);
         if ($367) {
          $368 = (($v$3$lcssa$i) + 16|0);
          $369 = HEAP32[$368>>2]|0;
          $370 = ($369|0)==(0|0);
          if ($370) {
           $R$1$i20 = 0;
           break;
          } else {
           $R$0$i18 = $369;$RP$0$i17 = $368;
          }
         } else {
          $R$0$i18 = $366;$RP$0$i17 = $365;
         }
         while(1) {
          $371 = (($R$0$i18) + 20|0);
          $372 = HEAP32[$371>>2]|0;
          $373 = ($372|0)==(0|0);
          if (!($373)) {
           $R$0$i18 = $372;$RP$0$i17 = $371;
           continue;
          }
          $374 = (($R$0$i18) + 16|0);
          $375 = HEAP32[$374>>2]|0;
          $376 = ($375|0)==(0|0);
          if ($376) {
           break;
          } else {
           $R$0$i18 = $375;$RP$0$i17 = $374;
          }
         }
         $377 = ($RP$0$i17>>>0)<($347>>>0);
         if ($377) {
          _abort();
          // unreachable;
         } else {
          HEAP32[$RP$0$i17>>2] = 0;
          $R$1$i20 = $R$0$i18;
          break;
         }
        } else {
         $356 = (($v$3$lcssa$i) + 8|0);
         $357 = HEAP32[$356>>2]|0;
         $358 = ($357>>>0)<($347>>>0);
         if ($358) {
          _abort();
          // unreachable;
         }
         $359 = (($357) + 12|0);
         $360 = HEAP32[$359>>2]|0;
         $361 = ($360|0)==($v$3$lcssa$i|0);
         if (!($361)) {
          _abort();
          // unreachable;
         }
         $362 = (($354) + 8|0);
         $363 = HEAP32[$362>>2]|0;
         $364 = ($363|0)==($v$3$lcssa$i|0);
         if ($364) {
          HEAP32[$359>>2] = $354;
          HEAP32[$362>>2] = $357;
          $R$1$i20 = $354;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       } while(0);
       $378 = ($352|0)==(0|0);
       do {
        if (!($378)) {
         $379 = (($v$3$lcssa$i) + 28|0);
         $380 = HEAP32[$379>>2]|0;
         $381 = ((15152 + ($380<<2)|0) + 304|0);
         $382 = HEAP32[$381>>2]|0;
         $383 = ($v$3$lcssa$i|0)==($382|0);
         if ($383) {
          HEAP32[$381>>2] = $R$1$i20;
          $cond$i21 = ($R$1$i20|0)==(0|0);
          if ($cond$i21) {
           $384 = 1 << $380;
           $385 = $384 ^ -1;
           $386 = HEAP32[((15152 + 4|0))>>2]|0;
           $387 = $386 & $385;
           HEAP32[((15152 + 4|0))>>2] = $387;
           break;
          }
         } else {
          $388 = HEAP32[((15152 + 16|0))>>2]|0;
          $389 = ($352>>>0)<($388>>>0);
          if ($389) {
           _abort();
           // unreachable;
          }
          $390 = (($352) + 16|0);
          $391 = HEAP32[$390>>2]|0;
          $392 = ($391|0)==($v$3$lcssa$i|0);
          if ($392) {
           HEAP32[$390>>2] = $R$1$i20;
          } else {
           $393 = (($352) + 20|0);
           HEAP32[$393>>2] = $R$1$i20;
          }
          $394 = ($R$1$i20|0)==(0|0);
          if ($394) {
           break;
          }
         }
         $395 = HEAP32[((15152 + 16|0))>>2]|0;
         $396 = ($R$1$i20>>>0)<($395>>>0);
         if ($396) {
          _abort();
          // unreachable;
         }
         $397 = (($R$1$i20) + 24|0);
         HEAP32[$397>>2] = $352;
         $398 = (($v$3$lcssa$i) + 16|0);
         $399 = HEAP32[$398>>2]|0;
         $400 = ($399|0)==(0|0);
         do {
          if (!($400)) {
           $401 = HEAP32[((15152 + 16|0))>>2]|0;
           $402 = ($399>>>0)<($401>>>0);
           if ($402) {
            _abort();
            // unreachable;
           } else {
            $403 = (($R$1$i20) + 16|0);
            HEAP32[$403>>2] = $399;
            $404 = (($399) + 24|0);
            HEAP32[$404>>2] = $R$1$i20;
            break;
           }
          }
         } while(0);
         $405 = (($v$3$lcssa$i) + 20|0);
         $406 = HEAP32[$405>>2]|0;
         $407 = ($406|0)==(0|0);
         if (!($407)) {
          $408 = HEAP32[((15152 + 16|0))>>2]|0;
          $409 = ($406>>>0)<($408>>>0);
          if ($409) {
           _abort();
           // unreachable;
          } else {
           $410 = (($R$1$i20) + 20|0);
           HEAP32[$410>>2] = $406;
           $411 = (($406) + 24|0);
           HEAP32[$411>>2] = $R$1$i20;
           break;
          }
         }
        }
       } while(0);
       $412 = ($rsize$3$lcssa$i>>>0)<(16);
       L204: do {
        if ($412) {
         $413 = (($rsize$3$lcssa$i) + ($247))|0;
         $414 = $413 | 3;
         $415 = (($v$3$lcssa$i) + 4|0);
         HEAP32[$415>>2] = $414;
         $$sum18$i = (($413) + 4)|0;
         $416 = (($v$3$lcssa$i) + ($$sum18$i)|0);
         $417 = HEAP32[$416>>2]|0;
         $418 = $417 | 1;
         HEAP32[$416>>2] = $418;
        } else {
         $419 = $247 | 3;
         $420 = (($v$3$lcssa$i) + 4|0);
         HEAP32[$420>>2] = $419;
         $421 = $rsize$3$lcssa$i | 1;
         $$sum$i2334 = $247 | 4;
         $422 = (($v$3$lcssa$i) + ($$sum$i2334)|0);
         HEAP32[$422>>2] = $421;
         $$sum1$i24 = (($rsize$3$lcssa$i) + ($247))|0;
         $423 = (($v$3$lcssa$i) + ($$sum1$i24)|0);
         HEAP32[$423>>2] = $rsize$3$lcssa$i;
         $424 = $rsize$3$lcssa$i >>> 3;
         $425 = ($rsize$3$lcssa$i>>>0)<(256);
         if ($425) {
          $426 = $424 << 1;
          $427 = ((15152 + ($426<<2)|0) + 40|0);
          $428 = HEAP32[15152>>2]|0;
          $429 = 1 << $424;
          $430 = $428 & $429;
          $431 = ($430|0)==(0);
          do {
           if ($431) {
            $432 = $428 | $429;
            HEAP32[15152>>2] = $432;
            $$sum14$pre$i = (($426) + 2)|0;
            $$pre$i25 = ((15152 + ($$sum14$pre$i<<2)|0) + 40|0);
            $$pre$phi$i26Z2D = $$pre$i25;$F5$0$i = $427;
           } else {
            $$sum17$i = (($426) + 2)|0;
            $433 = ((15152 + ($$sum17$i<<2)|0) + 40|0);
            $434 = HEAP32[$433>>2]|0;
            $435 = HEAP32[((15152 + 16|0))>>2]|0;
            $436 = ($434>>>0)<($435>>>0);
            if (!($436)) {
             $$pre$phi$i26Z2D = $433;$F5$0$i = $434;
             break;
            }
            _abort();
            // unreachable;
           }
          } while(0);
          HEAP32[$$pre$phi$i26Z2D>>2] = $349;
          $437 = (($F5$0$i) + 12|0);
          HEAP32[$437>>2] = $349;
          $$sum15$i = (($247) + 8)|0;
          $438 = (($v$3$lcssa$i) + ($$sum15$i)|0);
          HEAP32[$438>>2] = $F5$0$i;
          $$sum16$i = (($247) + 12)|0;
          $439 = (($v$3$lcssa$i) + ($$sum16$i)|0);
          HEAP32[$439>>2] = $427;
          break;
         }
         $440 = $rsize$3$lcssa$i >>> 8;
         $441 = ($440|0)==(0);
         if ($441) {
          $I7$0$i = 0;
         } else {
          $442 = ($rsize$3$lcssa$i>>>0)>(16777215);
          if ($442) {
           $I7$0$i = 31;
          } else {
           $443 = (($440) + 1048320)|0;
           $444 = $443 >>> 16;
           $445 = $444 & 8;
           $446 = $440 << $445;
           $447 = (($446) + 520192)|0;
           $448 = $447 >>> 16;
           $449 = $448 & 4;
           $450 = $449 | $445;
           $451 = $446 << $449;
           $452 = (($451) + 245760)|0;
           $453 = $452 >>> 16;
           $454 = $453 & 2;
           $455 = $450 | $454;
           $456 = (14 - ($455))|0;
           $457 = $451 << $454;
           $458 = $457 >>> 15;
           $459 = (($456) + ($458))|0;
           $460 = $459 << 1;
           $461 = (($459) + 7)|0;
           $462 = $rsize$3$lcssa$i >>> $461;
           $463 = $462 & 1;
           $464 = $463 | $460;
           $I7$0$i = $464;
          }
         }
         $465 = ((15152 + ($I7$0$i<<2)|0) + 304|0);
         $$sum2$i = (($247) + 28)|0;
         $466 = (($v$3$lcssa$i) + ($$sum2$i)|0);
         HEAP32[$466>>2] = $I7$0$i;
         $$sum3$i27 = (($247) + 16)|0;
         $467 = (($v$3$lcssa$i) + ($$sum3$i27)|0);
         $$sum4$i28 = (($247) + 20)|0;
         $468 = (($v$3$lcssa$i) + ($$sum4$i28)|0);
         HEAP32[$468>>2] = 0;
         HEAP32[$467>>2] = 0;
         $469 = HEAP32[((15152 + 4|0))>>2]|0;
         $470 = 1 << $I7$0$i;
         $471 = $469 & $470;
         $472 = ($471|0)==(0);
         if ($472) {
          $473 = $469 | $470;
          HEAP32[((15152 + 4|0))>>2] = $473;
          HEAP32[$465>>2] = $349;
          $$sum5$i = (($247) + 24)|0;
          $474 = (($v$3$lcssa$i) + ($$sum5$i)|0);
          HEAP32[$474>>2] = $465;
          $$sum6$i = (($247) + 12)|0;
          $475 = (($v$3$lcssa$i) + ($$sum6$i)|0);
          HEAP32[$475>>2] = $349;
          $$sum7$i = (($247) + 8)|0;
          $476 = (($v$3$lcssa$i) + ($$sum7$i)|0);
          HEAP32[$476>>2] = $349;
          break;
         }
         $477 = HEAP32[$465>>2]|0;
         $478 = ($I7$0$i|0)==(31);
         if ($478) {
          $486 = 0;
         } else {
          $479 = $I7$0$i >>> 1;
          $480 = (25 - ($479))|0;
          $486 = $480;
         }
         $481 = (($477) + 4|0);
         $482 = HEAP32[$481>>2]|0;
         $483 = $482 & -8;
         $484 = ($483|0)==($rsize$3$lcssa$i|0);
         L225: do {
          if ($484) {
           $T$0$lcssa$i = $477;
          } else {
           $485 = $rsize$3$lcssa$i << $486;
           $K12$025$i = $485;$T$024$i = $477;
           while(1) {
            $493 = $K12$025$i >>> 31;
            $494 = ((($T$024$i) + ($493<<2)|0) + 16|0);
            $489 = HEAP32[$494>>2]|0;
            $495 = ($489|0)==(0|0);
            if ($495) {
             break;
            }
            $487 = $K12$025$i << 1;
            $488 = (($489) + 4|0);
            $490 = HEAP32[$488>>2]|0;
            $491 = $490 & -8;
            $492 = ($491|0)==($rsize$3$lcssa$i|0);
            if ($492) {
             $T$0$lcssa$i = $489;
             break L225;
            } else {
             $K12$025$i = $487;$T$024$i = $489;
            }
           }
           $496 = HEAP32[((15152 + 16|0))>>2]|0;
           $497 = ($494>>>0)<($496>>>0);
           if ($497) {
            _abort();
            // unreachable;
           } else {
            HEAP32[$494>>2] = $349;
            $$sum11$i = (($247) + 24)|0;
            $498 = (($v$3$lcssa$i) + ($$sum11$i)|0);
            HEAP32[$498>>2] = $T$024$i;
            $$sum12$i = (($247) + 12)|0;
            $499 = (($v$3$lcssa$i) + ($$sum12$i)|0);
            HEAP32[$499>>2] = $349;
            $$sum13$i = (($247) + 8)|0;
            $500 = (($v$3$lcssa$i) + ($$sum13$i)|0);
            HEAP32[$500>>2] = $349;
            break L204;
           }
          }
         } while(0);
         $501 = (($T$0$lcssa$i) + 8|0);
         $502 = HEAP32[$501>>2]|0;
         $503 = HEAP32[((15152 + 16|0))>>2]|0;
         $504 = ($T$0$lcssa$i>>>0)<($503>>>0);
         if ($504) {
          _abort();
          // unreachable;
         }
         $505 = ($502>>>0)<($503>>>0);
         if ($505) {
          _abort();
          // unreachable;
         } else {
          $506 = (($502) + 12|0);
          HEAP32[$506>>2] = $349;
          HEAP32[$501>>2] = $349;
          $$sum8$i = (($247) + 8)|0;
          $507 = (($v$3$lcssa$i) + ($$sum8$i)|0);
          HEAP32[$507>>2] = $502;
          $$sum9$i = (($247) + 12)|0;
          $508 = (($v$3$lcssa$i) + ($$sum9$i)|0);
          HEAP32[$508>>2] = $T$0$lcssa$i;
          $$sum10$i = (($247) + 24)|0;
          $509 = (($v$3$lcssa$i) + ($$sum10$i)|0);
          HEAP32[$509>>2] = 0;
          break;
         }
        }
       } while(0);
       $510 = (($v$3$lcssa$i) + 8|0);
       $mem$0 = $510;
       STACKTOP = sp;return ($mem$0|0);
      } else {
       $nb$0 = $247;
      }
     }
    }
   }
  }
 } while(0);
 $511 = HEAP32[((15152 + 8|0))>>2]|0;
 $512 = ($nb$0>>>0)>($511>>>0);
 if (!($512)) {
  $513 = (($511) - ($nb$0))|0;
  $514 = HEAP32[((15152 + 20|0))>>2]|0;
  $515 = ($513>>>0)>(15);
  if ($515) {
   $516 = (($514) + ($nb$0)|0);
   HEAP32[((15152 + 20|0))>>2] = $516;
   HEAP32[((15152 + 8|0))>>2] = $513;
   $517 = $513 | 1;
   $$sum2 = (($nb$0) + 4)|0;
   $518 = (($514) + ($$sum2)|0);
   HEAP32[$518>>2] = $517;
   $519 = (($514) + ($511)|0);
   HEAP32[$519>>2] = $513;
   $520 = $nb$0 | 3;
   $521 = (($514) + 4|0);
   HEAP32[$521>>2] = $520;
  } else {
   HEAP32[((15152 + 8|0))>>2] = 0;
   HEAP32[((15152 + 20|0))>>2] = 0;
   $522 = $511 | 3;
   $523 = (($514) + 4|0);
   HEAP32[$523>>2] = $522;
   $$sum1 = (($511) + 4)|0;
   $524 = (($514) + ($$sum1)|0);
   $525 = HEAP32[$524>>2]|0;
   $526 = $525 | 1;
   HEAP32[$524>>2] = $526;
  }
  $527 = (($514) + 8|0);
  $mem$0 = $527;
  STACKTOP = sp;return ($mem$0|0);
 }
 $528 = HEAP32[((15152 + 12|0))>>2]|0;
 $529 = ($nb$0>>>0)<($528>>>0);
 if ($529) {
  $530 = (($528) - ($nb$0))|0;
  HEAP32[((15152 + 12|0))>>2] = $530;
  $531 = HEAP32[((15152 + 24|0))>>2]|0;
  $532 = (($531) + ($nb$0)|0);
  HEAP32[((15152 + 24|0))>>2] = $532;
  $533 = $530 | 1;
  $$sum = (($nb$0) + 4)|0;
  $534 = (($531) + ($$sum)|0);
  HEAP32[$534>>2] = $533;
  $535 = $nb$0 | 3;
  $536 = (($531) + 4|0);
  HEAP32[$536>>2] = $535;
  $537 = (($531) + 8|0);
  $mem$0 = $537;
  STACKTOP = sp;return ($mem$0|0);
 }
 $538 = HEAP32[15624>>2]|0;
 $539 = ($538|0)==(0);
 do {
  if ($539) {
   $540 = (_sysconf(30)|0);
   $541 = (($540) + -1)|0;
   $542 = $541 & $540;
   $543 = ($542|0)==(0);
   if ($543) {
    HEAP32[((15624 + 8|0))>>2] = $540;
    HEAP32[((15624 + 4|0))>>2] = $540;
    HEAP32[((15624 + 12|0))>>2] = -1;
    HEAP32[((15624 + 16|0))>>2] = -1;
    HEAP32[((15624 + 20|0))>>2] = 0;
    HEAP32[((15152 + 444|0))>>2] = 0;
    $544 = (_time((0|0))|0);
    $545 = $544 & -16;
    $546 = $545 ^ 1431655768;
    HEAP32[15624>>2] = $546;
    break;
   } else {
    _abort();
    // unreachable;
   }
  }
 } while(0);
 $547 = (($nb$0) + 48)|0;
 $548 = HEAP32[((15624 + 8|0))>>2]|0;
 $549 = (($nb$0) + 47)|0;
 $550 = (($548) + ($549))|0;
 $551 = (0 - ($548))|0;
 $552 = $550 & $551;
 $553 = ($552>>>0)>($nb$0>>>0);
 if (!($553)) {
  $mem$0 = 0;
  STACKTOP = sp;return ($mem$0|0);
 }
 $554 = HEAP32[((15152 + 440|0))>>2]|0;
 $555 = ($554|0)==(0);
 if (!($555)) {
  $556 = HEAP32[((15152 + 432|0))>>2]|0;
  $557 = (($556) + ($552))|0;
  $558 = ($557>>>0)<=($556>>>0);
  $559 = ($557>>>0)>($554>>>0);
  $or$cond1$i = $558 | $559;
  if ($or$cond1$i) {
   $mem$0 = 0;
   STACKTOP = sp;return ($mem$0|0);
  }
 }
 $560 = HEAP32[((15152 + 444|0))>>2]|0;
 $561 = $560 & 4;
 $562 = ($561|0)==(0);
 L269: do {
  if ($562) {
   $563 = HEAP32[((15152 + 24|0))>>2]|0;
   $564 = ($563|0)==(0|0);
   L271: do {
    if ($564) {
     label = 182;
    } else {
     $sp$0$i$i = ((15152 + 448|0));
     while(1) {
      $565 = HEAP32[$sp$0$i$i>>2]|0;
      $566 = ($565>>>0)>($563>>>0);
      if (!($566)) {
       $567 = (($sp$0$i$i) + 4|0);
       $568 = HEAP32[$567>>2]|0;
       $569 = (($565) + ($568)|0);
       $570 = ($569>>>0)>($563>>>0);
       if ($570) {
        break;
       }
      }
      $571 = (($sp$0$i$i) + 8|0);
      $572 = HEAP32[$571>>2]|0;
      $573 = ($572|0)==(0|0);
      if ($573) {
       label = 182;
       break L271;
      } else {
       $sp$0$i$i = $572;
      }
     }
     $574 = ($sp$0$i$i|0)==(0|0);
     if ($574) {
      label = 182;
     } else {
      $597 = HEAP32[((15152 + 12|0))>>2]|0;
      $598 = (($550) - ($597))|0;
      $599 = $598 & $551;
      $600 = ($599>>>0)<(2147483647);
      if ($600) {
       $601 = (_sbrk(($599|0))|0);
       $602 = HEAP32[$sp$0$i$i>>2]|0;
       $603 = HEAP32[$567>>2]|0;
       $604 = (($602) + ($603)|0);
       $605 = ($601|0)==($604|0);
       $$3$i = $605 ? $599 : 0;
       $$4$i = $605 ? $601 : (-1);
       $br$0$i = $601;$ssize$1$i = $599;$tbase$0$i = $$4$i;$tsize$0$i = $$3$i;
       label = 191;
      } else {
       $tsize$0323841$i = 0;
      }
     }
    }
   } while(0);
   do {
    if ((label|0) == 182) {
     $575 = (_sbrk(0)|0);
     $576 = ($575|0)==((-1)|0);
     if ($576) {
      $tsize$0323841$i = 0;
     } else {
      $577 = $575;
      $578 = HEAP32[((15624 + 4|0))>>2]|0;
      $579 = (($578) + -1)|0;
      $580 = $579 & $577;
      $581 = ($580|0)==(0);
      if ($581) {
       $ssize$0$i = $552;
      } else {
       $582 = (($579) + ($577))|0;
       $583 = (0 - ($578))|0;
       $584 = $582 & $583;
       $585 = (($552) - ($577))|0;
       $586 = (($585) + ($584))|0;
       $ssize$0$i = $586;
      }
      $587 = HEAP32[((15152 + 432|0))>>2]|0;
      $588 = (($587) + ($ssize$0$i))|0;
      $589 = ($ssize$0$i>>>0)>($nb$0>>>0);
      $590 = ($ssize$0$i>>>0)<(2147483647);
      $or$cond$i29 = $589 & $590;
      if ($or$cond$i29) {
       $591 = HEAP32[((15152 + 440|0))>>2]|0;
       $592 = ($591|0)==(0);
       if (!($592)) {
        $593 = ($588>>>0)<=($587>>>0);
        $594 = ($588>>>0)>($591>>>0);
        $or$cond2$i = $593 | $594;
        if ($or$cond2$i) {
         $tsize$0323841$i = 0;
         break;
        }
       }
       $595 = (_sbrk(($ssize$0$i|0))|0);
       $596 = ($595|0)==($575|0);
       $ssize$0$$i = $596 ? $ssize$0$i : 0;
       $$$i = $596 ? $575 : (-1);
       $br$0$i = $595;$ssize$1$i = $ssize$0$i;$tbase$0$i = $$$i;$tsize$0$i = $ssize$0$$i;
       label = 191;
      } else {
       $tsize$0323841$i = 0;
      }
     }
    }
   } while(0);
   L291: do {
    if ((label|0) == 191) {
     $606 = (0 - ($ssize$1$i))|0;
     $607 = ($tbase$0$i|0)==((-1)|0);
     if (!($607)) {
      $tbase$247$i = $tbase$0$i;$tsize$246$i = $tsize$0$i;
      label = 202;
      break L269;
     }
     $608 = ($br$0$i|0)!=((-1)|0);
     $609 = ($ssize$1$i>>>0)<(2147483647);
     $or$cond5$i = $608 & $609;
     $610 = ($ssize$1$i>>>0)<($547>>>0);
     $or$cond6$i = $or$cond5$i & $610;
     do {
      if ($or$cond6$i) {
       $611 = HEAP32[((15624 + 8|0))>>2]|0;
       $612 = (($549) - ($ssize$1$i))|0;
       $613 = (($612) + ($611))|0;
       $614 = (0 - ($611))|0;
       $615 = $613 & $614;
       $616 = ($615>>>0)<(2147483647);
       if ($616) {
        $617 = (_sbrk(($615|0))|0);
        $618 = ($617|0)==((-1)|0);
        if ($618) {
         (_sbrk(($606|0))|0);
         $tsize$0323841$i = $tsize$0$i;
         break L291;
        } else {
         $619 = (($615) + ($ssize$1$i))|0;
         $ssize$2$i = $619;
         break;
        }
       } else {
        $ssize$2$i = $ssize$1$i;
       }
      } else {
       $ssize$2$i = $ssize$1$i;
      }
     } while(0);
     $620 = ($br$0$i|0)==((-1)|0);
     if ($620) {
      $tsize$0323841$i = $tsize$0$i;
     } else {
      $tbase$247$i = $br$0$i;$tsize$246$i = $ssize$2$i;
      label = 202;
      break L269;
     }
    }
   } while(0);
   $621 = HEAP32[((15152 + 444|0))>>2]|0;
   $622 = $621 | 4;
   HEAP32[((15152 + 444|0))>>2] = $622;
   $tsize$1$i = $tsize$0323841$i;
   label = 199;
  } else {
   $tsize$1$i = 0;
   label = 199;
  }
 } while(0);
 if ((label|0) == 199) {
  $623 = ($552>>>0)<(2147483647);
  if ($623) {
   $624 = (_sbrk(($552|0))|0);
   $625 = (_sbrk(0)|0);
   $notlhs$i = ($624|0)!=((-1)|0);
   $notrhs$i = ($625|0)!=((-1)|0);
   $or$cond8$not$i = $notrhs$i & $notlhs$i;
   $626 = ($624>>>0)<($625>>>0);
   $or$cond9$i = $or$cond8$not$i & $626;
   if ($or$cond9$i) {
    $627 = $625;
    $628 = $624;
    $629 = (($627) - ($628))|0;
    $630 = (($nb$0) + 40)|0;
    $631 = ($629>>>0)>($630>>>0);
    $$tsize$1$i = $631 ? $629 : $tsize$1$i;
    if ($631) {
     $tbase$247$i = $624;$tsize$246$i = $$tsize$1$i;
     label = 202;
    }
   }
  }
 }
 if ((label|0) == 202) {
  $632 = HEAP32[((15152 + 432|0))>>2]|0;
  $633 = (($632) + ($tsize$246$i))|0;
  HEAP32[((15152 + 432|0))>>2] = $633;
  $634 = HEAP32[((15152 + 436|0))>>2]|0;
  $635 = ($633>>>0)>($634>>>0);
  if ($635) {
   HEAP32[((15152 + 436|0))>>2] = $633;
  }
  $636 = HEAP32[((15152 + 24|0))>>2]|0;
  $637 = ($636|0)==(0|0);
  L311: do {
   if ($637) {
    $638 = HEAP32[((15152 + 16|0))>>2]|0;
    $639 = ($638|0)==(0|0);
    $640 = ($tbase$247$i>>>0)<($638>>>0);
    $or$cond10$i = $639 | $640;
    if ($or$cond10$i) {
     HEAP32[((15152 + 16|0))>>2] = $tbase$247$i;
    }
    HEAP32[((15152 + 448|0))>>2] = $tbase$247$i;
    HEAP32[((15152 + 452|0))>>2] = $tsize$246$i;
    HEAP32[((15152 + 460|0))>>2] = 0;
    $641 = HEAP32[15624>>2]|0;
    HEAP32[((15152 + 36|0))>>2] = $641;
    HEAP32[((15152 + 32|0))>>2] = -1;
    $i$02$i$i = 0;
    while(1) {
     $642 = $i$02$i$i << 1;
     $643 = ((15152 + ($642<<2)|0) + 40|0);
     $$sum$i$i = (($642) + 3)|0;
     $644 = ((15152 + ($$sum$i$i<<2)|0) + 40|0);
     HEAP32[$644>>2] = $643;
     $$sum1$i$i = (($642) + 2)|0;
     $645 = ((15152 + ($$sum1$i$i<<2)|0) + 40|0);
     HEAP32[$645>>2] = $643;
     $646 = (($i$02$i$i) + 1)|0;
     $exitcond$i$i = ($646|0)==(32);
     if ($exitcond$i$i) {
      break;
     } else {
      $i$02$i$i = $646;
     }
    }
    $647 = (($tsize$246$i) + -40)|0;
    $648 = (($tbase$247$i) + 8|0);
    $649 = $648;
    $650 = $649 & 7;
    $651 = ($650|0)==(0);
    if ($651) {
     $655 = 0;
    } else {
     $652 = (0 - ($649))|0;
     $653 = $652 & 7;
     $655 = $653;
    }
    $654 = (($tbase$247$i) + ($655)|0);
    $656 = (($647) - ($655))|0;
    HEAP32[((15152 + 24|0))>>2] = $654;
    HEAP32[((15152 + 12|0))>>2] = $656;
    $657 = $656 | 1;
    $$sum$i14$i = (($655) + 4)|0;
    $658 = (($tbase$247$i) + ($$sum$i14$i)|0);
    HEAP32[$658>>2] = $657;
    $$sum2$i$i = (($tsize$246$i) + -36)|0;
    $659 = (($tbase$247$i) + ($$sum2$i$i)|0);
    HEAP32[$659>>2] = 40;
    $660 = HEAP32[((15624 + 16|0))>>2]|0;
    HEAP32[((15152 + 28|0))>>2] = $660;
   } else {
    $sp$075$i = ((15152 + 448|0));
    while(1) {
     $661 = HEAP32[$sp$075$i>>2]|0;
     $662 = (($sp$075$i) + 4|0);
     $663 = HEAP32[$662>>2]|0;
     $664 = (($661) + ($663)|0);
     $665 = ($tbase$247$i|0)==($664|0);
     if ($665) {
      label = 214;
      break;
     }
     $666 = (($sp$075$i) + 8|0);
     $667 = HEAP32[$666>>2]|0;
     $668 = ($667|0)==(0|0);
     if ($668) {
      break;
     } else {
      $sp$075$i = $667;
     }
    }
    if ((label|0) == 214) {
     $669 = (($sp$075$i) + 12|0);
     $670 = HEAP32[$669>>2]|0;
     $671 = $670 & 8;
     $672 = ($671|0)==(0);
     if ($672) {
      $673 = ($636>>>0)>=($661>>>0);
      $674 = ($636>>>0)<($tbase$247$i>>>0);
      $or$cond49$i = $673 & $674;
      if ($or$cond49$i) {
       $675 = (($663) + ($tsize$246$i))|0;
       HEAP32[$662>>2] = $675;
       $676 = HEAP32[((15152 + 12|0))>>2]|0;
       $677 = (($676) + ($tsize$246$i))|0;
       $678 = (($636) + 8|0);
       $679 = $678;
       $680 = $679 & 7;
       $681 = ($680|0)==(0);
       if ($681) {
        $685 = 0;
       } else {
        $682 = (0 - ($679))|0;
        $683 = $682 & 7;
        $685 = $683;
       }
       $684 = (($636) + ($685)|0);
       $686 = (($677) - ($685))|0;
       HEAP32[((15152 + 24|0))>>2] = $684;
       HEAP32[((15152 + 12|0))>>2] = $686;
       $687 = $686 | 1;
       $$sum$i18$i = (($685) + 4)|0;
       $688 = (($636) + ($$sum$i18$i)|0);
       HEAP32[$688>>2] = $687;
       $$sum2$i19$i = (($677) + 4)|0;
       $689 = (($636) + ($$sum2$i19$i)|0);
       HEAP32[$689>>2] = 40;
       $690 = HEAP32[((15624 + 16|0))>>2]|0;
       HEAP32[((15152 + 28|0))>>2] = $690;
       break;
      }
     }
    }
    $691 = HEAP32[((15152 + 16|0))>>2]|0;
    $692 = ($tbase$247$i>>>0)<($691>>>0);
    if ($692) {
     HEAP32[((15152 + 16|0))>>2] = $tbase$247$i;
    }
    $693 = (($tbase$247$i) + ($tsize$246$i)|0);
    $sp$168$i = ((15152 + 448|0));
    while(1) {
     $694 = HEAP32[$sp$168$i>>2]|0;
     $695 = ($694|0)==($693|0);
     if ($695) {
      label = 224;
      break;
     }
     $696 = (($sp$168$i) + 8|0);
     $697 = HEAP32[$696>>2]|0;
     $698 = ($697|0)==(0|0);
     if ($698) {
      break;
     } else {
      $sp$168$i = $697;
     }
    }
    if ((label|0) == 224) {
     $699 = (($sp$168$i) + 12|0);
     $700 = HEAP32[$699>>2]|0;
     $701 = $700 & 8;
     $702 = ($701|0)==(0);
     if ($702) {
      HEAP32[$sp$168$i>>2] = $tbase$247$i;
      $703 = (($sp$168$i) + 4|0);
      $704 = HEAP32[$703>>2]|0;
      $705 = (($704) + ($tsize$246$i))|0;
      HEAP32[$703>>2] = $705;
      $706 = (($tbase$247$i) + 8|0);
      $707 = $706;
      $708 = $707 & 7;
      $709 = ($708|0)==(0);
      if ($709) {
       $713 = 0;
      } else {
       $710 = (0 - ($707))|0;
       $711 = $710 & 7;
       $713 = $711;
      }
      $712 = (($tbase$247$i) + ($713)|0);
      $$sum107$i = (($tsize$246$i) + 8)|0;
      $714 = (($tbase$247$i) + ($$sum107$i)|0);
      $715 = $714;
      $716 = $715 & 7;
      $717 = ($716|0)==(0);
      if ($717) {
       $720 = 0;
      } else {
       $718 = (0 - ($715))|0;
       $719 = $718 & 7;
       $720 = $719;
      }
      $$sum108$i = (($720) + ($tsize$246$i))|0;
      $721 = (($tbase$247$i) + ($$sum108$i)|0);
      $722 = $721;
      $723 = $712;
      $724 = (($722) - ($723))|0;
      $$sum$i21$i = (($713) + ($nb$0))|0;
      $725 = (($tbase$247$i) + ($$sum$i21$i)|0);
      $726 = (($724) - ($nb$0))|0;
      $727 = $nb$0 | 3;
      $$sum1$i22$i = (($713) + 4)|0;
      $728 = (($tbase$247$i) + ($$sum1$i22$i)|0);
      HEAP32[$728>>2] = $727;
      $729 = HEAP32[((15152 + 24|0))>>2]|0;
      $730 = ($721|0)==($729|0);
      L338: do {
       if ($730) {
        $731 = HEAP32[((15152 + 12|0))>>2]|0;
        $732 = (($731) + ($726))|0;
        HEAP32[((15152 + 12|0))>>2] = $732;
        HEAP32[((15152 + 24|0))>>2] = $725;
        $733 = $732 | 1;
        $$sum42$i$i = (($$sum$i21$i) + 4)|0;
        $734 = (($tbase$247$i) + ($$sum42$i$i)|0);
        HEAP32[$734>>2] = $733;
       } else {
        $735 = HEAP32[((15152 + 20|0))>>2]|0;
        $736 = ($721|0)==($735|0);
        if ($736) {
         $737 = HEAP32[((15152 + 8|0))>>2]|0;
         $738 = (($737) + ($726))|0;
         HEAP32[((15152 + 8|0))>>2] = $738;
         HEAP32[((15152 + 20|0))>>2] = $725;
         $739 = $738 | 1;
         $$sum40$i$i = (($$sum$i21$i) + 4)|0;
         $740 = (($tbase$247$i) + ($$sum40$i$i)|0);
         HEAP32[$740>>2] = $739;
         $$sum41$i$i = (($738) + ($$sum$i21$i))|0;
         $741 = (($tbase$247$i) + ($$sum41$i$i)|0);
         HEAP32[$741>>2] = $738;
         break;
        }
        $$sum2$i23$i = (($tsize$246$i) + 4)|0;
        $$sum109$i = (($$sum2$i23$i) + ($720))|0;
        $742 = (($tbase$247$i) + ($$sum109$i)|0);
        $743 = HEAP32[$742>>2]|0;
        $744 = $743 & 3;
        $745 = ($744|0)==(1);
        if ($745) {
         $746 = $743 & -8;
         $747 = $743 >>> 3;
         $748 = ($743>>>0)<(256);
         L346: do {
          if ($748) {
           $$sum3738$i$i = $720 | 8;
           $$sum119$i = (($$sum3738$i$i) + ($tsize$246$i))|0;
           $749 = (($tbase$247$i) + ($$sum119$i)|0);
           $750 = HEAP32[$749>>2]|0;
           $$sum39$i$i = (($tsize$246$i) + 12)|0;
           $$sum120$i = (($$sum39$i$i) + ($720))|0;
           $751 = (($tbase$247$i) + ($$sum120$i)|0);
           $752 = HEAP32[$751>>2]|0;
           $753 = $747 << 1;
           $754 = ((15152 + ($753<<2)|0) + 40|0);
           $755 = ($750|0)==($754|0);
           do {
            if (!($755)) {
             $756 = HEAP32[((15152 + 16|0))>>2]|0;
             $757 = ($750>>>0)<($756>>>0);
             if ($757) {
              _abort();
              // unreachable;
             }
             $758 = (($750) + 12|0);
             $759 = HEAP32[$758>>2]|0;
             $760 = ($759|0)==($721|0);
             if ($760) {
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $761 = ($752|0)==($750|0);
           if ($761) {
            $762 = 1 << $747;
            $763 = $762 ^ -1;
            $764 = HEAP32[15152>>2]|0;
            $765 = $764 & $763;
            HEAP32[15152>>2] = $765;
            break;
           }
           $766 = ($752|0)==($754|0);
           do {
            if ($766) {
             $$pre57$i$i = (($752) + 8|0);
             $$pre$phi58$i$iZ2D = $$pre57$i$i;
            } else {
             $767 = HEAP32[((15152 + 16|0))>>2]|0;
             $768 = ($752>>>0)<($767>>>0);
             if ($768) {
              _abort();
              // unreachable;
             }
             $769 = (($752) + 8|0);
             $770 = HEAP32[$769>>2]|0;
             $771 = ($770|0)==($721|0);
             if ($771) {
              $$pre$phi58$i$iZ2D = $769;
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $772 = (($750) + 12|0);
           HEAP32[$772>>2] = $752;
           HEAP32[$$pre$phi58$i$iZ2D>>2] = $750;
          } else {
           $$sum34$i$i = $720 | 24;
           $$sum110$i = (($$sum34$i$i) + ($tsize$246$i))|0;
           $773 = (($tbase$247$i) + ($$sum110$i)|0);
           $774 = HEAP32[$773>>2]|0;
           $$sum5$i$i = (($tsize$246$i) + 12)|0;
           $$sum111$i = (($$sum5$i$i) + ($720))|0;
           $775 = (($tbase$247$i) + ($$sum111$i)|0);
           $776 = HEAP32[$775>>2]|0;
           $777 = ($776|0)==($721|0);
           do {
            if ($777) {
             $$sum67$i$i = $720 | 16;
             $$sum117$i = (($$sum2$i23$i) + ($$sum67$i$i))|0;
             $788 = (($tbase$247$i) + ($$sum117$i)|0);
             $789 = HEAP32[$788>>2]|0;
             $790 = ($789|0)==(0|0);
             if ($790) {
              $$sum118$i = (($$sum67$i$i) + ($tsize$246$i))|0;
              $791 = (($tbase$247$i) + ($$sum118$i)|0);
              $792 = HEAP32[$791>>2]|0;
              $793 = ($792|0)==(0|0);
              if ($793) {
               $R$1$i$i = 0;
               break;
              } else {
               $R$0$i$i = $792;$RP$0$i$i = $791;
              }
             } else {
              $R$0$i$i = $789;$RP$0$i$i = $788;
             }
             while(1) {
              $794 = (($R$0$i$i) + 20|0);
              $795 = HEAP32[$794>>2]|0;
              $796 = ($795|0)==(0|0);
              if (!($796)) {
               $R$0$i$i = $795;$RP$0$i$i = $794;
               continue;
              }
              $797 = (($R$0$i$i) + 16|0);
              $798 = HEAP32[$797>>2]|0;
              $799 = ($798|0)==(0|0);
              if ($799) {
               break;
              } else {
               $R$0$i$i = $798;$RP$0$i$i = $797;
              }
             }
             $800 = HEAP32[((15152 + 16|0))>>2]|0;
             $801 = ($RP$0$i$i>>>0)<($800>>>0);
             if ($801) {
              _abort();
              // unreachable;
             } else {
              HEAP32[$RP$0$i$i>>2] = 0;
              $R$1$i$i = $R$0$i$i;
              break;
             }
            } else {
             $$sum3536$i$i = $720 | 8;
             $$sum112$i = (($$sum3536$i$i) + ($tsize$246$i))|0;
             $778 = (($tbase$247$i) + ($$sum112$i)|0);
             $779 = HEAP32[$778>>2]|0;
             $780 = HEAP32[((15152 + 16|0))>>2]|0;
             $781 = ($779>>>0)<($780>>>0);
             if ($781) {
              _abort();
              // unreachable;
             }
             $782 = (($779) + 12|0);
             $783 = HEAP32[$782>>2]|0;
             $784 = ($783|0)==($721|0);
             if (!($784)) {
              _abort();
              // unreachable;
             }
             $785 = (($776) + 8|0);
             $786 = HEAP32[$785>>2]|0;
             $787 = ($786|0)==($721|0);
             if ($787) {
              HEAP32[$782>>2] = $776;
              HEAP32[$785>>2] = $779;
              $R$1$i$i = $776;
              break;
             } else {
              _abort();
              // unreachable;
             }
            }
           } while(0);
           $802 = ($774|0)==(0|0);
           if ($802) {
            break;
           }
           $$sum30$i$i = (($tsize$246$i) + 28)|0;
           $$sum113$i = (($$sum30$i$i) + ($720))|0;
           $803 = (($tbase$247$i) + ($$sum113$i)|0);
           $804 = HEAP32[$803>>2]|0;
           $805 = ((15152 + ($804<<2)|0) + 304|0);
           $806 = HEAP32[$805>>2]|0;
           $807 = ($721|0)==($806|0);
           do {
            if ($807) {
             HEAP32[$805>>2] = $R$1$i$i;
             $cond$i$i = ($R$1$i$i|0)==(0|0);
             if (!($cond$i$i)) {
              break;
             }
             $808 = 1 << $804;
             $809 = $808 ^ -1;
             $810 = HEAP32[((15152 + 4|0))>>2]|0;
             $811 = $810 & $809;
             HEAP32[((15152 + 4|0))>>2] = $811;
             break L346;
            } else {
             $812 = HEAP32[((15152 + 16|0))>>2]|0;
             $813 = ($774>>>0)<($812>>>0);
             if ($813) {
              _abort();
              // unreachable;
             }
             $814 = (($774) + 16|0);
             $815 = HEAP32[$814>>2]|0;
             $816 = ($815|0)==($721|0);
             if ($816) {
              HEAP32[$814>>2] = $R$1$i$i;
             } else {
              $817 = (($774) + 20|0);
              HEAP32[$817>>2] = $R$1$i$i;
             }
             $818 = ($R$1$i$i|0)==(0|0);
             if ($818) {
              break L346;
             }
            }
           } while(0);
           $819 = HEAP32[((15152 + 16|0))>>2]|0;
           $820 = ($R$1$i$i>>>0)<($819>>>0);
           if ($820) {
            _abort();
            // unreachable;
           }
           $821 = (($R$1$i$i) + 24|0);
           HEAP32[$821>>2] = $774;
           $$sum3132$i$i = $720 | 16;
           $$sum114$i = (($$sum3132$i$i) + ($tsize$246$i))|0;
           $822 = (($tbase$247$i) + ($$sum114$i)|0);
           $823 = HEAP32[$822>>2]|0;
           $824 = ($823|0)==(0|0);
           do {
            if (!($824)) {
             $825 = HEAP32[((15152 + 16|0))>>2]|0;
             $826 = ($823>>>0)<($825>>>0);
             if ($826) {
              _abort();
              // unreachable;
             } else {
              $827 = (($R$1$i$i) + 16|0);
              HEAP32[$827>>2] = $823;
              $828 = (($823) + 24|0);
              HEAP32[$828>>2] = $R$1$i$i;
              break;
             }
            }
           } while(0);
           $$sum115$i = (($$sum2$i23$i) + ($$sum3132$i$i))|0;
           $829 = (($tbase$247$i) + ($$sum115$i)|0);
           $830 = HEAP32[$829>>2]|0;
           $831 = ($830|0)==(0|0);
           if ($831) {
            break;
           }
           $832 = HEAP32[((15152 + 16|0))>>2]|0;
           $833 = ($830>>>0)<($832>>>0);
           if ($833) {
            _abort();
            // unreachable;
           } else {
            $834 = (($R$1$i$i) + 20|0);
            HEAP32[$834>>2] = $830;
            $835 = (($830) + 24|0);
            HEAP32[$835>>2] = $R$1$i$i;
            break;
           }
          }
         } while(0);
         $$sum9$i$i = $746 | $720;
         $$sum116$i = (($$sum9$i$i) + ($tsize$246$i))|0;
         $836 = (($tbase$247$i) + ($$sum116$i)|0);
         $837 = (($746) + ($726))|0;
         $oldfirst$0$i$i = $836;$qsize$0$i$i = $837;
        } else {
         $oldfirst$0$i$i = $721;$qsize$0$i$i = $726;
        }
        $838 = (($oldfirst$0$i$i) + 4|0);
        $839 = HEAP32[$838>>2]|0;
        $840 = $839 & -2;
        HEAP32[$838>>2] = $840;
        $841 = $qsize$0$i$i | 1;
        $$sum10$i$i = (($$sum$i21$i) + 4)|0;
        $842 = (($tbase$247$i) + ($$sum10$i$i)|0);
        HEAP32[$842>>2] = $841;
        $$sum11$i24$i = (($qsize$0$i$i) + ($$sum$i21$i))|0;
        $843 = (($tbase$247$i) + ($$sum11$i24$i)|0);
        HEAP32[$843>>2] = $qsize$0$i$i;
        $844 = $qsize$0$i$i >>> 3;
        $845 = ($qsize$0$i$i>>>0)<(256);
        if ($845) {
         $846 = $844 << 1;
         $847 = ((15152 + ($846<<2)|0) + 40|0);
         $848 = HEAP32[15152>>2]|0;
         $849 = 1 << $844;
         $850 = $848 & $849;
         $851 = ($850|0)==(0);
         do {
          if ($851) {
           $852 = $848 | $849;
           HEAP32[15152>>2] = $852;
           $$sum26$pre$i$i = (($846) + 2)|0;
           $$pre$i25$i = ((15152 + ($$sum26$pre$i$i<<2)|0) + 40|0);
           $$pre$phi$i26$iZ2D = $$pre$i25$i;$F4$0$i$i = $847;
          } else {
           $$sum29$i$i = (($846) + 2)|0;
           $853 = ((15152 + ($$sum29$i$i<<2)|0) + 40|0);
           $854 = HEAP32[$853>>2]|0;
           $855 = HEAP32[((15152 + 16|0))>>2]|0;
           $856 = ($854>>>0)<($855>>>0);
           if (!($856)) {
            $$pre$phi$i26$iZ2D = $853;$F4$0$i$i = $854;
            break;
           }
           _abort();
           // unreachable;
          }
         } while(0);
         HEAP32[$$pre$phi$i26$iZ2D>>2] = $725;
         $857 = (($F4$0$i$i) + 12|0);
         HEAP32[$857>>2] = $725;
         $$sum27$i$i = (($$sum$i21$i) + 8)|0;
         $858 = (($tbase$247$i) + ($$sum27$i$i)|0);
         HEAP32[$858>>2] = $F4$0$i$i;
         $$sum28$i$i = (($$sum$i21$i) + 12)|0;
         $859 = (($tbase$247$i) + ($$sum28$i$i)|0);
         HEAP32[$859>>2] = $847;
         break;
        }
        $860 = $qsize$0$i$i >>> 8;
        $861 = ($860|0)==(0);
        do {
         if ($861) {
          $I7$0$i$i = 0;
         } else {
          $862 = ($qsize$0$i$i>>>0)>(16777215);
          if ($862) {
           $I7$0$i$i = 31;
           break;
          }
          $863 = (($860) + 1048320)|0;
          $864 = $863 >>> 16;
          $865 = $864 & 8;
          $866 = $860 << $865;
          $867 = (($866) + 520192)|0;
          $868 = $867 >>> 16;
          $869 = $868 & 4;
          $870 = $869 | $865;
          $871 = $866 << $869;
          $872 = (($871) + 245760)|0;
          $873 = $872 >>> 16;
          $874 = $873 & 2;
          $875 = $870 | $874;
          $876 = (14 - ($875))|0;
          $877 = $871 << $874;
          $878 = $877 >>> 15;
          $879 = (($876) + ($878))|0;
          $880 = $879 << 1;
          $881 = (($879) + 7)|0;
          $882 = $qsize$0$i$i >>> $881;
          $883 = $882 & 1;
          $884 = $883 | $880;
          $I7$0$i$i = $884;
         }
        } while(0);
        $885 = ((15152 + ($I7$0$i$i<<2)|0) + 304|0);
        $$sum12$i$i = (($$sum$i21$i) + 28)|0;
        $886 = (($tbase$247$i) + ($$sum12$i$i)|0);
        HEAP32[$886>>2] = $I7$0$i$i;
        $$sum13$i$i = (($$sum$i21$i) + 16)|0;
        $887 = (($tbase$247$i) + ($$sum13$i$i)|0);
        $$sum14$i$i = (($$sum$i21$i) + 20)|0;
        $888 = (($tbase$247$i) + ($$sum14$i$i)|0);
        HEAP32[$888>>2] = 0;
        HEAP32[$887>>2] = 0;
        $889 = HEAP32[((15152 + 4|0))>>2]|0;
        $890 = 1 << $I7$0$i$i;
        $891 = $889 & $890;
        $892 = ($891|0)==(0);
        if ($892) {
         $893 = $889 | $890;
         HEAP32[((15152 + 4|0))>>2] = $893;
         HEAP32[$885>>2] = $725;
         $$sum15$i$i = (($$sum$i21$i) + 24)|0;
         $894 = (($tbase$247$i) + ($$sum15$i$i)|0);
         HEAP32[$894>>2] = $885;
         $$sum16$i$i = (($$sum$i21$i) + 12)|0;
         $895 = (($tbase$247$i) + ($$sum16$i$i)|0);
         HEAP32[$895>>2] = $725;
         $$sum17$i$i = (($$sum$i21$i) + 8)|0;
         $896 = (($tbase$247$i) + ($$sum17$i$i)|0);
         HEAP32[$896>>2] = $725;
         break;
        }
        $897 = HEAP32[$885>>2]|0;
        $898 = ($I7$0$i$i|0)==(31);
        if ($898) {
         $906 = 0;
        } else {
         $899 = $I7$0$i$i >>> 1;
         $900 = (25 - ($899))|0;
         $906 = $900;
        }
        $901 = (($897) + 4|0);
        $902 = HEAP32[$901>>2]|0;
        $903 = $902 & -8;
        $904 = ($903|0)==($qsize$0$i$i|0);
        L435: do {
         if ($904) {
          $T$0$lcssa$i28$i = $897;
         } else {
          $905 = $qsize$0$i$i << $906;
          $K8$052$i$i = $905;$T$051$i$i = $897;
          while(1) {
           $913 = $K8$052$i$i >>> 31;
           $914 = ((($T$051$i$i) + ($913<<2)|0) + 16|0);
           $909 = HEAP32[$914>>2]|0;
           $915 = ($909|0)==(0|0);
           if ($915) {
            break;
           }
           $907 = $K8$052$i$i << 1;
           $908 = (($909) + 4|0);
           $910 = HEAP32[$908>>2]|0;
           $911 = $910 & -8;
           $912 = ($911|0)==($qsize$0$i$i|0);
           if ($912) {
            $T$0$lcssa$i28$i = $909;
            break L435;
           } else {
            $K8$052$i$i = $907;$T$051$i$i = $909;
           }
          }
          $916 = HEAP32[((15152 + 16|0))>>2]|0;
          $917 = ($914>>>0)<($916>>>0);
          if ($917) {
           _abort();
           // unreachable;
          } else {
           HEAP32[$914>>2] = $725;
           $$sum23$i$i = (($$sum$i21$i) + 24)|0;
           $918 = (($tbase$247$i) + ($$sum23$i$i)|0);
           HEAP32[$918>>2] = $T$051$i$i;
           $$sum24$i$i = (($$sum$i21$i) + 12)|0;
           $919 = (($tbase$247$i) + ($$sum24$i$i)|0);
           HEAP32[$919>>2] = $725;
           $$sum25$i$i = (($$sum$i21$i) + 8)|0;
           $920 = (($tbase$247$i) + ($$sum25$i$i)|0);
           HEAP32[$920>>2] = $725;
           break L338;
          }
         }
        } while(0);
        $921 = (($T$0$lcssa$i28$i) + 8|0);
        $922 = HEAP32[$921>>2]|0;
        $923 = HEAP32[((15152 + 16|0))>>2]|0;
        $924 = ($T$0$lcssa$i28$i>>>0)<($923>>>0);
        if ($924) {
         _abort();
         // unreachable;
        }
        $925 = ($922>>>0)<($923>>>0);
        if ($925) {
         _abort();
         // unreachable;
        } else {
         $926 = (($922) + 12|0);
         HEAP32[$926>>2] = $725;
         HEAP32[$921>>2] = $725;
         $$sum20$i$i = (($$sum$i21$i) + 8)|0;
         $927 = (($tbase$247$i) + ($$sum20$i$i)|0);
         HEAP32[$927>>2] = $922;
         $$sum21$i$i = (($$sum$i21$i) + 12)|0;
         $928 = (($tbase$247$i) + ($$sum21$i$i)|0);
         HEAP32[$928>>2] = $T$0$lcssa$i28$i;
         $$sum22$i$i = (($$sum$i21$i) + 24)|0;
         $929 = (($tbase$247$i) + ($$sum22$i$i)|0);
         HEAP32[$929>>2] = 0;
         break;
        }
       }
      } while(0);
      $$sum1819$i$i = $713 | 8;
      $930 = (($tbase$247$i) + ($$sum1819$i$i)|0);
      $mem$0 = $930;
      STACKTOP = sp;return ($mem$0|0);
     }
    }
    $sp$0$i$i$i = ((15152 + 448|0));
    while(1) {
     $931 = HEAP32[$sp$0$i$i$i>>2]|0;
     $932 = ($931>>>0)>($636>>>0);
     if (!($932)) {
      $933 = (($sp$0$i$i$i) + 4|0);
      $934 = HEAP32[$933>>2]|0;
      $935 = (($931) + ($934)|0);
      $936 = ($935>>>0)>($636>>>0);
      if ($936) {
       break;
      }
     }
     $937 = (($sp$0$i$i$i) + 8|0);
     $938 = HEAP32[$937>>2]|0;
     $sp$0$i$i$i = $938;
    }
    $$sum$i15$i = (($934) + -47)|0;
    $$sum1$i16$i = (($934) + -39)|0;
    $939 = (($931) + ($$sum1$i16$i)|0);
    $940 = $939;
    $941 = $940 & 7;
    $942 = ($941|0)==(0);
    if ($942) {
     $945 = 0;
    } else {
     $943 = (0 - ($940))|0;
     $944 = $943 & 7;
     $945 = $944;
    }
    $$sum2$i17$i = (($$sum$i15$i) + ($945))|0;
    $946 = (($931) + ($$sum2$i17$i)|0);
    $947 = (($636) + 16|0);
    $948 = ($946>>>0)<($947>>>0);
    $949 = $948 ? $636 : $946;
    $950 = (($949) + 8|0);
    $951 = (($tsize$246$i) + -40)|0;
    $952 = (($tbase$247$i) + 8|0);
    $953 = $952;
    $954 = $953 & 7;
    $955 = ($954|0)==(0);
    if ($955) {
     $959 = 0;
    } else {
     $956 = (0 - ($953))|0;
     $957 = $956 & 7;
     $959 = $957;
    }
    $958 = (($tbase$247$i) + ($959)|0);
    $960 = (($951) - ($959))|0;
    HEAP32[((15152 + 24|0))>>2] = $958;
    HEAP32[((15152 + 12|0))>>2] = $960;
    $961 = $960 | 1;
    $$sum$i$i$i = (($959) + 4)|0;
    $962 = (($tbase$247$i) + ($$sum$i$i$i)|0);
    HEAP32[$962>>2] = $961;
    $$sum2$i$i$i = (($tsize$246$i) + -36)|0;
    $963 = (($tbase$247$i) + ($$sum2$i$i$i)|0);
    HEAP32[$963>>2] = 40;
    $964 = HEAP32[((15624 + 16|0))>>2]|0;
    HEAP32[((15152 + 28|0))>>2] = $964;
    $965 = (($949) + 4|0);
    HEAP32[$965>>2] = 27;
    ;HEAP32[$950+0>>2]=HEAP32[((15152 + 448|0))+0>>2]|0;HEAP32[$950+4>>2]=HEAP32[((15152 + 448|0))+4>>2]|0;HEAP32[$950+8>>2]=HEAP32[((15152 + 448|0))+8>>2]|0;HEAP32[$950+12>>2]=HEAP32[((15152 + 448|0))+12>>2]|0;
    HEAP32[((15152 + 448|0))>>2] = $tbase$247$i;
    HEAP32[((15152 + 452|0))>>2] = $tsize$246$i;
    HEAP32[((15152 + 460|0))>>2] = 0;
    HEAP32[((15152 + 456|0))>>2] = $950;
    $966 = (($949) + 28|0);
    HEAP32[$966>>2] = 7;
    $967 = (($949) + 32|0);
    $968 = ($967>>>0)<($935>>>0);
    if ($968) {
     $970 = $966;
     while(1) {
      $969 = (($970) + 4|0);
      HEAP32[$969>>2] = 7;
      $971 = (($970) + 8|0);
      $972 = ($971>>>0)<($935>>>0);
      if ($972) {
       $970 = $969;
      } else {
       break;
      }
     }
    }
    $973 = ($949|0)==($636|0);
    if (!($973)) {
     $974 = $949;
     $975 = $636;
     $976 = (($974) - ($975))|0;
     $977 = (($636) + ($976)|0);
     $$sum3$i$i = (($976) + 4)|0;
     $978 = (($636) + ($$sum3$i$i)|0);
     $979 = HEAP32[$978>>2]|0;
     $980 = $979 & -2;
     HEAP32[$978>>2] = $980;
     $981 = $976 | 1;
     $982 = (($636) + 4|0);
     HEAP32[$982>>2] = $981;
     HEAP32[$977>>2] = $976;
     $983 = $976 >>> 3;
     $984 = ($976>>>0)<(256);
     if ($984) {
      $985 = $983 << 1;
      $986 = ((15152 + ($985<<2)|0) + 40|0);
      $987 = HEAP32[15152>>2]|0;
      $988 = 1 << $983;
      $989 = $987 & $988;
      $990 = ($989|0)==(0);
      do {
       if ($990) {
        $991 = $987 | $988;
        HEAP32[15152>>2] = $991;
        $$sum10$pre$i$i = (($985) + 2)|0;
        $$pre$i$i = ((15152 + ($$sum10$pre$i$i<<2)|0) + 40|0);
        $$pre$phi$i$iZ2D = $$pre$i$i;$F$0$i$i = $986;
       } else {
        $$sum11$i$i = (($985) + 2)|0;
        $992 = ((15152 + ($$sum11$i$i<<2)|0) + 40|0);
        $993 = HEAP32[$992>>2]|0;
        $994 = HEAP32[((15152 + 16|0))>>2]|0;
        $995 = ($993>>>0)<($994>>>0);
        if (!($995)) {
         $$pre$phi$i$iZ2D = $992;$F$0$i$i = $993;
         break;
        }
        _abort();
        // unreachable;
       }
      } while(0);
      HEAP32[$$pre$phi$i$iZ2D>>2] = $636;
      $996 = (($F$0$i$i) + 12|0);
      HEAP32[$996>>2] = $636;
      $997 = (($636) + 8|0);
      HEAP32[$997>>2] = $F$0$i$i;
      $998 = (($636) + 12|0);
      HEAP32[$998>>2] = $986;
      break;
     }
     $999 = $976 >>> 8;
     $1000 = ($999|0)==(0);
     if ($1000) {
      $I1$0$i$i = 0;
     } else {
      $1001 = ($976>>>0)>(16777215);
      if ($1001) {
       $I1$0$i$i = 31;
      } else {
       $1002 = (($999) + 1048320)|0;
       $1003 = $1002 >>> 16;
       $1004 = $1003 & 8;
       $1005 = $999 << $1004;
       $1006 = (($1005) + 520192)|0;
       $1007 = $1006 >>> 16;
       $1008 = $1007 & 4;
       $1009 = $1008 | $1004;
       $1010 = $1005 << $1008;
       $1011 = (($1010) + 245760)|0;
       $1012 = $1011 >>> 16;
       $1013 = $1012 & 2;
       $1014 = $1009 | $1013;
       $1015 = (14 - ($1014))|0;
       $1016 = $1010 << $1013;
       $1017 = $1016 >>> 15;
       $1018 = (($1015) + ($1017))|0;
       $1019 = $1018 << 1;
       $1020 = (($1018) + 7)|0;
       $1021 = $976 >>> $1020;
       $1022 = $1021 & 1;
       $1023 = $1022 | $1019;
       $I1$0$i$i = $1023;
      }
     }
     $1024 = ((15152 + ($I1$0$i$i<<2)|0) + 304|0);
     $1025 = (($636) + 28|0);
     $I1$0$c$i$i = $I1$0$i$i;
     HEAP32[$1025>>2] = $I1$0$c$i$i;
     $1026 = (($636) + 20|0);
     HEAP32[$1026>>2] = 0;
     $1027 = (($636) + 16|0);
     HEAP32[$1027>>2] = 0;
     $1028 = HEAP32[((15152 + 4|0))>>2]|0;
     $1029 = 1 << $I1$0$i$i;
     $1030 = $1028 & $1029;
     $1031 = ($1030|0)==(0);
     if ($1031) {
      $1032 = $1028 | $1029;
      HEAP32[((15152 + 4|0))>>2] = $1032;
      HEAP32[$1024>>2] = $636;
      $1033 = (($636) + 24|0);
      HEAP32[$1033>>2] = $1024;
      $1034 = (($636) + 12|0);
      HEAP32[$1034>>2] = $636;
      $1035 = (($636) + 8|0);
      HEAP32[$1035>>2] = $636;
      break;
     }
     $1036 = HEAP32[$1024>>2]|0;
     $1037 = ($I1$0$i$i|0)==(31);
     if ($1037) {
      $1045 = 0;
     } else {
      $1038 = $I1$0$i$i >>> 1;
      $1039 = (25 - ($1038))|0;
      $1045 = $1039;
     }
     $1040 = (($1036) + 4|0);
     $1041 = HEAP32[$1040>>2]|0;
     $1042 = $1041 & -8;
     $1043 = ($1042|0)==($976|0);
     L489: do {
      if ($1043) {
       $T$0$lcssa$i$i = $1036;
      } else {
       $1044 = $976 << $1045;
       $K2$014$i$i = $1044;$T$013$i$i = $1036;
       while(1) {
        $1052 = $K2$014$i$i >>> 31;
        $1053 = ((($T$013$i$i) + ($1052<<2)|0) + 16|0);
        $1048 = HEAP32[$1053>>2]|0;
        $1054 = ($1048|0)==(0|0);
        if ($1054) {
         break;
        }
        $1046 = $K2$014$i$i << 1;
        $1047 = (($1048) + 4|0);
        $1049 = HEAP32[$1047>>2]|0;
        $1050 = $1049 & -8;
        $1051 = ($1050|0)==($976|0);
        if ($1051) {
         $T$0$lcssa$i$i = $1048;
         break L489;
        } else {
         $K2$014$i$i = $1046;$T$013$i$i = $1048;
        }
       }
       $1055 = HEAP32[((15152 + 16|0))>>2]|0;
       $1056 = ($1053>>>0)<($1055>>>0);
       if ($1056) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$1053>>2] = $636;
        $1057 = (($636) + 24|0);
        HEAP32[$1057>>2] = $T$013$i$i;
        $1058 = (($636) + 12|0);
        HEAP32[$1058>>2] = $636;
        $1059 = (($636) + 8|0);
        HEAP32[$1059>>2] = $636;
        break L311;
       }
      }
     } while(0);
     $1060 = (($T$0$lcssa$i$i) + 8|0);
     $1061 = HEAP32[$1060>>2]|0;
     $1062 = HEAP32[((15152 + 16|0))>>2]|0;
     $1063 = ($T$0$lcssa$i$i>>>0)<($1062>>>0);
     if ($1063) {
      _abort();
      // unreachable;
     }
     $1064 = ($1061>>>0)<($1062>>>0);
     if ($1064) {
      _abort();
      // unreachable;
     } else {
      $1065 = (($1061) + 12|0);
      HEAP32[$1065>>2] = $636;
      HEAP32[$1060>>2] = $636;
      $1066 = (($636) + 8|0);
      HEAP32[$1066>>2] = $1061;
      $1067 = (($636) + 12|0);
      HEAP32[$1067>>2] = $T$0$lcssa$i$i;
      $1068 = (($636) + 24|0);
      HEAP32[$1068>>2] = 0;
      break;
     }
    }
   }
  } while(0);
  $1069 = HEAP32[((15152 + 12|0))>>2]|0;
  $1070 = ($1069>>>0)>($nb$0>>>0);
  if ($1070) {
   $1071 = (($1069) - ($nb$0))|0;
   HEAP32[((15152 + 12|0))>>2] = $1071;
   $1072 = HEAP32[((15152 + 24|0))>>2]|0;
   $1073 = (($1072) + ($nb$0)|0);
   HEAP32[((15152 + 24|0))>>2] = $1073;
   $1074 = $1071 | 1;
   $$sum$i32 = (($nb$0) + 4)|0;
   $1075 = (($1072) + ($$sum$i32)|0);
   HEAP32[$1075>>2] = $1074;
   $1076 = $nb$0 | 3;
   $1077 = (($1072) + 4|0);
   HEAP32[$1077>>2] = $1076;
   $1078 = (($1072) + 8|0);
   $mem$0 = $1078;
   STACKTOP = sp;return ($mem$0|0);
  }
 }
 $1079 = (___errno_location()|0);
 HEAP32[$1079>>2] = 12;
 $mem$0 = 0;
 STACKTOP = sp;return ($mem$0|0);
}
function _free($mem) {
 $mem = $mem|0;
 var $$pre = 0, $$pre$phi68Z2D = 0, $$pre$phi70Z2D = 0, $$pre$phiZ2D = 0, $$pre67 = 0, $$pre69 = 0, $$sum = 0, $$sum16$pre = 0, $$sum17 = 0, $$sum18 = 0, $$sum19 = 0, $$sum2 = 0, $$sum20 = 0, $$sum2324 = 0, $$sum25 = 0, $$sum26 = 0, $$sum28 = 0, $$sum29 = 0, $$sum3 = 0, $$sum30 = 0;
 var $$sum31 = 0, $$sum32 = 0, $$sum33 = 0, $$sum34 = 0, $$sum35 = 0, $$sum36 = 0, $$sum37 = 0, $$sum5 = 0, $$sum67 = 0, $$sum8 = 0, $$sum9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0;
 var $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0;
 var $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0;
 var $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0;
 var $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0;
 var $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0;
 var $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0;
 var $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0;
 var $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0;
 var $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0;
 var $322 = 0, $323 = 0, $324 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $F16$0 = 0, $I18$0 = 0, $I18$0$c = 0, $K19$057 = 0;
 var $R$0 = 0, $R$1 = 0, $R7$0 = 0, $R7$1 = 0, $RP$0 = 0, $RP9$0 = 0, $T$0$lcssa = 0, $T$056 = 0, $cond = 0, $cond54 = 0, $p$0 = 0, $psize$0 = 0, $psize$1 = 0, $sp$0$i = 0, $sp$0$in$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($mem|0)==(0|0);
 if ($0) {
  STACKTOP = sp;return;
 }
 $1 = (($mem) + -8|0);
 $2 = HEAP32[((15152 + 16|0))>>2]|0;
 $3 = ($1>>>0)<($2>>>0);
 if ($3) {
  _abort();
  // unreachable;
 }
 $4 = (($mem) + -4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & 3;
 $7 = ($6|0)==(1);
 if ($7) {
  _abort();
  // unreachable;
 }
 $8 = $5 & -8;
 $$sum = (($8) + -8)|0;
 $9 = (($mem) + ($$sum)|0);
 $10 = $5 & 1;
 $11 = ($10|0)==(0);
 do {
  if ($11) {
   $12 = HEAP32[$1>>2]|0;
   $13 = ($6|0)==(0);
   if ($13) {
    STACKTOP = sp;return;
   }
   $$sum2 = (-8 - ($12))|0;
   $14 = (($mem) + ($$sum2)|0);
   $15 = (($12) + ($8))|0;
   $16 = ($14>>>0)<($2>>>0);
   if ($16) {
    _abort();
    // unreachable;
   }
   $17 = HEAP32[((15152 + 20|0))>>2]|0;
   $18 = ($14|0)==($17|0);
   if ($18) {
    $$sum3 = (($8) + -4)|0;
    $104 = (($mem) + ($$sum3)|0);
    $105 = HEAP32[$104>>2]|0;
    $106 = $105 & 3;
    $107 = ($106|0)==(3);
    if (!($107)) {
     $p$0 = $14;$psize$0 = $15;
     break;
    }
    HEAP32[((15152 + 8|0))>>2] = $15;
    $108 = HEAP32[$104>>2]|0;
    $109 = $108 & -2;
    HEAP32[$104>>2] = $109;
    $110 = $15 | 1;
    $$sum26 = (($$sum2) + 4)|0;
    $111 = (($mem) + ($$sum26)|0);
    HEAP32[$111>>2] = $110;
    HEAP32[$9>>2] = $15;
    STACKTOP = sp;return;
   }
   $19 = $12 >>> 3;
   $20 = ($12>>>0)<(256);
   if ($20) {
    $$sum36 = (($$sum2) + 8)|0;
    $21 = (($mem) + ($$sum36)|0);
    $22 = HEAP32[$21>>2]|0;
    $$sum37 = (($$sum2) + 12)|0;
    $23 = (($mem) + ($$sum37)|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = $19 << 1;
    $26 = ((15152 + ($25<<2)|0) + 40|0);
    $27 = ($22|0)==($26|0);
    if (!($27)) {
     $28 = ($22>>>0)<($2>>>0);
     if ($28) {
      _abort();
      // unreachable;
     }
     $29 = (($22) + 12|0);
     $30 = HEAP32[$29>>2]|0;
     $31 = ($30|0)==($14|0);
     if (!($31)) {
      _abort();
      // unreachable;
     }
    }
    $32 = ($24|0)==($22|0);
    if ($32) {
     $33 = 1 << $19;
     $34 = $33 ^ -1;
     $35 = HEAP32[15152>>2]|0;
     $36 = $35 & $34;
     HEAP32[15152>>2] = $36;
     $p$0 = $14;$psize$0 = $15;
     break;
    }
    $37 = ($24|0)==($26|0);
    if ($37) {
     $$pre69 = (($24) + 8|0);
     $$pre$phi70Z2D = $$pre69;
    } else {
     $38 = ($24>>>0)<($2>>>0);
     if ($38) {
      _abort();
      // unreachable;
     }
     $39 = (($24) + 8|0);
     $40 = HEAP32[$39>>2]|0;
     $41 = ($40|0)==($14|0);
     if ($41) {
      $$pre$phi70Z2D = $39;
     } else {
      _abort();
      // unreachable;
     }
    }
    $42 = (($22) + 12|0);
    HEAP32[$42>>2] = $24;
    HEAP32[$$pre$phi70Z2D>>2] = $22;
    $p$0 = $14;$psize$0 = $15;
    break;
   }
   $$sum28 = (($$sum2) + 24)|0;
   $43 = (($mem) + ($$sum28)|0);
   $44 = HEAP32[$43>>2]|0;
   $$sum29 = (($$sum2) + 12)|0;
   $45 = (($mem) + ($$sum29)|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = ($46|0)==($14|0);
   do {
    if ($47) {
     $$sum31 = (($$sum2) + 20)|0;
     $57 = (($mem) + ($$sum31)|0);
     $58 = HEAP32[$57>>2]|0;
     $59 = ($58|0)==(0|0);
     if ($59) {
      $$sum30 = (($$sum2) + 16)|0;
      $60 = (($mem) + ($$sum30)|0);
      $61 = HEAP32[$60>>2]|0;
      $62 = ($61|0)==(0|0);
      if ($62) {
       $R$1 = 0;
       break;
      } else {
       $R$0 = $61;$RP$0 = $60;
      }
     } else {
      $R$0 = $58;$RP$0 = $57;
     }
     while(1) {
      $63 = (($R$0) + 20|0);
      $64 = HEAP32[$63>>2]|0;
      $65 = ($64|0)==(0|0);
      if (!($65)) {
       $R$0 = $64;$RP$0 = $63;
       continue;
      }
      $66 = (($R$0) + 16|0);
      $67 = HEAP32[$66>>2]|0;
      $68 = ($67|0)==(0|0);
      if ($68) {
       break;
      } else {
       $R$0 = $67;$RP$0 = $66;
      }
     }
     $69 = ($RP$0>>>0)<($2>>>0);
     if ($69) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$0>>2] = 0;
      $R$1 = $R$0;
      break;
     }
    } else {
     $$sum35 = (($$sum2) + 8)|0;
     $48 = (($mem) + ($$sum35)|0);
     $49 = HEAP32[$48>>2]|0;
     $50 = ($49>>>0)<($2>>>0);
     if ($50) {
      _abort();
      // unreachable;
     }
     $51 = (($49) + 12|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = ($52|0)==($14|0);
     if (!($53)) {
      _abort();
      // unreachable;
     }
     $54 = (($46) + 8|0);
     $55 = HEAP32[$54>>2]|0;
     $56 = ($55|0)==($14|0);
     if ($56) {
      HEAP32[$51>>2] = $46;
      HEAP32[$54>>2] = $49;
      $R$1 = $46;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $70 = ($44|0)==(0|0);
   if ($70) {
    $p$0 = $14;$psize$0 = $15;
   } else {
    $$sum32 = (($$sum2) + 28)|0;
    $71 = (($mem) + ($$sum32)|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = ((15152 + ($72<<2)|0) + 304|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = ($14|0)==($74|0);
    if ($75) {
     HEAP32[$73>>2] = $R$1;
     $cond = ($R$1|0)==(0|0);
     if ($cond) {
      $76 = 1 << $72;
      $77 = $76 ^ -1;
      $78 = HEAP32[((15152 + 4|0))>>2]|0;
      $79 = $78 & $77;
      HEAP32[((15152 + 4|0))>>2] = $79;
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    } else {
     $80 = HEAP32[((15152 + 16|0))>>2]|0;
     $81 = ($44>>>0)<($80>>>0);
     if ($81) {
      _abort();
      // unreachable;
     }
     $82 = (($44) + 16|0);
     $83 = HEAP32[$82>>2]|0;
     $84 = ($83|0)==($14|0);
     if ($84) {
      HEAP32[$82>>2] = $R$1;
     } else {
      $85 = (($44) + 20|0);
      HEAP32[$85>>2] = $R$1;
     }
     $86 = ($R$1|0)==(0|0);
     if ($86) {
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    }
    $87 = HEAP32[((15152 + 16|0))>>2]|0;
    $88 = ($R$1>>>0)<($87>>>0);
    if ($88) {
     _abort();
     // unreachable;
    }
    $89 = (($R$1) + 24|0);
    HEAP32[$89>>2] = $44;
    $$sum33 = (($$sum2) + 16)|0;
    $90 = (($mem) + ($$sum33)|0);
    $91 = HEAP32[$90>>2]|0;
    $92 = ($91|0)==(0|0);
    do {
     if (!($92)) {
      $93 = HEAP32[((15152 + 16|0))>>2]|0;
      $94 = ($91>>>0)<($93>>>0);
      if ($94) {
       _abort();
       // unreachable;
      } else {
       $95 = (($R$1) + 16|0);
       HEAP32[$95>>2] = $91;
       $96 = (($91) + 24|0);
       HEAP32[$96>>2] = $R$1;
       break;
      }
     }
    } while(0);
    $$sum34 = (($$sum2) + 20)|0;
    $97 = (($mem) + ($$sum34)|0);
    $98 = HEAP32[$97>>2]|0;
    $99 = ($98|0)==(0|0);
    if ($99) {
     $p$0 = $14;$psize$0 = $15;
    } else {
     $100 = HEAP32[((15152 + 16|0))>>2]|0;
     $101 = ($98>>>0)<($100>>>0);
     if ($101) {
      _abort();
      // unreachable;
     } else {
      $102 = (($R$1) + 20|0);
      HEAP32[$102>>2] = $98;
      $103 = (($98) + 24|0);
      HEAP32[$103>>2] = $R$1;
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    }
   }
  } else {
   $p$0 = $1;$psize$0 = $8;
  }
 } while(0);
 $112 = ($p$0>>>0)<($9>>>0);
 if (!($112)) {
  _abort();
  // unreachable;
 }
 $$sum25 = (($8) + -4)|0;
 $113 = (($mem) + ($$sum25)|0);
 $114 = HEAP32[$113>>2]|0;
 $115 = $114 & 1;
 $116 = ($115|0)==(0);
 if ($116) {
  _abort();
  // unreachable;
 }
 $117 = $114 & 2;
 $118 = ($117|0)==(0);
 if ($118) {
  $119 = HEAP32[((15152 + 24|0))>>2]|0;
  $120 = ($9|0)==($119|0);
  if ($120) {
   $121 = HEAP32[((15152 + 12|0))>>2]|0;
   $122 = (($121) + ($psize$0))|0;
   HEAP32[((15152 + 12|0))>>2] = $122;
   HEAP32[((15152 + 24|0))>>2] = $p$0;
   $123 = $122 | 1;
   $124 = (($p$0) + 4|0);
   HEAP32[$124>>2] = $123;
   $125 = HEAP32[((15152 + 20|0))>>2]|0;
   $126 = ($p$0|0)==($125|0);
   if (!($126)) {
    STACKTOP = sp;return;
   }
   HEAP32[((15152 + 20|0))>>2] = 0;
   HEAP32[((15152 + 8|0))>>2] = 0;
   STACKTOP = sp;return;
  }
  $127 = HEAP32[((15152 + 20|0))>>2]|0;
  $128 = ($9|0)==($127|0);
  if ($128) {
   $129 = HEAP32[((15152 + 8|0))>>2]|0;
   $130 = (($129) + ($psize$0))|0;
   HEAP32[((15152 + 8|0))>>2] = $130;
   HEAP32[((15152 + 20|0))>>2] = $p$0;
   $131 = $130 | 1;
   $132 = (($p$0) + 4|0);
   HEAP32[$132>>2] = $131;
   $133 = (($p$0) + ($130)|0);
   HEAP32[$133>>2] = $130;
   STACKTOP = sp;return;
  }
  $134 = $114 & -8;
  $135 = (($134) + ($psize$0))|0;
  $136 = $114 >>> 3;
  $137 = ($114>>>0)<(256);
  do {
   if ($137) {
    $138 = (($mem) + ($8)|0);
    $139 = HEAP32[$138>>2]|0;
    $$sum2324 = $8 | 4;
    $140 = (($mem) + ($$sum2324)|0);
    $141 = HEAP32[$140>>2]|0;
    $142 = $136 << 1;
    $143 = ((15152 + ($142<<2)|0) + 40|0);
    $144 = ($139|0)==($143|0);
    if (!($144)) {
     $145 = HEAP32[((15152 + 16|0))>>2]|0;
     $146 = ($139>>>0)<($145>>>0);
     if ($146) {
      _abort();
      // unreachable;
     }
     $147 = (($139) + 12|0);
     $148 = HEAP32[$147>>2]|0;
     $149 = ($148|0)==($9|0);
     if (!($149)) {
      _abort();
      // unreachable;
     }
    }
    $150 = ($141|0)==($139|0);
    if ($150) {
     $151 = 1 << $136;
     $152 = $151 ^ -1;
     $153 = HEAP32[15152>>2]|0;
     $154 = $153 & $152;
     HEAP32[15152>>2] = $154;
     break;
    }
    $155 = ($141|0)==($143|0);
    if ($155) {
     $$pre67 = (($141) + 8|0);
     $$pre$phi68Z2D = $$pre67;
    } else {
     $156 = HEAP32[((15152 + 16|0))>>2]|0;
     $157 = ($141>>>0)<($156>>>0);
     if ($157) {
      _abort();
      // unreachable;
     }
     $158 = (($141) + 8|0);
     $159 = HEAP32[$158>>2]|0;
     $160 = ($159|0)==($9|0);
     if ($160) {
      $$pre$phi68Z2D = $158;
     } else {
      _abort();
      // unreachable;
     }
    }
    $161 = (($139) + 12|0);
    HEAP32[$161>>2] = $141;
    HEAP32[$$pre$phi68Z2D>>2] = $139;
   } else {
    $$sum5 = (($8) + 16)|0;
    $162 = (($mem) + ($$sum5)|0);
    $163 = HEAP32[$162>>2]|0;
    $$sum67 = $8 | 4;
    $164 = (($mem) + ($$sum67)|0);
    $165 = HEAP32[$164>>2]|0;
    $166 = ($165|0)==($9|0);
    do {
     if ($166) {
      $$sum9 = (($8) + 12)|0;
      $177 = (($mem) + ($$sum9)|0);
      $178 = HEAP32[$177>>2]|0;
      $179 = ($178|0)==(0|0);
      if ($179) {
       $$sum8 = (($8) + 8)|0;
       $180 = (($mem) + ($$sum8)|0);
       $181 = HEAP32[$180>>2]|0;
       $182 = ($181|0)==(0|0);
       if ($182) {
        $R7$1 = 0;
        break;
       } else {
        $R7$0 = $181;$RP9$0 = $180;
       }
      } else {
       $R7$0 = $178;$RP9$0 = $177;
      }
      while(1) {
       $183 = (($R7$0) + 20|0);
       $184 = HEAP32[$183>>2]|0;
       $185 = ($184|0)==(0|0);
       if (!($185)) {
        $R7$0 = $184;$RP9$0 = $183;
        continue;
       }
       $186 = (($R7$0) + 16|0);
       $187 = HEAP32[$186>>2]|0;
       $188 = ($187|0)==(0|0);
       if ($188) {
        break;
       } else {
        $R7$0 = $187;$RP9$0 = $186;
       }
      }
      $189 = HEAP32[((15152 + 16|0))>>2]|0;
      $190 = ($RP9$0>>>0)<($189>>>0);
      if ($190) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$RP9$0>>2] = 0;
       $R7$1 = $R7$0;
       break;
      }
     } else {
      $167 = (($mem) + ($8)|0);
      $168 = HEAP32[$167>>2]|0;
      $169 = HEAP32[((15152 + 16|0))>>2]|0;
      $170 = ($168>>>0)<($169>>>0);
      if ($170) {
       _abort();
       // unreachable;
      }
      $171 = (($168) + 12|0);
      $172 = HEAP32[$171>>2]|0;
      $173 = ($172|0)==($9|0);
      if (!($173)) {
       _abort();
       // unreachable;
      }
      $174 = (($165) + 8|0);
      $175 = HEAP32[$174>>2]|0;
      $176 = ($175|0)==($9|0);
      if ($176) {
       HEAP32[$171>>2] = $165;
       HEAP32[$174>>2] = $168;
       $R7$1 = $165;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $191 = ($163|0)==(0|0);
    if (!($191)) {
     $$sum18 = (($8) + 20)|0;
     $192 = (($mem) + ($$sum18)|0);
     $193 = HEAP32[$192>>2]|0;
     $194 = ((15152 + ($193<<2)|0) + 304|0);
     $195 = HEAP32[$194>>2]|0;
     $196 = ($9|0)==($195|0);
     if ($196) {
      HEAP32[$194>>2] = $R7$1;
      $cond54 = ($R7$1|0)==(0|0);
      if ($cond54) {
       $197 = 1 << $193;
       $198 = $197 ^ -1;
       $199 = HEAP32[((15152 + 4|0))>>2]|0;
       $200 = $199 & $198;
       HEAP32[((15152 + 4|0))>>2] = $200;
       break;
      }
     } else {
      $201 = HEAP32[((15152 + 16|0))>>2]|0;
      $202 = ($163>>>0)<($201>>>0);
      if ($202) {
       _abort();
       // unreachable;
      }
      $203 = (($163) + 16|0);
      $204 = HEAP32[$203>>2]|0;
      $205 = ($204|0)==($9|0);
      if ($205) {
       HEAP32[$203>>2] = $R7$1;
      } else {
       $206 = (($163) + 20|0);
       HEAP32[$206>>2] = $R7$1;
      }
      $207 = ($R7$1|0)==(0|0);
      if ($207) {
       break;
      }
     }
     $208 = HEAP32[((15152 + 16|0))>>2]|0;
     $209 = ($R7$1>>>0)<($208>>>0);
     if ($209) {
      _abort();
      // unreachable;
     }
     $210 = (($R7$1) + 24|0);
     HEAP32[$210>>2] = $163;
     $$sum19 = (($8) + 8)|0;
     $211 = (($mem) + ($$sum19)|0);
     $212 = HEAP32[$211>>2]|0;
     $213 = ($212|0)==(0|0);
     do {
      if (!($213)) {
       $214 = HEAP32[((15152 + 16|0))>>2]|0;
       $215 = ($212>>>0)<($214>>>0);
       if ($215) {
        _abort();
        // unreachable;
       } else {
        $216 = (($R7$1) + 16|0);
        HEAP32[$216>>2] = $212;
        $217 = (($212) + 24|0);
        HEAP32[$217>>2] = $R7$1;
        break;
       }
      }
     } while(0);
     $$sum20 = (($8) + 12)|0;
     $218 = (($mem) + ($$sum20)|0);
     $219 = HEAP32[$218>>2]|0;
     $220 = ($219|0)==(0|0);
     if (!($220)) {
      $221 = HEAP32[((15152 + 16|0))>>2]|0;
      $222 = ($219>>>0)<($221>>>0);
      if ($222) {
       _abort();
       // unreachable;
      } else {
       $223 = (($R7$1) + 20|0);
       HEAP32[$223>>2] = $219;
       $224 = (($219) + 24|0);
       HEAP32[$224>>2] = $R7$1;
       break;
      }
     }
    }
   }
  } while(0);
  $225 = $135 | 1;
  $226 = (($p$0) + 4|0);
  HEAP32[$226>>2] = $225;
  $227 = (($p$0) + ($135)|0);
  HEAP32[$227>>2] = $135;
  $228 = HEAP32[((15152 + 20|0))>>2]|0;
  $229 = ($p$0|0)==($228|0);
  if ($229) {
   HEAP32[((15152 + 8|0))>>2] = $135;
   STACKTOP = sp;return;
  } else {
   $psize$1 = $135;
  }
 } else {
  $230 = $114 & -2;
  HEAP32[$113>>2] = $230;
  $231 = $psize$0 | 1;
  $232 = (($p$0) + 4|0);
  HEAP32[$232>>2] = $231;
  $233 = (($p$0) + ($psize$0)|0);
  HEAP32[$233>>2] = $psize$0;
  $psize$1 = $psize$0;
 }
 $234 = $psize$1 >>> 3;
 $235 = ($psize$1>>>0)<(256);
 if ($235) {
  $236 = $234 << 1;
  $237 = ((15152 + ($236<<2)|0) + 40|0);
  $238 = HEAP32[15152>>2]|0;
  $239 = 1 << $234;
  $240 = $238 & $239;
  $241 = ($240|0)==(0);
  if ($241) {
   $242 = $238 | $239;
   HEAP32[15152>>2] = $242;
   $$sum16$pre = (($236) + 2)|0;
   $$pre = ((15152 + ($$sum16$pre<<2)|0) + 40|0);
   $$pre$phiZ2D = $$pre;$F16$0 = $237;
  } else {
   $$sum17 = (($236) + 2)|0;
   $243 = ((15152 + ($$sum17<<2)|0) + 40|0);
   $244 = HEAP32[$243>>2]|0;
   $245 = HEAP32[((15152 + 16|0))>>2]|0;
   $246 = ($244>>>0)<($245>>>0);
   if ($246) {
    _abort();
    // unreachable;
   } else {
    $$pre$phiZ2D = $243;$F16$0 = $244;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $p$0;
  $247 = (($F16$0) + 12|0);
  HEAP32[$247>>2] = $p$0;
  $248 = (($p$0) + 8|0);
  HEAP32[$248>>2] = $F16$0;
  $249 = (($p$0) + 12|0);
  HEAP32[$249>>2] = $237;
  STACKTOP = sp;return;
 }
 $250 = $psize$1 >>> 8;
 $251 = ($250|0)==(0);
 if ($251) {
  $I18$0 = 0;
 } else {
  $252 = ($psize$1>>>0)>(16777215);
  if ($252) {
   $I18$0 = 31;
  } else {
   $253 = (($250) + 1048320)|0;
   $254 = $253 >>> 16;
   $255 = $254 & 8;
   $256 = $250 << $255;
   $257 = (($256) + 520192)|0;
   $258 = $257 >>> 16;
   $259 = $258 & 4;
   $260 = $259 | $255;
   $261 = $256 << $259;
   $262 = (($261) + 245760)|0;
   $263 = $262 >>> 16;
   $264 = $263 & 2;
   $265 = $260 | $264;
   $266 = (14 - ($265))|0;
   $267 = $261 << $264;
   $268 = $267 >>> 15;
   $269 = (($266) + ($268))|0;
   $270 = $269 << 1;
   $271 = (($269) + 7)|0;
   $272 = $psize$1 >>> $271;
   $273 = $272 & 1;
   $274 = $273 | $270;
   $I18$0 = $274;
  }
 }
 $275 = ((15152 + ($I18$0<<2)|0) + 304|0);
 $276 = (($p$0) + 28|0);
 $I18$0$c = $I18$0;
 HEAP32[$276>>2] = $I18$0$c;
 $277 = (($p$0) + 20|0);
 HEAP32[$277>>2] = 0;
 $278 = (($p$0) + 16|0);
 HEAP32[$278>>2] = 0;
 $279 = HEAP32[((15152 + 4|0))>>2]|0;
 $280 = 1 << $I18$0;
 $281 = $279 & $280;
 $282 = ($281|0)==(0);
 L199: do {
  if ($282) {
   $283 = $279 | $280;
   HEAP32[((15152 + 4|0))>>2] = $283;
   HEAP32[$275>>2] = $p$0;
   $284 = (($p$0) + 24|0);
   HEAP32[$284>>2] = $275;
   $285 = (($p$0) + 12|0);
   HEAP32[$285>>2] = $p$0;
   $286 = (($p$0) + 8|0);
   HEAP32[$286>>2] = $p$0;
  } else {
   $287 = HEAP32[$275>>2]|0;
   $288 = ($I18$0|0)==(31);
   if ($288) {
    $296 = 0;
   } else {
    $289 = $I18$0 >>> 1;
    $290 = (25 - ($289))|0;
    $296 = $290;
   }
   $291 = (($287) + 4|0);
   $292 = HEAP32[$291>>2]|0;
   $293 = $292 & -8;
   $294 = ($293|0)==($psize$1|0);
   L205: do {
    if ($294) {
     $T$0$lcssa = $287;
    } else {
     $295 = $psize$1 << $296;
     $K19$057 = $295;$T$056 = $287;
     while(1) {
      $303 = $K19$057 >>> 31;
      $304 = ((($T$056) + ($303<<2)|0) + 16|0);
      $299 = HEAP32[$304>>2]|0;
      $305 = ($299|0)==(0|0);
      if ($305) {
       break;
      }
      $297 = $K19$057 << 1;
      $298 = (($299) + 4|0);
      $300 = HEAP32[$298>>2]|0;
      $301 = $300 & -8;
      $302 = ($301|0)==($psize$1|0);
      if ($302) {
       $T$0$lcssa = $299;
       break L205;
      } else {
       $K19$057 = $297;$T$056 = $299;
      }
     }
     $306 = HEAP32[((15152 + 16|0))>>2]|0;
     $307 = ($304>>>0)<($306>>>0);
     if ($307) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$304>>2] = $p$0;
      $308 = (($p$0) + 24|0);
      HEAP32[$308>>2] = $T$056;
      $309 = (($p$0) + 12|0);
      HEAP32[$309>>2] = $p$0;
      $310 = (($p$0) + 8|0);
      HEAP32[$310>>2] = $p$0;
      break L199;
     }
    }
   } while(0);
   $311 = (($T$0$lcssa) + 8|0);
   $312 = HEAP32[$311>>2]|0;
   $313 = HEAP32[((15152 + 16|0))>>2]|0;
   $314 = ($T$0$lcssa>>>0)<($313>>>0);
   if ($314) {
    _abort();
    // unreachable;
   }
   $315 = ($312>>>0)<($313>>>0);
   if ($315) {
    _abort();
    // unreachable;
   } else {
    $316 = (($312) + 12|0);
    HEAP32[$316>>2] = $p$0;
    HEAP32[$311>>2] = $p$0;
    $317 = (($p$0) + 8|0);
    HEAP32[$317>>2] = $312;
    $318 = (($p$0) + 12|0);
    HEAP32[$318>>2] = $T$0$lcssa;
    $319 = (($p$0) + 24|0);
    HEAP32[$319>>2] = 0;
    break;
   }
  }
 } while(0);
 $320 = HEAP32[((15152 + 32|0))>>2]|0;
 $321 = (($320) + -1)|0;
 HEAP32[((15152 + 32|0))>>2] = $321;
 $322 = ($321|0)==(0);
 if ($322) {
  $sp$0$in$i = ((15152 + 456|0));
 } else {
  STACKTOP = sp;return;
 }
 while(1) {
  $sp$0$i = HEAP32[$sp$0$in$i>>2]|0;
  $323 = ($sp$0$i|0)==(0|0);
  $324 = (($sp$0$i) + 8|0);
  if ($323) {
   break;
  } else {
   $sp$0$in$i = $324;
  }
 }
 HEAP32[((15152 + 32|0))>>2] = -1;
 STACKTOP = sp;return;
}
function _realloc($oldmem,$bytes) {
 $oldmem = $oldmem|0;
 $bytes = $bytes|0;
 var $$pre$i = 0, $$pre$phi$iZ2D = 0, $$sum = 0, $$sum1 = 0, $$sum10 = 0, $$sum11 = 0, $$sum12 = 0, $$sum14 = 0, $$sum15 = 0, $$sum16 = 0, $$sum17 = 0, $$sum18 = 0, $$sum19$i25 = 0, $$sum2 = 0, $$sum22 = 0, $$sum22$i29 = 0, $$sum23 = 0, $$sum23$i3 = 0, $$sum24 = 0, $$sum26 = 0;
 var $$sum27 = 0, $$sum2728$i = 0, $$sum28 = 0, $$sum30 = 0, $$sum4 = 0, $$sum5 = 0, $$sum5$i13 = 0, $$sum78$i = 0, $$sum9 = 0, $$sum910$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0;
 var $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0;
 var $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $R$0$i = 0, $R$1$i = 0, $RP$0$i = 0, $cond$i = 0, $mem$0 = 0, $or$cond = 0, $or$cond$i = 0, $storemerge$i = 0, $storemerge21$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($oldmem|0)==(0|0);
 if ($0) {
  $1 = (_malloc($bytes)|0);
  $mem$0 = $1;
  STACKTOP = sp;return ($mem$0|0);
 }
 $2 = ($bytes>>>0)>(4294967231);
 if ($2) {
  $3 = (___errno_location()|0);
  HEAP32[$3>>2] = 12;
  $mem$0 = 0;
  STACKTOP = sp;return ($mem$0|0);
 }
 $4 = ($bytes>>>0)<(11);
 if ($4) {
  $23 = 16;
 } else {
  $5 = (($bytes) + 11)|0;
  $6 = $5 & -8;
  $23 = $6;
 }
 $7 = (($oldmem) + -8|0);
 $8 = (($oldmem) + -4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $9 & -8;
 $$sum = (($10) + -8)|0;
 $11 = (($oldmem) + ($$sum)|0);
 $12 = HEAP32[((15152 + 16|0))>>2]|0;
 $13 = ($7>>>0)<($12>>>0);
 if ($13) {
  _abort();
  // unreachable;
 }
 $14 = $9 & 3;
 $15 = ($14|0)!=(1);
 $16 = ($$sum|0)>(-8);
 $or$cond$i = $15 & $16;
 if (!($or$cond$i)) {
  _abort();
  // unreachable;
 }
 $$sum2728$i = $10 | 4;
 $$sum1 = (($$sum2728$i) + -8)|0;
 $17 = (($oldmem) + ($$sum1)|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = $18 & 1;
 $20 = ($19|0)==(0);
 if ($20) {
  _abort();
  // unreachable;
 }
 $21 = ($14|0)==(0);
 do {
  if ($21) {
   $22 = ($23>>>0)<(256);
   $24 = $23 | 4;
   $25 = ($10>>>0)<($24>>>0);
   $or$cond = $22 | $25;
   if (!($or$cond)) {
    $26 = (($10) - ($23))|0;
    $27 = HEAP32[((15624 + 8|0))>>2]|0;
    $28 = $27 << 1;
    $29 = ($26>>>0)>($28>>>0);
    if (!($29)) {
     $mem$0 = $oldmem;
     STACKTOP = sp;return ($mem$0|0);
    }
   }
  } else {
   $30 = ($10>>>0)<($23>>>0);
   if (!($30)) {
    $31 = (($10) - ($23))|0;
    $32 = ($31>>>0)>(15);
    if (!($32)) {
     $mem$0 = $oldmem;
     STACKTOP = sp;return ($mem$0|0);
    }
    $$sum2 = (($23) + -8)|0;
    $33 = (($oldmem) + ($$sum2)|0);
    $34 = $9 & 1;
    $35 = $34 | $23;
    $36 = $35 | 2;
    HEAP32[$8>>2] = $36;
    $$sum23$i3 = $23 | 4;
    $$sum4 = (($$sum23$i3) + -8)|0;
    $37 = (($oldmem) + ($$sum4)|0);
    $38 = $31 | 3;
    HEAP32[$37>>2] = $38;
    $39 = HEAP32[$17>>2]|0;
    $40 = $39 | 1;
    HEAP32[$17>>2] = $40;
    _dispose_chunk($33,$31);
    $mem$0 = $oldmem;
    STACKTOP = sp;return ($mem$0|0);
   }
   $41 = HEAP32[((15152 + 24|0))>>2]|0;
   $42 = ($11|0)==($41|0);
   if ($42) {
    $43 = HEAP32[((15152 + 12|0))>>2]|0;
    $44 = (($43) + ($10))|0;
    $45 = ($44>>>0)>($23>>>0);
    if (!($45)) {
     break;
    }
    $46 = (($44) - ($23))|0;
    $$sum28 = (($23) + -8)|0;
    $47 = (($oldmem) + ($$sum28)|0);
    $48 = $9 & 1;
    $49 = $48 | $23;
    $50 = $49 | 2;
    HEAP32[$8>>2] = $50;
    $$sum22$i29 = $23 | 4;
    $$sum30 = (($$sum22$i29) + -8)|0;
    $51 = (($oldmem) + ($$sum30)|0);
    $52 = $46 | 1;
    HEAP32[$51>>2] = $52;
    HEAP32[((15152 + 24|0))>>2] = $47;
    HEAP32[((15152 + 12|0))>>2] = $46;
    $mem$0 = $oldmem;
    STACKTOP = sp;return ($mem$0|0);
   }
   $53 = HEAP32[((15152 + 20|0))>>2]|0;
   $54 = ($11|0)==($53|0);
   if ($54) {
    $55 = HEAP32[((15152 + 8|0))>>2]|0;
    $56 = (($55) + ($10))|0;
    $57 = ($56>>>0)<($23>>>0);
    if ($57) {
     break;
    }
    $58 = (($56) - ($23))|0;
    $59 = ($58>>>0)>(15);
    if ($59) {
     $$sum23 = (($23) + -8)|0;
     $60 = (($oldmem) + ($$sum23)|0);
     $$sum24 = (($56) + -8)|0;
     $61 = (($oldmem) + ($$sum24)|0);
     $62 = $9 & 1;
     $63 = $62 | $23;
     $64 = $63 | 2;
     HEAP32[$8>>2] = $64;
     $$sum19$i25 = $23 | 4;
     $$sum26 = (($$sum19$i25) + -8)|0;
     $65 = (($oldmem) + ($$sum26)|0);
     $66 = $58 | 1;
     HEAP32[$65>>2] = $66;
     HEAP32[$61>>2] = $58;
     $$sum27 = (($56) + -4)|0;
     $67 = (($oldmem) + ($$sum27)|0);
     $68 = HEAP32[$67>>2]|0;
     $69 = $68 & -2;
     HEAP32[$67>>2] = $69;
     $storemerge$i = $60;$storemerge21$i = $58;
    } else {
     $70 = $9 & 1;
     $71 = $70 | $56;
     $72 = $71 | 2;
     HEAP32[$8>>2] = $72;
     $$sum22 = (($56) + -4)|0;
     $73 = (($oldmem) + ($$sum22)|0);
     $74 = HEAP32[$73>>2]|0;
     $75 = $74 | 1;
     HEAP32[$73>>2] = $75;
     $storemerge$i = 0;$storemerge21$i = 0;
    }
    HEAP32[((15152 + 8|0))>>2] = $storemerge21$i;
    HEAP32[((15152 + 20|0))>>2] = $storemerge$i;
    $mem$0 = $oldmem;
    STACKTOP = sp;return ($mem$0|0);
   }
   $76 = $18 & 2;
   $77 = ($76|0)==(0);
   if ($77) {
    $78 = $18 & -8;
    $79 = (($78) + ($10))|0;
    $80 = ($79>>>0)<($23>>>0);
    if (!($80)) {
     $81 = (($79) - ($23))|0;
     $82 = $18 >>> 3;
     $83 = ($18>>>0)<(256);
     do {
      if ($83) {
       $84 = (($oldmem) + ($10)|0);
       $85 = HEAP32[$84>>2]|0;
       $86 = (($oldmem) + ($$sum2728$i)|0);
       $87 = HEAP32[$86>>2]|0;
       $88 = $82 << 1;
       $89 = ((15152 + ($88<<2)|0) + 40|0);
       $90 = ($85|0)==($89|0);
       if (!($90)) {
        $91 = ($85>>>0)<($12>>>0);
        if ($91) {
         _abort();
         // unreachable;
        }
        $92 = (($85) + 12|0);
        $93 = HEAP32[$92>>2]|0;
        $94 = ($93|0)==($11|0);
        if (!($94)) {
         _abort();
         // unreachable;
        }
       }
       $95 = ($87|0)==($85|0);
       if ($95) {
        $96 = 1 << $82;
        $97 = $96 ^ -1;
        $98 = HEAP32[15152>>2]|0;
        $99 = $98 & $97;
        HEAP32[15152>>2] = $99;
        break;
       }
       $100 = ($87|0)==($89|0);
       do {
        if ($100) {
         $$pre$i = (($87) + 8|0);
         $$pre$phi$iZ2D = $$pre$i;
        } else {
         $101 = ($87>>>0)<($12>>>0);
         if ($101) {
          _abort();
          // unreachable;
         }
         $102 = (($87) + 8|0);
         $103 = HEAP32[$102>>2]|0;
         $104 = ($103|0)==($11|0);
         if ($104) {
          $$pre$phi$iZ2D = $102;
          break;
         }
         _abort();
         // unreachable;
        }
       } while(0);
       $105 = (($85) + 12|0);
       HEAP32[$105>>2] = $87;
       HEAP32[$$pre$phi$iZ2D>>2] = $85;
      } else {
       $$sum5 = (($10) + 16)|0;
       $106 = (($oldmem) + ($$sum5)|0);
       $107 = HEAP32[$106>>2]|0;
       $108 = (($oldmem) + ($$sum2728$i)|0);
       $109 = HEAP32[$108>>2]|0;
       $110 = ($109|0)==($11|0);
       do {
        if ($110) {
         $$sum17 = (($10) + 12)|0;
         $120 = (($oldmem) + ($$sum17)|0);
         $121 = HEAP32[$120>>2]|0;
         $122 = ($121|0)==(0|0);
         if ($122) {
          $$sum18 = (($10) + 8)|0;
          $123 = (($oldmem) + ($$sum18)|0);
          $124 = HEAP32[$123>>2]|0;
          $125 = ($124|0)==(0|0);
          if ($125) {
           $R$1$i = 0;
           break;
          } else {
           $R$0$i = $124;$RP$0$i = $123;
          }
         } else {
          $R$0$i = $121;$RP$0$i = $120;
         }
         while(1) {
          $126 = (($R$0$i) + 20|0);
          $127 = HEAP32[$126>>2]|0;
          $128 = ($127|0)==(0|0);
          if (!($128)) {
           $R$0$i = $127;$RP$0$i = $126;
           continue;
          }
          $129 = (($R$0$i) + 16|0);
          $130 = HEAP32[$129>>2]|0;
          $131 = ($130|0)==(0|0);
          if ($131) {
           break;
          } else {
           $R$0$i = $130;$RP$0$i = $129;
          }
         }
         $132 = ($RP$0$i>>>0)<($12>>>0);
         if ($132) {
          _abort();
          // unreachable;
         } else {
          HEAP32[$RP$0$i>>2] = 0;
          $R$1$i = $R$0$i;
          break;
         }
        } else {
         $111 = (($oldmem) + ($10)|0);
         $112 = HEAP32[$111>>2]|0;
         $113 = ($112>>>0)<($12>>>0);
         if ($113) {
          _abort();
          // unreachable;
         }
         $114 = (($112) + 12|0);
         $115 = HEAP32[$114>>2]|0;
         $116 = ($115|0)==($11|0);
         if (!($116)) {
          _abort();
          // unreachable;
         }
         $117 = (($109) + 8|0);
         $118 = HEAP32[$117>>2]|0;
         $119 = ($118|0)==($11|0);
         if ($119) {
          HEAP32[$114>>2] = $109;
          HEAP32[$117>>2] = $112;
          $R$1$i = $109;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       } while(0);
       $133 = ($107|0)==(0|0);
       if (!($133)) {
        $$sum9 = (($10) + 20)|0;
        $134 = (($oldmem) + ($$sum9)|0);
        $135 = HEAP32[$134>>2]|0;
        $136 = ((15152 + ($135<<2)|0) + 304|0);
        $137 = HEAP32[$136>>2]|0;
        $138 = ($11|0)==($137|0);
        if ($138) {
         HEAP32[$136>>2] = $R$1$i;
         $cond$i = ($R$1$i|0)==(0|0);
         if ($cond$i) {
          $139 = 1 << $135;
          $140 = $139 ^ -1;
          $141 = HEAP32[((15152 + 4|0))>>2]|0;
          $142 = $141 & $140;
          HEAP32[((15152 + 4|0))>>2] = $142;
          break;
         }
        } else {
         $143 = HEAP32[((15152 + 16|0))>>2]|0;
         $144 = ($107>>>0)<($143>>>0);
         if ($144) {
          _abort();
          // unreachable;
         }
         $145 = (($107) + 16|0);
         $146 = HEAP32[$145>>2]|0;
         $147 = ($146|0)==($11|0);
         if ($147) {
          HEAP32[$145>>2] = $R$1$i;
         } else {
          $148 = (($107) + 20|0);
          HEAP32[$148>>2] = $R$1$i;
         }
         $149 = ($R$1$i|0)==(0|0);
         if ($149) {
          break;
         }
        }
        $150 = HEAP32[((15152 + 16|0))>>2]|0;
        $151 = ($R$1$i>>>0)<($150>>>0);
        if ($151) {
         _abort();
         // unreachable;
        }
        $152 = (($R$1$i) + 24|0);
        HEAP32[$152>>2] = $107;
        $$sum10 = (($10) + 8)|0;
        $153 = (($oldmem) + ($$sum10)|0);
        $154 = HEAP32[$153>>2]|0;
        $155 = ($154|0)==(0|0);
        do {
         if (!($155)) {
          $156 = HEAP32[((15152 + 16|0))>>2]|0;
          $157 = ($154>>>0)<($156>>>0);
          if ($157) {
           _abort();
           // unreachable;
          } else {
           $158 = (($R$1$i) + 16|0);
           HEAP32[$158>>2] = $154;
           $159 = (($154) + 24|0);
           HEAP32[$159>>2] = $R$1$i;
           break;
          }
         }
        } while(0);
        $$sum11 = (($10) + 12)|0;
        $160 = (($oldmem) + ($$sum11)|0);
        $161 = HEAP32[$160>>2]|0;
        $162 = ($161|0)==(0|0);
        if ($162) {
         break;
        }
        $163 = HEAP32[((15152 + 16|0))>>2]|0;
        $164 = ($161>>>0)<($163>>>0);
        if ($164) {
         _abort();
         // unreachable;
        } else {
         $165 = (($R$1$i) + 20|0);
         HEAP32[$165>>2] = $161;
         $166 = (($161) + 24|0);
         HEAP32[$166>>2] = $R$1$i;
         break;
        }
       }
      }
     } while(0);
     $167 = ($81>>>0)<(16);
     if ($167) {
      $168 = HEAP32[$8>>2]|0;
      $169 = $168 & 1;
      $170 = $79 | $169;
      $171 = $170 | 2;
      HEAP32[$8>>2] = $171;
      $$sum910$i = $79 | 4;
      $$sum16 = (($$sum910$i) + -8)|0;
      $172 = (($oldmem) + ($$sum16)|0);
      $173 = HEAP32[$172>>2]|0;
      $174 = $173 | 1;
      HEAP32[$172>>2] = $174;
      $mem$0 = $oldmem;
      STACKTOP = sp;return ($mem$0|0);
     } else {
      $$sum12 = (($23) + -8)|0;
      $175 = (($oldmem) + ($$sum12)|0);
      $176 = HEAP32[$8>>2]|0;
      $177 = $176 & 1;
      $178 = $177 | $23;
      $179 = $178 | 2;
      HEAP32[$8>>2] = $179;
      $$sum5$i13 = $23 | 4;
      $$sum14 = (($$sum5$i13) + -8)|0;
      $180 = (($oldmem) + ($$sum14)|0);
      $181 = $81 | 3;
      HEAP32[$180>>2] = $181;
      $$sum78$i = $79 | 4;
      $$sum15 = (($$sum78$i) + -8)|0;
      $182 = (($oldmem) + ($$sum15)|0);
      $183 = HEAP32[$182>>2]|0;
      $184 = $183 | 1;
      HEAP32[$182>>2] = $184;
      _dispose_chunk($175,$81);
      $mem$0 = $oldmem;
      STACKTOP = sp;return ($mem$0|0);
     }
    }
   }
  }
 } while(0);
 $185 = (_malloc($bytes)|0);
 $186 = ($185|0)==(0|0);
 if ($186) {
  $mem$0 = 0;
  STACKTOP = sp;return ($mem$0|0);
 }
 $187 = HEAP32[$8>>2]|0;
 $188 = $187 & -8;
 $189 = $187 & 3;
 $190 = ($189|0)==(0);
 $191 = $190 ? 8 : 4;
 $192 = (($188) - ($191))|0;
 $193 = ($192>>>0)<($bytes>>>0);
 $194 = $193 ? $192 : $bytes;
 _memcpy(($185|0),($oldmem|0),($194|0))|0;
 _free($oldmem);
 $mem$0 = $185;
 STACKTOP = sp;return ($mem$0|0);
}
function _dispose_chunk($p,$psize) {
 $p = $p|0;
 $psize = $psize|0;
 var $$0 = 0, $$02 = 0, $$1 = 0, $$pre = 0, $$pre$phi63Z2D = 0, $$pre$phi65Z2D = 0, $$pre$phiZ2D = 0, $$pre62 = 0, $$pre64 = 0, $$sum = 0, $$sum1 = 0, $$sum12$pre = 0, $$sum13 = 0, $$sum14 = 0, $$sum15 = 0, $$sum16 = 0, $$sum17 = 0, $$sum18 = 0, $$sum19 = 0, $$sum2 = 0;
 var $$sum20 = 0, $$sum22 = 0, $$sum23 = 0, $$sum24 = 0, $$sum25 = 0, $$sum26 = 0, $$sum27 = 0, $$sum28 = 0, $$sum29 = 0, $$sum3 = 0, $$sum30 = 0, $$sum31 = 0, $$sum4 = 0, $$sum5 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0;
 var $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0;
 var $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0;
 var $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0;
 var $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0;
 var $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0;
 var $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0;
 var $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0;
 var $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $F16$0 = 0, $I19$0 = 0, $I19$0$c = 0, $K20$049 = 0, $R$0 = 0, $R$1 = 0, $R7$0 = 0, $R7$1 = 0, $RP$0 = 0, $RP9$0 = 0, $T$0$lcssa = 0, $T$048 = 0, $cond = 0, $cond46 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = (($p) + ($psize)|0);
 $1 = (($p) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & 1;
 $4 = ($3|0)==(0);
 do {
  if ($4) {
   $5 = HEAP32[$p>>2]|0;
   $6 = $2 & 3;
   $7 = ($6|0)==(0);
   if ($7) {
    STACKTOP = sp;return;
   }
   $8 = (0 - ($5))|0;
   $9 = (($p) + ($8)|0);
   $10 = (($5) + ($psize))|0;
   $11 = HEAP32[((15152 + 16|0))>>2]|0;
   $12 = ($9>>>0)<($11>>>0);
   if ($12) {
    _abort();
    // unreachable;
   }
   $13 = HEAP32[((15152 + 20|0))>>2]|0;
   $14 = ($9|0)==($13|0);
   if ($14) {
    $$sum = (($psize) + 4)|0;
    $100 = (($p) + ($$sum)|0);
    $101 = HEAP32[$100>>2]|0;
    $102 = $101 & 3;
    $103 = ($102|0)==(3);
    if (!($103)) {
     $$0 = $9;$$02 = $10;
     break;
    }
    HEAP32[((15152 + 8|0))>>2] = $10;
    $104 = HEAP32[$100>>2]|0;
    $105 = $104 & -2;
    HEAP32[$100>>2] = $105;
    $106 = $10 | 1;
    $$sum20 = (4 - ($5))|0;
    $107 = (($p) + ($$sum20)|0);
    HEAP32[$107>>2] = $106;
    HEAP32[$0>>2] = $10;
    STACKTOP = sp;return;
   }
   $15 = $5 >>> 3;
   $16 = ($5>>>0)<(256);
   if ($16) {
    $$sum30 = (8 - ($5))|0;
    $17 = (($p) + ($$sum30)|0);
    $18 = HEAP32[$17>>2]|0;
    $$sum31 = (12 - ($5))|0;
    $19 = (($p) + ($$sum31)|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = $15 << 1;
    $22 = ((15152 + ($21<<2)|0) + 40|0);
    $23 = ($18|0)==($22|0);
    if (!($23)) {
     $24 = ($18>>>0)<($11>>>0);
     if ($24) {
      _abort();
      // unreachable;
     }
     $25 = (($18) + 12|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = ($26|0)==($9|0);
     if (!($27)) {
      _abort();
      // unreachable;
     }
    }
    $28 = ($20|0)==($18|0);
    if ($28) {
     $29 = 1 << $15;
     $30 = $29 ^ -1;
     $31 = HEAP32[15152>>2]|0;
     $32 = $31 & $30;
     HEAP32[15152>>2] = $32;
     $$0 = $9;$$02 = $10;
     break;
    }
    $33 = ($20|0)==($22|0);
    if ($33) {
     $$pre64 = (($20) + 8|0);
     $$pre$phi65Z2D = $$pre64;
    } else {
     $34 = ($20>>>0)<($11>>>0);
     if ($34) {
      _abort();
      // unreachable;
     }
     $35 = (($20) + 8|0);
     $36 = HEAP32[$35>>2]|0;
     $37 = ($36|0)==($9|0);
     if ($37) {
      $$pre$phi65Z2D = $35;
     } else {
      _abort();
      // unreachable;
     }
    }
    $38 = (($18) + 12|0);
    HEAP32[$38>>2] = $20;
    HEAP32[$$pre$phi65Z2D>>2] = $18;
    $$0 = $9;$$02 = $10;
    break;
   }
   $$sum22 = (24 - ($5))|0;
   $39 = (($p) + ($$sum22)|0);
   $40 = HEAP32[$39>>2]|0;
   $$sum23 = (12 - ($5))|0;
   $41 = (($p) + ($$sum23)|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = ($42|0)==($9|0);
   do {
    if ($43) {
     $$sum24 = (16 - ($5))|0;
     $$sum25 = (($$sum24) + 4)|0;
     $53 = (($p) + ($$sum25)|0);
     $54 = HEAP32[$53>>2]|0;
     $55 = ($54|0)==(0|0);
     if ($55) {
      $56 = (($p) + ($$sum24)|0);
      $57 = HEAP32[$56>>2]|0;
      $58 = ($57|0)==(0|0);
      if ($58) {
       $R$1 = 0;
       break;
      } else {
       $R$0 = $57;$RP$0 = $56;
      }
     } else {
      $R$0 = $54;$RP$0 = $53;
     }
     while(1) {
      $59 = (($R$0) + 20|0);
      $60 = HEAP32[$59>>2]|0;
      $61 = ($60|0)==(0|0);
      if (!($61)) {
       $R$0 = $60;$RP$0 = $59;
       continue;
      }
      $62 = (($R$0) + 16|0);
      $63 = HEAP32[$62>>2]|0;
      $64 = ($63|0)==(0|0);
      if ($64) {
       break;
      } else {
       $R$0 = $63;$RP$0 = $62;
      }
     }
     $65 = ($RP$0>>>0)<($11>>>0);
     if ($65) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$0>>2] = 0;
      $R$1 = $R$0;
      break;
     }
    } else {
     $$sum29 = (8 - ($5))|0;
     $44 = (($p) + ($$sum29)|0);
     $45 = HEAP32[$44>>2]|0;
     $46 = ($45>>>0)<($11>>>0);
     if ($46) {
      _abort();
      // unreachable;
     }
     $47 = (($45) + 12|0);
     $48 = HEAP32[$47>>2]|0;
     $49 = ($48|0)==($9|0);
     if (!($49)) {
      _abort();
      // unreachable;
     }
     $50 = (($42) + 8|0);
     $51 = HEAP32[$50>>2]|0;
     $52 = ($51|0)==($9|0);
     if ($52) {
      HEAP32[$47>>2] = $42;
      HEAP32[$50>>2] = $45;
      $R$1 = $42;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $66 = ($40|0)==(0|0);
   if ($66) {
    $$0 = $9;$$02 = $10;
   } else {
    $$sum26 = (28 - ($5))|0;
    $67 = (($p) + ($$sum26)|0);
    $68 = HEAP32[$67>>2]|0;
    $69 = ((15152 + ($68<<2)|0) + 304|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = ($9|0)==($70|0);
    if ($71) {
     HEAP32[$69>>2] = $R$1;
     $cond = ($R$1|0)==(0|0);
     if ($cond) {
      $72 = 1 << $68;
      $73 = $72 ^ -1;
      $74 = HEAP32[((15152 + 4|0))>>2]|0;
      $75 = $74 & $73;
      HEAP32[((15152 + 4|0))>>2] = $75;
      $$0 = $9;$$02 = $10;
      break;
     }
    } else {
     $76 = HEAP32[((15152 + 16|0))>>2]|0;
     $77 = ($40>>>0)<($76>>>0);
     if ($77) {
      _abort();
      // unreachable;
     }
     $78 = (($40) + 16|0);
     $79 = HEAP32[$78>>2]|0;
     $80 = ($79|0)==($9|0);
     if ($80) {
      HEAP32[$78>>2] = $R$1;
     } else {
      $81 = (($40) + 20|0);
      HEAP32[$81>>2] = $R$1;
     }
     $82 = ($R$1|0)==(0|0);
     if ($82) {
      $$0 = $9;$$02 = $10;
      break;
     }
    }
    $83 = HEAP32[((15152 + 16|0))>>2]|0;
    $84 = ($R$1>>>0)<($83>>>0);
    if ($84) {
     _abort();
     // unreachable;
    }
    $85 = (($R$1) + 24|0);
    HEAP32[$85>>2] = $40;
    $$sum27 = (16 - ($5))|0;
    $86 = (($p) + ($$sum27)|0);
    $87 = HEAP32[$86>>2]|0;
    $88 = ($87|0)==(0|0);
    do {
     if (!($88)) {
      $89 = HEAP32[((15152 + 16|0))>>2]|0;
      $90 = ($87>>>0)<($89>>>0);
      if ($90) {
       _abort();
       // unreachable;
      } else {
       $91 = (($R$1) + 16|0);
       HEAP32[$91>>2] = $87;
       $92 = (($87) + 24|0);
       HEAP32[$92>>2] = $R$1;
       break;
      }
     }
    } while(0);
    $$sum28 = (($$sum27) + 4)|0;
    $93 = (($p) + ($$sum28)|0);
    $94 = HEAP32[$93>>2]|0;
    $95 = ($94|0)==(0|0);
    if ($95) {
     $$0 = $9;$$02 = $10;
    } else {
     $96 = HEAP32[((15152 + 16|0))>>2]|0;
     $97 = ($94>>>0)<($96>>>0);
     if ($97) {
      _abort();
      // unreachable;
     } else {
      $98 = (($R$1) + 20|0);
      HEAP32[$98>>2] = $94;
      $99 = (($94) + 24|0);
      HEAP32[$99>>2] = $R$1;
      $$0 = $9;$$02 = $10;
      break;
     }
    }
   }
  } else {
   $$0 = $p;$$02 = $psize;
  }
 } while(0);
 $108 = HEAP32[((15152 + 16|0))>>2]|0;
 $109 = ($0>>>0)<($108>>>0);
 if ($109) {
  _abort();
  // unreachable;
 }
 $$sum1 = (($psize) + 4)|0;
 $110 = (($p) + ($$sum1)|0);
 $111 = HEAP32[$110>>2]|0;
 $112 = $111 & 2;
 $113 = ($112|0)==(0);
 if ($113) {
  $114 = HEAP32[((15152 + 24|0))>>2]|0;
  $115 = ($0|0)==($114|0);
  if ($115) {
   $116 = HEAP32[((15152 + 12|0))>>2]|0;
   $117 = (($116) + ($$02))|0;
   HEAP32[((15152 + 12|0))>>2] = $117;
   HEAP32[((15152 + 24|0))>>2] = $$0;
   $118 = $117 | 1;
   $119 = (($$0) + 4|0);
   HEAP32[$119>>2] = $118;
   $120 = HEAP32[((15152 + 20|0))>>2]|0;
   $121 = ($$0|0)==($120|0);
   if (!($121)) {
    STACKTOP = sp;return;
   }
   HEAP32[((15152 + 20|0))>>2] = 0;
   HEAP32[((15152 + 8|0))>>2] = 0;
   STACKTOP = sp;return;
  }
  $122 = HEAP32[((15152 + 20|0))>>2]|0;
  $123 = ($0|0)==($122|0);
  if ($123) {
   $124 = HEAP32[((15152 + 8|0))>>2]|0;
   $125 = (($124) + ($$02))|0;
   HEAP32[((15152 + 8|0))>>2] = $125;
   HEAP32[((15152 + 20|0))>>2] = $$0;
   $126 = $125 | 1;
   $127 = (($$0) + 4|0);
   HEAP32[$127>>2] = $126;
   $128 = (($$0) + ($125)|0);
   HEAP32[$128>>2] = $125;
   STACKTOP = sp;return;
  }
  $129 = $111 & -8;
  $130 = (($129) + ($$02))|0;
  $131 = $111 >>> 3;
  $132 = ($111>>>0)<(256);
  do {
   if ($132) {
    $$sum18 = (($psize) + 8)|0;
    $133 = (($p) + ($$sum18)|0);
    $134 = HEAP32[$133>>2]|0;
    $$sum19 = (($psize) + 12)|0;
    $135 = (($p) + ($$sum19)|0);
    $136 = HEAP32[$135>>2]|0;
    $137 = $131 << 1;
    $138 = ((15152 + ($137<<2)|0) + 40|0);
    $139 = ($134|0)==($138|0);
    if (!($139)) {
     $140 = ($134>>>0)<($108>>>0);
     if ($140) {
      _abort();
      // unreachable;
     }
     $141 = (($134) + 12|0);
     $142 = HEAP32[$141>>2]|0;
     $143 = ($142|0)==($0|0);
     if (!($143)) {
      _abort();
      // unreachable;
     }
    }
    $144 = ($136|0)==($134|0);
    if ($144) {
     $145 = 1 << $131;
     $146 = $145 ^ -1;
     $147 = HEAP32[15152>>2]|0;
     $148 = $147 & $146;
     HEAP32[15152>>2] = $148;
     break;
    }
    $149 = ($136|0)==($138|0);
    if ($149) {
     $$pre62 = (($136) + 8|0);
     $$pre$phi63Z2D = $$pre62;
    } else {
     $150 = ($136>>>0)<($108>>>0);
     if ($150) {
      _abort();
      // unreachable;
     }
     $151 = (($136) + 8|0);
     $152 = HEAP32[$151>>2]|0;
     $153 = ($152|0)==($0|0);
     if ($153) {
      $$pre$phi63Z2D = $151;
     } else {
      _abort();
      // unreachable;
     }
    }
    $154 = (($134) + 12|0);
    HEAP32[$154>>2] = $136;
    HEAP32[$$pre$phi63Z2D>>2] = $134;
   } else {
    $$sum2 = (($psize) + 24)|0;
    $155 = (($p) + ($$sum2)|0);
    $156 = HEAP32[$155>>2]|0;
    $$sum3 = (($psize) + 12)|0;
    $157 = (($p) + ($$sum3)|0);
    $158 = HEAP32[$157>>2]|0;
    $159 = ($158|0)==($0|0);
    do {
     if ($159) {
      $$sum5 = (($psize) + 20)|0;
      $169 = (($p) + ($$sum5)|0);
      $170 = HEAP32[$169>>2]|0;
      $171 = ($170|0)==(0|0);
      if ($171) {
       $$sum4 = (($psize) + 16)|0;
       $172 = (($p) + ($$sum4)|0);
       $173 = HEAP32[$172>>2]|0;
       $174 = ($173|0)==(0|0);
       if ($174) {
        $R7$1 = 0;
        break;
       } else {
        $R7$0 = $173;$RP9$0 = $172;
       }
      } else {
       $R7$0 = $170;$RP9$0 = $169;
      }
      while(1) {
       $175 = (($R7$0) + 20|0);
       $176 = HEAP32[$175>>2]|0;
       $177 = ($176|0)==(0|0);
       if (!($177)) {
        $R7$0 = $176;$RP9$0 = $175;
        continue;
       }
       $178 = (($R7$0) + 16|0);
       $179 = HEAP32[$178>>2]|0;
       $180 = ($179|0)==(0|0);
       if ($180) {
        break;
       } else {
        $R7$0 = $179;$RP9$0 = $178;
       }
      }
      $181 = ($RP9$0>>>0)<($108>>>0);
      if ($181) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$RP9$0>>2] = 0;
       $R7$1 = $R7$0;
       break;
      }
     } else {
      $$sum17 = (($psize) + 8)|0;
      $160 = (($p) + ($$sum17)|0);
      $161 = HEAP32[$160>>2]|0;
      $162 = ($161>>>0)<($108>>>0);
      if ($162) {
       _abort();
       // unreachable;
      }
      $163 = (($161) + 12|0);
      $164 = HEAP32[$163>>2]|0;
      $165 = ($164|0)==($0|0);
      if (!($165)) {
       _abort();
       // unreachable;
      }
      $166 = (($158) + 8|0);
      $167 = HEAP32[$166>>2]|0;
      $168 = ($167|0)==($0|0);
      if ($168) {
       HEAP32[$163>>2] = $158;
       HEAP32[$166>>2] = $161;
       $R7$1 = $158;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $182 = ($156|0)==(0|0);
    if (!($182)) {
     $$sum14 = (($psize) + 28)|0;
     $183 = (($p) + ($$sum14)|0);
     $184 = HEAP32[$183>>2]|0;
     $185 = ((15152 + ($184<<2)|0) + 304|0);
     $186 = HEAP32[$185>>2]|0;
     $187 = ($0|0)==($186|0);
     if ($187) {
      HEAP32[$185>>2] = $R7$1;
      $cond46 = ($R7$1|0)==(0|0);
      if ($cond46) {
       $188 = 1 << $184;
       $189 = $188 ^ -1;
       $190 = HEAP32[((15152 + 4|0))>>2]|0;
       $191 = $190 & $189;
       HEAP32[((15152 + 4|0))>>2] = $191;
       break;
      }
     } else {
      $192 = HEAP32[((15152 + 16|0))>>2]|0;
      $193 = ($156>>>0)<($192>>>0);
      if ($193) {
       _abort();
       // unreachable;
      }
      $194 = (($156) + 16|0);
      $195 = HEAP32[$194>>2]|0;
      $196 = ($195|0)==($0|0);
      if ($196) {
       HEAP32[$194>>2] = $R7$1;
      } else {
       $197 = (($156) + 20|0);
       HEAP32[$197>>2] = $R7$1;
      }
      $198 = ($R7$1|0)==(0|0);
      if ($198) {
       break;
      }
     }
     $199 = HEAP32[((15152 + 16|0))>>2]|0;
     $200 = ($R7$1>>>0)<($199>>>0);
     if ($200) {
      _abort();
      // unreachable;
     }
     $201 = (($R7$1) + 24|0);
     HEAP32[$201>>2] = $156;
     $$sum15 = (($psize) + 16)|0;
     $202 = (($p) + ($$sum15)|0);
     $203 = HEAP32[$202>>2]|0;
     $204 = ($203|0)==(0|0);
     do {
      if (!($204)) {
       $205 = HEAP32[((15152 + 16|0))>>2]|0;
       $206 = ($203>>>0)<($205>>>0);
       if ($206) {
        _abort();
        // unreachable;
       } else {
        $207 = (($R7$1) + 16|0);
        HEAP32[$207>>2] = $203;
        $208 = (($203) + 24|0);
        HEAP32[$208>>2] = $R7$1;
        break;
       }
      }
     } while(0);
     $$sum16 = (($psize) + 20)|0;
     $209 = (($p) + ($$sum16)|0);
     $210 = HEAP32[$209>>2]|0;
     $211 = ($210|0)==(0|0);
     if (!($211)) {
      $212 = HEAP32[((15152 + 16|0))>>2]|0;
      $213 = ($210>>>0)<($212>>>0);
      if ($213) {
       _abort();
       // unreachable;
      } else {
       $214 = (($R7$1) + 20|0);
       HEAP32[$214>>2] = $210;
       $215 = (($210) + 24|0);
       HEAP32[$215>>2] = $R7$1;
       break;
      }
     }
    }
   }
  } while(0);
  $216 = $130 | 1;
  $217 = (($$0) + 4|0);
  HEAP32[$217>>2] = $216;
  $218 = (($$0) + ($130)|0);
  HEAP32[$218>>2] = $130;
  $219 = HEAP32[((15152 + 20|0))>>2]|0;
  $220 = ($$0|0)==($219|0);
  if ($220) {
   HEAP32[((15152 + 8|0))>>2] = $130;
   STACKTOP = sp;return;
  } else {
   $$1 = $130;
  }
 } else {
  $221 = $111 & -2;
  HEAP32[$110>>2] = $221;
  $222 = $$02 | 1;
  $223 = (($$0) + 4|0);
  HEAP32[$223>>2] = $222;
  $224 = (($$0) + ($$02)|0);
  HEAP32[$224>>2] = $$02;
  $$1 = $$02;
 }
 $225 = $$1 >>> 3;
 $226 = ($$1>>>0)<(256);
 if ($226) {
  $227 = $225 << 1;
  $228 = ((15152 + ($227<<2)|0) + 40|0);
  $229 = HEAP32[15152>>2]|0;
  $230 = 1 << $225;
  $231 = $229 & $230;
  $232 = ($231|0)==(0);
  if ($232) {
   $233 = $229 | $230;
   HEAP32[15152>>2] = $233;
   $$sum12$pre = (($227) + 2)|0;
   $$pre = ((15152 + ($$sum12$pre<<2)|0) + 40|0);
   $$pre$phiZ2D = $$pre;$F16$0 = $228;
  } else {
   $$sum13 = (($227) + 2)|0;
   $234 = ((15152 + ($$sum13<<2)|0) + 40|0);
   $235 = HEAP32[$234>>2]|0;
   $236 = HEAP32[((15152 + 16|0))>>2]|0;
   $237 = ($235>>>0)<($236>>>0);
   if ($237) {
    _abort();
    // unreachable;
   } else {
    $$pre$phiZ2D = $234;$F16$0 = $235;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $$0;
  $238 = (($F16$0) + 12|0);
  HEAP32[$238>>2] = $$0;
  $239 = (($$0) + 8|0);
  HEAP32[$239>>2] = $F16$0;
  $240 = (($$0) + 12|0);
  HEAP32[$240>>2] = $228;
  STACKTOP = sp;return;
 }
 $241 = $$1 >>> 8;
 $242 = ($241|0)==(0);
 if ($242) {
  $I19$0 = 0;
 } else {
  $243 = ($$1>>>0)>(16777215);
  if ($243) {
   $I19$0 = 31;
  } else {
   $244 = (($241) + 1048320)|0;
   $245 = $244 >>> 16;
   $246 = $245 & 8;
   $247 = $241 << $246;
   $248 = (($247) + 520192)|0;
   $249 = $248 >>> 16;
   $250 = $249 & 4;
   $251 = $250 | $246;
   $252 = $247 << $250;
   $253 = (($252) + 245760)|0;
   $254 = $253 >>> 16;
   $255 = $254 & 2;
   $256 = $251 | $255;
   $257 = (14 - ($256))|0;
   $258 = $252 << $255;
   $259 = $258 >>> 15;
   $260 = (($257) + ($259))|0;
   $261 = $260 << 1;
   $262 = (($260) + 7)|0;
   $263 = $$1 >>> $262;
   $264 = $263 & 1;
   $265 = $264 | $261;
   $I19$0 = $265;
  }
 }
 $266 = ((15152 + ($I19$0<<2)|0) + 304|0);
 $267 = (($$0) + 28|0);
 $I19$0$c = $I19$0;
 HEAP32[$267>>2] = $I19$0$c;
 $268 = (($$0) + 20|0);
 HEAP32[$268>>2] = 0;
 $269 = (($$0) + 16|0);
 HEAP32[$269>>2] = 0;
 $270 = HEAP32[((15152 + 4|0))>>2]|0;
 $271 = 1 << $I19$0;
 $272 = $270 & $271;
 $273 = ($272|0)==(0);
 if ($273) {
  $274 = $270 | $271;
  HEAP32[((15152 + 4|0))>>2] = $274;
  HEAP32[$266>>2] = $$0;
  $275 = (($$0) + 24|0);
  HEAP32[$275>>2] = $266;
  $276 = (($$0) + 12|0);
  HEAP32[$276>>2] = $$0;
  $277 = (($$0) + 8|0);
  HEAP32[$277>>2] = $$0;
  STACKTOP = sp;return;
 }
 $278 = HEAP32[$266>>2]|0;
 $279 = ($I19$0|0)==(31);
 if ($279) {
  $287 = 0;
 } else {
  $280 = $I19$0 >>> 1;
  $281 = (25 - ($280))|0;
  $287 = $281;
 }
 $282 = (($278) + 4|0);
 $283 = HEAP32[$282>>2]|0;
 $284 = $283 & -8;
 $285 = ($284|0)==($$1|0);
 L194: do {
  if ($285) {
   $T$0$lcssa = $278;
  } else {
   $286 = $$1 << $287;
   $K20$049 = $286;$T$048 = $278;
   while(1) {
    $294 = $K20$049 >>> 31;
    $295 = ((($T$048) + ($294<<2)|0) + 16|0);
    $290 = HEAP32[$295>>2]|0;
    $296 = ($290|0)==(0|0);
    if ($296) {
     break;
    }
    $288 = $K20$049 << 1;
    $289 = (($290) + 4|0);
    $291 = HEAP32[$289>>2]|0;
    $292 = $291 & -8;
    $293 = ($292|0)==($$1|0);
    if ($293) {
     $T$0$lcssa = $290;
     break L194;
    } else {
     $K20$049 = $288;$T$048 = $290;
    }
   }
   $297 = HEAP32[((15152 + 16|0))>>2]|0;
   $298 = ($295>>>0)<($297>>>0);
   if ($298) {
    _abort();
    // unreachable;
   }
   HEAP32[$295>>2] = $$0;
   $299 = (($$0) + 24|0);
   HEAP32[$299>>2] = $T$048;
   $300 = (($$0) + 12|0);
   HEAP32[$300>>2] = $$0;
   $301 = (($$0) + 8|0);
   HEAP32[$301>>2] = $$0;
   STACKTOP = sp;return;
  }
 } while(0);
 $302 = (($T$0$lcssa) + 8|0);
 $303 = HEAP32[$302>>2]|0;
 $304 = HEAP32[((15152 + 16|0))>>2]|0;
 $305 = ($T$0$lcssa>>>0)<($304>>>0);
 if ($305) {
  _abort();
  // unreachable;
 }
 $306 = ($303>>>0)<($304>>>0);
 if ($306) {
  _abort();
  // unreachable;
 }
 $307 = (($303) + 12|0);
 HEAP32[$307>>2] = $$0;
 HEAP32[$302>>2] = $$0;
 $308 = (($$0) + 8|0);
 HEAP32[$308>>2] = $303;
 $309 = (($$0) + 12|0);
 HEAP32[$309>>2] = $T$0$lcssa;
 $310 = (($$0) + 24|0);
 HEAP32[$310>>2] = 0;
 STACKTOP = sp;return;
}
function __ZNSt9bad_allocD0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt9exceptionD2Ev(($this|0));
 $0 = ($this|0)==(0|0);
 if (!($0)) {
  _free($this);
 }
 STACKTOP = sp;return;
}
function __ZNSt9bad_allocD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt9exceptionD2Ev(($this|0));
 STACKTOP = sp;return;
}
function __ZNKSt9bad_alloc4whatEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return (15680|0);
}
function ___intscan($f,$base,$pok,$0,$1) {
 $f = $f|0;
 $base = $base|0;
 $pok = $pok|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $$1 = 0, $$121 = 0, $$122 = 0, $$18 = 0, $$19 = 0, $$base = 0, $$base16 = 0, $$lcssa = 0, $$pre = 0, $$sum = 0, $$sum10 = 0, $$sum11 = 0, $$sum12 = 0, $$sum13 = 0, $$sum1352 = 0, $$sum14 = 0, $$sum15 = 0, $$sum9 = 0, $$sum934 = 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
 var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0;
 var $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0;
 var $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0;
 var $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0;
 var $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $c$0 = 0, $c$1 = 0, $c$123 = 0, $c$2$be = 0, $c$2$lcssa = 0, $c$3$be = 0, $c$3$lcssa = 0, $c$359 = 0, $c$4$be = 0, $c$4$lcssa = 0, $c$5$be = 0, $c$6$be = 0, $c$6$lcssa = 0, $c$7$be = 0, $c$744 = 0, $c$8 = 0, $c$9$be = 0, $neg$0 = 0;
 var $or$cond = 0, $or$cond17 = 0, $or$cond20 = 0, $or$cond26 = 0, $or$cond2628 = 0, $or$cond7 = 0, $phitmp93 = 0, $x$068 = 0, $x$135 = 0, $x$253 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($base>>>0)>(36);
 if ($2) {
  $5 = (___errno_location()|0);
  HEAP32[$5>>2] = 22;
  $294 = 0;$295 = 0;
  tempRet0 = $294;
  STACKTOP = sp;return ($295|0);
 }
 $3 = (($f) + 4|0);
 $4 = (($f) + 100|0);
 while(1) {
  $6 = HEAP32[$3>>2]|0;
  $7 = HEAP32[$4>>2]|0;
  $8 = ($6>>>0)<($7>>>0);
  if ($8) {
   $9 = (($6) + 1|0);
   HEAP32[$3>>2] = $9;
   $10 = HEAP8[$6>>0]|0;
   $11 = $10&255;
   $14 = $11;
  } else {
   $12 = (___shgetc($f)|0);
   $14 = $12;
  }
  $13 = ($14|0)==(32);
  $15 = (($14) + -9)|0;
  $16 = ($15>>>0)<(5);
  $or$cond7 = $13 | $16;
  if (!($or$cond7)) {
   break;
  }
 }
 $17 = ($14|0)==(45);
 do {
  if ((($14|0) == 43) | (($14|0) == 45)) {
   $18 = $17 << 31 >> 31;
   $19 = HEAP32[$3>>2]|0;
   $20 = HEAP32[$4>>2]|0;
   $21 = ($19>>>0)<($20>>>0);
   if ($21) {
    $22 = (($19) + 1|0);
    HEAP32[$3>>2] = $22;
    $23 = HEAP8[$19>>0]|0;
    $24 = $23&255;
    $c$0 = $24;$neg$0 = $18;
    break;
   } else {
    $25 = (___shgetc($f)|0);
    $c$0 = $25;$neg$0 = $18;
    break;
   }
  } else {
   $c$0 = $14;$neg$0 = 0;
  }
 } while(0);
 $26 = ($base|0)==(0);
 $27 = $base & -17;
 $28 = ($27|0)==(0);
 $29 = ($c$0|0)==(48);
 $or$cond = $28 & $29;
 do {
  if ($or$cond) {
   $30 = HEAP32[$3>>2]|0;
   $31 = HEAP32[$4>>2]|0;
   $32 = ($30>>>0)<($31>>>0);
   if ($32) {
    $33 = (($30) + 1|0);
    HEAP32[$3>>2] = $33;
    $34 = HEAP8[$30>>0]|0;
    $35 = $34&255;
    $38 = $35;
   } else {
    $36 = (___shgetc($f)|0);
    $38 = $36;
   }
   $37 = $38 | 32;
   $39 = ($37|0)==(120);
   if (!($39)) {
    $$base = $26 ? 8 : $base;
    $$1 = $$base;$c$1 = $38;
    label = 32;
    break;
   }
   $40 = HEAP32[$3>>2]|0;
   $41 = HEAP32[$4>>2]|0;
   $42 = ($40>>>0)<($41>>>0);
   if ($42) {
    $43 = (($40) + 1|0);
    HEAP32[$3>>2] = $43;
    $44 = HEAP8[$40>>0]|0;
    $45 = $44&255;
    $47 = $45;
   } else {
    $46 = (___shgetc($f)|0);
    $47 = $46;
   }
   $$sum15 = (($47) + 1)|0;
   $48 = (15728 + ($$sum15)|0);
   $49 = HEAP8[$48>>0]|0;
   $50 = ($49&255)>(15);
   if ($50) {
    $51 = HEAP32[$4>>2]|0;
    $52 = ($51|0)==(0|0);
    if (!($52)) {
     $53 = HEAP32[$3>>2]|0;
     $54 = (($53) + -1|0);
     HEAP32[$3>>2] = $54;
    }
    $55 = ($pok|0)==(0);
    if ($55) {
     $58 = (($f) + 104|0);
     HEAP32[$58>>2] = 0;
     $59 = (($f) + 8|0);
     $60 = HEAP32[$59>>2]|0;
     $61 = HEAP32[$3>>2]|0;
     $62 = $60;
     $63 = $61;
     $64 = (($62) - ($63))|0;
     $65 = (($f) + 108|0);
     HEAP32[$65>>2] = $64;
     HEAP32[$4>>2] = $60;
     $294 = 0;$295 = 0;
     tempRet0 = $294;
     STACKTOP = sp;return ($295|0);
    }
    if ($52) {
     $294 = 0;$295 = 0;
     tempRet0 = $294;
     STACKTOP = sp;return ($295|0);
    }
    $56 = HEAP32[$3>>2]|0;
    $57 = (($56) + -1|0);
    HEAP32[$3>>2] = $57;
    $294 = 0;$295 = 0;
    tempRet0 = $294;
    STACKTOP = sp;return ($295|0);
   } else {
    $$122 = 16;$c$123 = $47;
    label = 47;
   }
  } else {
   $$base16 = $26 ? 10 : $base;
   $$sum = (($c$0) + 1)|0;
   $66 = (15728 + ($$sum)|0);
   $67 = HEAP8[$66>>0]|0;
   $68 = $67&255;
   $69 = ($68>>>0)<($$base16>>>0);
   if ($69) {
    $$1 = $$base16;$c$1 = $c$0;
    label = 32;
   } else {
    $70 = HEAP32[$4>>2]|0;
    $71 = ($70|0)==(0|0);
    $$pre = HEAP32[$3>>2]|0;
    if ($71) {
     $78 = $$pre;
    } else {
     $72 = (($$pre) + -1|0);
     HEAP32[$3>>2] = $72;
     $78 = $72;
    }
    $73 = (($f) + 104|0);
    HEAP32[$73>>2] = 0;
    $74 = (($f) + 8|0);
    $75 = HEAP32[$74>>2]|0;
    $76 = $75;
    $77 = $78;
    $79 = (($76) - ($77))|0;
    $80 = (($f) + 108|0);
    HEAP32[$80>>2] = $79;
    HEAP32[$4>>2] = $75;
    $81 = (___errno_location()|0);
    HEAP32[$81>>2] = 22;
    $294 = 0;$295 = 0;
    tempRet0 = $294;
    STACKTOP = sp;return ($295|0);
   }
  }
 } while(0);
 if ((label|0) == 32) {
  $82 = ($$1|0)==(10);
  if ($82) {
   $83 = (($c$1) + -48)|0;
   $84 = ($83>>>0)<(10);
   if ($84) {
    $86 = $83;$x$068 = 0;
    while(1) {
     $85 = (($x$068) + ($86))|0;
     $87 = HEAP32[$3>>2]|0;
     $88 = HEAP32[$4>>2]|0;
     $89 = ($87>>>0)<($88>>>0);
     if ($89) {
      $90 = (($87) + 1|0);
      HEAP32[$3>>2] = $90;
      $91 = HEAP8[$87>>0]|0;
      $92 = $91&255;
      $c$2$be = $92;
     } else {
      $93 = (___shgetc($f)|0);
      $c$2$be = $93;
     }
     $94 = (($c$2$be) + -48)|0;
     $95 = ($94>>>0)<(10);
     $96 = ($85>>>0)<(429496729);
     $$ = $95 & $96;
     if (!($$)) {
      break;
     }
     $phitmp93 = ($85*10)|0;
     $86 = $94;$x$068 = $phitmp93;
    }
    $296 = $85;$297 = 0;$c$2$lcssa = $c$2$be;
   } else {
    $296 = 0;$297 = 0;$c$2$lcssa = $c$1;
   }
   $97 = (($c$2$lcssa) + -48)|0;
   $98 = ($97>>>0)<(10);
   if ($98) {
    $100 = $297;$104 = $97;$99 = $296;$c$359 = $c$2$lcssa;
    while(1) {
     $101 = (___muldi3(($99|0),($100|0),10,0)|0);
     $102 = tempRet0;
     $103 = ($104|0)<(0);
     $105 = $103 << 31 >> 31;
     $106 = $104 ^ -1;
     $107 = $105 ^ -1;
     $108 = ($102>>>0)>($107>>>0);
     $109 = ($102|0)==($107|0);
     $110 = ($101>>>0)>($106>>>0);
     $111 = $109 & $110;
     $112 = $108 | $111;
     if ($112) {
      $$lcssa = $104;$298 = $99;$299 = $100;$c$3$lcssa = $c$359;
      break;
     }
     $113 = (_i64Add(($101|0),($102|0),($104|0),($105|0))|0);
     $114 = tempRet0;
     $115 = HEAP32[$3>>2]|0;
     $116 = HEAP32[$4>>2]|0;
     $117 = ($115>>>0)<($116>>>0);
     if ($117) {
      $118 = (($115) + 1|0);
      HEAP32[$3>>2] = $118;
      $119 = HEAP8[$115>>0]|0;
      $120 = $119&255;
      $c$3$be = $120;
     } else {
      $121 = (___shgetc($f)|0);
      $c$3$be = $121;
     }
     $122 = (($c$3$be) + -48)|0;
     $123 = ($122>>>0)<(10);
     $124 = ($114>>>0)<(429496729);
     $125 = ($114|0)==(429496729);
     $126 = ($113>>>0)<(2576980378);
     $127 = $125 & $126;
     $128 = $124 | $127;
     $or$cond17 = $123 & $128;
     if ($or$cond17) {
      $100 = $114;$104 = $122;$99 = $113;$c$359 = $c$3$be;
     } else {
      $$lcssa = $122;$298 = $113;$299 = $114;$c$3$lcssa = $c$3$be;
      break;
     }
    }
    $129 = ($$lcssa>>>0)>(9);
    if ($129) {
     $268 = $299;$271 = $298;
    } else {
     $$121 = 10;$300 = $298;$301 = $299;$c$8 = $c$3$lcssa;
     label = 73;
    }
   } else {
    $268 = $297;$271 = $296;
   }
  } else {
   $$122 = $$1;$c$123 = $c$1;
   label = 47;
  }
 }
 L70: do {
  if ((label|0) == 47) {
   $130 = (($$122) + -1)|0;
   $131 = $130 & $$122;
   $132 = ($131|0)==(0);
   if ($132) {
    $137 = ($$122*23)|0;
    $138 = $137 >>> 5;
    $139 = $138 & 7;
    $140 = (15992 + ($139)|0);
    $141 = HEAP8[$140>>0]|0;
    $142 = $141 << 24 >> 24;
    $$sum934 = (($c$123) + 1)|0;
    $143 = (15728 + ($$sum934)|0);
    $144 = HEAP8[$143>>0]|0;
    $145 = $144&255;
    $146 = ($145>>>0)<($$122>>>0);
    if ($146) {
     $149 = $145;$x$135 = 0;
     while(1) {
      $147 = $x$135 << $142;
      $148 = $149 | $147;
      $150 = HEAP32[$3>>2]|0;
      $151 = HEAP32[$4>>2]|0;
      $152 = ($150>>>0)<($151>>>0);
      if ($152) {
       $153 = (($150) + 1|0);
       HEAP32[$3>>2] = $153;
       $154 = HEAP8[$150>>0]|0;
       $155 = $154&255;
       $c$4$be = $155;
      } else {
       $156 = (___shgetc($f)|0);
       $c$4$be = $156;
      }
      $$sum9 = (($c$4$be) + 1)|0;
      $157 = (15728 + ($$sum9)|0);
      $158 = HEAP8[$157>>0]|0;
      $159 = $158&255;
      $160 = ($159>>>0)<($$122>>>0);
      $161 = ($148>>>0)<(134217728);
      $$18 = $160 & $161;
      if ($$18) {
       $149 = $159;$x$135 = $148;
      } else {
       break;
      }
     }
     $165 = $158;$168 = 0;$171 = $148;$c$4$lcssa = $c$4$be;
    } else {
     $165 = $144;$168 = 0;$171 = 0;$c$4$lcssa = $c$123;
    }
    $162 = (_bitshift64Lshr(-1,-1,($142|0))|0);
    $163 = tempRet0;
    $164 = $165&255;
    $166 = ($164>>>0)>=($$122>>>0);
    $167 = ($168>>>0)>($163>>>0);
    $169 = ($168|0)==($163|0);
    $170 = ($171>>>0)>($162>>>0);
    $172 = $169 & $170;
    $173 = $167 | $172;
    $or$cond2628 = $166 | $173;
    if ($or$cond2628) {
     $$121 = $$122;$300 = $171;$301 = $168;$c$8 = $c$4$lcssa;
     label = 73;
     break;
    } else {
     $174 = $171;$175 = $168;$179 = $165;
    }
    while(1) {
     $176 = (_bitshift64Shl(($174|0),($175|0),($142|0))|0);
     $177 = tempRet0;
     $178 = $179&255;
     $180 = $178 | $176;
     $181 = HEAP32[$3>>2]|0;
     $182 = HEAP32[$4>>2]|0;
     $183 = ($181>>>0)<($182>>>0);
     if ($183) {
      $184 = (($181) + 1|0);
      HEAP32[$3>>2] = $184;
      $185 = HEAP8[$181>>0]|0;
      $186 = $185&255;
      $c$5$be = $186;
     } else {
      $187 = (___shgetc($f)|0);
      $c$5$be = $187;
     }
     $$sum10 = (($c$5$be) + 1)|0;
     $188 = (15728 + ($$sum10)|0);
     $189 = HEAP8[$188>>0]|0;
     $190 = $189&255;
     $191 = ($190>>>0)>=($$122>>>0);
     $192 = ($177>>>0)>($163>>>0);
     $193 = ($177|0)==($163|0);
     $194 = ($180>>>0)>($162>>>0);
     $195 = $193 & $194;
     $196 = $192 | $195;
     $or$cond26 = $191 | $196;
     if ($or$cond26) {
      $$121 = $$122;$300 = $180;$301 = $177;$c$8 = $c$5$be;
      label = 73;
      break L70;
     } else {
      $174 = $180;$175 = $177;$179 = $189;
     }
    }
   }
   $$sum1352 = (($c$123) + 1)|0;
   $133 = (15728 + ($$sum1352)|0);
   $134 = HEAP8[$133>>0]|0;
   $135 = $134&255;
   $136 = ($135>>>0)<($$122>>>0);
   if ($136) {
    $199 = $135;$x$253 = 0;
    while(1) {
     $197 = Math_imul($x$253, $$122)|0;
     $198 = (($199) + ($197))|0;
     $200 = HEAP32[$3>>2]|0;
     $201 = HEAP32[$4>>2]|0;
     $202 = ($200>>>0)<($201>>>0);
     if ($202) {
      $203 = (($200) + 1|0);
      HEAP32[$3>>2] = $203;
      $204 = HEAP8[$200>>0]|0;
      $205 = $204&255;
      $c$6$be = $205;
     } else {
      $206 = (___shgetc($f)|0);
      $c$6$be = $206;
     }
     $$sum13 = (($c$6$be) + 1)|0;
     $207 = (15728 + ($$sum13)|0);
     $208 = HEAP8[$207>>0]|0;
     $209 = $208&255;
     $210 = ($209>>>0)<($$122>>>0);
     $211 = ($198>>>0)<(119304647);
     $$19 = $210 & $211;
     if ($$19) {
      $199 = $209;$x$253 = $198;
     } else {
      break;
     }
    }
    $213 = $208;$302 = $198;$303 = 0;$c$6$lcssa = $c$6$be;
   } else {
    $213 = $134;$302 = 0;$303 = 0;$c$6$lcssa = $c$123;
   }
   $212 = $213&255;
   $214 = ($212>>>0)<($$122>>>0);
   if ($214) {
    $215 = (___udivdi3(-1,-1,($$122|0),0)|0);
    $216 = tempRet0;
    $218 = $303;$221 = $302;$227 = $213;$c$744 = $c$6$lcssa;
    while(1) {
     $217 = ($218>>>0)>($216>>>0);
     $219 = ($218|0)==($216|0);
     $220 = ($221>>>0)>($215>>>0);
     $222 = $219 & $220;
     $223 = $217 | $222;
     if ($223) {
      $$121 = $$122;$300 = $221;$301 = $218;$c$8 = $c$744;
      label = 73;
      break L70;
     }
     $224 = (___muldi3(($221|0),($218|0),($$122|0),0)|0);
     $225 = tempRet0;
     $226 = $227&255;
     $228 = $226 ^ -1;
     $229 = ($225>>>0)>(4294967295);
     $230 = ($225|0)==(-1);
     $231 = ($224>>>0)>($228>>>0);
     $232 = $230 & $231;
     $233 = $229 | $232;
     if ($233) {
      $$121 = $$122;$300 = $221;$301 = $218;$c$8 = $c$744;
      label = 73;
      break L70;
     }
     $234 = (_i64Add(($226|0),0,($224|0),($225|0))|0);
     $235 = tempRet0;
     $236 = HEAP32[$3>>2]|0;
     $237 = HEAP32[$4>>2]|0;
     $238 = ($236>>>0)<($237>>>0);
     if ($238) {
      $239 = (($236) + 1|0);
      HEAP32[$3>>2] = $239;
      $240 = HEAP8[$236>>0]|0;
      $241 = $240&255;
      $c$7$be = $241;
     } else {
      $242 = (___shgetc($f)|0);
      $c$7$be = $242;
     }
     $$sum14 = (($c$7$be) + 1)|0;
     $243 = (15728 + ($$sum14)|0);
     $244 = HEAP8[$243>>0]|0;
     $245 = $244&255;
     $246 = ($245>>>0)<($$122>>>0);
     if ($246) {
      $218 = $235;$221 = $234;$227 = $244;$c$744 = $c$7$be;
     } else {
      $$121 = $$122;$300 = $234;$301 = $235;$c$8 = $c$7$be;
      label = 73;
      break;
     }
    }
   } else {
    $$121 = $$122;$300 = $302;$301 = $303;$c$8 = $c$6$lcssa;
    label = 73;
   }
  }
 } while(0);
 if ((label|0) == 73) {
  $$sum11 = (($c$8) + 1)|0;
  $247 = (15728 + ($$sum11)|0);
  $248 = HEAP8[$247>>0]|0;
  $249 = $248&255;
  $250 = ($249>>>0)<($$121>>>0);
  if ($250) {
   while(1) {
    $251 = HEAP32[$3>>2]|0;
    $252 = HEAP32[$4>>2]|0;
    $253 = ($251>>>0)<($252>>>0);
    if ($253) {
     $254 = (($251) + 1|0);
     HEAP32[$3>>2] = $254;
     $255 = HEAP8[$251>>0]|0;
     $256 = $255&255;
     $c$9$be = $256;
    } else {
     $257 = (___shgetc($f)|0);
     $c$9$be = $257;
    }
    $$sum12 = (($c$9$be) + 1)|0;
    $258 = (15728 + ($$sum12)|0);
    $259 = HEAP8[$258>>0]|0;
    $260 = $259&255;
    $261 = ($260>>>0)<($$121>>>0);
    if (!($261)) {
     break;
    }
   }
   $262 = (___errno_location()|0);
   HEAP32[$262>>2] = 34;
   $268 = $1;$271 = $0;
  } else {
   $268 = $301;$271 = $300;
  }
 }
 $263 = HEAP32[$4>>2]|0;
 $264 = ($263|0)==(0|0);
 if (!($264)) {
  $265 = HEAP32[$3>>2]|0;
  $266 = (($265) + -1|0);
  HEAP32[$3>>2] = $266;
 }
 $267 = ($268>>>0)<($1>>>0);
 $269 = ($268|0)==($1|0);
 $270 = ($271>>>0)<($0>>>0);
 $272 = $269 & $270;
 $273 = $267 | $272;
 if (!($273)) {
  $274 = $0 & 1;
  $275 = ($274|0)==(0);
  $276 = (0)==(0);
  $277 = $275 & $276;
  $278 = ($neg$0|0)==(0);
  $or$cond20 = $277 & $278;
  if ($or$cond20) {
   $279 = (___errno_location()|0);
   HEAP32[$279>>2] = 34;
   $280 = (_i64Add(($0|0),($1|0),-1,-1)|0);
   $281 = tempRet0;
   $294 = $281;$295 = $280;
   tempRet0 = $294;
   STACKTOP = sp;return ($295|0);
  }
  $282 = ($268>>>0)>($1>>>0);
  $283 = ($268|0)==($1|0);
  $284 = ($271>>>0)>($0>>>0);
  $285 = $283 & $284;
  $286 = $282 | $285;
  if ($286) {
   $287 = (___errno_location()|0);
   HEAP32[$287>>2] = 34;
   $294 = $1;$295 = $0;
   tempRet0 = $294;
   STACKTOP = sp;return ($295|0);
  }
 }
 $288 = ($neg$0|0)<(0);
 $289 = $288 << 31 >> 31;
 $290 = $271 ^ $neg$0;
 $291 = $268 ^ $289;
 $292 = (_i64Subtract(($290|0),($291|0),($neg$0|0),($289|0))|0);
 $293 = tempRet0;
 $294 = $293;$295 = $292;
 tempRet0 = $294;
 STACKTOP = sp;return ($295|0);
}
function ___floatscan($f,$prec,$pok) {
 $f = $f|0;
 $prec = $prec|0;
 $pok = $pok|0;
 var $$$i = 0, $$$i$i = 0, $$$i$i13 = 0, $$$i1 = 0, $$$i22 = 0, $$$i3 = 0, $$$i8 = 0, $$0 = 0.0, $$0$i = 0, $$0$i$i = 0, $$0$i$i15 = 0, $$0$i10 = 0, $$0$i5 = 0, $$02$i = 0, $$08$i = 0, $$09$i = 0, $$1$be$i = 0, $$1$i = 0, $$1$i$i = 0, $$1$i$i14 = 0;
 var $$1$i4 = 0, $$1$i9 = 0, $$1$ph$i = 0, $$10$i = 0, $$14$i = 0, $$2$i = 0, $$3$be$i = 0, $$3$lcssa$i = 0, $$38$i = 0, $$388$i = 0, $$397$i = 0, $$in = 0, $$k$0$i = 0, $$lcssa43$i = 0, $$lnz$0$i = 0, $$neg20$i = 0, $$pn$i = 0.0, $$pre = 0, $$pre$i = 0.0, $$pre$i17 = 0;
 var $$pre$phi$iZ2D = 0.0, $$promoted = 0, $$promoted$i = 0, $$sink$off0$us$i = 0, $$sink$off0$us53$i = 0, $$x$4$i = 0, $$y$3$i = 0.0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;
 var $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0;
 var $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0;
 var $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0;
 var $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0.0, $199 = 0.0, $2 = 0;
 var $20 = 0, $200 = 0.0, $201 = 0.0, $202 = 0, $203 = 0, $204 = 0.0, $205 = 0.0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0;
 var $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0.0, $233 = 0.0, $234 = 0, $235 = 0;
 var $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0;
 var $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0;
 var $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0.0, $287 = 0.0, $288 = 0, $289 = 0, $29 = 0;
 var $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0.0, $296 = 0.0, $297 = 0.0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0;
 var $308 = 0.0, $309 = 0.0, $31 = 0, $310 = 0.0, $311 = 0, $312 = 0, $313 = 0, $314 = 0.0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0;
 var $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0;
 var $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0.0, $35 = 0, $350 = 0.0, $351 = 0.0, $352 = 0.0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0.0, $359 = 0.0, $36 = 0, $360 = 0.0, $361 = 0.0;
 var $362 = 0.0, $363 = 0.0, $364 = 0, $365 = 0, $366 = 0, $367 = 0.0, $368 = 0, $369 = 0, $37 = 0, $370 = 0.0, $371 = 0, $372 = 0, $373 = 0, $374 = 0.0, $375 = 0, $376 = 0, $377 = 0.0, $378 = 0, $379 = 0, $38 = 0;
 var $380 = 0, $381 = 0, $382 = 0, $383 = 0.0, $384 = 0.0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0;
 var $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0;
 var $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0;
 var $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0;
 var $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0;
 var $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0;
 var $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0.0, $498 = 0.0, $499 = 0, $5 = 0, $50 = 0.0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0;
 var $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0.0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0.0, $515 = 0.0, $516 = 0.0, $517 = 0, $518 = 0, $519 = 0, $52 = 0.0, $520 = 0, $521 = 0, $522 = 0, $523 = 0;
 var $524 = 0, $525 = 0, $526 = 0.0, $527 = 0.0, $528 = 0.0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0.0, $539 = 0.0, $54 = 0, $540 = 0.0, $541 = 0;
 var $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0.0, $553 = 0, $554 = 0.0, $555 = 0.0, $556 = 0, $557 = 0.0, $558 = 0, $559 = 0.0, $56 = 0;
 var $560 = 0.0, $561 = 0, $562 = 0, $563 = 0, $564 = 0.0, $565 = 0.0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0.0, $572 = 0.0, $573 = 0.0, $574 = 0, $575 = 0, $576 = 0, $577 = 0.0, $578 = 0.0;
 var $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0;
 var $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0;
 var $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0;
 var $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0;
 var $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0;
 var $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0;
 var $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0;
 var $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0.0, $721 = 0;
 var $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0;
 var $740 = 0, $741 = 0.0, $742 = 0.0, $743 = 0.0, $744 = 0.0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0;
 var $759 = 0.0, $76 = 0, $760 = 0.0, $761 = 0.0, $762 = 0.0, $763 = 0.0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0.0, $775 = 0.0, $776 = 0.0;
 var $777 = 0, $778 = 0.0, $779 = 0.0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0.0, $784 = 0.0, $785 = 0.0, $786 = 0.0, $787 = 0, $788 = 0, $789 = 0.0, $79 = 0, $790 = 0, $791 = 0.0, $792 = 0.0, $793 = 0.0, $794 = 0;
 var $795 = 0, $796 = 0, $797 = 0, $798 = 0.0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0.0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0.0, $811 = 0;
 var $812 = 0, $813 = 0.0, $814 = 0, $815 = 0, $816 = 0, $817 = 0.0, $818 = 0, $819 = 0, $82 = 0, $820 = 0.0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0.0, $827 = 0.0, $828 = 0, $829 = 0, $83 = 0;
 var $830 = 0, $831 = 0, $832 = 0.0, $833 = 0, $834 = 0, $835 = 0.0, $836 = 0.0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0;
 var $849 = 0, $85 = 0, $850 = 0, $851 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $a$0$lcssa161$i = 0;
 var $a$061$i = 0, $a$1$i = 0, $a$2$ph40$i = 0, $a$3$i = 0, $a$3$i$ph = 0, $a$3$ph$i = 0, $a$427$i = 0, $a$5$i = 0, $bias$0$i = 0.0, $bias$07$i = 0.0, $bits$0$ph = 0, $brmerge107 = 0, $c$0 = 0, $c$0$i = 0, $c$1$lcssa = 0, $c$1$ph$i = 0, $c$169 = 0, $c$2 = 0, $c$2$i = 0, $c$2$lcssa$i = 0;
 var $c$364 = 0, $c$4 = 0, $c$5 = 0, $c$6 = 0, $carry$063$i = 0, $carry1$0$us$i = 0, $carry1$0$us49$i = 0, $carry1$1$lcssa$lcssa$i = 0, $carry1$1$us$i = 0, $carry1$1$us54$i = 0, $carry3$030$i = 0, $cond$i = 0, $d$0$i = 0, $denormal$0$i = 0, $denormal$1$i = 0, $denormal$2$i = 0, $e2$0$ph$i = 0, $e2$0$us$i = 0, $e2$0$us44$i = 0, $e2$1$i = 0;
 var $e2$1$i$ph = 0, $e2$1$ph$i = 0, $e2$2$i = 0, $e2$3$i = 0, $emin$0$ph = 0, $exitcond$i = 0, $frac$0$i = 0.0, $frac$1$i = 0.0, $frac$2$i = 0.0, $gotdig$0$i = 0, $gotdig$0$i9 = 0, $gotdig$2$i = 0, $gotdig$2$i11 = 0, $gotdig$3$i = 0, $gotdig$3$lcssa$i = 0, $gotdig$381$i = 0, $gotdig$393$i = 0, $gotdig$4$i = 0, $gotrad$0$i = 0, $gotrad$0$i12 = 0;
 var $gotrad$1$i = 0, $gotrad$1$lcssa$i = 0, $gotrad$194$i = 0, $gotrad$2$i = 0, $gottail$0$i = 0, $gottail$1$i = 0, $gottail$2$i = 0, $i$0$lcssa = 0, $i$025$i = 0, $i$068 = 0, $i$1$i = 0, $i$166 = 0, $i$263 = 0, $i$3 = 0, $i$4 = 0, $j$0$lcssa$i = 0, $j$086$i = 0, $j$096$i = 0, $j$2$i = 0, $j$371$i = 0;
 var $k$0$lcssa$i = 0, $k$084$i = 0, $k$095$i = 0, $k$2$i = 0, $k$3$i = 0, $k$462$i = 0, $k$5$in$us$i = 0, $k$5$in$us48$i = 0, $k$5$us$i = 0, $k$5$us50$i = 0, $k$5$z$2$us$i = 0, $k$5$z$2$us56$i = 0, $k$628$i = 0, $lnz$0$lcssa$i = 0, $lnz$079$i = 0, $lnz$092$i = 0, $lnz$2$i = 0, $notlhs = 0, $notrhs = 0, $or$cond = 0;
 var $or$cond$i = 0, $or$cond$i15 = 0, $or$cond106$not = 0, $or$cond11$i = 0, $or$cond12$us$i = 0, $or$cond12$us55$i = 0, $or$cond13$i = 0, $or$cond15$i = 0, $or$cond16$i = 0, $or$cond17$i = 0, $or$cond3$i = 0, $or$cond3$i16 = 0, $or$cond34 = 0, $or$cond4$i = 0, $or$cond5 = 0, $or$cond7$i = 0, $or$cond789$i = 0, $or$cond8 = 0, $rp$0$lcssa162$i = 0, $rp$060$i = 0;
 var $rp$1$i18 = 0, $rp$2$ph38$i = 0, $rp$3$i$ph = 0, $rp$3$ph33$i = 0, $rp$426$i = 0, $rp$5$i = 0, $scale$0$i = 0.0, $scale$1$i = 0.0, $scale$2$i = 0.0, $sign$0 = 0, $storemerge$i = 0, $sum$i = 0, $x$0$i = 0, $x$1$i = 0, $x$2$i = 0, $x$3$lcssa$i = 0, $x$313$i = 0, $x$4$lcssa$i = 0, $x$48$i = 0, $x$5$i = 0;
 var $x$6$i = 0, $x$i = 0, $y$0$i = 0.0, $y$0$i$i = 0.0, $y$0$i$i16 = 0.0, $y$0$i11 = 0.0, $y$0$i2 = 0.0, $y$0$i6 = 0.0, $y$1$i = 0.0, $y$1$i23 = 0.0, $y$2$i = 0.0, $y$2$i24 = 0.0, $y$3$i = 0.0, $y$3$lcssa$i = 0.0, $y$39$i = 0.0, $y$4$i = 0.0, $y$5$i = 0.0, $z$0$i = 0, $z$1$ph39$i = 0, $z$1$us$i = 0;
 var $z$1$us45$i = 0, $z$2$us$i = 0, $z$2$us47$i = 0, $z$3$lcssa$lcssa$i = 0, $z$3$us$i = 0, $z$3$us57$i = 0, $z$4$i = 0, $z$5$ph$i = 0, $z$7$1$i = 0, $z$7$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512|0;
 $x$i = sp;
 if ((($prec|0) == 1)) {
  $bits$0$ph = 53;$emin$0$ph = -1074;
 } else if ((($prec|0) == 0)) {
  $bits$0$ph = 24;$emin$0$ph = -149;
 } else if ((($prec|0) == 2)) {
  $bits$0$ph = 53;$emin$0$ph = -1074;
 } else {
  $$0 = 0.0;
  STACKTOP = sp;return (+$$0);
 }
 $0 = (($f) + 4|0);
 $1 = (($f) + 100|0);
 while(1) {
  $2 = HEAP32[$0>>2]|0;
  $3 = HEAP32[$1>>2]|0;
  $4 = ($2>>>0)<($3>>>0);
  if ($4) {
   $5 = (($2) + 1|0);
   HEAP32[$0>>2] = $5;
   $6 = HEAP8[$2>>0]|0;
   $7 = $6&255;
   $10 = $7;
  } else {
   $8 = (___shgetc($f)|0);
   $10 = $8;
  }
  $9 = ($10|0)==(32);
  $11 = (($10) + -9)|0;
  $12 = ($11>>>0)<(5);
  $or$cond34 = $9 | $12;
  if (!($or$cond34)) {
   break;
  }
 }
 $13 = ($10|0)==(45);
 do {
  if ((($10|0) == 43) | (($10|0) == 45)) {
   $14 = $13&1;
   $15 = $14 << 1;
   $16 = (1 - ($15))|0;
   $17 = HEAP32[$0>>2]|0;
   $18 = HEAP32[$1>>2]|0;
   $19 = ($17>>>0)<($18>>>0);
   if ($19) {
    $20 = (($17) + 1|0);
    HEAP32[$0>>2] = $20;
    $21 = HEAP8[$17>>0]|0;
    $22 = $21&255;
    $c$0 = $22;$sign$0 = $16;
    break;
   } else {
    $23 = (___shgetc($f)|0);
    $c$0 = $23;$sign$0 = $16;
    break;
   }
  } else {
   $c$0 = $10;$sign$0 = 1;
  }
 } while(0);
 $c$169 = $c$0;$i$068 = 0;
 while(1) {
  $24 = $c$169 | 32;
  $25 = (16008 + ($i$068)|0);
  $26 = HEAP8[$25>>0]|0;
  $27 = $26 << 24 >> 24;
  $28 = ($24|0)==($27|0);
  if (!($28)) {
   $c$1$lcssa = $c$169;$i$0$lcssa = $i$068;
   break;
  }
  $29 = ($i$068>>>0)<(7);
  do {
   if ($29) {
    $30 = HEAP32[$0>>2]|0;
    $31 = HEAP32[$1>>2]|0;
    $32 = ($30>>>0)<($31>>>0);
    if ($32) {
     $33 = (($30) + 1|0);
     HEAP32[$0>>2] = $33;
     $34 = HEAP8[$30>>0]|0;
     $35 = $34&255;
     $c$2 = $35;
     break;
    } else {
     $36 = (___shgetc($f)|0);
     $c$2 = $36;
     break;
    }
   } else {
    $c$2 = $c$169;
   }
  } while(0);
  $37 = (($i$068) + 1)|0;
  $38 = ($37>>>0)<(8);
  if ($38) {
   $c$169 = $c$2;$i$068 = $37;
  } else {
   $c$1$lcssa = $c$2;$i$0$lcssa = $37;
   break;
  }
 }
 do {
  if ((($i$0$lcssa|0) == 3)) {
   label = 23;
  } else if (!((($i$0$lcssa|0) == 8))) {
   $39 = ($i$0$lcssa>>>0)<(4);
   $40 = ($pok|0)==(0);
   $or$cond = $39 | $40;
   if (!($or$cond)) {
    $41 = ($i$0$lcssa|0)==(8);
    if ($41) {
     break;
    } else {
     label = 23;
     break;
    }
   }
   $53 = ($i$0$lcssa|0)==(0);
   L34: do {
    if ($53) {
     $c$364 = $c$1$lcssa;$i$263 = 0;
     while(1) {
      $54 = $c$364 | 32;
      $55 = (16592 + ($i$263)|0);
      $56 = HEAP8[$55>>0]|0;
      $57 = $56 << 24 >> 24;
      $58 = ($54|0)==($57|0);
      if (!($58)) {
       $c$5 = $c$364;$i$3 = $i$263;
       break L34;
      }
      $59 = ($i$263>>>0)<(2);
      do {
       if ($59) {
        $60 = HEAP32[$0>>2]|0;
        $61 = HEAP32[$1>>2]|0;
        $62 = ($60>>>0)<($61>>>0);
        if ($62) {
         $63 = (($60) + 1|0);
         HEAP32[$0>>2] = $63;
         $64 = HEAP8[$60>>0]|0;
         $65 = $64&255;
         $c$4 = $65;
         break;
        } else {
         $66 = (___shgetc($f)|0);
         $c$4 = $66;
         break;
        }
       } else {
        $c$4 = $c$364;
       }
      } while(0);
      $67 = (($i$263) + 1)|0;
      $68 = ($67>>>0)<(3);
      if ($68) {
       $c$364 = $c$4;$i$263 = $67;
      } else {
       $c$5 = $c$4;$i$3 = $67;
       break;
      }
     }
    } else {
     $c$5 = $c$1$lcssa;$i$3 = $i$0$lcssa;
    }
   } while(0);
   if ((($i$3|0) == 0)) {
    $129 = ($c$5|0)==(48);
    do {
     if ($129) {
      $130 = HEAP32[$0>>2]|0;
      $131 = HEAP32[$1>>2]|0;
      $132 = ($130>>>0)<($131>>>0);
      if ($132) {
       $133 = (($130) + 1|0);
       HEAP32[$0>>2] = $133;
       $134 = HEAP8[$130>>0]|0;
       $135 = $134&255;
       $138 = $135;
      } else {
       $136 = (___shgetc($f)|0);
       $138 = $136;
      }
      $137 = $138 | 32;
      $139 = ($137|0)==(120);
      if (!($139)) {
       $385 = HEAP32[$1>>2]|0;
       $386 = ($385|0)==(0|0);
       if ($386) {
        $c$6 = 48;
        break;
       }
       $387 = HEAP32[$0>>2]|0;
       $388 = (($387) + -1|0);
       HEAP32[$0>>2] = $388;
       $c$6 = 48;
       break;
      }
      $140 = HEAP32[$0>>2]|0;
      $141 = HEAP32[$1>>2]|0;
      $142 = ($140>>>0)<($141>>>0);
      if ($142) {
       $143 = (($140) + 1|0);
       HEAP32[$0>>2] = $143;
       $144 = HEAP8[$140>>0]|0;
       $145 = $144&255;
       $c$0$i = $145;$gotdig$0$i = 0;
      } else {
       $146 = (___shgetc($f)|0);
       $c$0$i = $146;$gotdig$0$i = 0;
      }
      while(1) {
       if ((($c$0$i|0) == 46)) {
        label = 71;
        break;
       } else if (!((($c$0$i|0) == 48))) {
        $185 = 0;$188 = 0;$236 = 0;$238 = 0;$c$2$i = $c$0$i;$gotdig$2$i = $gotdig$0$i;$gotrad$0$i = 0;$gottail$0$i = 0;$scale$0$i = 1.0;$x$0$i = 0;$y$0$i = 0.0;
        break;
       }
       $147 = HEAP32[$0>>2]|0;
       $148 = HEAP32[$1>>2]|0;
       $149 = ($147>>>0)<($148>>>0);
       if ($149) {
        $150 = (($147) + 1|0);
        HEAP32[$0>>2] = $150;
        $151 = HEAP8[$147>>0]|0;
        $152 = $151&255;
        $c$0$i = $152;$gotdig$0$i = 1;
        continue;
       } else {
        $153 = (___shgetc($f)|0);
        $c$0$i = $153;$gotdig$0$i = 1;
        continue;
       }
      }
      L66: do {
       if ((label|0) == 71) {
        $154 = HEAP32[$0>>2]|0;
        $155 = HEAP32[$1>>2]|0;
        $156 = ($154>>>0)<($155>>>0);
        if ($156) {
         $157 = (($154) + 1|0);
         HEAP32[$0>>2] = $157;
         $158 = HEAP8[$154>>0]|0;
         $159 = $158&255;
         $c$1$ph$i = $159;
        } else {
         $160 = (___shgetc($f)|0);
         $c$1$ph$i = $160;
        }
        $161 = ($c$1$ph$i|0)==(48);
        if ($161) {
         $171 = -1;$172 = -1;
         while(1) {
          $162 = HEAP32[$0>>2]|0;
          $163 = HEAP32[$1>>2]|0;
          $164 = ($162>>>0)<($163>>>0);
          if ($164) {
           $165 = (($162) + 1|0);
           HEAP32[$0>>2] = $165;
           $166 = HEAP8[$162>>0]|0;
           $167 = $166&255;
           $170 = $167;
          } else {
           $168 = (___shgetc($f)|0);
           $170 = $168;
          }
          $169 = ($170|0)==(48);
          if (!($169)) {
           $185 = 0;$188 = 0;$236 = $171;$238 = $172;$c$2$i = $170;$gotdig$2$i = 1;$gotrad$0$i = 1;$gottail$0$i = 0;$scale$0$i = 1.0;$x$0$i = 0;$y$0$i = 0.0;
           break L66;
          }
          $173 = (_i64Add(($171|0),($172|0),-1,-1)|0);
          $174 = tempRet0;
          $171 = $173;$172 = $174;
         }
        } else {
         $185 = 0;$188 = 0;$236 = 0;$238 = 0;$c$2$i = $c$1$ph$i;$gotdig$2$i = $gotdig$0$i;$gotrad$0$i = 1;$gottail$0$i = 0;$scale$0$i = 1.0;$x$0$i = 0;$y$0$i = 0.0;
        }
       }
      } while(0);
      L79: while(1) {
       $175 = (($c$2$i) + -48)|0;
       $176 = ($175>>>0)<(10);
       do {
        if ($176) {
         $d$0$i = $175;
         label = 85;
        } else {
         $177 = $c$2$i | 32;
         $178 = (($177) + -97)|0;
         $179 = ($178>>>0)<(6);
         $180 = ($c$2$i|0)==(46);
         $or$cond$i = $179 | $180;
         if (!($or$cond$i)) {
          $c$2$lcssa$i = $c$2$i;
          break L79;
         }
         if ($180) {
          $181 = ($gotrad$0$i|0)==(0);
          if ($181) {
           $838 = $188;$839 = $185;$840 = $188;$841 = $185;$gotdig$3$i = $gotdig$2$i;$gotrad$1$i = 1;$gottail$2$i = $gottail$0$i;$scale$2$i = $scale$0$i;$x$2$i = $x$0$i;$y$2$i = $y$0$i;
           break;
          } else {
           $c$2$lcssa$i = 46;
           break L79;
          }
         } else {
          $182 = ($c$2$i|0)>(57);
          $183 = (($177) + -87)|0;
          $$38$i = $182 ? $183 : $175;
          $d$0$i = $$38$i;
          label = 85;
          break;
         }
        }
       } while(0);
       if ((label|0) == 85) {
        label = 0;
        $184 = ($185|0)<(0);
        $186 = ($185|0)==(0);
        $187 = ($188>>>0)<(8);
        $189 = $186 & $187;
        $190 = $184 | $189;
        do {
         if ($190) {
          $191 = $x$0$i << 4;
          $192 = (($d$0$i) + ($191))|0;
          $gottail$1$i = $gottail$0$i;$scale$1$i = $scale$0$i;$x$1$i = $192;$y$1$i = $y$0$i;
         } else {
          $193 = ($185|0)<(0);
          $194 = ($185|0)==(0);
          $195 = ($188>>>0)<(14);
          $196 = $194 & $195;
          $197 = $193 | $196;
          if ($197) {
           $198 = (+($d$0$i|0));
           $199 = $scale$0$i * 0.0625;
           $200 = $199 * $198;
           $201 = $y$0$i + $200;
           $gottail$1$i = $gottail$0$i;$scale$1$i = $199;$x$1$i = $x$0$i;$y$1$i = $201;
           break;
          }
          $202 = ($d$0$i|0)!=(0);
          $203 = ($gottail$0$i|0)==(0);
          $or$cond3$i = $202 & $203;
          if ($or$cond3$i) {
           $204 = $scale$0$i * 0.5;
           $205 = $y$0$i + $204;
           $gottail$1$i = 1;$scale$1$i = $scale$0$i;$x$1$i = $x$0$i;$y$1$i = $205;
          } else {
           $gottail$1$i = $gottail$0$i;$scale$1$i = $scale$0$i;$x$1$i = $x$0$i;$y$1$i = $y$0$i;
          }
         }
        } while(0);
        $206 = (_i64Add(($188|0),($185|0),1,0)|0);
        $207 = tempRet0;
        $838 = $236;$839 = $238;$840 = $206;$841 = $207;$gotdig$3$i = 1;$gotrad$1$i = $gotrad$0$i;$gottail$2$i = $gottail$1$i;$scale$2$i = $scale$1$i;$x$2$i = $x$1$i;$y$2$i = $y$1$i;
       }
       $208 = HEAP32[$0>>2]|0;
       $209 = HEAP32[$1>>2]|0;
       $210 = ($208>>>0)<($209>>>0);
       if ($210) {
        $211 = (($208) + 1|0);
        HEAP32[$0>>2] = $211;
        $212 = HEAP8[$208>>0]|0;
        $213 = $212&255;
        $185 = $841;$188 = $840;$236 = $838;$238 = $839;$c$2$i = $213;$gotdig$2$i = $gotdig$3$i;$gotrad$0$i = $gotrad$1$i;$gottail$0$i = $gottail$2$i;$scale$0$i = $scale$2$i;$x$0$i = $x$2$i;$y$0$i = $y$2$i;
        continue;
       } else {
        $214 = (___shgetc($f)|0);
        $185 = $841;$188 = $840;$236 = $838;$238 = $839;$c$2$i = $214;$gotdig$2$i = $gotdig$3$i;$gotrad$0$i = $gotrad$1$i;$gottail$0$i = $gottail$2$i;$scale$0$i = $scale$2$i;$x$0$i = $x$2$i;$y$0$i = $y$2$i;
        continue;
       }
      }
      $215 = ($gotdig$2$i|0)==(0);
      if ($215) {
       $216 = HEAP32[$1>>2]|0;
       $217 = ($216|0)==(0|0);
       if (!($217)) {
        $218 = HEAP32[$0>>2]|0;
        $219 = (($218) + -1|0);
        HEAP32[$0>>2] = $219;
       }
       if ($40) {
        $224 = (($f) + 104|0);
        HEAP32[$224>>2] = 0;
        $225 = (($f) + 8|0);
        $226 = HEAP32[$225>>2]|0;
        $227 = HEAP32[$0>>2]|0;
        $228 = $226;
        $229 = $227;
        $230 = (($228) - ($229))|0;
        $231 = (($f) + 108|0);
        HEAP32[$231>>2] = $230;
        HEAP32[$1>>2] = $226;
       } else {
        if (!($217)) {
         $220 = HEAP32[$0>>2]|0;
         $221 = (($220) + -1|0);
         HEAP32[$0>>2] = $221;
         $222 = ($gotrad$0$i|0)==(0);
         if (!($222)) {
          $223 = (($220) + -2|0);
          HEAP32[$0>>2] = $223;
         }
        }
       }
       $232 = (+($sign$0|0));
       $233 = $232 * 0.0;
       $$0 = $233;
       STACKTOP = sp;return (+$$0);
      }
      $234 = ($gotrad$0$i|0)==(0);
      $235 = $234 ? $188 : $236;
      $237 = $234 ? $185 : $238;
      $239 = ($185|0)<(0);
      $240 = ($185|0)==(0);
      $241 = ($188>>>0)<(8);
      $242 = $240 & $241;
      $243 = $239 | $242;
      if ($243) {
       $245 = $188;$246 = $185;$x$313$i = $x$0$i;
       while(1) {
        $244 = $x$313$i << 4;
        $247 = (_i64Add(($245|0),($246|0),1,0)|0);
        $248 = tempRet0;
        $249 = ($248|0)<(0);
        $250 = ($248|0)==(0);
        $251 = ($247>>>0)<(8);
        $252 = $250 & $251;
        $253 = $249 | $252;
        if ($253) {
         $245 = $247;$246 = $248;$x$313$i = $244;
        } else {
         $x$3$lcssa$i = $244;
         break;
        }
       }
      } else {
       $x$3$lcssa$i = $x$0$i;
      }
      $254 = $c$2$lcssa$i | 32;
      $255 = ($254|0)==(112);
      do {
       if ($255) {
        $256 = (_scanexp($f,$pok)|0);
        $257 = tempRet0;
        $258 = ($256|0)==(0);
        $259 = ($257|0)==(-2147483648);
        $260 = $258 & $259;
        if ($260) {
         if ($40) {
          $265 = (($f) + 104|0);
          HEAP32[$265>>2] = 0;
          $266 = (($f) + 8|0);
          $267 = HEAP32[$266>>2]|0;
          $268 = HEAP32[$0>>2]|0;
          $269 = $267;
          $270 = $268;
          $271 = (($269) - ($270))|0;
          $272 = (($f) + 108|0);
          HEAP32[$272>>2] = $271;
          HEAP32[$1>>2] = $267;
          $$0 = 0.0;
          STACKTOP = sp;return (+$$0);
         } else {
          $261 = HEAP32[$1>>2]|0;
          $262 = ($261|0)==(0|0);
          if ($262) {
           $281 = 0;$282 = 0;
           break;
          }
          $263 = HEAP32[$0>>2]|0;
          $264 = (($263) + -1|0);
          HEAP32[$0>>2] = $264;
          $281 = 0;$282 = 0;
          break;
         }
        } else {
         $281 = $256;$282 = $257;
        }
       } else {
        $273 = HEAP32[$1>>2]|0;
        $274 = ($273|0)==(0|0);
        if ($274) {
         $281 = 0;$282 = 0;
        } else {
         $275 = HEAP32[$0>>2]|0;
         $276 = (($275) + -1|0);
         HEAP32[$0>>2] = $276;
         $281 = 0;$282 = 0;
        }
       }
      } while(0);
      $277 = (_bitshift64Shl(($235|0),($237|0),2)|0);
      $278 = tempRet0;
      $279 = (_i64Add(($277|0),($278|0),-32,-1)|0);
      $280 = tempRet0;
      $283 = (_i64Add(($279|0),($280|0),($281|0),($282|0))|0);
      $284 = tempRet0;
      $285 = ($x$3$lcssa$i|0)==(0);
      if ($285) {
       $286 = (+($sign$0|0));
       $287 = $286 * 0.0;
       $$0 = $287;
       STACKTOP = sp;return (+$$0);
      }
      $288 = (0 - ($emin$0$ph))|0;
      $289 = ($284|0)>(0);
      $290 = ($284|0)==(0);
      $291 = ($283>>>0)>($288>>>0);
      $292 = $290 & $291;
      $293 = $289 | $292;
      if ($293) {
       $294 = (___errno_location()|0);
       HEAP32[$294>>2] = 34;
       $295 = (+($sign$0|0));
       $296 = $295 * 1.79769313486231570815E+308;
       $297 = $296 * 1.79769313486231570815E+308;
       $$0 = $297;
       STACKTOP = sp;return (+$$0);
      }
      $298 = (($emin$0$ph) + -106)|0;
      $299 = ($298|0)<(0);
      $300 = $299 << 31 >> 31;
      $301 = ($284|0)<($300|0);
      $302 = ($284|0)==($300|0);
      $303 = ($283>>>0)<($298>>>0);
      $304 = $302 & $303;
      $305 = $301 | $304;
      if ($305) {
       $307 = (___errno_location()|0);
       HEAP32[$307>>2] = 34;
       $308 = (+($sign$0|0));
       $309 = $308 * 2.22507385850720138309E-308;
       $310 = $309 * 2.22507385850720138309E-308;
       $$0 = $310;
       STACKTOP = sp;return (+$$0);
      }
      $306 = ($x$3$lcssa$i|0)>(-1);
      if ($306) {
       $315 = $283;$316 = $284;$x$48$i = $x$3$lcssa$i;$y$39$i = $y$0$i;
       while(1) {
        $311 = !($y$39$i >= 0.5);
        $312 = $x$48$i << 1;
        if ($311) {
         $$pn$i = $y$39$i;$x$5$i = $312;
        } else {
         $313 = $312 | 1;
         $314 = $y$39$i + -1.0;
         $$pn$i = $314;$x$5$i = $313;
        }
        $y$4$i = $y$39$i + $$pn$i;
        $317 = (_i64Add(($315|0),($316|0),-1,-1)|0);
        $318 = tempRet0;
        $319 = ($x$5$i|0)>(-1);
        if ($319) {
         $315 = $317;$316 = $318;$x$48$i = $x$5$i;$y$39$i = $y$4$i;
        } else {
         $324 = $317;$325 = $318;$x$4$lcssa$i = $x$5$i;$y$3$lcssa$i = $y$4$i;
         break;
        }
       }
      } else {
       $324 = $283;$325 = $284;$x$4$lcssa$i = $x$3$lcssa$i;$y$3$lcssa$i = $y$0$i;
      }
      $320 = ($emin$0$ph|0)<(0);
      $321 = $320 << 31 >> 31;
      $322 = (_i64Subtract(32,0,($emin$0$ph|0),($321|0))|0);
      $323 = tempRet0;
      $326 = (_i64Add(($324|0),($325|0),($322|0),($323|0))|0);
      $327 = tempRet0;
      $328 = (0)>($327|0);
      $329 = (0)==($327|0);
      $330 = ($bits$0$ph>>>0)>($326>>>0);
      $331 = $329 & $330;
      $332 = $328 | $331;
      if ($332) {
       $333 = ($326|0)<(0);
       $$$i = $333 ? 0 : $326;
       $$02$i = $$$i;
      } else {
       $$02$i = $bits$0$ph;
      }
      $334 = ($$02$i|0)<(53);
      do {
       if ($334) {
        $335 = (84 - ($$02$i))|0;
        $336 = ($335|0)>(1023);
        do {
         if ($336) {
          $337 = (($335) + -1023)|0;
          $338 = ($337|0)>(1023);
          if (!($338)) {
           $$0$i10 = $337;$y$0$i11 = 8.98846567431157953864E+307;
           break;
          }
          $339 = (($335) + -2046)|0;
          $340 = ($339|0)>(1023);
          $$$i8 = $340 ? 1023 : $339;
          $$0$i10 = $$$i8;$y$0$i11 = inf;
         } else {
          $341 = ($335|0)<(-1022);
          if (!($341)) {
           $$0$i10 = $335;$y$0$i11 = 1.0;
           break;
          }
          $342 = (($335) + 1022)|0;
          $343 = ($342|0)<(-1022);
          if (!($343)) {
           $$0$i10 = $342;$y$0$i11 = 2.22507385850720138309E-308;
           break;
          }
          $344 = (($335) + 2044)|0;
          $345 = ($344|0)<(-1022);
          $$1$i9 = $345 ? -1022 : $344;
          $$0$i10 = $$1$i9;$y$0$i11 = 0.0;
         }
        } while(0);
        $346 = (($$0$i10) + 1023)|0;
        $347 = (_bitshift64Shl(($346|0),0,52)|0);
        $348 = tempRet0;
        HEAP32[tempDoublePtr>>2] = $347;HEAP32[tempDoublePtr+4>>2] = $348;$349 = +HEAPF64[tempDoublePtr>>3];
        $350 = $y$0$i11 * $349;
        $351 = (+($sign$0|0));
        $352 = (+_copysignl((+$350),(+$351)));
        $353 = ($$02$i|0)<(32);
        $354 = $y$3$lcssa$i != 0.0;
        $or$cond4$i = $353 & $354;
        if (!($or$cond4$i)) {
         $$pre$phi$iZ2D = $351;$bias$07$i = $352;$x$6$i = $x$4$lcssa$i;$y$5$i = $y$3$lcssa$i;
         break;
        }
        $355 = $x$4$lcssa$i & 1;
        $356 = ($355|0)==(0);
        $357 = $355 ^ 1;
        $$x$4$i = (($357) + ($x$4$lcssa$i))|0;
        $$y$3$i = $356 ? 0.0 : $y$3$lcssa$i;
        $$pre$phi$iZ2D = $351;$bias$07$i = $352;$x$6$i = $$x$4$i;$y$5$i = $$y$3$i;
       } else {
        $$pre$i = (+($sign$0|0));
        $$pre$phi$iZ2D = $$pre$i;$bias$07$i = 0.0;$x$6$i = $x$4$lcssa$i;$y$5$i = $y$3$lcssa$i;
       }
      } while(0);
      $358 = (+($x$6$i>>>0));
      $359 = $$pre$phi$iZ2D * $358;
      $360 = $bias$07$i + $359;
      $361 = $$pre$phi$iZ2D * $y$5$i;
      $362 = $361 + $360;
      $363 = $362 - $bias$07$i;
      $364 = $363 != 0.0;
      if (!($364)) {
       $365 = (___errno_location()|0);
       HEAP32[$365>>2] = 34;
      }
      $366 = ($324|0)>(1023);
      do {
       if ($366) {
        $367 = $363 * 8.98846567431157953864E+307;
        $368 = (($324) + -1023)|0;
        $369 = ($368|0)>(1023);
        if (!($369)) {
         $$0$i$i15 = $368;$y$0$i$i16 = $367;
         break;
        }
        $370 = $367 * 8.98846567431157953864E+307;
        $371 = (($324) + -2046)|0;
        $372 = ($371|0)>(1023);
        $$$i$i13 = $372 ? 1023 : $371;
        $$0$i$i15 = $$$i$i13;$y$0$i$i16 = $370;
       } else {
        $373 = ($324|0)<(-1022);
        if (!($373)) {
         $$0$i$i15 = $324;$y$0$i$i16 = $363;
         break;
        }
        $374 = $363 * 2.22507385850720138309E-308;
        $375 = (($324) + 1022)|0;
        $376 = ($375|0)<(-1022);
        if (!($376)) {
         $$0$i$i15 = $375;$y$0$i$i16 = $374;
         break;
        }
        $377 = $374 * 2.22507385850720138309E-308;
        $378 = (($324) + 2044)|0;
        $379 = ($378|0)<(-1022);
        $$1$i$i14 = $379 ? -1022 : $378;
        $$0$i$i15 = $$1$i$i14;$y$0$i$i16 = $377;
       }
      } while(0);
      $380 = (($$0$i$i15) + 1023)|0;
      $381 = (_bitshift64Shl(($380|0),0,52)|0);
      $382 = tempRet0;
      HEAP32[tempDoublePtr>>2] = $381;HEAP32[tempDoublePtr+4>>2] = $382;$383 = +HEAPF64[tempDoublePtr>>3];
      $384 = $y$0$i$i16 * $383;
      $$0 = $384;
      STACKTOP = sp;return (+$$0);
     } else {
      $c$6 = $c$5;
     }
    } while(0);
    $sum$i = (($emin$0$ph) + ($bits$0$ph))|0;
    $389 = (0 - ($sum$i))|0;
    $$08$i = $c$6;$gotdig$0$i9 = 0;
    while(1) {
     if ((($$08$i|0) == 46)) {
      label = 152;
      break;
     } else if (!((($$08$i|0) == 48))) {
      $$2$i = $$08$i;$842 = 0;$843 = 0;$gotdig$2$i11 = $gotdig$0$i9;$gotrad$0$i12 = 0;
      break;
     }
     $390 = HEAP32[$0>>2]|0;
     $391 = HEAP32[$1>>2]|0;
     $392 = ($390>>>0)<($391>>>0);
     if ($392) {
      $393 = (($390) + 1|0);
      HEAP32[$0>>2] = $393;
      $394 = HEAP8[$390>>0]|0;
      $395 = $394&255;
      $$08$i = $395;$gotdig$0$i9 = 1;
      continue;
     } else {
      $396 = (___shgetc($f)|0);
      $$08$i = $396;$gotdig$0$i9 = 1;
      continue;
     }
    }
    L182: do {
     if ((label|0) == 152) {
      $397 = HEAP32[$0>>2]|0;
      $398 = HEAP32[$1>>2]|0;
      $399 = ($397>>>0)<($398>>>0);
      if ($399) {
       $400 = (($397) + 1|0);
       HEAP32[$0>>2] = $400;
       $401 = HEAP8[$397>>0]|0;
       $402 = $401&255;
       $$1$ph$i = $402;
      } else {
       $403 = (___shgetc($f)|0);
       $$1$ph$i = $403;
      }
      $404 = ($$1$ph$i|0)==(48);
      if ($404) {
       $413 = -1;$414 = -1;
       while(1) {
        $405 = HEAP32[$0>>2]|0;
        $406 = HEAP32[$1>>2]|0;
        $407 = ($405>>>0)<($406>>>0);
        if ($407) {
         $408 = (($405) + 1|0);
         HEAP32[$0>>2] = $408;
         $409 = HEAP8[$405>>0]|0;
         $410 = $409&255;
         $$1$be$i = $410;
        } else {
         $411 = (___shgetc($f)|0);
         $$1$be$i = $411;
        }
        $412 = ($$1$be$i|0)==(48);
        if (!($412)) {
         $$2$i = $$1$be$i;$842 = $413;$843 = $414;$gotdig$2$i11 = 1;$gotrad$0$i12 = 1;
         break L182;
        }
        $415 = (_i64Add(($413|0),($414|0),-1,-1)|0);
        $416 = tempRet0;
        $413 = $415;$414 = $416;
       }
      } else {
       $$2$i = $$1$ph$i;$842 = 0;$843 = 0;$gotdig$2$i11 = $gotdig$0$i9;$gotrad$0$i12 = 1;
      }
     }
    } while(0);
    HEAP32[$x$i>>2] = 0;
    $417 = (($$2$i) + -48)|0;
    $418 = ($417>>>0)<(10);
    $419 = ($$2$i|0)==(46);
    $or$cond789$i = $418 | $419;
    L196: do {
     if ($or$cond789$i) {
      $420 = (($x$i) + 496|0);
      $$397$i = $$2$i;$422 = 0;$423 = 0;$844 = $419;$845 = $417;$846 = $842;$847 = $843;$gotdig$393$i = $gotdig$2$i11;$gotrad$194$i = $gotrad$0$i12;$j$096$i = 0;$k$095$i = 0;$lnz$092$i = 0;
      while(1) {
       do {
        if ($844) {
         $cond$i = ($gotrad$194$i|0)==(0);
         if ($cond$i) {
          $848 = $422;$849 = $423;$850 = $422;$851 = $423;$gotdig$4$i = $gotdig$393$i;$gotrad$2$i = 1;$j$2$i = $j$096$i;$k$2$i = $k$095$i;$lnz$2$i = $lnz$092$i;
         } else {
          $$388$i = $$397$i;$477 = $846;$478 = $847;$501 = $422;$504 = $423;$gotdig$381$i = $gotdig$393$i;$j$086$i = $j$096$i;$k$084$i = $k$095$i;$lnz$079$i = $lnz$092$i;
          break L196;
         }
        } else {
         $421 = ($k$095$i|0)<(125);
         $424 = (_i64Add(($422|0),($423|0),1,0)|0);
         $425 = tempRet0;
         $426 = ($$397$i|0)!=(48);
         if (!($421)) {
          if (!($426)) {
           $848 = $846;$849 = $847;$850 = $424;$851 = $425;$gotdig$4$i = $gotdig$393$i;$gotrad$2$i = $gotrad$194$i;$j$2$i = $j$096$i;$k$2$i = $k$095$i;$lnz$2$i = $lnz$092$i;
           break;
          }
          $436 = HEAP32[$420>>2]|0;
          $437 = $436 | 1;
          HEAP32[$420>>2] = $437;
          $848 = $846;$849 = $847;$850 = $424;$851 = $425;$gotdig$4$i = $gotdig$393$i;$gotrad$2$i = $gotrad$194$i;$j$2$i = $j$096$i;$k$2$i = $k$095$i;$lnz$2$i = $lnz$092$i;
          break;
         }
         $$lnz$0$i = $426 ? $424 : $lnz$092$i;
         $427 = ($j$096$i|0)==(0);
         $428 = (($x$i) + ($k$095$i<<2)|0);
         if ($427) {
          $storemerge$i = $845;
         } else {
          $429 = HEAP32[$428>>2]|0;
          $430 = ($429*10)|0;
          $431 = (($$397$i) + -48)|0;
          $432 = (($431) + ($430))|0;
          $storemerge$i = $432;
         }
         HEAP32[$428>>2] = $storemerge$i;
         $433 = (($j$096$i) + 1)|0;
         $434 = ($433|0)==(9);
         $435 = $434&1;
         $$k$0$i = (($435) + ($k$095$i))|0;
         $$10$i = $434 ? 0 : $433;
         $848 = $846;$849 = $847;$850 = $424;$851 = $425;$gotdig$4$i = 1;$gotrad$2$i = $gotrad$194$i;$j$2$i = $$10$i;$k$2$i = $$k$0$i;$lnz$2$i = $$lnz$0$i;
        }
       } while(0);
       $438 = HEAP32[$0>>2]|0;
       $439 = HEAP32[$1>>2]|0;
       $440 = ($438>>>0)<($439>>>0);
       if ($440) {
        $441 = (($438) + 1|0);
        HEAP32[$0>>2] = $441;
        $442 = HEAP8[$438>>0]|0;
        $443 = $442&255;
        $$3$be$i = $443;
       } else {
        $444 = (___shgetc($f)|0);
        $$3$be$i = $444;
       }
       $445 = (($$3$be$i) + -48)|0;
       $446 = ($445>>>0)<(10);
       $447 = ($$3$be$i|0)==(46);
       $or$cond7$i = $446 | $447;
       if ($or$cond7$i) {
        $$397$i = $$3$be$i;$422 = $850;$423 = $851;$844 = $447;$845 = $445;$846 = $848;$847 = $849;$gotdig$393$i = $gotdig$4$i;$gotrad$194$i = $gotrad$2$i;$j$096$i = $j$2$i;$k$095$i = $k$2$i;$lnz$092$i = $lnz$2$i;
       } else {
        $$3$lcssa$i = $$3$be$i;$450 = $850;$451 = $848;$453 = $851;$454 = $849;$gotdig$3$lcssa$i = $gotdig$4$i;$gotrad$1$lcssa$i = $gotrad$2$i;$j$0$lcssa$i = $j$2$i;$k$0$lcssa$i = $k$2$i;$lnz$0$lcssa$i = $lnz$2$i;
        label = 175;
        break;
       }
      }
     } else {
      $$3$lcssa$i = $$2$i;$450 = 0;$451 = $842;$453 = 0;$454 = $843;$gotdig$3$lcssa$i = $gotdig$2$i11;$gotrad$1$lcssa$i = $gotrad$0$i12;$j$0$lcssa$i = 0;$k$0$lcssa$i = 0;$lnz$0$lcssa$i = 0;
      label = 175;
     }
    } while(0);
    if ((label|0) == 175) {
     $448 = ($gotrad$1$lcssa$i|0)==(0);
     $449 = $448 ? $450 : $451;
     $452 = $448 ? $453 : $454;
     $$388$i = $$3$lcssa$i;$477 = $449;$478 = $452;$501 = $450;$504 = $453;$gotdig$381$i = $gotdig$3$lcssa$i;$j$086$i = $j$0$lcssa$i;$k$084$i = $k$0$lcssa$i;$lnz$079$i = $lnz$0$lcssa$i;
    }
    $455 = ($gotdig$381$i|0)!=(0);
    if ($455) {
     $456 = $$388$i | 32;
     $457 = ($456|0)==(101);
     if ($457) {
      $458 = (_scanexp($f,$pok)|0);
      $459 = tempRet0;
      $460 = ($458|0)==(0);
      $461 = ($459|0)==(-2147483648);
      $462 = $460 & $461;
      do {
       if ($462) {
        if ($40) {
         $467 = (($f) + 104|0);
         HEAP32[$467>>2] = 0;
         $468 = (($f) + 8|0);
         $469 = HEAP32[$468>>2]|0;
         $470 = HEAP32[$0>>2]|0;
         $471 = $469;
         $472 = $470;
         $473 = (($471) - ($472))|0;
         $474 = (($f) + 108|0);
         HEAP32[$474>>2] = $473;
         HEAP32[$1>>2] = $469;
         $$0 = 0.0;
         STACKTOP = sp;return (+$$0);
        } else {
         $463 = HEAP32[$1>>2]|0;
         $464 = ($463|0)==(0|0);
         if ($464) {
          $475 = 0;$476 = 0;
          break;
         }
         $465 = HEAP32[$0>>2]|0;
         $466 = (($465) + -1|0);
         HEAP32[$0>>2] = $466;
         $475 = 0;$476 = 0;
         break;
        }
       } else {
        $475 = $458;$476 = $459;
       }
      } while(0);
      $479 = (_i64Add(($475|0),($476|0),($477|0),($478|0))|0);
      $480 = tempRet0;
      $500 = $479;$503 = $480;
     } else {
      label = 184;
     }
    } else {
     label = 184;
    }
    if ((label|0) == 184) {
     $481 = ($$388$i|0)>(-1);
     if ($481) {
      $482 = HEAP32[$1>>2]|0;
      $483 = ($482|0)==(0|0);
      if ($483) {
       $500 = $477;$503 = $478;
      } else {
       $484 = HEAP32[$0>>2]|0;
       $485 = (($484) + -1|0);
       HEAP32[$0>>2] = $485;
       $500 = $477;$503 = $478;
      }
     } else {
      $500 = $477;$503 = $478;
     }
    }
    if (!($455)) {
     $486 = (___errno_location()|0);
     HEAP32[$486>>2] = 22;
     $487 = (($f) + 104|0);
     HEAP32[$487>>2] = 0;
     $488 = (($f) + 8|0);
     $489 = HEAP32[$488>>2]|0;
     $490 = HEAP32[$0>>2]|0;
     $491 = $489;
     $492 = $490;
     $493 = (($491) - ($492))|0;
     $494 = (($f) + 108|0);
     HEAP32[$494>>2] = $493;
     HEAP32[$1>>2] = $489;
     $$0 = 0.0;
     STACKTOP = sp;return (+$$0);
    }
    $495 = HEAP32[$x$i>>2]|0;
    $496 = ($495|0)==(0);
    if ($496) {
     $497 = (+($sign$0|0));
     $498 = $497 * 0.0;
     $$0 = $498;
     STACKTOP = sp;return (+$$0);
    }
    $499 = ($500|0)==($501|0);
    $502 = ($503|0)==($504|0);
    $505 = $499 & $502;
    $506 = ($504|0)<(0);
    $507 = ($504|0)==(0);
    $508 = ($501>>>0)<(10);
    $509 = $507 & $508;
    $510 = $506 | $509;
    $or$cond$i15 = $505 & $510;
    do {
     if ($or$cond$i15) {
      $511 = ($bits$0$ph>>>0)>(30);
      if (!($511)) {
       $512 = $495 >>> $bits$0$ph;
       $513 = ($512|0)==(0);
       if (!($513)) {
        break;
       }
      }
      $514 = (+($sign$0|0));
      $515 = (+($495>>>0));
      $516 = $514 * $515;
      $$0 = $516;
      STACKTOP = sp;return (+$$0);
     }
    } while(0);
    $517 = (($emin$0$ph|0) / -2)&-1;
    $518 = ($517|0)<(0);
    $519 = $518 << 31 >> 31;
    $520 = ($503|0)>($519|0);
    $521 = ($503|0)==($519|0);
    $522 = ($500>>>0)>($517>>>0);
    $523 = $521 & $522;
    $524 = $520 | $523;
    if ($524) {
     $525 = (___errno_location()|0);
     HEAP32[$525>>2] = 34;
     $526 = (+($sign$0|0));
     $527 = $526 * 1.79769313486231570815E+308;
     $528 = $527 * 1.79769313486231570815E+308;
     $$0 = $528;
     STACKTOP = sp;return (+$$0);
    }
    $529 = (($emin$0$ph) + -106)|0;
    $530 = ($529|0)<(0);
    $531 = $530 << 31 >> 31;
    $532 = ($503|0)<($531|0);
    $533 = ($503|0)==($531|0);
    $534 = ($500>>>0)<($529>>>0);
    $535 = $533 & $534;
    $536 = $532 | $535;
    if ($536) {
     $537 = (___errno_location()|0);
     HEAP32[$537>>2] = 34;
     $538 = (+($sign$0|0));
     $539 = $538 * 2.22507385850720138309E-308;
     $540 = $539 * 2.22507385850720138309E-308;
     $$0 = $540;
     STACKTOP = sp;return (+$$0);
    }
    $541 = ($j$086$i|0)==(0);
    if ($541) {
     $k$3$i = $k$084$i;
    } else {
     $542 = ($j$086$i|0)<(9);
     if ($542) {
      $543 = (($x$i) + ($k$084$i<<2)|0);
      $$promoted$i = HEAP32[$543>>2]|0;
      $545 = $$promoted$i;$j$371$i = $j$086$i;
      while(1) {
       $544 = ($545*10)|0;
       $546 = (($j$371$i) + 1)|0;
       $exitcond$i = ($546|0)==(9);
       if ($exitcond$i) {
        break;
       } else {
        $545 = $544;$j$371$i = $546;
       }
      }
      HEAP32[$543>>2] = $544;
     }
     $547 = (($k$084$i) + 1)|0;
     $k$3$i = $547;
    }
    $548 = ($lnz$079$i|0)<(9);
    do {
     if ($548) {
      $549 = ($lnz$079$i|0)<=($500|0);
      $550 = ($500|0)<(18);
      $or$cond3$i16 = $549 & $550;
      if ($or$cond3$i16) {
       $551 = ($500|0)==(9);
       if ($551) {
        $552 = (+($sign$0|0));
        $553 = HEAP32[$x$i>>2]|0;
        $554 = (+($553>>>0));
        $555 = $552 * $554;
        $$0 = $555;
        STACKTOP = sp;return (+$$0);
       }
       $556 = ($500|0)<(9);
       if ($556) {
        $557 = (+($sign$0|0));
        $558 = HEAP32[$x$i>>2]|0;
        $559 = (+($558>>>0));
        $560 = $557 * $559;
        $561 = (8 - ($500))|0;
        $562 = (16032 + ($561<<2)|0);
        $563 = HEAP32[$562>>2]|0;
        $564 = (+($563|0));
        $565 = $560 / $564;
        $$0 = $565;
        STACKTOP = sp;return (+$$0);
       }
       $566 = Math_imul($500, -3)|0;
       $$neg20$i = (($bits$0$ph) + 27)|0;
       $567 = (($$neg20$i) + ($566))|0;
       $568 = ($567|0)>(30);
       $$pre$i17 = HEAP32[$x$i>>2]|0;
       if (!($568)) {
        $569 = $$pre$i17 >>> $567;
        $570 = ($569|0)==(0);
        if (!($570)) {
         break;
        }
       }
       $571 = (+($sign$0|0));
       $572 = (+($$pre$i17>>>0));
       $573 = $571 * $572;
       $574 = (($500) + -10)|0;
       $575 = (16032 + ($574<<2)|0);
       $576 = HEAP32[$575>>2]|0;
       $577 = (+($576|0));
       $578 = $573 * $577;
       $$0 = $578;
       STACKTOP = sp;return (+$$0);
      }
     }
    } while(0);
    $579 = (($500|0) % 9)&-1;
    $580 = ($579|0)==(0);
    if ($580) {
     $a$2$ph40$i = 0;$e2$0$ph$i = 0;$rp$2$ph38$i = $500;$z$1$ph39$i = $k$3$i;
    } else {
     $581 = ($500|0)>(-1);
     $582 = (($579) + 9)|0;
     $583 = $581 ? $579 : $582;
     $584 = (8 - ($583))|0;
     $585 = (16032 + ($584<<2)|0);
     $586 = HEAP32[$585>>2]|0;
     $587 = ($k$3$i|0)==(0);
     if ($587) {
      $a$0$lcssa161$i = 0;$rp$0$lcssa162$i = $500;$z$0$i = 0;
     } else {
      $588 = (1000000000 / ($586|0))&-1;
      $a$061$i = 0;$carry$063$i = 0;$k$462$i = 0;$rp$060$i = $500;
      while(1) {
       $589 = (($x$i) + ($k$462$i<<2)|0);
       $590 = HEAP32[$589>>2]|0;
       $591 = (($590>>>0) % ($586>>>0))&-1;
       $592 = (($590>>>0) / ($586>>>0))&-1;
       $593 = (($592) + ($carry$063$i))|0;
       HEAP32[$589>>2] = $593;
       $594 = Math_imul($591, $588)|0;
       $595 = ($k$462$i|0)==($a$061$i|0);
       $596 = ($593|0)==(0);
       $or$cond11$i = $595 & $596;
       $597 = (($k$462$i) + 1)|0;
       if ($or$cond11$i) {
        $598 = $597 & 127;
        $599 = (($rp$060$i) + -9)|0;
        $a$1$i = $598;$rp$1$i18 = $599;
       } else {
        $a$1$i = $a$061$i;$rp$1$i18 = $rp$060$i;
       }
       $600 = ($597|0)==($k$3$i|0);
       if ($600) {
        break;
       } else {
        $a$061$i = $a$1$i;$carry$063$i = $594;$k$462$i = $597;$rp$060$i = $rp$1$i18;
       }
      }
      $601 = ($594|0)==(0);
      if ($601) {
       $a$0$lcssa161$i = $a$1$i;$rp$0$lcssa162$i = $rp$1$i18;$z$0$i = $k$3$i;
      } else {
       $602 = (($k$3$i) + 1)|0;
       $603 = (($x$i) + ($k$3$i<<2)|0);
       HEAP32[$603>>2] = $594;
       $a$0$lcssa161$i = $a$1$i;$rp$0$lcssa162$i = $rp$1$i18;$z$0$i = $602;
      }
     }
     $604 = (9 - ($583))|0;
     $605 = (($604) + ($rp$0$lcssa162$i))|0;
     $a$2$ph40$i = $a$0$lcssa161$i;$e2$0$ph$i = 0;$rp$2$ph38$i = $605;$z$1$ph39$i = $z$0$i;
    }
    L294: while(1) {
     $606 = ($rp$2$ph38$i|0)<(18);
     $607 = (($x$i) + ($a$2$ph40$i<<2)|0);
     if ($606) {
      $e2$0$us$i = $e2$0$ph$i;$z$1$us$i = $z$1$ph39$i;
      while(1) {
       $609 = (($z$1$us$i) + 127)|0;
       $carry1$0$us$i = 0;$k$5$in$us$i = $609;$z$2$us$i = $z$1$us$i;
       while(1) {
        $k$5$us$i = $k$5$in$us$i & 127;
        $610 = (($x$i) + ($k$5$us$i<<2)|0);
        $611 = HEAP32[$610>>2]|0;
        $612 = (_bitshift64Shl(($611|0),0,29)|0);
        $613 = tempRet0;
        $614 = (_i64Add(($612|0),($613|0),($carry1$0$us$i|0),0)|0);
        $615 = tempRet0;
        $616 = ($615>>>0)>(0);
        $617 = ($615|0)==(0);
        $618 = ($614>>>0)>(1000000000);
        $619 = $617 & $618;
        $620 = $616 | $619;
        if ($620) {
         $621 = (___udivdi3(($614|0),($615|0),1000000000,0)|0);
         $622 = tempRet0;
         $623 = (___uremdi3(($614|0),($615|0),1000000000,0)|0);
         $624 = tempRet0;
         $$sink$off0$us$i = $623;$carry1$1$us$i = $621;
        } else {
         $$sink$off0$us$i = $614;$carry1$1$us$i = 0;
        }
        HEAP32[$610>>2] = $$sink$off0$us$i;
        $625 = (($z$2$us$i) + 127)|0;
        $626 = $625 & 127;
        $627 = ($k$5$us$i|0)!=($626|0);
        $628 = ($k$5$us$i|0)==($a$2$ph40$i|0);
        $or$cond12$us$i = $627 | $628;
        if ($or$cond12$us$i) {
         $z$3$us$i = $z$2$us$i;
        } else {
         $629 = ($$sink$off0$us$i|0)==(0);
         $k$5$z$2$us$i = $629 ? $k$5$us$i : $z$2$us$i;
         $z$3$us$i = $k$5$z$2$us$i;
        }
        $630 = (($k$5$us$i) + -1)|0;
        if ($628) {
         break;
        } else {
         $carry1$0$us$i = $carry1$1$us$i;$k$5$in$us$i = $630;$z$2$us$i = $z$3$us$i;
        }
       }
       $631 = (($e2$0$us$i) + -29)|0;
       $632 = ($carry1$1$us$i|0)==(0);
       if ($632) {
        $e2$0$us$i = $631;$z$1$us$i = $z$3$us$i;
       } else {
        $$lcssa43$i = $631;$carry1$1$lcssa$lcssa$i = $carry1$1$us$i;$z$3$lcssa$lcssa$i = $z$3$us$i;
        break;
       }
      }
     } else {
      $608 = ($rp$2$ph38$i|0)==(18);
      if ($608) {
       $e2$0$us44$i = $e2$0$ph$i;$z$1$us45$i = $z$1$ph39$i;
      } else {
       $a$3$ph$i = $a$2$ph40$i;$e2$1$ph$i = $e2$0$ph$i;$rp$3$ph33$i = $rp$2$ph38$i;$z$5$ph$i = $z$1$ph39$i;
       break;
      }
      while(1) {
       $633 = HEAP32[$607>>2]|0;
       $634 = ($633>>>0)<(9007199);
       if (!($634)) {
        $a$3$ph$i = $a$2$ph40$i;$e2$1$ph$i = $e2$0$us44$i;$rp$3$ph33$i = 18;$z$5$ph$i = $z$1$us45$i;
        break L294;
       }
       $635 = (($z$1$us45$i) + 127)|0;
       $carry1$0$us49$i = 0;$k$5$in$us48$i = $635;$z$2$us47$i = $z$1$us45$i;
       while(1) {
        $k$5$us50$i = $k$5$in$us48$i & 127;
        $636 = (($x$i) + ($k$5$us50$i<<2)|0);
        $637 = HEAP32[$636>>2]|0;
        $638 = (_bitshift64Shl(($637|0),0,29)|0);
        $639 = tempRet0;
        $640 = (_i64Add(($638|0),($639|0),($carry1$0$us49$i|0),0)|0);
        $641 = tempRet0;
        $642 = ($641>>>0)>(0);
        $643 = ($641|0)==(0);
        $644 = ($640>>>0)>(1000000000);
        $645 = $643 & $644;
        $646 = $642 | $645;
        if ($646) {
         $647 = (___udivdi3(($640|0),($641|0),1000000000,0)|0);
         $648 = tempRet0;
         $649 = (___uremdi3(($640|0),($641|0),1000000000,0)|0);
         $650 = tempRet0;
         $$sink$off0$us53$i = $649;$carry1$1$us54$i = $647;
        } else {
         $$sink$off0$us53$i = $640;$carry1$1$us54$i = 0;
        }
        HEAP32[$636>>2] = $$sink$off0$us53$i;
        $651 = (($z$2$us47$i) + 127)|0;
        $652 = $651 & 127;
        $653 = ($k$5$us50$i|0)!=($652|0);
        $654 = ($k$5$us50$i|0)==($a$2$ph40$i|0);
        $or$cond12$us55$i = $653 | $654;
        if ($or$cond12$us55$i) {
         $z$3$us57$i = $z$2$us47$i;
        } else {
         $655 = ($$sink$off0$us53$i|0)==(0);
         $k$5$z$2$us56$i = $655 ? $k$5$us50$i : $z$2$us47$i;
         $z$3$us57$i = $k$5$z$2$us56$i;
        }
        $656 = (($k$5$us50$i) + -1)|0;
        if ($654) {
         break;
        } else {
         $carry1$0$us49$i = $carry1$1$us54$i;$k$5$in$us48$i = $656;$z$2$us47$i = $z$3$us57$i;
        }
       }
       $657 = (($e2$0$us44$i) + -29)|0;
       $658 = ($carry1$1$us54$i|0)==(0);
       if ($658) {
        $e2$0$us44$i = $657;$z$1$us45$i = $z$3$us57$i;
       } else {
        $$lcssa43$i = $657;$carry1$1$lcssa$lcssa$i = $carry1$1$us54$i;$z$3$lcssa$lcssa$i = $z$3$us57$i;
        break;
       }
      }
     }
     $659 = (($rp$2$ph38$i) + 9)|0;
     $660 = (($a$2$ph40$i) + 127)|0;
     $661 = $660 & 127;
     $662 = ($661|0)==($z$3$lcssa$lcssa$i|0);
     if ($662) {
      $663 = (($z$3$lcssa$lcssa$i) + 127)|0;
      $664 = $663 & 127;
      $665 = (($x$i) + ($664<<2)|0);
      $666 = HEAP32[$665>>2]|0;
      $667 = (($z$3$lcssa$lcssa$i) + 126)|0;
      $668 = $667 & 127;
      $669 = (($x$i) + ($668<<2)|0);
      $670 = HEAP32[$669>>2]|0;
      $671 = $670 | $666;
      HEAP32[$669>>2] = $671;
      $z$4$i = $664;
     } else {
      $z$4$i = $z$3$lcssa$lcssa$i;
     }
     $672 = (($x$i) + ($661<<2)|0);
     HEAP32[$672>>2] = $carry1$1$lcssa$lcssa$i;
     $a$2$ph40$i = $661;$e2$0$ph$i = $$lcssa43$i;$rp$2$ph38$i = $659;$z$1$ph39$i = $z$4$i;
    }
    L325: while(1) {
     $709 = (($z$5$ph$i) + 1)|0;
     $707 = $709 & 127;
     $710 = (($z$5$ph$i) + 127)|0;
     $711 = $710 & 127;
     $712 = (($x$i) + ($711<<2)|0);
     $a$3$i$ph = $a$3$ph$i;$e2$1$i$ph = $e2$1$ph$i;$rp$3$i$ph = $rp$3$ph33$i;
     while(1) {
      $685 = ($rp$3$i$ph|0)==(18);
      $713 = ($rp$3$i$ph|0)>(27);
      $$14$i = $713 ? 9 : 1;
      $a$3$i = $a$3$i$ph;$e2$1$i = $e2$1$i$ph;
      while(1) {
       $i$025$i = 0;
       while(1) {
        $675 = (($i$025$i) + ($a$3$i))|0;
        $676 = $675 & 127;
        $677 = ($676|0)==($z$5$ph$i|0);
        if ($677) {
         $i$1$i = 2;
         break;
        }
        $678 = (($x$i) + ($676<<2)|0);
        $679 = HEAP32[$678>>2]|0;
        $680 = (16024 + ($i$025$i<<2)|0);
        $681 = HEAP32[$680>>2]|0;
        $682 = ($679>>>0)<($681>>>0);
        if ($682) {
         $i$1$i = 2;
         break;
        }
        $683 = ($679>>>0)>($681>>>0);
        $674 = (($i$025$i) + 1)|0;
        if ($683) {
         $i$1$i = $i$025$i;
         break;
        }
        $673 = ($674|0)<(2);
        if ($673) {
         $i$025$i = $674;
        } else {
         $i$1$i = $674;
         break;
        }
       }
       $684 = ($i$1$i|0)==(2);
       $or$cond13$i = $684 & $685;
       if ($or$cond13$i) {
        break L325;
       }
       $688 = (($$14$i) + ($e2$1$i))|0;
       $689 = ($a$3$i|0)==($z$5$ph$i|0);
       if ($689) {
        $a$3$i = $z$5$ph$i;$e2$1$i = $688;
       } else {
        break;
       }
      }
      $690 = 1 << $$14$i;
      $691 = (($690) + -1)|0;
      $692 = 1000000000 >>> $$14$i;
      $a$427$i = $a$3$i;$carry3$030$i = 0;$k$628$i = $a$3$i;$rp$426$i = $rp$3$i$ph;
      while(1) {
       $693 = (($x$i) + ($k$628$i<<2)|0);
       $694 = HEAP32[$693>>2]|0;
       $695 = $694 & $691;
       $696 = $694 >>> $$14$i;
       $697 = (($696) + ($carry3$030$i))|0;
       HEAP32[$693>>2] = $697;
       $698 = Math_imul($695, $692)|0;
       $699 = ($k$628$i|0)==($a$427$i|0);
       $700 = ($697|0)==(0);
       $or$cond15$i = $699 & $700;
       $701 = (($k$628$i) + 1)|0;
       $702 = $701 & 127;
       $703 = (($rp$426$i) + -9)|0;
       $rp$5$i = $or$cond15$i ? $703 : $rp$426$i;
       $a$5$i = $or$cond15$i ? $702 : $a$427$i;
       $704 = ($702|0)==($z$5$ph$i|0);
       if ($704) {
        break;
       } else {
        $a$427$i = $a$5$i;$carry3$030$i = $698;$k$628$i = $702;$rp$426$i = $rp$5$i;
       }
      }
      $705 = ($698|0)==(0);
      if ($705) {
       $a$3$i$ph = $a$5$i;$e2$1$i$ph = $688;$rp$3$i$ph = $rp$5$i;
       continue;
      }
      $706 = ($707|0)==($a$5$i|0);
      if (!($706)) {
       break;
      }
      $714 = HEAP32[$712>>2]|0;
      $715 = $714 | 1;
      HEAP32[$712>>2] = $715;
      $a$3$i$ph = $a$5$i;$e2$1$i$ph = $688;$rp$3$i$ph = $rp$5$i;
     }
     $708 = (($x$i) + ($z$5$ph$i<<2)|0);
     HEAP32[$708>>2] = $698;
     $a$3$ph$i = $a$5$i;$e2$1$ph$i = $688;$rp$3$ph33$i = $rp$5$i;$z$5$ph$i = $707;
    }
    $686 = $a$3$i & 127;
    $687 = ($686|0)==($z$5$ph$i|0);
    if ($687) {
     $716 = (($707) + -1)|0;
     $717 = (($x$i) + ($716<<2)|0);
     HEAP32[$717>>2] = 0;
     $z$7$i = $707;
    } else {
     $z$7$i = $z$5$ph$i;
    }
    $718 = (($x$i) + ($686<<2)|0);
    $719 = HEAP32[$718>>2]|0;
    $720 = (+($719>>>0));
    $721 = (($a$3$i) + 1)|0;
    $722 = $721 & 127;
    $723 = ($722|0)==($z$7$i|0);
    if ($723) {
     $828 = (($z$7$i) + 1)|0;
     $829 = $828 & 127;
     $830 = (($829) + -1)|0;
     $831 = (($x$i) + ($830<<2)|0);
     HEAP32[$831>>2] = 0;
     $z$7$1$i = $829;
    } else {
     $z$7$1$i = $z$7$i;
    }
    $832 = $720 * 1.0E+9;
    $833 = (($x$i) + ($722<<2)|0);
    $834 = HEAP32[$833>>2]|0;
    $835 = (+($834>>>0));
    $836 = $832 + $835;
    $775 = (+($sign$0|0));
    $743 = $775 * $836;
    $795 = (($e2$1$i) + 53)|0;
    $725 = (($795) - ($emin$0$ph))|0;
    $837 = ($725|0)<($bits$0$ph|0);
    if ($837) {
     $724 = ($725|0)<(0);
     $$$i22 = $724 ? 0 : $725;
     $$09$i = $$$i22;$denormal$0$i = 1;
    } else {
     $$09$i = $bits$0$ph;$denormal$0$i = 0;
    }
    $726 = ($$09$i|0)<(53);
    if ($726) {
     $727 = (105 - ($$09$i))|0;
     $728 = ($727|0)>(1023);
     do {
      if ($728) {
       $729 = (($727) + -1023)|0;
       $730 = ($729|0)>(1023);
       if (!($730)) {
        $$0$i5 = $729;$y$0$i6 = 8.98846567431157953864E+307;
        break;
       }
       $731 = (($727) + -2046)|0;
       $732 = ($731|0)>(1023);
       $$$i3 = $732 ? 1023 : $731;
       $$0$i5 = $$$i3;$y$0$i6 = inf;
      } else {
       $733 = ($727|0)<(-1022);
       if (!($733)) {
        $$0$i5 = $727;$y$0$i6 = 1.0;
        break;
       }
       $734 = (($727) + 1022)|0;
       $735 = ($734|0)<(-1022);
       if (!($735)) {
        $$0$i5 = $734;$y$0$i6 = 2.22507385850720138309E-308;
        break;
       }
       $736 = (($727) + 2044)|0;
       $737 = ($736|0)<(-1022);
       $$1$i4 = $737 ? -1022 : $736;
       $$0$i5 = $$1$i4;$y$0$i6 = 0.0;
      }
     } while(0);
     $738 = (($$0$i5) + 1023)|0;
     $739 = (_bitshift64Shl(($738|0),0,52)|0);
     $740 = tempRet0;
     HEAP32[tempDoublePtr>>2] = $739;HEAP32[tempDoublePtr+4>>2] = $740;$741 = +HEAPF64[tempDoublePtr>>3];
     $742 = $y$0$i6 * $741;
     $744 = (+_copysignl((+$742),(+$743)));
     $745 = (53 - ($$09$i))|0;
     $746 = ($745|0)>(1023);
     do {
      if ($746) {
       $747 = (($745) + -1023)|0;
       $748 = ($747|0)>(1023);
       if (!($748)) {
        $$0$i = $747;$y$0$i2 = 8.98846567431157953864E+307;
        break;
       }
       $749 = (($745) + -2046)|0;
       $750 = ($749|0)>(1023);
       $$$i1 = $750 ? 1023 : $749;
       $$0$i = $$$i1;$y$0$i2 = inf;
      } else {
       $751 = ($745|0)<(-1022);
       if (!($751)) {
        $$0$i = $745;$y$0$i2 = 1.0;
        break;
       }
       $752 = (($745) + 1022)|0;
       $753 = ($752|0)<(-1022);
       if (!($753)) {
        $$0$i = $752;$y$0$i2 = 2.22507385850720138309E-308;
        break;
       }
       $754 = (($745) + 2044)|0;
       $755 = ($754|0)<(-1022);
       $$1$i = $755 ? -1022 : $754;
       $$0$i = $$1$i;$y$0$i2 = 0.0;
      }
     } while(0);
     $756 = (($$0$i) + 1023)|0;
     $757 = (_bitshift64Shl(($756|0),0,52)|0);
     $758 = tempRet0;
     HEAP32[tempDoublePtr>>2] = $757;HEAP32[tempDoublePtr+4>>2] = $758;$759 = +HEAPF64[tempDoublePtr>>3];
     $760 = $y$0$i2 * $759;
     $761 = (+_fmodl((+$743),(+$760)));
     $762 = $743 - $761;
     $763 = $744 + $762;
     $bias$0$i = $744;$frac$0$i = $761;$y$1$i23 = $763;
    } else {
     $bias$0$i = 0.0;$frac$0$i = 0.0;$y$1$i23 = $743;
    }
    $764 = (($a$3$i) + 2)|0;
    $765 = $764 & 127;
    $766 = ($765|0)==($z$7$1$i|0);
    do {
     if ($766) {
      $frac$2$i = $frac$0$i;
     } else {
      $767 = (($x$i) + ($765<<2)|0);
      $768 = HEAP32[$767>>2]|0;
      $769 = ($768>>>0)<(500000000);
      do {
       if ($769) {
        $770 = ($768|0)==(0);
        if ($770) {
         $771 = (($a$3$i) + 3)|0;
         $772 = $771 & 127;
         $773 = ($772|0)==($z$7$1$i|0);
         if ($773) {
          $frac$1$i = $frac$0$i;
          break;
         }
        }
        $774 = $775 * 0.25;
        $776 = $774 + $frac$0$i;
        $frac$1$i = $776;
       } else {
        $777 = ($768>>>0)>(500000000);
        if ($777) {
         $778 = $775 * 0.75;
         $779 = $778 + $frac$0$i;
         $frac$1$i = $779;
         break;
        }
        $780 = (($a$3$i) + 3)|0;
        $781 = $780 & 127;
        $782 = ($781|0)==($z$7$1$i|0);
        if ($782) {
         $783 = $775 * 0.5;
         $784 = $783 + $frac$0$i;
         $frac$1$i = $784;
         break;
        } else {
         $785 = $775 * 0.75;
         $786 = $785 + $frac$0$i;
         $frac$1$i = $786;
         break;
        }
       }
      } while(0);
      $787 = (53 - ($$09$i))|0;
      $788 = ($787|0)>(1);
      if (!($788)) {
       $frac$2$i = $frac$1$i;
       break;
      }
      $789 = (+_fmodl((+$frac$1$i),1.0));
      $790 = $789 != 0.0;
      if ($790) {
       $frac$2$i = $frac$1$i;
       break;
      }
      $791 = $frac$1$i + 1.0;
      $frac$2$i = $791;
     }
    } while(0);
    $792 = $y$1$i23 + $frac$2$i;
    $793 = $792 - $bias$0$i;
    $794 = $795 & 2147483647;
    $796 = (-2 - ($sum$i))|0;
    $797 = ($794|0)>($796|0);
    do {
     if ($797) {
      $798 = (+Math_abs((+$793)));
      $799 = !($798 >= 9007199254740992.0);
      if ($799) {
       $denormal$2$i = $denormal$0$i;$e2$2$i = $e2$1$i;$y$2$i24 = $793;
      } else {
       $800 = ($denormal$0$i|0)!=(0);
       $801 = ($$09$i|0)==($725|0);
       $or$cond16$i = $800 & $801;
       $denormal$1$i = $or$cond16$i ? 0 : $denormal$0$i;
       $802 = $793 * 0.5;
       $803 = (($e2$1$i) + 1)|0;
       $denormal$2$i = $denormal$1$i;$e2$2$i = $803;$y$2$i24 = $802;
      }
      $804 = (($e2$2$i) + 50)|0;
      $805 = ($804|0)>($389|0);
      if (!($805)) {
       $806 = ($denormal$2$i|0)!=(0);
       $807 = $frac$2$i != 0.0;
       $or$cond17$i = $806 & $807;
       if (!($or$cond17$i)) {
        $e2$3$i = $e2$2$i;$y$3$i = $y$2$i24;
        break;
       }
      }
      $808 = (___errno_location()|0);
      HEAP32[$808>>2] = 34;
      $e2$3$i = $e2$2$i;$y$3$i = $y$2$i24;
     } else {
      $e2$3$i = $e2$1$i;$y$3$i = $793;
     }
    } while(0);
    $809 = ($e2$3$i|0)>(1023);
    do {
     if ($809) {
      $810 = $y$3$i * 8.98846567431157953864E+307;
      $811 = (($e2$3$i) + -1023)|0;
      $812 = ($811|0)>(1023);
      if (!($812)) {
       $$0$i$i = $811;$y$0$i$i = $810;
       break;
      }
      $813 = $810 * 8.98846567431157953864E+307;
      $814 = (($e2$3$i) + -2046)|0;
      $815 = ($814|0)>(1023);
      $$$i$i = $815 ? 1023 : $814;
      $$0$i$i = $$$i$i;$y$0$i$i = $813;
     } else {
      $816 = ($e2$3$i|0)<(-1022);
      if (!($816)) {
       $$0$i$i = $e2$3$i;$y$0$i$i = $y$3$i;
       break;
      }
      $817 = $y$3$i * 2.22507385850720138309E-308;
      $818 = (($e2$3$i) + 1022)|0;
      $819 = ($818|0)<(-1022);
      if (!($819)) {
       $$0$i$i = $818;$y$0$i$i = $817;
       break;
      }
      $820 = $817 * 2.22507385850720138309E-308;
      $821 = (($e2$3$i) + 2044)|0;
      $822 = ($821|0)<(-1022);
      $$1$i$i = $822 ? -1022 : $821;
      $$0$i$i = $$1$i$i;$y$0$i$i = $820;
     }
    } while(0);
    $823 = (($$0$i$i) + 1023)|0;
    $824 = (_bitshift64Shl(($823|0),0,52)|0);
    $825 = tempRet0;
    HEAP32[tempDoublePtr>>2] = $824;HEAP32[tempDoublePtr+4>>2] = $825;$826 = +HEAPF64[tempDoublePtr>>3];
    $827 = $y$0$i$i * $826;
    $$0 = $827;
    STACKTOP = sp;return (+$$0);
   } else if ((($i$3|0) == 3)) {
    $69 = HEAP32[$0>>2]|0;
    $70 = HEAP32[$1>>2]|0;
    $71 = ($69>>>0)<($70>>>0);
    if ($71) {
     $72 = (($69) + 1|0);
     HEAP32[$0>>2] = $72;
     $73 = HEAP8[$69>>0]|0;
     $74 = $73&255;
     $77 = $74;
    } else {
     $75 = (___shgetc($f)|0);
     $77 = $75;
    }
    $76 = ($77|0)==(40);
    if ($76) {
     $i$4 = 1;
    } else {
     $78 = HEAP32[$1>>2]|0;
     $79 = ($78|0)==(0|0);
     if ($79) {
      $$0 = nan;
      STACKTOP = sp;return (+$$0);
     }
     $80 = HEAP32[$0>>2]|0;
     $81 = (($80) + -1|0);
     HEAP32[$0>>2] = $81;
     $$0 = nan;
     STACKTOP = sp;return (+$$0);
    }
    while(1) {
     $82 = HEAP32[$0>>2]|0;
     $83 = HEAP32[$1>>2]|0;
     $84 = ($82>>>0)<($83>>>0);
     if ($84) {
      $85 = (($82) + 1|0);
      HEAP32[$0>>2] = $85;
      $86 = HEAP8[$82>>0]|0;
      $87 = $86&255;
      $90 = $87;
     } else {
      $88 = (___shgetc($f)|0);
      $90 = $88;
     }
     $89 = (($90) + -48)|0;
     $91 = ($89>>>0)<(10);
     $92 = (($90) + -65)|0;
     $93 = ($92>>>0)<(26);
     $or$cond8 = $91 | $93;
     if (!($or$cond8)) {
      $94 = (($90) + -97)|0;
      $95 = ($94>>>0)<(26);
      $96 = ($90|0)==(95);
      $or$cond5 = $95 | $96;
      if (!($or$cond5)) {
       break;
      }
     }
     $116 = (($i$4) + 1)|0;
     $i$4 = $116;
    }
    $97 = ($90|0)==(41);
    if ($97) {
     $$0 = nan;
     STACKTOP = sp;return (+$$0);
    }
    $98 = HEAP32[$1>>2]|0;
    $99 = ($98|0)==(0|0);
    if (!($99)) {
     $100 = HEAP32[$0>>2]|0;
     $101 = (($100) + -1|0);
     HEAP32[$0>>2] = $101;
    }
    if ($40) {
     $103 = (___errno_location()|0);
     HEAP32[$103>>2] = 22;
     $104 = (($f) + 104|0);
     HEAP32[$104>>2] = 0;
     $105 = (($f) + 8|0);
     $106 = HEAP32[$105>>2]|0;
     $107 = HEAP32[$0>>2]|0;
     $108 = $106;
     $109 = $107;
     $110 = (($108) - ($109))|0;
     $111 = (($f) + 108|0);
     HEAP32[$111>>2] = $110;
     HEAP32[$1>>2] = $106;
     $$0 = 0.0;
     STACKTOP = sp;return (+$$0);
    }
    $102 = ($i$4|0)==(0);
    $brmerge107 = $102 | $99;
    if ($brmerge107) {
     $$0 = nan;
     STACKTOP = sp;return (+$$0);
    }
    $$promoted = HEAP32[$0>>2]|0;
    $$in = $i$4;$114 = $$promoted;
    while(1) {
     $112 = (($$in) + -1)|0;
     $113 = (($114) + -1|0);
     $115 = ($112|0)==(0);
     if ($115) {
      break;
     } else {
      $$in = $112;$114 = $113;
     }
    }
    HEAP32[$0>>2] = $113;
    $$0 = nan;
    STACKTOP = sp;return (+$$0);
   } else {
    $117 = HEAP32[$1>>2]|0;
    $118 = ($117|0)==(0|0);
    $$pre = HEAP32[$0>>2]|0;
    if ($118) {
     $126 = $$pre;
    } else {
     $119 = (($$pre) + -1|0);
     HEAP32[$0>>2] = $119;
     $126 = $119;
    }
    $120 = (___errno_location()|0);
    HEAP32[$120>>2] = 22;
    $121 = (($f) + 104|0);
    HEAP32[$121>>2] = 0;
    $122 = (($f) + 8|0);
    $123 = HEAP32[$122>>2]|0;
    $124 = $123;
    $125 = $126;
    $127 = (($124) - ($125))|0;
    $128 = (($f) + 108|0);
    HEAP32[$128>>2] = $127;
    HEAP32[$1>>2] = $123;
    $$0 = 0.0;
    STACKTOP = sp;return (+$$0);
   }
  }
 } while(0);
 if ((label|0) == 23) {
  $42 = HEAP32[$1>>2]|0;
  $43 = ($42|0)==(0|0);
  if (!($43)) {
   $44 = HEAP32[$0>>2]|0;
   $45 = (($44) + -1|0);
   HEAP32[$0>>2] = $45;
   $notlhs = ($pok|0)==(0);
   $notrhs = ($i$0$lcssa>>>0)<(4);
   $or$cond106$not = $notrhs | $notlhs;
   if (!($or$cond106$not)) {
    $47 = $45;$i$166 = $i$0$lcssa;
    while(1) {
     $46 = (($47) + -1|0);
     $48 = (($i$166) + -1)|0;
     $49 = ($48>>>0)>(3);
     if ($49) {
      $47 = $46;$i$166 = $48;
     } else {
      break;
     }
    }
    HEAP32[$0>>2] = $46;
   }
  }
 }
 $50 = (+($sign$0|0));
 $51 = $50 * inf;
 $52 = $51;
 $$0 = $52;
 STACKTOP = sp;return (+$$0);
}
function _scanexp($f,$pok) {
 $f = $f|0;
 $pok = $pok|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $c$0 = 0, $c$1$be = 0, $c$18 = 0, $c$2$be = 0;
 var $c$2$lcssa = 0, $c$23 = 0, $c$3$be = 0, $neg$0 = 0, $or$cond = 0, $or$cond2 = 0, $phitmp16 = 0, $x$09 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($f) + 100|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($1>>>0)<($3>>>0);
 if ($4) {
  $5 = (($1) + 1|0);
  HEAP32[$0>>2] = $5;
  $6 = HEAP8[$1>>0]|0;
  $7 = $6&255;
  $10 = $7;
 } else {
  $8 = (___shgetc($f)|0);
  $10 = $8;
 }
 $9 = ($10|0)==(45);
 if ((($10|0) == 43) | (($10|0) == 45)) {
  $11 = $9&1;
  $12 = HEAP32[$0>>2]|0;
  $13 = HEAP32[$2>>2]|0;
  $14 = ($12>>>0)<($13>>>0);
  if ($14) {
   $15 = (($12) + 1|0);
   HEAP32[$0>>2] = $15;
   $16 = HEAP8[$12>>0]|0;
   $17 = $16&255;
   $20 = $17;
  } else {
   $18 = (___shgetc($f)|0);
   $20 = $18;
  }
  $19 = (($20) + -48)|0;
  $21 = ($19>>>0)<(10);
  $22 = ($pok|0)==(0);
  $or$cond = $21 | $22;
  if ($or$cond) {
   $c$0 = $20;$neg$0 = $11;
  } else {
   $23 = HEAP32[$2>>2]|0;
   $24 = ($23|0)==(0|0);
   if ($24) {
    $c$0 = $20;$neg$0 = $11;
   } else {
    $25 = HEAP32[$0>>2]|0;
    $26 = (($25) + -1|0);
    HEAP32[$0>>2] = $26;
    $c$0 = $20;$neg$0 = $11;
   }
  }
 } else {
  $c$0 = $10;$neg$0 = 0;
 }
 $27 = (($c$0) + -48)|0;
 $28 = ($27>>>0)>(9);
 if ($28) {
  $29 = HEAP32[$2>>2]|0;
  $30 = ($29|0)==(0|0);
  if ($30) {
   $93 = -2147483648;$94 = 0;
   tempRet0 = $93;
   STACKTOP = sp;return ($94|0);
  }
  $31 = HEAP32[$0>>2]|0;
  $32 = (($31) + -1|0);
  HEAP32[$0>>2] = $32;
  $93 = -2147483648;$94 = 0;
  tempRet0 = $93;
  STACKTOP = sp;return ($94|0);
 } else {
  $c$18 = $c$0;$x$09 = 0;
 }
 while(1) {
  $33 = (($c$18) + -48)|0;
  $34 = (($33) + ($x$09))|0;
  $35 = HEAP32[$0>>2]|0;
  $36 = HEAP32[$2>>2]|0;
  $37 = ($35>>>0)<($36>>>0);
  if ($37) {
   $38 = (($35) + 1|0);
   HEAP32[$0>>2] = $38;
   $39 = HEAP8[$35>>0]|0;
   $40 = $39&255;
   $c$1$be = $40;
  } else {
   $41 = (___shgetc($f)|0);
   $c$1$be = $41;
  }
  $42 = (($c$1$be) + -48)|0;
  $43 = ($42>>>0)<(10);
  $44 = ($34|0)<(214748364);
  $$ = $43 & $44;
  if (!($$)) {
   break;
  }
  $phitmp16 = ($34*10)|0;
  $c$18 = $c$1$be;$x$09 = $phitmp16;
 }
 $45 = ($34|0)<(0);
 $46 = $45 << 31 >> 31;
 if ($43) {
  $49 = $34;$50 = $46;$c$23 = $c$1$be;
  while(1) {
   $51 = (___muldi3(($49|0),($50|0),10,0)|0);
   $52 = tempRet0;
   $53 = ($c$23|0)<(0);
   $54 = $53 << 31 >> 31;
   $55 = (_i64Add(($c$23|0),($54|0),-48,-1)|0);
   $56 = tempRet0;
   $57 = (_i64Add(($55|0),($56|0),($51|0),($52|0))|0);
   $58 = tempRet0;
   $59 = HEAP32[$0>>2]|0;
   $60 = HEAP32[$2>>2]|0;
   $61 = ($59>>>0)<($60>>>0);
   if ($61) {
    $62 = (($59) + 1|0);
    HEAP32[$0>>2] = $62;
    $63 = HEAP8[$59>>0]|0;
    $64 = $63&255;
    $c$2$be = $64;
   } else {
    $65 = (___shgetc($f)|0);
    $c$2$be = $65;
   }
   $66 = (($c$2$be) + -48)|0;
   $67 = ($66>>>0)<(10);
   $68 = ($58|0)<(21474836);
   $69 = ($58|0)==(21474836);
   $70 = ($57>>>0)<(2061584302);
   $71 = $69 & $70;
   $72 = $68 | $71;
   $or$cond2 = $67 & $72;
   if ($or$cond2) {
    $49 = $57;$50 = $58;$c$23 = $c$2$be;
   } else {
    $87 = $57;$88 = $58;$c$2$lcssa = $c$2$be;
    break;
   }
  }
 } else {
  $87 = $34;$88 = $46;$c$2$lcssa = $c$1$be;
 }
 $47 = (($c$2$lcssa) + -48)|0;
 $48 = ($47>>>0)<(10);
 if ($48) {
  while(1) {
   $73 = HEAP32[$0>>2]|0;
   $74 = HEAP32[$2>>2]|0;
   $75 = ($73>>>0)<($74>>>0);
   if ($75) {
    $76 = (($73) + 1|0);
    HEAP32[$0>>2] = $76;
    $77 = HEAP8[$73>>0]|0;
    $78 = $77&255;
    $c$3$be = $78;
   } else {
    $79 = (___shgetc($f)|0);
    $c$3$be = $79;
   }
   $80 = (($c$3$be) + -48)|0;
   $81 = ($80>>>0)<(10);
   if (!($81)) {
    break;
   }
  }
 }
 $82 = HEAP32[$2>>2]|0;
 $83 = ($82|0)==(0|0);
 if (!($83)) {
  $84 = HEAP32[$0>>2]|0;
  $85 = (($84) + -1|0);
  HEAP32[$0>>2] = $85;
 }
 $86 = ($neg$0|0)!=(0);
 $89 = (_i64Subtract(0,0,($87|0),($88|0))|0);
 $90 = tempRet0;
 $91 = $86 ? $89 : $87;
 $92 = $86 ? $90 : $88;
 $93 = $92;$94 = $91;
 tempRet0 = $93;
 STACKTOP = sp;return ($94|0);
}
function ___shgetc($f) {
 $f = $f|0;
 var $$0 = 0, $$phi$trans$insert = 0, $$phi$trans$insert2$phi$trans$insert$phi$trans$insert = 0, $$pre = 0, $$pre3 = 0, $$pre3$pre = 0, $$pre3$pre$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 104|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  label = 3;
 } else {
  $3 = (($f) + 108|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)<($1|0);
  if ($5) {
   label = 3;
  }
 }
 if ((label|0) == 3) {
  $6 = (___uflow($f)|0);
  $7 = ($6|0)<(0);
  if (!($7)) {
   $9 = HEAP32[$0>>2]|0;
   $10 = ($9|0)==(0);
   $$phi$trans$insert = (($f) + 8|0);
   $$pre = HEAP32[$$phi$trans$insert>>2]|0;
   $$phi$trans$insert2$phi$trans$insert$phi$trans$insert = (($f) + 4|0);
   $$pre3$pre$pre = HEAP32[$$phi$trans$insert2$phi$trans$insert$phi$trans$insert>>2]|0;
   if ($10) {
    $$pre3$pre = $$pre3$pre$pre;
    label = 8;
   } else {
    $11 = $$pre;
    $12 = $$pre3$pre$pre;
    $13 = (($11) - ($12))|0;
    $14 = (($f) + 108|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = (($9) - ($15))|0;
    $17 = (($16) + -1)|0;
    $18 = ($13|0)>($17|0);
    if ($18) {
     $19 = (($$pre3$pre$pre) + ($17)|0);
     $20 = (($f) + 100|0);
     HEAP32[$20>>2] = $19;
     $$pre3 = $$pre3$pre$pre;
    } else {
     $$pre3$pre = $$pre3$pre$pre;
     label = 8;
    }
   }
   if ((label|0) == 8) {
    $21 = (($f) + 100|0);
    HEAP32[$21>>2] = $$pre;
    $$pre3 = $$pre3$pre;
   }
   $22 = ($$pre|0)==(0|0);
   if (!($22)) {
    $23 = $$pre;
    $24 = $$pre3;
    $25 = (($f) + 108|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = (($23) + 1)|0;
    $28 = (($27) - ($24))|0;
    $29 = (($28) + ($26))|0;
    HEAP32[$25>>2] = $29;
   }
   $30 = (($$pre3) + -1|0);
   $31 = HEAP8[$30>>0]|0;
   $32 = $31&255;
   $33 = ($32|0)==($6|0);
   if ($33) {
    $$0 = $6;
    STACKTOP = sp;return ($$0|0);
   }
   $34 = $6&255;
   HEAP8[$30>>0] = $34;
   $$0 = $6;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $8 = (($f) + 100|0);
 HEAP32[$8>>2] = 0;
 $$0 = -1;
 STACKTOP = sp;return ($$0|0);
}
function _frexp($x,$e) {
 $x = +$x;
 $e = $e|0;
 var $$0 = 0.0, $$01 = 0.0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 $2 = (_bitshift64Lshr(($0|0),($1|0),52)|0);
 $3 = tempRet0;
 $4 = $2 & 2047;
 if ((($4|0) == 0)) {
  $5 = $x != 0.0;
  if ($5) {
   $6 = $x * 18446744073709551616.0;
   $7 = (+_frexp($6,$e));
   $8 = HEAP32[$e>>2]|0;
   $9 = (($8) + -64)|0;
   $$01 = $7;$storemerge = $9;
  } else {
   $$01 = $x;$storemerge = 0;
  }
  HEAP32[$e>>2] = $storemerge;
  $$0 = $$01;
  STACKTOP = sp;return (+$$0);
 } else if ((($4|0) == 2047)) {
  $$0 = $x;
  STACKTOP = sp;return (+$$0);
 } else {
  $10 = (($4) + -1022)|0;
  HEAP32[$e>>2] = $10;
  $11 = $1 & -2146435073;
  $12 = $11 | 1071644672;
  HEAP32[tempDoublePtr>>2] = $0;HEAP32[tempDoublePtr+4>>2] = $12;$13 = +HEAPF64[tempDoublePtr>>3];
  $$0 = $13;
  STACKTOP = sp;return (+$$0);
 }
 return +0;
}
function _wcrtomb($s,$wc) {
 $s = $s|0;
 $wc = $wc|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($s|0)==(0|0);
 if ($0) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $1 = ($wc>>>0)<(128);
 if ($1) {
  $2 = $wc&255;
  HEAP8[$s>>0] = $2;
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = ($wc>>>0)<(2048);
 if ($3) {
  $4 = $wc >>> 6;
  $5 = $4 | 192;
  $6 = $5&255;
  $7 = (($s) + 1|0);
  HEAP8[$s>>0] = $6;
  $8 = $wc & 63;
  $9 = $8 | 128;
  $10 = $9&255;
  HEAP8[$7>>0] = $10;
  $$0 = 2;
  STACKTOP = sp;return ($$0|0);
 }
 $11 = ($wc>>>0)<(55296);
 $12 = (($wc) + -57344)|0;
 $13 = ($12>>>0)<(8192);
 $or$cond = $11 | $13;
 if ($or$cond) {
  $14 = $wc >>> 12;
  $15 = $14 | 224;
  $16 = $15&255;
  $17 = (($s) + 1|0);
  HEAP8[$s>>0] = $16;
  $18 = $wc >>> 6;
  $19 = $18 & 63;
  $20 = $19 | 128;
  $21 = $20&255;
  $22 = (($s) + 2|0);
  HEAP8[$17>>0] = $21;
  $23 = $wc & 63;
  $24 = $23 | 128;
  $25 = $24&255;
  HEAP8[$22>>0] = $25;
  $$0 = 3;
  STACKTOP = sp;return ($$0|0);
 }
 $26 = (($wc) + -65536)|0;
 $27 = ($26>>>0)<(1048576);
 if ($27) {
  $28 = $wc >>> 18;
  $29 = $28 | 240;
  $30 = $29&255;
  $31 = (($s) + 1|0);
  HEAP8[$s>>0] = $30;
  $32 = $wc >>> 12;
  $33 = $32 & 63;
  $34 = $33 | 128;
  $35 = $34&255;
  $36 = (($s) + 2|0);
  HEAP8[$31>>0] = $35;
  $37 = $wc >>> 6;
  $38 = $37 & 63;
  $39 = $38 | 128;
  $40 = $39&255;
  $41 = (($s) + 3|0);
  HEAP8[$36>>0] = $40;
  $42 = $wc & 63;
  $43 = $42 | 128;
  $44 = $43&255;
  HEAP8[$41>>0] = $44;
  $$0 = 4;
  STACKTOP = sp;return ($$0|0);
 } else {
  $45 = (___errno_location()|0);
  HEAP32[$45>>2] = 84;
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function ___uflow($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $c = sp;
 $0 = (($f) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 do {
  if ($2) {
   $3 = (($f) + 74|0);
   $4 = HEAP8[$3>>0]|0;
   $5 = $4 << 24 >> 24;
   $6 = (($5) + 255)|0;
   $7 = $6 | $5;
   $8 = $7&255;
   HEAP8[$3>>0] = $8;
   $9 = (($f) + 20|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = (($f) + 44|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = ($10>>>0)>($12>>>0);
   if ($13) {
    $14 = (($f) + 36|0);
    $15 = HEAP32[$14>>2]|0;
    (FUNCTION_TABLE_iiii[$15 & 511]($f,0,0)|0);
   }
   $16 = (($f) + 16|0);
   HEAP32[$16>>2] = 0;
   $17 = (($f) + 28|0);
   HEAP32[$17>>2] = 0;
   HEAP32[$9>>2] = 0;
   $18 = HEAP32[$f>>2]|0;
   $19 = $18 & 20;
   $20 = ($19|0)==(0);
   if ($20) {
    $24 = HEAP32[$11>>2]|0;
    HEAP32[$0>>2] = $24;
    $25 = (($f) + 4|0);
    HEAP32[$25>>2] = $24;
    break;
   }
   $21 = $18 & 4;
   $22 = ($21|0)==(0);
   if ($22) {
    $$0 = -1;
    STACKTOP = sp;return ($$0|0);
   }
   $23 = $18 | 32;
   HEAP32[$f>>2] = $23;
   $$0 = -1;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 $26 = (($f) + 32|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = (FUNCTION_TABLE_iiii[$27 & 511]($f,$c,1)|0);
 $29 = ($28|0)==(1);
 if (!($29)) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $30 = HEAP8[$c>>0]|0;
 $31 = $30&255;
 $$0 = $31;
 STACKTOP = sp;return ($$0|0);
}
function ___fwritex($s,$l,$f) {
 $s = $s|0;
 $l = $l|0;
 $f = $f|0;
 var $$01 = 0, $$02 = 0, $$phi$trans$insert = 0, $$pre = 0, $$pre2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 do {
  if ($2) {
   $3 = (($f) + 74|0);
   $4 = HEAP8[$3>>0]|0;
   $5 = $4 << 24 >> 24;
   $6 = (($5) + 255)|0;
   $7 = $6 | $5;
   $8 = $7&255;
   HEAP8[$3>>0] = $8;
   $9 = HEAP32[$f>>2]|0;
   $10 = $9 & 8;
   $11 = ($10|0)==(0);
   if ($11) {
    $13 = (($f) + 8|0);
    HEAP32[$13>>2] = 0;
    $14 = (($f) + 4|0);
    HEAP32[$14>>2] = 0;
    $15 = (($f) + 44|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = (($f) + 28|0);
    HEAP32[$17>>2] = $16;
    $18 = (($f) + 20|0);
    HEAP32[$18>>2] = $16;
    $19 = (($f) + 48|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = (($16) + ($20)|0);
    HEAP32[$0>>2] = $21;
    $24 = $21;$26 = $16;
    break;
   }
   $12 = $9 | 32;
   HEAP32[$f>>2] = $12;
   STACKTOP = sp;return;
  } else {
   $$phi$trans$insert = (($f) + 20|0);
   $$pre2 = HEAP32[$$phi$trans$insert>>2]|0;
   $24 = $1;$26 = $$pre2;
  }
 } while(0);
 $22 = (($f) + 20|0);
 $23 = $24;
 $25 = $26;
 $27 = (($23) - ($25))|0;
 $28 = ($27>>>0)<($l>>>0);
 if ($28) {
  $29 = (($f) + 36|0);
  $30 = HEAP32[$29>>2]|0;
  (FUNCTION_TABLE_iiii[$30 & 511]($f,$s,$l)|0);
  STACKTOP = sp;return;
 }
 $31 = (($f) + 75|0);
 $32 = HEAP8[$31>>0]|0;
 $33 = ($32<<24>>24)>(-1);
 L13: do {
  if ($33) {
   $i$0 = $l;
   while(1) {
    $34 = ($i$0|0)==(0);
    if ($34) {
     $$01 = $l;$$02 = $s;$45 = $26;
     break L13;
    }
    $35 = (($i$0) + -1)|0;
    $36 = (($s) + ($35)|0);
    $37 = HEAP8[$36>>0]|0;
    $38 = ($37<<24>>24)==(10);
    if ($38) {
     break;
    } else {
     $i$0 = $35;
    }
   }
   $39 = (($f) + 36|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = (FUNCTION_TABLE_iiii[$40 & 511]($f,$s,$i$0)|0);
   $42 = ($41>>>0)<($i$0>>>0);
   if ($42) {
    STACKTOP = sp;return;
   } else {
    $43 = (($s) + ($i$0)|0);
    $44 = (($l) - ($i$0))|0;
    $$pre = HEAP32[$22>>2]|0;
    $$01 = $44;$$02 = $43;$45 = $$pre;
    break;
   }
  } else {
   $$01 = $l;$$02 = $s;$45 = $26;
  }
 } while(0);
 _memcpy(($45|0),($$02|0),($$01|0))|0;
 $46 = HEAP32[$22>>2]|0;
 $47 = (($46) + ($$01)|0);
 HEAP32[$22>>2] = $47;
 STACKTOP = sp;return;
}
function _snprintf($s,$n,$fmt,$varargs) {
 $s = $s|0;
 $n = $n|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $ap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $0 = (_vsnprintf($s,$n,$fmt,$ap)|0);
 STACKTOP = sp;return ($0|0);
}
function _printf_core($f,$fmt,$ap,$nl_arg,$nl_type) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 $nl_arg = $nl_arg|0;
 $nl_type = $nl_type|0;
 var $$ = 0, $$$5$i = 0, $$$i = 0, $$$p$i = 0, $$0 = 0, $$0$lcssa$i = 0, $$0$lcssa$i$i = 0, $$0$lcssa$i104$i = 0, $$0$lcssa$i128$i = 0, $$0$lcssa$i143$i = 0, $$0$lcssa$i2 = 0, $$0$lcssa$i38 = 0, $$0$lcssa$i39$i = 0, $$0$lcssa$i44 = 0, $$0$lcssa$i46 = 0, $$0$lcssa$i46$i = 0, $$0$lcssa$i49$i = 0, $$0$lcssa$i53 = 0, $$0$lcssa$i56$i = 0, $$0$lcssa$i60 = 0;
 var $$0$lcssa$i63$i = 0, $$0$lcssa$i67 = 0, $$0$lcssa$i69$i = 0, $$0$lcssa$i76$i = 0, $$0$lcssa$i78 = 0, $$0$lcssa$i85$i = 0, $$0$lcssa$i97$i = 0, $$01$i = 0, $$01$i$i = 0, $$01$i102$i = 0, $$01$i126$i = 0, $$01$i141$i = 0, $$01$i36 = 0, $$01$i37$i = 0, $$01$i44$i = 0, $$01$i51 = 0, $$01$i54$i = 0, $$01$i58 = 0, $$01$i61$i = 0, $$01$i65 = 0;
 var $$01$i67$i = 0, $$01$i74$i = 0, $$01$i76 = 0, $$01$i95$i = 0, $$01$lcssa$off0$i = 0, $$01$lcssa$off0$i$i = 0, $$01$lcssa$off0$i86$i = 0, $$012$i = 0, $$012$i73 = 0, $$013$i = 0, $$03$i41 = 0, $$05$i = 0, $$05$i$i = 0, $$05$i80$i = 0, $$06$i = 0.0, $$1$i = 0.0, $$1$lcssa$i = 0, $$1$lcssa$i$i = 0, $$1$lcssa$i113$i = 0, $$113$i = 0;
 var $$12$i = 0, $$12$i$i = 0, $$12$i111$i = 0, $$12$i120$i = 0, $$12$i135$i = 0, $$12$i88$i = 0, $$14 = 0, $$15 = 0, $$16 = 0, $$17$i = 0, $$18 = 0, $$2$i = 0.0, $$2$us$i = 0.0, $$2$us$us$i = 0.0, $$2$us160$i = 0.0, $$20$i = 0, $$20$us$i = 0, $$21$i = 0, $$22$i = 0.0, $$24$i = 0;
 var $$24$i4 = 0, $$26$i = 0, $$29$$24$i = 0, $$29$$26$i = 0, $$29$i = 0, $$3$i = 0.0, $$3$i6 = 0, $$310$i = 0, $$32$i = 0, $$4$i = 0.0, $$411$lcssa$i = 0, $$411176$i = 0, $$5194$i = 0, $$a$3$i = 0, $$a$3$us$i = 0, $$a$3$us319$i = 0, $$a$3$us320$i = 0, $$a$3321$i = 0, $$a$3322$i = 0, $$fl$4 = 0;
 var $$lcssa$i = 0, $$lcssa94 = 0, $$mask$i = 0, $$mask$i31 = 0, $$mask1$i = 0, $$mask1$i30 = 0, $$neg152$i = 0, $$neg153$i = 0, $$not$i = 0, $$p$5 = 0, $$p$i = 0, $$phi$trans$insert = 0, $$pn$i = 0, $$pr$i = 0, $$pr147$i = 0, $$pre = 0, $$pre$i = 0, $$pre21 = 0, $$pre22 = 0, $$pre291 = 0;
 var $$pre292 = 0, $$pre312$i = 0, $$sum$i = 0, $$sum14$i = 0, $$sum15$i = 0, $$z$3$i = 0, $$z$4$us$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0;
 var $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0;
 var $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0;
 var $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0;
 var $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0.0, $1069 = 0.0, $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1074$phi = 0, $1075 = 0, $1075$phi = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0;
 var $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0;
 var $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0;
 var $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0;
 var $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0.0, $182 = 0, $183 = 0, $184 = 0, $185 = 0.0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0;
 var $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0;
 var $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0;
 var $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0;
 var $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0;
 var $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0;
 var $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0;
 var $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0;
 var $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0;
 var $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0;
 var $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0;
 var $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0;
 var $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0.0, $398 = 0, $399 = 0.0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0;
 var $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0;
 var $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0.0, $436 = 0.0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0;
 var $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0.0, $451 = 0, $452 = 0, $453 = 0, $454 = 0.0, $455 = 0.0, $456 = 0.0, $457 = 0.0, $458 = 0.0, $459 = 0.0, $46 = 0, $460 = 0, $461 = 0;
 var $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0;
 var $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0;
 var $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0.0, $509 = 0.0, $51 = 0, $510 = 0.0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0;
 var $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0.0, $524 = 0.0, $525 = 0.0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0;
 var $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0.0, $539 = 0.0, $54 = 0, $540 = 0.0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0;
 var $552 = 0, $553 = 0.0, $554 = 0.0, $555 = 0.0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0;
 var $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0;
 var $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0;
 var $606 = 0.0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0.0, $614 = 0.0, $615 = 0.0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0;
 var $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0;
 var $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0;
 var $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0;
 var $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0;
 var $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0;
 var $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0;
 var $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0;
 var $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0.0, $757 = 0.0, $758 = 0, $759 = 0.0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0;
 var $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0;
 var $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0;
 var $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0;
 var $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0;
 var $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0;
 var $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0;
 var $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0;
 var $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0;
 var $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0;
 var $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0;
 var $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0;
 var $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0;
 var $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $a$0 = 0, $a$1 = 0, $a$1$lcssa$i = 0, $a$1257$i = 0;
 var $a$2 = 0, $a$2$i = 0, $a$3$lcssa$i = 0, $a$3245$i = 0, $a$3245$us$i = 0, $a$6$i = 0, $a$7$i = 0, $arglist_current = 0, $arglist_current25 = 0, $arglist_current28 = 0, $arglist_current31 = 0, $arglist_current34 = 0, $arglist_current37 = 0, $arglist_current40 = 0, $arglist_current43 = 0, $arglist_current46 = 0, $arglist_current49 = 0, $arglist_current52 = 0, $arglist_current55 = 0, $arglist_current58 = 0;
 var $arglist_current61 = 0, $arglist_current64 = 0, $arglist_current67 = 0, $arglist_current70 = 0, $arglist_current73 = 0, $arglist_current76 = 0, $arglist_current79 = 0, $arglist_current82 = 0, $arglist_current85 = 0, $arglist_next = 0, $arglist_next26 = 0, $arglist_next29 = 0, $arglist_next32 = 0, $arglist_next35 = 0, $arglist_next38 = 0, $arglist_next41 = 0, $arglist_next44 = 0, $arglist_next47 = 0, $arglist_next50 = 0, $arglist_next53 = 0;
 var $arglist_next56 = 0, $arglist_next59 = 0, $arglist_next62 = 0, $arglist_next65 = 0, $arglist_next68 = 0, $arglist_next71 = 0, $arglist_next74 = 0, $arglist_next77 = 0, $arglist_next80 = 0, $arglist_next83 = 0, $arglist_next86 = 0, $argpos$0 = 0, $big$i = 0, $brmerge$i = 0, $buf = 0, $buf$i = 0, $carry$0250$i = 0, $carry3$0239$i = 0, $carry3$0239$us$i = 0, $cnt$0 = 0;
 var $cnt$1 = 0, $d$0251$i = 0, $d$1238$i = 0, $d$1238$us$i = 0, $d$2$a$3$i = 0, $d$2$lcssa$i = 0, $d$2220$i = 0, $d$3$i = 0, $d$4184$i = 0, $d$5175$i = 0, $d$6193$i = 0, $e$0233$i = 0, $e$1$i = 0, $e$2215$i = 0, $e$3$i = 0, $e$4$i = 0, $e2$i = 0, $ebuf0$i = 0, $estr$0$i = 0, $estr$1$lcssa$i = 0;
 var $estr$1$ph$i = 0, $estr$1201$i = 0, $estr$2$i = 0, $exitcond$i = 0, $fl$0102 = 0, $fl$0106 = 0, $fl$1 = 0, $fl$1$ = 0, $fl$3 = 0, $fl$4 = 0, $fl$6 = 0, $i$0$lcssa = 0, $i$0167 = 0, $i$0169 = 0, $i$0234$i = 0, $i$03$i = 0, $i$03$i23 = 0, $i$1$lcssa$i = 0, $i$1175 = 0, $i$1226$i = 0;
 var $i$2216$i = 0, $i$291 = 0, $i$3210$i = 0, $i$390 = 0, $isdigit = 0, $isdigit$i = 0, $isdigit$i25 = 0, $isdigit10 = 0, $isdigit12 = 0, $isdigit2$i = 0, $isdigit2$i22 = 0, $isdigittmp = 0, $isdigittmp$i = 0, $isdigittmp$i24 = 0, $isdigittmp1$i = 0, $isdigittmp1$i21 = 0, $isdigittmp11 = 0, $isdigittmp9 = 0, $j$0$i = 0, $j$0225$i = 0;
 var $j$0227$i = 0, $j$1211$i = 0, $j$2$i = 0, $l$0 = 0, $l$0$i = 0, $l$1$i = 0, $l$1$lcssa = 0, $l$1168 = 0, $l10n$0 = 0, $l10n$0$phi = 0, $l10n$1 = 0, $l10n$2 = 0, $l10n$3 = 0, $mb = 0, $or$cond = 0, $or$cond$i = 0, $or$cond$i$i = 0, $or$cond$i1 = 0, $or$cond$i101$i = 0, $or$cond$i36$i = 0;
 var $or$cond$i43$i = 0, $or$cond$i50 = 0, $or$cond$i53$i = 0, $or$cond$i57 = 0, $or$cond$i60$i = 0, $or$cond$i64 = 0, $or$cond$i72 = 0, $or$cond$i73$i = 0, $or$cond$i75 = 0, $or$cond$i94$i = 0, $or$cond12$i = 0, $or$cond19$i = 0, $or$cond19315$i = 0, $or$cond23$i = 0, $or$cond29$i = 0, $or$cond29174$i = 0, $or$cond3$i = 0, $or$cond30$i = 0, $p$0 = 0, $p$1 = 0;
 var $p$2 = 0, $p$2$ = 0, $p$4296 = 0, $p$5 = 0, $pad$i = 0, $phitmp = 0, $phitmp23 = 0, $pl$0 = 0, $pl$0$i = 0, $pl$1 = 0, $pl$1$i = 0, $pl$2 = 0, $prefix$0 = 0, $prefix$0$$i = 0, $prefix$0$i = 0, $prefix$1 = 0, $prefix$2 = 0, $r$0$a$7$i = 0, $re$0$i = 0, $re$1166$i = 0;
 var $round$0165$i = 0.0, $round6$1$i = 0.0, $s$0$i = 0, $s$0$lcssa$i = 0, $s$0$us$i = 0, $s$0$us$us$i = 0, $s$0$us159$i = 0, $s$014$i = 0, $s$1$i = 0, $s$1$lcssa$i = 0, $s$1$us$i = 0, $s$1$us$us$i = 0, $s$1$us161$i = 0, $s$15$i = 0, $s$2$i = 0, $s1$0$i = 0, $s7$0181$i = 0, $s7$1$i = 0, $s8$0$lcssa$i = 0, $s8$0170$i = 0;
 var $s9$0$i = 0, $s9$1189$i = 0, $s9$2$i = 0, $sext = 0, $sext86 = 0, $small$0$i = 0.0, $small$1$i = 0.0, $st$0 = 0, $storemerge = 0, $storemerge13 = 0, $storemerge8100 = 0, $storemerge8105 = 0, $t$0 = 0, $t$1 = 0, $w$$i = 0, $w$0 = 0, $w$0$lcssa$i = 0, $w$08$i = 0, $w$1 = 0, $w$18$i = 0;
 var $w$2 = 0, $w$31$i = 0, $wc = 0, $ws$0170 = 0, $ws$1176 = 0, $y$03$i = 0, $y$03$i$i = 0, $y$03$i110$i = 0, $y$03$i119$i = 0, $y$03$i134$i = 0, $y$03$i87$i = 0, $z$0$i = 0, $z$0$lcssa = 0, $z$095 = 0, $z$1$lcssa$i = 0, $z$1256$i = 0, $z$2 = 0, $z$2$i = 0, $z$2316$i = 0, $z$2317$i = 0;
 var $z$3$lcssa$i = 0, $z$3244$i = 0, $z$3244$us$i = 0, $z$4$i = 0, $z$4$us$i = 0, $z$5$i = 0, $z$6$i = 0, $z$7$$i = 0, $z$7$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 848|0;
 $big$i = sp + 16|0;
 $e2$i = sp + 8|0;
 $buf$i = sp + 812|0;
 $0 = $buf$i;
 $ebuf0$i = sp + 800|0;
 $pad$i = sp + 544|0;
 $buf = sp + 504|0;
 $wc = sp;
 $mb = sp + 496|0;
 $1 = ($f|0)!=(0|0);
 $2 = (($buf) + 40|0);
 $3 = $2;
 $4 = (($buf) + 39|0);
 $5 = (($wc) + 4|0);
 $6 = (($ebuf0$i) + 12|0);
 $7 = (($ebuf0$i) + 11|0);
 $8 = $6;
 $9 = (($8) - ($0))|0;
 $10 = (-2 - ($0))|0;
 $11 = (($8) + 2)|0;
 $12 = (($big$i) + 264|0);
 $13 = (($buf$i) + 9|0);
 $14 = $13;
 $15 = (($buf$i) + 8|0);
 $1074 = 0;$1075 = 0;$22 = $fmt;$cnt$0 = 0;$l$0 = 0;$l10n$0 = 0;
 L1: while(1) {
  $16 = ($cnt$0|0)>(-1);
  do {
   if ($16) {
    $17 = (2147483647 - ($cnt$0))|0;
    $18 = ($l$0|0)>($17|0);
    if ($18) {
     $19 = (___errno_location()|0);
     HEAP32[$19>>2] = 75;
     $cnt$1 = -1;
     break;
    } else {
     $20 = (($l$0) + ($cnt$0))|0;
     $cnt$1 = $20;
     break;
    }
   } else {
    $cnt$1 = $cnt$0;
   }
  } while(0);
  $21 = HEAP8[$22>>0]|0;
  $23 = ($21<<24>>24)==(0);
  if ($23) {
   label = 351;
   break;
  } else {
   $1076 = $21;$25 = $22;
  }
  while(1) {
   if ((($1076<<24>>24) == 0)) {
    $$lcssa94 = $25;$z$0$lcssa = $25;
    break;
   } else if ((($1076<<24>>24) == 37)) {
    $27 = $25;$z$095 = $25;
    label = 9;
    break;
   }
   $24 = (($25) + 1|0);
   $$pre = HEAP8[$24>>0]|0;
   $1076 = $$pre;$25 = $24;
  }
  L12: do {
   if ((label|0) == 9) {
    while(1) {
     label = 0;
     $26 = (($27) + 1|0);
     $28 = HEAP8[$26>>0]|0;
     $29 = ($28<<24>>24)==(37);
     if (!($29)) {
      $$lcssa94 = $27;$z$0$lcssa = $z$095;
      break L12;
     }
     $30 = (($z$095) + 1|0);
     $31 = (($27) + 2|0);
     $32 = HEAP8[$31>>0]|0;
     $33 = ($32<<24>>24)==(37);
     if ($33) {
      $27 = $31;$z$095 = $30;
      label = 9;
     } else {
      $$lcssa94 = $31;$z$0$lcssa = $30;
      break;
     }
    }
   }
  } while(0);
  $34 = $z$0$lcssa;
  $35 = $22;
  $36 = (($34) - ($35))|0;
  if ($1) {
   ___fwritex($22,$36,$f);
  }
  $37 = ($z$0$lcssa|0)==($22|0);
  if (!($37)) {
   $l10n$0$phi = $l10n$0;$1075$phi = $1075;$1074$phi = $1074;$22 = $$lcssa94;$cnt$0 = $cnt$1;$l$0 = $36;$l10n$0 = $l10n$0$phi;$1075 = $1075$phi;$1074 = $1074$phi;
   continue;
  }
  $38 = (($$lcssa94) + 1|0);
  $39 = HEAP8[$38>>0]|0;
  $40 = $39 << 24 >> 24;
  $isdigittmp = (($40) + -48)|0;
  $isdigit = ($isdigittmp>>>0)<(10);
  if ($isdigit) {
   $41 = (($$lcssa94) + 2|0);
   $42 = HEAP8[$41>>0]|0;
   $43 = ($42<<24>>24)==(36);
   if ($43) {
    $44 = (($$lcssa94) + 3|0);
    $$pre291 = HEAP8[$44>>0]|0;
    $46 = $$pre291;$argpos$0 = $isdigittmp;$l10n$1 = 1;$storemerge = $44;
   } else {
    $46 = $39;$argpos$0 = -1;$l10n$1 = $l10n$0;$storemerge = $38;
   }
  } else {
   $46 = $39;$argpos$0 = -1;$l10n$1 = $l10n$0;$storemerge = $38;
  }
  $45 = $46 << 24 >> 24;
  $47 = (($45) + -32)|0;
  $48 = ($47>>>0)<(32);
  L25: do {
   if ($48) {
    $50 = $45;$55 = $46;$fl$0106 = 0;$storemerge8105 = $storemerge;
    while(1) {
     $49 = (($50) + -32)|0;
     $51 = 1 << $49;
     $52 = $51 & 75913;
     $53 = ($52|0)==(0);
     if ($53) {
      $65 = $55;$fl$0102 = $fl$0106;$storemerge8100 = $storemerge8105;
      break L25;
     }
     $54 = $55 << 24 >> 24;
     $56 = (($54) + -32)|0;
     $57 = 1 << $56;
     $58 = $57 | $fl$0106;
     $59 = (($storemerge8105) + 1|0);
     $60 = HEAP8[$59>>0]|0;
     $61 = $60 << 24 >> 24;
     $62 = (($61) + -32)|0;
     $63 = ($62>>>0)<(32);
     if ($63) {
      $50 = $61;$55 = $60;$fl$0106 = $58;$storemerge8105 = $59;
     } else {
      $65 = $60;$fl$0102 = $58;$storemerge8100 = $59;
      break;
     }
    }
   } else {
    $65 = $46;$fl$0102 = 0;$storemerge8100 = $storemerge;
   }
  } while(0);
  $64 = ($65<<24>>24)==(42);
  do {
   if ($64) {
    $66 = (($storemerge8100) + 1|0);
    $67 = HEAP8[$66>>0]|0;
    $68 = $67 << 24 >> 24;
    $isdigittmp11 = (($68) + -48)|0;
    $isdigit12 = ($isdigittmp11>>>0)<(10);
    if ($isdigit12) {
     $69 = (($storemerge8100) + 2|0);
     $70 = HEAP8[$69>>0]|0;
     $71 = ($70<<24>>24)==(36);
     if ($71) {
      $72 = (($nl_type) + ($isdigittmp11<<2)|0);
      HEAP32[$72>>2] = 10;
      $73 = HEAP8[$66>>0]|0;
      $74 = $73 << 24 >> 24;
      $75 = (($74) + -48)|0;
      $76 = (($nl_arg) + ($75<<3)|0);
      $77 = $76;
      $78 = $77;
      $79 = HEAP32[$78>>2]|0;
      $80 = (($77) + 4)|0;
      $81 = $80;
      $82 = HEAP32[$81>>2]|0;
      $83 = (($storemerge8100) + 3|0);
      $l10n$2 = 1;$storemerge13 = $83;$w$0 = $79;
     } else {
      label = 24;
     }
    } else {
     label = 24;
    }
    if ((label|0) == 24) {
     label = 0;
     $84 = ($l10n$1|0)==(0);
     if (!($84)) {
      $$0 = -1;
      label = 370;
      break L1;
     }
     if (!($1)) {
      $100 = $66;$fl$1 = $fl$0102;$l10n$3 = 0;$w$1 = 0;
      break;
     }
     $arglist_current = HEAP32[$ap>>2]|0;
     $85 = HEAP32[$arglist_current>>2]|0;
     $arglist_next = (($arglist_current) + 4|0);
     HEAP32[$ap>>2] = $arglist_next;
     $l10n$2 = 0;$storemerge13 = $66;$w$0 = $85;
    }
    $86 = ($w$0|0)<(0);
    if ($86) {
     $87 = $fl$0102 | 8192;
     $88 = (0 - ($w$0))|0;
     $100 = $storemerge13;$fl$1 = $87;$l10n$3 = $l10n$2;$w$1 = $88;
    } else {
     $100 = $storemerge13;$fl$1 = $fl$0102;$l10n$3 = $l10n$2;$w$1 = $w$0;
    }
   } else {
    $89 = $65 << 24 >> 24;
    $isdigittmp1$i = (($89) + -48)|0;
    $isdigit2$i = ($isdigittmp1$i>>>0)<(10);
    if ($isdigit2$i) {
     $92 = $89;$95 = $storemerge8100;$i$03$i = 0;
     while(1) {
      $90 = ($i$03$i*10)|0;
      $91 = (($92) + -48)|0;
      $93 = (($91) + ($90))|0;
      $94 = (($95) + 1|0);
      $96 = HEAP8[$94>>0]|0;
      $97 = $96 << 24 >> 24;
      $isdigittmp$i = (($97) + -48)|0;
      $isdigit$i = ($isdigittmp$i>>>0)<(10);
      if ($isdigit$i) {
       $92 = $97;$95 = $94;$i$03$i = $93;
      } else {
       break;
      }
     }
     $98 = ($93|0)<(0);
     if ($98) {
      $$0 = -1;
      label = 370;
      break L1;
     } else {
      $100 = $94;$fl$1 = $fl$0102;$l10n$3 = $l10n$1;$w$1 = $93;
     }
    } else {
     $100 = $storemerge8100;$fl$1 = $fl$0102;$l10n$3 = $l10n$1;$w$1 = 0;
    }
   }
  } while(0);
  $99 = HEAP8[$100>>0]|0;
  $101 = ($99<<24>>24)==(46);
  L46: do {
   if ($101) {
    $102 = (($100) + 1|0);
    $103 = HEAP8[$102>>0]|0;
    $104 = ($103<<24>>24)==(42);
    if (!($104)) {
     $125 = $103 << 24 >> 24;
     $isdigittmp1$i21 = (($125) + -48)|0;
     $isdigit2$i22 = ($isdigittmp1$i21>>>0)<(10);
     if ($isdigit2$i22) {
      $128 = $125;$131 = $102;$i$03$i23 = 0;
     } else {
      $1077 = $102;$p$0 = 0;
      break;
     }
     while(1) {
      $126 = ($i$03$i23*10)|0;
      $127 = (($128) + -48)|0;
      $129 = (($127) + ($126))|0;
      $130 = (($131) + 1|0);
      $132 = HEAP8[$130>>0]|0;
      $133 = $132 << 24 >> 24;
      $isdigittmp$i24 = (($133) + -48)|0;
      $isdigit$i25 = ($isdigittmp$i24>>>0)<(10);
      if ($isdigit$i25) {
       $128 = $133;$131 = $130;$i$03$i23 = $129;
      } else {
       $1077 = $130;$p$0 = $129;
       break L46;
      }
     }
    }
    $105 = (($100) + 2|0);
    $106 = HEAP8[$105>>0]|0;
    $107 = $106 << 24 >> 24;
    $isdigittmp9 = (($107) + -48)|0;
    $isdigit10 = ($isdigittmp9>>>0)<(10);
    if ($isdigit10) {
     $108 = (($100) + 3|0);
     $109 = HEAP8[$108>>0]|0;
     $110 = ($109<<24>>24)==(36);
     if ($110) {
      $111 = (($nl_type) + ($isdigittmp9<<2)|0);
      HEAP32[$111>>2] = 10;
      $112 = HEAP8[$105>>0]|0;
      $113 = $112 << 24 >> 24;
      $114 = (($113) + -48)|0;
      $115 = (($nl_arg) + ($114<<3)|0);
      $116 = $115;
      $117 = $116;
      $118 = HEAP32[$117>>2]|0;
      $119 = (($116) + 4)|0;
      $120 = $119;
      $121 = HEAP32[$120>>2]|0;
      $122 = (($100) + 4|0);
      $1077 = $122;$p$0 = $118;
      break;
     }
    }
    $123 = ($l10n$3|0)==(0);
    if (!($123)) {
     $$0 = -1;
     label = 370;
     break L1;
    }
    if ($1) {
     $arglist_current25 = HEAP32[$ap>>2]|0;
     $124 = HEAP32[$arglist_current25>>2]|0;
     $arglist_next26 = (($arglist_current25) + 4|0);
     HEAP32[$ap>>2] = $arglist_next26;
     $1077 = $105;$p$0 = $124;
    } else {
     $1077 = $105;$p$0 = 0;
    }
   } else {
    $1077 = $100;$p$0 = -1;
   }
  } while(0);
  $135 = $1077;$st$0 = 0;
  while(1) {
   $134 = HEAP8[$135>>0]|0;
   $136 = $134 << 24 >> 24;
   $137 = (($136) + -65)|0;
   $138 = ($137>>>0)>(57);
   if ($138) {
    $$0 = -1;
    label = 370;
    break L1;
   }
   $139 = (($135) + 1|0);
   $140 = ((16064 + (($st$0*58)|0)|0) + ($137)|0);
   $141 = HEAP8[$140>>0]|0;
   $142 = $141&255;
   $143 = (($142) + -1)|0;
   $144 = ($143>>>0)<(8);
   if ($144) {
    $135 = $139;$st$0 = $142;
   } else {
    break;
   }
  }
  $145 = ($141<<24>>24)==(0);
  if ($145) {
   $$0 = -1;
   label = 370;
   break;
  }
  $146 = ($141<<24>>24)==(19);
  $147 = ($argpos$0|0)>(-1);
  L65: do {
   if ($146) {
    if ($147) {
     $$0 = -1;
     label = 370;
     break L1;
    }
    if ($1) {
     $199 = $134;$207 = $1075;$229 = $1074;
    } else {
     $1075$phi = $1075;$1074$phi = $1074;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $36;$l10n$0 = $l10n$3;$1075 = $1075$phi;$1074 = $1074$phi;
     continue L1;
    }
   } else {
    L67: do {
     if ($147) {
      $189 = (($nl_type) + ($argpos$0<<2)|0);
      HEAP32[$189>>2] = $142;
      $190 = (($nl_arg) + ($argpos$0<<3)|0);
      $191 = $190;
      $192 = $191;
      $193 = HEAP32[$192>>2]|0;
      $194 = (($191) + 4)|0;
      $195 = $194;
      $196 = HEAP32[$195>>2]|0;
      $197 = $193;
      if ($1) {
       $1078 = $197;$1079 = $196;
      } else {
       $1074 = $196;$1075 = $197;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $36;$l10n$0 = $l10n$3;
       continue L1;
      }
     } else {
      if (!($1)) {
       $$0 = 0;
       label = 370;
       break L1;
      }
      $148 = ($141&255)>(20);
      if ($148) {
       $199 = $134;$207 = $1075;$229 = $1074;
       break L65;
      }
      do {
       switch ($142|0) {
       case 15:  {
        $arglist_current46 = HEAP32[$ap>>2]|0;
        $172 = HEAP32[$arglist_current46>>2]|0;
        $arglist_next47 = (($arglist_current46) + 4|0);
        HEAP32[$ap>>2] = $arglist_next47;
        $173 = $172&255;
        $174 = $173 << 24 >> 24;
        $175 = ($174|0)<(0);
        $176 = $175 << 31 >> 31;
        $sext = $172 << 24;
        $177 = $sext >> 24;
        $178 = $177;
        $1078 = $178;$1079 = $176;
        break L67;
        break;
       }
       case 9:  {
        $arglist_current28 = HEAP32[$ap>>2]|0;
        $149 = HEAP32[$arglist_current28>>2]|0;
        $arglist_next29 = (($arglist_current28) + 4|0);
        HEAP32[$ap>>2] = $arglist_next29;
        $1078 = $149;$1079 = $1074;
        break L67;
        break;
       }
       case 13:  {
        $arglist_current40 = HEAP32[$ap>>2]|0;
        $163 = HEAP32[$arglist_current40>>2]|0;
        $arglist_next41 = (($arglist_current40) + 4|0);
        HEAP32[$ap>>2] = $arglist_next41;
        $164 = $163&65535;
        $165 = $164 << 16 >> 16;
        $166 = ($165|0)<(0);
        $167 = $166 << 31 >> 31;
        $sext86 = $163 << 16;
        $168 = $sext86 >> 16;
        $169 = $168;
        $1078 = $169;$1079 = $167;
        break L67;
        break;
       }
       case 11:  {
        $arglist_current34 = HEAP32[$ap>>2]|0;
        $154 = HEAP32[$arglist_current34>>2]|0;
        $arglist_next35 = (($arglist_current34) + 4|0);
        HEAP32[$ap>>2] = $arglist_next35;
        $155 = $154;
        $1078 = $155;$1079 = 0;
        break L67;
        break;
       }
       case 17:  {
        $arglist_current52 = HEAP32[$ap>>2]|0;
        HEAP32[tempDoublePtr>>2]=HEAP32[$arglist_current52>>2];HEAP32[tempDoublePtr+4>>2]=HEAP32[$arglist_current52+4>>2];$181 = +HEAPF64[tempDoublePtr>>3];
        $arglist_next53 = (($arglist_current52) + 8|0);
        HEAP32[$ap>>2] = $arglist_next53;
        HEAPF64[tempDoublePtr>>3] = $181;$182 = HEAP32[tempDoublePtr>>2]|0;
        $183 = HEAP32[tempDoublePtr+4>>2]|0;
        $184 = $182;
        $1078 = $184;$1079 = $183;
        break L67;
        break;
       }
       case 14:  {
        $arglist_current43 = HEAP32[$ap>>2]|0;
        $170 = HEAP32[$arglist_current43>>2]|0;
        $arglist_next44 = (($arglist_current43) + 4|0);
        HEAP32[$ap>>2] = $arglist_next44;
        $$mask1$i30 = $170 & 65535;
        $171 = $$mask1$i30;
        $1078 = $171;$1079 = 0;
        break L67;
        break;
       }
       case 10:  {
        $arglist_current31 = HEAP32[$ap>>2]|0;
        $150 = HEAP32[$arglist_current31>>2]|0;
        $arglist_next32 = (($arglist_current31) + 4|0);
        HEAP32[$ap>>2] = $arglist_next32;
        $151 = ($150|0)<(0);
        $152 = $151 << 31 >> 31;
        $153 = $150;
        $1078 = $153;$1079 = $152;
        break L67;
        break;
       }
       case 18:  {
        $arglist_current55 = HEAP32[$ap>>2]|0;
        HEAP32[tempDoublePtr>>2]=HEAP32[$arglist_current55>>2];HEAP32[tempDoublePtr+4>>2]=HEAP32[$arglist_current55+4>>2];$185 = +HEAPF64[tempDoublePtr>>3];
        $arglist_next56 = (($arglist_current55) + 8|0);
        HEAP32[$ap>>2] = $arglist_next56;
        HEAPF64[tempDoublePtr>>3] = $185;$186 = HEAP32[tempDoublePtr>>2]|0;
        $187 = HEAP32[tempDoublePtr+4>>2]|0;
        $188 = $186;
        $1078 = $188;$1079 = $187;
        break L67;
        break;
       }
       case 12:  {
        $arglist_current37 = HEAP32[$ap>>2]|0;
        $156 = $arglist_current37;
        $157 = $156;
        $158 = HEAP32[$157>>2]|0;
        $159 = (($156) + 4)|0;
        $160 = $159;
        $161 = HEAP32[$160>>2]|0;
        $arglist_next38 = (($arglist_current37) + 8|0);
        HEAP32[$ap>>2] = $arglist_next38;
        $162 = $158;
        $1078 = $162;$1079 = $161;
        break L67;
        break;
       }
       case 16:  {
        $arglist_current49 = HEAP32[$ap>>2]|0;
        $179 = HEAP32[$arglist_current49>>2]|0;
        $arglist_next50 = (($arglist_current49) + 4|0);
        HEAP32[$ap>>2] = $arglist_next50;
        $$mask$i31 = $179 & 255;
        $180 = $$mask$i31;
        $1078 = $180;$1079 = 0;
        break L67;
        break;
       }
       default: {
        $1078 = $1075;$1079 = $1074;
        break L67;
       }
       }
      } while(0);
     }
    } while(0);
    $$pre292 = HEAP8[$135>>0]|0;
    $199 = $$pre292;$207 = $1078;$229 = $1079;
   }
  } while(0);
  $198 = $199 << 24 >> 24;
  $200 = ($st$0|0)==(0);
  if ($200) {
   $t$0 = $198;
  } else {
   $201 = $198 & 15;
   $202 = ($201|0)==(3);
   $203 = $198 & -33;
   $$ = $202 ? $203 : $198;
   $t$0 = $$;
  }
  $204 = $fl$1 & 8192;
  $205 = ($204|0)==(0);
  $206 = $fl$1 & -65537;
  $fl$1$ = $205 ? $fl$1 : $206;
  L90: do {
   switch ($t$0|0) {
   case 109:  {
    $321 = (___errno_location()|0);
    $322 = HEAP32[$321>>2]|0;
    $323 = (_strerror(($322|0))|0);
    $a$1 = $323;
    label = 99;
    break;
   }
   case 115:  {
    $324 = ($207|0)==(0|0);
    $$18 = $324 ? 16544 : $207;
    $a$1 = $$18;
    label = 99;
    break;
   }
   case 110:  {
    switch ($st$0|0) {
    case 0:  {
     HEAP32[$207>>2] = $cnt$1;
     $1074 = $229;$1075 = $207;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $36;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 1:  {
     HEAP32[$207>>2] = $cnt$1;
     $1074 = $229;$1075 = $207;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $36;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 6:  {
     HEAP32[$207>>2] = $cnt$1;
     $1074 = $229;$1075 = $207;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $36;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 2:  {
     $208 = ($cnt$1|0)<(0);
     $209 = $208 << 31 >> 31;
     $210 = $207;
     $211 = $210;
     HEAP32[$211>>2] = $cnt$1;
     $212 = (($210) + 4)|0;
     $213 = $212;
     HEAP32[$213>>2] = $209;
     $1074 = $229;$1075 = $207;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $36;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 3:  {
     $214 = $cnt$1&65535;
     HEAP16[$207>>1] = $214;
     $1074 = $229;$1075 = $207;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $36;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 4:  {
     $215 = $cnt$1&255;
     HEAP8[$207>>0] = $215;
     $1074 = $229;$1075 = $207;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $36;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 7:  {
     $216 = ($cnt$1|0)<(0);
     $217 = $216 << 31 >> 31;
     $218 = $207;
     $219 = $218;
     HEAP32[$219>>2] = $cnt$1;
     $220 = (($218) + 4)|0;
     $221 = $220;
     HEAP32[$221>>2] = $217;
     $1074 = $229;$1075 = $207;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $36;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    default: {
     $1074 = $229;$1075 = $207;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $36;$l10n$0 = $l10n$3;
     continue L1;
    }
    }
    break;
   }
   case 105: case 100:  {
    $267 = $207;
    $268 = ($229|0)<(0);
    if ($268) {
     $269 = (_i64Subtract(0,0,($267|0),($229|0))|0);
     $270 = tempRet0;
     $271 = $269;
     $277 = $271;$279 = $270;$pl$0 = 1;$prefix$0 = 16528;
     label = 89;
     break L90;
    }
    $272 = $fl$1$ & 2048;
    $273 = ($272|0)==(0);
    if ($273) {
     $274 = $fl$1$ & 1;
     $275 = ($274|0)==(0);
     $$16 = $275 ? 16528 : ((16528 + 2|0));
     $277 = $207;$279 = $229;$pl$0 = $274;$prefix$0 = $$16;
     label = 89;
    } else {
     $277 = $207;$279 = $229;$pl$0 = 1;$prefix$0 = ((16528 + 1|0));
     label = 89;
    }
    break;
   }
   case 111:  {
    $249 = $207;
    $250 = ($249|0)==(0);
    $251 = ($229|0)==(0);
    $252 = $250 & $251;
    if ($252) {
     $$0$lcssa$i44 = $2;
    } else {
     $$03$i41 = $2;$254 = $249;$258 = $229;
     while(1) {
      $253 = $254 & 7;
      $255 = $253 | 48;
      $256 = $255&255;
      $257 = (($$03$i41) + -1|0);
      HEAP8[$257>>0] = $256;
      $259 = (_bitshift64Lshr(($254|0),($258|0),3)|0);
      $260 = tempRet0;
      $261 = ($259|0)==(0);
      $262 = ($260|0)==(0);
      $263 = $261 & $262;
      if ($263) {
       $$0$lcssa$i44 = $257;
       break;
      } else {
       $$03$i41 = $257;$254 = $259;$258 = $260;
      }
     }
    }
    $264 = $fl$1$ & 8;
    $265 = ($264|0)==(0);
    if ($265) {
     $308 = $207;$311 = $229;$a$0 = $$0$lcssa$i44;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = 0;$prefix$1 = 16528;
     label = 94;
    } else {
     $$14 = $252 ? 16528 : ((16528 + 5|0));
     $266 = $252&1;
     $$15 = $266 ^ 1;
     $308 = $207;$311 = $229;$a$0 = $$0$lcssa$i44;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = $$15;$prefix$1 = $$14;
     label = 94;
    }
    break;
   }
   case 99:  {
    $319 = $207;
    $320 = $319&255;
    HEAP8[$4>>0] = $320;
    $1080 = $229;$1081 = $207;$a$2 = $4;$fl$6 = $206;$p$5 = 1;$pl$2 = 0;$prefix$2 = 16528;$z$2 = $2;
    break;
   }
   case 117:  {
    $277 = $207;$279 = $229;$pl$0 = 0;$prefix$0 = 16528;
    label = 89;
    break;
   }
   case 65: case 71: case 70: case 69: case 97: case 103: case 102: case 101:  {
    $396 = $207;
    HEAP32[tempDoublePtr>>2] = $396;HEAP32[tempDoublePtr+4>>2] = $229;$397 = +HEAPF64[tempDoublePtr>>3];
    HEAP32[$e2$i>>2] = 0;
    $398 = ($229|0)<(0);
    if ($398) {
     $399 = -$397;
     $$06$i = $399;$pl$0$i = 1;$prefix$0$i = 16552;
    } else {
     $400 = $fl$1$ & 2048;
     $401 = ($400|0)==(0);
     if ($401) {
      $402 = $fl$1$ & 1;
      $403 = ($402|0)==(0);
      $$$i = $403 ? ((16552 + 1|0)) : ((16552 + 6|0));
      $$06$i = $397;$pl$0$i = $402;$prefix$0$i = $$$i;
     } else {
      $$06$i = $397;$pl$0$i = 1;$prefix$0$i = ((16552 + 3|0));
     }
    }
    HEAPF64[tempDoublePtr>>3] = $$06$i;$404 = HEAP32[tempDoublePtr>>2]|0;
    $405 = HEAP32[tempDoublePtr+4>>2]|0;
    $406 = $405 & 2146435072;
    $407 = ($406>>>0)<(2146435072);
    $408 = ($406|0)==(2146435072);
    $409 = (0)<(0);
    $410 = $408 & $409;
    $411 = $407 | $410;
    if (!($411)) {
     $412 = $t$0 & 32;
     $413 = ($412|0)!=(0);
     $414 = $413 ? 16576 : 16584;
     $415 = ($$06$i != $$06$i) | (0.0 != 0.0);
     if ($415) {
      $416 = $413 ? 16592 : 16600;
      $pl$1$i = 0;$s1$0$i = $416;
     } else {
      $pl$1$i = $pl$0$i;$s1$0$i = $414;
     }
     $417 = (($pl$1$i) + 3)|0;
     $418 = $fl$1$ & 8192;
     $419 = ($418|0)==(0);
     $420 = ($417|0)<($w$1|0);
     $or$cond$i36$i = $419 & $420;
     if ($or$cond$i36$i) {
      $421 = (($w$1) - ($417))|0;
      $422 = ($421>>>0)>(256);
      $423 = $422 ? 256 : $421;
      _memset(($pad$i|0),32,($423|0))|0;
      $424 = ($421>>>0)>(255);
      if ($424) {
       $$01$i37$i = $421;
       while(1) {
        ___fwritex($pad$i,256,$f);
        $425 = (($$01$i37$i) + -256)|0;
        $426 = ($425>>>0)>(255);
        if ($426) {
         $$01$i37$i = $425;
        } else {
         $$0$lcssa$i39$i = $425;
         break;
        }
       }
      } else {
       $$0$lcssa$i39$i = $421;
      }
      ___fwritex($pad$i,$$0$lcssa$i39$i,$f);
     }
     ___fwritex($prefix$0$i,$pl$1$i,$f);
     ___fwritex($s1$0$i,3,$f);
     $427 = $fl$1$ & 73728;
     $428 = ($427|0)==(8192);
     $or$cond$i43$i = $428 & $420;
     if ($or$cond$i43$i) {
      $429 = (($w$1) - ($417))|0;
      $430 = ($429>>>0)>(256);
      $431 = $430 ? 256 : $429;
      _memset(($pad$i|0),32,($431|0))|0;
      $432 = ($429>>>0)>(255);
      if ($432) {
       $$01$i44$i = $429;
       while(1) {
        ___fwritex($pad$i,256,$f);
        $433 = (($$01$i44$i) + -256)|0;
        $434 = ($433>>>0)>(255);
        if ($434) {
         $$01$i44$i = $433;
        } else {
         $$0$lcssa$i46$i = $433;
         break;
        }
       }
      } else {
       $$0$lcssa$i46$i = $429;
      }
      ___fwritex($pad$i,$$0$lcssa$i46$i,$f);
     }
     $w$$i = $420 ? $w$1 : $417;
     $1074 = $229;$1075 = $207;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $w$$i;$l10n$0 = $l10n$3;
     continue L1;
    }
    $435 = (+_frexp($$06$i,$e2$i));
    $436 = $435 * 2.0;
    $437 = $436 != 0.0;
    if ($437) {
     $438 = HEAP32[$e2$i>>2]|0;
     $439 = (($438) + -1)|0;
     HEAP32[$e2$i>>2] = $439;
    }
    $440 = $t$0 | 32;
    $441 = ($440|0)==(97);
    if ($441) {
     $442 = $t$0 & 32;
     $443 = ($442|0)==(0);
     $444 = (($prefix$0$i) + 9|0);
     $prefix$0$$i = $443 ? $prefix$0$i : $444;
     $445 = $pl$0$i | 2;
     $446 = ($p$0>>>0)>(11);
     $447 = (12 - ($p$0))|0;
     $re$0$i = $446 ? 0 : $447;
     $448 = ($re$0$i|0)==(0);
     do {
      if ($448) {
       $$1$i = $436;
      } else {
       $re$1166$i = $re$0$i;$round$0165$i = 8.0;
       while(1) {
        $449 = (($re$1166$i) + -1)|0;
        $450 = $round$0165$i * 16.0;
        $451 = ($449|0)==(0);
        if ($451) {
         break;
        } else {
         $re$1166$i = $449;$round$0165$i = $450;
        }
       }
       $452 = HEAP8[$prefix$0$$i>>0]|0;
       $453 = ($452<<24>>24)==(45);
       if ($453) {
        $454 = -$436;
        $455 = $454 - $450;
        $456 = $450 + $455;
        $457 = -$456;
        $$1$i = $457;
        break;
       } else {
        $458 = $436 + $450;
        $459 = $458 - $450;
        $$1$i = $459;
        break;
       }
      }
     } while(0);
     $460 = HEAP32[$e2$i>>2]|0;
     $461 = ($460|0)<(0);
     $462 = (0 - ($460))|0;
     $463 = $461 ? $462 : $460;
     $464 = ($463|0)<(0);
     if ($464) {
      $465 = ($463|0)<(0);
      $466 = $465 << 31 >> 31;
      $$05$i$i = $6;$467 = $463;$468 = $466;
      while(1) {
       $469 = (___uremdi3(($467|0),($468|0),10,0)|0);
       $470 = tempRet0;
       $471 = $469 | 48;
       $472 = $471&255;
       $473 = (($$05$i$i) + -1|0);
       HEAP8[$473>>0] = $472;
       $474 = (___udivdi3(($467|0),($468|0),10,0)|0);
       $475 = tempRet0;
       $476 = ($468>>>0)>(9);
       $477 = ($468|0)==(9);
       $478 = ($467>>>0)>(4294967295);
       $479 = $477 & $478;
       $480 = $476 | $479;
       if ($480) {
        $$05$i$i = $473;$467 = $474;$468 = $475;
       } else {
        break;
       }
      }
      $$0$lcssa$i49$i = $473;$$01$lcssa$off0$i$i = $474;
     } else {
      $$0$lcssa$i49$i = $6;$$01$lcssa$off0$i$i = $463;
     }
     $481 = ($$01$lcssa$off0$i$i|0)==(0);
     if ($481) {
      $$1$lcssa$i$i = $$0$lcssa$i49$i;
     } else {
      $$12$i$i = $$0$lcssa$i49$i;$y$03$i$i = $$01$lcssa$off0$i$i;
      while(1) {
       $482 = (($y$03$i$i>>>0) % 10)&-1;
       $483 = $482 | 48;
       $484 = $483&255;
       $485 = (($$12$i$i) + -1|0);
       HEAP8[$485>>0] = $484;
       $486 = (($y$03$i$i>>>0) / 10)&-1;
       $487 = ($y$03$i$i>>>0)<(10);
       if ($487) {
        $$1$lcssa$i$i = $485;
        break;
       } else {
        $$12$i$i = $485;$y$03$i$i = $486;
       }
      }
     }
     $488 = ($$1$lcssa$i$i|0)==($6|0);
     if ($488) {
      HEAP8[$7>>0] = 48;
      $estr$0$i = $7;
     } else {
      $estr$0$i = $$1$lcssa$i$i;
     }
     $489 = HEAP32[$e2$i>>2]|0;
     $490 = $489 >> 31;
     $491 = $490 & 2;
     $492 = (($491) + 43)|0;
     $493 = $492&255;
     $494 = (($estr$0$i) + -1|0);
     HEAP8[$494>>0] = $493;
     $495 = (($t$0) + 15)|0;
     $496 = $495&255;
     $497 = (($estr$0$i) + -2|0);
     HEAP8[$497>>0] = $496;
     $498 = ($p$0|0)>(0);
     $499 = $fl$1$ & 8;
     $500 = ($499|0)==(0);
     if ($498) {
      if ($500) {
       $$2$us$us$i = $$1$i;$s$0$us$us$i = $buf$i;
       while(1) {
        $501 = (~~(($$2$us$us$i)));
        $502 = (16608 + ($501)|0);
        $503 = HEAP8[$502>>0]|0;
        $504 = $503&255;
        $505 = $504 | $442;
        $506 = $505&255;
        $507 = (($s$0$us$us$i) + 1|0);
        HEAP8[$s$0$us$us$i>>0] = $506;
        $508 = (+($501|0));
        $509 = $$2$us$us$i - $508;
        $510 = $509 * 16.0;
        $511 = $507;
        $512 = (($511) - ($0))|0;
        $513 = ($512|0)==(1);
        if ($513) {
         $514 = (($s$0$us$us$i) + 2|0);
         HEAP8[$507>>0] = 46;
         $s$1$us$us$i = $514;
        } else {
         $s$1$us$us$i = $507;
        }
        $515 = $510 != 0.0;
        if ($515) {
         $$2$us$us$i = $510;$s$0$us$us$i = $s$1$us$us$i;
        } else {
         $s$1$lcssa$i = $s$1$us$us$i;
         break;
        }
       }
      } else {
       $$2$us$i = $$1$i;$s$0$us$i = $buf$i;
       while(1) {
        $516 = (~~(($$2$us$i)));
        $517 = (16608 + ($516)|0);
        $518 = HEAP8[$517>>0]|0;
        $519 = $518&255;
        $520 = $519 | $442;
        $521 = $520&255;
        $522 = (($s$0$us$i) + 1|0);
        HEAP8[$s$0$us$i>>0] = $521;
        $523 = (+($516|0));
        $524 = $$2$us$i - $523;
        $525 = $524 * 16.0;
        $526 = $522;
        $527 = (($526) - ($0))|0;
        $528 = ($527|0)==(1);
        if ($528) {
         $529 = (($s$0$us$i) + 2|0);
         HEAP8[$522>>0] = 46;
         $s$1$us$i = $529;
        } else {
         $s$1$us$i = $522;
        }
        $530 = $525 != 0.0;
        if ($530) {
         $$2$us$i = $525;$s$0$us$i = $s$1$us$i;
        } else {
         $s$1$lcssa$i = $s$1$us$i;
         break;
        }
       }
      }
     } else {
      if ($500) {
       $$2$us160$i = $$1$i;$s$0$us159$i = $buf$i;
       while(1) {
        $531 = (~~(($$2$us160$i)));
        $532 = (16608 + ($531)|0);
        $533 = HEAP8[$532>>0]|0;
        $534 = $533&255;
        $535 = $534 | $442;
        $536 = $535&255;
        $537 = (($s$0$us159$i) + 1|0);
        HEAP8[$s$0$us159$i>>0] = $536;
        $538 = (+($531|0));
        $539 = $$2$us160$i - $538;
        $540 = $539 * 16.0;
        $541 = $537;
        $542 = (($541) - ($0))|0;
        $543 = ($542|0)==(1);
        $544 = $540 != 0.0;
        $or$cond$i72 = $543 & $544;
        if ($or$cond$i72) {
         $545 = (($s$0$us159$i) + 2|0);
         HEAP8[$537>>0] = 46;
         $s$1$us161$i = $545;
        } else {
         $s$1$us161$i = $537;
        }
        if ($544) {
         $$2$us160$i = $540;$s$0$us159$i = $s$1$us161$i;
        } else {
         $s$1$lcssa$i = $s$1$us161$i;
         break;
        }
       }
      } else {
       $$2$i = $$1$i;$s$0$i = $buf$i;
       while(1) {
        $546 = (~~(($$2$i)));
        $547 = (16608 + ($546)|0);
        $548 = HEAP8[$547>>0]|0;
        $549 = $548&255;
        $550 = $549 | $442;
        $551 = $550&255;
        $552 = (($s$0$i) + 1|0);
        HEAP8[$s$0$i>>0] = $551;
        $553 = (+($546|0));
        $554 = $$2$i - $553;
        $555 = $554 * 16.0;
        $556 = $552;
        $557 = (($556) - ($0))|0;
        $558 = ($557|0)==(1);
        if ($558) {
         $559 = (($s$0$i) + 2|0);
         HEAP8[$552>>0] = 46;
         $s$1$i = $559;
        } else {
         $s$1$i = $552;
        }
        $560 = $555 != 0.0;
        if ($560) {
         $$2$i = $555;$s$0$i = $s$1$i;
        } else {
         $s$1$lcssa$i = $s$1$i;
         break;
        }
       }
      }
     }
     $561 = ($p$0|0)==(0);
     $$pre312$i = $s$1$lcssa$i;
     do {
      if ($561) {
       label = 186;
      } else {
       $562 = (($10) + ($$pre312$i))|0;
       $563 = ($562|0)<($p$0|0);
       if (!($563)) {
        label = 186;
        break;
       }
       $564 = $497;
       $565 = (($11) + ($p$0))|0;
       $566 = (($565) - ($564))|0;
       $l$0$i = $566;
      }
     } while(0);
     if ((label|0) == 186) {
      label = 0;
      $567 = $497;
      $568 = (($9) - ($567))|0;
      $569 = (($568) + ($$pre312$i))|0;
      $l$0$i = $569;
     }
     $570 = (($l$0$i) + ($445))|0;
     $571 = $fl$1$ & 73728;
     $572 = ($571|0)==(0);
     $573 = ($570|0)<($w$1|0);
     $or$cond$i53$i = $572 & $573;
     if ($or$cond$i53$i) {
      $574 = (($w$1) - ($570))|0;
      $575 = ($574>>>0)>(256);
      $576 = $575 ? 256 : $574;
      _memset(($pad$i|0),32,($576|0))|0;
      $577 = ($574>>>0)>(255);
      if ($577) {
       $$01$i54$i = $574;
       while(1) {
        ___fwritex($pad$i,256,$f);
        $578 = (($$01$i54$i) + -256)|0;
        $579 = ($578>>>0)>(255);
        if ($579) {
         $$01$i54$i = $578;
        } else {
         $$0$lcssa$i56$i = $578;
         break;
        }
       }
      } else {
       $$0$lcssa$i56$i = $574;
      }
      ___fwritex($pad$i,$$0$lcssa$i56$i,$f);
     }
     ___fwritex($prefix$0$$i,$445,$f);
     $580 = ($571|0)==(65536);
     $or$cond$i60$i = $580 & $573;
     if ($or$cond$i60$i) {
      $581 = (($w$1) - ($570))|0;
      $582 = ($581>>>0)>(256);
      $583 = $582 ? 256 : $581;
      _memset(($pad$i|0),48,($583|0))|0;
      $584 = ($581>>>0)>(255);
      if ($584) {
       $$01$i61$i = $581;
       while(1) {
        ___fwritex($pad$i,256,$f);
        $585 = (($$01$i61$i) + -256)|0;
        $586 = ($585>>>0)>(255);
        if ($586) {
         $$01$i61$i = $585;
        } else {
         $$0$lcssa$i63$i = $585;
         break;
        }
       }
      } else {
       $$0$lcssa$i63$i = $581;
      }
      ___fwritex($pad$i,$$0$lcssa$i63$i,$f);
     }
     $587 = (($$pre312$i) - ($0))|0;
     ___fwritex($buf$i,$587,$f);
     $588 = $497;
     $589 = (($8) - ($588))|0;
     $590 = (($l$0$i) - ($589))|0;
     $591 = (($590) - ($587))|0;
     $592 = ($591|0)>(0);
     if ($592) {
      $593 = ($591>>>0)>(256);
      $594 = $593 ? 256 : $591;
      _memset(($pad$i|0),48,($594|0))|0;
      $595 = ($591>>>0)>(255);
      if ($595) {
       $$01$i67$i = $591;
       while(1) {
        ___fwritex($pad$i,256,$f);
        $596 = (($$01$i67$i) + -256)|0;
        $597 = ($596>>>0)>(255);
        if ($597) {
         $$01$i67$i = $596;
        } else {
         $$0$lcssa$i69$i = $596;
         break;
        }
       }
      } else {
       $$0$lcssa$i69$i = $591;
      }
      ___fwritex($pad$i,$$0$lcssa$i69$i,$f);
     }
     ___fwritex($497,$589,$f);
     $598 = ($571|0)==(8192);
     $or$cond$i73$i = $598 & $573;
     if ($or$cond$i73$i) {
      $599 = (($w$1) - ($570))|0;
      $600 = ($599>>>0)>(256);
      $601 = $600 ? 256 : $599;
      _memset(($pad$i|0),32,($601|0))|0;
      $602 = ($599>>>0)>(255);
      if ($602) {
       $$01$i74$i = $599;
       while(1) {
        ___fwritex($pad$i,256,$f);
        $603 = (($$01$i74$i) + -256)|0;
        $604 = ($603>>>0)>(255);
        if ($604) {
         $$01$i74$i = $603;
        } else {
         $$0$lcssa$i76$i = $603;
         break;
        }
       }
      } else {
       $$0$lcssa$i76$i = $599;
      }
      ___fwritex($pad$i,$$0$lcssa$i76$i,$f);
     }
     $w$18$i = $573 ? $w$1 : $570;
     $1074 = $229;$1075 = $207;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $w$18$i;$l10n$0 = $l10n$3;
     continue L1;
    }
    $605 = ($p$0|0)<(0);
    $$p$i = $605 ? 6 : $p$0;
    if ($437) {
     $606 = $436 * 268435456.0;
     $607 = HEAP32[$e2$i>>2]|0;
     $608 = (($607) + -28)|0;
     HEAP32[$e2$i>>2] = $608;
     $$3$i = $606;$610 = $608;
    } else {
     $$pre$i = HEAP32[$e2$i>>2]|0;
     $$3$i = $436;$610 = $$pre$i;
    }
    $609 = ($610|0)<(0);
    $$32$i = $609 ? $big$i : $12;
    $$4$i = $$3$i;$z$0$i = $$32$i;
    while(1) {
     $611 = (~~(($$4$i))>>>0);
     HEAP32[$z$0$i>>2] = $611;
     $612 = (($z$0$i) + 4|0);
     $613 = (+($611>>>0));
     $614 = $$4$i - $613;
     $615 = $614 * 1.0E+9;
     $616 = $615 != 0.0;
     if ($616) {
      $$4$i = $615;$z$0$i = $612;
     } else {
      break;
     }
    }
    $$pr$i = HEAP32[$e2$i>>2]|0;
    $617 = ($$pr$i|0)>(0);
    if ($617) {
     $619 = $$pr$i;$a$1257$i = $$32$i;$z$1256$i = $612;
     while(1) {
      $618 = ($619|0)>(29);
      $620 = $618 ? 29 : $619;
      $621 = (($z$1256$i) + -4|0);
      $622 = ($621>>>0)<($a$1257$i>>>0);
      do {
       if ($622) {
        $623 = HEAP32[$621>>2]|0;
        $624 = ($623|0)==(0);
        $625 = ($z$1256$i>>>0)>($a$1257$i>>>0);
        $or$cond19315$i = $624 & $625;
        $z$2316$i = $or$cond19315$i ? $621 : $z$1256$i;
        $a$2$i = $a$1257$i;$z$2317$i = $z$2316$i;
       } else {
        $carry$0250$i = 0;$d$0251$i = $621;
        while(1) {
         $626 = HEAP32[$d$0251$i>>2]|0;
         $627 = (_bitshift64Shl(($626|0),0,($620|0))|0);
         $628 = tempRet0;
         $629 = (_i64Add(($627|0),($628|0),($carry$0250$i|0),0)|0);
         $630 = tempRet0;
         $631 = (___uremdi3(($629|0),($630|0),1000000000,0)|0);
         $632 = tempRet0;
         HEAP32[$d$0251$i>>2] = $631;
         $633 = (___udivdi3(($629|0),($630|0),1000000000,0)|0);
         $634 = tempRet0;
         $635 = (($d$0251$i) + -4|0);
         $636 = ($635>>>0)<($a$1257$i>>>0);
         if ($636) {
          break;
         } else {
          $carry$0250$i = $633;$d$0251$i = $635;
         }
        }
        $637 = HEAP32[$621>>2]|0;
        $638 = ($637|0)==(0);
        $639 = ($z$1256$i>>>0)>($a$1257$i>>>0);
        $or$cond19$i = $638 & $639;
        $z$2$i = $or$cond19$i ? $621 : $z$1256$i;
        $640 = ($633|0)==(0);
        if ($640) {
         $a$2$i = $a$1257$i;$z$2317$i = $z$2$i;
         break;
        }
        $641 = (($a$1257$i) + -4|0);
        HEAP32[$641>>2] = $633;
        $a$2$i = $641;$z$2317$i = $z$2$i;
       }
      } while(0);
      $642 = HEAP32[$e2$i>>2]|0;
      $643 = (($642) - ($620))|0;
      HEAP32[$e2$i>>2] = $643;
      $644 = ($643|0)>(0);
      if ($644) {
       $619 = $643;$a$1257$i = $a$2$i;$z$1256$i = $z$2317$i;
      } else {
       $$pr147$i = $643;$a$1$lcssa$i = $a$2$i;$z$1$lcssa$i = $z$2317$i;
       break;
      }
     }
    } else {
     $$pr147$i = $$pr$i;$a$1$lcssa$i = $$32$i;$z$1$lcssa$i = $612;
    }
    $645 = ($$pr147$i|0)<(0);
    L246: do {
     if ($645) {
      $646 = ($440|0)==(102);
      $647 = (($$p$i|0) / 9)&-1;
      $648 = (($647) + 2)|0;
      if ($646) {
       $649 = $$32$i;
       $650 = (($$32$i) + ($648<<2)|0);
       $652 = $$pr147$i;$a$3245$us$i = $a$1$lcssa$i;$z$3244$us$i = $z$1$lcssa$i;
       while(1) {
        $651 = (0 - ($652))|0;
        $653 = ($651|0)>(9);
        $$20$us$i = $653 ? 9 : $651;
        $654 = ($a$3245$us$i>>>0)<($z$3244$us$i>>>0);
        do {
         if ($654) {
          $679 = 1 << $$20$us$i;
          $673 = (($679) + -1)|0;
          $676 = 1000000000 >>> $$20$us$i;
          $carry3$0239$us$i = 0;$d$1238$us$i = $a$3245$us$i;
          while(1) {
           $671 = HEAP32[$d$1238$us$i>>2]|0;
           $672 = $671 & $673;
           $674 = $671 >>> $$20$us$i;
           $675 = (($674) + ($carry3$0239$us$i))|0;
           HEAP32[$d$1238$us$i>>2] = $675;
           $662 = Math_imul($672, $676)|0;
           $677 = (($d$1238$us$i) + 4|0);
           $678 = ($677>>>0)<($z$3244$us$i>>>0);
           if ($678) {
            $carry3$0239$us$i = $662;$d$1238$us$i = $677;
           } else {
            break;
           }
          }
          $658 = HEAP32[$a$3245$us$i>>2]|0;
          $659 = ($658|0)==(0);
          $660 = (($a$3245$us$i) + 4|0);
          $$a$3$us$i = $659 ? $660 : $a$3245$us$i;
          $661 = ($662|0)==(0);
          if ($661) {
           $$a$3$us320$i = $$a$3$us$i;$z$4$us$i = $z$3244$us$i;
           break;
          }
          $663 = (($z$3244$us$i) + 4|0);
          HEAP32[$z$3244$us$i>>2] = $662;
          $$a$3$us320$i = $$a$3$us$i;$z$4$us$i = $663;
         } else {
          $655 = HEAP32[$a$3245$us$i>>2]|0;
          $656 = ($655|0)==(0);
          $657 = (($a$3245$us$i) + 4|0);
          $$a$3$us319$i = $656 ? $657 : $a$3245$us$i;
          $$a$3$us320$i = $$a$3$us319$i;$z$4$us$i = $z$3244$us$i;
         }
        } while(0);
        $664 = $z$4$us$i;
        $665 = (($664) - ($649))|0;
        $666 = $665 >> 2;
        $667 = ($666|0)>($648|0);
        $$z$4$us$i = $667 ? $650 : $z$4$us$i;
        $668 = HEAP32[$e2$i>>2]|0;
        $669 = (($668) + ($$20$us$i))|0;
        HEAP32[$e2$i>>2] = $669;
        $670 = ($669|0)<(0);
        if ($670) {
         $652 = $669;$a$3245$us$i = $$a$3$us320$i;$z$3244$us$i = $$z$4$us$i;
        } else {
         $a$3$lcssa$i = $$a$3$us320$i;$z$3$lcssa$i = $$z$4$us$i;
         break L246;
        }
       }
      } else {
       $681 = $$pr147$i;$a$3245$i = $a$1$lcssa$i;$z$3244$i = $z$1$lcssa$i;
      }
      while(1) {
       $680 = (0 - ($681))|0;
       $682 = ($680|0)>(9);
       $$20$i = $682 ? 9 : $680;
       $683 = ($a$3245$i>>>0)<($z$3244$i>>>0);
       do {
        if ($683) {
         $687 = 1 << $$20$i;
         $688 = (($687) + -1)|0;
         $689 = 1000000000 >>> $$20$i;
         $carry3$0239$i = 0;$d$1238$i = $a$3245$i;
         while(1) {
          $690 = HEAP32[$d$1238$i>>2]|0;
          $691 = $690 & $688;
          $692 = $690 >>> $$20$i;
          $693 = (($692) + ($carry3$0239$i))|0;
          HEAP32[$d$1238$i>>2] = $693;
          $694 = Math_imul($691, $689)|0;
          $695 = (($d$1238$i) + 4|0);
          $696 = ($695>>>0)<($z$3244$i>>>0);
          if ($696) {
           $carry3$0239$i = $694;$d$1238$i = $695;
          } else {
           break;
          }
         }
         $697 = HEAP32[$a$3245$i>>2]|0;
         $698 = ($697|0)==(0);
         $699 = (($a$3245$i) + 4|0);
         $$a$3$i = $698 ? $699 : $a$3245$i;
         $700 = ($694|0)==(0);
         if ($700) {
          $$a$3322$i = $$a$3$i;$z$4$i = $z$3244$i;
          break;
         }
         $701 = (($z$3244$i) + 4|0);
         HEAP32[$z$3244$i>>2] = $694;
         $$a$3322$i = $$a$3$i;$z$4$i = $701;
        } else {
         $684 = HEAP32[$a$3245$i>>2]|0;
         $685 = ($684|0)==(0);
         $686 = (($a$3245$i) + 4|0);
         $$a$3321$i = $685 ? $686 : $a$3245$i;
         $$a$3322$i = $$a$3321$i;$z$4$i = $z$3244$i;
        }
       } while(0);
       $702 = $z$4$i;
       $703 = $$a$3322$i;
       $704 = (($702) - ($703))|0;
       $705 = $704 >> 2;
       $706 = ($705|0)>($648|0);
       if ($706) {
        $707 = (($$a$3322$i) + ($648<<2)|0);
        $z$5$i = $707;
       } else {
        $z$5$i = $z$4$i;
       }
       $708 = HEAP32[$e2$i>>2]|0;
       $709 = (($708) + ($$20$i))|0;
       HEAP32[$e2$i>>2] = $709;
       $710 = ($709|0)<(0);
       if ($710) {
        $681 = $709;$a$3245$i = $$a$3322$i;$z$3244$i = $z$5$i;
       } else {
        $a$3$lcssa$i = $$a$3322$i;$z$3$lcssa$i = $z$5$i;
        break;
       }
      }
     } else {
      $a$3$lcssa$i = $a$1$lcssa$i;$z$3$lcssa$i = $z$1$lcssa$i;
     }
    } while(0);
    $711 = ($a$3$lcssa$i>>>0)<($z$3$lcssa$i>>>0);
    $712 = $$32$i;
    do {
     if ($711) {
      $713 = $a$3$lcssa$i;
      $714 = (($712) - ($713))|0;
      $715 = $714 >> 2;
      $716 = ($715*9)|0;
      $717 = HEAP32[$a$3$lcssa$i>>2]|0;
      $718 = ($717>>>0)<(10);
      if ($718) {
       $e$1$i = $716;
       break;
      } else {
       $e$0233$i = $716;$i$0234$i = 10;
      }
      while(1) {
       $719 = ($i$0234$i*10)|0;
       $720 = (($e$0233$i) + 1)|0;
       $721 = ($717>>>0)<($719>>>0);
       if ($721) {
        $e$1$i = $720;
        break;
       } else {
        $e$0233$i = $720;$i$0234$i = $719;
       }
      }
     } else {
      $e$1$i = 0;
     }
    } while(0);
    $722 = ($440|0)!=(102);
    $723 = $722 ? $e$1$i : 0;
    $724 = (($$p$i) - ($723))|0;
    $725 = ($440|0)==(103);
    $726 = ($$p$i|0)!=(0);
    $$21$i = $725 & $726;
    $$neg152$i = $$21$i << 31 >> 31;
    $727 = (($724) + ($$neg152$i))|0;
    $728 = $z$3$lcssa$i;
    $729 = (($728) - ($712))|0;
    $730 = $729 >> 2;
    $731 = ($730*9)|0;
    $732 = (($731) + -9)|0;
    $733 = ($727|0)<($732|0);
    if ($733) {
     $734 = (($727) + 9216)|0;
     $735 = (($734|0) / 9)&-1;
     $$sum$i = (($735) + -1023)|0;
     $736 = (($$32$i) + ($$sum$i<<2)|0);
     $737 = (($734|0) % 9)&-1;
     $j$0225$i = (($737) + 1)|0;
     $738 = ($j$0225$i|0)<(9);
     if ($738) {
      $i$1226$i = 10;$j$0227$i = $j$0225$i;
      while(1) {
       $739 = ($i$1226$i*10)|0;
       $j$0$i = (($j$0227$i) + 1)|0;
       $exitcond$i = ($j$0$i|0)==(9);
       if ($exitcond$i) {
        $i$1$lcssa$i = $739;
        break;
       } else {
        $i$1226$i = $739;$j$0227$i = $j$0$i;
       }
      }
     } else {
      $i$1$lcssa$i = 10;
     }
     $740 = HEAP32[$736>>2]|0;
     $741 = (($740>>>0) % ($i$1$lcssa$i>>>0))&-1;
     $742 = ($741|0)==(0);
     if ($742) {
      $$sum14$i = (($735) + -1022)|0;
      $743 = (($$32$i) + ($$sum14$i<<2)|0);
      $744 = ($743|0)==($z$3$lcssa$i|0);
      if ($744) {
       $a$6$i = $a$3$lcssa$i;$d$3$i = $736;$e$3$i = $e$1$i;
      } else {
       label = 244;
      }
     } else {
      label = 244;
     }
     do {
      if ((label|0) == 244) {
       label = 0;
       $745 = (($740>>>0) / ($i$1$lcssa$i>>>0))&-1;
       $746 = $745 & 1;
       $747 = ($746|0)==(0);
       $$22$i = $747 ? 9007199254740992.0 : 9007199254740994.0;
       $748 = (($i$1$lcssa$i|0) / 2)&-1;
       $749 = ($741>>>0)<($748>>>0);
       do {
        if ($749) {
         $small$0$i = 0.5;
        } else {
         $750 = ($741|0)==($748|0);
         if ($750) {
          $$sum15$i = (($735) + -1022)|0;
          $751 = (($$32$i) + ($$sum15$i<<2)|0);
          $752 = ($751|0)==($z$3$lcssa$i|0);
          if ($752) {
           $small$0$i = 1.0;
           break;
          }
         }
         $small$0$i = 1.5;
        }
       } while(0);
       $753 = ($pl$0$i|0)==(0);
       do {
        if ($753) {
         $round6$1$i = $$22$i;$small$1$i = $small$0$i;
        } else {
         $754 = HEAP8[$prefix$0$i>>0]|0;
         $755 = ($754<<24>>24)==(45);
         if (!($755)) {
          $round6$1$i = $$22$i;$small$1$i = $small$0$i;
          break;
         }
         $756 = $$22$i * -1.0;
         $757 = $small$0$i * -1.0;
         $round6$1$i = $756;$small$1$i = $757;
        }
       } while(0);
       $758 = (($740) - ($741))|0;
       HEAP32[$736>>2] = $758;
       $759 = $round6$1$i + $small$1$i;
       $760 = $759 != $round6$1$i;
       if (!($760)) {
        $a$6$i = $a$3$lcssa$i;$d$3$i = $736;$e$3$i = $e$1$i;
        break;
       }
       $761 = (($758) + ($i$1$lcssa$i))|0;
       HEAP32[$736>>2] = $761;
       $762 = ($761>>>0)>(999999999);
       if ($762) {
        $d$2220$i = $736;
        while(1) {
         $763 = (($d$2220$i) + -4|0);
         HEAP32[$d$2220$i>>2] = 0;
         $764 = HEAP32[$763>>2]|0;
         $765 = (($764) + 1)|0;
         HEAP32[$763>>2] = $765;
         $766 = ($765>>>0)>(999999999);
         if ($766) {
          $d$2220$i = $763;
         } else {
          $d$2$lcssa$i = $763;
          break;
         }
        }
       } else {
        $d$2$lcssa$i = $736;
       }
       $767 = ($d$2$lcssa$i>>>0)<($a$3$lcssa$i>>>0);
       $d$2$a$3$i = $767 ? $d$2$lcssa$i : $a$3$lcssa$i;
       $768 = $d$2$a$3$i;
       $769 = (($712) - ($768))|0;
       $770 = $769 >> 2;
       $771 = ($770*9)|0;
       $772 = HEAP32[$d$2$a$3$i>>2]|0;
       $773 = ($772>>>0)<(10);
       if ($773) {
        $a$6$i = $d$2$a$3$i;$d$3$i = $d$2$lcssa$i;$e$3$i = $771;
        break;
       } else {
        $e$2215$i = $771;$i$2216$i = 10;
       }
       while(1) {
        $774 = ($i$2216$i*10)|0;
        $775 = (($e$2215$i) + 1)|0;
        $776 = ($772>>>0)<($774>>>0);
        if ($776) {
         $a$6$i = $d$2$a$3$i;$d$3$i = $d$2$lcssa$i;$e$3$i = $775;
         break;
        } else {
         $e$2215$i = $775;$i$2216$i = $774;
        }
       }
      }
     } while(0);
     $777 = (($d$3$i) + 4|0);
     $778 = ($z$3$lcssa$i>>>0)>($777>>>0);
     $$z$3$i = $778 ? $777 : $z$3$lcssa$i;
     $z$6$i = $$z$3$i;
     while(1) {
      $779 = (($z$6$i) + -4|0);
      $780 = HEAP32[$779>>2]|0;
      $781 = ($780|0)==(0);
      $782 = ($z$6$i>>>0)>($a$6$i>>>0);
      $or$cond23$i = $781 & $782;
      if ($or$cond23$i) {
       $z$6$i = $779;
      } else {
       $a$7$i = $a$6$i;$e$4$i = $e$3$i;$z$7$i = $z$6$i;
       break;
      }
     }
    } else {
     $a$7$i = $a$3$lcssa$i;$e$4$i = $e$1$i;$z$7$i = $z$3$lcssa$i;
    }
    $783 = (0 - ($e$4$i))|0;
    do {
     if ($725) {
      $784 = ($$p$i|0)==(0);
      $785 = $784&1;
      $$$p$i = (($785) + ($$p$i))|0;
      $786 = ($$$p$i|0)>($e$4$i|0);
      $787 = ($e$4$i|0)>(-5);
      $or$cond3$i = $786 & $787;
      if ($or$cond3$i) {
       $788 = (($t$0) + -1)|0;
       $$neg153$i = (($$$p$i) + -1)|0;
       $789 = (($$neg153$i) - ($e$4$i))|0;
       $$012$i73 = $788;$$29$i = $789;
      } else {
       $790 = (($t$0) + -2)|0;
       $791 = (($$$p$i) + -1)|0;
       $$012$i73 = $790;$$29$i = $791;
      }
      $792 = $fl$1$ & 8;
      $793 = ($792|0)==(0);
      if (!($793)) {
       $$113$i = $$012$i73;$$310$i = $$29$i;
       break;
      }
      $794 = ($z$7$i>>>0)>($a$7$i>>>0);
      do {
       if ($794) {
        $795 = (($z$7$i) + -4|0);
        $796 = HEAP32[$795>>2]|0;
        $797 = ($796|0)==(0);
        if ($797) {
         $j$2$i = 9;
         break;
        }
        $798 = (($796>>>0) % 10)&-1;
        $799 = ($798|0)==(0);
        if ($799) {
         $i$3210$i = 10;$j$1211$i = 0;
        } else {
         $j$2$i = 0;
         break;
        }
        while(1) {
         $800 = ($i$3210$i*10)|0;
         $801 = (($j$1211$i) + 1)|0;
         $802 = (($796>>>0) % ($800>>>0))&-1;
         $803 = ($802|0)==(0);
         if ($803) {
          $i$3210$i = $800;$j$1211$i = $801;
         } else {
          $j$2$i = $801;
          break;
         }
        }
       } else {
        $j$2$i = 9;
       }
      } while(0);
      $804 = $$012$i73 | 32;
      $805 = ($804|0)==(102);
      $806 = $z$7$i;
      $807 = (($806) - ($712))|0;
      $808 = $807 >> 2;
      $809 = ($808*9)|0;
      $810 = (($809) + -9)|0;
      if ($805) {
       $811 = (($810) - ($j$2$i))|0;
       $812 = ($811|0)<(0);
       $$24$i = $812 ? 0 : $811;
       $813 = ($$29$i|0)<($$24$i|0);
       $$29$$24$i = $813 ? $$29$i : $$24$i;
       $$113$i = $$012$i73;$$310$i = $$29$$24$i;
       break;
      } else {
       $814 = (($810) + ($e$4$i))|0;
       $815 = (($814) - ($j$2$i))|0;
       $816 = ($815|0)<(0);
       $$26$i = $816 ? 0 : $815;
       $817 = ($$29$i|0)<($$26$i|0);
       $$29$$26$i = $817 ? $$29$i : $$26$i;
       $$113$i = $$012$i73;$$310$i = $$29$$26$i;
       break;
      }
     } else {
      $$113$i = $t$0;$$310$i = $$p$i;
     }
    } while(0);
    $818 = ($$310$i|0)!=(0);
    if ($818) {
     $822 = 1;
    } else {
     $819 = $fl$1$ & 8;
     $820 = ($819|0)!=(0);
     $822 = $820;
    }
    $821 = $822&1;
    $823 = $$113$i | 32;
    $824 = ($823|0)==(102);
    if ($824) {
     $825 = ($e$4$i|0)>(0);
     $826 = $825 ? $e$4$i : 0;
     $$pn$i = $826;$estr$2$i = 0;
    } else {
     $827 = ($e$4$i|0)<(0);
     $828 = $827 ? $783 : $e$4$i;
     $829 = ($828|0)<(0);
     if ($829) {
      $830 = ($828|0)<(0);
      $831 = $830 << 31 >> 31;
      $$05$i80$i = $6;$832 = $828;$833 = $831;
      while(1) {
       $834 = (___uremdi3(($832|0),($833|0),10,0)|0);
       $835 = tempRet0;
       $836 = $834 | 48;
       $837 = $836&255;
       $838 = (($$05$i80$i) + -1|0);
       HEAP8[$838>>0] = $837;
       $839 = (___udivdi3(($832|0),($833|0),10,0)|0);
       $840 = tempRet0;
       $841 = ($833>>>0)>(9);
       $842 = ($833|0)==(9);
       $843 = ($832>>>0)>(4294967295);
       $844 = $842 & $843;
       $845 = $841 | $844;
       if ($845) {
        $$05$i80$i = $838;$832 = $839;$833 = $840;
       } else {
        break;
       }
      }
      $$0$lcssa$i85$i = $838;$$01$lcssa$off0$i86$i = $839;
     } else {
      $$0$lcssa$i85$i = $6;$$01$lcssa$off0$i86$i = $828;
     }
     $846 = ($$01$lcssa$off0$i86$i|0)==(0);
     if ($846) {
      $estr$1$ph$i = $$0$lcssa$i85$i;
     } else {
      $$12$i88$i = $$0$lcssa$i85$i;$y$03$i87$i = $$01$lcssa$off0$i86$i;
      while(1) {
       $847 = (($y$03$i87$i>>>0) % 10)&-1;
       $848 = $847 | 48;
       $849 = $848&255;
       $850 = (($$12$i88$i) + -1|0);
       HEAP8[$850>>0] = $849;
       $851 = (($y$03$i87$i>>>0) / 10)&-1;
       $852 = ($y$03$i87$i>>>0)<(10);
       if ($852) {
        $estr$1$ph$i = $850;
        break;
       } else {
        $$12$i88$i = $850;$y$03$i87$i = $851;
       }
      }
     }
     $853 = $estr$1$ph$i;
     $854 = (($8) - ($853))|0;
     $855 = ($854|0)<(2);
     if ($855) {
      $estr$1201$i = $estr$1$ph$i;
      while(1) {
       $856 = (($estr$1201$i) + -1|0);
       HEAP8[$856>>0] = 48;
       $857 = $856;
       $858 = (($8) - ($857))|0;
       $859 = ($858|0)<(2);
       if ($859) {
        $estr$1201$i = $856;
       } else {
        $estr$1$lcssa$i = $856;
        break;
       }
      }
     } else {
      $estr$1$lcssa$i = $estr$1$ph$i;
     }
     $860 = $e$4$i >> 31;
     $861 = $860 & 2;
     $862 = (($861) + 43)|0;
     $863 = $862&255;
     $864 = (($estr$1$lcssa$i) + -1|0);
     HEAP8[$864>>0] = $863;
     $865 = $$113$i&255;
     $866 = (($estr$1$lcssa$i) + -2|0);
     HEAP8[$866>>0] = $865;
     $867 = $866;
     $868 = (($8) - ($867))|0;
     $$pn$i = $868;$estr$2$i = $866;
    }
    $869 = (($pl$0$i) + 1)|0;
    $870 = (($869) + ($$310$i))|0;
    $l$1$i = (($870) + ($821))|0;
    $871 = (($l$1$i) + ($$pn$i))|0;
    $872 = $fl$1$ & 73728;
    $873 = ($872|0)==(0);
    $874 = ($871|0)<($w$1|0);
    $or$cond$i94$i = $873 & $874;
    if ($or$cond$i94$i) {
     $875 = (($w$1) - ($871))|0;
     $876 = ($875>>>0)>(256);
     $877 = $876 ? 256 : $875;
     _memset(($pad$i|0),32,($877|0))|0;
     $878 = ($875>>>0)>(255);
     if ($878) {
      $$01$i95$i = $875;
      while(1) {
       ___fwritex($pad$i,256,$f);
       $879 = (($$01$i95$i) + -256)|0;
       $880 = ($879>>>0)>(255);
       if ($880) {
        $$01$i95$i = $879;
       } else {
        $$0$lcssa$i97$i = $879;
        break;
       }
      }
     } else {
      $$0$lcssa$i97$i = $875;
     }
     ___fwritex($pad$i,$$0$lcssa$i97$i,$f);
    }
    ___fwritex($prefix$0$i,$pl$0$i,$f);
    $881 = ($872|0)==(65536);
    $or$cond$i101$i = $881 & $874;
    if ($or$cond$i101$i) {
     $882 = (($w$1) - ($871))|0;
     $883 = ($882>>>0)>(256);
     $884 = $883 ? 256 : $882;
     _memset(($pad$i|0),48,($884|0))|0;
     $885 = ($882>>>0)>(255);
     if ($885) {
      $$01$i102$i = $882;
      while(1) {
       ___fwritex($pad$i,256,$f);
       $886 = (($$01$i102$i) + -256)|0;
       $887 = ($886>>>0)>(255);
       if ($887) {
        $$01$i102$i = $886;
       } else {
        $$0$lcssa$i104$i = $886;
        break;
       }
      }
     } else {
      $$0$lcssa$i104$i = $882;
     }
     ___fwritex($pad$i,$$0$lcssa$i104$i,$f);
    }
    do {
     if ($824) {
      $888 = ($a$7$i>>>0)>($$32$i>>>0);
      $r$0$a$7$i = $888 ? $$32$i : $a$7$i;
      $d$4184$i = $r$0$a$7$i;
      while(1) {
       $889 = HEAP32[$d$4184$i>>2]|0;
       $890 = ($889|0)==(0);
       if ($890) {
        $$1$lcssa$i113$i = $13;
       } else {
        $$12$i111$i = $13;$y$03$i110$i = $889;
        while(1) {
         $891 = (($y$03$i110$i>>>0) % 10)&-1;
         $892 = $891 | 48;
         $893 = $892&255;
         $894 = (($$12$i111$i) + -1|0);
         HEAP8[$894>>0] = $893;
         $895 = (($y$03$i110$i>>>0) / 10)&-1;
         $896 = ($y$03$i110$i>>>0)<(10);
         if ($896) {
          $$1$lcssa$i113$i = $894;
          break;
         } else {
          $$12$i111$i = $894;$y$03$i110$i = $895;
         }
        }
       }
       $897 = ($d$4184$i|0)==($r$0$a$7$i|0);
       do {
        if ($897) {
         $901 = ($$1$lcssa$i113$i|0)==($13|0);
         if (!($901)) {
          $s7$1$i = $$1$lcssa$i113$i;
          break;
         }
         HEAP8[$15>>0] = 48;
         $s7$1$i = $15;
        } else {
         $898 = ($$1$lcssa$i113$i>>>0)>($buf$i>>>0);
         if ($898) {
          $s7$0181$i = $$1$lcssa$i113$i;
         } else {
          $s7$1$i = $$1$lcssa$i113$i;
          break;
         }
         while(1) {
          $899 = (($s7$0181$i) + -1|0);
          HEAP8[$899>>0] = 48;
          $900 = ($899>>>0)>($buf$i>>>0);
          if ($900) {
           $s7$0181$i = $899;
          } else {
           $s7$1$i = $899;
           break;
          }
         }
        }
       } while(0);
       $902 = $s7$1$i;
       $903 = (($14) - ($902))|0;
       ___fwritex($s7$1$i,$903,$f);
       $904 = (($d$4184$i) + 4|0);
       $905 = ($904>>>0)>($$32$i>>>0);
       if ($905) {
        break;
       } else {
        $d$4184$i = $904;
       }
      }
      if (!($818)) {
       $906 = $fl$1$ & 8;
       $907 = ($906|0)==(0);
       if ($907) {
        break;
       }
      }
      ___fwritex(16624,1,$f);
      $908 = ($904>>>0)<($z$7$i>>>0);
      $909 = ($$310$i|0)>(0);
      $or$cond29174$i = $908 & $909;
      if ($or$cond29174$i) {
       $$411176$i = $$310$i;$d$5175$i = $904;
       while(1) {
        $910 = HEAP32[$d$5175$i>>2]|0;
        $911 = ($910|0)==(0);
        if ($911) {
         $s8$0170$i = $13;
         label = 307;
        } else {
         $$12$i120$i = $13;$y$03$i119$i = $910;
         while(1) {
          $912 = (($y$03$i119$i>>>0) % 10)&-1;
          $913 = $912 | 48;
          $914 = $913&255;
          $915 = (($$12$i120$i) + -1|0);
          HEAP8[$915>>0] = $914;
          $916 = (($y$03$i119$i>>>0) / 10)&-1;
          $917 = ($y$03$i119$i>>>0)<(10);
          if ($917) {
           break;
          } else {
           $$12$i120$i = $915;$y$03$i119$i = $916;
          }
         }
         $918 = ($915>>>0)>($buf$i>>>0);
         if ($918) {
          $s8$0170$i = $915;
          label = 307;
         } else {
          $s8$0$lcssa$i = $915;
         }
        }
        if ((label|0) == 307) {
         while(1) {
          label = 0;
          $919 = (($s8$0170$i) + -1|0);
          HEAP8[$919>>0] = 48;
          $920 = ($919>>>0)>($buf$i>>>0);
          if ($920) {
           $s8$0170$i = $919;
           label = 307;
          } else {
           $s8$0$lcssa$i = $919;
           break;
          }
         }
        }
        $921 = ($$411176$i|0)>(9);
        $922 = $921 ? 9 : $$411176$i;
        ___fwritex($s8$0$lcssa$i,$922,$f);
        $923 = (($d$5175$i) + 4|0);
        $924 = (($$411176$i) + -9)|0;
        $925 = ($923>>>0)<($z$7$i>>>0);
        $926 = ($924|0)>(0);
        $or$cond29$i = $925 & $926;
        if ($or$cond29$i) {
         $$411176$i = $924;$d$5175$i = $923;
        } else {
         $$411$lcssa$i = $924;
         break;
        }
       }
      } else {
       $$411$lcssa$i = $$310$i;
      }
      $927 = ($$411$lcssa$i|0)>(0);
      if (!($927)) {
       break;
      }
      $928 = ($$411$lcssa$i>>>0)>(256);
      $929 = $928 ? 256 : $$411$lcssa$i;
      _memset(($pad$i|0),48,($929|0))|0;
      $930 = ($$411$lcssa$i>>>0)>(255);
      if ($930) {
       $$01$i126$i = $$411$lcssa$i;
       while(1) {
        ___fwritex($pad$i,256,$f);
        $931 = (($$01$i126$i) + -256)|0;
        $932 = ($931>>>0)>(255);
        if ($932) {
         $$01$i126$i = $931;
        } else {
         $$0$lcssa$i128$i = $931;
         break;
        }
       }
      } else {
       $$0$lcssa$i128$i = $$411$lcssa$i;
      }
      ___fwritex($pad$i,$$0$lcssa$i128$i,$f);
     } else {
      $933 = ($z$7$i>>>0)>($a$7$i>>>0);
      $934 = (($a$7$i) + 4|0);
      $z$7$$i = $933 ? $z$7$i : $934;
      $935 = ($$310$i|0)>(-1);
      do {
       if ($935) {
        $936 = $fl$1$ & 8;
        $$not$i = ($936|0)!=(0);
        $$5194$i = $$310$i;$d$6193$i = $a$7$i;
        while(1) {
         $937 = HEAP32[$d$6193$i>>2]|0;
         $938 = ($937|0)==(0);
         if ($938) {
          label = 318;
         } else {
          $$12$i135$i = $13;$y$03$i134$i = $937;
          while(1) {
           $939 = (($y$03$i134$i>>>0) % 10)&-1;
           $940 = $939 | 48;
           $941 = $940&255;
           $942 = (($$12$i135$i) + -1|0);
           HEAP8[$942>>0] = $941;
           $943 = (($y$03$i134$i>>>0) / 10)&-1;
           $944 = ($y$03$i134$i>>>0)<(10);
           if ($944) {
            break;
           } else {
            $$12$i135$i = $942;$y$03$i134$i = $943;
           }
          }
          $945 = ($942|0)==($13|0);
          if ($945) {
           label = 318;
          } else {
           $s9$0$i = $942;
          }
         }
         if ((label|0) == 318) {
          label = 0;
          HEAP8[$15>>0] = 48;
          $s9$0$i = $15;
         }
         $946 = ($d$6193$i|0)==($a$7$i|0);
         do {
          if ($946) {
           $950 = (($s9$0$i) + 1|0);
           ___fwritex($s9$0$i,1,$f);
           $951 = ($$5194$i|0)>(0);
           $brmerge$i = $951 | $$not$i;
           if (!($brmerge$i)) {
            $s9$2$i = $950;
            break;
           }
           ___fwritex(16624,1,$f);
           $s9$2$i = $950;
          } else {
           $947 = ($s9$0$i>>>0)>($buf$i>>>0);
           if ($947) {
            $s9$1189$i = $s9$0$i;
           } else {
            $s9$2$i = $s9$0$i;
            break;
           }
           while(1) {
            $948 = (($s9$1189$i) + -1|0);
            HEAP8[$948>>0] = 48;
            $949 = ($948>>>0)>($buf$i>>>0);
            if ($949) {
             $s9$1189$i = $948;
            } else {
             $s9$2$i = $948;
             break;
            }
           }
          }
         } while(0);
         $952 = $s9$2$i;
         $953 = (($14) - ($952))|0;
         $954 = ($953|0)<($$5194$i|0);
         $$$5$i = $954 ? $953 : $$5194$i;
         ___fwritex($s9$2$i,$$$5$i,$f);
         $955 = (($$5194$i) - ($953))|0;
         $956 = (($d$6193$i) + 4|0);
         $957 = ($956>>>0)<($z$7$$i>>>0);
         $958 = ($955|0)>(-1);
         $or$cond30$i = $957 & $958;
         if ($or$cond30$i) {
          $$5194$i = $955;$d$6193$i = $956;
         } else {
          break;
         }
        }
        $959 = ($955|0)>(0);
        if (!($959)) {
         break;
        }
        $960 = ($955>>>0)>(256);
        $961 = $960 ? 256 : $955;
        _memset(($pad$i|0),48,($961|0))|0;
        $962 = ($955>>>0)>(255);
        if ($962) {
         $$01$i141$i = $955;
         while(1) {
          ___fwritex($pad$i,256,$f);
          $963 = (($$01$i141$i) + -256)|0;
          $964 = ($963>>>0)>(255);
          if ($964) {
           $$01$i141$i = $963;
          } else {
           $$0$lcssa$i143$i = $963;
           break;
          }
         }
        } else {
         $$0$lcssa$i143$i = $955;
        }
        ___fwritex($pad$i,$$0$lcssa$i143$i,$f);
       }
      } while(0);
      $965 = $estr$2$i;
      $966 = (($8) - ($965))|0;
      ___fwritex($estr$2$i,$966,$f);
     }
    } while(0);
    $967 = ($872|0)==(8192);
    $or$cond$i$i = $967 & $874;
    if ($or$cond$i$i) {
     $968 = (($w$1) - ($871))|0;
     $969 = ($968>>>0)>(256);
     $970 = $969 ? 256 : $968;
     _memset(($pad$i|0),32,($970|0))|0;
     $971 = ($968>>>0)>(255);
     if ($971) {
      $$01$i$i = $968;
      while(1) {
       ___fwritex($pad$i,256,$f);
       $972 = (($$01$i$i) + -256)|0;
       $973 = ($972>>>0)>(255);
       if ($973) {
        $$01$i$i = $972;
       } else {
        $$0$lcssa$i$i = $972;
        break;
       }
      }
     } else {
      $$0$lcssa$i$i = $968;
     }
     ___fwritex($pad$i,$$0$lcssa$i$i,$f);
    }
    $w$31$i = $874 ? $w$1 : $871;
    $1074 = $229;$1075 = $207;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $w$31$i;$l10n$0 = $l10n$3;
    continue L1;
    break;
   }
   case 67:  {
    $359 = $207;
    HEAP32[$wc>>2] = $359;
    HEAP32[$5>>2] = 0;
    $1082 = $wc;$1083 = $wc;$p$4296 = -1;
    label = 115;
    break;
   }
   case 83:  {
    $360 = ($p$0|0)==(0);
    if ($360) {
     $1084 = $207;$1085 = $207;$i$0167 = 0;
     label = 122;
    } else {
     $1082 = $207;$1083 = $207;$p$4296 = $p$0;
     label = 115;
    }
    break;
   }
   case 112:  {
    $222 = ($p$0>>>0)>(8);
    $223 = $222 ? $p$0 : 8;
    $224 = $fl$1$ | 8;
    $fl$3 = $224;$p$1 = $223;$t$1 = 120;
    label = 77;
    break;
   }
   case 88: case 120:  {
    $fl$3 = $fl$1$;$p$1 = $p$0;$t$1 = $t$0;
    label = 77;
    break;
   }
   default: {
    $1080 = $229;$1081 = $207;$a$2 = $22;$fl$6 = $fl$1$;$p$5 = $p$0;$pl$2 = 0;$prefix$2 = 16528;$z$2 = $2;
   }
   }
  } while(0);
  L435: do {
   if ((label|0) == 77) {
    label = 0;
    $225 = $207;
    $226 = $t$1 & 32;
    $227 = ($225|0)==(0);
    $228 = ($229|0)==(0);
    $230 = $227 & $228;
    if ($230) {
     $308 = $207;$311 = $229;$a$0 = $2;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 0;$prefix$1 = 16528;
     label = 94;
    } else {
     $$012$i = $2;$232 = $225;$239 = $229;
     while(1) {
      $231 = $232 & 15;
      $233 = (16608 + ($231)|0);
      $234 = HEAP8[$233>>0]|0;
      $235 = $234&255;
      $236 = $235 | $226;
      $237 = $236&255;
      $238 = (($$012$i) + -1|0);
      HEAP8[$238>>0] = $237;
      $240 = (_bitshift64Lshr(($232|0),($239|0),4)|0);
      $241 = tempRet0;
      $242 = ($240|0)==(0);
      $243 = ($241|0)==(0);
      $244 = $242 & $243;
      if ($244) {
       break;
      } else {
       $$012$i = $238;$232 = $240;$239 = $241;
      }
     }
     $245 = $fl$3 & 8;
     $246 = ($245|0)==(0);
     if ($246) {
      $308 = $207;$311 = $229;$a$0 = $238;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 0;$prefix$1 = 16528;
      label = 94;
     } else {
      $247 = $t$1 >> 4;
      $248 = (16528 + ($247)|0);
      $308 = $207;$311 = $229;$a$0 = $238;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 2;$prefix$1 = $248;
      label = 94;
     }
    }
   }
   else if ((label|0) == 89) {
    label = 0;
    $276 = $277;
    $278 = ($279>>>0)>(0);
    $280 = ($279|0)==(0);
    $281 = ($276>>>0)>(4294967295);
    $282 = $280 & $281;
    $283 = $278 | $282;
    if ($283) {
     $$05$i = $2;$284 = $276;$285 = $279;
     while(1) {
      $286 = (___uremdi3(($284|0),($285|0),10,0)|0);
      $287 = tempRet0;
      $288 = $286 | 48;
      $289 = $288&255;
      $290 = (($$05$i) + -1|0);
      HEAP8[$290>>0] = $289;
      $291 = (___udivdi3(($284|0),($285|0),10,0)|0);
      $292 = tempRet0;
      $293 = ($285>>>0)>(9);
      $294 = ($285|0)==(9);
      $295 = ($284>>>0)>(4294967295);
      $296 = $294 & $295;
      $297 = $293 | $296;
      if ($297) {
       $$05$i = $290;$284 = $291;$285 = $292;
      } else {
       break;
      }
     }
     $$0$lcssa$i46 = $290;$$01$lcssa$off0$i = $291;
    } else {
     $$0$lcssa$i46 = $2;$$01$lcssa$off0$i = $276;
    }
    $298 = ($$01$lcssa$off0$i|0)==(0);
    if ($298) {
     $308 = $277;$311 = $279;$a$0 = $$0$lcssa$i46;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = $pl$0;$prefix$1 = $prefix$0;
     label = 94;
    } else {
     $$12$i = $$0$lcssa$i46;$y$03$i = $$01$lcssa$off0$i;
     while(1) {
      $299 = (($y$03$i>>>0) % 10)&-1;
      $300 = $299 | 48;
      $301 = $300&255;
      $302 = (($$12$i) + -1|0);
      HEAP8[$302>>0] = $301;
      $303 = (($y$03$i>>>0) / 10)&-1;
      $304 = ($y$03$i>>>0)<(10);
      if ($304) {
       $308 = $277;$311 = $279;$a$0 = $302;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = $pl$0;$prefix$1 = $prefix$0;
       label = 94;
       break;
      } else {
       $$12$i = $302;$y$03$i = $303;
      }
     }
    }
   }
   else if ((label|0) == 99) {
    label = 0;
    $325 = $a$1;
    $326 = $325 & 3;
    $327 = ($326|0)==(0);
    $328 = ($p$0|0)==(0);
    $or$cond12$i = $327 | $328;
    L445: do {
     if ($or$cond12$i) {
      $$0$lcssa$i2 = $p$0;$$lcssa$i = $328;$s$0$lcssa$i = $a$1;
      label = 102;
     } else {
      $$013$i = $p$0;$s$014$i = $a$1;
      while(1) {
       $329 = HEAP8[$s$014$i>>0]|0;
       $330 = ($329<<24>>24)==(0);
       if ($330) {
        $$3$i6 = $$013$i;$s$2$i = $s$014$i;
        break L445;
       }
       $331 = (($s$014$i) + 1|0);
       $332 = (($$013$i) + -1)|0;
       $333 = $331;
       $334 = $333 & 3;
       $335 = ($334|0)==(0);
       $336 = ($332|0)==(0);
       $or$cond$i1 = $335 | $336;
       if ($or$cond$i1) {
        $$0$lcssa$i2 = $332;$$lcssa$i = $336;$s$0$lcssa$i = $331;
        label = 102;
        break;
       } else {
        $$013$i = $332;$s$014$i = $331;
       }
      }
     }
    } while(0);
    L449: do {
     if ((label|0) == 102) {
      label = 0;
      if ($$lcssa$i) {
       $$3$i6 = 0;$s$2$i = $s$0$lcssa$i;
      } else {
       $$pre22 = HEAP8[$s$0$lcssa$i>>0]|0;
       $phitmp = ($$pre22<<24>>24)==(0);
       if ($phitmp) {
        $$3$i6 = $$0$lcssa$i2;$s$2$i = $s$0$lcssa$i;
       } else {
        $337 = ($$0$lcssa$i2>>>0)>(3);
        L453: do {
         if ($337) {
          $$17$i = $$0$lcssa$i2;$w$08$i = $s$0$lcssa$i;
          while(1) {
           $338 = HEAP32[$w$08$i>>2]|0;
           $339 = (($338) + -16843009)|0;
           $340 = $338 & -2139062144;
           $341 = $340 ^ -2139062144;
           $342 = $341 & $339;
           $343 = ($342|0)==(0);
           if (!($343)) {
            $$1$lcssa$i = $$17$i;$w$0$lcssa$i = $w$08$i;
            break L453;
           }
           $344 = (($w$08$i) + 4|0);
           $345 = (($$17$i) + -4)|0;
           $346 = ($345>>>0)>(3);
           if ($346) {
            $$17$i = $345;$w$08$i = $344;
           } else {
            $$1$lcssa$i = $345;$w$0$lcssa$i = $344;
            break;
           }
          }
         } else {
          $$1$lcssa$i = $$0$lcssa$i2;$w$0$lcssa$i = $s$0$lcssa$i;
         }
        } while(0);
        $347 = ($$1$lcssa$i|0)==(0);
        if ($347) {
         $$3$i6 = 0;$s$2$i = $w$0$lcssa$i;
        } else {
         $$24$i4 = $$1$lcssa$i;$s$15$i = $w$0$lcssa$i;
         while(1) {
          $348 = HEAP8[$s$15$i>>0]|0;
          $349 = ($348<<24>>24)==(0);
          if ($349) {
           $$3$i6 = $$24$i4;$s$2$i = $s$15$i;
           break L449;
          }
          $350 = (($s$15$i) + 1|0);
          $351 = (($$24$i4) + -1)|0;
          $352 = ($351|0)==(0);
          if ($352) {
           $$3$i6 = 0;$s$2$i = $350;
           break;
          } else {
           $$24$i4 = $351;$s$15$i = $350;
          }
         }
        }
       }
      }
     }
    } while(0);
    $353 = ($$3$i6|0)!=(0);
    $354 = $353 ? $s$2$i : 0;
    $355 = ($354|0)==(0|0);
    if ($355) {
     $356 = (($a$1) + ($p$0)|0);
     $1080 = $229;$1081 = $207;$a$2 = $a$1;$fl$6 = $206;$p$5 = $p$0;$pl$2 = 0;$prefix$2 = 16528;$z$2 = $356;
     break;
    } else {
     $357 = $354;
     $358 = (($357) - ($325))|0;
     $1080 = $229;$1081 = $207;$a$2 = $a$1;$fl$6 = $206;$p$5 = $358;$pl$2 = 0;$prefix$2 = 16528;$z$2 = $354;
     break;
    }
   }
   else if ((label|0) == 115) {
    label = 0;
    $i$0169 = 0;$l$1168 = 0;$ws$0170 = $1082;
    while(1) {
     $364 = HEAP32[$ws$0170>>2]|0;
     $365 = ($364|0)==(0);
     if ($365) {
      $i$0$lcssa = $i$0169;$l$1$lcssa = $l$1168;
      break;
     }
     $366 = (_wcrtomb($mb,$364)|0);
     $367 = ($366|0)>(-1);
     if (!($367)) {
      $$0 = -1;
      label = 370;
      break L1;
     }
     $368 = (($p$4296) - ($i$0169))|0;
     $369 = ($366>>>0)>($368>>>0);
     $362 = (($366) + ($i$0169))|0;
     if ($369) {
      $1084 = $1082;$1085 = $1083;$i$0167 = $i$0169;
      label = 122;
      break L435;
     }
     $361 = ($362>>>0)<($p$4296>>>0);
     if (!($361)) {
      $i$0$lcssa = $362;$l$1$lcssa = $366;
      break;
     }
     $363 = (($ws$0170) + 4|0);
     $i$0169 = $362;$l$1168 = $366;$ws$0170 = $363;
    }
    $370 = ($l$1$lcssa|0)<(0);
    if ($370) {
     $$0 = -1;
     label = 370;
     break L1;
    } else {
     $1084 = $1082;$1085 = $1083;$i$0167 = $i$0$lcssa;
     label = 122;
    }
   }
  } while(0);
  if ((label|0) == 94) {
   label = 0;
   $305 = ($p$2|0)>(-1);
   $306 = $fl$4 & -65537;
   $$fl$4 = $305 ? $306 : $fl$4;
   $307 = $308;
   $309 = ($307|0)==(0);
   $310 = ($311|0)==(0);
   $312 = $309 & $310;
   $313 = ($p$2|0)==(0);
   $or$cond = $312 & $313;
   if ($or$cond) {
    $1080 = $311;$1081 = $308;$a$2 = $2;$fl$6 = $$fl$4;$p$5 = 0;$pl$2 = $pl$1;$prefix$2 = $prefix$1;$z$2 = $2;
   } else {
    $314 = $a$0;
    $315 = (($3) - ($314))|0;
    $316 = $312&1;
    $317 = (($316) + ($315))|0;
    $318 = ($p$2|0)>($317|0);
    $p$2$ = $318 ? $p$2 : $317;
    $1080 = $311;$1081 = $308;$a$2 = $a$0;$fl$6 = $$fl$4;$p$5 = $p$2$;$pl$2 = $pl$1;$prefix$2 = $prefix$1;$z$2 = $2;
   }
  }
  else if ((label|0) == 122) {
   label = 0;
   $371 = $fl$1$ & 73728;
   $372 = ($371|0)==(0);
   $373 = ($i$0167|0)<($w$1|0);
   $or$cond$i57 = $372 & $373;
   if ($or$cond$i57) {
    $374 = (($w$1) - ($i$0167))|0;
    $375 = ($374>>>0)>(256);
    $376 = $375 ? 256 : $374;
    _memset(($pad$i|0),32,($376|0))|0;
    $377 = ($374>>>0)>(255);
    if ($377) {
     $$01$i58 = $374;
     while(1) {
      ___fwritex($pad$i,256,$f);
      $378 = (($$01$i58) + -256)|0;
      $379 = ($378>>>0)>(255);
      if ($379) {
       $$01$i58 = $378;
      } else {
       $$0$lcssa$i60 = $378;
       break;
      }
     }
    } else {
     $$0$lcssa$i60 = $374;
    }
    ___fwritex($pad$i,$$0$lcssa$i60,$f);
   }
   $380 = ($i$0167|0)==(0);
   L489: do {
    if (!($380)) {
     $i$1175 = 0;$ws$1176 = $1084;
     while(1) {
      $381 = HEAP32[$ws$1176>>2]|0;
      $382 = ($381|0)==(0);
      if ($382) {
       break L489;
      }
      $383 = (_wcrtomb($mb,$381)|0);
      $384 = (($383) + ($i$1175))|0;
      $385 = ($384|0)>($i$0167|0);
      if ($385) {
       break L489;
      }
      ___fwritex($mb,$383,$f);
      $386 = ($384>>>0)<($i$0167>>>0);
      if (!($386)) {
       break L489;
      }
      $387 = (($ws$1176) + 4|0);
      $i$1175 = $384;$ws$1176 = $387;
     }
    }
   } while(0);
   $388 = ($371|0)==(8192);
   $or$cond$i64 = $388 & $373;
   if ($or$cond$i64) {
    $389 = (($w$1) - ($i$0167))|0;
    $390 = ($389>>>0)>(256);
    $391 = $390 ? 256 : $389;
    _memset(($pad$i|0),32,($391|0))|0;
    $392 = ($389>>>0)>(255);
    if ($392) {
     $$01$i65 = $389;
     while(1) {
      ___fwritex($pad$i,256,$f);
      $393 = (($$01$i65) + -256)|0;
      $394 = ($393>>>0)>(255);
      if ($394) {
       $$01$i65 = $393;
      } else {
       $$0$lcssa$i67 = $393;
       break;
      }
     }
    } else {
     $$0$lcssa$i67 = $389;
    }
    ___fwritex($pad$i,$$0$lcssa$i67,$f);
   }
   $395 = $373 ? $w$1 : $i$0167;
   $1074 = $229;$1075 = $1085;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $395;$l10n$0 = $l10n$3;
   continue;
  }
  $974 = $z$2;
  $975 = $a$2;
  $976 = (($974) - ($975))|0;
  $977 = ($p$5|0)<($976|0);
  $$p$5 = $977 ? $976 : $p$5;
  $978 = (($pl$2) + ($$p$5))|0;
  $979 = ($w$1|0)<($978|0);
  $w$2 = $979 ? $978 : $w$1;
  $980 = $fl$6 & 73728;
  $981 = ($980|0)==(0);
  $982 = ($978|0)<($w$2|0);
  $or$cond$i75 = $981 & $982;
  if ($or$cond$i75) {
   $983 = (($w$2) - ($978))|0;
   $984 = ($983>>>0)>(256);
   $985 = $984 ? 256 : $983;
   _memset(($pad$i|0),32,($985|0))|0;
   $986 = ($983>>>0)>(255);
   if ($986) {
    $$01$i76 = $983;
    while(1) {
     ___fwritex($pad$i,256,$f);
     $987 = (($$01$i76) + -256)|0;
     $988 = ($987>>>0)>(255);
     if ($988) {
      $$01$i76 = $987;
     } else {
      $$0$lcssa$i78 = $987;
      break;
     }
    }
   } else {
    $$0$lcssa$i78 = $983;
   }
   ___fwritex($pad$i,$$0$lcssa$i78,$f);
  }
  ___fwritex($prefix$2,$pl$2,$f);
  $989 = ($980|0)==(65536);
  $or$cond$i50 = $989 & $982;
  if ($or$cond$i50) {
   $990 = (($w$2) - ($978))|0;
   $991 = ($990>>>0)>(256);
   $992 = $991 ? 256 : $990;
   _memset(($pad$i|0),48,($992|0))|0;
   $993 = ($990>>>0)>(255);
   if ($993) {
    $$01$i51 = $990;
    while(1) {
     ___fwritex($pad$i,256,$f);
     $994 = (($$01$i51) + -256)|0;
     $995 = ($994>>>0)>(255);
     if ($995) {
      $$01$i51 = $994;
     } else {
      $$0$lcssa$i53 = $994;
      break;
     }
    }
   } else {
    $$0$lcssa$i53 = $990;
   }
   ___fwritex($pad$i,$$0$lcssa$i53,$f);
  }
  $996 = ($976|0)<($$p$5|0);
  if ($996) {
   $997 = (($$p$5) - ($976))|0;
   $998 = ($997>>>0)>(256);
   $999 = $998 ? 256 : $997;
   _memset(($pad$i|0),48,($999|0))|0;
   $1000 = ($997>>>0)>(255);
   if ($1000) {
    $$01$i36 = $997;
    while(1) {
     ___fwritex($pad$i,256,$f);
     $1001 = (($$01$i36) + -256)|0;
     $1002 = ($1001>>>0)>(255);
     if ($1002) {
      $$01$i36 = $1001;
     } else {
      $$0$lcssa$i38 = $1001;
      break;
     }
    }
   } else {
    $$0$lcssa$i38 = $997;
   }
   ___fwritex($pad$i,$$0$lcssa$i38,$f);
  }
  ___fwritex($a$2,$976,$f);
  $1003 = ($980|0)==(8192);
  $or$cond$i = $1003 & $982;
  if (!($or$cond$i)) {
   $1074 = $1080;$1075 = $1081;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $w$2;$l10n$0 = $l10n$3;
   continue;
  }
  $1004 = (($w$2) - ($978))|0;
  $1005 = ($1004>>>0)>(256);
  $1006 = $1005 ? 256 : $1004;
  _memset(($pad$i|0),32,($1006|0))|0;
  $1007 = ($1004>>>0)>(255);
  if ($1007) {
   $$01$i = $1004;
   while(1) {
    ___fwritex($pad$i,256,$f);
    $1008 = (($$01$i) + -256)|0;
    $1009 = ($1008>>>0)>(255);
    if ($1009) {
     $$01$i = $1008;
    } else {
     $$0$lcssa$i = $1008;
     break;
    }
   }
  } else {
   $$0$lcssa$i = $1004;
  }
  ___fwritex($pad$i,$$0$lcssa$i,$f);
  $1074 = $1080;$1075 = $1081;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $w$2;$l10n$0 = $l10n$3;
 }
 if ((label|0) == 351) {
  $1010 = ($f|0)==(0|0);
  if (!($1010)) {
   $$0 = $cnt$1;
   STACKTOP = sp;return ($$0|0);
  }
  $1011 = ($l10n$0|0)==(0);
  if ($1011) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  } else {
   $i$291 = 1;
  }
  while(1) {
   $1012 = (($nl_type) + ($i$291<<2)|0);
   $1013 = HEAP32[$1012>>2]|0;
   $1014 = ($1013|0)==(0);
   if ($1014) {
    $1086 = 1;$i$390 = $i$291;
    break;
   }
   $1015 = (($nl_arg) + ($i$291<<3)|0);
   $1016 = ($1013>>>0)>(20);
   L540: do {
    if (!($1016)) {
     do {
      switch ($1013|0) {
      case 9:  {
       $arglist_current58 = HEAP32[$ap>>2]|0;
       $1017 = HEAP32[$arglist_current58>>2]|0;
       $arglist_next59 = (($arglist_current58) + 4|0);
       HEAP32[$ap>>2] = $arglist_next59;
       HEAP32[$1015>>2] = $1017;
       break L540;
       break;
      }
      case 10:  {
       $arglist_current61 = HEAP32[$ap>>2]|0;
       $1018 = HEAP32[$arglist_current61>>2]|0;
       $arglist_next62 = (($arglist_current61) + 4|0);
       HEAP32[$ap>>2] = $arglist_next62;
       $1019 = ($1018|0)<(0);
       $1020 = $1019 << 31 >> 31;
       $1021 = $1015;
       $1022 = $1021;
       HEAP32[$1022>>2] = $1018;
       $1023 = (($1021) + 4)|0;
       $1024 = $1023;
       HEAP32[$1024>>2] = $1020;
       break L540;
       break;
      }
      case 11:  {
       $arglist_current64 = HEAP32[$ap>>2]|0;
       $1025 = HEAP32[$arglist_current64>>2]|0;
       $arglist_next65 = (($arglist_current64) + 4|0);
       HEAP32[$ap>>2] = $arglist_next65;
       $1026 = $1015;
       $1027 = $1026;
       HEAP32[$1027>>2] = $1025;
       $1028 = (($1026) + 4)|0;
       $1029 = $1028;
       HEAP32[$1029>>2] = 0;
       break L540;
       break;
      }
      case 12:  {
       $arglist_current67 = HEAP32[$ap>>2]|0;
       $1030 = $arglist_current67;
       $1031 = $1030;
       $1032 = HEAP32[$1031>>2]|0;
       $1033 = (($1030) + 4)|0;
       $1034 = $1033;
       $1035 = HEAP32[$1034>>2]|0;
       $arglist_next68 = (($arglist_current67) + 8|0);
       HEAP32[$ap>>2] = $arglist_next68;
       $1036 = $1015;
       $1037 = $1036;
       HEAP32[$1037>>2] = $1032;
       $1038 = (($1036) + 4)|0;
       $1039 = $1038;
       HEAP32[$1039>>2] = $1035;
       break L540;
       break;
      }
      case 13:  {
       $arglist_current70 = HEAP32[$ap>>2]|0;
       $1040 = HEAP32[$arglist_current70>>2]|0;
       $arglist_next71 = (($arglist_current70) + 4|0);
       HEAP32[$ap>>2] = $arglist_next71;
       $1041 = $1040&65535;
       $1042 = $1041 << 16 >> 16;
       $1043 = ($1042|0)<(0);
       $1044 = $1043 << 31 >> 31;
       $1045 = $1015;
       $1046 = $1045;
       HEAP32[$1046>>2] = $1042;
       $1047 = (($1045) + 4)|0;
       $1048 = $1047;
       HEAP32[$1048>>2] = $1044;
       break L540;
       break;
      }
      case 14:  {
       $arglist_current73 = HEAP32[$ap>>2]|0;
       $1049 = HEAP32[$arglist_current73>>2]|0;
       $arglist_next74 = (($arglist_current73) + 4|0);
       HEAP32[$ap>>2] = $arglist_next74;
       $$mask1$i = $1049 & 65535;
       $1050 = $1015;
       $1051 = $1050;
       HEAP32[$1051>>2] = $$mask1$i;
       $1052 = (($1050) + 4)|0;
       $1053 = $1052;
       HEAP32[$1053>>2] = 0;
       break L540;
       break;
      }
      case 15:  {
       $arglist_current76 = HEAP32[$ap>>2]|0;
       $1054 = HEAP32[$arglist_current76>>2]|0;
       $arglist_next77 = (($arglist_current76) + 4|0);
       HEAP32[$ap>>2] = $arglist_next77;
       $1055 = $1054&255;
       $1056 = $1055 << 24 >> 24;
       $1057 = ($1056|0)<(0);
       $1058 = $1057 << 31 >> 31;
       $1059 = $1015;
       $1060 = $1059;
       HEAP32[$1060>>2] = $1056;
       $1061 = (($1059) + 4)|0;
       $1062 = $1061;
       HEAP32[$1062>>2] = $1058;
       break L540;
       break;
      }
      case 16:  {
       $arglist_current79 = HEAP32[$ap>>2]|0;
       $1063 = HEAP32[$arglist_current79>>2]|0;
       $arglist_next80 = (($arglist_current79) + 4|0);
       HEAP32[$ap>>2] = $arglist_next80;
       $$mask$i = $1063 & 255;
       $1064 = $1015;
       $1065 = $1064;
       HEAP32[$1065>>2] = $$mask$i;
       $1066 = (($1064) + 4)|0;
       $1067 = $1066;
       HEAP32[$1067>>2] = 0;
       break L540;
       break;
      }
      case 17:  {
       $arglist_current82 = HEAP32[$ap>>2]|0;
       HEAP32[tempDoublePtr>>2]=HEAP32[$arglist_current82>>2];HEAP32[tempDoublePtr+4>>2]=HEAP32[$arglist_current82+4>>2];$1068 = +HEAPF64[tempDoublePtr>>3];
       $arglist_next83 = (($arglist_current82) + 8|0);
       HEAP32[$ap>>2] = $arglist_next83;
       HEAPF64[$1015>>3] = $1068;
       break L540;
       break;
      }
      case 18:  {
       $arglist_current85 = HEAP32[$ap>>2]|0;
       HEAP32[tempDoublePtr>>2]=HEAP32[$arglist_current85>>2];HEAP32[tempDoublePtr+4>>2]=HEAP32[$arglist_current85+4>>2];$1069 = +HEAPF64[tempDoublePtr>>3];
       $arglist_next86 = (($arglist_current85) + 8|0);
       HEAP32[$ap>>2] = $arglist_next86;
       HEAPF64[$1015>>3] = $1069;
       break L540;
       break;
      }
      default: {
       break L540;
      }
      }
     } while(0);
    }
   } while(0);
   $1070 = (($i$291) + 1)|0;
   $1071 = ($1070|0)<(10);
   if ($1071) {
    $i$291 = $1070;
   } else {
    $$0 = 1;
    label = 370;
    break;
   }
  }
  if ((label|0) == 370) {
   STACKTOP = sp;return ($$0|0);
  }
  while(1) {
   $1073 = (($i$390) + 1)|0;
   if (!($1086)) {
    $$0 = -1;
    label = 370;
    break;
   }
   $1072 = ($1073|0)<(10);
   if (!($1072)) {
    $$0 = 1;
    label = 370;
    break;
   }
   $$phi$trans$insert = (($nl_type) + ($1073<<2)|0);
   $$pre21 = HEAP32[$$phi$trans$insert>>2]|0;
   $phitmp23 = ($$pre21|0)==(0);
   $1086 = $phitmp23;$i$390 = $1073;
  }
  if ((label|0) == 370) {
   STACKTOP = sp;return ($$0|0);
  }
 }
 else if ((label|0) == 370) {
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _vsnprintf($s,$n,$fmt,$ap) {
 $s = $s|0;
 $n = $n|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$$02 = 0, $$$i = 0, $$0 = 0, $$0$i = 0, $$01 = 0, $$02 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ap2$i = 0, $b = 0;
 var $f = 0, $internal_buf$i = 0, $nl_arg$i = 0, $nl_type$i = 0, $ret$1$i = 0, $vacopy_currentptr = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 336|0;
 $ap2$i = sp + 232|0;
 $nl_type$i = sp + 192|0;
 $nl_arg$i = sp;
 $internal_buf$i = sp + 256|0;
 $b = sp + 248|0;
 $f = sp + 80|0;
 dest=$f+0|0; src=16632+0|0; stop=dest+112|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $0 = (($n) + -1)|0;
 $1 = ($0>>>0)>(2147483646);
 if ($1) {
  $2 = ($n|0)==(0);
  if ($2) {
   $$01 = $b;$$02 = 1;
  } else {
   $3 = (___errno_location()|0);
   HEAP32[$3>>2] = 75;
   $$0 = -1;
   STACKTOP = sp;return ($$0|0);
  }
 } else {
  $$01 = $s;$$02 = $n;
 }
 $4 = $$01;
 $5 = (-2 - ($4))|0;
 $6 = ($$02>>>0)>($5>>>0);
 $$$02 = $6 ? $5 : $$02;
 $7 = (($f) + 48|0);
 HEAP32[$7>>2] = $$$02;
 $8 = (($f) + 20|0);
 HEAP32[$8>>2] = $$01;
 $9 = (($f) + 44|0);
 HEAP32[$9>>2] = $$01;
 $10 = (($$01) + ($$$02)|0);
 $11 = (($f) + 16|0);
 HEAP32[$11>>2] = $10;
 $12 = (($f) + 28|0);
 HEAP32[$12>>2] = $10;
 dest=$nl_type$i+0|0; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $vacopy_currentptr = HEAP32[$ap>>2]|0;
 HEAP32[$ap2$i>>2] = $vacopy_currentptr;
 $13 = (_printf_core(0,$fmt,$ap2$i,$nl_arg$i,$nl_type$i)|0);
 $14 = ($13|0)<(0);
 if ($14) {
  $$0$i = -1;
 } else {
  $15 = HEAP32[$7>>2]|0;
  $16 = ($15|0)==(0);
  if ($16) {
   $18 = HEAP32[$9>>2]|0;
   HEAP32[$9>>2] = $internal_buf$i;
   HEAP32[$12>>2] = $internal_buf$i;
   HEAP32[$8>>2] = $internal_buf$i;
   HEAP32[$7>>2] = 80;
   $19 = (($internal_buf$i) + 80|0);
   HEAP32[$11>>2] = $19;
   $20 = (_printf_core($f,$fmt,$ap2$i,$nl_arg$i,$nl_type$i)|0);
   $21 = ($18|0)==(0|0);
   if ($21) {
    $ret$1$i = $20;
   } else {
    $22 = (($f) + 36|0);
    $23 = HEAP32[$22>>2]|0;
    (FUNCTION_TABLE_iiii[$23 & 511]($f,0,0)|0);
    $24 = HEAP32[$8>>2]|0;
    $25 = ($24|0)==(0|0);
    $$$i = $25 ? -1 : $20;
    HEAP32[$9>>2] = $18;
    HEAP32[$7>>2] = 0;
    HEAP32[$11>>2] = 0;
    HEAP32[$12>>2] = 0;
    HEAP32[$8>>2] = 0;
    $ret$1$i = $$$i;
   }
  } else {
   $17 = (_printf_core($f,$fmt,$ap2$i,$nl_arg$i,$nl_type$i)|0);
   $ret$1$i = $17;
  }
  $$0$i = $ret$1$i;
 }
 $26 = ($$$02|0)==(0);
 if ($26) {
  $$0 = $$0$i;
  STACKTOP = sp;return ($$0|0);
 }
 $27 = HEAP32[$8>>2]|0;
 $28 = HEAP32[$11>>2]|0;
 $29 = ($27|0)==($28|0);
 $30 = $29 << 31 >> 31;
 $31 = (($27) + ($30)|0);
 HEAP8[$31>>0] = 0;
 $$0 = $$0$i;
 STACKTOP = sp;return ($$0|0);
}
function _sn_write($f,$s,$l) {
 $f = $f|0;
 $s = $s|0;
 $l = $l|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $l$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($f) + 20|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $1;
 $5 = $3;
 $6 = (($4) - ($5))|0;
 $7 = ($6>>>0)>($l>>>0);
 $l$ = $7 ? $l : $6;
 _memcpy(($3|0),($s|0),($l$|0))|0;
 $8 = HEAP32[$2>>2]|0;
 $9 = (($8) + ($l$)|0);
 HEAP32[$2>>2] = $9;
 STACKTOP = sp;return ($l|0);
}
function runPostSets() {
 HEAP32[836] = __ZTISt9exception;HEAP32[862] = __ZTISt9exception;HEAP32[3586] = __ZTISt9exception;HEAP32[3930] = __ZTISt9exception;
}
function _i64Subtract(a, b, c, d) {
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a - c)>>>0;
    h = (b - d)>>>0;
    h = (b - d - (((c>>>0) > (a>>>0))|0))>>>0; // Borrow one from high word to low word on underflow.
    return ((tempRet0 = h,l|0)|0);
}
function _i64Add(a, b, c, d) {
    /*
      x = a + b*2^32
      y = c + d*2^32
      result = l + h*2^32
    */
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a + c)>>>0;
    h = (b + d + (((l>>>0) < (a>>>0))|0))>>>0; // Add carry from low word to high word on overflow.
    return ((tempRet0 = h,l|0)|0);
}
function _bitshift64Lshr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >>> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = 0;
    return (high >>> (bits - 32))|0;
}
function _memcpy(dest, src, num) {

    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if ((num|0) >= 4096) return _emscripten_memcpy_big(dest|0, src|0, num|0)|0;
    ret = dest|0;
    if ((dest&3) == (src&3)) {
      while (dest & 3) {
        if ((num|0) == 0) return ret|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      while ((num|0) >= 4) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
        num = (num-4)|0;
      }
    }
    while ((num|0) > 0) {
      HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      dest = (dest+1)|0;
      src = (src+1)|0;
      num = (num-1)|0;
    }
    return ret|0;
}
function _memmove(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if (((src|0) < (dest|0)) & ((dest|0) < ((src + num)|0))) {
      // Unlikely case: Copy backwards in a safe manner
      ret = dest;
      src = (src + num)|0;
      dest = (dest + num)|0;
      while ((num|0) > 0) {
        dest = (dest - 1)|0;
        src = (src - 1)|0;
        num = (num - 1)|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      }
      dest = ret;
    } else {
      _memcpy(dest, src, num) | 0;
    }
    return dest | 0;
}
function _memset(ptr, value, num) {
    ptr = ptr|0; value = value|0; num = num|0;
    var stop = 0, value4 = 0, stop4 = 0, unaligned = 0;
    stop = (ptr + num)|0;
    if ((num|0) >= 20) {
      // This is unaligned, but quite large, so work hard to get to aligned settings
      value = value & 0xff;
      unaligned = ptr & 3;
      value4 = value | (value << 8) | (value << 16) | (value << 24);
      stop4 = stop & ~3;
      if (unaligned) {
        unaligned = (ptr + 4 - unaligned)|0;
        while ((ptr|0) < (unaligned|0)) { // no need to check for stop, since we have large num
          HEAP8[((ptr)>>0)]=value;
          ptr = (ptr+1)|0;
        }
      }
      while ((ptr|0) < (stop4|0)) {
        HEAP32[((ptr)>>2)]=value4;
        ptr = (ptr+4)|0;
      }
    }
    while ((ptr|0) < (stop|0)) {
      HEAP8[((ptr)>>0)]=value;
      ptr = (ptr+1)|0;
    }
    return (ptr-num)|0;
}
function _bitshift64Shl(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = (high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits));
      return low << bits;
    }
    tempRet0 = low << (bits - 32);
    return 0;
}
function _strlen(ptr) {
    ptr = ptr|0;
    var curr = 0;
    curr = ptr;
    while (((HEAP8[((curr)>>0)])|0)) {
      curr = (curr + 1)|0;
    }
    return (curr - ptr)|0;
}
function _bitshift64Ashr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = (high|0) < 0 ? -1 : 0;
    return (high >> (bits - 32))|0;
  }
function _llvm_ctlz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = ((HEAP8[(((ctlz_i8)+(x >>> 24))>>0)])|0);
    if ((ret|0) < 8) return ret|0;
    ret = ((HEAP8[(((ctlz_i8)+((x >> 16)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 8)|0;
    ret = ((HEAP8[(((ctlz_i8)+((x >> 8)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 16)|0;
    return (((HEAP8[(((ctlz_i8)+(x&0xff))>>0)])|0) + 24)|0;
  }

function _llvm_cttz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = ((HEAP8[(((cttz_i8)+(x & 0xff))>>0)])|0);
    if ((ret|0) < 8) return ret|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 8)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 8)|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 16)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 16)|0;
    return (((HEAP8[(((cttz_i8)+(x >>> 24))>>0)])|0) + 24)|0;
  }

// ======== compiled code from system/lib/compiler-rt , see readme therein
function ___muldsi3($a, $b) {
  $a = $a | 0;
  $b = $b | 0;
  var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
  $1 = $a & 65535;
  $2 = $b & 65535;
  $3 = Math_imul($2, $1) | 0;
  $6 = $a >>> 16;
  $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0;
  $11 = $b >>> 16;
  $12 = Math_imul($11, $1) | 0;
  return (tempRet0 = (($8 >>> 16) + (Math_imul($11, $6) | 0) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0, 0 | ($8 + $12 << 16 | $3 & 65535)) | 0;
}
function ___divdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $7$0 = 0, $7$1 = 0, $8$0 = 0, $10$0 = 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
  $7$0 = $2$0 ^ $1$0;
  $7$1 = $2$1 ^ $1$1;
  $8$0 = ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, 0) | 0;
  $10$0 = _i64Subtract($8$0 ^ $7$0, tempRet0 ^ $7$1, $7$0, $7$1) | 0;
  return (tempRet0 = tempRet0, $10$0) | 0;
}
function ___remdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $10$0 = 0, $10$1 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  $rem = __stackBase__ | 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
  ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, $rem) | 0;
  $10$0 = _i64Subtract(HEAP32[$rem >> 2] ^ $1$0, HEAP32[$rem + 4 >> 2] ^ $1$1, $1$0, $1$1) | 0;
  $10$1 = tempRet0;
  STACKTOP = __stackBase__;
  return (tempRet0 = $10$1, $10$0) | 0;
}
function ___muldi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0, $2 = 0;
  $x_sroa_0_0_extract_trunc = $a$0;
  $y_sroa_0_0_extract_trunc = $b$0;
  $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
  $1$1 = tempRet0;
  $2 = Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0;
  return (tempRet0 = ((Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $2 | 0) + $1$1 | $1$1 & 0, 0 | $1$0 & -1) | 0;
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0;
  $1$0 = ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
  return (tempRet0 = tempRet0, $1$0) | 0;
}
function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  $rem = __stackBase__ | 0;
  ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0;
  STACKTOP = __stackBase__;
  return (tempRet0 = HEAP32[$rem + 4 >> 2] | 0, HEAP32[$rem >> 2] | 0) | 0;
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  $rem = $rem | 0;
  var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $49 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $86 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $117 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $147 = 0, $149 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $152 = 0, $154$0 = 0, $r_sroa_0_0_extract_trunc = 0, $r_sroa_1_4_extract_trunc = 0, $155 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $q_sroa_0_0_insert_insert77$1 = 0, $_0$0 = 0, $_0$1 = 0;
  $n_sroa_0_0_extract_trunc = $a$0;
  $n_sroa_1_4_extract_shift$0 = $a$1;
  $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
  $d_sroa_0_0_extract_trunc = $b$0;
  $d_sroa_1_4_extract_shift$0 = $b$1;
  $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
  if (($n_sroa_1_4_extract_trunc | 0) == 0) {
    $4 = ($rem | 0) != 0;
    if (($d_sroa_1_4_extract_trunc | 0) == 0) {
      if ($4) {
        HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
        HEAP32[$rem + 4 >> 2] = 0;
      }
      $_0$1 = 0;
      $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$4) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    }
  }
  $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
  do {
    if (($d_sroa_0_0_extract_trunc | 0) == 0) {
      if ($17) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
          HEAP32[$rem + 4 >> 2] = 0;
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      if (($n_sroa_0_0_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0;
          HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
      if (($37 & $d_sroa_1_4_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0 | $a$0 & -1;
          HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
        }
        $_0$1 = 0;
        $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $49 = _llvm_ctlz_i32($d_sroa_1_4_extract_trunc | 0) | 0;
      $51 = $49 - (_llvm_ctlz_i32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
      if ($51 >>> 0 <= 30) {
        $57 = $51 + 1 | 0;
        $58 = 31 - $51 | 0;
        $sr_1_ph = $57;
        $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
        $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
        $q_sroa_0_1_ph = 0;
        $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
        break;
      }
      if (($rem | 0) == 0) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = 0 | $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$17) {
        $117 = _llvm_ctlz_i32($d_sroa_1_4_extract_trunc | 0) | 0;
        $119 = $117 - (_llvm_ctlz_i32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        if ($119 >>> 0 <= 31) {
          $125 = $119 + 1 | 0;
          $126 = 31 - $119 | 0;
          $130 = $119 - 31 >> 31;
          $sr_1_ph = $125;
          $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
          $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
          $q_sroa_0_1_ph = 0;
          $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
          break;
        }
        if (($rem | 0) == 0) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = 0 | $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
      if (($66 & $d_sroa_0_0_extract_trunc | 0) != 0) {
        $86 = (_llvm_ctlz_i32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 | 0;
        $88 = $86 - (_llvm_ctlz_i32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        $89 = 64 - $88 | 0;
        $91 = 32 - $88 | 0;
        $92 = $91 >> 31;
        $95 = $88 - 32 | 0;
        $105 = $95 >> 31;
        $sr_1_ph = $88;
        $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
        $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
        $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
        $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
        break;
      }
      if (($rem | 0) != 0) {
        HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
        HEAP32[$rem + 4 >> 2] = 0;
      }
      if (($d_sroa_0_0_extract_trunc | 0) == 1) {
        $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$0 = 0 | $a$0 & -1;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
        $_0$1 = 0 | $n_sroa_1_4_extract_trunc >>> ($78 >>> 0);
        $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
    }
  } while (0);
  if (($sr_1_ph | 0) == 0) {
    $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
    $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
    $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
    $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = 0;
  } else {
    $d_sroa_0_0_insert_insert99$0 = 0 | $b$0 & -1;
    $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
    $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0, $d_sroa_0_0_insert_insert99$1, -1, -1) | 0;
    $137$1 = tempRet0;
    $q_sroa_1_1198 = $q_sroa_1_1_ph;
    $q_sroa_0_1199 = $q_sroa_0_1_ph;
    $r_sroa_1_1200 = $r_sroa_1_1_ph;
    $r_sroa_0_1201 = $r_sroa_0_1_ph;
    $sr_1202 = $sr_1_ph;
    $carry_0203 = 0;
    while (1) {
      $147 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
      $149 = $carry_0203 | $q_sroa_0_1199 << 1;
      $r_sroa_0_0_insert_insert42$0 = 0 | ($r_sroa_0_1201 << 1 | $q_sroa_1_1198 >>> 31);
      $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
      _i64Subtract($137$0, $137$1, $r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1) | 0;
      $150$1 = tempRet0;
      $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
      $152 = $151$0 & 1;
      $154$0 = _i64Subtract($r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1, $151$0 & $d_sroa_0_0_insert_insert99$0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1) | 0;
      $r_sroa_0_0_extract_trunc = $154$0;
      $r_sroa_1_4_extract_trunc = tempRet0;
      $155 = $sr_1202 - 1 | 0;
      if (($155 | 0) == 0) {
        break;
      } else {
        $q_sroa_1_1198 = $147;
        $q_sroa_0_1199 = $149;
        $r_sroa_1_1200 = $r_sroa_1_4_extract_trunc;
        $r_sroa_0_1201 = $r_sroa_0_0_extract_trunc;
        $sr_1202 = $155;
        $carry_0203 = $152;
      }
    }
    $q_sroa_1_1_lcssa = $147;
    $q_sroa_0_1_lcssa = $149;
    $r_sroa_1_1_lcssa = $r_sroa_1_4_extract_trunc;
    $r_sroa_0_1_lcssa = $r_sroa_0_0_extract_trunc;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = $152;
  }
  $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
  $q_sroa_0_0_insert_ext75$1 = 0;
  $q_sroa_0_0_insert_insert77$1 = $q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1;
  if (($rem | 0) != 0) {
    HEAP32[$rem >> 2] = 0 | $r_sroa_0_1_lcssa;
    HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa | 0;
  }
  $_0$1 = (0 | $q_sroa_0_0_insert_ext75$0) >>> 31 | $q_sroa_0_0_insert_insert77$1 << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
  $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
  return (tempRet0 = $_0$1, $_0$0) | 0;
}
// =======================================================================



// EMSCRIPTEN_END_FUNCS

    
    function dynCall_iiiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
      index = index|0;
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0;
      return FUNCTION_TABLE_iiiiiiii[index&511](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0)|0;
    }
  

    function jsCall_iiiiiiii_0(a1,a2,a3,a4,a5,a6,a7) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0;
      return jsCall(0,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0)|0;
    }

  

    function jsCall_iiiiiiii_1(a1,a2,a3,a4,a5,a6,a7) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0;
      return jsCall(1,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0)|0;
    }

  

    function jsCall_iiiiiiii_2(a1,a2,a3,a4,a5,a6,a7) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0;
      return jsCall(2,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0)|0;
    }

  

    function jsCall_iiiiiiii_3(a1,a2,a3,a4,a5,a6,a7) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0;
      return jsCall(3,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0)|0;
    }

  

    function jsCall_iiiiiiii_4(a1,a2,a3,a4,a5,a6,a7) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0;
      return jsCall(4,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0)|0;
    }

  

    function jsCall_iiiiiiii_5(a1,a2,a3,a4,a5,a6,a7) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0;
      return jsCall(5,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0)|0;
    }

  

    function jsCall_iiiiiiii_6(a1,a2,a3,a4,a5,a6,a7) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0;
      return jsCall(6,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0)|0;
    }

  

    function jsCall_iiiiiiii_7(a1,a2,a3,a4,a5,a6,a7) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0;
      return jsCall(7,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0)|0;
    }

  

    function jsCall_iiiiiiii_8(a1,a2,a3,a4,a5,a6,a7) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0;
      return jsCall(8,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0)|0;
    }

  

    function jsCall_iiiiiiii_9(a1,a2,a3,a4,a5,a6,a7) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0;
      return jsCall(9,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0)|0;
    }

  

    function dynCall_viiiii(index,a1,a2,a3,a4,a5) {
      index = index|0;
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
      FUNCTION_TABLE_viiiii[index&511](a1|0,a2|0,a3|0,a4|0,a5|0);
    }
  

    function jsCall_viiiii_0(a1,a2,a3,a4,a5) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
      jsCall(0,a1|0,a2|0,a3|0,a4|0,a5|0);
    }

  

    function jsCall_viiiii_1(a1,a2,a3,a4,a5) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
      jsCall(1,a1|0,a2|0,a3|0,a4|0,a5|0);
    }

  

    function jsCall_viiiii_2(a1,a2,a3,a4,a5) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
      jsCall(2,a1|0,a2|0,a3|0,a4|0,a5|0);
    }

  

    function jsCall_viiiii_3(a1,a2,a3,a4,a5) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
      jsCall(3,a1|0,a2|0,a3|0,a4|0,a5|0);
    }

  

    function jsCall_viiiii_4(a1,a2,a3,a4,a5) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
      jsCall(4,a1|0,a2|0,a3|0,a4|0,a5|0);
    }

  

    function jsCall_viiiii_5(a1,a2,a3,a4,a5) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
      jsCall(5,a1|0,a2|0,a3|0,a4|0,a5|0);
    }

  

    function jsCall_viiiii_6(a1,a2,a3,a4,a5) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
      jsCall(6,a1|0,a2|0,a3|0,a4|0,a5|0);
    }

  

    function jsCall_viiiii_7(a1,a2,a3,a4,a5) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
      jsCall(7,a1|0,a2|0,a3|0,a4|0,a5|0);
    }

  

    function jsCall_viiiii_8(a1,a2,a3,a4,a5) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
      jsCall(8,a1|0,a2|0,a3|0,a4|0,a5|0);
    }

  

    function jsCall_viiiii_9(a1,a2,a3,a4,a5) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
      jsCall(9,a1|0,a2|0,a3|0,a4|0,a5|0);
    }

  

    function dynCall_vid(index,a1,a2) {
      index = index|0;
      a1=a1|0; a2=+a2;
      FUNCTION_TABLE_vid[index&511](a1|0,+a2);
    }
  

    function jsCall_vid_0(a1,a2) {
      a1=a1|0; a2=+a2;
      jsCall(0,a1|0,+a2);
    }

  

    function jsCall_vid_1(a1,a2) {
      a1=a1|0; a2=+a2;
      jsCall(1,a1|0,+a2);
    }

  

    function jsCall_vid_2(a1,a2) {
      a1=a1|0; a2=+a2;
      jsCall(2,a1|0,+a2);
    }

  

    function jsCall_vid_3(a1,a2) {
      a1=a1|0; a2=+a2;
      jsCall(3,a1|0,+a2);
    }

  

    function jsCall_vid_4(a1,a2) {
      a1=a1|0; a2=+a2;
      jsCall(4,a1|0,+a2);
    }

  

    function jsCall_vid_5(a1,a2) {
      a1=a1|0; a2=+a2;
      jsCall(5,a1|0,+a2);
    }

  

    function jsCall_vid_6(a1,a2) {
      a1=a1|0; a2=+a2;
      jsCall(6,a1|0,+a2);
    }

  

    function jsCall_vid_7(a1,a2) {
      a1=a1|0; a2=+a2;
      jsCall(7,a1|0,+a2);
    }

  

    function jsCall_vid_8(a1,a2) {
      a1=a1|0; a2=+a2;
      jsCall(8,a1|0,+a2);
    }

  

    function jsCall_vid_9(a1,a2) {
      a1=a1|0; a2=+a2;
      jsCall(9,a1|0,+a2);
    }

  

    function dynCall_vi(index,a1) {
      index = index|0;
      a1=a1|0;
      FUNCTION_TABLE_vi[index&511](a1|0);
    }
  

    function jsCall_vi_0(a1) {
      a1=a1|0;
      jsCall(0,a1|0);
    }

  

    function jsCall_vi_1(a1) {
      a1=a1|0;
      jsCall(1,a1|0);
    }

  

    function jsCall_vi_2(a1) {
      a1=a1|0;
      jsCall(2,a1|0);
    }

  

    function jsCall_vi_3(a1) {
      a1=a1|0;
      jsCall(3,a1|0);
    }

  

    function jsCall_vi_4(a1) {
      a1=a1|0;
      jsCall(4,a1|0);
    }

  

    function jsCall_vi_5(a1) {
      a1=a1|0;
      jsCall(5,a1|0);
    }

  

    function jsCall_vi_6(a1) {
      a1=a1|0;
      jsCall(6,a1|0);
    }

  

    function jsCall_vi_7(a1) {
      a1=a1|0;
      jsCall(7,a1|0);
    }

  

    function jsCall_vi_8(a1) {
      a1=a1|0;
      jsCall(8,a1|0);
    }

  

    function jsCall_vi_9(a1) {
      a1=a1|0;
      jsCall(9,a1|0);
    }

  

    function dynCall_vii(index,a1,a2) {
      index = index|0;
      a1=a1|0; a2=a2|0;
      FUNCTION_TABLE_vii[index&511](a1|0,a2|0);
    }
  

    function jsCall_vii_0(a1,a2) {
      a1=a1|0; a2=a2|0;
      jsCall(0,a1|0,a2|0);
    }

  

    function jsCall_vii_1(a1,a2) {
      a1=a1|0; a2=a2|0;
      jsCall(1,a1|0,a2|0);
    }

  

    function jsCall_vii_2(a1,a2) {
      a1=a1|0; a2=a2|0;
      jsCall(2,a1|0,a2|0);
    }

  

    function jsCall_vii_3(a1,a2) {
      a1=a1|0; a2=a2|0;
      jsCall(3,a1|0,a2|0);
    }

  

    function jsCall_vii_4(a1,a2) {
      a1=a1|0; a2=a2|0;
      jsCall(4,a1|0,a2|0);
    }

  

    function jsCall_vii_5(a1,a2) {
      a1=a1|0; a2=a2|0;
      jsCall(5,a1|0,a2|0);
    }

  

    function jsCall_vii_6(a1,a2) {
      a1=a1|0; a2=a2|0;
      jsCall(6,a1|0,a2|0);
    }

  

    function jsCall_vii_7(a1,a2) {
      a1=a1|0; a2=a2|0;
      jsCall(7,a1|0,a2|0);
    }

  

    function jsCall_vii_8(a1,a2) {
      a1=a1|0; a2=a2|0;
      jsCall(8,a1|0,a2|0);
    }

  

    function jsCall_vii_9(a1,a2) {
      a1=a1|0; a2=a2|0;
      jsCall(9,a1|0,a2|0);
    }

  

    function dynCall_ii(index,a1) {
      index = index|0;
      a1=a1|0;
      return FUNCTION_TABLE_ii[index&511](a1|0)|0;
    }
  

    function jsCall_ii_0(a1) {
      a1=a1|0;
      return jsCall(0,a1|0)|0;
    }

  

    function jsCall_ii_1(a1) {
      a1=a1|0;
      return jsCall(1,a1|0)|0;
    }

  

    function jsCall_ii_2(a1) {
      a1=a1|0;
      return jsCall(2,a1|0)|0;
    }

  

    function jsCall_ii_3(a1) {
      a1=a1|0;
      return jsCall(3,a1|0)|0;
    }

  

    function jsCall_ii_4(a1) {
      a1=a1|0;
      return jsCall(4,a1|0)|0;
    }

  

    function jsCall_ii_5(a1) {
      a1=a1|0;
      return jsCall(5,a1|0)|0;
    }

  

    function jsCall_ii_6(a1) {
      a1=a1|0;
      return jsCall(6,a1|0)|0;
    }

  

    function jsCall_ii_7(a1) {
      a1=a1|0;
      return jsCall(7,a1|0)|0;
    }

  

    function jsCall_ii_8(a1) {
      a1=a1|0;
      return jsCall(8,a1|0)|0;
    }

  

    function jsCall_ii_9(a1) {
      a1=a1|0;
      return jsCall(9,a1|0)|0;
    }

  

    function dynCall_iidd(index,a1,a2,a3) {
      index = index|0;
      a1=a1|0; a2=+a2; a3=+a3;
      return FUNCTION_TABLE_iidd[index&511](a1|0,+a2,+a3)|0;
    }
  

    function jsCall_iidd_0(a1,a2,a3) {
      a1=a1|0; a2=+a2; a3=+a3;
      return jsCall(0,a1|0,+a2,+a3)|0;
    }

  

    function jsCall_iidd_1(a1,a2,a3) {
      a1=a1|0; a2=+a2; a3=+a3;
      return jsCall(1,a1|0,+a2,+a3)|0;
    }

  

    function jsCall_iidd_2(a1,a2,a3) {
      a1=a1|0; a2=+a2; a3=+a3;
      return jsCall(2,a1|0,+a2,+a3)|0;
    }

  

    function jsCall_iidd_3(a1,a2,a3) {
      a1=a1|0; a2=+a2; a3=+a3;
      return jsCall(3,a1|0,+a2,+a3)|0;
    }

  

    function jsCall_iidd_4(a1,a2,a3) {
      a1=a1|0; a2=+a2; a3=+a3;
      return jsCall(4,a1|0,+a2,+a3)|0;
    }

  

    function jsCall_iidd_5(a1,a2,a3) {
      a1=a1|0; a2=+a2; a3=+a3;
      return jsCall(5,a1|0,+a2,+a3)|0;
    }

  

    function jsCall_iidd_6(a1,a2,a3) {
      a1=a1|0; a2=+a2; a3=+a3;
      return jsCall(6,a1|0,+a2,+a3)|0;
    }

  

    function jsCall_iidd_7(a1,a2,a3) {
      a1=a1|0; a2=+a2; a3=+a3;
      return jsCall(7,a1|0,+a2,+a3)|0;
    }

  

    function jsCall_iidd_8(a1,a2,a3) {
      a1=a1|0; a2=+a2; a3=+a3;
      return jsCall(8,a1|0,+a2,+a3)|0;
    }

  

    function jsCall_iidd_9(a1,a2,a3) {
      a1=a1|0; a2=+a2; a3=+a3;
      return jsCall(9,a1|0,+a2,+a3)|0;
    }

  

    function dynCall_iiiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11) {
      index = index|0;
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0; a10=a10|0; a11=a11|0;
      return FUNCTION_TABLE_iiiiiiiiiiii[index&511](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0,a10|0,a11|0)|0;
    }
  

    function jsCall_iiiiiiiiiiii_0(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0; a10=a10|0; a11=a11|0;
      return jsCall(0,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0,a10|0,a11|0)|0;
    }

  

    function jsCall_iiiiiiiiiiii_1(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0; a10=a10|0; a11=a11|0;
      return jsCall(1,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0,a10|0,a11|0)|0;
    }

  

    function jsCall_iiiiiiiiiiii_2(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0; a10=a10|0; a11=a11|0;
      return jsCall(2,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0,a10|0,a11|0)|0;
    }

  

    function jsCall_iiiiiiiiiiii_3(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0; a10=a10|0; a11=a11|0;
      return jsCall(3,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0,a10|0,a11|0)|0;
    }

  

    function jsCall_iiiiiiiiiiii_4(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0; a10=a10|0; a11=a11|0;
      return jsCall(4,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0,a10|0,a11|0)|0;
    }

  

    function jsCall_iiiiiiiiiiii_5(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0; a10=a10|0; a11=a11|0;
      return jsCall(5,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0,a10|0,a11|0)|0;
    }

  

    function jsCall_iiiiiiiiiiii_6(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0; a10=a10|0; a11=a11|0;
      return jsCall(6,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0,a10|0,a11|0)|0;
    }

  

    function jsCall_iiiiiiiiiiii_7(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0; a10=a10|0; a11=a11|0;
      return jsCall(7,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0,a10|0,a11|0)|0;
    }

  

    function jsCall_iiiiiiiiiiii_8(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0; a10=a10|0; a11=a11|0;
      return jsCall(8,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0,a10|0,a11|0)|0;
    }

  

    function jsCall_iiiiiiiiiiii_9(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0; a10=a10|0; a11=a11|0;
      return jsCall(9,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0,a10|0,a11|0)|0;
    }

  

    function dynCall_iiii(index,a1,a2,a3) {
      index = index|0;
      a1=a1|0; a2=a2|0; a3=a3|0;
      return FUNCTION_TABLE_iiii[index&511](a1|0,a2|0,a3|0)|0;
    }
  

    function jsCall_iiii_0(a1,a2,a3) {
      a1=a1|0; a2=a2|0; a3=a3|0;
      return jsCall(0,a1|0,a2|0,a3|0)|0;
    }

  

    function jsCall_iiii_1(a1,a2,a3) {
      a1=a1|0; a2=a2|0; a3=a3|0;
      return jsCall(1,a1|0,a2|0,a3|0)|0;
    }

  

    function jsCall_iiii_2(a1,a2,a3) {
      a1=a1|0; a2=a2|0; a3=a3|0;
      return jsCall(2,a1|0,a2|0,a3|0)|0;
    }

  

    function jsCall_iiii_3(a1,a2,a3) {
      a1=a1|0; a2=a2|0; a3=a3|0;
      return jsCall(3,a1|0,a2|0,a3|0)|0;
    }

  

    function jsCall_iiii_4(a1,a2,a3) {
      a1=a1|0; a2=a2|0; a3=a3|0;
      return jsCall(4,a1|0,a2|0,a3|0)|0;
    }

  

    function jsCall_iiii_5(a1,a2,a3) {
      a1=a1|0; a2=a2|0; a3=a3|0;
      return jsCall(5,a1|0,a2|0,a3|0)|0;
    }

  

    function jsCall_iiii_6(a1,a2,a3) {
      a1=a1|0; a2=a2|0; a3=a3|0;
      return jsCall(6,a1|0,a2|0,a3|0)|0;
    }

  

    function jsCall_iiii_7(a1,a2,a3) {
      a1=a1|0; a2=a2|0; a3=a3|0;
      return jsCall(7,a1|0,a2|0,a3|0)|0;
    }

  

    function jsCall_iiii_8(a1,a2,a3) {
      a1=a1|0; a2=a2|0; a3=a3|0;
      return jsCall(8,a1|0,a2|0,a3|0)|0;
    }

  

    function jsCall_iiii_9(a1,a2,a3) {
      a1=a1|0; a2=a2|0; a3=a3|0;
      return jsCall(9,a1|0,a2|0,a3|0)|0;
    }

  

    function dynCall_viiiiiiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15) {
      index = index|0;
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0; a10=a10|0; a11=a11|0; a12=a12|0; a13=a13|0; a14=a14|0; a15=a15|0;
      FUNCTION_TABLE_viiiiiiiiiiiiiii[index&511](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0,a10|0,a11|0,a12|0,a13|0,a14|0,a15|0);
    }
  

    function jsCall_viiiiiiiiiiiiiii_0(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0; a10=a10|0; a11=a11|0; a12=a12|0; a13=a13|0; a14=a14|0; a15=a15|0;
      jsCall(0,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0,a10|0,a11|0,a12|0,a13|0,a14|0,a15|0);
    }

  

    function jsCall_viiiiiiiiiiiiiii_1(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0; a10=a10|0; a11=a11|0; a12=a12|0; a13=a13|0; a14=a14|0; a15=a15|0;
      jsCall(1,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0,a10|0,a11|0,a12|0,a13|0,a14|0,a15|0);
    }

  

    function jsCall_viiiiiiiiiiiiiii_2(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0; a10=a10|0; a11=a11|0; a12=a12|0; a13=a13|0; a14=a14|0; a15=a15|0;
      jsCall(2,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0,a10|0,a11|0,a12|0,a13|0,a14|0,a15|0);
    }

  

    function jsCall_viiiiiiiiiiiiiii_3(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0; a10=a10|0; a11=a11|0; a12=a12|0; a13=a13|0; a14=a14|0; a15=a15|0;
      jsCall(3,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0,a10|0,a11|0,a12|0,a13|0,a14|0,a15|0);
    }

  

    function jsCall_viiiiiiiiiiiiiii_4(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0; a10=a10|0; a11=a11|0; a12=a12|0; a13=a13|0; a14=a14|0; a15=a15|0;
      jsCall(4,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0,a10|0,a11|0,a12|0,a13|0,a14|0,a15|0);
    }

  

    function jsCall_viiiiiiiiiiiiiii_5(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0; a10=a10|0; a11=a11|0; a12=a12|0; a13=a13|0; a14=a14|0; a15=a15|0;
      jsCall(5,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0,a10|0,a11|0,a12|0,a13|0,a14|0,a15|0);
    }

  

    function jsCall_viiiiiiiiiiiiiii_6(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0; a10=a10|0; a11=a11|0; a12=a12|0; a13=a13|0; a14=a14|0; a15=a15|0;
      jsCall(6,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0,a10|0,a11|0,a12|0,a13|0,a14|0,a15|0);
    }

  

    function jsCall_viiiiiiiiiiiiiii_7(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0; a10=a10|0; a11=a11|0; a12=a12|0; a13=a13|0; a14=a14|0; a15=a15|0;
      jsCall(7,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0,a10|0,a11|0,a12|0,a13|0,a14|0,a15|0);
    }

  

    function jsCall_viiiiiiiiiiiiiii_8(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0; a10=a10|0; a11=a11|0; a12=a12|0; a13=a13|0; a14=a14|0; a15=a15|0;
      jsCall(8,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0,a10|0,a11|0,a12|0,a13|0,a14|0,a15|0);
    }

  

    function jsCall_viiiiiiiiiiiiiii_9(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0; a10=a10|0; a11=a11|0; a12=a12|0; a13=a13|0; a14=a14|0; a15=a15|0;
      jsCall(9,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0,a10|0,a11|0,a12|0,a13|0,a14|0,a15|0);
    }

  

    function dynCall_viiiiid(index,a1,a2,a3,a4,a5,a6) {
      index = index|0;
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=+a6;
      FUNCTION_TABLE_viiiiid[index&255](a1|0,a2|0,a3|0,a4|0,a5|0,+a6);
    }
  

    function jsCall_viiiiid_0(a1,a2,a3,a4,a5,a6) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=+a6;
      jsCall(0,a1|0,a2|0,a3|0,a4|0,a5|0,+a6);
    }

  

    function jsCall_viiiiid_1(a1,a2,a3,a4,a5,a6) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=+a6;
      jsCall(1,a1|0,a2|0,a3|0,a4|0,a5|0,+a6);
    }

  

    function jsCall_viiiiid_2(a1,a2,a3,a4,a5,a6) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=+a6;
      jsCall(2,a1|0,a2|0,a3|0,a4|0,a5|0,+a6);
    }

  

    function jsCall_viiiiid_3(a1,a2,a3,a4,a5,a6) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=+a6;
      jsCall(3,a1|0,a2|0,a3|0,a4|0,a5|0,+a6);
    }

  

    function jsCall_viiiiid_4(a1,a2,a3,a4,a5,a6) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=+a6;
      jsCall(4,a1|0,a2|0,a3|0,a4|0,a5|0,+a6);
    }

  

    function jsCall_viiiiid_5(a1,a2,a3,a4,a5,a6) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=+a6;
      jsCall(5,a1|0,a2|0,a3|0,a4|0,a5|0,+a6);
    }

  

    function jsCall_viiiiid_6(a1,a2,a3,a4,a5,a6) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=+a6;
      jsCall(6,a1|0,a2|0,a3|0,a4|0,a5|0,+a6);
    }

  

    function jsCall_viiiiid_7(a1,a2,a3,a4,a5,a6) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=+a6;
      jsCall(7,a1|0,a2|0,a3|0,a4|0,a5|0,+a6);
    }

  

    function jsCall_viiiiid_8(a1,a2,a3,a4,a5,a6) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=+a6;
      jsCall(8,a1|0,a2|0,a3|0,a4|0,a5|0,+a6);
    }

  

    function jsCall_viiiiid_9(a1,a2,a3,a4,a5,a6) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=+a6;
      jsCall(9,a1|0,a2|0,a3|0,a4|0,a5|0,+a6);
    }

  

    function dynCall_viiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8) {
      index = index|0;
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0;
      FUNCTION_TABLE_viiiiiiii[index&511](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0);
    }
  

    function jsCall_viiiiiiii_0(a1,a2,a3,a4,a5,a6,a7,a8) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0;
      jsCall(0,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0);
    }

  

    function jsCall_viiiiiiii_1(a1,a2,a3,a4,a5,a6,a7,a8) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0;
      jsCall(1,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0);
    }

  

    function jsCall_viiiiiiii_2(a1,a2,a3,a4,a5,a6,a7,a8) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0;
      jsCall(2,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0);
    }

  

    function jsCall_viiiiiiii_3(a1,a2,a3,a4,a5,a6,a7,a8) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0;
      jsCall(3,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0);
    }

  

    function jsCall_viiiiiiii_4(a1,a2,a3,a4,a5,a6,a7,a8) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0;
      jsCall(4,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0);
    }

  

    function jsCall_viiiiiiii_5(a1,a2,a3,a4,a5,a6,a7,a8) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0;
      jsCall(5,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0);
    }

  

    function jsCall_viiiiiiii_6(a1,a2,a3,a4,a5,a6,a7,a8) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0;
      jsCall(6,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0);
    }

  

    function jsCall_viiiiiiii_7(a1,a2,a3,a4,a5,a6,a7,a8) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0;
      jsCall(7,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0);
    }

  

    function jsCall_viiiiiiii_8(a1,a2,a3,a4,a5,a6,a7,a8) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0;
      jsCall(8,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0);
    }

  

    function jsCall_viiiiiiii_9(a1,a2,a3,a4,a5,a6,a7,a8) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0;
      jsCall(9,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0);
    }

  

    function dynCall_viiiiii(index,a1,a2,a3,a4,a5,a6) {
      index = index|0;
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
      FUNCTION_TABLE_viiiiii[index&511](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0);
    }
  

    function jsCall_viiiiii_0(a1,a2,a3,a4,a5,a6) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
      jsCall(0,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0);
    }

  

    function jsCall_viiiiii_1(a1,a2,a3,a4,a5,a6) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
      jsCall(1,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0);
    }

  

    function jsCall_viiiiii_2(a1,a2,a3,a4,a5,a6) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
      jsCall(2,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0);
    }

  

    function jsCall_viiiiii_3(a1,a2,a3,a4,a5,a6) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
      jsCall(3,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0);
    }

  

    function jsCall_viiiiii_4(a1,a2,a3,a4,a5,a6) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
      jsCall(4,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0);
    }

  

    function jsCall_viiiiii_5(a1,a2,a3,a4,a5,a6) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
      jsCall(5,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0);
    }

  

    function jsCall_viiiiii_6(a1,a2,a3,a4,a5,a6) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
      jsCall(6,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0);
    }

  

    function jsCall_viiiiii_7(a1,a2,a3,a4,a5,a6) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
      jsCall(7,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0);
    }

  

    function jsCall_viiiiii_8(a1,a2,a3,a4,a5,a6) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
      jsCall(8,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0);
    }

  

    function jsCall_viiiiii_9(a1,a2,a3,a4,a5,a6) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
      jsCall(9,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0);
    }

  

    function dynCall_di(index,a1) {
      index = index|0;
      a1=a1|0;
      return +FUNCTION_TABLE_di[index&511](a1|0);
    }
  

    function jsCall_di_0(a1) {
      a1=a1|0;
      return +jsCall(0,a1|0);
    }

  

    function jsCall_di_1(a1) {
      a1=a1|0;
      return +jsCall(1,a1|0);
    }

  

    function jsCall_di_2(a1) {
      a1=a1|0;
      return +jsCall(2,a1|0);
    }

  

    function jsCall_di_3(a1) {
      a1=a1|0;
      return +jsCall(3,a1|0);
    }

  

    function jsCall_di_4(a1) {
      a1=a1|0;
      return +jsCall(4,a1|0);
    }

  

    function jsCall_di_5(a1) {
      a1=a1|0;
      return +jsCall(5,a1|0);
    }

  

    function jsCall_di_6(a1) {
      a1=a1|0;
      return +jsCall(6,a1|0);
    }

  

    function jsCall_di_7(a1) {
      a1=a1|0;
      return +jsCall(7,a1|0);
    }

  

    function jsCall_di_8(a1) {
      a1=a1|0;
      return +jsCall(8,a1|0);
    }

  

    function jsCall_di_9(a1) {
      a1=a1|0;
      return +jsCall(9,a1|0);
    }

  

    function dynCall_iiiiddi(index,a1,a2,a3,a4,a5,a6) {
      index = index|0;
      a1=a1|0; a2=a2|0; a3=a3|0; a4=+a4; a5=+a5; a6=a6|0;
      return FUNCTION_TABLE_iiiiddi[index&511](a1|0,a2|0,a3|0,+a4,+a5,a6|0)|0;
    }
  

    function jsCall_iiiiddi_0(a1,a2,a3,a4,a5,a6) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=+a4; a5=+a5; a6=a6|0;
      return jsCall(0,a1|0,a2|0,a3|0,+a4,+a5,a6|0)|0;
    }

  

    function jsCall_iiiiddi_1(a1,a2,a3,a4,a5,a6) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=+a4; a5=+a5; a6=a6|0;
      return jsCall(1,a1|0,a2|0,a3|0,+a4,+a5,a6|0)|0;
    }

  

    function jsCall_iiiiddi_2(a1,a2,a3,a4,a5,a6) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=+a4; a5=+a5; a6=a6|0;
      return jsCall(2,a1|0,a2|0,a3|0,+a4,+a5,a6|0)|0;
    }

  

    function jsCall_iiiiddi_3(a1,a2,a3,a4,a5,a6) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=+a4; a5=+a5; a6=a6|0;
      return jsCall(3,a1|0,a2|0,a3|0,+a4,+a5,a6|0)|0;
    }

  

    function jsCall_iiiiddi_4(a1,a2,a3,a4,a5,a6) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=+a4; a5=+a5; a6=a6|0;
      return jsCall(4,a1|0,a2|0,a3|0,+a4,+a5,a6|0)|0;
    }

  

    function jsCall_iiiiddi_5(a1,a2,a3,a4,a5,a6) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=+a4; a5=+a5; a6=a6|0;
      return jsCall(5,a1|0,a2|0,a3|0,+a4,+a5,a6|0)|0;
    }

  

    function jsCall_iiiiddi_6(a1,a2,a3,a4,a5,a6) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=+a4; a5=+a5; a6=a6|0;
      return jsCall(6,a1|0,a2|0,a3|0,+a4,+a5,a6|0)|0;
    }

  

    function jsCall_iiiiddi_7(a1,a2,a3,a4,a5,a6) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=+a4; a5=+a5; a6=a6|0;
      return jsCall(7,a1|0,a2|0,a3|0,+a4,+a5,a6|0)|0;
    }

  

    function jsCall_iiiiddi_8(a1,a2,a3,a4,a5,a6) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=+a4; a5=+a5; a6=a6|0;
      return jsCall(8,a1|0,a2|0,a3|0,+a4,+a5,a6|0)|0;
    }

  

    function jsCall_iiiiddi_9(a1,a2,a3,a4,a5,a6) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=+a4; a5=+a5; a6=a6|0;
      return jsCall(9,a1|0,a2|0,a3|0,+a4,+a5,a6|0)|0;
    }

  

    function dynCall_iiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8) {
      index = index|0;
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0;
      return FUNCTION_TABLE_iiiiiiiii[index&511](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0)|0;
    }
  

    function jsCall_iiiiiiiii_0(a1,a2,a3,a4,a5,a6,a7,a8) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0;
      return jsCall(0,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0)|0;
    }

  

    function jsCall_iiiiiiiii_1(a1,a2,a3,a4,a5,a6,a7,a8) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0;
      return jsCall(1,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0)|0;
    }

  

    function jsCall_iiiiiiiii_2(a1,a2,a3,a4,a5,a6,a7,a8) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0;
      return jsCall(2,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0)|0;
    }

  

    function jsCall_iiiiiiiii_3(a1,a2,a3,a4,a5,a6,a7,a8) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0;
      return jsCall(3,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0)|0;
    }

  

    function jsCall_iiiiiiiii_4(a1,a2,a3,a4,a5,a6,a7,a8) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0;
      return jsCall(4,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0)|0;
    }

  

    function jsCall_iiiiiiiii_5(a1,a2,a3,a4,a5,a6,a7,a8) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0;
      return jsCall(5,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0)|0;
    }

  

    function jsCall_iiiiiiiii_6(a1,a2,a3,a4,a5,a6,a7,a8) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0;
      return jsCall(6,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0)|0;
    }

  

    function jsCall_iiiiiiiii_7(a1,a2,a3,a4,a5,a6,a7,a8) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0;
      return jsCall(7,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0)|0;
    }

  

    function jsCall_iiiiiiiii_8(a1,a2,a3,a4,a5,a6,a7,a8) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0;
      return jsCall(8,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0)|0;
    }

  

    function jsCall_iiiiiiiii_9(a1,a2,a3,a4,a5,a6,a7,a8) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0;
      return jsCall(9,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0)|0;
    }

  

    function dynCall_viiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
      index = index|0;
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0;
      FUNCTION_TABLE_viiiiiii[index&511](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0);
    }
  

    function jsCall_viiiiiii_0(a1,a2,a3,a4,a5,a6,a7) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0;
      jsCall(0,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0);
    }

  

    function jsCall_viiiiiii_1(a1,a2,a3,a4,a5,a6,a7) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0;
      jsCall(1,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0);
    }

  

    function jsCall_viiiiiii_2(a1,a2,a3,a4,a5,a6,a7) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0;
      jsCall(2,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0);
    }

  

    function jsCall_viiiiiii_3(a1,a2,a3,a4,a5,a6,a7) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0;
      jsCall(3,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0);
    }

  

    function jsCall_viiiiiii_4(a1,a2,a3,a4,a5,a6,a7) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0;
      jsCall(4,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0);
    }

  

    function jsCall_viiiiiii_5(a1,a2,a3,a4,a5,a6,a7) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0;
      jsCall(5,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0);
    }

  

    function jsCall_viiiiiii_6(a1,a2,a3,a4,a5,a6,a7) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0;
      jsCall(6,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0);
    }

  

    function jsCall_viiiiiii_7(a1,a2,a3,a4,a5,a6,a7) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0;
      jsCall(7,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0);
    }

  

    function jsCall_viiiiiii_8(a1,a2,a3,a4,a5,a6,a7) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0;
      jsCall(8,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0);
    }

  

    function jsCall_viiiiiii_9(a1,a2,a3,a4,a5,a6,a7) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0;
      jsCall(9,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0);
    }

  

    function dynCall_viiiiiid(index,a1,a2,a3,a4,a5,a6,a7) {
      index = index|0;
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=+a7;
      FUNCTION_TABLE_viiiiiid[index&511](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,+a7);
    }
  

    function jsCall_viiiiiid_0(a1,a2,a3,a4,a5,a6,a7) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=+a7;
      jsCall(0,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,+a7);
    }

  

    function jsCall_viiiiiid_1(a1,a2,a3,a4,a5,a6,a7) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=+a7;
      jsCall(1,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,+a7);
    }

  

    function jsCall_viiiiiid_2(a1,a2,a3,a4,a5,a6,a7) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=+a7;
      jsCall(2,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,+a7);
    }

  

    function jsCall_viiiiiid_3(a1,a2,a3,a4,a5,a6,a7) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=+a7;
      jsCall(3,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,+a7);
    }

  

    function jsCall_viiiiiid_4(a1,a2,a3,a4,a5,a6,a7) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=+a7;
      jsCall(4,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,+a7);
    }

  

    function jsCall_viiiiiid_5(a1,a2,a3,a4,a5,a6,a7) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=+a7;
      jsCall(5,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,+a7);
    }

  

    function jsCall_viiiiiid_6(a1,a2,a3,a4,a5,a6,a7) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=+a7;
      jsCall(6,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,+a7);
    }

  

    function jsCall_viiiiiid_7(a1,a2,a3,a4,a5,a6,a7) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=+a7;
      jsCall(7,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,+a7);
    }

  

    function jsCall_viiiiiid_8(a1,a2,a3,a4,a5,a6,a7) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=+a7;
      jsCall(8,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,+a7);
    }

  

    function jsCall_viiiiiid_9(a1,a2,a3,a4,a5,a6,a7) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=+a7;
      jsCall(9,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,+a7);
    }

  

    function dynCall_viiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9) {
      index = index|0;
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0;
      FUNCTION_TABLE_viiiiiiiii[index&255](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0);
    }
  

    function jsCall_viiiiiiiii_0(a1,a2,a3,a4,a5,a6,a7,a8,a9) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0;
      jsCall(0,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0);
    }

  

    function jsCall_viiiiiiiii_1(a1,a2,a3,a4,a5,a6,a7,a8,a9) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0;
      jsCall(1,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0);
    }

  

    function jsCall_viiiiiiiii_2(a1,a2,a3,a4,a5,a6,a7,a8,a9) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0;
      jsCall(2,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0);
    }

  

    function jsCall_viiiiiiiii_3(a1,a2,a3,a4,a5,a6,a7,a8,a9) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0;
      jsCall(3,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0);
    }

  

    function jsCall_viiiiiiiii_4(a1,a2,a3,a4,a5,a6,a7,a8,a9) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0;
      jsCall(4,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0);
    }

  

    function jsCall_viiiiiiiii_5(a1,a2,a3,a4,a5,a6,a7,a8,a9) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0;
      jsCall(5,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0);
    }

  

    function jsCall_viiiiiiiii_6(a1,a2,a3,a4,a5,a6,a7,a8,a9) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0;
      jsCall(6,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0);
    }

  

    function jsCall_viiiiiiiii_7(a1,a2,a3,a4,a5,a6,a7,a8,a9) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0;
      jsCall(7,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0);
    }

  

    function jsCall_viiiiiiiii_8(a1,a2,a3,a4,a5,a6,a7,a8,a9) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0;
      jsCall(8,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0);
    }

  

    function jsCall_viiiiiiiii_9(a1,a2,a3,a4,a5,a6,a7,a8,a9) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0;
      jsCall(9,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0);
    }

  

    function dynCall_viiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10) {
      index = index|0;
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0; a10=a10|0;
      FUNCTION_TABLE_viiiiiiiiii[index&511](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0,a10|0);
    }
  

    function jsCall_viiiiiiiiii_0(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0; a10=a10|0;
      jsCall(0,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0,a10|0);
    }

  

    function jsCall_viiiiiiiiii_1(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0; a10=a10|0;
      jsCall(1,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0,a10|0);
    }

  

    function jsCall_viiiiiiiiii_2(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0; a10=a10|0;
      jsCall(2,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0,a10|0);
    }

  

    function jsCall_viiiiiiiiii_3(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0; a10=a10|0;
      jsCall(3,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0,a10|0);
    }

  

    function jsCall_viiiiiiiiii_4(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0; a10=a10|0;
      jsCall(4,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0,a10|0);
    }

  

    function jsCall_viiiiiiiiii_5(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0; a10=a10|0;
      jsCall(5,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0,a10|0);
    }

  

    function jsCall_viiiiiiiiii_6(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0; a10=a10|0;
      jsCall(6,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0,a10|0);
    }

  

    function jsCall_viiiiiiiiii_7(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0; a10=a10|0;
      jsCall(7,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0,a10|0);
    }

  

    function jsCall_viiiiiiiiii_8(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0; a10=a10|0;
      jsCall(8,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0,a10|0);
    }

  

    function jsCall_viiiiiiiiii_9(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0; a10=a10|0;
      jsCall(9,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0,a10|0);
    }

  

    function dynCall_iii(index,a1,a2) {
      index = index|0;
      a1=a1|0; a2=a2|0;
      return FUNCTION_TABLE_iii[index&511](a1|0,a2|0)|0;
    }
  

    function jsCall_iii_0(a1,a2) {
      a1=a1|0; a2=a2|0;
      return jsCall(0,a1|0,a2|0)|0;
    }

  

    function jsCall_iii_1(a1,a2) {
      a1=a1|0; a2=a2|0;
      return jsCall(1,a1|0,a2|0)|0;
    }

  

    function jsCall_iii_2(a1,a2) {
      a1=a1|0; a2=a2|0;
      return jsCall(2,a1|0,a2|0)|0;
    }

  

    function jsCall_iii_3(a1,a2) {
      a1=a1|0; a2=a2|0;
      return jsCall(3,a1|0,a2|0)|0;
    }

  

    function jsCall_iii_4(a1,a2) {
      a1=a1|0; a2=a2|0;
      return jsCall(4,a1|0,a2|0)|0;
    }

  

    function jsCall_iii_5(a1,a2) {
      a1=a1|0; a2=a2|0;
      return jsCall(5,a1|0,a2|0)|0;
    }

  

    function jsCall_iii_6(a1,a2) {
      a1=a1|0; a2=a2|0;
      return jsCall(6,a1|0,a2|0)|0;
    }

  

    function jsCall_iii_7(a1,a2) {
      a1=a1|0; a2=a2|0;
      return jsCall(7,a1|0,a2|0)|0;
    }

  

    function jsCall_iii_8(a1,a2) {
      a1=a1|0; a2=a2|0;
      return jsCall(8,a1|0,a2|0)|0;
    }

  

    function jsCall_iii_9(a1,a2) {
      a1=a1|0; a2=a2|0;
      return jsCall(9,a1|0,a2|0)|0;
    }

  

    function dynCall_iiiiii(index,a1,a2,a3,a4,a5) {
      index = index|0;
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
      return FUNCTION_TABLE_iiiiii[index&511](a1|0,a2|0,a3|0,a4|0,a5|0)|0;
    }
  

    function jsCall_iiiiii_0(a1,a2,a3,a4,a5) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
      return jsCall(0,a1|0,a2|0,a3|0,a4|0,a5|0)|0;
    }

  

    function jsCall_iiiiii_1(a1,a2,a3,a4,a5) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
      return jsCall(1,a1|0,a2|0,a3|0,a4|0,a5|0)|0;
    }

  

    function jsCall_iiiiii_2(a1,a2,a3,a4,a5) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
      return jsCall(2,a1|0,a2|0,a3|0,a4|0,a5|0)|0;
    }

  

    function jsCall_iiiiii_3(a1,a2,a3,a4,a5) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
      return jsCall(3,a1|0,a2|0,a3|0,a4|0,a5|0)|0;
    }

  

    function jsCall_iiiiii_4(a1,a2,a3,a4,a5) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
      return jsCall(4,a1|0,a2|0,a3|0,a4|0,a5|0)|0;
    }

  

    function jsCall_iiiiii_5(a1,a2,a3,a4,a5) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
      return jsCall(5,a1|0,a2|0,a3|0,a4|0,a5|0)|0;
    }

  

    function jsCall_iiiiii_6(a1,a2,a3,a4,a5) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
      return jsCall(6,a1|0,a2|0,a3|0,a4|0,a5|0)|0;
    }

  

    function jsCall_iiiiii_7(a1,a2,a3,a4,a5) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
      return jsCall(7,a1|0,a2|0,a3|0,a4|0,a5|0)|0;
    }

  

    function jsCall_iiiiii_8(a1,a2,a3,a4,a5) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
      return jsCall(8,a1|0,a2|0,a3|0,a4|0,a5|0)|0;
    }

  

    function jsCall_iiiiii_9(a1,a2,a3,a4,a5) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
      return jsCall(9,a1|0,a2|0,a3|0,a4|0,a5|0)|0;
    }

  

    function dynCall_iiiiiddi(index,a1,a2,a3,a4,a5,a6,a7) {
      index = index|0;
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=+a5; a6=+a6; a7=a7|0;
      return FUNCTION_TABLE_iiiiiddi[index&511](a1|0,a2|0,a3|0,a4|0,+a5,+a6,a7|0)|0;
    }
  

    function jsCall_iiiiiddi_0(a1,a2,a3,a4,a5,a6,a7) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=+a5; a6=+a6; a7=a7|0;
      return jsCall(0,a1|0,a2|0,a3|0,a4|0,+a5,+a6,a7|0)|0;
    }

  

    function jsCall_iiiiiddi_1(a1,a2,a3,a4,a5,a6,a7) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=+a5; a6=+a6; a7=a7|0;
      return jsCall(1,a1|0,a2|0,a3|0,a4|0,+a5,+a6,a7|0)|0;
    }

  

    function jsCall_iiiiiddi_2(a1,a2,a3,a4,a5,a6,a7) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=+a5; a6=+a6; a7=a7|0;
      return jsCall(2,a1|0,a2|0,a3|0,a4|0,+a5,+a6,a7|0)|0;
    }

  

    function jsCall_iiiiiddi_3(a1,a2,a3,a4,a5,a6,a7) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=+a5; a6=+a6; a7=a7|0;
      return jsCall(3,a1|0,a2|0,a3|0,a4|0,+a5,+a6,a7|0)|0;
    }

  

    function jsCall_iiiiiddi_4(a1,a2,a3,a4,a5,a6,a7) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=+a5; a6=+a6; a7=a7|0;
      return jsCall(4,a1|0,a2|0,a3|0,a4|0,+a5,+a6,a7|0)|0;
    }

  

    function jsCall_iiiiiddi_5(a1,a2,a3,a4,a5,a6,a7) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=+a5; a6=+a6; a7=a7|0;
      return jsCall(5,a1|0,a2|0,a3|0,a4|0,+a5,+a6,a7|0)|0;
    }

  

    function jsCall_iiiiiddi_6(a1,a2,a3,a4,a5,a6,a7) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=+a5; a6=+a6; a7=a7|0;
      return jsCall(6,a1|0,a2|0,a3|0,a4|0,+a5,+a6,a7|0)|0;
    }

  

    function jsCall_iiiiiddi_7(a1,a2,a3,a4,a5,a6,a7) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=+a5; a6=+a6; a7=a7|0;
      return jsCall(7,a1|0,a2|0,a3|0,a4|0,+a5,+a6,a7|0)|0;
    }

  

    function jsCall_iiiiiddi_8(a1,a2,a3,a4,a5,a6,a7) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=+a5; a6=+a6; a7=a7|0;
      return jsCall(8,a1|0,a2|0,a3|0,a4|0,+a5,+a6,a7|0)|0;
    }

  

    function jsCall_iiiiiddi_9(a1,a2,a3,a4,a5,a6,a7) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=+a5; a6=+a6; a7=a7|0;
      return jsCall(9,a1|0,a2|0,a3|0,a4|0,+a5,+a6,a7|0)|0;
    }

  

    function dynCall_diii(index,a1,a2,a3) {
      index = index|0;
      a1=a1|0; a2=a2|0; a3=a3|0;
      return +FUNCTION_TABLE_diii[index&511](a1|0,a2|0,a3|0);
    }
  

    function jsCall_diii_0(a1,a2,a3) {
      a1=a1|0; a2=a2|0; a3=a3|0;
      return +jsCall(0,a1|0,a2|0,a3|0);
    }

  

    function jsCall_diii_1(a1,a2,a3) {
      a1=a1|0; a2=a2|0; a3=a3|0;
      return +jsCall(1,a1|0,a2|0,a3|0);
    }

  

    function jsCall_diii_2(a1,a2,a3) {
      a1=a1|0; a2=a2|0; a3=a3|0;
      return +jsCall(2,a1|0,a2|0,a3|0);
    }

  

    function jsCall_diii_3(a1,a2,a3) {
      a1=a1|0; a2=a2|0; a3=a3|0;
      return +jsCall(3,a1|0,a2|0,a3|0);
    }

  

    function jsCall_diii_4(a1,a2,a3) {
      a1=a1|0; a2=a2|0; a3=a3|0;
      return +jsCall(4,a1|0,a2|0,a3|0);
    }

  

    function jsCall_diii_5(a1,a2,a3) {
      a1=a1|0; a2=a2|0; a3=a3|0;
      return +jsCall(5,a1|0,a2|0,a3|0);
    }

  

    function jsCall_diii_6(a1,a2,a3) {
      a1=a1|0; a2=a2|0; a3=a3|0;
      return +jsCall(6,a1|0,a2|0,a3|0);
    }

  

    function jsCall_diii_7(a1,a2,a3) {
      a1=a1|0; a2=a2|0; a3=a3|0;
      return +jsCall(7,a1|0,a2|0,a3|0);
    }

  

    function jsCall_diii_8(a1,a2,a3) {
      a1=a1|0; a2=a2|0; a3=a3|0;
      return +jsCall(8,a1|0,a2|0,a3|0);
    }

  

    function jsCall_diii_9(a1,a2,a3) {
      a1=a1|0; a2=a2|0; a3=a3|0;
      return +jsCall(9,a1|0,a2|0,a3|0);
    }

  

    function dynCall_dii(index,a1,a2) {
      index = index|0;
      a1=a1|0; a2=a2|0;
      return +FUNCTION_TABLE_dii[index&511](a1|0,a2|0);
    }
  

    function jsCall_dii_0(a1,a2) {
      a1=a1|0; a2=a2|0;
      return +jsCall(0,a1|0,a2|0);
    }

  

    function jsCall_dii_1(a1,a2) {
      a1=a1|0; a2=a2|0;
      return +jsCall(1,a1|0,a2|0);
    }

  

    function jsCall_dii_2(a1,a2) {
      a1=a1|0; a2=a2|0;
      return +jsCall(2,a1|0,a2|0);
    }

  

    function jsCall_dii_3(a1,a2) {
      a1=a1|0; a2=a2|0;
      return +jsCall(3,a1|0,a2|0);
    }

  

    function jsCall_dii_4(a1,a2) {
      a1=a1|0; a2=a2|0;
      return +jsCall(4,a1|0,a2|0);
    }

  

    function jsCall_dii_5(a1,a2) {
      a1=a1|0; a2=a2|0;
      return +jsCall(5,a1|0,a2|0);
    }

  

    function jsCall_dii_6(a1,a2) {
      a1=a1|0; a2=a2|0;
      return +jsCall(6,a1|0,a2|0);
    }

  

    function jsCall_dii_7(a1,a2) {
      a1=a1|0; a2=a2|0;
      return +jsCall(7,a1|0,a2|0);
    }

  

    function jsCall_dii_8(a1,a2) {
      a1=a1|0; a2=a2|0;
      return +jsCall(8,a1|0,a2|0);
    }

  

    function jsCall_dii_9(a1,a2) {
      a1=a1|0; a2=a2|0;
      return +jsCall(9,a1|0,a2|0);
    }

  

    function dynCall_i(index) {
      index = index|0;
      
      return FUNCTION_TABLE_i[index&511]()|0;
    }
  

    function jsCall_i_0() {
      
      return jsCall(0)|0;
    }

  

    function jsCall_i_1() {
      
      return jsCall(1)|0;
    }

  

    function jsCall_i_2() {
      
      return jsCall(2)|0;
    }

  

    function jsCall_i_3() {
      
      return jsCall(3)|0;
    }

  

    function jsCall_i_4() {
      
      return jsCall(4)|0;
    }

  

    function jsCall_i_5() {
      
      return jsCall(5)|0;
    }

  

    function jsCall_i_6() {
      
      return jsCall(6)|0;
    }

  

    function jsCall_i_7() {
      
      return jsCall(7)|0;
    }

  

    function jsCall_i_8() {
      
      return jsCall(8)|0;
    }

  

    function jsCall_i_9() {
      
      return jsCall(9)|0;
    }

  

    function dynCall_iiiii(index,a1,a2,a3,a4) {
      index = index|0;
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
      return FUNCTION_TABLE_iiiii[index&511](a1|0,a2|0,a3|0,a4|0)|0;
    }
  

    function jsCall_iiiii_0(a1,a2,a3,a4) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
      return jsCall(0,a1|0,a2|0,a3|0,a4|0)|0;
    }

  

    function jsCall_iiiii_1(a1,a2,a3,a4) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
      return jsCall(1,a1|0,a2|0,a3|0,a4|0)|0;
    }

  

    function jsCall_iiiii_2(a1,a2,a3,a4) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
      return jsCall(2,a1|0,a2|0,a3|0,a4|0)|0;
    }

  

    function jsCall_iiiii_3(a1,a2,a3,a4) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
      return jsCall(3,a1|0,a2|0,a3|0,a4|0)|0;
    }

  

    function jsCall_iiiii_4(a1,a2,a3,a4) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
      return jsCall(4,a1|0,a2|0,a3|0,a4|0)|0;
    }

  

    function jsCall_iiiii_5(a1,a2,a3,a4) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
      return jsCall(5,a1|0,a2|0,a3|0,a4|0)|0;
    }

  

    function jsCall_iiiii_6(a1,a2,a3,a4) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
      return jsCall(6,a1|0,a2|0,a3|0,a4|0)|0;
    }

  

    function jsCall_iiiii_7(a1,a2,a3,a4) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
      return jsCall(7,a1|0,a2|0,a3|0,a4|0)|0;
    }

  

    function jsCall_iiiii_8(a1,a2,a3,a4) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
      return jsCall(8,a1|0,a2|0,a3|0,a4|0)|0;
    }

  

    function jsCall_iiiii_9(a1,a2,a3,a4) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
      return jsCall(9,a1|0,a2|0,a3|0,a4|0)|0;
    }

  

    function dynCall_viiid(index,a1,a2,a3,a4) {
      index = index|0;
      a1=a1|0; a2=a2|0; a3=a3|0; a4=+a4;
      FUNCTION_TABLE_viiid[index&511](a1|0,a2|0,a3|0,+a4);
    }
  

    function jsCall_viiid_0(a1,a2,a3,a4) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=+a4;
      jsCall(0,a1|0,a2|0,a3|0,+a4);
    }

  

    function jsCall_viiid_1(a1,a2,a3,a4) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=+a4;
      jsCall(1,a1|0,a2|0,a3|0,+a4);
    }

  

    function jsCall_viiid_2(a1,a2,a3,a4) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=+a4;
      jsCall(2,a1|0,a2|0,a3|0,+a4);
    }

  

    function jsCall_viiid_3(a1,a2,a3,a4) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=+a4;
      jsCall(3,a1|0,a2|0,a3|0,+a4);
    }

  

    function jsCall_viiid_4(a1,a2,a3,a4) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=+a4;
      jsCall(4,a1|0,a2|0,a3|0,+a4);
    }

  

    function jsCall_viiid_5(a1,a2,a3,a4) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=+a4;
      jsCall(5,a1|0,a2|0,a3|0,+a4);
    }

  

    function jsCall_viiid_6(a1,a2,a3,a4) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=+a4;
      jsCall(6,a1|0,a2|0,a3|0,+a4);
    }

  

    function jsCall_viiid_7(a1,a2,a3,a4) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=+a4;
      jsCall(7,a1|0,a2|0,a3|0,+a4);
    }

  

    function jsCall_viiid_8(a1,a2,a3,a4) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=+a4;
      jsCall(8,a1|0,a2|0,a3|0,+a4);
    }

  

    function jsCall_viiid_9(a1,a2,a3,a4) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=+a4;
      jsCall(9,a1|0,a2|0,a3|0,+a4);
    }

  

    function dynCall_viii(index,a1,a2,a3) {
      index = index|0;
      a1=a1|0; a2=a2|0; a3=a3|0;
      FUNCTION_TABLE_viii[index&511](a1|0,a2|0,a3|0);
    }
  

    function jsCall_viii_0(a1,a2,a3) {
      a1=a1|0; a2=a2|0; a3=a3|0;
      jsCall(0,a1|0,a2|0,a3|0);
    }

  

    function jsCall_viii_1(a1,a2,a3) {
      a1=a1|0; a2=a2|0; a3=a3|0;
      jsCall(1,a1|0,a2|0,a3|0);
    }

  

    function jsCall_viii_2(a1,a2,a3) {
      a1=a1|0; a2=a2|0; a3=a3|0;
      jsCall(2,a1|0,a2|0,a3|0);
    }

  

    function jsCall_viii_3(a1,a2,a3) {
      a1=a1|0; a2=a2|0; a3=a3|0;
      jsCall(3,a1|0,a2|0,a3|0);
    }

  

    function jsCall_viii_4(a1,a2,a3) {
      a1=a1|0; a2=a2|0; a3=a3|0;
      jsCall(4,a1|0,a2|0,a3|0);
    }

  

    function jsCall_viii_5(a1,a2,a3) {
      a1=a1|0; a2=a2|0; a3=a3|0;
      jsCall(5,a1|0,a2|0,a3|0);
    }

  

    function jsCall_viii_6(a1,a2,a3) {
      a1=a1|0; a2=a2|0; a3=a3|0;
      jsCall(6,a1|0,a2|0,a3|0);
    }

  

    function jsCall_viii_7(a1,a2,a3) {
      a1=a1|0; a2=a2|0; a3=a3|0;
      jsCall(7,a1|0,a2|0,a3|0);
    }

  

    function jsCall_viii_8(a1,a2,a3) {
      a1=a1|0; a2=a2|0; a3=a3|0;
      jsCall(8,a1|0,a2|0,a3|0);
    }

  

    function jsCall_viii_9(a1,a2,a3) {
      a1=a1|0; a2=a2|0; a3=a3|0;
      jsCall(9,a1|0,a2|0,a3|0);
    }

  

    function dynCall_v(index) {
      index = index|0;
      
      FUNCTION_TABLE_v[index&511]();
    }
  

    function jsCall_v_0() {
      
      jsCall(0);
    }

  

    function jsCall_v_1() {
      
      jsCall(1);
    }

  

    function jsCall_v_2() {
      
      jsCall(2);
    }

  

    function jsCall_v_3() {
      
      jsCall(3);
    }

  

    function jsCall_v_4() {
      
      jsCall(4);
    }

  

    function jsCall_v_5() {
      
      jsCall(5);
    }

  

    function jsCall_v_6() {
      
      jsCall(6);
    }

  

    function jsCall_v_7() {
      
      jsCall(7);
    }

  

    function jsCall_v_8() {
      
      jsCall(8);
    }

  

    function jsCall_v_9() {
      
      jsCall(9);
    }

  

    function dynCall_viid(index,a1,a2,a3) {
      index = index|0;
      a1=a1|0; a2=a2|0; a3=+a3;
      FUNCTION_TABLE_viid[index&511](a1|0,a2|0,+a3);
    }
  

    function jsCall_viid_0(a1,a2,a3) {
      a1=a1|0; a2=a2|0; a3=+a3;
      jsCall(0,a1|0,a2|0,+a3);
    }

  

    function jsCall_viid_1(a1,a2,a3) {
      a1=a1|0; a2=a2|0; a3=+a3;
      jsCall(1,a1|0,a2|0,+a3);
    }

  

    function jsCall_viid_2(a1,a2,a3) {
      a1=a1|0; a2=a2|0; a3=+a3;
      jsCall(2,a1|0,a2|0,+a3);
    }

  

    function jsCall_viid_3(a1,a2,a3) {
      a1=a1|0; a2=a2|0; a3=+a3;
      jsCall(3,a1|0,a2|0,+a3);
    }

  

    function jsCall_viid_4(a1,a2,a3) {
      a1=a1|0; a2=a2|0; a3=+a3;
      jsCall(4,a1|0,a2|0,+a3);
    }

  

    function jsCall_viid_5(a1,a2,a3) {
      a1=a1|0; a2=a2|0; a3=+a3;
      jsCall(5,a1|0,a2|0,+a3);
    }

  

    function jsCall_viid_6(a1,a2,a3) {
      a1=a1|0; a2=a2|0; a3=+a3;
      jsCall(6,a1|0,a2|0,+a3);
    }

  

    function jsCall_viid_7(a1,a2,a3) {
      a1=a1|0; a2=a2|0; a3=+a3;
      jsCall(7,a1|0,a2|0,+a3);
    }

  

    function jsCall_viid_8(a1,a2,a3) {
      a1=a1|0; a2=a2|0; a3=+a3;
      jsCall(8,a1|0,a2|0,+a3);
    }

  

    function jsCall_viid_9(a1,a2,a3) {
      a1=a1|0; a2=a2|0; a3=+a3;
      jsCall(9,a1|0,a2|0,+a3);
    }

  

    function dynCall_idd(index,a1,a2) {
      index = index|0;
      a1=+a1; a2=+a2;
      return FUNCTION_TABLE_idd[index&511](+a1,+a2)|0;
    }
  

    function jsCall_idd_0(a1,a2) {
      a1=+a1; a2=+a2;
      return jsCall(0,+a1,+a2)|0;
    }

  

    function jsCall_idd_1(a1,a2) {
      a1=+a1; a2=+a2;
      return jsCall(1,+a1,+a2)|0;
    }

  

    function jsCall_idd_2(a1,a2) {
      a1=+a1; a2=+a2;
      return jsCall(2,+a1,+a2)|0;
    }

  

    function jsCall_idd_3(a1,a2) {
      a1=+a1; a2=+a2;
      return jsCall(3,+a1,+a2)|0;
    }

  

    function jsCall_idd_4(a1,a2) {
      a1=+a1; a2=+a2;
      return jsCall(4,+a1,+a2)|0;
    }

  

    function jsCall_idd_5(a1,a2) {
      a1=+a1; a2=+a2;
      return jsCall(5,+a1,+a2)|0;
    }

  

    function jsCall_idd_6(a1,a2) {
      a1=+a1; a2=+a2;
      return jsCall(6,+a1,+a2)|0;
    }

  

    function jsCall_idd_7(a1,a2) {
      a1=+a1; a2=+a2;
      return jsCall(7,+a1,+a2)|0;
    }

  

    function jsCall_idd_8(a1,a2) {
      a1=+a1; a2=+a2;
      return jsCall(8,+a1,+a2)|0;
    }

  

    function jsCall_idd_9(a1,a2) {
      a1=+a1; a2=+a2;
      return jsCall(9,+a1,+a2)|0;
    }

  

    function dynCall_viiii(index,a1,a2,a3,a4) {
      index = index|0;
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
      FUNCTION_TABLE_viiii[index&511](a1|0,a2|0,a3|0,a4|0);
    }
  

    function jsCall_viiii_0(a1,a2,a3,a4) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
      jsCall(0,a1|0,a2|0,a3|0,a4|0);
    }

  

    function jsCall_viiii_1(a1,a2,a3,a4) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
      jsCall(1,a1|0,a2|0,a3|0,a4|0);
    }

  

    function jsCall_viiii_2(a1,a2,a3,a4) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
      jsCall(2,a1|0,a2|0,a3|0,a4|0);
    }

  

    function jsCall_viiii_3(a1,a2,a3,a4) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
      jsCall(3,a1|0,a2|0,a3|0,a4|0);
    }

  

    function jsCall_viiii_4(a1,a2,a3,a4) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
      jsCall(4,a1|0,a2|0,a3|0,a4|0);
    }

  

    function jsCall_viiii_5(a1,a2,a3,a4) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
      jsCall(5,a1|0,a2|0,a3|0,a4|0);
    }

  

    function jsCall_viiii_6(a1,a2,a3,a4) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
      jsCall(6,a1|0,a2|0,a3|0,a4|0);
    }

  

    function jsCall_viiii_7(a1,a2,a3,a4) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
      jsCall(7,a1|0,a2|0,a3|0,a4|0);
    }

  

    function jsCall_viiii_8(a1,a2,a3,a4) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
      jsCall(8,a1|0,a2|0,a3|0,a4|0);
    }

  

    function jsCall_viiii_9(a1,a2,a3,a4) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
      jsCall(9,a1|0,a2|0,a3|0,a4|0);
    }

  
function b0(p0,p1,p2,p3,p4,p5,p6) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0; nullFunc_iiiiiiii(0);return 0; }
  function b1(p0,p1,p2,p3,p4) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(1); }
  function b2(p0,p1) { p0 = p0|0;p1 = +p1; nullFunc_vid(2); }
  function b3(p0) { p0 = p0|0; nullFunc_vi(3); }
  function ___cxa_call_unexpected__wrapper(p0) { p0 = p0|0; ___cxa_call_unexpected(p0|0); }
  function __emval_incref__wrapper(p0) { p0 = p0|0; __emval_incref(p0|0); }
  function __emval_decref__wrapper(p0) { p0 = p0|0; __emval_decref(p0|0); }
  function _freelocale__wrapper(p0) { p0 = p0|0; _freelocale(p0|0); }
  function b4(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(4); }
  function b5(p0) { p0 = p0|0; nullFunc_ii(5);return 0; }
  function _pthread_mutex_unlock__wrapper(p0) { p0 = p0|0; return _pthread_mutex_unlock(p0|0)|0; }
  function _pthread_mutex_lock__wrapper(p0) { p0 = p0|0; return _pthread_mutex_lock(p0|0)|0; }
  function _pthread_cond_broadcast__wrapper(p0) { p0 = p0|0; return _pthread_cond_broadcast(p0|0)|0; }
  function _uselocale__wrapper(p0) { p0 = p0|0; return _uselocale(p0|0)|0; }
  function b6(p0,p1,p2) { p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_iidd(6);return 0; }
  function b7(p0,p1,p2,p3,p4,p5,p6,p7,p8,p9,p10) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0;p8 = p8|0;p9 = p9|0;p10 = p10|0; nullFunc_iiiiiiiiiiii(7);return 0; }
  function b8(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(8);return 0; }
  function _newlocale__wrapper(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; return _newlocale(p0|0,p1|0,p2|0)|0; }
  function b9(p0,p1,p2,p3,p4,p5,p6,p7,p8,p9,p10,p11,p12,p13,p14) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0;p8 = p8|0;p9 = p9|0;p10 = p10|0;p11 = p11|0;p12 = p12|0;p13 = p13|0;p14 = p14|0; nullFunc_viiiiiiiiiiiiiii(9); }
  function b10(p0,p1,p2,p3,p4,p5) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = +p5; nullFunc_viiiiid(10); }
  function b11(p0,p1,p2,p3,p4,p5,p6,p7) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0; nullFunc_viiiiiiii(11); }
  function b12(p0,p1,p2,p3,p4,p5) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(12); }
  function b13(p0) { p0 = p0|0; nullFunc_di(13);return +0; }
  function b14(p0,p1,p2,p3,p4,p5) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = +p3;p4 = +p4;p5 = p5|0; nullFunc_iiiiddi(14);return 0; }
  function b15(p0,p1,p2,p3,p4,p5,p6,p7) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0; nullFunc_iiiiiiiii(15);return 0; }
  function b16(p0,p1,p2,p3,p4,p5,p6) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0; nullFunc_viiiiiii(16); }
  function b17(p0,p1,p2,p3,p4,p5,p6) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = +p6; nullFunc_viiiiiid(17); }
  function b18(p0,p1,p2,p3,p4,p5,p6,p7,p8) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0;p8 = p8|0; nullFunc_viiiiiiiii(18); }
  function b19(p0,p1,p2,p3,p4,p5,p6,p7,p8,p9) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0;p8 = p8|0;p9 = p9|0; nullFunc_viiiiiiiiii(19); }
  function b20(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(20);return 0; }
  function b21(p0,p1,p2,p3,p4) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(21);return 0; }
  function b22(p0,p1,p2,p3,p4,p5,p6) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = +p4;p5 = +p5;p6 = p6|0; nullFunc_iiiiiddi(22);return 0; }
  function b23(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_diii(23);return +0; }
  function b24(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_dii(24);return +0; }
  function b25() { ; nullFunc_i(25);return 0; }
  function ___ctype_b_loc__wrapper() { ; return ___ctype_b_loc()|0; }
  function ___ctype_toupper_loc__wrapper() { ; return ___ctype_toupper_loc()|0; }
  function ___ctype_tolower_loc__wrapper() { ; return ___ctype_tolower_loc()|0; }
  function b26(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(26);return 0; }
  function _catgets__wrapper(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; return _catgets(p0|0,p1|0,p2|0,p3|0)|0; }
  function b27(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = +p3; nullFunc_viiid(27); }
  function b28(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(28); }
  function ___cxa_throw__wrapper(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; ___cxa_throw(p0|0,p1|0,p2|0); }
  function b29() { ; nullFunc_v(29); }
  function ___cxa_rethrow__wrapper() { ; ___cxa_rethrow(); }
  function ___cxa_end_catch__wrapper() { ; ___cxa_end_catch(); }
  function b30(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = +p2; nullFunc_viid(30); }
  function b31(p0,p1) { p0 = +p0;p1 = +p1; nullFunc_idd(31);return 0; }
  function b32(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(32); }
  // EMSCRIPTEN_END_FUNCS
  var FUNCTION_TABLE_iiiiiiii = [b0,b0,jsCall_iiiiiiii_0,b0,jsCall_iiiiiiii_1,b0,jsCall_iiiiiiii_2,b0,jsCall_iiiiiiii_3,b0,jsCall_iiiiiiii_4,b0,jsCall_iiiiiiii_5,b0,jsCall_iiiiiiii_6,b0,jsCall_iiiiiiii_7,b0,jsCall_iiiiiiii_8,b0,jsCall_iiiiiiii_9,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0];
  var FUNCTION_TABLE_viiiii = [b1,b1,jsCall_viiiii_0,b1,jsCall_viiiii_1,b1,jsCall_viiiii_2,b1,jsCall_viiiii_3,b1,jsCall_viiiii_4,b1,jsCall_viiiii_5,b1,jsCall_viiiii_6,b1,jsCall_viiiii_7,b1,jsCall_viiiii_8,b1,jsCall_viiiii_9,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,__ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,b1,b1,b1,b1,b1,b1,b1,__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,b1,b1,b1,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1];
  var FUNCTION_TABLE_vid = [b2,b2,jsCall_vid_0,b2,jsCall_vid_1,b2,jsCall_vid_2,b2,jsCall_vid_3,b2,jsCall_vid_4,b2,jsCall_vid_5,b2,jsCall_vid_6,b2,jsCall_vid_7,b2,jsCall_vid_8,b2,jsCall_vid_9,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,__ZN7NVectorIdLi3EE4setXEd
  ,b2,b2,b2,__ZN7NVectorIdLi3EE4setYEd,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,__ZN11ModelObject8set_massEd,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2];
  var FUNCTION_TABLE_vi = [b3,b3,jsCall_vi_0,b3,jsCall_vi_1,b3,jsCall_vi_2,b3,jsCall_vi_3,b3,jsCall_vi_4,b3,jsCall_vi_5,b3,jsCall_vi_6,b3,jsCall_vi_7,b3,jsCall_vi_8,b3,jsCall_vi_9,b3,__ZNSt3__111__stdoutbufIwED1Ev,__ZNSt3__111__stdoutbufIwED0Ev,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__110__stdinbufIwED1Ev,__ZNSt3__110__stdinbufIwED0Ev,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__111__stdoutbufIcED1Ev,__ZNSt3__111__stdoutbufIcED0Ev,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,__ZNSt3__110__stdinbufIcED1Ev,__ZNSt3__110__stdinbufIcED0Ev,b3,b3,b3,b3,b3,b3,b3,__ZNSt11logic_errorD2Ev,__ZNSt11logic_errorD0Ev,b3,__ZNSt13runtime_errorD2Ev,__ZNSt13runtime_errorD0Ev,b3,__ZNSt12length_errorD0Ev,__ZNSt3__112system_errorD2Ev,__ZNSt3__112system_errorD0Ev,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED1Ev,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED0Ev,b3,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED1Ev,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED0Ev,b3,__ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED1Ev,__ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev,__ZTv0_n12_NSt3__113basic_istreamIcNS_11char_traitsIcEEED1Ev,__ZTv0_n12_NSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev,__ZNSt3__113basic_istreamIwNS_11char_traitsIwEEED1Ev,__ZNSt3__113basic_istreamIwNS_11char_traitsIwEEED0Ev
  ,__ZTv0_n12_NSt3__113basic_istreamIwNS_11char_traitsIwEEED1Ev,__ZTv0_n12_NSt3__113basic_istreamIwNS_11char_traitsIwEEED0Ev,__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED1Ev,__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev,__ZTv0_n12_NSt3__113basic_ostreamIcNS_11char_traitsIcEEED1Ev,__ZTv0_n12_NSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev,__ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEED1Ev,__ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEED0Ev,__ZTv0_n12_NSt3__113basic_ostreamIwNS_11char_traitsIwEEED1Ev,__ZTv0_n12_NSt3__113basic_ostreamIwNS_11char_traitsIwEEED0Ev,__ZNSt3__18ios_base7failureD2Ev,__ZNSt3__18ios_base7failureD0Ev,__ZNSt3__18ios_baseD2Ev,__ZNSt3__18ios_baseD0Ev,__ZNSt3__119__iostream_categoryD1Ev,__ZNSt3__119__iostream_categoryD0Ev,b3,b3,b3,b3,b3,__ZNSt3__17collateIcED1Ev,__ZNSt3__17collateIcED0Ev,__ZNSt3__16locale5facet16__on_zero_sharedEv,b3,b3,b3,__ZNSt3__17collateIwED1Ev,__ZNSt3__17collateIwED0Ev,b3
  ,b3,b3,__ZNSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev,__ZNSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev,__ZNSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev,__ZNSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev
  ,b3,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev,__ZNSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,b3,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev,__ZNSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,__ZNSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev,__ZNSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev,__ZNSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,b3,__ZNSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev,__ZNSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,b3,__ZNSt3__110moneypunctIcLb0EED1Ev,__ZNSt3__110moneypunctIcLb0EED0Ev,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__110moneypunctIcLb1EED1Ev,__ZNSt3__110moneypunctIcLb1EED0Ev,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__110moneypunctIwLb0EED1Ev,__ZNSt3__110moneypunctIwLb0EED0Ev,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__110moneypunctIwLb1EED1Ev
  ,__ZNSt3__110moneypunctIwLb1EED0Ev,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev,__ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,b3,b3,__ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev,__ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,b3,b3,__ZNSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev,__ZNSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,b3,b3,__ZNSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev,__ZNSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,b3,b3,__ZNSt3__18messagesIcED1Ev,__ZNSt3__18messagesIcED0Ev,b3,b3
  ,b3,__ZNSt3__18messagesIwED1Ev,__ZNSt3__18messagesIwED0Ev,b3,b3,b3,__ZNSt3__16locale5__impD2Ev,__ZNSt3__16locale5__impD0Ev,__ZNSt3__15ctypeIcED2Ev,__ZNSt3__15ctypeIcED0Ev,b3,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__17codecvtIwc11__mbstate_tED2Ev,__ZNSt3__17codecvtIwc11__mbstate_tED0Ev,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__18numpunctIcED2Ev,__ZNSt3__18numpunctIcED0Ev,b3
  ,b3,b3,b3,b3,__ZNSt3__18numpunctIwED2Ev,__ZNSt3__18numpunctIwED0Ev,b3,b3,b3,b3,b3,__ZNSt3__16locale5facetD2Ev,__ZNSt3__16locale5facetD0Ev,__ZNSt3__15ctypeIwED0Ev,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__17codecvtIcc11__mbstate_tED0Ev,b3,b3,b3
  ,b3,b3,b3,b3,__ZNSt3__17codecvtIDsc11__mbstate_tED0Ev,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__17codecvtIDic11__mbstate_tED0Ev,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__116__narrow_to_utf8ILj32EED0Ev,__ZNSt3__117__widen_from_utf8ILj32EED0Ev,__ZNSt8bad_castD2Ev,__ZNSt8bad_castD0Ev,b3,__ZN10__cxxabiv116__shim_type_infoD2Ev,__ZN10__cxxabiv117__class_type_infoD0Ev,__ZNK10__cxxabiv116__shim_type_info5noop1Ev,__ZNK10__cxxabiv116__shim_type_info5noop2Ev,b3
  ,b3,b3,b3,__ZN10__cxxabiv119__pointer_type_infoD0Ev,b3,__ZN10__cxxabiv123__fundamental_type_infoD0Ev,b3,__ZN10__cxxabiv120__si_class_type_infoD0Ev,b3,b3,b3,__ZN10__cxxabiv121__vmi_class_type_infoD0Ev,b3,b3,b3,__ZNSt9bad_allocD2Ev,__ZNSt9bad_allocD0Ev,b3,b3,__ZN5Model14HandleOverlapsERNSt3__16vectorI11ModelObjectNS0_9allocatorIS2_EEEE,b3,___cxa_call_unexpected__wrapper,__emval_incref__wrapper,__emval_decref__wrapper,b3,__ZN10emscripten8internal14raw_destructorI7NVectorIdLi3EEEEvPT_,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,__ZN10emscripten8internal14raw_destructorI11ModelObjectEEvPT_,b3,b3,b3,b3,b3,b3,__ZN11ModelObject4killEv,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,__ZN10emscripten8internal14raw_destructorINSt3__16vectorI11ModelObjectNS2_9allocatorIS4_EEEEEEvPT_,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZN10emscripten8internal14raw_destructorI5ModelEEvPT_,b3,b3,b3,b3,__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv,__ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE5flushEv,__ZNSt3__16locale2id6__initEv,b3,__ZNSt3__121__throw_runtime_errorEPKc,__ZNSt3__18ios_base4InitD2Ev,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,_freelocale__wrapper,__ZNSt3__112__do_nothingEPv,b3,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj,b3,_free,b3
  ,__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,___cxx_global_array_dtor120,b3,___cxx_global_array_dtor105,b3,___cxx_global_array_dtor81,___cxx_global_array_dtor56,___cxx_global_array_dtor53,___cxx_global_array_dtor,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev,b3,__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3];
  var FUNCTION_TABLE_vii = [b4,b4,jsCall_vii_0,b4,jsCall_vii_1,b4,jsCall_vii_2,b4,jsCall_vii_3,b4,jsCall_vii_4,b4,jsCall_vii_5,b4,jsCall_vii_6,b4,jsCall_vii_7,b4,jsCall_vii_8,b4,jsCall_vii_9,b4,b4,b4,__ZNSt3__111__stdoutbufIwE5imbueERKNS_6localeE,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZNSt3__110__stdinbufIwE5imbueERKNS_6localeE,b4,b4,b4,b4,b4,b4,b4,b4,__ZNSt3__111__stdoutbufIcE5imbueERKNS_6localeE,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,__ZNSt3__110__stdinbufIcE5imbueERKNS_6localeE,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5imbueERKNS_6localeE,b4,b4,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE5imbueERKNS_6localeE,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,__ZNKSt3__110moneypunctIcLb0EE11do_groupingEv,__ZNKSt3__110moneypunctIcLb0EE14do_curr_symbolEv,__ZNKSt3__110moneypunctIcLb0EE16do_positive_signEv,__ZNKSt3__110moneypunctIcLb0EE16do_negative_signEv,b4,__ZNKSt3__110moneypunctIcLb0EE13do_pos_formatEv,__ZNKSt3__110moneypunctIcLb0EE13do_neg_formatEv,b4,b4,b4,b4,__ZNKSt3__110moneypunctIcLb1EE11do_groupingEv,__ZNKSt3__110moneypunctIcLb1EE14do_curr_symbolEv,__ZNKSt3__110moneypunctIcLb1EE16do_positive_signEv,__ZNKSt3__110moneypunctIcLb1EE16do_negative_signEv,b4,__ZNKSt3__110moneypunctIcLb1EE13do_pos_formatEv,__ZNKSt3__110moneypunctIcLb1EE13do_neg_formatEv,b4,b4,b4,b4,__ZNKSt3__110moneypunctIwLb0EE11do_groupingEv,__ZNKSt3__110moneypunctIwLb0EE14do_curr_symbolEv,__ZNKSt3__110moneypunctIwLb0EE16do_positive_signEv,__ZNKSt3__110moneypunctIwLb0EE16do_negative_signEv,b4,__ZNKSt3__110moneypunctIwLb0EE13do_pos_formatEv,__ZNKSt3__110moneypunctIwLb0EE13do_neg_formatEv,b4
  ,b4,b4,b4,__ZNKSt3__110moneypunctIwLb1EE11do_groupingEv,__ZNKSt3__110moneypunctIwLb1EE14do_curr_symbolEv,__ZNKSt3__110moneypunctIwLb1EE16do_positive_signEv,__ZNKSt3__110moneypunctIwLb1EE16do_negative_signEv,b4,__ZNKSt3__110moneypunctIwLb1EE13do_pos_formatEv,__ZNKSt3__110moneypunctIwLb1EE13do_neg_formatEv,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,__ZNKSt3__18messagesIcE8do_closeEi,b4,b4,b4,b4,__ZNKSt3__18messagesIwE8do_closeEi,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,__ZNKSt3__18numpunctIcE11do_groupingEv,__ZNKSt3__18numpunctIcE11do_truenameEv,__ZNKSt3__18numpunctIcE12do_falsenameEv,b4,b4,b4,b4,__ZNKSt3__18numpunctIwE11do_groupingEv,__ZNKSt3__18numpunctIwE11do_truenameEv,__ZNKSt3__18numpunctIwE12do_falsenameEv,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZN10emscripten8internal13MethodInvokerIM11ModelObjectFvvEvPS2_JEE6invokeERKS4_S5_,b4,b4,b4,b4,b4,__ZN11ModelObject9set_indexEi,b4,b4,__ZNK11ModelObject8positionEv,__ZN11ModelObject12set_positionE7NVectorIdLi3EE,b4,b4,__ZNK11ModelObject8velocityEv,__ZN11ModelObject12set_velocityE7NVectorIdLi3EE,__ZNK11ModelObject5forceEv,__ZN11ModelObject9set_forceE7NVectorIdLi3EE
  ,b4,b4,b4,b4,__ZNSt3__16vectorI11ModelObjectNS_9allocatorIS1_EEE9push_backERKS1_,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZNSt3__111__call_onceERVmPvPFvS2_E,b4,b4,b4,b4,b4,b4,b4,b4
  ,__ZNSt3__18ios_base5clearEj,b4,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc,b4,__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4];
  var FUNCTION_TABLE_ii = [b5,b5,jsCall_ii_0,b5,jsCall_ii_1,b5,jsCall_ii_2,b5,jsCall_ii_3,b5,jsCall_ii_4,b5,jsCall_ii_5,b5,jsCall_ii_6,b5,jsCall_ii_7,b5,jsCall_ii_8,b5,jsCall_ii_9,b5,b5,b5,b5,b5,b5,b5,__ZNSt3__111__stdoutbufIwE4syncEv
  ,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9showmanycEv,b5,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9underflowEv,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE5uflowEv,b5,b5,b5,b5,b5,b5,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE4syncEv,__ZNSt3__110__stdinbufIwE9underflowEv,__ZNSt3__110__stdinbufIwE5uflowEv,b5,b5,b5,b5,b5,b5,b5,b5,b5,__ZNSt3__111__stdoutbufIcE4syncEv,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9showmanycEv,b5,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9underflowEv,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5uflowEv,b5,b5,b5
  ,b5,b5,b5,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE4syncEv,__ZNSt3__110__stdinbufIcE9underflowEv,__ZNSt3__110__stdinbufIcE5uflowEv,b5,b5,b5,b5,b5,__ZNKSt11logic_error4whatEv,b5,b5,__ZNKSt13runtime_error4whatEv,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,__ZNKSt3__119__iostream_category4nameEv,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13do_date_orderEv,b5,b5,b5,b5,b5,b5,__ZNKSt3__120__time_get_c_storageIcE7__weeksEv,__ZNKSt3__120__time_get_c_storageIcE8__monthsEv,__ZNKSt3__120__time_get_c_storageIcE7__am_pmEv
  ,__ZNKSt3__120__time_get_c_storageIcE3__cEv,__ZNKSt3__120__time_get_c_storageIcE3__rEv,__ZNKSt3__120__time_get_c_storageIcE3__xEv,__ZNKSt3__120__time_get_c_storageIcE3__XEv,b5,b5,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13do_date_orderEv,b5,b5,b5,b5,b5,b5,__ZNKSt3__120__time_get_c_storageIwE7__weeksEv,__ZNKSt3__120__time_get_c_storageIwE8__monthsEv,__ZNKSt3__120__time_get_c_storageIwE7__am_pmEv,__ZNKSt3__120__time_get_c_storageIwE3__cEv,__ZNKSt3__120__time_get_c_storageIwE3__rEv,__ZNKSt3__120__time_get_c_storageIwE3__xEv,__ZNKSt3__120__time_get_c_storageIwE3__XEv,b5,b5,b5,b5,b5,b5,b5,b5,__ZNKSt3__110moneypunctIcLb0EE16do_decimal_pointEv,__ZNKSt3__110moneypunctIcLb0EE16do_thousands_sepEv
  ,b5,b5,b5,b5,__ZNKSt3__110moneypunctIcLb0EE14do_frac_digitsEv,b5,b5,b5,b5,__ZNKSt3__110moneypunctIcLb1EE16do_decimal_pointEv,__ZNKSt3__110moneypunctIcLb1EE16do_thousands_sepEv,b5,b5,b5,b5,__ZNKSt3__110moneypunctIcLb1EE14do_frac_digitsEv,b5,b5,b5,b5,__ZNKSt3__110moneypunctIwLb0EE16do_decimal_pointEv,__ZNKSt3__110moneypunctIwLb0EE16do_thousands_sepEv,b5,b5,b5,b5,__ZNKSt3__110moneypunctIwLb0EE14do_frac_digitsEv,b5,b5,b5
  ,b5,__ZNKSt3__110moneypunctIwLb1EE16do_decimal_pointEv,__ZNKSt3__110moneypunctIwLb1EE16do_thousands_sepEv,b5,b5,b5,b5,__ZNKSt3__110moneypunctIwLb1EE14do_frac_digitsEv,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,__ZNKSt3__17codecvtIwc11__mbstate_tE11do_encodingEv,__ZNKSt3__17codecvtIwc11__mbstate_tE16do_always_noconvEv,b5,__ZNKSt3__17codecvtIwc11__mbstate_tE13do_max_lengthEv,b5,b5,__ZNKSt3__18numpunctIcE16do_decimal_pointEv
  ,__ZNKSt3__18numpunctIcE16do_thousands_sepEv,b5,b5,b5,b5,b5,__ZNKSt3__18numpunctIwE16do_decimal_pointEv,__ZNKSt3__18numpunctIwE16do_thousands_sepEv,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,__ZNKSt3__17codecvtIcc11__mbstate_tE11do_encodingEv,__ZNKSt3__17codecvtIcc11__mbstate_tE16do_always_noconvEv,b5,__ZNKSt3__17codecvtIcc11__mbstate_tE13do_max_lengthEv,b5,b5,b5,b5,__ZNKSt3__17codecvtIDsc11__mbstate_tE11do_encodingEv,__ZNKSt3__17codecvtIDsc11__mbstate_tE16do_always_noconvEv,b5,__ZNKSt3__17codecvtIDsc11__mbstate_tE13do_max_lengthEv,b5,b5,b5,b5,__ZNKSt3__17codecvtIDic11__mbstate_tE11do_encodingEv,__ZNKSt3__17codecvtIDic11__mbstate_tE16do_always_noconvEv,b5,__ZNKSt3__17codecvtIDic11__mbstate_tE13do_max_lengthEv,b5,b5,b5,b5,__ZNKSt8bad_cast4whatEv,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,__ZNKSt9bad_alloc4whatEv,b5,b5,b5,b5,b5,b5,__ZN10emscripten8internal13getActualTypeI7NVectorIdLi3EEEEPKNS0_7_TYPEIDEPT_,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,__ZN10emscripten8internal13getActualTypeI11ModelObjectEEPKNS0_7_TYPEIDEPT_,b5,b5,b5,__ZN10emscripten8internal7InvokerIP11ModelObjectJEE6invokeEPFS3_vE,b5,__ZNK11ModelObject6isDeadEv,b5,b5,b5,b5,b5,b5,b5,__ZNK11ModelObject5indexEv,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,__ZN10emscripten8internal13getActualTypeINSt3__16vectorI11ModelObjectNS2_9allocatorIS4_EEEEEEPKNS0_7_TYPEIDEPT_,b5,__ZN10emscripten8internal7InvokerIPNSt3__16vectorI11ModelObjectNS2_9allocatorIS4_EEEEJEE6invokeEPFS8_vE,b5,b5,b5,__ZNKSt3__16vectorI11ModelObjectNS_9allocatorIS1_EEE4sizeEv,b5,b5,b5,b5,b5,__ZN10emscripten8internal13getActualTypeI5ModelEEPKNS0_7_TYPEIDEPT_,b5,__ZN10emscripten8internal7InvokerIP5ModelJEE6invokeEPFS3_vE,b5,b5,b5,b5,b5,b5,b5,b5,b5,_pthread_mutex_unlock__wrapper,_pthread_mutex_lock__wrapper,_pthread_cond_broadcast__wrapper,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,_uselocale__wrapper,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5];
  var FUNCTION_TABLE_iidd = [b6,b6,jsCall_iidd_0,b6,jsCall_iidd_1,b6,jsCall_iidd_2,b6,jsCall_iidd_3,b6,jsCall_iidd_4,b6,jsCall_iidd_5,b6,jsCall_iidd_6,b6,jsCall_iidd_7,b6,jsCall_iidd_8,b6,jsCall_iidd_9,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZN10emscripten8internal7InvokerIP7NVectorIdLi3EEJddEE6invokeEPFS4_ddEdd,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6];
  var FUNCTION_TABLE_iiiiiiiiiiii = [b7,b7,jsCall_iiiiiiiiiiii_0,b7,jsCall_iiiiiiiiiiii_1,b7,jsCall_iiiiiiiiiiii_2,b7,jsCall_iiiiiiiiiiii_3,b7,jsCall_iiiiiiiiiiii_4,b7,jsCall_iiiiiiiiiiii_5,b7,jsCall_iiiiiiiiiiii_6,b7,jsCall_iiiiiiiiiiii_7,b7,jsCall_iiiiiiiiiiii_8,b7,jsCall_iiiiiiiiiiii_9,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,__ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIcEERNS_10unique_ptrIcPFvPvEEERPcSM_,b7,b7,b7,__ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIwEERNS_10unique_ptrIwPFvPvEEERPwSM_
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7];
  var FUNCTION_TABLE_iiii = [b8,b8,jsCall_iiii_0,b8,jsCall_iiii_1,b8,jsCall_iiii_2,b8,jsCall_iiii_3,b8,jsCall_iiii_4,b8,jsCall_iiii_5,b8,jsCall_iiii_6,b8,jsCall_iiii_7,b8,jsCall_iiii_8,b8,jsCall_iiii_9,b8,b8,b8,b8,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6setbufEPwi,b8,b8,b8
  ,b8,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6xsgetnEPwi,b8,b8,b8,__ZNSt3__111__stdoutbufIwE6xsputnEPKwi,b8,b8,b8,b8,b8,b8,b8,b8,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6xsputnEPKwi,b8,b8,b8,b8,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6setbufEPci,b8,b8,b8,b8,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6xsgetnEPci,b8,b8,b8,__ZNSt3__111__stdoutbufIcE6xsputnEPKci,b8
  ,b8,b8,b8,b8,b8,b8,b8,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6xsputnEPKci,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,__ZNKSt3__114error_category10equivalentEiRKNS_15error_conditionE,__ZNKSt3__114error_category10equivalentERKNS_10error_codeEi,b8,b8,b8,b8,b8,b8,__ZNKSt3__17collateIcE7do_hashEPKcS3_,b8,b8,b8
  ,b8,__ZNKSt3__17collateIwE7do_hashEPKwS3_,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,__ZNKSt3__18messagesIcE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE,b8
  ,b8,b8,b8,__ZNKSt3__18messagesIwE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE,b8,b8,b8,b8,b8,b8,b8,__ZNKSt3__15ctypeIcE10do_toupperEPcPKc,b8,__ZNKSt3__15ctypeIcE10do_tolowerEPcPKc,b8,b8,__ZNKSt3__15ctypeIcE9do_narrowEcc,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,__ZNKSt3__15ctypeIwE5do_isEtw,b8,b8,b8,b8,__ZNKSt3__15ctypeIwE10do_toupperEPwPKw,b8,__ZNKSt3__15ctypeIwE10do_tolowerEPwPKw,b8,b8,__ZNKSt3__15ctypeIwE9do_narrowEwc,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv
  ,b8,b8,b8,b8,__ZNK10__cxxabiv119__pointer_type_info9can_catchEPKNS_16__shim_type_infoERPv,b8,__ZNK10__cxxabiv123__fundamental_type_info9can_catchEPKNS_16__shim_type_infoERPv,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,_sn_write,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,__ZN10emscripten8internal15FunctionInvokerIPFNS_3valERKNSt3__16vectorI11ModelObjectNS3_9allocatorIS5_EEEEjES2_SA_JjEE6invokeEPSC_PS8_j,__ZN10emscripten8internal12VectorAccessINSt3__16vectorI11ModelObjectNS2_9allocatorIS4_EEEEE3setERS7_jRKS4_,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,_newlocale__wrapper,__ZNSt3__110__sscanf_lEPKcP15__locale_structS1_z,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,_do_read,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8];
  var FUNCTION_TABLE_viiiiiiiiiiiiiii = [b9,b9,jsCall_viiiiiiiiiiiiiii_0,b9,jsCall_viiiiiiiiiiiiiii_1,b9,jsCall_viiiiiiiiiiiiiii_2,b9,jsCall_viiiiiiiiiiiiiii_3,b9,jsCall_viiiiiiiiiiiiiii_4,b9,jsCall_viiiiiiiiiiiiiii_5,b9,jsCall_viiiiiiiiiiiiiii_6,b9,jsCall_viiiiiiiiiiiiiii_7,b9,jsCall_viiiiiiiiiiiiiii_8,b9,jsCall_viiiiiiiiiiiiiii_9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,__ZNSt3__111__money_putIcE8__formatEPcRS2_S3_jPKcS5_RKNS_5ctypeIcEEbRKNS_10money_base7patternEccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESL_SL_i,b9,__ZNSt3__111__money_putIwE8__formatEPwRS2_S3_jPKwS5_RKNS_5ctypeIwEEbRKNS_10money_base7patternEwwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNSE_IwNSF_IwEENSH_IwEEEESQ_i,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9];
  var FUNCTION_TABLE_viiiiid = [b10,b10,jsCall_viiiiid_0,b10,jsCall_viiiiid_1,b10,jsCall_viiiiid_2,b10,jsCall_viiiiid_3,b10,jsCall_viiiiid_4,b10,jsCall_viiiiid_5,b10,jsCall_viiiiid_6,b10,jsCall_viiiiid_7,b10,jsCall_viiiiid_8,b10,jsCall_viiiiid_9,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcd,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEce,b10,b10,b10,b10,b10,b10,b10,b10,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwd,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwe,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10];
  var FUNCTION_TABLE_viiiiiiii = [b11,b11,jsCall_viiiiiiii_0,b11,jsCall_viiiiiiii_1,b11,jsCall_viiiiiiii_2,b11,jsCall_viiiiiiii_3,b11,jsCall_viiiiiiii_4,b11,jsCall_viiiiiiii_5,b11,jsCall_viiiiiiii_6,b11,jsCall_viiiiiiii_7,b11,jsCall_viiiiiiii_8,b11,jsCall_viiiiiiii_9,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,__ZNKSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPK2tmcc,b11,b11,__ZNKSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPK2tmcc,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,__ZNKSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe,__ZNKSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIcS3_NS_9allocatorIcEEEE,b11,b11,__ZNKSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe,__ZNKSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIwS3_NS_9allocatorIwEEEE,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11];
  var FUNCTION_TABLE_viiiiii = [b12,b12,jsCall_viiiiii_0,b12,jsCall_viiiiii_1,b12,jsCall_viiiiii_2,b12,jsCall_viiiiii_3,b12,jsCall_viiiiii_4,b12,jsCall_viiiiii_5,b12,jsCall_viiiiii_6,b12,jsCall_viiiiii_7,b12,jsCall_viiiiii_8,b12,jsCall_viiiiii_9,b12,b12,b12,b12,b12,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE7seekoffExNS_8ios_base7seekdirEj,b12,b12
  ,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE7seekoffExNS_8ios_base7seekdirEj,b12,b12,b12,b12,b12,b12,b12,b12,b12
  ,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
  ,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
  ,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
  ,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcb,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcl,b12,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcm,b12,b12,b12,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPKv,b12,b12,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwb,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwl,b12,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwm,b12,b12,b12,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPKv,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
  ,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
  ,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
  ,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,__ZNKSt3__18messagesIcE6do_getEiiiRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE
  ,b12,b12,b12,b12,__ZNKSt3__18messagesIwE6do_getEiiiRKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEE,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
  ,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
  ,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
  ,__ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,b12,b12,b12,b12,b12,b12,b12,__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,b12,b12,b12,__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
  ,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
  ,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
  ,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj,b12,b12
  ,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
  ,b12,b12,b12];
  var FUNCTION_TABLE_di = [b13,b13,jsCall_di_0,b13,jsCall_di_1,b13,jsCall_di_2,b13,jsCall_di_3,b13,jsCall_di_4,b13,jsCall_di_5,b13,jsCall_di_6,b13,jsCall_di_7,b13,jsCall_di_8,b13,jsCall_di_9,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,__ZNK7NVectorIdLi3EE1xEv,b13
  ,b13,b13,__ZNK7NVectorIdLi3EE1yEv,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,__ZNK11ModelObject4massEv,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13];
  var FUNCTION_TABLE_iiiiddi = [b14,b14,jsCall_iiiiddi_0,b14,jsCall_iiiiddi_1,b14,jsCall_iiiiddi_2,b14,jsCall_iiiiddi_3,b14,jsCall_iiiiddi_4,b14,jsCall_iiiiddi_5,b14,jsCall_iiiiddi_6,b14,jsCall_iiiiddi_7,b14,jsCall_iiiiddi_8,b14,jsCall_iiiiddi_9,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,__ZN10emscripten8internal12operator_newI11ModelObjectJ7NVectorIdLi3EES4_S4_ddiEEEPT_DpT0_,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14];
  var FUNCTION_TABLE_iiiiiiiii = [b15,b15,jsCall_iiiiiiiii_0,b15,jsCall_iiiiiiiii_1,b15,jsCall_iiiiiiiii_2,b15,jsCall_iiiiiiiii_3,b15,jsCall_iiiiiiiii_4,b15,jsCall_iiiiiiiii_5,b15,jsCall_iiiiiiiii_6,b15,jsCall_iiiiiiiii_7,b15,jsCall_iiiiiiiii_8,b15,jsCall_iiiiiiiii_9,b15,b15,b15,b15,b15,b15,b15,b15
  ,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
  ,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
  ,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
  ,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
  ,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
  ,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
  ,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
  ,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
  ,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,__ZNKSt3__17codecvtIwc11__mbstate_tE6do_outERS1_PKwS5_RS5_PcS7_RS7_,__ZNKSt3__17codecvtIwc11__mbstate_tE5do_inERS1_PKcS5_RS5_PwS7_RS7_,b15,b15,b15,b15,b15,b15,b15,b15
  ,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,__ZNKSt3__17codecvtIcc11__mbstate_tE6do_outERS1_PKcS5_RS5_PcS7_RS7_,__ZNKSt3__17codecvtIcc11__mbstate_tE5do_inERS1_PKcS5_RS5_PcS7_RS7_,b15
  ,b15,b15,b15,b15,b15,__ZNKSt3__17codecvtIDsc11__mbstate_tE6do_outERS1_PKDsS5_RS5_PcS7_RS7_,__ZNKSt3__17codecvtIDsc11__mbstate_tE5do_inERS1_PKcS5_RS5_PDsS7_RS7_,b15,b15,b15,b15,b15,b15,__ZNKSt3__17codecvtIDic11__mbstate_tE6do_outERS1_PKDiS5_RS5_PcS7_RS7_,__ZNKSt3__17codecvtIDic11__mbstate_tE5do_inERS1_PKcS5_RS5_PDiS7_RS7_,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
  ,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
  ,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
  ,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
  ,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
  ,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
  ,b15,b15,b15];
  var FUNCTION_TABLE_viiiiiii = [b16,b16,jsCall_viiiiiii_0,b16,jsCall_viiiiiii_1,b16,jsCall_viiiiiii_2,b16,jsCall_viiiiiii_3,b16,jsCall_viiiiiii_4,b16,jsCall_viiiiiii_5,b16,jsCall_viiiiiii_6,b16,jsCall_viiiiiii_7,b16,jsCall_viiiiiii_8,b16,jsCall_viiiiiii_9,b16,b16,b16,b16,b16,b16,b16,b16
  ,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
  ,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
  ,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
  ,b16,b16,b16,b16,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRb,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRl,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRx,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRt,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRm,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRy,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRf,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRd,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRe,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv,b16,b16,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRb,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRl,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRx,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRt,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRm,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRy,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRf,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRd,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRe,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv,b16,b16
  ,b16,b16,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcx,b16,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcy,b16,b16,b16,b16,b16,b16,b16,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwx,b16,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwy,b16,b16,b16,b16,b16,b16,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm,b16,b16,b16,b16
  ,b16,b16,b16,b16,b16,b16,b16,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
  ,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
  ,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,__ZNKSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEcRKNS_12basic_stringIcS3_NS_9allocatorIcEEEE,b16,b16,b16,__ZNKSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwRKNS_12basic_stringIwS3_NS_9allocatorIwEEEE,b16,b16,b16,b16
  ,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
  ,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
  ,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
  ,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
  ,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
  ,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
  ,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,__ZNSt3__19__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE,b16,__ZNSt3__19__num_putIcE23__widen_and_group_floatEPcS2_S2_S2_RS2_S3_RKNS_6localeE,__ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_,__ZNSt3__19__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE,__ZNSt3__19__num_putIwE23__widen_and_group_floatEPcS2_S2_PwRS3_S4_RKNS_6localeE,__ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_,b16,b16,b16,b16,b16,b16,b16
  ,b16,__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEjjjjjj,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
  ,b16,b16,b16];
  var FUNCTION_TABLE_viiiiiid = [b17,b17,jsCall_viiiiiid_0,b17,jsCall_viiiiiid_1,b17,jsCall_viiiiiid_2,b17,jsCall_viiiiiid_3,b17,jsCall_viiiiiid_4,b17,jsCall_viiiiiid_5,b17,jsCall_viiiiiid_6,b17,jsCall_viiiiiid_7,b17,jsCall_viiiiiid_8,b17,jsCall_viiiiiid_9,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,__ZNKSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEce,b17,b17,b17,__ZNKSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwe,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17];
  var FUNCTION_TABLE_viiiiiiiii = [b18,b18,jsCall_viiiiiiiii_0,b18,jsCall_viiiiiiiii_1,b18,jsCall_viiiiiiiii_2,b18,jsCall_viiiiiiiii_3,b18,jsCall_viiiiiiiii_4,b18,jsCall_viiiiiiiii_5,b18,jsCall_viiiiiiiii_6,b18,jsCall_viiiiiiiii_7,b18,jsCall_viiiiiiiii_8,b18,jsCall_viiiiiiiii_9,b18,b18,b18,b18,b18,b18,b18,b18
  ,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
  ,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
  ,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
  ,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
  ,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc,b18,b18,b18
  ,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
  ,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
  ,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18];
  var FUNCTION_TABLE_viiiiiiiiii = [b19,b19,jsCall_viiiiiiiiii_0,b19,jsCall_viiiiiiiiii_1,b19,jsCall_viiiiiiiiii_2,b19,jsCall_viiiiiiiiii_3,b19,jsCall_viiiiiiiiii_4,b19,jsCall_viiiiiiiiii_5,b19,jsCall_viiiiiiiiii_6,b19,jsCall_viiiiiiiiii_7,b19,jsCall_viiiiiiiiii_8,b19,jsCall_viiiiiiiiii_9,b19,b19,b19,b19,b19,b19,b19,b19
  ,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
  ,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
  ,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
  ,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
  ,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
  ,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
  ,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
  ,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
  ,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
  ,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
  ,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
  ,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
  ,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
  ,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
  ,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
  ,b19,b19,__ZNSt3__111__money_putIcE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_Ri,b19,__ZNSt3__111__money_putIwE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_Ri,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
  ,b19,b19,b19];
  var FUNCTION_TABLE_iii = [b20,b20,jsCall_iii_0,b20,jsCall_iii_1,b20,jsCall_iii_2,b20,jsCall_iii_3,b20,jsCall_iii_4,b20,jsCall_iii_5,b20,jsCall_iii_6,b20,jsCall_iii_7,b20,jsCall_iii_8,b20,jsCall_iii_9,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9pbackfailEj,b20,__ZNSt3__111__stdoutbufIwE8overflowEj,b20,b20,b20,b20,b20,b20,__ZNSt3__110__stdinbufIwE9pbackfailEj,b20,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE8overflowEj,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9pbackfailEi,b20,__ZNSt3__111__stdoutbufIcE8overflowEi
  ,b20,b20,b20,b20,b20,b20,__ZNSt3__110__stdinbufIcE9pbackfailEi,b20,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE8overflowEi,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,__ZNKSt3__15ctypeIcE10do_toupperEc,b20,__ZNKSt3__15ctypeIcE10do_tolowerEc,b20,__ZNKSt3__15ctypeIcE8do_widenEc,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,__ZNKSt3__15ctypeIwE10do_toupperEw,b20,__ZNKSt3__15ctypeIwE10do_tolowerEw,b20,__ZNKSt3__15ctypeIwE8do_widenEc,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,__ZN10emscripten8internal12GetterPolicyIM11ModelObjectKFKbvEE3getIS2_EEbRKS5_RKT_,b20,b20,b20,b20,b20,b20,b20,b20,__ZN10emscripten8internal12GetterPolicyIM11ModelObjectKFKivEE3getIS2_EEiRKS5_RKT_,b20,b20,b20,__ZN10emscripten8internal12GetterPolicyIM11ModelObjectKFK7NVectorIdLi3EEvEE3getIS2_EEPS4_RKS7_RKT_,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,__ZN10emscripten8internal13MethodInvokerIMNSt3__16vectorI11ModelObjectNS2_9allocatorIS4_EEEEKFjvEjPKS7_JEE6invokeERKS9_SB_,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20];
  var FUNCTION_TABLE_iiiiii = [b21,b21,jsCall_iiiiii_0,b21,jsCall_iiiiii_1,b21,jsCall_iiiiii_2,b21,jsCall_iiiiii_3,b21,jsCall_iiiiii_4,b21,jsCall_iiiiii_5,b21,jsCall_iiiiii_6,b21,jsCall_iiiiii_7,b21,jsCall_iiiiii_8,b21,jsCall_iiiiii_9,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,__ZNKSt3__17collateIcE10do_compareEPKcS3_S3_S3_,b21,b21,b21,b21,__ZNKSt3__17collateIwE10do_compareEPKwS3_S3_S3_
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,__ZNKSt3__15ctypeIcE9do_narrowEPKcS3_cPc,b21,b21,b21,b21,__ZNKSt3__17codecvtIwc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,b21,b21,__ZNKSt3__17codecvtIwc11__mbstate_tE9do_lengthERS1_PKcS5_j,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,__ZNKSt3__15ctypeIwE9do_narrowEPKwS3_cPc,b21,b21,b21,__ZNKSt3__17codecvtIcc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_
  ,b21,b21,__ZNKSt3__17codecvtIcc11__mbstate_tE9do_lengthERS1_PKcS5_j,b21,b21,b21,b21,__ZNKSt3__17codecvtIDsc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,b21,b21,__ZNKSt3__17codecvtIDsc11__mbstate_tE9do_lengthERS1_PKcS5_j,b21,b21,b21,b21,__ZNKSt3__17codecvtIDic11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,b21,b21,__ZNKSt3__17codecvtIDic11__mbstate_tE9do_lengthERS1_PKcS5_j,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21];
  var FUNCTION_TABLE_iiiiiddi = [b22,b22,jsCall_iiiiiddi_0,b22,jsCall_iiiiiddi_1,b22,jsCall_iiiiiddi_2,b22,jsCall_iiiiiddi_3,b22,jsCall_iiiiiddi_4,b22,jsCall_iiiiiddi_5,b22,jsCall_iiiiiddi_6,b22,jsCall_iiiiiddi_7,b22,jsCall_iiiiiddi_8,b22,jsCall_iiiiiddi_9,b22,b22,b22,b22,b22,b22,b22,b22
  ,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
  ,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
  ,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
  ,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
  ,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
  ,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
  ,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
  ,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
  ,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
  ,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
  ,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
  ,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
  ,b22,b22,b22,b22,b22,b22,__ZN10emscripten8internal7InvokerIP11ModelObjectJ7NVectorIdLi3EES5_S5_ddiEE6invokeEPFS3_S5_S5_S5_ddiEPS5_S9_S9_ddi,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
  ,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
  ,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
  ,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
  ,b22,b22,b22];
  var FUNCTION_TABLE_diii = [b23,b23,jsCall_diii_0,b23,jsCall_diii_1,b23,jsCall_diii_2,b23,jsCall_diii_3,b23,jsCall_diii_4,b23,jsCall_diii_5,b23,jsCall_diii_6,b23,jsCall_diii_7,b23,jsCall_diii_8,b23,jsCall_diii_9,b23,b23,b23,b23,b23,b23,b23,b23
  ,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
  ,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
  ,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
  ,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
  ,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
  ,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
  ,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
  ,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
  ,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
  ,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
  ,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
  ,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
  ,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
  ,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
  ,b23,b23,b23,b23,b23,b23,b23,b23,b23,__ZNSt3__115__num_get_floatIfEET_PKcS3_Rj,__ZNSt3__115__num_get_floatIdEET_PKcS3_Rj,__ZNSt3__115__num_get_floatIeEET_PKcS3_Rj,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
  ,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
  ,b23,b23,b23];
  var FUNCTION_TABLE_dii = [b24,b24,jsCall_dii_0,b24,jsCall_dii_1,b24,jsCall_dii_2,b24,jsCall_dii_3,b24,jsCall_dii_4,b24,jsCall_dii_5,b24,jsCall_dii_6,b24,jsCall_dii_7,b24,jsCall_dii_8,b24,jsCall_dii_9,b24,b24,b24,b24,b24,b24,b24,b24
  ,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
  ,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
  ,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
  ,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
  ,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
  ,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
  ,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
  ,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
  ,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
  ,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
  ,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
  ,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
  ,__ZN10emscripten8internal12GetterPolicyIM7NVectorIdLi3EEKFdvEE3getIS3_EEdRKS5_RKT_,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,__ZN10emscripten8internal12GetterPolicyIM11ModelObjectKFKdvEE3getIS2_EEdRKS5_RKT_,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
  ,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
  ,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
  ,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
  ,b24,b24,b24];
  var FUNCTION_TABLE_i = [b25,b25,jsCall_i_0,b25,jsCall_i_1,b25,jsCall_i_2,b25,jsCall_i_3,b25,jsCall_i_4,b25,jsCall_i_5,b25,jsCall_i_6,b25,jsCall_i_7,b25,jsCall_i_8,b25,jsCall_i_9,b25,b25,b25,b25,b25,b25,b25,b25
  ,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
  ,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
  ,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
  ,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
  ,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
  ,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
  ,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
  ,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
  ,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
  ,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
  ,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
  ,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
  ,b25,b25,b25,b25,b25,b25,b25,b25,b25,__ZN10emscripten8internal12operator_newI11ModelObjectJEEEPT_DpT0_,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
  ,b25,b25,b25,__ZN10emscripten8internal12operator_newINSt3__16vectorI11ModelObjectNS2_9allocatorIS4_EEEEJEEEPT_DpT0_,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,__ZN10emscripten8internal12operator_newI5ModelJEEEPT_DpT0_,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
  ,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
  ,b25,b25,b25,b25,b25,b25,b25,b25,___ctype_b_loc__wrapper,___ctype_toupper_loc__wrapper,___ctype_tolower_loc__wrapper,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
  ,b25,b25,b25];
  var FUNCTION_TABLE_iiiii = [b26,b26,jsCall_iiiii_0,b26,jsCall_iiiii_1,b26,jsCall_iiiii_2,b26,jsCall_iiiii_3,b26,jsCall_iiiii_4,b26,jsCall_iiiii_5,b26,jsCall_iiiii_6,b26,jsCall_iiiii_7,b26,jsCall_iiiii_8,b26,jsCall_iiiii_9,b26,b26,b26,b26,b26,b26,b26,b26
  ,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
  ,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
  ,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
  ,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
  ,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
  ,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
  ,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
  ,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
  ,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,__ZNKSt3__15ctypeIcE8do_widenEPKcS3_Pc,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
  ,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,__ZNKSt3__15ctypeIwE5do_isEPKwS3_Pt,__ZNKSt3__15ctypeIwE10do_scan_isEtPKwS3_,__ZNKSt3__15ctypeIwE11do_scan_notEtPKwS3_,b26,b26,b26,b26,b26,__ZNKSt3__15ctypeIwE8do_widenEPKcS3_Pw,b26,b26,b26,b26,b26,b26
  ,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
  ,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
  ,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
  ,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,__ZN10emscripten8internal15FunctionInvokerIPFbRNSt3__16vectorI11ModelObjectNS2_9allocatorIS4_EEEEjRKS4_EbS8_JjSA_EE6invokeEPSC_PS7_jPS4_,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
  ,b26,b26,b26,__ZNSt3__125__num_get_signed_integralIlEET_PKcS3_Rji,__ZNSt3__125__num_get_signed_integralIxEET_PKcS3_Rji,__ZNSt3__127__num_get_unsigned_integralItEET_PKcS3_Rji,__ZNSt3__127__num_get_unsigned_integralIjEET_PKcS3_Rji,__ZNSt3__127__num_get_unsigned_integralImEET_PKcS3_Rji,__ZNSt3__127__num_get_unsigned_integralIyEET_PKcS3_Rji,b26,b26,b26,b26,b26,b26,b26,b26,__ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
  ,b26,b26,b26,b26,b26,b26,_catgets__wrapper,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
  ,b26,b26,b26];
  var FUNCTION_TABLE_viiid = [b27,b27,jsCall_viiid_0,b27,jsCall_viiid_1,b27,jsCall_viiid_2,b27,jsCall_viiid_3,b27,jsCall_viiid_4,b27,jsCall_viiid_5,b27,jsCall_viiid_6,b27,jsCall_viiid_7,b27,jsCall_viiid_8,b27,jsCall_viiid_9,b27,b27,b27,b27,b27,b27,b27,b27
  ,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
  ,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
  ,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
  ,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
  ,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
  ,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
  ,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
  ,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
  ,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
  ,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
  ,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
  ,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
  ,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
  ,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,__ZN10emscripten8internal13MethodInvokerIM5ModelFvRNSt3__16vectorI11ModelObjectNS3_9allocatorIS5_EEEEdEvPS2_JS9_dEE6invokeERKSB_SC_PS8_d,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
  ,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
  ,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
  ,b27,b27,b27];
  var FUNCTION_TABLE_viii = [b28,b28,jsCall_viii_0,b28,jsCall_viii_1,b28,jsCall_viii_2,b28,jsCall_viii_3,b28,jsCall_viii_4,b28,jsCall_viii_5,b28,jsCall_viii_6,b28,jsCall_viii_7,b28,jsCall_viii_8,b28,jsCall_viii_9,b28,b28,b28,b28,b28,b28,b28,b28
  ,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
  ,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
  ,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,__ZNKSt3__114error_category23default_error_conditionEi,b28,b28,__ZNKSt3__119__iostream_category7messageEi,b28,b28,b28,b28,b28,b28,b28,b28,b28
  ,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
  ,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
  ,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
  ,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
  ,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
  ,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
  ,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
  ,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
  ,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,___cxa_throw__wrapper,b28,b28,b28,b28,b28,b28,b28,b28,b28
  ,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,__ZN10emscripten8internal12SetterPolicyIM11ModelObjectFviEE3setIS2_EEvRKS4_RT_i,b28,b28,b28,__ZN10emscripten8internal12SetterPolicyIM11ModelObjectFv7NVectorIdLi3EEEE3setIS2_EEvRKS6_RT_PS4_,b28,b28,b28,b28
  ,b28,b28,b28,b28,b28,__ZN10emscripten8internal13MethodInvokerIMNSt3__16vectorI11ModelObjectNS2_9allocatorIS4_EEEEFvRKS4_EvPS7_JS9_EE6invokeERKSB_SC_PS4_,b28,b28,__ZN10emscripten8internal12VectorAccessINSt3__16vectorI11ModelObjectNS2_9allocatorIS4_EEEEE3getERKS7_j,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj
  ,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
  ,b28,b28,b28,b28,b28,b28,b28,__ZNSt3__16locale5__imp7installEPNS0_5facetEl,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj,b28,b28,b28,b28,b28,b28,b28
  ,b28,b28,b28];
  var FUNCTION_TABLE_v = [b29,b29,jsCall_v_0,b29,jsCall_v_1,b29,jsCall_v_2,b29,jsCall_v_3,b29,jsCall_v_4,b29,jsCall_v_5,b29,jsCall_v_6,b29,jsCall_v_7,b29,jsCall_v_8,b29,jsCall_v_9,b29,b29,b29,b29,b29,b29,b29,b29
  ,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29
  ,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29
  ,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29
  ,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29
  ,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29
  ,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29
  ,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29
  ,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29
  ,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29
  ,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29
  ,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29
  ,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29
  ,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29
  ,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,___cxa_rethrow__wrapper,___cxa_end_catch__wrapper,b29
  ,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29
  ,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,__ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv,b29,b29,b29,b29,b29,b29,b29,b29,b29
  ,b29,b29,b29];
  var FUNCTION_TABLE_viid = [b30,b30,jsCall_viid_0,b30,jsCall_viid_1,b30,jsCall_viid_2,b30,jsCall_viid_3,b30,jsCall_viid_4,b30,jsCall_viid_5,b30,jsCall_viid_6,b30,jsCall_viid_7,b30,jsCall_viid_8,b30,jsCall_viid_9,b30,b30,b30,b30,b30,b30,b30,b30
  ,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30
  ,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30
  ,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30
  ,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30
  ,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30
  ,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30
  ,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30
  ,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30
  ,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30
  ,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30
  ,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30
  ,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30
  ,b30,__ZN10emscripten8internal12SetterPolicyIM7NVectorIdLi3EEFvdEE3setIS3_EEvRKS5_RT_d,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,__ZN10emscripten8internal12SetterPolicyIM11ModelObjectFvdEE3setIS2_EEvRKS4_RT_d,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30
  ,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,__ZN5Model6UpdateERNSt3__16vectorI11ModelObjectNS0_9allocatorIS2_EEEEd,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30
  ,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30
  ,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30
  ,b30,b30,b30];
  var FUNCTION_TABLE_idd = [b31,b31,jsCall_idd_0,b31,jsCall_idd_1,b31,jsCall_idd_2,b31,jsCall_idd_3,b31,jsCall_idd_4,b31,jsCall_idd_5,b31,jsCall_idd_6,b31,jsCall_idd_7,b31,jsCall_idd_8,b31,jsCall_idd_9,b31,b31,b31,b31,b31,b31,b31,b31
  ,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31
  ,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31
  ,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31
  ,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31
  ,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31
  ,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31
  ,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31
  ,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31
  ,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31
  ,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31
  ,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31
  ,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,__ZN10emscripten8internal12operator_newI7NVectorIdLi3EEJddEEEPT_DpT0_,b31,b31
  ,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31
  ,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31
  ,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31
  ,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31
  ,b31,b31,b31];
  var FUNCTION_TABLE_viiii = [b32,b32,jsCall_viiii_0,b32,jsCall_viiii_1,b32,jsCall_viiii_2,b32,jsCall_viiii_3,b32,jsCall_viiii_4,b32,jsCall_viiii_5,b32,jsCall_viiii_6,b32,jsCall_viiii_7,b32,jsCall_viiii_8,b32,jsCall_viiii_9,b32,b32,b32,b32,b32,b32,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE7seekposENS_4fposI11__mbstate_tEEj,b32
  ,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE7seekposENS_4fposI11__mbstate_tEEj,b32,b32,b32,b32,b32,b32,b32,b32
  ,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32
  ,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,__ZNKSt3__17collateIcE12do_transformEPKcS3_,b32,b32,b32,b32
  ,__ZNKSt3__17collateIwE12do_transformEPKwS3_,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32
  ,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32
  ,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32
  ,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32
  ,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32
  ,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32
  ,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32
  ,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32
  ,b32,b32,__ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,b32,b32,b32,b32,b32,b32,b32,__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,b32,b32,b32,__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32
  ,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32
  ,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32
  ,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32
  ,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32
  ,b32,b32,b32];

    return { _i64Subtract: _i64Subtract, _free: _free, _realloc: _realloc, _i64Add: _i64Add, _memmove: _memmove, _memset: _memset, _strlen: _strlen, _malloc: _malloc, _memcpy: _memcpy, ___getTypeName: ___getTypeName, _bitshift64Lshr: _bitshift64Lshr, _bitshift64Shl: _bitshift64Shl, __GLOBAL__I_a25: __GLOBAL__I_a25, __GLOBAL__I_a46: __GLOBAL__I_a46, __GLOBAL__I_a75: __GLOBAL__I_a75, runPostSets: runPostSets, stackAlloc: stackAlloc, stackSave: stackSave, stackRestore: stackRestore, setThrew: setThrew, setTempRet0: setTempRet0, getTempRet0: getTempRet0, dynCall_iiiiiiii: dynCall_iiiiiiii, dynCall_viiiii: dynCall_viiiii, dynCall_vid: dynCall_vid, dynCall_vi: dynCall_vi, dynCall_vii: dynCall_vii, dynCall_ii: dynCall_ii, dynCall_iidd: dynCall_iidd, dynCall_iiiiiiiiiiii: dynCall_iiiiiiiiiiii, dynCall_iiii: dynCall_iiii, dynCall_viiiiiiiiiiiiiii: dynCall_viiiiiiiiiiiiiii, dynCall_viiiiid: dynCall_viiiiid, dynCall_viiiiiiii: dynCall_viiiiiiii, dynCall_viiiiii: dynCall_viiiiii, dynCall_di: dynCall_di, dynCall_iiiiddi: dynCall_iiiiddi, dynCall_iiiiiiiii: dynCall_iiiiiiiii, dynCall_viiiiiii: dynCall_viiiiiii, dynCall_viiiiiid: dynCall_viiiiiid, dynCall_viiiiiiiii: dynCall_viiiiiiiii, dynCall_viiiiiiiiii: dynCall_viiiiiiiiii, dynCall_iii: dynCall_iii, dynCall_iiiiii: dynCall_iiiiii, dynCall_iiiiiddi: dynCall_iiiiiddi, dynCall_diii: dynCall_diii, dynCall_dii: dynCall_dii, dynCall_i: dynCall_i, dynCall_iiiii: dynCall_iiiii, dynCall_viiid: dynCall_viiid, dynCall_viii: dynCall_viii, dynCall_v: dynCall_v, dynCall_viid: dynCall_viid, dynCall_idd: dynCall_idd, dynCall_viiii: dynCall_viiii };
  })
  // EMSCRIPTEN_END_ASM
  ({ "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array }, { "abort": abort, "assert": assert, "asmPrintInt": asmPrintInt, "asmPrintFloat": asmPrintFloat, "min": Math_min, "jsCall": jsCall, "nullFunc_iiiiiiii": nullFunc_iiiiiiii, "nullFunc_viiiii": nullFunc_viiiii, "nullFunc_vid": nullFunc_vid, "nullFunc_vi": nullFunc_vi, "nullFunc_vii": nullFunc_vii, "nullFunc_ii": nullFunc_ii, "nullFunc_iidd": nullFunc_iidd, "nullFunc_iiiiiiiiiiii": nullFunc_iiiiiiiiiiii, "nullFunc_iiii": nullFunc_iiii, "nullFunc_viiiiiiiiiiiiiii": nullFunc_viiiiiiiiiiiiiii, "nullFunc_viiiiid": nullFunc_viiiiid, "nullFunc_viiiiiiii": nullFunc_viiiiiiii, "nullFunc_viiiiii": nullFunc_viiiiii, "nullFunc_di": nullFunc_di, "nullFunc_iiiiddi": nullFunc_iiiiddi, "nullFunc_iiiiiiiii": nullFunc_iiiiiiiii, "nullFunc_viiiiiii": nullFunc_viiiiiii, "nullFunc_viiiiiid": nullFunc_viiiiiid, "nullFunc_viiiiiiiii": nullFunc_viiiiiiiii, "nullFunc_viiiiiiiiii": nullFunc_viiiiiiiiii, "nullFunc_iii": nullFunc_iii, "nullFunc_iiiiii": nullFunc_iiiiii, "nullFunc_iiiiiddi": nullFunc_iiiiiddi, "nullFunc_diii": nullFunc_diii, "nullFunc_dii": nullFunc_dii, "nullFunc_i": nullFunc_i, "nullFunc_iiiii": nullFunc_iiiii, "nullFunc_viiid": nullFunc_viiid, "nullFunc_viii": nullFunc_viii, "nullFunc_v": nullFunc_v, "nullFunc_viid": nullFunc_viid, "nullFunc_idd": nullFunc_idd, "nullFunc_viiii": nullFunc_viiii, "invoke_iiiiiiii": invoke_iiiiiiii, "invoke_viiiii": invoke_viiiii, "invoke_vid": invoke_vid, "invoke_vi": invoke_vi, "invoke_vii": invoke_vii, "invoke_ii": invoke_ii, "invoke_iidd": invoke_iidd, "invoke_iiiiiiiiiiii": invoke_iiiiiiiiiiii, "invoke_iiii": invoke_iiii, "invoke_viiiiiiiiiiiiiii": invoke_viiiiiiiiiiiiiii, "invoke_viiiiid": invoke_viiiiid, "invoke_viiiiiiii": invoke_viiiiiiii, "invoke_viiiiii": invoke_viiiiii, "invoke_di": invoke_di, "invoke_iiiiddi": invoke_iiiiddi, "invoke_iiiiiiiii": invoke_iiiiiiiii, "invoke_viiiiiii": invoke_viiiiiii, "invoke_viiiiiid": invoke_viiiiiid, "invoke_viiiiiiiii": invoke_viiiiiiiii, "invoke_viiiiiiiiii": invoke_viiiiiiiiii, "invoke_iii": invoke_iii, "invoke_iiiiii": invoke_iiiiii, "invoke_iiiiiddi": invoke_iiiiiddi, "invoke_diii": invoke_diii, "invoke_dii": invoke_dii, "invoke_i": invoke_i, "invoke_iiiii": invoke_iiiii, "invoke_viiid": invoke_viiid, "invoke_viii": invoke_viii, "invoke_v": invoke_v, "invoke_viid": invoke_viid, "invoke_idd": invoke_idd, "invoke_viiii": invoke_viiii, "_fabs": _fabs, "_fread": _fread, "__ZSt9terminatev": __ZSt9terminatev, "___cxa_guard_acquire": ___cxa_guard_acquire, "_fmodl": _fmodl, "__ZSt18uncaught_exceptionv": __ZSt18uncaught_exceptionv, "___ctype_toupper_loc": ___ctype_toupper_loc, "__addDays": __addDays, "_sbrk": _sbrk, "___cxa_begin_catch": ___cxa_begin_catch, "_emscripten_memcpy_big": _emscripten_memcpy_big, "_sysconf": _sysconf, "__embind_register_std_string": __embind_register_std_string, "__embind_register_class_function": __embind_register_class_function, "_write": _write, "__isLeapYear": __isLeapYear, "__embind_register_class_constructor": __embind_register_class_constructor, "__ZNSt9exceptionD2Ev": __ZNSt9exceptionD2Ev, "___cxa_atexit": ___cxa_atexit, "___cxa_does_inherit": ___cxa_does_inherit, "___cxa_rethrow": ___cxa_rethrow, "_catclose": _catclose, "_send": _send, "___cxa_is_number_type": ___cxa_is_number_type, "__embind_register_integer": __embind_register_integer, "___cxa_free_exception": ___cxa_free_exception, "___cxa_find_matching_catch": ___cxa_find_matching_catch, "___cxa_guard_release": ___cxa_guard_release, "_strerror_r": _strerror_r, "___setErrNo": ___setErrNo, "_newlocale": _newlocale, "__embind_register_bool": __embind_register_bool, "___resumeException": ___resumeException, "_freelocale": _freelocale, "___cxa_call_unexpected": ___cxa_call_unexpected, "__embind_register_emval": __embind_register_emval, "__emval_decref": __emval_decref, "__embind_register_class": __embind_register_class, "_read": _read, "_fwrite": _fwrite, "_time": _time, "_pthread_mutex_lock": _pthread_mutex_lock, "_catopen": _catopen, "_exit": _exit, "___cxa_guard_abort": ___cxa_guard_abort, "_llvm_pow_f64": _llvm_pow_f64, "___ctype_b_loc": ___ctype_b_loc, "_fmod": _fmod, "__emval_incref": __emval_incref, "___cxa_allocate_exception": ___cxa_allocate_exception, "__emval_take_value": __emval_take_value, "_pwrite": _pwrite, "_uselocale": _uselocale, "___cxa_end_catch": ___cxa_end_catch, "_strftime": _strftime, "_pthread_cond_broadcast": _pthread_cond_broadcast, "_recv": _recv, "_copysign": _copysign, "_abort": _abort, "__emval_undefined": __emval_undefined, "__embind_register_class_property": __embind_register_class_property, "_pthread_cond_wait": _pthread_cond_wait, "__embind_register_memory_view": __embind_register_memory_view, "___gxx_personality_v0": ___gxx_personality_v0, "_ungetc": _ungetc, "__embind_register_void": __embind_register_void, "_fflush": _fflush, "_strftime_l": _strftime_l, "__reallyNegative": __reallyNegative, "_catgets": _catgets, "__embind_register_std_wstring": __embind_register_std_wstring, "_fileno": _fileno, "__exit": __exit, "__arraySum": __arraySum, "___ctype_tolower_loc": ___ctype_tolower_loc, "_pthread_mutex_unlock": _pthread_mutex_unlock, "_pread": _pread, "_mkport": _mkport, "__embind_register_float": __embind_register_float, "_getc": _getc, "___errno_location": ___errno_location, "_fgetc": _fgetc, "___cxa_throw": ___cxa_throw, "_copysignl": _copysignl, "_strerror": _strerror, "_atexit": _atexit, "_sqrt": _sqrt, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "cttz_i8": cttz_i8, "ctlz_i8": ctlz_i8, "NaN": NaN, "Infinity": Infinity, "__ZTISt9exception": __ZTISt9exception, "___dso_handle": ___dso_handle, "_stderr": _stderr, "_stdin": _stdin, "_stdout": _stdout }, buffer);
  var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var _free = Module["_free"] = asm["_free"];
var _realloc = Module["_realloc"] = asm["_realloc"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _memmove = Module["_memmove"] = asm["_memmove"];
var _memset = Module["_memset"] = asm["_memset"];
var _strlen = Module["_strlen"] = asm["_strlen"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var ___getTypeName = Module["___getTypeName"] = asm["___getTypeName"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var __GLOBAL__I_a25 = Module["__GLOBAL__I_a25"] = asm["__GLOBAL__I_a25"];
var __GLOBAL__I_a46 = Module["__GLOBAL__I_a46"] = asm["__GLOBAL__I_a46"];
var __GLOBAL__I_a75 = Module["__GLOBAL__I_a75"] = asm["__GLOBAL__I_a75"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var dynCall_iiiiiiii = Module["dynCall_iiiiiiii"] = asm["dynCall_iiiiiiii"];
var dynCall_viiiii = Module["dynCall_viiiii"] = asm["dynCall_viiiii"];
var dynCall_vid = Module["dynCall_vid"] = asm["dynCall_vid"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_iidd = Module["dynCall_iidd"] = asm["dynCall_iidd"];
var dynCall_iiiiiiiiiiii = Module["dynCall_iiiiiiiiiiii"] = asm["dynCall_iiiiiiiiiiii"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_viiiiiiiiiiiiiii = Module["dynCall_viiiiiiiiiiiiiii"] = asm["dynCall_viiiiiiiiiiiiiii"];
var dynCall_viiiiid = Module["dynCall_viiiiid"] = asm["dynCall_viiiiid"];
var dynCall_viiiiiiii = Module["dynCall_viiiiiiii"] = asm["dynCall_viiiiiiii"];
var dynCall_viiiiii = Module["dynCall_viiiiii"] = asm["dynCall_viiiiii"];
var dynCall_di = Module["dynCall_di"] = asm["dynCall_di"];
var dynCall_iiiiddi = Module["dynCall_iiiiddi"] = asm["dynCall_iiiiddi"];
var dynCall_iiiiiiiii = Module["dynCall_iiiiiiiii"] = asm["dynCall_iiiiiiiii"];
var dynCall_viiiiiii = Module["dynCall_viiiiiii"] = asm["dynCall_viiiiiii"];
var dynCall_viiiiiid = Module["dynCall_viiiiiid"] = asm["dynCall_viiiiiid"];
var dynCall_viiiiiiiii = Module["dynCall_viiiiiiiii"] = asm["dynCall_viiiiiiiii"];
var dynCall_viiiiiiiiii = Module["dynCall_viiiiiiiiii"] = asm["dynCall_viiiiiiiiii"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
var dynCall_iiiiii = Module["dynCall_iiiiii"] = asm["dynCall_iiiiii"];
var dynCall_iiiiiddi = Module["dynCall_iiiiiddi"] = asm["dynCall_iiiiiddi"];
var dynCall_diii = Module["dynCall_diii"] = asm["dynCall_diii"];
var dynCall_dii = Module["dynCall_dii"] = asm["dynCall_dii"];
var dynCall_i = Module["dynCall_i"] = asm["dynCall_i"];
var dynCall_iiiii = Module["dynCall_iiiii"] = asm["dynCall_iiiii"];
var dynCall_viiid = Module["dynCall_viiid"] = asm["dynCall_viiid"];
var dynCall_viii = Module["dynCall_viii"] = asm["dynCall_viii"];
var dynCall_v = Module["dynCall_v"] = asm["dynCall_v"];
var dynCall_viid = Module["dynCall_viid"] = asm["dynCall_viid"];
var dynCall_idd = Module["dynCall_idd"] = asm["dynCall_idd"];
var dynCall_viiii = Module["dynCall_viiii"] = asm["dynCall_viiii"];
  
  Runtime.stackAlloc = asm['stackAlloc'];
  Runtime.stackSave = asm['stackSave'];
  Runtime.stackRestore = asm['stackRestore'];
  Runtime.setTempRet0 = asm['setTempRet0'];
  Runtime.getTempRet0 = asm['getTempRet0'];
  

// TODO: strip out parts of this we do not need

//======= begin closure i64 code =======

// Copyright 2009 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Defines a Long class for representing a 64-bit two's-complement
 * integer value, which faithfully simulates the behavior of a Java "long". This
 * implementation is derived from LongLib in GWT.
 *
 */

var i64Math = (function() { // Emscripten wrapper
  var goog = { math: {} };


  /**
   * Constructs a 64-bit two's-complement integer, given its low and high 32-bit
   * values as *signed* integers.  See the from* functions below for more
   * convenient ways of constructing Longs.
   *
   * The internal representation of a long is the two given signed, 32-bit values.
   * We use 32-bit pieces because these are the size of integers on which
   * Javascript performs bit-operations.  For operations like addition and
   * multiplication, we split each number into 16-bit pieces, which can easily be
   * multiplied within Javascript's floating-point representation without overflow
   * or change in sign.
   *
   * In the algorithms below, we frequently reduce the negative case to the
   * positive case by negating the input(s) and then post-processing the result.
   * Note that we must ALWAYS check specially whether those values are MIN_VALUE
   * (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as
   * a positive number, it overflows back into a negative).  Not handling this
   * case would often result in infinite recursion.
   *
   * @param {number} low  The low (signed) 32 bits of the long.
   * @param {number} high  The high (signed) 32 bits of the long.
   * @constructor
   */
  goog.math.Long = function(low, high) {
    /**
     * @type {number}
     * @private
     */
    this.low_ = low | 0;  // force into 32 signed bits.

    /**
     * @type {number}
     * @private
     */
    this.high_ = high | 0;  // force into 32 signed bits.
  };


  // NOTE: Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the
  // from* methods on which they depend.


  /**
   * A cache of the Long representations of small integer values.
   * @type {!Object}
   * @private
   */
  goog.math.Long.IntCache_ = {};


  /**
   * Returns a Long representing the given (32-bit) integer value.
   * @param {number} value The 32-bit integer in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromInt = function(value) {
    if (-128 <= value && value < 128) {
      var cachedObj = goog.math.Long.IntCache_[value];
      if (cachedObj) {
        return cachedObj;
      }
    }

    var obj = new goog.math.Long(value | 0, value < 0 ? -1 : 0);
    if (-128 <= value && value < 128) {
      goog.math.Long.IntCache_[value] = obj;
    }
    return obj;
  };


  /**
   * Returns a Long representing the given value, provided that it is a finite
   * number.  Otherwise, zero is returned.
   * @param {number} value The number in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromNumber = function(value) {
    if (isNaN(value) || !isFinite(value)) {
      return goog.math.Long.ZERO;
    } else if (value <= -goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MIN_VALUE;
    } else if (value + 1 >= goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MAX_VALUE;
    } else if (value < 0) {
      return goog.math.Long.fromNumber(-value).negate();
    } else {
      return new goog.math.Long(
          (value % goog.math.Long.TWO_PWR_32_DBL_) | 0,
          (value / goog.math.Long.TWO_PWR_32_DBL_) | 0);
    }
  };


  /**
   * Returns a Long representing the 64-bit integer that comes by concatenating
   * the given high and low bits.  Each is assumed to use 32 bits.
   * @param {number} lowBits The low 32-bits.
   * @param {number} highBits The high 32-bits.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromBits = function(lowBits, highBits) {
    return new goog.math.Long(lowBits, highBits);
  };


  /**
   * Returns a Long representation of the given string, written using the given
   * radix.
   * @param {string} str The textual representation of the Long.
   * @param {number=} opt_radix The radix in which the text is written.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromString = function(str, opt_radix) {
    if (str.length == 0) {
      throw Error('number format error: empty string');
    }

    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }

    if (str.charAt(0) == '-') {
      return goog.math.Long.fromString(str.substring(1), radix).negate();
    } else if (str.indexOf('-') >= 0) {
      throw Error('number format error: interior "-" character: ' + str);
    }

    // Do several (8) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 8));

    var result = goog.math.Long.ZERO;
    for (var i = 0; i < str.length; i += 8) {
      var size = Math.min(8, str.length - i);
      var value = parseInt(str.substring(i, i + size), radix);
      if (size < 8) {
        var power = goog.math.Long.fromNumber(Math.pow(radix, size));
        result = result.multiply(power).add(goog.math.Long.fromNumber(value));
      } else {
        result = result.multiply(radixToPower);
        result = result.add(goog.math.Long.fromNumber(value));
      }
    }
    return result;
  };


  // NOTE: the compiler should inline these constant values below and then remove
  // these variables, so there should be no runtime penalty for these.


  /**
   * Number used repeated below in calculations.  This must appear before the
   * first call to any from* function below.
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_16_DBL_ = 1 << 16;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_24_DBL_ = 1 << 24;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_32_DBL_ =
      goog.math.Long.TWO_PWR_16_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_31_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ / 2;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_48_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_64_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_32_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_63_DBL_ =
      goog.math.Long.TWO_PWR_64_DBL_ / 2;


  /** @type {!goog.math.Long} */
  goog.math.Long.ZERO = goog.math.Long.fromInt(0);


  /** @type {!goog.math.Long} */
  goog.math.Long.ONE = goog.math.Long.fromInt(1);


  /** @type {!goog.math.Long} */
  goog.math.Long.NEG_ONE = goog.math.Long.fromInt(-1);


  /** @type {!goog.math.Long} */
  goog.math.Long.MAX_VALUE =
      goog.math.Long.fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0);


  /** @type {!goog.math.Long} */
  goog.math.Long.MIN_VALUE = goog.math.Long.fromBits(0, 0x80000000 | 0);


  /**
   * @type {!goog.math.Long}
   * @private
   */
  goog.math.Long.TWO_PWR_24_ = goog.math.Long.fromInt(1 << 24);


  /** @return {number} The value, assuming it is a 32-bit integer. */
  goog.math.Long.prototype.toInt = function() {
    return this.low_;
  };


  /** @return {number} The closest floating-point representation to this value. */
  goog.math.Long.prototype.toNumber = function() {
    return this.high_ * goog.math.Long.TWO_PWR_32_DBL_ +
           this.getLowBitsUnsigned();
  };


  /**
   * @param {number=} opt_radix The radix in which the text should be written.
   * @return {string} The textual representation of this value.
   */
  goog.math.Long.prototype.toString = function(opt_radix) {
    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }

    if (this.isZero()) {
      return '0';
    }

    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        // We need to change the Long value before it can be negated, so we remove
        // the bottom-most digit in this base and then recurse to do the rest.
        var radixLong = goog.math.Long.fromNumber(radix);
        var div = this.div(radixLong);
        var rem = div.multiply(radixLong).subtract(this);
        return div.toString(radix) + rem.toInt().toString(radix);
      } else {
        return '-' + this.negate().toString(radix);
      }
    }

    // Do several (6) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 6));

    var rem = this;
    var result = '';
    while (true) {
      var remDiv = rem.div(radixToPower);
      var intval = rem.subtract(remDiv.multiply(radixToPower)).toInt();
      var digits = intval.toString(radix);

      rem = remDiv;
      if (rem.isZero()) {
        return digits + result;
      } else {
        while (digits.length < 6) {
          digits = '0' + digits;
        }
        result = '' + digits + result;
      }
    }
  };


  /** @return {number} The high 32-bits as a signed value. */
  goog.math.Long.prototype.getHighBits = function() {
    return this.high_;
  };


  /** @return {number} The low 32-bits as a signed value. */
  goog.math.Long.prototype.getLowBits = function() {
    return this.low_;
  };


  /** @return {number} The low 32-bits as an unsigned value. */
  goog.math.Long.prototype.getLowBitsUnsigned = function() {
    return (this.low_ >= 0) ?
        this.low_ : goog.math.Long.TWO_PWR_32_DBL_ + this.low_;
  };


  /**
   * @return {number} Returns the number of bits needed to represent the absolute
   *     value of this Long.
   */
  goog.math.Long.prototype.getNumBitsAbs = function() {
    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        return 64;
      } else {
        return this.negate().getNumBitsAbs();
      }
    } else {
      var val = this.high_ != 0 ? this.high_ : this.low_;
      for (var bit = 31; bit > 0; bit--) {
        if ((val & (1 << bit)) != 0) {
          break;
        }
      }
      return this.high_ != 0 ? bit + 33 : bit + 1;
    }
  };


  /** @return {boolean} Whether this value is zero. */
  goog.math.Long.prototype.isZero = function() {
    return this.high_ == 0 && this.low_ == 0;
  };


  /** @return {boolean} Whether this value is negative. */
  goog.math.Long.prototype.isNegative = function() {
    return this.high_ < 0;
  };


  /** @return {boolean} Whether this value is odd. */
  goog.math.Long.prototype.isOdd = function() {
    return (this.low_ & 1) == 1;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long equals the other.
   */
  goog.math.Long.prototype.equals = function(other) {
    return (this.high_ == other.high_) && (this.low_ == other.low_);
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long does not equal the other.
   */
  goog.math.Long.prototype.notEquals = function(other) {
    return (this.high_ != other.high_) || (this.low_ != other.low_);
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than the other.
   */
  goog.math.Long.prototype.lessThan = function(other) {
    return this.compare(other) < 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than or equal to the other.
   */
  goog.math.Long.prototype.lessThanOrEqual = function(other) {
    return this.compare(other) <= 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than the other.
   */
  goog.math.Long.prototype.greaterThan = function(other) {
    return this.compare(other) > 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than or equal to the other.
   */
  goog.math.Long.prototype.greaterThanOrEqual = function(other) {
    return this.compare(other) >= 0;
  };


  /**
   * Compares this Long with the given one.
   * @param {goog.math.Long} other Long to compare against.
   * @return {number} 0 if they are the same, 1 if the this is greater, and -1
   *     if the given one is greater.
   */
  goog.math.Long.prototype.compare = function(other) {
    if (this.equals(other)) {
      return 0;
    }

    var thisNeg = this.isNegative();
    var otherNeg = other.isNegative();
    if (thisNeg && !otherNeg) {
      return -1;
    }
    if (!thisNeg && otherNeg) {
      return 1;
    }

    // at this point, the signs are the same, so subtraction will not overflow
    if (this.subtract(other).isNegative()) {
      return -1;
    } else {
      return 1;
    }
  };


  /** @return {!goog.math.Long} The negation of this value. */
  goog.math.Long.prototype.negate = function() {
    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.MIN_VALUE;
    } else {
      return this.not().add(goog.math.Long.ONE);
    }
  };


  /**
   * Returns the sum of this and the given Long.
   * @param {goog.math.Long} other Long to add to this one.
   * @return {!goog.math.Long} The sum of this and the given Long.
   */
  goog.math.Long.prototype.add = function(other) {
    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.

    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;

    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;

    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 + b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 + b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 + b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 + b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };


  /**
   * Returns the difference of this and the given Long.
   * @param {goog.math.Long} other Long to subtract from this.
   * @return {!goog.math.Long} The difference of this and the given Long.
   */
  goog.math.Long.prototype.subtract = function(other) {
    return this.add(other.negate());
  };


  /**
   * Returns the product of this and the given long.
   * @param {goog.math.Long} other Long to multiply with this.
   * @return {!goog.math.Long} The product of this and the other.
   */
  goog.math.Long.prototype.multiply = function(other) {
    if (this.isZero()) {
      return goog.math.Long.ZERO;
    } else if (other.isZero()) {
      return goog.math.Long.ZERO;
    }

    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return other.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return this.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    }

    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().multiply(other.negate());
      } else {
        return this.negate().multiply(other).negate();
      }
    } else if (other.isNegative()) {
      return this.multiply(other.negate()).negate();
    }

    // If both longs are small, use float multiplication
    if (this.lessThan(goog.math.Long.TWO_PWR_24_) &&
        other.lessThan(goog.math.Long.TWO_PWR_24_)) {
      return goog.math.Long.fromNumber(this.toNumber() * other.toNumber());
    }

    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.
    // We can skip products that would overflow.

    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;

    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;

    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 * b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 * b00;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c16 += a00 * b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 * b00;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a16 * b16;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a00 * b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };


  /**
   * Returns this Long divided by the given one.
   * @param {goog.math.Long} other Long by which to divide.
   * @return {!goog.math.Long} This Long divided by the given one.
   */
  goog.math.Long.prototype.div = function(other) {
    if (other.isZero()) {
      throw Error('division by zero');
    } else if (this.isZero()) {
      return goog.math.Long.ZERO;
    }

    if (this.equals(goog.math.Long.MIN_VALUE)) {
      if (other.equals(goog.math.Long.ONE) ||
          other.equals(goog.math.Long.NEG_ONE)) {
        return goog.math.Long.MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE
      } else if (other.equals(goog.math.Long.MIN_VALUE)) {
        return goog.math.Long.ONE;
      } else {
        // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.
        var halfThis = this.shiftRight(1);
        var approx = halfThis.div(other).shiftLeft(1);
        if (approx.equals(goog.math.Long.ZERO)) {
          return other.isNegative() ? goog.math.Long.ONE : goog.math.Long.NEG_ONE;
        } else {
          var rem = this.subtract(other.multiply(approx));
          var result = approx.add(rem.div(other));
          return result;
        }
      }
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.ZERO;
    }

    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().div(other.negate());
      } else {
        return this.negate().div(other).negate();
      }
    } else if (other.isNegative()) {
      return this.div(other.negate()).negate();
    }

    // Repeat the following until the remainder is less than other:  find a
    // floating-point that approximates remainder / other *from below*, add this
    // into the result, and subtract it from the remainder.  It is critical that
    // the approximate value is less than or equal to the real value so that the
    // remainder never becomes negative.
    var res = goog.math.Long.ZERO;
    var rem = this;
    while (rem.greaterThanOrEqual(other)) {
      // Approximate the result of division. This may be a little greater or
      // smaller than the actual value.
      var approx = Math.max(1, Math.floor(rem.toNumber() / other.toNumber()));

      // We will tweak the approximate result by changing it in the 48-th digit or
      // the smallest non-fractional digit, whichever is larger.
      var log2 = Math.ceil(Math.log(approx) / Math.LN2);
      var delta = (log2 <= 48) ? 1 : Math.pow(2, log2 - 48);

      // Decrease the approximation until it is smaller than the remainder.  Note
      // that if it is too large, the product overflows and is negative.
      var approxRes = goog.math.Long.fromNumber(approx);
      var approxRem = approxRes.multiply(other);
      while (approxRem.isNegative() || approxRem.greaterThan(rem)) {
        approx -= delta;
        approxRes = goog.math.Long.fromNumber(approx);
        approxRem = approxRes.multiply(other);
      }

      // We know the answer can't be zero... and actually, zero would cause
      // infinite recursion since we would make no progress.
      if (approxRes.isZero()) {
        approxRes = goog.math.Long.ONE;
      }

      res = res.add(approxRes);
      rem = rem.subtract(approxRem);
    }
    return res;
  };


  /**
   * Returns this Long modulo the given one.
   * @param {goog.math.Long} other Long by which to mod.
   * @return {!goog.math.Long} This Long modulo the given one.
   */
  goog.math.Long.prototype.modulo = function(other) {
    return this.subtract(this.div(other).multiply(other));
  };


  /** @return {!goog.math.Long} The bitwise-NOT of this value. */
  goog.math.Long.prototype.not = function() {
    return goog.math.Long.fromBits(~this.low_, ~this.high_);
  };


  /**
   * Returns the bitwise-AND of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to AND.
   * @return {!goog.math.Long} The bitwise-AND of this and the other.
   */
  goog.math.Long.prototype.and = function(other) {
    return goog.math.Long.fromBits(this.low_ & other.low_,
                                   this.high_ & other.high_);
  };


  /**
   * Returns the bitwise-OR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to OR.
   * @return {!goog.math.Long} The bitwise-OR of this and the other.
   */
  goog.math.Long.prototype.or = function(other) {
    return goog.math.Long.fromBits(this.low_ | other.low_,
                                   this.high_ | other.high_);
  };


  /**
   * Returns the bitwise-XOR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to XOR.
   * @return {!goog.math.Long} The bitwise-XOR of this and the other.
   */
  goog.math.Long.prototype.xor = function(other) {
    return goog.math.Long.fromBits(this.low_ ^ other.low_,
                                   this.high_ ^ other.high_);
  };


  /**
   * Returns this Long with bits shifted to the left by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the left by the given amount.
   */
  goog.math.Long.prototype.shiftLeft = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var low = this.low_;
      if (numBits < 32) {
        var high = this.high_;
        return goog.math.Long.fromBits(
            low << numBits,
            (high << numBits) | (low >>> (32 - numBits)));
      } else {
        return goog.math.Long.fromBits(0, low << (numBits - 32));
      }
    }
  };


  /**
   * Returns this Long with bits shifted to the right by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount.
   */
  goog.math.Long.prototype.shiftRight = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >> numBits);
      } else {
        return goog.math.Long.fromBits(
            high >> (numBits - 32),
            high >= 0 ? 0 : -1);
      }
    }
  };


  /**
   * Returns this Long with bits shifted to the right by the given amount, with
   * the new top bits matching the current sign bit.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount, with
   *     zeros placed into the new leading bits.
   */
  goog.math.Long.prototype.shiftRightUnsigned = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >>> numBits);
      } else if (numBits == 32) {
        return goog.math.Long.fromBits(high, 0);
      } else {
        return goog.math.Long.fromBits(high >>> (numBits - 32), 0);
      }
    }
  };

  //======= begin jsbn =======

  var navigator = { appName: 'Modern Browser' }; // polyfill a little

  // Copyright (c) 2005  Tom Wu
  // All Rights Reserved.
  // http://www-cs-students.stanford.edu/~tjw/jsbn/

  /*
   * Copyright (c) 2003-2005  Tom Wu
   * All Rights Reserved.
   *
   * Permission is hereby granted, free of charge, to any person obtaining
   * a copy of this software and associated documentation files (the
   * "Software"), to deal in the Software without restriction, including
   * without limitation the rights to use, copy, modify, merge, publish,
   * distribute, sublicense, and/or sell copies of the Software, and to
   * permit persons to whom the Software is furnished to do so, subject to
   * the following conditions:
   *
   * The above copyright notice and this permission notice shall be
   * included in all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS-IS" AND WITHOUT WARRANTY OF ANY KIND, 
   * EXPRESS, IMPLIED OR OTHERWISE, INCLUDING WITHOUT LIMITATION, ANY 
   * WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.  
   *
   * IN NO EVENT SHALL TOM WU BE LIABLE FOR ANY SPECIAL, INCIDENTAL,
   * INDIRECT OR CONSEQUENTIAL DAMAGES OF ANY KIND, OR ANY DAMAGES WHATSOEVER
   * RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER OR NOT ADVISED OF
   * THE POSSIBILITY OF DAMAGE, AND ON ANY THEORY OF LIABILITY, ARISING OUT
   * OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
   *
   * In addition, the following condition applies:
   *
   * All redistributions must retain an intact copy of this copyright notice
   * and disclaimer.
   */

  // Basic JavaScript BN library - subset useful for RSA encryption.

  // Bits per digit
  var dbits;

  // JavaScript engine analysis
  var canary = 0xdeadbeefcafe;
  var j_lm = ((canary&0xffffff)==0xefcafe);

  // (public) Constructor
  function BigInteger(a,b,c) {
    if(a != null)
      if("number" == typeof a) this.fromNumber(a,b,c);
      else if(b == null && "string" != typeof a) this.fromString(a,256);
      else this.fromString(a,b);
  }

  // return new, unset BigInteger
  function nbi() { return new BigInteger(null); }

  // am: Compute w_j += (x*this_i), propagate carries,
  // c is initial carry, returns final carry.
  // c < 3*dvalue, x < 2*dvalue, this_i < dvalue
  // We need to select the fastest one that works in this environment.

  // am1: use a single mult and divide to get the high bits,
  // max digit bits should be 26 because
  // max internal value = 2*dvalue^2-2*dvalue (< 2^53)
  function am1(i,x,w,j,c,n) {
    while(--n >= 0) {
      var v = x*this[i++]+w[j]+c;
      c = Math.floor(v/0x4000000);
      w[j++] = v&0x3ffffff;
    }
    return c;
  }
  // am2 avoids a big mult-and-extract completely.
  // Max digit bits should be <= 30 because we do bitwise ops
  // on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)
  function am2(i,x,w,j,c,n) {
    var xl = x&0x7fff, xh = x>>15;
    while(--n >= 0) {
      var l = this[i]&0x7fff;
      var h = this[i++]>>15;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x7fff)<<15)+w[j]+(c&0x3fffffff);
      c = (l>>>30)+(m>>>15)+xh*h+(c>>>30);
      w[j++] = l&0x3fffffff;
    }
    return c;
  }
  // Alternately, set max digit bits to 28 since some
  // browsers slow down when dealing with 32-bit numbers.
  function am3(i,x,w,j,c,n) {
    var xl = x&0x3fff, xh = x>>14;
    while(--n >= 0) {
      var l = this[i]&0x3fff;
      var h = this[i++]>>14;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x3fff)<<14)+w[j]+c;
      c = (l>>28)+(m>>14)+xh*h;
      w[j++] = l&0xfffffff;
    }
    return c;
  }
  if(j_lm && (navigator.appName == "Microsoft Internet Explorer")) {
    BigInteger.prototype.am = am2;
    dbits = 30;
  }
  else if(j_lm && (navigator.appName != "Netscape")) {
    BigInteger.prototype.am = am1;
    dbits = 26;
  }
  else { // Mozilla/Netscape seems to prefer am3
    BigInteger.prototype.am = am3;
    dbits = 28;
  }

  BigInteger.prototype.DB = dbits;
  BigInteger.prototype.DM = ((1<<dbits)-1);
  BigInteger.prototype.DV = (1<<dbits);

  var BI_FP = 52;
  BigInteger.prototype.FV = Math.pow(2,BI_FP);
  BigInteger.prototype.F1 = BI_FP-dbits;
  BigInteger.prototype.F2 = 2*dbits-BI_FP;

  // Digit conversions
  var BI_RM = "0123456789abcdefghijklmnopqrstuvwxyz";
  var BI_RC = new Array();
  var rr,vv;
  rr = "0".charCodeAt(0);
  for(vv = 0; vv <= 9; ++vv) BI_RC[rr++] = vv;
  rr = "a".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;
  rr = "A".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;

  function int2char(n) { return BI_RM.charAt(n); }
  function intAt(s,i) {
    var c = BI_RC[s.charCodeAt(i)];
    return (c==null)?-1:c;
  }

  // (protected) copy this to r
  function bnpCopyTo(r) {
    for(var i = this.t-1; i >= 0; --i) r[i] = this[i];
    r.t = this.t;
    r.s = this.s;
  }

  // (protected) set from integer value x, -DV <= x < DV
  function bnpFromInt(x) {
    this.t = 1;
    this.s = (x<0)?-1:0;
    if(x > 0) this[0] = x;
    else if(x < -1) this[0] = x+DV;
    else this.t = 0;
  }

  // return bigint initialized to value
  function nbv(i) { var r = nbi(); r.fromInt(i); return r; }

  // (protected) set from string and radix
  function bnpFromString(s,b) {
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 256) k = 8; // byte array
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else { this.fromRadix(s,b); return; }
    this.t = 0;
    this.s = 0;
    var i = s.length, mi = false, sh = 0;
    while(--i >= 0) {
      var x = (k==8)?s[i]&0xff:intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-") mi = true;
        continue;
      }
      mi = false;
      if(sh == 0)
        this[this.t++] = x;
      else if(sh+k > this.DB) {
        this[this.t-1] |= (x&((1<<(this.DB-sh))-1))<<sh;
        this[this.t++] = (x>>(this.DB-sh));
      }
      else
        this[this.t-1] |= x<<sh;
      sh += k;
      if(sh >= this.DB) sh -= this.DB;
    }
    if(k == 8 && (s[0]&0x80) != 0) {
      this.s = -1;
      if(sh > 0) this[this.t-1] |= ((1<<(this.DB-sh))-1)<<sh;
    }
    this.clamp();
    if(mi) BigInteger.ZERO.subTo(this,this);
  }

  // (protected) clamp off excess high words
  function bnpClamp() {
    var c = this.s&this.DM;
    while(this.t > 0 && this[this.t-1] == c) --this.t;
  }

  // (public) return string representation in given radix
  function bnToString(b) {
    if(this.s < 0) return "-"+this.negate().toString(b);
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else return this.toRadix(b);
    var km = (1<<k)-1, d, m = false, r = "", i = this.t;
    var p = this.DB-(i*this.DB)%k;
    if(i-- > 0) {
      if(p < this.DB && (d = this[i]>>p) > 0) { m = true; r = int2char(d); }
      while(i >= 0) {
        if(p < k) {
          d = (this[i]&((1<<p)-1))<<(k-p);
          d |= this[--i]>>(p+=this.DB-k);
        }
        else {
          d = (this[i]>>(p-=k))&km;
          if(p <= 0) { p += this.DB; --i; }
        }
        if(d > 0) m = true;
        if(m) r += int2char(d);
      }
    }
    return m?r:"0";
  }

  // (public) -this
  function bnNegate() { var r = nbi(); BigInteger.ZERO.subTo(this,r); return r; }

  // (public) |this|
  function bnAbs() { return (this.s<0)?this.negate():this; }

  // (public) return + if this > a, - if this < a, 0 if equal
  function bnCompareTo(a) {
    var r = this.s-a.s;
    if(r != 0) return r;
    var i = this.t;
    r = i-a.t;
    if(r != 0) return (this.s<0)?-r:r;
    while(--i >= 0) if((r=this[i]-a[i]) != 0) return r;
    return 0;
  }

  // returns bit length of the integer x
  function nbits(x) {
    var r = 1, t;
    if((t=x>>>16) != 0) { x = t; r += 16; }
    if((t=x>>8) != 0) { x = t; r += 8; }
    if((t=x>>4) != 0) { x = t; r += 4; }
    if((t=x>>2) != 0) { x = t; r += 2; }
    if((t=x>>1) != 0) { x = t; r += 1; }
    return r;
  }

  // (public) return the number of bits in "this"
  function bnBitLength() {
    if(this.t <= 0) return 0;
    return this.DB*(this.t-1)+nbits(this[this.t-1]^(this.s&this.DM));
  }

  // (protected) r = this << n*DB
  function bnpDLShiftTo(n,r) {
    var i;
    for(i = this.t-1; i >= 0; --i) r[i+n] = this[i];
    for(i = n-1; i >= 0; --i) r[i] = 0;
    r.t = this.t+n;
    r.s = this.s;
  }

  // (protected) r = this >> n*DB
  function bnpDRShiftTo(n,r) {
    for(var i = n; i < this.t; ++i) r[i-n] = this[i];
    r.t = Math.max(this.t-n,0);
    r.s = this.s;
  }

  // (protected) r = this << n
  function bnpLShiftTo(n,r) {
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<cbs)-1;
    var ds = Math.floor(n/this.DB), c = (this.s<<bs)&this.DM, i;
    for(i = this.t-1; i >= 0; --i) {
      r[i+ds+1] = (this[i]>>cbs)|c;
      c = (this[i]&bm)<<bs;
    }
    for(i = ds-1; i >= 0; --i) r[i] = 0;
    r[ds] = c;
    r.t = this.t+ds+1;
    r.s = this.s;
    r.clamp();
  }

  // (protected) r = this >> n
  function bnpRShiftTo(n,r) {
    r.s = this.s;
    var ds = Math.floor(n/this.DB);
    if(ds >= this.t) { r.t = 0; return; }
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<bs)-1;
    r[0] = this[ds]>>bs;
    for(var i = ds+1; i < this.t; ++i) {
      r[i-ds-1] |= (this[i]&bm)<<cbs;
      r[i-ds] = this[i]>>bs;
    }
    if(bs > 0) r[this.t-ds-1] |= (this.s&bm)<<cbs;
    r.t = this.t-ds;
    r.clamp();
  }

  // (protected) r = this - a
  function bnpSubTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]-a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c -= a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c -= a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c -= a.s;
    }
    r.s = (c<0)?-1:0;
    if(c < -1) r[i++] = this.DV+c;
    else if(c > 0) r[i++] = c;
    r.t = i;
    r.clamp();
  }

  // (protected) r = this * a, r != this,a (HAC 14.12)
  // "this" should be the larger one if appropriate.
  function bnpMultiplyTo(a,r) {
    var x = this.abs(), y = a.abs();
    var i = x.t;
    r.t = i+y.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < y.t; ++i) r[i+x.t] = x.am(0,y[i],r,i,0,x.t);
    r.s = 0;
    r.clamp();
    if(this.s != a.s) BigInteger.ZERO.subTo(r,r);
  }

  // (protected) r = this^2, r != this (HAC 14.16)
  function bnpSquareTo(r) {
    var x = this.abs();
    var i = r.t = 2*x.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < x.t-1; ++i) {
      var c = x.am(i,x[i],r,2*i,0,1);
      if((r[i+x.t]+=x.am(i+1,2*x[i],r,2*i+1,c,x.t-i-1)) >= x.DV) {
        r[i+x.t] -= x.DV;
        r[i+x.t+1] = 1;
      }
    }
    if(r.t > 0) r[r.t-1] += x.am(i,x[i],r,2*i,0,1);
    r.s = 0;
    r.clamp();
  }

  // (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)
  // r != q, this != m.  q or r may be null.
  function bnpDivRemTo(m,q,r) {
    var pm = m.abs();
    if(pm.t <= 0) return;
    var pt = this.abs();
    if(pt.t < pm.t) {
      if(q != null) q.fromInt(0);
      if(r != null) this.copyTo(r);
      return;
    }
    if(r == null) r = nbi();
    var y = nbi(), ts = this.s, ms = m.s;
    var nsh = this.DB-nbits(pm[pm.t-1]);	// normalize modulus
    if(nsh > 0) { pm.lShiftTo(nsh,y); pt.lShiftTo(nsh,r); }
    else { pm.copyTo(y); pt.copyTo(r); }
    var ys = y.t;
    var y0 = y[ys-1];
    if(y0 == 0) return;
    var yt = y0*(1<<this.F1)+((ys>1)?y[ys-2]>>this.F2:0);
    var d1 = this.FV/yt, d2 = (1<<this.F1)/yt, e = 1<<this.F2;
    var i = r.t, j = i-ys, t = (q==null)?nbi():q;
    y.dlShiftTo(j,t);
    if(r.compareTo(t) >= 0) {
      r[r.t++] = 1;
      r.subTo(t,r);
    }
    BigInteger.ONE.dlShiftTo(ys,t);
    t.subTo(y,y);	// "negative" y so we can replace sub with am later
    while(y.t < ys) y[y.t++] = 0;
    while(--j >= 0) {
      // Estimate quotient digit
      var qd = (r[--i]==y0)?this.DM:Math.floor(r[i]*d1+(r[i-1]+e)*d2);
      if((r[i]+=y.am(0,qd,r,j,0,ys)) < qd) {	// Try it out
        y.dlShiftTo(j,t);
        r.subTo(t,r);
        while(r[i] < --qd) r.subTo(t,r);
      }
    }
    if(q != null) {
      r.drShiftTo(ys,q);
      if(ts != ms) BigInteger.ZERO.subTo(q,q);
    }
    r.t = ys;
    r.clamp();
    if(nsh > 0) r.rShiftTo(nsh,r);	// Denormalize remainder
    if(ts < 0) BigInteger.ZERO.subTo(r,r);
  }

  // (public) this mod a
  function bnMod(a) {
    var r = nbi();
    this.abs().divRemTo(a,null,r);
    if(this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) a.subTo(r,r);
    return r;
  }

  // Modular reduction using "classic" algorithm
  function Classic(m) { this.m = m; }
  function cConvert(x) {
    if(x.s < 0 || x.compareTo(this.m) >= 0) return x.mod(this.m);
    else return x;
  }
  function cRevert(x) { return x; }
  function cReduce(x) { x.divRemTo(this.m,null,x); }
  function cMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }
  function cSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

  Classic.prototype.convert = cConvert;
  Classic.prototype.revert = cRevert;
  Classic.prototype.reduce = cReduce;
  Classic.prototype.mulTo = cMulTo;
  Classic.prototype.sqrTo = cSqrTo;

  // (protected) return "-1/this % 2^DB"; useful for Mont. reduction
  // justification:
  //         xy == 1 (mod m)
  //         xy =  1+km
  //   xy(2-xy) = (1+km)(1-km)
  // x[y(2-xy)] = 1-k^2m^2
  // x[y(2-xy)] == 1 (mod m^2)
  // if y is 1/x mod m, then y(2-xy) is 1/x mod m^2
  // should reduce x and y(2-xy) by m^2 at each step to keep size bounded.
  // JS multiply "overflows" differently from C/C++, so care is needed here.
  function bnpInvDigit() {
    if(this.t < 1) return 0;
    var x = this[0];
    if((x&1) == 0) return 0;
    var y = x&3;		// y == 1/x mod 2^2
    y = (y*(2-(x&0xf)*y))&0xf;	// y == 1/x mod 2^4
    y = (y*(2-(x&0xff)*y))&0xff;	// y == 1/x mod 2^8
    y = (y*(2-(((x&0xffff)*y)&0xffff)))&0xffff;	// y == 1/x mod 2^16
    // last step - calculate inverse mod DV directly;
    // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints
    y = (y*(2-x*y%this.DV))%this.DV;		// y == 1/x mod 2^dbits
    // we really want the negative inverse, and -DV < y < DV
    return (y>0)?this.DV-y:-y;
  }

  // Montgomery reduction
  function Montgomery(m) {
    this.m = m;
    this.mp = m.invDigit();
    this.mpl = this.mp&0x7fff;
    this.mph = this.mp>>15;
    this.um = (1<<(m.DB-15))-1;
    this.mt2 = 2*m.t;
  }

  // xR mod m
  function montConvert(x) {
    var r = nbi();
    x.abs().dlShiftTo(this.m.t,r);
    r.divRemTo(this.m,null,r);
    if(x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) this.m.subTo(r,r);
    return r;
  }

  // x/R mod m
  function montRevert(x) {
    var r = nbi();
    x.copyTo(r);
    this.reduce(r);
    return r;
  }

  // x = x/R mod m (HAC 14.32)
  function montReduce(x) {
    while(x.t <= this.mt2)	// pad x so am has enough room later
      x[x.t++] = 0;
    for(var i = 0; i < this.m.t; ++i) {
      // faster way of calculating u0 = x[i]*mp mod DV
      var j = x[i]&0x7fff;
      var u0 = (j*this.mpl+(((j*this.mph+(x[i]>>15)*this.mpl)&this.um)<<15))&x.DM;
      // use am to combine the multiply-shift-add into one call
      j = i+this.m.t;
      x[j] += this.m.am(0,u0,x,i,0,this.m.t);
      // propagate carry
      while(x[j] >= x.DV) { x[j] -= x.DV; x[++j]++; }
    }
    x.clamp();
    x.drShiftTo(this.m.t,x);
    if(x.compareTo(this.m) >= 0) x.subTo(this.m,x);
  }

  // r = "x^2/R mod m"; x != r
  function montSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

  // r = "xy/R mod m"; x,y != r
  function montMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }

  Montgomery.prototype.convert = montConvert;
  Montgomery.prototype.revert = montRevert;
  Montgomery.prototype.reduce = montReduce;
  Montgomery.prototype.mulTo = montMulTo;
  Montgomery.prototype.sqrTo = montSqrTo;

  // (protected) true iff this is even
  function bnpIsEven() { return ((this.t>0)?(this[0]&1):this.s) == 0; }

  // (protected) this^e, e < 2^32, doing sqr and mul with "r" (HAC 14.79)
  function bnpExp(e,z) {
    if(e > 0xffffffff || e < 1) return BigInteger.ONE;
    var r = nbi(), r2 = nbi(), g = z.convert(this), i = nbits(e)-1;
    g.copyTo(r);
    while(--i >= 0) {
      z.sqrTo(r,r2);
      if((e&(1<<i)) > 0) z.mulTo(r2,g,r);
      else { var t = r; r = r2; r2 = t; }
    }
    return z.revert(r);
  }

  // (public) this^e % m, 0 <= e < 2^32
  function bnModPowInt(e,m) {
    var z;
    if(e < 256 || m.isEven()) z = new Classic(m); else z = new Montgomery(m);
    return this.exp(e,z);
  }

  // protected
  BigInteger.prototype.copyTo = bnpCopyTo;
  BigInteger.prototype.fromInt = bnpFromInt;
  BigInteger.prototype.fromString = bnpFromString;
  BigInteger.prototype.clamp = bnpClamp;
  BigInteger.prototype.dlShiftTo = bnpDLShiftTo;
  BigInteger.prototype.drShiftTo = bnpDRShiftTo;
  BigInteger.prototype.lShiftTo = bnpLShiftTo;
  BigInteger.prototype.rShiftTo = bnpRShiftTo;
  BigInteger.prototype.subTo = bnpSubTo;
  BigInteger.prototype.multiplyTo = bnpMultiplyTo;
  BigInteger.prototype.squareTo = bnpSquareTo;
  BigInteger.prototype.divRemTo = bnpDivRemTo;
  BigInteger.prototype.invDigit = bnpInvDigit;
  BigInteger.prototype.isEven = bnpIsEven;
  BigInteger.prototype.exp = bnpExp;

  // public
  BigInteger.prototype.toString = bnToString;
  BigInteger.prototype.negate = bnNegate;
  BigInteger.prototype.abs = bnAbs;
  BigInteger.prototype.compareTo = bnCompareTo;
  BigInteger.prototype.bitLength = bnBitLength;
  BigInteger.prototype.mod = bnMod;
  BigInteger.prototype.modPowInt = bnModPowInt;

  // "constants"
  BigInteger.ZERO = nbv(0);
  BigInteger.ONE = nbv(1);

  // jsbn2 stuff

  // (protected) convert from radix string
  function bnpFromRadix(s,b) {
    this.fromInt(0);
    if(b == null) b = 10;
    var cs = this.chunkSize(b);
    var d = Math.pow(b,cs), mi = false, j = 0, w = 0;
    for(var i = 0; i < s.length; ++i) {
      var x = intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-" && this.signum() == 0) mi = true;
        continue;
      }
      w = b*w+x;
      if(++j >= cs) {
        this.dMultiply(d);
        this.dAddOffset(w,0);
        j = 0;
        w = 0;
      }
    }
    if(j > 0) {
      this.dMultiply(Math.pow(b,j));
      this.dAddOffset(w,0);
    }
    if(mi) BigInteger.ZERO.subTo(this,this);
  }

  // (protected) return x s.t. r^x < DV
  function bnpChunkSize(r) { return Math.floor(Math.LN2*this.DB/Math.log(r)); }

  // (public) 0 if this == 0, 1 if this > 0
  function bnSigNum() {
    if(this.s < 0) return -1;
    else if(this.t <= 0 || (this.t == 1 && this[0] <= 0)) return 0;
    else return 1;
  }

  // (protected) this *= n, this >= 0, 1 < n < DV
  function bnpDMultiply(n) {
    this[this.t] = this.am(0,n-1,this,0,0,this.t);
    ++this.t;
    this.clamp();
  }

  // (protected) this += n << w words, this >= 0
  function bnpDAddOffset(n,w) {
    if(n == 0) return;
    while(this.t <= w) this[this.t++] = 0;
    this[w] += n;
    while(this[w] >= this.DV) {
      this[w] -= this.DV;
      if(++w >= this.t) this[this.t++] = 0;
      ++this[w];
    }
  }

  // (protected) convert to radix string
  function bnpToRadix(b) {
    if(b == null) b = 10;
    if(this.signum() == 0 || b < 2 || b > 36) return "0";
    var cs = this.chunkSize(b);
    var a = Math.pow(b,cs);
    var d = nbv(a), y = nbi(), z = nbi(), r = "";
    this.divRemTo(d,y,z);
    while(y.signum() > 0) {
      r = (a+z.intValue()).toString(b).substr(1) + r;
      y.divRemTo(d,y,z);
    }
    return z.intValue().toString(b) + r;
  }

  // (public) return value as integer
  function bnIntValue() {
    if(this.s < 0) {
      if(this.t == 1) return this[0]-this.DV;
      else if(this.t == 0) return -1;
    }
    else if(this.t == 1) return this[0];
    else if(this.t == 0) return 0;
    // assumes 16 < DB < 32
    return ((this[1]&((1<<(32-this.DB))-1))<<this.DB)|this[0];
  }

  // (protected) r = this + a
  function bnpAddTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]+a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c += a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c += a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += a.s;
    }
    r.s = (c<0)?-1:0;
    if(c > 0) r[i++] = c;
    else if(c < -1) r[i++] = this.DV+c;
    r.t = i;
    r.clamp();
  }

  BigInteger.prototype.fromRadix = bnpFromRadix;
  BigInteger.prototype.chunkSize = bnpChunkSize;
  BigInteger.prototype.signum = bnSigNum;
  BigInteger.prototype.dMultiply = bnpDMultiply;
  BigInteger.prototype.dAddOffset = bnpDAddOffset;
  BigInteger.prototype.toRadix = bnpToRadix;
  BigInteger.prototype.intValue = bnIntValue;
  BigInteger.prototype.addTo = bnpAddTo;

  //======= end jsbn =======

  // Emscripten wrapper
  var Wrapper = {
    abs: function(l, h) {
      var x = new goog.math.Long(l, h);
      var ret;
      if (x.isNegative()) {
        ret = x.negate();
      } else {
        ret = x;
      }
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
    },
    ensureTemps: function() {
      if (Wrapper.ensuredTemps) return;
      Wrapper.ensuredTemps = true;
      Wrapper.two32 = new BigInteger();
      Wrapper.two32.fromString('4294967296', 10);
      Wrapper.two64 = new BigInteger();
      Wrapper.two64.fromString('18446744073709551616', 10);
      Wrapper.temp1 = new BigInteger();
      Wrapper.temp2 = new BigInteger();
    },
    lh2bignum: function(l, h) {
      var a = new BigInteger();
      a.fromString(h.toString(), 10);
      var b = new BigInteger();
      a.multiplyTo(Wrapper.two32, b);
      var c = new BigInteger();
      c.fromString(l.toString(), 10);
      var d = new BigInteger();
      c.addTo(b, d);
      return d;
    },
    stringify: function(l, h, unsigned) {
      var ret = new goog.math.Long(l, h).toString();
      if (unsigned && ret[0] == '-') {
        // unsign slowly using jsbn bignums
        Wrapper.ensureTemps();
        var bignum = new BigInteger();
        bignum.fromString(ret, 10);
        ret = new BigInteger();
        Wrapper.two64.addTo(bignum, ret);
        ret = ret.toString(10);
      }
      return ret;
    },
    fromString: function(str, base, min, max, unsigned) {
      Wrapper.ensureTemps();
      var bignum = new BigInteger();
      bignum.fromString(str, base);
      var bigmin = new BigInteger();
      bigmin.fromString(min, 10);
      var bigmax = new BigInteger();
      bigmax.fromString(max, 10);
      if (unsigned && bignum.compareTo(BigInteger.ZERO) < 0) {
        var temp = new BigInteger();
        bignum.addTo(Wrapper.two64, temp);
        bignum = temp;
      }
      var error = false;
      if (bignum.compareTo(bigmin) < 0) {
        bignum = bigmin;
        error = true;
      } else if (bignum.compareTo(bigmax) > 0) {
        bignum = bigmax;
        error = true;
      }
      var ret = goog.math.Long.fromString(bignum.toString()); // min-max checks should have clamped this to a range goog.math.Long can handle well
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
      if (error) throw 'range error';
    }
  };
  return Wrapper;
})();

//======= end closure i64 code =======



// === Auto-generated postamble setup entry stuff ===

if (memoryInitializer) {
  if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
    var data = Module['readBinary'](memoryInitializer);
    HEAPU8.set(data, STATIC_BASE);
  } else {
    addRunDependency('memory initializer');
    Browser.asyncLoad(memoryInitializer, function(data) {
      HEAPU8.set(data, STATIC_BASE);
      removeRunDependency('memory initializer');
    }, function(data) {
      throw 'could not load memory initializer ' + memoryInitializer;
    });
  }
}

function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var preloadStartTime = null;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun'] && shouldRunNow) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = Module.callMain = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString("/bin/this.program"), 'i8', ALLOC_NORMAL) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_NORMAL);

  initialStackTop = STACKTOP;

  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
    if (!Module['noExitRuntime']) {
      exit(ret);
    }
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
      throw e;
    }
  } finally {
    calledMain = true;
  }
}




function run(args) {
  args = args || Module['arguments'];

  if (preloadStartTime === null) preloadStartTime = Date.now();

  if (runDependencies > 0) {
    Module.printErr('run() called, but dependencies remain, so not running');
    return;
  }

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    ensureInitRuntime();

    preMain();

    if (ENVIRONMENT_IS_WEB && preloadStartTime !== null) {
      Module.printErr('pre-main prep time: ' + (Date.now() - preloadStartTime) + ' ms');
    }

    if (Module['_main'] && shouldRunNow) {
      Module['callMain'](args);
    }

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      if (!ABORT) doRun();
    }, 1);
  } else {
    doRun();
  }
}
Module['run'] = Module.run = run;

function exit(status) {
  ABORT = true;
  EXITSTATUS = status;
  STACKTOP = initialStackTop;

  // exit the runtime
  exitRuntime();

  // TODO We should handle this differently based on environment.
  // In the browser, the best we can do is throw an exception
  // to halt execution, but in node we could process.exit and
  // I'd imagine SM shell would have something equivalent.
  // This would let us set a proper exit status (which
  // would be great for checking test exit statuses).
  // https://github.com/kripken/emscripten/issues/1371

  // throw an exception to halt the current execution
  throw new ExitStatus(status);
}
Module['exit'] = Module.exit = exit;

function abort(text) {
  if (text) {
    Module.print(text);
    Module.printErr(text);
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '';

  throw 'abort() at ' + stackTrace() + extra;
}
Module['abort'] = Module.abort = abort;

// {{PRE_RUN_ADDITIONS}}
/*global Module, asm*/
/*global _malloc, _free, _memcpy*/
/*global FUNCTION_TABLE, HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64*/
/*global readLatin1String*/
/*global __emval_register, _emval_handle_array, __emval_decref*/
/*global ___getTypeName*/
/*global requireHandle*/
/*jslint sub:true*/ /* The symbols 'fromWireType' and 'toWireType' must be accessed via array notation to be closure-safe since craftInvokerFunction crafts functions as strings that can't be closured. */
var InternalError = Module['InternalError'] = extendError(Error, 'InternalError');
var BindingError = Module['BindingError'] = extendError(Error, 'BindingError');
var UnboundTypeError = Module['UnboundTypeError'] = extendError(BindingError, 'UnboundTypeError');
var PureVirtualError = Module['PureVirtualError'] = extendError(BindingError, 'PureVirtualError');

function throwInternalError(message) {
    throw new InternalError(message);
}

function throwBindingError(message) {
    throw new BindingError(message);
}

function throwUnboundTypeError(message, types) {
    var unboundTypes = [];
    var seen = {};
    function visit(type) {
        if (seen[type]) {
            return;
        }
        if (registeredTypes[type]) {
            return;
        }
        if (typeDependencies[type]) {
            typeDependencies[type].forEach(visit);
            return;
        }
        unboundTypes.push(type);
        seen[type] = true;
    }
    types.forEach(visit);

    throw new UnboundTypeError(message + ': ' + unboundTypes.map(getTypeName).join([', ']));
}

// Creates a function overload resolution table to the given method 'methodName' in the given prototype,
// if the overload table doesn't yet exist.
function ensureOverloadTable(proto, methodName, humanName) {
    if (undefined === proto[methodName].overloadTable) {
        var prevFunc = proto[methodName];
        // Inject an overload resolver function that routes to the appropriate overload based on the number of arguments.
        proto[methodName] = function() {
            // TODO This check can be removed in -O3 level "unsafe" optimizations.
            if (!proto[methodName].overloadTable.hasOwnProperty(arguments.length)) {
                throwBindingError("Function '" + humanName + "' called with an invalid number of arguments (" + arguments.length + ") - expects one of (" + proto[methodName].overloadTable + ")!");
            }
            return proto[methodName].overloadTable[arguments.length].apply(this, arguments);
        };
        // Move the previous function into the overload table.
        proto[methodName].overloadTable = [];
        proto[methodName].overloadTable[prevFunc.argCount] = prevFunc;
    }
}

/* Registers a symbol (function, class, enum, ...) as part of the Module JS object so that
   hand-written code is able to access that symbol via 'Module.name'.
   name: The name of the symbol that's being exposed.
   value: The object itself to expose (function, class, ...)
   numArguments: For functions, specifies the number of arguments the function takes in. For other types, unused and undefined.

   To implement support for multiple overloads of a function, an 'overload selector' function is used. That selector function chooses
   the appropriate overload to call from an function overload table. This selector function is only used if multiple overloads are
   actually registered, since it carries a slight performance penalty. */
function exposePublicSymbol(name, value, numArguments) {
    if (Module.hasOwnProperty(name)) {
        if (undefined === numArguments || (undefined !== Module[name].overloadTable && undefined !== Module[name].overloadTable[numArguments])) {
            throwBindingError("Cannot register public name '" + name + "' twice");
        }

        // We are exposing a function with the same name as an existing function. Create an overload table and a function selector
        // that routes between the two.
        ensureOverloadTable(Module, name, name);
        if (Module.hasOwnProperty(numArguments)) {
            throwBindingError("Cannot register multiple overloads of a function with the same number of arguments (" + numArguments + ")!");
        }
        // Add the new function into the overload table.
        Module[name].overloadTable[numArguments] = value;
    }
    else {
        Module[name] = value;
        if (undefined !== numArguments) {
            Module[name].numArguments = numArguments;
        }
    }
}

function replacePublicSymbol(name, value, numArguments) {
    if (!Module.hasOwnProperty(name)) {
        throwInternalError('Replacing nonexistant public symbol');
    }
    // If there's an overload table for this symbol, replace the symbol in the overload table instead.
    if (undefined !== Module[name].overloadTable && undefined !== numArguments) {
        Module[name].overloadTable[numArguments] = value;
    }
    else {
        Module[name] = value;
    }
}

// from https://github.com/imvu/imvujs/blob/master/src/error.js
function extendError(baseErrorType, errorName) {
    var errorClass = createNamedFunction(errorName, function(message) {
        this.name = errorName;
        this.message = message;

        var stack = (new Error(message)).stack;
        if (stack !== undefined) {
            this.stack = this.toString() + '\n' +
                stack.replace(/^Error(:[^\n]*)?\n/, '');
        }
    });
    errorClass.prototype = Object.create(baseErrorType.prototype);
    errorClass.prototype.constructor = errorClass;
    errorClass.prototype.toString = function() {
        if (this.message === undefined) {
            return this.name;
        } else {
            return this.name + ': ' + this.message;
        }
    };

    return errorClass;
}


// from https://github.com/imvu/imvujs/blob/master/src/function.js
function createNamedFunction(name, body) {
    name = makeLegalFunctionName(name);
    /*jshint evil:true*/
    return new Function(
        "body",
        "return function " + name + "() {\n" +
        "    \"use strict\";" +
        "    return body.apply(this, arguments);\n" +
        "};\n"
    )(body);
}

function _embind_repr(v) {
    var t = typeof v;
    if (t === 'object' || t === 'array' || t === 'function') {
        return v.toString();
    } else {
        return '' + v;
    }
}

// raw pointer -> instance
var registeredInstances = {};

function getBasestPointer(class_, ptr) {
    if (ptr === undefined) {
        throwBindingError('ptr should not be undefined');
    }
    while (class_.baseClass) {
        ptr = class_.upcast(ptr);
        class_ = class_.baseClass;
    }
    return ptr;
}

function registerInheritedInstance(class_, ptr, instance) {
    ptr = getBasestPointer(class_, ptr);
    if (registeredInstances.hasOwnProperty(ptr)) {
        throwBindingError('Tried to register registered instance: ' + ptr);
    } else {
        registeredInstances[ptr] = instance;
    }
}

function unregisterInheritedInstance(class_, ptr) {
    ptr = getBasestPointer(class_, ptr);
    if (registeredInstances.hasOwnProperty(ptr)) {
        delete registeredInstances[ptr];
    } else {
        throwBindingError('Tried to unregister unregistered instance: ' + ptr);
    }
}

function getInheritedInstance(class_, ptr) {
    ptr = getBasestPointer(class_, ptr);
    return registeredInstances[ptr];
}

function getInheritedInstanceCount() {
    return Object.keys(registeredInstances).length;
}
Module['getInheritedInstanceCount'] = getInheritedInstanceCount;

function getLiveInheritedInstances() {
    var rv = [];
    for (var k in registeredInstances) {
        if (registeredInstances.hasOwnProperty(k)) {
            rv.push(registeredInstances[k]);
        }
    }
    return rv;
}
Module['getLiveInheritedInstances'] = getLiveInheritedInstances;

// typeID -> { toWireType: ..., fromWireType: ... }
var registeredTypes = {};

// typeID -> [callback]
var awaitingDependencies = {};

// typeID -> [dependentTypes]
var typeDependencies = {};

// class typeID -> {pointerType: ..., constPointerType: ...}
var registeredPointers = {};

function registerType(rawType, registeredInstance) {
    if (!('argPackAdvance' in registeredInstance)) {
        throw new TypeError('registerType registeredInstance requires argPackAdvance');
    }

    var name = registeredInstance.name;
    if (!rawType) {
        throwBindingError('type "' + name + '" must have a positive integer typeid pointer');
    }
    if (registeredTypes.hasOwnProperty(rawType)) {
        throwBindingError("Cannot register type '" + name + "' twice");
    }

    registeredTypes[rawType] = registeredInstance;
    delete typeDependencies[rawType];

    if (awaitingDependencies.hasOwnProperty(rawType)) {
        var callbacks = awaitingDependencies[rawType];
        delete awaitingDependencies[rawType];
        callbacks.forEach(function(cb) {
            cb();
        });
    }
}

function whenDependentTypesAreResolved(myTypes, dependentTypes, getTypeConverters) {
    myTypes.forEach(function(type) {
        typeDependencies[type] = dependentTypes;
    });

    function onComplete(typeConverters) {
        var myTypeConverters = getTypeConverters(typeConverters);
        if (myTypeConverters.length !== myTypes.length) {
            throwInternalError('Mismatched type converter count');
        }
        for (var i = 0; i < myTypes.length; ++i) {
            registerType(myTypes[i], myTypeConverters[i]);
        }
    }

    var typeConverters = new Array(dependentTypes.length);
    var unregisteredTypes = [];
    var registered = 0;
    dependentTypes.forEach(function(dt, i) {
        if (registeredTypes.hasOwnProperty(dt)) {
            typeConverters[i] = registeredTypes[dt];
        } else {
            unregisteredTypes.push(dt);
            if (!awaitingDependencies.hasOwnProperty(dt)) {
                awaitingDependencies[dt] = [];
            }
            awaitingDependencies[dt].push(function() {
                typeConverters[i] = registeredTypes[dt];
                ++registered;
                if (registered === unregisteredTypes.length) {
                    onComplete(typeConverters);
                }
            });
        }
    });
    if (0 === unregisteredTypes.length) {
        onComplete(typeConverters);
    }
}

var __charCodes = (function() {
    var codes = new Array(256);
    for (var i = 0; i < 256; ++i) {
        codes[i] = String.fromCharCode(i);
    }
    return codes;
})();

function readLatin1String(ptr) {
    var ret = "";
    var c = ptr;
    while (HEAPU8[c]) {
        ret += __charCodes[HEAPU8[c++]];
    }
    return ret;
}

function getTypeName(type) {
    var ptr = ___getTypeName(type);
    var rv = readLatin1String(ptr);
    _free(ptr);
    return rv;
}

function heap32VectorToArray(count, firstElement) {
    var array = [];
    for (var i = 0; i < count; i++) {
        array.push(HEAP32[(firstElement >> 2) + i]);
    }
    return array;
}

function requireRegisteredType(rawType, humanName) {
    var impl = registeredTypes[rawType];
    if (undefined === impl) {
        throwBindingError(humanName + " has unknown type " + getTypeName(rawType));
    }
    return impl;
}

function __embind_register_void(rawType, name) {
    name = readLatin1String(name);
    registerType(rawType, {
        name: name,
        'argPackAdvance': 0,
        'fromWireType': function() {
            return undefined;
        },
        'toWireType': function(destructors, o) {
            // TODO: assert if anything else is given?
            return undefined;
        },
    });
}

function __embind_register_bool(rawType, name, size, trueValue, falseValue) {
    var shift = getShiftFromSize(size);

    name = readLatin1String(name);
    registerType(rawType, {
        name: name,
        'fromWireType': function(wt) {
            // ambiguous emscripten ABI: sometimes return values are
            // true or false, and sometimes integers (0 or 1)
            return !!wt;
        },
        'toWireType': function(destructors, o) {
            return o ? trueValue : falseValue;
        },
        'argPackAdvance': 8,
        'readValueFromPointer': function(pointer) {
            // TODO: if heap is fixed (like in asm.js) this could be executed outside
            var heap;
            if (size === 1) {
                heap = HEAP8;
            } else if (size === 2) {
                heap = HEAP16;
            } else if (size === 4) {
                heap = HEAP32;
            } else {
                throw new TypeError("Unknown boolean type size: " + name);
            }
            return this['fromWireType'](heap[pointer >> shift]);
        },
        destructorFunction: null, // This type does not need a destructor
    });
}

function getShiftFromSize(size) {
    switch (size) {
        case 1: return 0;
        case 2: return 1;
        case 4: return 2;
        case 8: return 3;
        default:
            throw new TypeError('Unknown type size: ' + size);
    }
}

function integerReadValueFromPointer(name, shift, signed) {
    switch (shift) {
        case 0: return function(pointer) {
            var heap = signed ? HEAP8 : HEAPU8;
            return this['fromWireType'](heap[pointer]);
        };
        case 1: return function(pointer) {
            var heap = signed ? HEAP16 : HEAPU16;
            return this['fromWireType'](heap[pointer >> 1]);
        };
        case 2: return function(pointer) {
            var heap = signed ? HEAP32 : HEAPU32;
            return this['fromWireType'](heap[pointer >> 2]);
        };
        default:
            throw new TypeError("Unknown integer type: " + name);
    }
}

function floatReadValueFromPointer(name, shift) {
    switch (shift) {
        case 2: return function(pointer) {
            return this['fromWireType'](HEAPF32[pointer >> 2]);
        };
        case 3: return function(pointer) {
            return this['fromWireType'](HEAPF64[pointer >> 3]);
        };
        default:
            throw new TypeError("Unknown float type: " + name);
    }
}

// When converting a number from JS to C++ side, the valid range of the number is
// [minRange, maxRange], inclusive.
function __embind_register_integer(primitiveType, name, size, minRange, maxRange) {
    name = readLatin1String(name);
    if (maxRange === -1) { // LLVM doesn't have signed and unsigned 32-bit types, so u32 literals come out as 'i32 -1'. Always treat those as max u32.
        maxRange = 4294967295;
    }

    var shift = getShiftFromSize(size);

    registerType(primitiveType, {
        name: name,
        'fromWireType': function(value) {
            return value;
        },
        'toWireType': function(destructors, value) {
            // todo: Here we have an opportunity for -O3 level "unsafe" optimizations: we could
            // avoid the following two if()s and assume value is of proper type.
            if (typeof value !== "number" && typeof value !== "boolean") {
                throw new TypeError('Cannot convert "' + _embind_repr(value) + '" to ' + this.name);
            }
            if (value < minRange || value > maxRange) {
                throw new TypeError('Passing a number "' + _embind_repr(value) + '" from JS side to C/C++ side to an argument of type "' + name + '", which is outside the valid range [' + minRange + ', ' + maxRange + ']!');
            }
            return value | 0;
        },
        'argPackAdvance': 8,
        'readValueFromPointer': integerReadValueFromPointer(name, shift, minRange !== 0),
        destructorFunction: null, // This type does not need a destructor
    });
}



function __embind_register_float(rawType, name, size) {
    var shift = getShiftFromSize(size);
    name = readLatin1String(name);
    registerType(rawType, {
        name: name,
        'fromWireType': function(value) {
            return value;
        },
        'toWireType': function(destructors, value) {
            // todo: Here we have an opportunity for -O3 level "unsafe" optimizations: we could
            // avoid the following if() and assume value is of proper type.
            if (typeof value !== "number" && typeof value !== "boolean") {
                throw new TypeError('Cannot convert "' + _embind_repr(value) + '" to ' + this.name);
            }
            return value;
        },
        'argPackAdvance': 8,
        'readValueFromPointer': floatReadValueFromPointer(name, shift),
        destructorFunction: null, // This type does not need a destructor
    });
}

// For types whose wire types are 32-bit pointers.
function simpleReadValueFromPointer(pointer) {
    return this['fromWireType'](HEAPU32[pointer >> 2]);
}

function __embind_register_std_string(rawType, name) {
    name = readLatin1String(name);
    registerType(rawType, {
        name: name,
        'fromWireType': function(value) {
            var length = HEAPU32[value >> 2];
            var a = new Array(length);
            for (var i = 0; i < length; ++i) {
                a[i] = String.fromCharCode(HEAPU8[value + 4 + i]);
            }
            _free(value);
            return a.join('');
        },
        'toWireType': function(destructors, value) {
            if (value instanceof ArrayBuffer) {
                value = new Uint8Array(value);
            }

            function getTAElement(ta, index) {
                return ta[index];
            }
            function getStringElement(string, index) {
                return string.charCodeAt(index);
            }
            var getElement;
            if (value instanceof Uint8Array) {
                getElement = getTAElement;
            } else if (value instanceof Int8Array) {
                getElement = getTAElement;
            } else if (typeof value === 'string') {
                getElement = getStringElement;
            } else {
                throwBindingError('Cannot pass non-string to std::string');
            }

            // assumes 4-byte alignment
            var length = value.length;
            var ptr = _malloc(4 + length);
            HEAPU32[ptr >> 2] = length;
            for (var i = 0; i < length; ++i) {
                var charCode = getElement(value, i);
                if (charCode > 255) {
                    _free(ptr);
                    throwBindingError('String has UTF-16 code units that do not fit in 8 bits');
                }
                HEAPU8[ptr + 4 + i] = charCode;
            }
            if (destructors !== null) {
                destructors.push(_free, ptr);
            }
            return ptr;
        },
        'argPackAdvance': 8,
        'readValueFromPointer': simpleReadValueFromPointer,
        destructorFunction: function(ptr) { _free(ptr); },
    });
}

function __embind_register_std_wstring(rawType, charSize, name) {
    name = readLatin1String(name);
    var HEAP, shift;
    if (charSize === 2) {
        HEAP = HEAPU16;
        shift = 1;
    } else if (charSize === 4) {
        HEAP = HEAPU32;
        shift = 2;
    }
    registerType(rawType, {
        name: name,
        'fromWireType': function(value) {
            var length = HEAPU32[value >> 2];
            var a = new Array(length);
            var start = (value + 4) >> shift;
            for (var i = 0; i < length; ++i) {
                a[i] = String.fromCharCode(HEAP[start + i]);
            }
            _free(value);
            return a.join('');
        },
        'toWireType': function(destructors, value) {
            // assumes 4-byte alignment
            var length = value.length;
            var ptr = _malloc(4 + length * charSize);
            HEAPU32[ptr >> 2] = length;
            var start = (ptr + 4) >> shift;
            for (var i = 0; i < length; ++i) {
                HEAP[start + i] = value.charCodeAt(i);
            }
            if (destructors !== null) {
                destructors.push(_free, ptr);
            }
            return ptr;
        },
        'argPackAdvance': 8,
        'readValueFromPointer': simpleReadValueFromPointer,
        destructorFunction: function(ptr) { _free(ptr); },
    });
}

function __embind_register_emval(rawType, name) {
    name = readLatin1String(name);
    registerType(rawType, {
        name: name,
        'fromWireType': function(handle) {
            var rv = _emval_handle_array[handle].value;
            __emval_decref(handle);
            return rv;
        },
        'toWireType': function(destructors, value) {
            return __emval_register(value);
        },
        'argPackAdvance': 8,
        'readValueFromPointer': simpleReadValueFromPointer,
        destructorFunction: null, // This type does not need a destructor

        // TODO: do we need a deleteObject here?  write a test where
        // emval is passed into JS via an interface
    });
}

function __embind_register_memory_view(rawType, name) {
    var typeMapping = [
        Int8Array,
        Uint8Array,
        Int16Array,
        Uint16Array,
        Int32Array,
        Uint32Array,
        Float32Array,
        Float64Array,
    ];

    name = readLatin1String(name);
    registerType(rawType, {
        name: name,
        'fromWireType': function(handle) {
            var type = HEAPU32[handle >> 2];
            var size = HEAPU32[(handle >> 2) + 1]; // in elements
            var data = HEAPU32[(handle >> 2) + 2]; // byte offset into emscripten heap
            var TA = typeMapping[type];
            return new TA(HEAP8.buffer, data, size);
        },
        'argPackAdvance': 16,
        'readValueFromPointer': function(ptr) {
            return this['fromWireType'](ptr);
        },
    });
}

function runDestructors(destructors) {
    while (destructors.length) {
        var ptr = destructors.pop();
        var del = destructors.pop();
        del(ptr);
    }
}

// Function implementation of operator new, per
// http://www.ecma-international.org/publications/files/ECMA-ST/Ecma-262.pdf
// 13.2.2
// ES3
function new_(constructor, argumentList) {
    if (!(constructor instanceof Function)) {
        throw new TypeError('new_ called with constructor type ' + typeof(constructor) + " which is not a function");
    }

    /*
     * Previously, the following line was just:

     function dummy() {};

     * Unfortunately, Chrome was preserving 'dummy' as the object's name, even though at creation, the 'dummy' has the
     * correct constructor name.  Thus, objects created with IMVU.new would show up in the debugger as 'dummy', which
     * isn't very helpful.  Using IMVU.createNamedFunction addresses the issue.  Doublely-unfortunately, there's no way
     * to write a test for this behavior.  -NRD 2013.02.22
     */
    var dummy = createNamedFunction(constructor.name, function(){});
    dummy.prototype = constructor.prototype;
    var obj = new dummy;

    var r = constructor.apply(obj, argumentList);
    return (r instanceof Object) ? r : obj;
}

// The path to interop from JS code to C++ code:
// (hand-written JS code) -> (autogenerated JS invoker) -> (template-generated C++ invoker) -> (target C++ function)
// craftInvokerFunction generates the JS invoker function for each function exposed to JS through embind.
function craftInvokerFunction(humanName, argTypes, classType, cppInvokerFunc, cppTargetFunc) {
    // humanName: a human-readable string name for the function to be generated.
    // argTypes: An array that contains the embind type objects for all types in the function signature.
    //    argTypes[0] is the type object for the function return value.
    //    argTypes[1] is the type object for function this object/class type, or null if not crafting an invoker for a class method.
    //    argTypes[2...] are the actual function parameters.
    // classType: The embind type object for the class to be bound, or null if this is not a method of a class.
    // cppInvokerFunc: JS Function object to the C++-side function that interops into C++ code.
    // cppTargetFunc: Function pointer (an integer to FUNCTION_TABLE) to the target C++ function the cppInvokerFunc will end up calling.
    var argCount = argTypes.length;

    if (argCount < 2) {
        throwBindingError("argTypes array size mismatch! Must at least get return value and 'this' types!");
    }

    var isClassMethodFunc = (argTypes[1] !== null && classType !== null);

    // Free functions with signature "void function()" do not need an invoker that marshalls between wire types.
// TODO: This omits argument count check - enable only at -O3 or similar.
//    if (ENABLE_UNSAFE_OPTS && argCount == 2 && argTypes[0].name == "void" && !isClassMethodFunc) {
//       return FUNCTION_TABLE[fn];
//    }

    var argsList = "";
    var argsListWired = "";
    for(var i = 0; i < argCount - 2; ++i) {
        argsList += (i!==0?", ":"")+"arg"+i;
        argsListWired += (i!==0?", ":"")+"arg"+i+"Wired";
    }

    var invokerFnBody =
        "return function "+makeLegalFunctionName(humanName)+"("+argsList+") {\n" +
        "if (arguments.length !== "+(argCount - 2)+") {\n" +
            "throwBindingError('function "+humanName+" called with ' + arguments.length + ' arguments, expected "+(argCount - 2)+" args!');\n" +
        "}\n";

    // Determine if we need to use a dynamic stack to store the destructors for the function parameters.
    // TODO: Remove this completely once all function invokers are being dynamically generated.
    var needsDestructorStack = false;

    for(var i = 1; i < argTypes.length; ++i) { // Skip return value at index 0 - it's not deleted here.
        if (argTypes[i] !== null && argTypes[i].destructorFunction === undefined) { // The type does not define a destructor function - must use dynamic stack
            needsDestructorStack = true;
            break;
        }
    }

    if (needsDestructorStack) {
        invokerFnBody +=
            "var destructors = [];\n";
    }

    var dtorStack = needsDestructorStack ? "destructors" : "null";
    var args1 = ["throwBindingError", "invoker", "fn", "runDestructors", "retType", "classParam"];
    var args2 = [throwBindingError, cppInvokerFunc, cppTargetFunc, runDestructors, argTypes[0], argTypes[1]];

    if (isClassMethodFunc) {
        invokerFnBody += "var thisWired = classParam.toWireType("+dtorStack+", this);\n";
    }

    for(var i = 0; i < argCount - 2; ++i) {
        invokerFnBody += "var arg"+i+"Wired = argType"+i+".toWireType("+dtorStack+", arg"+i+"); // "+argTypes[i+2].name+"\n";
        args1.push("argType"+i);
        args2.push(argTypes[i+2]);
    }

    if (isClassMethodFunc) {
        argsListWired = "thisWired" + (argsListWired.length > 0 ? ", " : "") + argsListWired;
    }

    var returns = (argTypes[0].name !== "void");

    invokerFnBody +=
        (returns?"var rv = ":"") + "invoker(fn"+(argsListWired.length>0?", ":"")+argsListWired+");\n";

    if (needsDestructorStack) {
        invokerFnBody += "runDestructors(destructors);\n";
    } else {
        for(var i = isClassMethodFunc?1:2; i < argTypes.length; ++i) { // Skip return value at index 0 - it's not deleted here. Also skip class type if not a method.
            var paramName = (i === 1 ? "thisWired" : ("arg"+(i - 2)+"Wired"));
            if (argTypes[i].destructorFunction !== null) {
                invokerFnBody += paramName+"_dtor("+paramName+"); // "+argTypes[i].name+"\n";
                args1.push(paramName+"_dtor");
                args2.push(argTypes[i].destructorFunction);
            }
        }
    }

    if (returns) {
        invokerFnBody += "return retType.fromWireType(rv);\n";
    }
    invokerFnBody += "}\n";

    args1.push(invokerFnBody);

    var invokerFunction = new_(Function, args1).apply(null, args2);
    return invokerFunction;
}

function requireFunction(signature, rawFunction) {
    signature = readLatin1String(signature);
    var fp;
    // asm.js does not define FUNCTION_TABLE
    if (typeof FUNCTION_TABLE === "undefined") {
        // asm.js does not give direct access to the function tables,
        // and thus we must go through the dynCall interface which allows
        // calling into a signature's function table by pointer value.
        //
        // https://github.com/dherman/asm.js/issues/83
        //
        // This has three main penalties:
        // - dynCall is another function call in the path from JavaScript to C++.
        // - JITs may not predict through the function table indirection at runtime.
        // - Function.prototype.bind generally benchmarks poorly relative to
        //   function objects, but using 'arguments' would confound JITs and
        //   possibly allocate.
        var dc = asm['dynCall_' + signature];
        if (dc === undefined) {
            // We will always enter this branch if the signature
            // contains 'f' and PRECISE_F32 is not enabled.
            //
            // Try again, replacing 'f' with 'd'.
            dc = asm['dynCall_' + signature.replace(/f/g, 'd')];
            if (dc === undefined) {
                throwBindingError("No dynCall invoker for signature: " + signature);
            }
        }
        fp = dc.bind(undefined, rawFunction);
    } else {
        fp = FUNCTION_TABLE[rawFunction];
    }

    if (typeof fp !== "function") {
        throwBindingError("unknown function pointer with signature " + signature + ": " + rawFunction);
    }
    return fp;
}

function __embind_register_function(name, argCount, rawArgTypesAddr, signature, rawInvoker, fn) {
    var argTypes = heap32VectorToArray(argCount, rawArgTypesAddr);
    name = readLatin1String(name);
    
    rawInvoker = requireFunction(signature, rawInvoker);

    exposePublicSymbol(name, function() {
        throwUnboundTypeError('Cannot call ' + name + ' due to unbound types', argTypes);
    }, argCount - 1);

    whenDependentTypesAreResolved([], argTypes, function(argTypes) {
        var invokerArgsArray = [argTypes[0] /* return value */, null /* no class 'this'*/].concat(argTypes.slice(1) /* actual params */);
        replacePublicSymbol(name, craftInvokerFunction(name, invokerArgsArray, null /* no class 'this'*/, rawInvoker, fn), argCount - 1);
        return [];
    });
}

var tupleRegistrations = {};

function __embind_register_value_array(rawType, name, constructorSignature, rawConstructor, destructorSignature, rawDestructor) {
    tupleRegistrations[rawType] = {
        name: readLatin1String(name),
        rawConstructor: requireFunction(constructorSignature, rawConstructor),
        rawDestructor: requireFunction(destructorSignature, rawDestructor),
        elements: [],
    };
}

function __embind_register_value_array_element(
    rawTupleType,
    getterReturnType,
    getterSignature,
    getter,
    getterContext,
    setterArgumentType,
    setterSignature,
    setter,
    setterContext
) {
    tupleRegistrations[rawTupleType].elements.push({
        getterReturnType: getterReturnType,
        getter: requireFunction(getterSignature, getter),
        getterContext: getterContext,
        setterArgumentType: setterArgumentType,
        setter: requireFunction(setterSignature, setter),
        setterContext: setterContext,
    });
}

function __embind_finalize_value_array(rawTupleType) {
    var reg = tupleRegistrations[rawTupleType];
    delete tupleRegistrations[rawTupleType];
    var elements = reg.elements;
    var elementsLength = elements.length;
    var elementTypes = elements.map(function(elt) { return elt.getterReturnType; }).
                concat(elements.map(function(elt) { return elt.setterArgumentType; }));

    var rawConstructor = reg.rawConstructor;
    var rawDestructor = reg.rawDestructor;

    whenDependentTypesAreResolved([rawTupleType], elementTypes, function(elementTypes) {
        elements.forEach(function(elt, i) {
            var getterReturnType = elementTypes[i];
            var getter = elt.getter;
            var getterContext = elt.getterContext;
            var setterArgumentType = elementTypes[i + elementsLength];
            var setter = elt.setter;
            var setterContext = elt.setterContext;
            elt.read = function(ptr) {
                return getterReturnType['fromWireType'](getter(getterContext, ptr));
            };
            elt.write = function(ptr, o) {
                var destructors = [];
                setter(setterContext, ptr, setterArgumentType['toWireType'](destructors, o));
                runDestructors(destructors);
            };
        });

        return [{
            name: reg.name,
            'fromWireType': function(ptr) {
                var rv = new Array(elementsLength);
                for (var i = 0; i < elementsLength; ++i) {
                    rv[i] = elements[i].read(ptr);
                }
                rawDestructor(ptr);
                return rv;
            },
            'toWireType': function(destructors, o) {
                if (elementsLength !== o.length) {
                    throw new TypeError("Incorrect number of tuple elements for " + reg.name + ": expected=" + elementsLength + ", actual=" + o.length);
                }
                var ptr = rawConstructor();
                for (var i = 0; i < elementsLength; ++i) {
                    elements[i].write(ptr, o[i]);
                }
                if (destructors !== null) {
                    destructors.push(rawDestructor, ptr);
                }
                return ptr;
            },
            'argPackAdvance': 8,
            'readValueFromPointer': simpleReadValueFromPointer,
            destructorFunction: rawDestructor,
        }];
    });
}

var structRegistrations = {};

function __embind_register_value_object(
    rawType,
    name,
    constructorSignature,
    rawConstructor,
    destructorSignature,
    rawDestructor
) {
    structRegistrations[rawType] = {
        name: readLatin1String(name),
        rawConstructor: requireFunction(constructorSignature, rawConstructor),
        rawDestructor: requireFunction(destructorSignature, rawDestructor),
        fields: [],
    };
}

function __embind_register_value_object_field(
    structType,
    fieldName,
    getterReturnType,
    getterSignature,
    getter,
    getterContext,
    setterArgumentType,
    setterSignature,
    setter,
    setterContext
) {
    structRegistrations[structType].fields.push({
        fieldName: readLatin1String(fieldName),
        getterReturnType: getterReturnType,
        getter: requireFunction(getterSignature, getter),
        getterContext: getterContext,
        setterArgumentType: setterArgumentType,
        setter: requireFunction(setterSignature, setter),
        setterContext: setterContext,
    });
}

function __embind_finalize_value_object(structType) {
    var reg = structRegistrations[structType];
    delete structRegistrations[structType];

    var rawConstructor = reg.rawConstructor;
    var rawDestructor = reg.rawDestructor;
    var fieldRecords = reg.fields;
    var fieldTypes = fieldRecords.map(function(field) { return field.getterReturnType; }).
              concat(fieldRecords.map(function(field) { return field.setterArgumentType; }));
    whenDependentTypesAreResolved([structType], fieldTypes, function(fieldTypes) {
        var fields = {};
        fieldRecords.forEach(function(field, i) {
            var fieldName = field.fieldName;
            var getterReturnType = fieldTypes[i];
            var getter = field.getter;
            var getterContext = field.getterContext;
            var setterArgumentType = fieldTypes[i + fieldRecords.length];
            var setter = field.setter;
            var setterContext = field.setterContext;
            fields[fieldName] = {
                read: function(ptr) {
                    return getterReturnType['fromWireType'](
                        getter(getterContext, ptr));
                },
                write: function(ptr, o) {
                    var destructors = [];
                    setter(setterContext, ptr, setterArgumentType['toWireType'](destructors, o));
                    runDestructors(destructors);
                }
            };
        });

        return [{
            name: reg.name,
            'fromWireType': function(ptr) {
                var rv = {};
                for (var i in fields) {
                    rv[i] = fields[i].read(ptr);
                }
                rawDestructor(ptr);
                return rv;
            },
            'toWireType': function(destructors, o) {
                // todo: Here we have an opportunity for -O3 level "unsafe" optimizations:
                // assume all fields are present without checking.
                for (var fieldName in fields) {
                    if (!(fieldName in o)) {
                        throw new TypeError('Missing field');
                    }
                }
                var ptr = rawConstructor();
                for (fieldName in fields) {
                    fields[fieldName].write(ptr, o[fieldName]);
                }
                if (destructors !== null) {
                    destructors.push(rawDestructor, ptr);
                }
                return ptr;
            },
            'argPackAdvance': 8,
            'readValueFromPointer': simpleReadValueFromPointer,
            destructorFunction: rawDestructor,
        }];
    });
}

var genericPointerToWireType = function(destructors, handle) {
    if (handle === null) {
        if (this.isReference) {
            throwBindingError('null is not a valid ' + this.name);
        }

        if (this.isSmartPointer) {
            var ptr = this.rawConstructor();
            if (destructors !== null) {
                destructors.push(this.rawDestructor, ptr);
            }
            return ptr;
        } else {
            return 0;
        }
    }

    if (!handle.$$) {
        throwBindingError('Cannot pass "' + _embind_repr(handle) + '" as a ' + this.name);
    }
    if (!handle.$$.ptr) {
        throwBindingError('Cannot pass deleted object as a pointer of type ' + this.name);
    }
    if (!this.isConst && handle.$$.ptrType.isConst) {
        throwBindingError('Cannot convert argument of type ' + (handle.$$.smartPtrType ? handle.$$.smartPtrType.name : handle.$$.ptrType.name) + ' to parameter type ' + this.name);
    }
    var handleClass = handle.$$.ptrType.registeredClass;
    var ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass);

    if (this.isSmartPointer) {
        // TODO: this is not strictly true
        // We could support BY_EMVAL conversions from raw pointers to smart pointers
        // because the smart pointer can hold a reference to the handle
        if (undefined === handle.$$.smartPtr) {
            throwBindingError('Passing raw pointer to smart pointer is illegal');
        }

        switch (this.sharingPolicy) {
            case 0: // NONE
                // no upcasting
                if (handle.$$.smartPtrType === this) {
                    ptr = handle.$$.smartPtr;
                } else {
                    throwBindingError('Cannot convert argument of type ' + (handle.$$.smartPtrType ? handle.$$.smartPtrType.name : handle.$$.ptrType.name) + ' to parameter type ' + this.name);
                }
                break;

            case 1: // INTRUSIVE
                ptr = handle.$$.smartPtr;
                break;

            case 2: // BY_EMVAL
                if (handle.$$.smartPtrType === this) {
                    ptr = handle.$$.smartPtr;
                } else {
                    var clonedHandle = handle['clone']();
                    ptr = this.rawShare(
                        ptr,
                        __emval_register(function() {
                            clonedHandle['delete']();
                        })
                    );
                    if (destructors !== null) {
                        destructors.push(this.rawDestructor, ptr);
                    }
                }
                break;

            default:
                throwBindingError('Unsupporting sharing policy');
        }
    }
    return ptr;
};

// If we know a pointer type is not going to have SmartPtr logic in it, we can
// special-case optimize it a bit (compare to genericPointerToWireType)
var constNoSmartPtrRawPointerToWireType = function(destructors, handle) {
    if (handle === null) {
        if (this.isReference) {
            throwBindingError('null is not a valid ' + this.name);
        }
        return 0;
    }

    if (!handle.$$) {
        throwBindingError('Cannot pass "' + _embind_repr(handle) + '" as a ' + this.name);
    }
    if (!handle.$$.ptr) {
        throwBindingError('Cannot pass deleted object as a pointer of type ' + this.name);
    }
    var handleClass = handle.$$.ptrType.registeredClass;
    var ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass);
    return ptr;
};

// An optimized version for non-const method accesses - there we must additionally restrict that
// the pointer is not a const-pointer.
var nonConstNoSmartPtrRawPointerToWireType = function(destructors, handle) {
    if (handle === null) {
        if (this.isReference) {
            throwBindingError('null is not a valid ' + this.name);
        }
        return 0;
    }

    if (!handle.$$) {
        throwBindingError('Cannot pass "' + _embind_repr(handle) + '" as a ' + this.name);
    }
    if (!handle.$$.ptr) {
        throwBindingError('Cannot pass deleted object as a pointer of type ' + this.name);
    }
    if (handle.$$.ptrType.isConst) {
        throwBindingError('Cannot convert argument of type ' + handle.$$.ptrType.name + ' to parameter type ' + this.name);
    }
    var handleClass = handle.$$.ptrType.registeredClass;
    var ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass);
    return ptr;
};

function RegisteredPointer(
    name,
    registeredClass,
    isReference,
    isConst,

    // smart pointer properties
    isSmartPointer,
    pointeeType,
    sharingPolicy,
    rawGetPointee,
    rawConstructor,
    rawShare,
    rawDestructor
) {
    this.name = name;
    this.registeredClass = registeredClass;
    this.isReference = isReference;
    this.isConst = isConst;

    // smart pointer properties
    this.isSmartPointer = isSmartPointer;
    this.pointeeType = pointeeType;
    this.sharingPolicy = sharingPolicy;
    this.rawGetPointee = rawGetPointee;
    this.rawConstructor = rawConstructor;
    this.rawShare = rawShare;
    this.rawDestructor = rawDestructor;

    if (!isSmartPointer && registeredClass.baseClass === undefined) {
        if (isConst) {
            this['toWireType'] = constNoSmartPtrRawPointerToWireType;
            this.destructorFunction = null;
        } else {
            this['toWireType'] = nonConstNoSmartPtrRawPointerToWireType;
            this.destructorFunction = null;
        }
    } else {
        this['toWireType'] = genericPointerToWireType;
        // Here we must leave this.destructorFunction undefined, since whether genericPointerToWireType returns
        // a pointer that needs to be freed up is runtime-dependent, and cannot be evaluated at registration time.
        // TODO: Create an alternative mechanism that allows removing the use of var destructors = []; array in
        //       craftInvokerFunction altogether.
    }
}

RegisteredPointer.prototype.getPointee = function getPointee(ptr) {
    if (this.rawGetPointee) {
        ptr = this.rawGetPointee(ptr);
    }
    return ptr;
};

RegisteredPointer.prototype.destructor = function destructor(ptr) {
    if (this.rawDestructor) {
        this.rawDestructor(ptr);
    }
};

RegisteredPointer.prototype['argPackAdvance'] = 8;
RegisteredPointer.prototype['readValueFromPointer'] = simpleReadValueFromPointer;

RegisteredPointer.prototype['deleteObject'] = function deleteObject(handle) {
    if (handle !== null) {
        handle['delete']();
    }
};

RegisteredPointer.prototype['fromWireType'] = function fromWireType(ptr) {
    // ptr is a raw pointer (or a raw smartpointer)

    // rawPointer is a maybe-null raw pointer
    var rawPointer = this.getPointee(ptr);
    if (!rawPointer) {
        this.destructor(ptr);
        return null;
    }

    var registeredInstance = getInheritedInstance(this.registeredClass, rawPointer);
    if (undefined !== registeredInstance) {
        // JS object has been neutered, time to repopulate it
        if (0 === registeredInstance.$$.count.value) {
            registeredInstance.$$.ptr = rawPointer;
            registeredInstance.$$.smartPtr = ptr;
            return registeredInstance['clone']();
        } else {
            // else, just increment reference count on existing object
            // it already has a reference to the smart pointer
            var rv = registeredInstance['clone']();
            this.destructor(ptr);
            return rv;
        }
    }

    function makeDefaultHandle() {
        if (this.isSmartPointer) {
            return makeClassHandle(this.registeredClass.instancePrototype, {
                ptrType: this.pointeeType,
                ptr: rawPointer,
                smartPtrType: this,
                smartPtr: ptr,
            });
        } else {
            return makeClassHandle(this.registeredClass.instancePrototype, {
                ptrType: this,
                ptr: ptr,
            });
        }
    }

    var actualType = this.registeredClass.getActualType(rawPointer);
    var registeredPointerRecord = registeredPointers[actualType];
    if (!registeredPointerRecord) {
        return makeDefaultHandle.call(this);
    }

    var toType;
    if (this.isConst) {
        toType = registeredPointerRecord.constPointerType;
    } else {
        toType = registeredPointerRecord.pointerType;
    }
    var dp = downcastPointer(
        rawPointer,
        this.registeredClass,
        toType.registeredClass);
    if (dp === null) {
        return makeDefaultHandle.call(this);
    }
    if (this.isSmartPointer) {
        return makeClassHandle(toType.registeredClass.instancePrototype, {
            ptrType: toType,
            ptr: dp,
            smartPtrType: this,
            smartPtr: ptr,
        });
    } else {
        return makeClassHandle(toType.registeredClass.instancePrototype, {
            ptrType: toType,
            ptr: dp,
        });
    }
};

function makeClassHandle(prototype, record) {
    if (!record.ptrType || !record.ptr) {
        throwInternalError('makeClassHandle requires ptr and ptrType');
    }
    var hasSmartPtrType = !!record.smartPtrType;
    var hasSmartPtr = !!record.smartPtr;
    if (hasSmartPtrType !== hasSmartPtr) {
        throwInternalError('Both smartPtrType and smartPtr must be specified');
    }
    record.count = { value: 1 };
    return Object.create(prototype, {
        $$: {
            value: record,
        },
    });
}

// root of all pointer and smart pointer handles in embind
function ClassHandle() {
}

function getInstanceTypeName(handle) {
    return handle.$$.ptrType.registeredClass.name;
}

ClassHandle.prototype['isAliasOf'] = function isAliasOf(other) {
    if (!(this instanceof ClassHandle)) {
        return false;
    }
    if (!(other instanceof ClassHandle)) {
        return false;
    }

    var leftClass = this.$$.ptrType.registeredClass;
    var left = this.$$.ptr;
    var rightClass = other.$$.ptrType.registeredClass;
    var right = other.$$.ptr;

    while (leftClass.baseClass) {
        left = leftClass.upcast(left);
        leftClass = leftClass.baseClass;
    }

    while (rightClass.baseClass) {
        right = rightClass.upcast(right);
        rightClass = rightClass.baseClass;
    }

    return leftClass === rightClass && left === right;
};

function throwInstanceAlreadyDeleted(obj) {
    throwBindingError(getInstanceTypeName(obj) + ' instance already deleted');
}

ClassHandle.prototype['clone'] = function clone() {
    if (!this.$$.ptr) {
        throwInstanceAlreadyDeleted(this);
    }

    if (this.$$.preservePointerOnDelete) {
        this.$$.count.value += 1;
        return this;
    } else {
        var clone = Object.create(Object.getPrototypeOf(this), {
            $$: {
                value: shallowCopy(this.$$),
            }
        });

        clone.$$.count.value += 1;
        return clone;
    }
};

function runDestructor(handle) {
    var $$ = handle.$$;
    if ($$.smartPtr) {
        $$.smartPtrType.rawDestructor($$.smartPtr);
    } else {
        $$.ptrType.registeredClass.rawDestructor($$.ptr);
    }
}

ClassHandle.prototype['delete'] = function ClassHandle_delete() {
    if (!this.$$.ptr) {
        throwInstanceAlreadyDeleted(this);
    }

    if (this.$$.deleteScheduled && !this.$$.preservePointerOnDelete) {
        throwBindingError('Object already scheduled for deletion');
    }

    this.$$.count.value -= 1;
    var toDelete = 0 === this.$$.count.value;
    if (toDelete) {
        runDestructor(this);
    }
    if (!this.$$.preservePointerOnDelete) {
        this.$$.smartPtr = undefined;
        this.$$.ptr = undefined;
    }
};

var deletionQueue = [];

ClassHandle.prototype['isDeleted'] = function isDeleted() {
    return !this.$$.ptr;
};

ClassHandle.prototype['deleteLater'] = function deleteLater() {
    if (!this.$$.ptr) {
        throwInstanceAlreadyDeleted(this);
    }
    if (this.$$.deleteScheduled && !this.$$.preservePointerOnDelete) {
        throwBindingError('Object already scheduled for deletion');
    }
    deletionQueue.push(this);
    if (deletionQueue.length === 1 && delayFunction) {
        delayFunction(flushPendingDeletes);
    }
    this.$$.deleteScheduled = true;
    return this;
};

function flushPendingDeletes() {
    while (deletionQueue.length) {
        var obj = deletionQueue.pop();
        obj.$$.deleteScheduled = false;
        obj['delete']();
    }
}
Module['flushPendingDeletes'] = flushPendingDeletes;

var delayFunction;
Module['setDelayFunction'] = function setDelayFunction(fn) {
    delayFunction = fn;
    if (deletionQueue.length && delayFunction) {
        delayFunction(flushPendingDeletes);
    }
};

function RegisteredClass(
    name,
    constructor,
    instancePrototype,
    rawDestructor,
    baseClass,
    getActualType,
    upcast,
    downcast
) {
    this.name = name;
    this.constructor = constructor;
    this.instancePrototype = instancePrototype;
    this.rawDestructor = rawDestructor;
    this.baseClass = baseClass;
    this.getActualType = getActualType;
    this.upcast = upcast;
    this.downcast = downcast;
    this.pureVirtualFunctions = [];
}

function shallowCopy(o) {
    var rv = {};
    for (var k in o) {
        if (Object.prototype.hasOwnProperty.call(o, k)) {
            rv[k] = o[k];
        }
    }
    return rv;
}

function __embind_register_class(
    rawType,
    rawPointerType,
    rawConstPointerType,
    baseClassRawType,
    getActualTypeSignature,
    getActualType,
    upcastSignature,
    upcast,
    downcastSignature,
    downcast,
    name,
    destructorSignature,
    rawDestructor
) {
    name = readLatin1String(name);
    getActualType = requireFunction(getActualTypeSignature, getActualType);
    if (upcast) {
        upcast = requireFunction(upcastSignature, upcast);
    }
    if (downcast) {
        downcast = requireFunction(downcastSignature, downcast);
    }
    rawDestructor = requireFunction(destructorSignature, rawDestructor);
    var legalFunctionName = makeLegalFunctionName(name);

    exposePublicSymbol(legalFunctionName, function() {
        // this code cannot run if baseClassRawType is zero
        throwUnboundTypeError('Cannot construct ' + name + ' due to unbound types', [baseClassRawType]);
    });

    whenDependentTypesAreResolved(
        [rawType, rawPointerType, rawConstPointerType],
        baseClassRawType ? [baseClassRawType] : [],
        function(base) {
            base = base[0];

            var baseClass;
            var basePrototype;
            if (baseClassRawType) {
                baseClass = base.registeredClass;
                basePrototype = baseClass.instancePrototype;
            } else {
                basePrototype = ClassHandle.prototype;
            }

            var constructor = createNamedFunction(legalFunctionName, function() {
                if (Object.getPrototypeOf(this) !== instancePrototype) {
                    throw new BindingError("Use 'new' to construct " + name);
                }
                if (undefined === registeredClass.constructor_body) {
                    throw new BindingError(name + " has no accessible constructor");
                }
                var body = registeredClass.constructor_body[arguments.length];
                if (undefined === body) {
                    throw new BindingError("Tried to invoke ctor of " + name + " with invalid number of parameters (" + arguments.length + ") - expected (" + Object.keys(registeredClass.constructor_body).toString() + ") parameters instead!");
                }
                return body.apply(this, arguments);
            });

            var instancePrototype = Object.create(basePrototype, {
                constructor: { value: constructor },
            });

            constructor.prototype = instancePrototype;

            var registeredClass = new RegisteredClass(
                name,
                constructor,
                instancePrototype,
                rawDestructor,
                baseClass,
                getActualType,
                upcast,
                downcast);

            var referenceConverter = new RegisteredPointer(
                name,
                registeredClass,
                true,
                false,
                false);

            var pointerConverter = new RegisteredPointer(
                name + '*',
                registeredClass,
                false,
                false,
                false);

            var constPointerConverter = new RegisteredPointer(
                name + ' const*',
                registeredClass,
                false,
                true,
                false);

            registeredPointers[rawType] = {
                pointerType: pointerConverter,
                constPointerType: constPointerConverter
            };

            replacePublicSymbol(legalFunctionName, constructor);

            return [referenceConverter, pointerConverter, constPointerConverter];
        }
    );
}

function __embind_register_class_constructor(
    rawClassType,
    argCount,
    rawArgTypesAddr,
    invokerSignature,
    invoker,
    rawConstructor
) {
    var rawArgTypes = heap32VectorToArray(argCount, rawArgTypesAddr);
    invoker = requireFunction(invokerSignature, invoker);

    whenDependentTypesAreResolved([], [rawClassType], function(classType) {
        classType = classType[0];
        var humanName = 'constructor ' + classType.name;

        if (undefined === classType.registeredClass.constructor_body) {
            classType.registeredClass.constructor_body = [];
        }
        if (undefined !== classType.registeredClass.constructor_body[argCount - 1]) {
            throw new BindingError("Cannot register multiple constructors with identical number of parameters (" + (argCount-1) + ") for class '" + classType.name + "'! Overload resolution is currently only performed using the parameter count, not actual type info!");
        }
        classType.registeredClass.constructor_body[argCount - 1] = function unboundTypeHandler() {
            throwUnboundTypeError('Cannot construct ' + classType.name + ' due to unbound types', rawArgTypes);
        };

        whenDependentTypesAreResolved([], rawArgTypes, function(argTypes) {
            classType.registeredClass.constructor_body[argCount - 1] = function constructor_body() {
                if (arguments.length !== argCount - 1) {
                    throwBindingError(humanName + ' called with ' + arguments.length + ' arguments, expected ' + (argCount-1));
                }
                var destructors = [];
                var args = new Array(argCount);
                args[0] = rawConstructor;
                for (var i = 1; i < argCount; ++i) {
                    args[i] = argTypes[i]['toWireType'](destructors, arguments[i - 1]);
                }

                var ptr = invoker.apply(null, args);
                runDestructors(destructors);

                return argTypes[0]['fromWireType'](ptr);
            };
            return [];
        });
        return [];
    });
}

function downcastPointer(ptr, ptrClass, desiredClass) {
    if (ptrClass === desiredClass) {
        return ptr;
    }
    if (undefined === desiredClass.baseClass) {
        return null; // no conversion
    }

    var rv = downcastPointer(ptr, ptrClass, desiredClass.baseClass);
    if (rv === null) {
        return null;
    }
    return desiredClass.downcast(rv);
}

function upcastPointer(ptr, ptrClass, desiredClass) {
    while (ptrClass !== desiredClass) {
        if (!ptrClass.upcast) {
            throwBindingError("Expected null or instance of " + desiredClass.name + ", got an instance of " + ptrClass.name);
        }
        ptr = ptrClass.upcast(ptr);
        ptrClass = ptrClass.baseClass;
    }
    return ptr;
}

function validateThis(this_, classType, humanName) {
    if (!(this_ instanceof Object)) {
        throwBindingError(humanName + ' with invalid "this": ' + this_);
    }
    if (!(this_ instanceof classType.registeredClass.constructor)) {
        throwBindingError(humanName + ' incompatible with "this" of type ' + this_.constructor.name);
    }
    if (!this_.$$.ptr) {
        throwBindingError('cannot call emscripten binding method ' + humanName + ' on deleted object');
    }

    // todo: kill this
    return upcastPointer(
        this_.$$.ptr,
        this_.$$.ptrType.registeredClass,
        classType.registeredClass);
}

function __embind_register_class_function(
    rawClassType,
    methodName,
    argCount,
    rawArgTypesAddr, // [ReturnType, ThisType, Args...]
    invokerSignature,
    rawInvoker,
    context,
    isPureVirtual
) {
    var rawArgTypes = heap32VectorToArray(argCount, rawArgTypesAddr);
    methodName = readLatin1String(methodName);
    rawInvoker = requireFunction(invokerSignature, rawInvoker);

    whenDependentTypesAreResolved([], [rawClassType], function(classType) {
        classType = classType[0];
        var humanName = classType.name + '.' + methodName;

        if (isPureVirtual) {
            classType.registeredClass.pureVirtualFunctions.push(methodName);
        }

        function unboundTypesHandler() {
            throwUnboundTypeError('Cannot call ' + humanName + ' due to unbound types', rawArgTypes);
        }

        var proto = classType.registeredClass.instancePrototype;
        var method = proto[methodName];
        if (undefined === method || (undefined === method.overloadTable && method.className !== classType.name && method.argCount === argCount - 2)) {
            // This is the first overload to be registered, OR we are replacing a function in the base class with a function in the derived class.
            unboundTypesHandler.argCount = argCount - 2;
            unboundTypesHandler.className = classType.name;
            proto[methodName] = unboundTypesHandler;
        } else {
            // There was an existing function with the same name registered. Set up a function overload routing table.
            ensureOverloadTable(proto, methodName, humanName);
            proto[methodName].overloadTable[argCount - 2] = unboundTypesHandler;
        }

        whenDependentTypesAreResolved([], rawArgTypes, function(argTypes) {

            var memberFunction = craftInvokerFunction(humanName, argTypes, classType, rawInvoker, context);

            // Replace the initial unbound-handler-stub function with the appropriate member function, now that all types
            // are resolved. If multiple overloads are registered for this function, the function goes into an overload table.
            if (undefined === proto[methodName].overloadTable) {
                proto[methodName] = memberFunction;
            } else {
                proto[methodName].overloadTable[argCount - 2] = memberFunction;
            }

            return [];
        });
        return [];
    });
}

function __embind_register_class_property(
    classType,
    fieldName,
    getterReturnType,
    getterSignature,
    getter,
    getterContext,
    setterArgumentType,
    setterSignature,
    setter,
    setterContext
) {
    fieldName = readLatin1String(fieldName);
    getter = requireFunction(getterSignature, getter);

    whenDependentTypesAreResolved([], [classType], function(classType) {
        classType = classType[0];
        var humanName = classType.name + '.' + fieldName;
        var desc = {
            get: function() {
                throwUnboundTypeError('Cannot access ' + humanName + ' due to unbound types', [getterReturnType, setterArgumentType]);
            },
            enumerable: true,
            configurable: true
        };
        if (setter) {
            desc.set = function() {
                throwUnboundTypeError('Cannot access ' + humanName + ' due to unbound types', [getterReturnType, setterArgumentType]);
            };
        } else {
            desc.set = function(v) {
                throwBindingError(humanName + ' is a read-only property');
            };
        }

        Object.defineProperty(classType.registeredClass.instancePrototype, fieldName, desc);

        whenDependentTypesAreResolved(
            [],
            (setter ? [getterReturnType, setterArgumentType] : [getterReturnType]),
        function(types) {
            var getterReturnType = types[0];
            var desc = {
                get: function() {
                    var ptr = validateThis(this, classType, humanName + ' getter');
                    return getterReturnType['fromWireType'](getter(getterContext, ptr));
                },
                enumerable: true
            };

            if (setter) {
                setter = requireFunction(setterSignature, setter);
                var setterArgumentType = types[1];
                desc.set = function(v) {
                    var ptr = validateThis(this, classType, humanName + ' setter');
                    var destructors = [];
                    setter(setterContext, ptr, setterArgumentType['toWireType'](destructors, v));
                    runDestructors(destructors);
                };
            }

            Object.defineProperty(classType.registeredClass.instancePrototype, fieldName, desc);
            return [];
        });

        return [];
    });
}

function __embind_register_class_class_function(
    rawClassType,
    methodName,
    argCount,
    rawArgTypesAddr,
    invokerSignature,
    rawInvoker,
    fn
) {
    var rawArgTypes = heap32VectorToArray(argCount, rawArgTypesAddr);
    methodName = readLatin1String(methodName);
    rawInvoker = requireFunction(invokerSignature, rawInvoker);
    whenDependentTypesAreResolved([], [rawClassType], function(classType) {
        classType = classType[0];
        var humanName = classType.name + '.' + methodName;

        function unboundTypesHandler() {
            throwUnboundTypeError('Cannot call ' + humanName + ' due to unbound types', rawArgTypes);
        }

        var proto = classType.registeredClass.constructor;
        if (undefined === proto[methodName]) {
            // This is the first function to be registered with this name.
            unboundTypesHandler.argCount = argCount-1;
            proto[methodName] = unboundTypesHandler;
        } else {
            // There was an existing function with the same name registered. Set up a function overload routing table.
            ensureOverloadTable(proto, methodName, humanName);
            proto[methodName].overloadTable[argCount-1] = unboundTypesHandler;
        }

        whenDependentTypesAreResolved([], rawArgTypes, function(argTypes) {
            // Replace the initial unbound-types-handler stub with the proper function. If multiple overloads are registered,
            // the function handlers go into an overload table.
            var invokerArgsArray = [argTypes[0] /* return value */, null /* no class 'this'*/].concat(argTypes.slice(1) /* actual params */);
            var func = craftInvokerFunction(humanName, invokerArgsArray, null /* no class 'this'*/, rawInvoker, fn);
            if (undefined === proto[methodName].overloadTable) {
                proto[methodName] = func;
            } else {
                proto[methodName].overloadTable[argCount-1] = func;
            }
            return [];
        });
        return [];
    });
}

function __embind_create_inheriting_constructor(constructorName, wrapperType, properties) {
    constructorName = readLatin1String(constructorName);
    wrapperType = requireRegisteredType(wrapperType, 'wrapper');
    properties = requireHandle(properties);

    var arraySlice = [].slice;

    var registeredClass = wrapperType.registeredClass;
    var wrapperPrototype = registeredClass.instancePrototype;
    var baseClass = registeredClass.baseClass;
    var baseClassPrototype = baseClass.instancePrototype;
    var baseConstructor = registeredClass.baseClass.constructor;
    var ctor = createNamedFunction(constructorName, function() {
        registeredClass.baseClass.pureVirtualFunctions.forEach(function(name) {
            if (this[name] === baseClassPrototype[name]) {
                throw new PureVirtualError('Pure virtual function ' + name + ' must be implemented in JavaScript');
            }
        }.bind(this));

        Object.defineProperty(this, '__parent', {
            value: wrapperPrototype
        });
        this.__construct.apply(this, arraySlice.call(arguments));
    });

    // It's a little nasty that we're modifying the wrapper prototype here.

    wrapperPrototype.__construct = function __construct() {
        if (this === wrapperPrototype) {
            throwBindingError("Pass correct 'this' to __construct");
        }

        var inner = baseConstructor.implement.apply(
            undefined,
            [this].concat(arraySlice.call(arguments)));
        var $$ = inner.$$;
        inner.notifyOnDestruction();
        $$.preservePointerOnDelete = true;
        Object.defineProperty(this, '$$', {
            value: $$
        });
        registerInheritedInstance(registeredClass, $$.ptr, this);
    };

    wrapperPrototype.__destruct = function __destruct() {
        if (this === wrapperPrototype) {
            throwBindingError("Pass correct 'this' to __destruct");
        }

        unregisterInheritedInstance(registeredClass, this.$$.ptr);
    };

    ctor.prototype = Object.create(wrapperPrototype);
    for (var p in properties) {
        ctor.prototype[p] = properties[p];
    }
    return __emval_register(ctor);
}

var char_0 = '0'.charCodeAt(0);
var char_9 = '9'.charCodeAt(0);
function makeLegalFunctionName(name) {
    name = name.replace(/[^a-zA-Z0-9_]/g, '$');
    var f = name.charCodeAt(0);
    if (f >= char_0 && f <= char_9) {
        return '_' + name;
    } else {
        return name;
    }
}

function __embind_register_smart_ptr(
    rawType,
    rawPointeeType,
    name,
    sharingPolicy,
    getPointeeSignature,
    rawGetPointee,
    constructorSignature,
    rawConstructor,
    shareSignature,
    rawShare,
    destructorSignature,
    rawDestructor
) {
    name = readLatin1String(name);
    rawGetPointee = requireFunction(getPointeeSignature, rawGetPointee);
    rawConstructor = requireFunction(constructorSignature, rawConstructor);
    rawShare = requireFunction(shareSignature, rawShare);
    rawDestructor = requireFunction(destructorSignature, rawDestructor);

    whenDependentTypesAreResolved([rawType], [rawPointeeType], function(pointeeType) {
        pointeeType = pointeeType[0];

        var registeredPointer = new RegisteredPointer(
            name,
            pointeeType.registeredClass,
            false,
            false,
            // smart pointer properties
            true,
            pointeeType,
            sharingPolicy,
            rawGetPointee,
            rawConstructor,
            rawShare,
            rawDestructor);
        return [registeredPointer];
    });
}

function __embind_register_enum(
    rawType,
    name,
    size,
    isSigned
) {
    var shift = getShiftFromSize(size);
    name = readLatin1String(name);

    function constructor() {
    }
    constructor.values = {};

    registerType(rawType, {
        name: name,
        constructor: constructor,
        'fromWireType': function(c) {
            return this.constructor.values[c];
        },
        'toWireType': function(destructors, c) {
            return c.value;
        },
        'argPackAdvance': 8,
        'readValueFromPointer': integerReadValueFromPointer(name, shift, isSigned),
        destructorFunction: null,
    });
    exposePublicSymbol(name, constructor);
}

function __embind_register_enum_value(
    rawEnumType,
    name,
    enumValue
) {
    var enumType = requireRegisteredType(rawEnumType, 'enum');
    name = readLatin1String(name);

    var Enum = enumType.constructor;

    var Value = Object.create(enumType.constructor.prototype, {
        value: {value: enumValue},
        constructor: {value: createNamedFunction(enumType.name + '_' + name, function() {})},
    });
    Enum.values[enumValue] = Value;
    Enum[name] = Value;
}

function __embind_register_constant(name, type, value) {
    name = readLatin1String(name);
    whenDependentTypesAreResolved([], [type], function(type) {
        type = type[0];
        Module[name] = type['fromWireType'](value);
        return [];
    });
}
/*global Module:true, Runtime*/
/*global HEAP32*/
/*global new_*/
/*global createNamedFunction*/
/*global readLatin1String, writeStringToMemory*/
/*global requireRegisteredType, throwBindingError, runDestructors*/
/*jslint sub:true*/ /* The symbols 'fromWireType' and 'toWireType' must be accessed via array notation to be closure-safe since craftInvokerFunction crafts functions as strings that can't be closured. */

var Module = Module || {};

var _emval_handle_array = [{}]; // reserve zero
var _emval_free_list = [];

// Public JS API

/** @expose */
Module.count_emval_handles = function() {
    var count = 0;
    for (var i = 1; i < _emval_handle_array.length; ++i) {
        if (_emval_handle_array[i] !== undefined) {
            ++count;
        }
    }
    return count;
};

/** @expose */
Module.get_first_emval = function() {
    for (var i = 1; i < _emval_handle_array.length; ++i) {
        if (_emval_handle_array[i] !== undefined) {
            return _emval_handle_array[i];
        }
    }
    return null;
};

// Private C++ API

var _emval_symbols = {}; // address -> string

function __emval_register_symbol(address) {
    _emval_symbols[address] = readLatin1String(address);
}

function getStringOrSymbol(address) {
    var symbol = _emval_symbols[address];
    if (symbol === undefined) {
        return readLatin1String(address);
    } else {
        return symbol;
    }
}

function requireHandle(handle) {
    if (!handle) {
        throwBindingError('Cannot use deleted val. handle = ' + handle);
    }
    return _emval_handle_array[handle].value;
}

function __emval_register(value) {
    var handle = _emval_free_list.length ?
        _emval_free_list.pop() :
        _emval_handle_array.length;

    _emval_handle_array[handle] = {refcount: 1, value: value};
    return handle;
}

function __emval_incref(handle) {
    if (handle) {
        _emval_handle_array[handle].refcount += 1;
    }
}

function __emval_decref(handle) {
    if (handle && 0 === --_emval_handle_array[handle].refcount) {
        _emval_handle_array[handle] = undefined;
        _emval_free_list.push(handle);
    }
}

function __emval_run_destructors(handle) {
    var destructors = _emval_handle_array[handle].value;
    runDestructors(destructors);
    __emval_decref(handle);
}

function __emval_new_array() {
    return __emval_register([]);
}

function __emval_new_object() {
    return __emval_register({});
}

function __emval_undefined() {
    return __emval_register(undefined);
}

function __emval_null() {
    return __emval_register(null);
}

function __emval_new_cstring(v) {
    return __emval_register(getStringOrSymbol(v));
}

function __emval_take_value(type, argv) {
    type = requireRegisteredType(type, '_emval_take_value');
    var v = type['readValueFromPointer'](argv);
    return __emval_register(v);
}

var __newers = {}; // arity -> function


function craftEmvalAllocator(argCount) {
    /*This function returns a new function that looks like this:
    function emval_allocator_3(constructor, argTypes, args) {
        var argType0 = requireRegisteredType(HEAP32[(argTypes >> 2)], "parameter 0");
        var arg0 = argType0.readValueFromPointer(args);
        var argType1 = requireRegisteredType(HEAP32[(argTypes >> 2) + 1], "parameter 1");
        var arg1 = argType1.readValueFromPointer(args + 8);
        var argType2 = requireRegisteredType(HEAP32[(argTypes >> 2) + 2], "parameter 2");
        var arg2 = argType2.readValueFromPointer(args + 16);
        var obj = new constructor(arg0, arg1, arg2);
        return __emval_register(obj);
    } */

    var argsList = "";
    for(var i = 0; i < argCount; ++i) {
        argsList += (i!==0?", ":"")+"arg"+i; // 'arg0, arg1, ..., argn'
    }

    var functionBody =
        "return function emval_allocator_"+argCount+"(constructor, argTypes, args) {\n";

    for(var i = 0; i < argCount; ++i) {
        functionBody +=
            "var argType"+i+" = requireRegisteredType(HEAP32[(argTypes >> 2) + "+i+"], \"parameter "+i+"\");\n" +
            "var arg"+i+" = argType"+i+".readValueFromPointer(args);\n" +
            "args += argType"+i+".argPackAdvance;\n";
    }
    functionBody +=
        "var obj = new constructor("+argsList+");\n" +
        "return __emval_register(obj);\n" +
        "}\n";

    /*jshint evil:true*/
    return (new Function("requireRegisteredType", "HEAP32", "__emval_register", functionBody))(
        requireRegisteredType, HEAP32, __emval_register);
}

function __emval_new(handle, argCount, argTypes, args) {
    handle = requireHandle(handle);

    var newer = __newers[argCount];
    if (!newer) {
        newer = craftEmvalAllocator(argCount);
        __newers[argCount] = newer;
    }

    return newer(handle, argTypes, args);
}

// appease jshint (technically this code uses eval)
var global = (function(){return Function;})()('return this')();

function __emval_get_global(name) {
    name = getStringOrSymbol(name);
    return __emval_register(global[name]);
}

function __emval_get_module_property(name) {
    name = getStringOrSymbol(name);
    return __emval_register(Module[name]);
}

function __emval_get_property(handle, key) {
    handle = requireHandle(handle);
    key = requireHandle(key);
    return __emval_register(handle[key]);
}

function __emval_set_property(handle, key, value) {
    handle = requireHandle(handle);
    key = requireHandle(key);
    value = requireHandle(value);
    handle[key] = value;
}

function __emval_as(handle, returnType, destructorsRef) {
    handle = requireHandle(handle);
    returnType = requireRegisteredType(returnType, 'emval::as');
    var destructors = [];
    var rd = __emval_register(destructors);
    HEAP32[destructorsRef >> 2] = rd;
    return returnType['toWireType'](destructors, handle);
}

function __emval_call(handle, argCount, argTypes, argv) {
    handle = requireHandle(handle);
    var types = lookupTypes(argCount, argTypes);

    var args = new Array(argCount);
    for (var i = 0; i < argCount; ++i) {
        var type = types[i];
        args[i] = type['readValueFromPointer'](argv);
        argv += type.argPackAdvance;
    }

    var rv = handle.apply(undefined, args);
    return __emval_register(rv);
}

function lookupTypes(argCount, argTypes, argWireTypes) {
    var a = new Array(argCount);
    for (var i = 0; i < argCount; ++i) {
        a[i] = requireRegisteredType(
            HEAP32[(argTypes >> 2) + i],
            "parameter " + i);
    }
    return a;
}

function allocateDestructors(destructorsRef) {
    var destructors = [];
    HEAP32[destructorsRef >> 2] = __emval_register(destructors);
    return destructors;
}

// Leave id 0 undefined.  It's not a big deal, but might be confusing
// to have null be a valid method caller.
var methodCallers = [undefined];

function addMethodCaller(caller) {
    var id = methodCallers.length;
    methodCallers.push(caller);
    return id;
}

function __emval_get_method_caller(argCount, argTypes) {
    var types = lookupTypes(argCount, argTypes);

    var retType = types[0];
    var signatureName = retType.name + "_$" + types.slice(1).map(function (t) { return t.name; }).join("_") + "$";

    var params = ["retType"];
    var args = [retType];

    var argsList = ""; // 'arg0, arg1, arg2, ... , argN'
    for (var i = 0; i < argCount - 1; ++i) {
        argsList += (i !== 0 ? ", " : "") + "arg" + i;
        params.push("argType" + i);
        args.push(types[1 + i]);
    }

    var functionBody =
        "return function (handle, name, destructors, args) {\n";

    for (var i = 0; i < argCount - 1; ++i) {
        functionBody +=
        "    var arg" + i + " = argType" + i + ".readValueFromPointer(args);\n" +
        "    args += argType" + i + ".argPackAdvance;\n";
    }
    functionBody +=
        "    var rv = handle[name](" + argsList + ");\n";
    for (var i = 0; i < argCount - 1; ++i) {
        if (types[i + 1]['deleteObject']) {
            functionBody +=
            "    argType" + i + ".deleteObject(arg" + i + ");\n";
        }
    }
    functionBody += 
        "    return retType.toWireType(destructors, rv);\n" +
        "};\n";

    params.push(functionBody);
    var invokerFunction = new_(Function, params).apply(null, args);
    return addMethodCaller(createNamedFunction(signatureName, invokerFunction));
}

function __emval_call_method(caller, handle, methodName, destructorsRef, args) {
    caller = methodCallers[caller];
    handle = requireHandle(handle);
    methodName = getStringOrSymbol(methodName);
    return caller(handle, methodName, allocateDestructors(destructorsRef), args);
}

function __emval_has_function(handle, name, classType) {
    handle = requireHandle(handle);
    name = getStringOrSymbol(name);
    classType = requireRegisteredType(classType, 'class wrapper filter');

    var filter = classType.registeredClass.instancePrototype[name];
    return (handle[name] instanceof Function) && (filter === undefined || handle[name] !== filter);
}

function __emval_typeof(handle) {
    handle = requireHandle(handle);
    return __emval_register(typeof handle);
}


if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}


run();

// {{POST_RUN_ADDITIONS}}






// {{MODULE_ADDITIONS}}



//# sourceMappingURL=c++simulator.js.map