<?php

/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.7
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

// Try to load our extension if it's not already loaded.
if (!extension_loaded('simulator')) {
  if (strtolower(substr(PHP_OS, 0, 3)) === 'win') {
    if (!dl('php_simulator.dll')) return;
  } else {
    // PHP_SHLIB_SUFFIX gives 'dylib' on MacOS X but modules are 'so'.
    if (PHP_SHLIB_SUFFIX === 'dylib') {
      if (!dl('simulator.so')) return;
    } else {
      if (!dl('simulator.'.PHP_SHLIB_SUFFIX)) return;
    }
  }
}



abstract class simulator {
	static function G_get() {
		return G_get();
	}

	static function force($arg1,$arg2,$arg3=null) {
		switch (func_num_args()) {
		case 2: $r=force($arg1,$arg2); break;
		default: $r=force($arg1,$arg2,$arg3);
		}
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new Vector3D($r);
		}
		return $r;
	}

	static function IsOverlapping($arg1,$arg2) {
		return IsOverlapping($arg1,$arg2);
	}

	static function new_ModelObjectPtr() {
		$r=new_ModelObjectPtr();
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new ModelObject($r);
		}
		return $r;
	}

	static function copy_ModelObjectPtr($value) {
		$r=copy_ModelObjectPtr($value);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new ModelObject($r);
		}
		return $r;
	}

	static function delete_ModelObjectPtr($obj) {
		delete_ModelObjectPtr($obj);
	}

	static function ModelObjectPtr_assign($obj,$value) {
		ModelObjectPtr_assign($obj,$value);
	}

	static function ModelObjectPtr_value($obj) {
		$r=ModelObjectPtr_value($obj);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new ModelObject($r);
		}
		return $r;
	}

	static function new_IndexedObjectPtr() {
		$r=new_IndexedObjectPtr();
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new IndexedModelObject($r);
		}
		return $r;
	}

	static function copy_IndexedObjectPtr($value) {
		$r=copy_IndexedObjectPtr($value);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new IndexedModelObject($r);
		}
		return $r;
	}

	static function delete_IndexedObjectPtr($obj) {
		delete_IndexedObjectPtr($obj);
	}

	static function IndexedObjectPtr_assign($obj,$value) {
		IndexedObjectPtr_assign($obj,$value);
	}

	static function IndexedObjectPtr_value($obj) {
		$r=IndexedObjectPtr_value($obj);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new IndexedModelObject($r);
		}
		return $r;
	}

	static function ptr_cast_ModelObject_to_IndexedModelObject($x) {
		$r=ptr_cast_ModelObject_to_IndexedModelObject($x);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new IndexedModelObject($r);
		}
		return $r;
	}
}

/* PHP Proxy Classes */
class PointMass {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'location') return PointMass_location_set($this->_cPtr,$value);
		if ($var === 'mass') return PointMass_mass_set($this->_cPtr,$value);
		if ($var === 'thisown') return swig_simulator_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __isset($var) {
		if (function_exists('PointMass_'.$var.'_set')) return true;
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __get($var) {
		if ($var === 'location') return new Vector3D(PointMass_location_get($this->_cPtr));
		if ($var === 'mass') return PointMass_mass_get($this->_cPtr);
		if ($var === 'thisown') return swig_simulator_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_Gravity__PointMass') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_PointMass();
	}
}

class Model {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_simulator_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_simulator_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	static function kTimeInterval() {
		return Model_kTimeInterval_get();
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_Model') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_Model();
	}

	function Update($arg1,$arg2,$arg3=null) {
		switch (func_num_args()) {
		case 2: Model_Update($this->_cPtr,$arg1,$arg2); break;
		default: Model_Update($this->_cPtr,$arg1,$arg2,$arg3);
		}
	}
}

class ModelObject {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_simulator_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_simulator_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __construct($arg1=null,$arg2=null,$arg3=null,$arg4=null,$arg5=null) {
		if (is_resource($arg1) && get_resource_type($arg1) === '_p_ModelObject') {
			$this->_cPtr=$arg1;
			return;
		}
		switch (func_num_args()) {
		case 0: $this->_cPtr=new_ModelObject(); break;
		case 1: $this->_cPtr=new_ModelObject($arg1); break;
		case 2: $this->_cPtr=new_ModelObject($arg1,$arg2); break;
		case 3: $this->_cPtr=new_ModelObject($arg1,$arg2,$arg3); break;
		case 4: $this->_cPtr=new_ModelObject($arg1,$arg2,$arg3,$arg4); break;
		default: $this->_cPtr=new_ModelObject($arg1,$arg2,$arg3,$arg4,$arg5);
		}
	}

	function Advance($arg1) {
		ModelObject_Advance($this->_cPtr,$arg1);
	}

	function position() {
		$r=ModelObject_position($this->_cPtr);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new Vector3D($r);
		}
		return $r;
	}

	function velocity() {
		$r=ModelObject_velocity($this->_cPtr);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new Vector3D($r);
		}
		return $r;
	}

	function force() {
		$r=ModelObject_force($this->_cPtr);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new Vector3D($r);
		}
		return $r;
	}

	function mass() {
		return ModelObject_mass($this->_cPtr);
	}

	function radius() {
		return ModelObject_radius($this->_cPtr);
	}

	function set_position($arg1) {
		ModelObject_set_position($this->_cPtr,$arg1);
	}

	function set_velocity($arg1) {
		ModelObject_set_velocity($this->_cPtr,$arg1);
	}

	function set_force($arg1) {
		ModelObject_set_force($this->_cPtr,$arg1);
	}

	function set_mass($arg1) {
		ModelObject_set_mass($this->_cPtr,$arg1);
	}
}

class IndexedModelObject extends ModelObject {
	public $_cPtr=null;

	function __set($var,$value) {
		if ($var === 'thisown') return swig_simulator_alter_newobject($this->_cPtr,$value);
		ModelObject::__set($var,$value);
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return ModelObject::__isset($var);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_simulator_get_newobject($this->_cPtr);
		return ModelObject::__get($var);
	}

	function __construct($arg1=null,$arg2=null,$arg3=null,$arg4=null,$arg5=null,$arg6=null) {
		if (is_resource($arg1) && get_resource_type($arg1) === '_p_IndexedModelObject') {
			$this->_cPtr=$arg1;
			return;
		}
		switch (func_num_args()) {
		case 0: $this->_cPtr=new_IndexedModelObject(); break;
		case 1: $this->_cPtr=new_IndexedModelObject($arg1); break;
		case 2: $this->_cPtr=new_IndexedModelObject($arg1,$arg2); break;
		case 3: $this->_cPtr=new_IndexedModelObject($arg1,$arg2,$arg3); break;
		case 4: $this->_cPtr=new_IndexedModelObject($arg1,$arg2,$arg3,$arg4); break;
		case 5: $this->_cPtr=new_IndexedModelObject($arg1,$arg2,$arg3,$arg4,$arg5); break;
		default: $this->_cPtr=new_IndexedModelObject($arg1,$arg2,$arg3,$arg4,$arg5,$arg6);
		}
	}

	function get_index() {
		return IndexedModelObject_get_index($this->_cPtr);
	}
}

class NBodySimulator {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_simulator_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_simulator_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	static function kDefaultTimeInterval() {
		return NBodySimulator_kDefaultTimeInterval_get();
	}

	static function kDefaultGravity() {
		return NBodySimulator_kDefaultGravity_get();
	}

	function Simulate($arg1,$arg2,$arg3=null) {
		switch (func_num_args()) {
		case 2: NBodySimulator_Simulate($this->_cPtr,$arg1,$arg2); break;
		default: NBodySimulator_Simulate($this->_cPtr,$arg1,$arg2,$arg3);
		}
	}

	function CalculateForcesBetweenBodies($arg1) {
		NBodySimulator_CalculateForcesBetweenBodies($this->_cPtr,$arg1);
	}

	function __construct($arg1=null,$arg2=null) {
		if (is_resource($arg1) && get_resource_type($arg1) === '_p_NBodySimulator') {
			$this->_cPtr=$arg1;
			return;
		}
		switch (func_num_args()) {
		case 0: $this->_cPtr=new_NBodySimulator(); break;
		case 1: $this->_cPtr=new_NBodySimulator($arg1); break;
		default: $this->_cPtr=new_NBodySimulator($arg1,$arg2);
		}
	}
}

class Vector3D {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_simulator_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_simulator_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __construct($arg1=null,$arg2=null,$arg3=null) {
		if (is_resource($arg1) && get_resource_type($arg1) === '_p_NVectorT_double_3_t') {
			$this->_cPtr=$arg1;
			return;
		}
		switch (func_num_args()) {
		case 0: $this->_cPtr=new_Vector3D(); break;
		case 1: $this->_cPtr=new_Vector3D($arg1); break;
		case 2: $this->_cPtr=new_Vector3D($arg1,$arg2); break;
		default: $this->_cPtr=new_Vector3D($arg1,$arg2,$arg3);
		}
	}

	function transform($arg1) {
		Vector3D_transform($this->_cPtr,$arg1);
	}

	static function dotProduct($arg1,$arg2) {
		return Vector3D_dotProduct($arg1,$arg2);
	}

	static function Distance($arg1,$arg2) {
		return Vector3D_Distance($arg1,$arg2);
	}

	function x() {
		return Vector3D_x($this->_cPtr);
	}

	function y() {
		return Vector3D_y($this->_cPtr);
	}

	function z() {
		return Vector3D_z($this->_cPtr);
	}

	function setX($arg1) {
		Vector3D_setX($this->_cPtr,$arg1);
	}

	function setY($arg1) {
		Vector3D_setY($this->_cPtr,$arg1);
	}

	function setZ($arg1) {
		Vector3D_setZ($this->_cPtr,$arg1);
	}
}

class ObjectList {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_simulator_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_simulator_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __construct($n=null) {
		if (is_resource($n) && get_resource_type($n) === '_p_std__vectorT_ModelObject_p_t') {
			$this->_cPtr=$n;
			return;
		}
		switch (func_num_args()) {
		case 0: $this->_cPtr=new_ObjectList(); break;
		default: $this->_cPtr=new_ObjectList($n);
		}
	}

	function size() {
		return ObjectList_size($this->_cPtr);
	}

	function capacity() {
		return ObjectList_capacity($this->_cPtr);
	}

	function reserve($n) {
		ObjectList_reserve($this->_cPtr,$n);
	}

	function clear() {
		ObjectList_clear($this->_cPtr);
	}

	function push($x) {
		ObjectList_push($this->_cPtr,$x);
	}

	function is_empty() {
		return ObjectList_is_empty($this->_cPtr);
	}

	function pop() {
		$r=ObjectList_pop($this->_cPtr);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new ModelObject($r);
		}
		return $r;
	}

	function get($i) {
		$r=ObjectList_get($this->_cPtr,$i);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new ModelObject($r);
		}
		return $r;
	}

	function set($i,$val) {
		ObjectList_set($this->_cPtr,$i,$val);
	}
}


?>
